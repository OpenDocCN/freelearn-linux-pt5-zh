- en: Chapter 10. FreeBSD and Command Line Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FreeBSD is the bedrock of the FreeNAS server. In this chapter, we will look
    at some simple FreeBSD commands and also some fundamental FreeBSD administration
    tasks, including stop and starting different services as well as controlling RAID
    from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to FreeBSD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every computer has what is known as an operating system that is a specialized
    software to control and manage the different resources in the computer including
    memory, video, networking, and hard disks. Some popular operating systems today
    include Microsoft Windows, Apple OS X, Linux, and FreeBSD.
  prefs: []
  type: TYPE_NORMAL
- en: As an operating system, FreeBSD has a very respectable heritage and can trace
    its parentage to the original UNIX operating system of the late 1970's. Version
    1 of FreeBSD saw the light of day in the 1993 and as such has had over 15 years
    of development. The result is a stable, robust, well-designed, and scalable operating
    system that can compete with the best.
  prefs: []
  type: TYPE_NORMAL
- en: At its core, FreeBSD is a terminal or console-based operating system. This means
    that you don't need a fancy graphics card, a high-resolution monitor, and an optical
    mouse to run FreeBSD. All commands are executed by typing them at the keyboard
    and hitting *ENTER*. This is essential when FreeBSD is being used as a server.
    Servers traditionally don't have powerful graphic capabilities and often don't
    even have a monitor attached to them. So, the ability to be able to connect and
    administer the server using simple command line tools is very important.
  prefs: []
  type: TYPE_NORMAL
- en: As well as being a solid server operating system, FreeBSD also serves as a desktop
    OS and comes with a full windowing desktop environment.
  prefs: []
  type: TYPE_NORMAL
- en: Your First FreeBSD Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to get to the FreeBSD command line is via the FreeNAS console
    menu. With FreeNAS up and running, go to the FreeNAS machine and press *ENTER*
    to make the splash screen disappear and the console menu will appear. Option 6
    is for Shell, so type 6 and press ENTER.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now see a prompt like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Print the Working Directory with pwd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is FreeBSD! To run your first FreeBSD command type `pwd` and press ENTER.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`pwd` means Print Working Directory. This tells you your current folder. In
    this case, it is the folder called `root`. In FreeBSD, the administrator user
    is known as root. When you connect to FreeBSD via the FreeNAS console, you are
    automatically logged in as root and you have full administration rights. The `/root`
    folder is the home directory for the user root.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Consider Disabling the Console Menu**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, by default, the console gives you unfettered access to the
    FreeBSD command line and gives you full administrator rights from the go. If your
    FreeNAS server is in an environment where others can access the console menu then
    you should consider disabling the console (on the **System: Advanced** page in
    the web interface). This will stop unauthorized and potentially dangerous access
    to your FreeNAS server.'
  prefs: []
  type: TYPE_NORMAL
- en: With the console menu disabled, you will still be able to access the FreeBSD
    command line via the SSH protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Directory Listings (ls)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To see the contents of the current folder, you use the `ls` (list) command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: By default, there isn't very much in the `/root` folder. Here, we can see that
    there are 4 files. Notice that they all start with a dot. This means they are
    hidden files but because you are the administrator, hidden files are shown by
    default. If a normal user uses the `ls` command then the files starting with dot
    are not shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get more information about the files like their size and their read/write
    permissions, use the `-l` (long format) option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This long format shows more information about each of the files starting with
    the file permissions, number of links, owner name, group name, size of the file
    in bytes, the date and time the file was lost or modified, and of course, the
    file name.
  prefs: []
  type: TYPE_NORMAL
- en: The file permissions field can look a little complicated but it is easy to understand
    with a little guidance. The field, if made up of 10 flags, which are either a
    letter, like r or w, or the hyphen sign (-).
  prefs: []
  type: TYPE_NORMAL
- en: '| File type(1 flag) | User permissions(3 flags) | Group permissions(3 flags)
    | Other permissions(3 flags) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| d for directory, - for a regular file. | r, w, and x meaning user readable,
    user writable, and user executable. | r, w, and x meaning group readable, group
    writable and group executable. | r, w, and x meaning world readable, world writable,
    and world executable. |'
  prefs: []
  type: TYPE_TB
- en: For example, the above directory list contains an entry for the `.cshrc file`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This means that it is a regular file (as the first flag is `-`) and that it
    is readable and writable by the user, but not executable (`rw-`). It is normal
    that the file isn't executable as it isn't a program file. The group permissions
    (`r--`) mean that users in the same group (wheel) can read the file but can't
    write to it and the same is true of other users (`r--`).
  prefs: []
  type: TYPE_NORMAL
- en: Change Directory with cd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To complete the simple file system commands, there is the `cd` (change directory)
    command. This will change the current working directory to another directory as
    specified. To change directory to the very top of the file system you would type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: From here, you can see all the folders that exist below the top, in a tree like
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To move to another directory, you just enter `cd` followed by its name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, deeper still:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To go back up a directory level, use the special name :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also go directly to a deep folder by specifying its full path in the
    `cd` command. Before that, we changed directory into the `/usr` directory and
    then deeper down into the `bin` directory. To do that in one go type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Copy a File and Change Its Permissions (cp and chmod)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To copy a file, you need to use the `cp` (copy) command. To copy the `.cshrc`
    file to `test`, you would type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `ls` command afterwards, shows that the file has been copied. To
    see the file permissions of the file `test` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To change the file so that only the user has read and write permissions and
    the no others (including those in the same group) can read it, use the `chmod`
    (change file mode) command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`chmod` takes two parameters: the first is a 3 digit number representing the
    file permissions you wish to set, and the second is the name of the file or directory
    you wish to change. Each digit represents the file permissions for either the
    user, group or world (in that order).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The numbers for the file permissions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| File permission | Flags | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | --- | Nothing, no Read, Write or Execute |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | --x | Execute |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | -w- | Write |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | -wx | Execute & Write |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | r-- | Read |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | r-x | Execute & Read |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | rw- | Read & Write |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | rwx | Execute & Read & Write |'
  prefs: []
  type: TYPE_TB
- en: Therefore, setting the file permission to 600 means read and write for the user
    and nothing for the group or world (rw-------). Similarly 640 means read and write
    for the user, read for the group, and nothing for others (rw-r-----). The most
    open you can make a file is 777, which grants read, write, and executable permission
    to user, group, and world (rwxrwxrwx ).
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, chmod all takes a -R flag that can be used on a directory and will
    cause chmod to set the file permission of all the file and subfolders of the directory.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to FreeBSD Using Putty
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get access to the FreeBSD command line, without using the console, you can
    connect to the FreeNAS server via SSH.
  prefs: []
  type: TYPE_NORMAL
- en: SSH (Secure Shell) is a network protocol that allows data to be exchanged over
    an encrypted (secure) channel between two computers. It is most commonly used
    as a secure command line interface to a remote computer. This means that you can
    access the command line interface of the FreeNAS server from a remote computer
    without having to have access to the keyboard and monitor of the FreeNAS server.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, SSH access is disabled, to enable it, go to **Services: SSHD**
    and enable the **SSH Daemon** (server) by ticking **Enable** in the title of the
    configuration data table. Click **Save and Restart** to start the SSH server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of SSH users on the FreeNAS server. The first is the normal
    user without administrator access. For each user created on the **Access: Users**
    page, you can enable Full Shell access that will allow the users to connect and
    use the FreeBSD command line on the server via SSH.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second type of user is root. By default, root is not allowed to log in
    to the FreeNAS server via SSH. To allow root to log in, go to **Services: SSHD**
    and tick **Permit root login**. Then click **Save and Restart** to finish start
    the SSH server.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Root Password**'
  prefs: []
  type: TYPE_NORMAL
- en: The root password is the same as the web interface password, which by default
    is *freenas*. If the web interface password is changed, so does the root password.
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect via SSH on Linux or Apple OS X, you can use the SSH command line
    program. So, to connect to the FreeNAS server, you would use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `-l` parameter allows you to specify the user name which in this case was
    root.
  prefs: []
  type: TYPE_NORMAL
- en: Windows doesn't come with a SSH utility by default so you need to use a free
    utility called PuTTY. PuTTY is a great tool written by Simon Tatham.
  prefs: []
  type: TYPE_NORMAL
- en: You can download PuTTY from [http://www.chiark.greenend.org.uk/~sgtatham/putty/](http://www.chiark.greenend.org.uk/~sgtatham/putty/)
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to FreeBSD Using Putty](img/4688_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once downloaded, double click on the executable (there is no installer for PuTTY,
    you just use the downloaded file). The main PuTTY window has lots of options but
    all you need to do to use it is enter the IP address of the FreeNAS server in
    the Host Name field in the top half of the window. Leave everything else as it
    is and click Open. A window with a black background will appear. If this is the
    first time you have connected to this FreeNAS server using PuTTY, you will also
    be asked if you trust the machine to which you have connected. Click Yes.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the login as: prompt type root and press *ENTER* and then enter the password
    which will be the same as the web interface password. You will then see the, hopefully
    now, familiar *freenas*:~# prompt.'
  prefs: []
  type: TYPE_NORMAL
- en: From herein, you have access to FreeBSD as you did from the console menu shell.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring your FreeNAS Server from the Command Line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FreeBSD contains several tools for system monitoring including monitoring the
    disk space and the system processes.
  prefs: []
  type: TYPE_NORMAL
- en: See Which Disks are Mounted with mount
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To see which disks are mounted on the FreeNAS server, use the `mount` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This yields the same output as the **Diagnostics: Information: Mounts** page
    on the web interface. Each device is listed along with its mount point and what
    type of filing system it is and any options. From the above, we can see the top
    most directory/(also refereed to as root but not to be confused with the user
    root) that contains the FreeBSD and FreeNAS software is on the first IDE drive
    (ad0). We can also see that this FreeNAS server has a raid5 configuration mounted
    on /mnt/raid.'
  prefs: []
  type: TYPE_NORMAL
- en: Check Disk Space Usage with df
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another useful command (which is also available on the web interface at **Diagnostics:
    Information: Space Used** ) is the df command. df shows the disk space usage.
    It has an optional parameter `-h` (the human readable flag), which makes the output
    more friendly.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Each filesystem is listed with its total size, space used, space available,
    and what percentage of the disk is used.
  prefs: []
  type: TYPE_NORMAL
- en: Discover the Size of Directories Using du
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another very useful command which isn't included in the web interface is the
    *du* command. The *du* command displays the disk space usage for each file and
    for each folder given including the subfolders or for the current folder if none
    is given.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the example above, we see that the RAID 5 array has 239MB used. If we
    change directory into `the /mnt/raid5` directory and then run the `du` command
    (with the `-h` flag for human readability and `-s` for summary) we see that the
    239MB listed in the `df` command is also listed from the `du` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `/mnt/raid5`, there is a folder called `pictures`, to discover how
    much disk space is used by the pictures folder use the `du` command, either by
    changing directory to that folder or specifying it directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Process Monitoring Using ps and top
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: FreeBSD is able to run many programs at the same time. The FreeNAS server includes
    a web server, an FTP server, and a SSH server etc which all run at the same time.
    Each of these programs runs as a separate process. Each process uses time on a
    system's CPU, as well as other system resources such as memory and disk space.
    If a program goes wrong, it can start to use too much CPU time or memory and so
    deny other programs the resources they need to run. There are some FreeBSD commands
    to monitor the status of the process running on your server.
  prefs: []
  type: TYPE_NORMAL
- en: '`ps` shows the current processes running on the machine. `ps` has many different
    options, but one of the most useful invocations is `ps aux`, which shows every
    process on the system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A normal FreeNAS server will have some 60 to 70 processes running after boot
    up, so the output from the `ps` command can be quite long. Here are the first
    few lines from a FreeNAS server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a brief explanation of each of the columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Column | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| USER | This is the name of the user that owns the processes. |'
  prefs: []
  type: TYPE_TB
- en: '| PID | Each process has a unique process ID (or PID for short). |'
  prefs: []
  type: TYPE_TB
- en: '| %CPU | Shows the CPU utilization of the process. It is a decaying average
    over up to a minute of previous (real) time. |'
  prefs: []
  type: TYPE_TB
- en: '| %MEM | This is the amount of the physical memory the process is using. |'
  prefs: []
  type: TYPE_TB
- en: '| VSZ | Shows the virtual memory size of the process in kilobytes. |'
  prefs: []
  type: TYPE_TB
- en: '| RSS | This is similar to VSZ, but rather than virtual memory size, RSS shows
    how much non-swapped, physical memory the process is using in kilobytes. |'
  prefs: []
  type: TYPE_TB
- en: '| TT | The controlling terminal. Means there isn''t one. |'
  prefs: []
  type: TYPE_TB
- en: '| STAT | The status of the process, where S means the process is sleeping and
    can be woken at any time, L means the process is waiting to acquire a lock. R
    marks a runnable process. |'
  prefs: []
  type: TYPE_TB
- en: '| STARTED | Shows when the process was started. |'
  prefs: []
  type: TYPE_TB
- en: '| TIME | Is the accumulated CPU time. This includes time spent running the
    processes and time spent in the kernel on behalf of that process. |'
  prefs: []
  type: TYPE_TB
- en: '| COMMAND | Shows the command which was given to launch the program. |'
  prefs: []
  type: TYPE_TB
- en: 'Finding a specific process in such a long list can be a problem. To help, you
    can use the grep command to look for matches in the text. For example, to look
    for the ftp server process, use the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: When you run it, the `grep` command itself will be shown (in this case PID 1407)
    as it matches the string we are looking for, namely ftp. But of course, it isn't
    part of the ftp service.
  prefs: []
  type: TYPE_NORMAL
- en: While `ps` shows only a snapshot of the system process, the `top` program provides
    a dynamic real-time view of a system. It displays a system summary (with CPU usage,
    memory usage, and other statistics) as well as a list of running processes that
    changes dynamically as the system is in use. It lists the processes using the
    most CPU first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The bottom part of the output is similar to the output from the `ps` command.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced FreeBSD Commands for FreeNAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, we have really been in read-only mode as far as using the underlying
    FreeBSD system. We have looked and monitored but we haven't actually changed anything.
    That is about to change.
  prefs: []
  type: TYPE_NORMAL
- en: Starting and Stopping Services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will have probably noticed that many of the configuration pages on the web
    interface say **Save and Restart**. This is because many of the FreeNAS server
    components need to restart to accept new configurations. As such, it is also possible
    to restart a service manually using the command line. This might be necessary
    if a particular service, for example the FTP server or the AFP server stopped
    responding (this isn't a slur on the FTP server or the AFP server, just merely
    an example).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the command line, it is possible to start, stop, and restart each individual
    service. All of the scripts to control the various services are kept in `/etc/rc.d`
    and to manage a service, you call the respective script directly from that directory.
    To restart the AFP service, you would type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart is not the only command that is accepted by the scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| start | Starts the service. If the service is already running, no action
    will be taken. |'
  prefs: []
  type: TYPE_TB
- en: '| stop | Stop the service. If the service isn''t running, nothing will happen.
    |'
  prefs: []
  type: TYPE_TB
- en: '| restart | Performs a stop and then a start. If the service isn''t running,
    the stop will fail but the script will continue to start the service. |'
  prefs: []
  type: TYPE_TB
- en: '| status | Shows if the service is running. |'
  prefs: []
  type: TYPE_TB
- en: 'Here is a table of the possible services you can start and stop:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Service description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| afpd | The Apple Filing Protocol Daemon. This provides the connectivity to
    Apple Mac computers. |'
  prefs: []
  type: TYPE_TB
- en: '| lighttpd | The built-in web server for the web interface. |'
  prefs: []
  type: TYPE_TB
- en: '| mediatomb.sh | The UPnP server. |'
  prefs: []
  type: TYPE_TB
- en: '| nfsd | The NFS server for sharing files with UNIX type clients. |'
  prefs: []
  type: TYPE_TB
- en: '| nfslocking | Part of the NFS server and needs to be controlled separately.
    |'
  prefs: []
  type: TYPE_TB
- en: '| pureftpd | The FTP server. |'
  prefs: []
  type: TYPE_TB
- en: '| rsync_client | The RSYNC client. |'
  prefs: []
  type: TYPE_TB
- en: '| rsync_local | The local RSYNC client for synchronization between two local
    disks. |'
  prefs: []
  type: TYPE_TB
- en: '| rsyncd | The RSYNC server. |'
  prefs: []
  type: TYPE_TB
- en: '| samba | The CIFS/SMB server for Windows connectivity. |'
  prefs: []
  type: TYPE_TB
- en: '| smartd | The hard disk monitoring service. |'
  prefs: []
  type: TYPE_TB
- en: '| sshd | The secure shell service. |'
  prefs: []
  type: TYPE_TB
- en: '| unison | The unison synchronization service. |'
  prefs: []
  type: TYPE_TB
- en: Getting Drastic with kill and killall
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `kill` command attempts to shut down a running process. In FreeBSD, a process
    is stopped when the operating system sends it a signal telling it to shut down.
    The default signal for `kill` is TERM (signal 15), meaning software terminate.
    When the process receives the signal, it should shut down in an orderly way. If
    the process has become rogue, chances are that it won't respond to being told
    politely to shut down. In that case, you have to send the KILL signal (signal
    9 for short). So to kill off a running process (e.g. process 1234) we would use
    `kill -9 1234`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `killall` command kills running processes by name rather than by PID. This
    has the advantage that to kill a process you don''t need to look for the PID using
    the `ps` command. As with `kill, killall` takes a signal parameter, and `-9` is
    used to terminate the processes. So to kill off all the ftp processes you would
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: One thing to note about `killall` is that you need to specify the exact name
    of the process, using `killall -9 pure or killall -9 ftp` will not stop the FTP
    server.
  prefs: []
  type: TYPE_NORMAL
- en: A couple of useful parameters to `killall` are `-s` and `-v`.
  prefs: []
  type: TYPE_NORMAL
- en: '`-s` will show only what would be done, but does not send any signal.'
  prefs: []
  type: TYPE_NORMAL
- en: '`-v` will show a similar output to that of `-s` but will actually send the
    signal while reporting what has been done.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: RAID Command Line Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reading the FreeNAS support forums on sourceforge.net seem to show that a fair
    percentage of users have troubles with RAID configurations. The RAID software
    in FreeNAS is of the highest quality but things can go wrong. All the RAID functions
    (and more) that are available in the web interface are available on the command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each different type of RAID level (RAID 0, RAID 1, and so on) uses a different
    command as it is a specialized program to deal with that RAID level. A utility
    to manage RAID 1 sets knows nothing RAID 5 and vice-versa. The RAID utilities
    are: gconcat, gstripe, gmirror, and graid5.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A word of warning before starting. With the command line, you have complete
    freedom to manage and control your RAID sets. But this also means you have complete
    freedom to wreck your RAID sets. Be careful that you don't destroy your RAID sets
    by mistake. If you are uncomfortable with managing the RAID sets via the command
    line, you should return to using the web interface as that offers some level of
    protection.
  prefs: []
  type: TYPE_NORMAL
- en: Another possible problem is that the web interface can become out-of-sync with
    the current server configuration when you are using the command line. In one sense
    it is like doing things behind the back of the web interface and it doesn't know
    what has changed. For example if disk *da0* fails in a RAID set, and another disk
    *da1* is added to the system and that disk is used to repair the RAID array, then
    although the RAID will function correctly, the web interface will know nothing
    about the disk *da1*. At its worst, this is just an annoyance, especially if the
    new disk *da1* saved your valuable data.
  prefs: []
  type: TYPE_NORMAL
- en: List and Status Commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although each of the utilities for managing RAID levels is different, they do
    have some common commands. Every utility accepts the `list` and `status` commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `status` command provides a short summary of the disks that make up the
    RAID set and the current status of the RAID set. Here is the example output of
    status for a RAID 5 array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: From this, we can see that the RAID5 is COMPLETE (no disks missing), which also
    means it isn't rebuilding, and that disks *da0, ad3*, and *ad1* make up the RAID
    set.
  prefs: []
  type: TYPE_NORMAL
- en: The output from the list command is more comprehensive and in many ways is debug
    information. When your RAID array is working well, this information isn't very
    interesting, but when you are having troubles with your RAID set, this information
    can be very valuable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the list information for a RAID 5, you would type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'I have split the output into different sections to aid easier reading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This first section shows us that this RAID set is called `myraid5` and that
    it is `COMPLETE` and `CALM`. It is made up of 3 disks of which all 3 are online.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The next section shows different internal information about how the RAID set
    is implemented. Each RAID level will have different information in this section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This section shows us what this RAID set provides for the system. It provides
    a RAID 5 array that is 4 Gigabytes in size.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The consumers are the disks that are used to make this RAID set. The disk name
    is listed along with its size, disk number (the order the disks are used in),
    and its error state.
  prefs: []
  type: TYPE_NORMAL
- en: JBOD and gconcat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Because JBOD (Just a Bunch of Disks) doesn''t offer any kind of protection
    against disk failure, there isn''t much that can be done on the command line.
    The status of the JBOD array can be checked using `gconcat status` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: It is possible to create, format, and mount JBOD arrays completely from the
    command line but it is of little value as the web interface will know nothing
    about the newly created array and as such it can be used (via the web interface).
    Also, because the array isn't saved in the FreeNAS configuration it will be forgotten
    when the machine is rebooted.
  prefs: []
  type: TYPE_NORMAL
- en: RAID 0 and gstripe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like JBOD, RAID 0 doesn''t provide any protection against disk failure and
    so there is little that can be done on the command line. The status of the RAID
    0 array can be checked using the `gstripe status` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: It is possible to create, format, and mount RAID1 arrays completely from the
    command line but it is of little value as the web interface will know nothing
    about the newly created array and as such, it can be used (via the web interface).
    Also, because the array isn't saved in the FreeNAS configuration, it will be forgotten
    when the machine is rebooted.
  prefs: []
  type: TYPE_NORMAL
- en: RAID 1 and gmirror
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: RAID 1 (mirroring) is the first of the 4 basic RAID levels provided by FreeBSD/FreeNAS
    that offers some kind of protection against disk failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output from gmirror status when one of the disks (da0) from the
    mirror set is missing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The steps to rebuild a mirror array are the same as those set down is chapter
    9\. The command line can be used to rebuild the array rather than the web interface.
    Once the new disk has been put back into the system, you need to use the `forget`
    command. This command sounds a bit harsh but don't worry it isn't going to forget
    the whole mirror set, only the drives that are not currently available. Having
    issued the forget command, you can insert the new disk and the array will rebuild.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the mirror set is rebuilt, the status will be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: RAID 5 and graid5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The procedure to repair a RAID 5 array after disk failure is exactly the same
    as described in chapter 9 but this time we will use the command line rather than
    the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the status command, we can see that there is a problem with this array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The disk `da0` is missing and the RAID is running in a degraded state. Having
    replaced the disk, we are ready to synchronize it with the other disks in the
    RAID set.
  prefs: []
  type: TYPE_NORMAL
- en: The new disk needs to be placed back into the array. This is done using the
    `graid5 insert` command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The array will now start rebuilding. You can check that it is rebuilding by
    using the `graid5 status` command again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Once the array is rebuilt, it will return to its `COMPLETE` status.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Where the FreeNAS Stores Things
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several places like /etc/rc.d where the FreeNAS server stores important
    files. Here is a summary of some key directories from FreeBSD that the FreeNAS
    server uses.
  prefs: []
  type: TYPE_NORMAL
- en: '| Directory | Importance |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| /root | The home directory of the root user |'
  prefs: []
  type: TYPE_TB
- en: '| /mnt | All disks and RAID sets are mounted under this directory |'
  prefs: []
  type: TYPE_TB
- en: '| /bin & /usr/bin | Store all the user runnable utilities like *chmod* and
    *kill* |'
  prefs: []
  type: TYPE_TB
- en: '| /sbin & /usr/sbin | Store all the root runnable utiliteis like the RAID utilities
    |'
  prefs: []
  type: TYPE_TB
- en: '| /etc | This directory contains the various configuration files needed by
    FreeNAS. Many of them are created at bootup. |'
  prefs: []
  type: TYPE_TB
- en: '| /usr/local/www | Here are the web pages for the FreeNAS web interface. |'
  prefs: []
  type: TYPE_TB
- en: '| /var/log | Here and in directories below it are all the log files stored
    by the FreeNAS server. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the embedded version of FreeNAS only runs from RAM (and is initially
    loaded from the hard disk or USB flash disk) and any changes made to the operating
    system files will only be temporary, and when the system is rebooted it will return
    to its original state.
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous & Sundries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a variety of commands that can be useful when using the command line
    but they aren't quite big enough to warrant a section of their own, so I have
    grouped them all together here.
  prefs: []
  type: TYPE_NORMAL
- en: Using ping and arp from the Command Line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In chapter 9, we looked at the ping and arp commands. These are available from
    the web interface but they are also available from the command line. To ping another
    machine from the command line type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The ping command is a bit different to that of other platforms (like Windows)
    in that it will keep on pinging until you press *CTRL+C* and then it will stop.
    Alternatively, you can use the `-c` parameter that sends only the specified number
    of pings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, to look at the arp tables type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Creating Directories and Deleting Things
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Earlier on, we looked at some simple file system command like change directory
    (cd), print working directory (pwd), and copy (cp). Here are a few more commands
    that you might find useful when working with the file system from the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| mv | Move a file from one place to another, which also has the effect of
    doing a rename. eg. *mv oldfilename newfilename* |'
  prefs: []
  type: TYPE_TB
- en: '| mkdir | Create a directory. eg. *mkdir temp* |'
  prefs: []
  type: TYPE_TB
- en: '| rmdir | Remove a directory. The directory must be empty. eg. *rmdir temp*
    |'
  prefs: []
  type: TYPE_TB
- en: '| rm | Remove (delete) a file. eg. *rm deleteme* |'
  prefs: []
  type: TYPE_TB
- en: '| rm -rf | Remove (delete) a non empty directory and delete all the file and
    sub directories in it. Use with care! eg. *rm -rf goodbyeworld* |'
  prefs: []
  type: TYPE_TB
- en: Editing Files Using nano
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Included in the FreeNAS software is a small text editor called nano. Provided
    by GNU, nano is small and friendly. Besides basic text editing, nano offers many
    extra features like an interactive search and replace, go to line and column number,
    auto-indentation, feature toggles, internationalization support, and filename
    tab completion.
  prefs: []
  type: TYPE_NORMAL
- en: 'To edit a file, say a text file on one of your disks you would type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The basic keys are displayed at the bottom of the text editor to help you quickly
    find the key you need. This is especially handy if you are not familiar with the
    editor. The ^ symbol means press the *CTRL* key and the letter mentioned at the
    same time, so ^X means *CTRL+X*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic keys include:'
  prefs: []
  type: TYPE_NORMAL
- en: ^O WriteOut (Save)
  prefs: []
  type: TYPE_NORMAL
- en: ^R Read File
  prefs: []
  type: TYPE_NORMAL
- en: ^Y Prev Page
  prefs: []
  type: TYPE_NORMAL
- en: ^X Exit
  prefs: []
  type: TYPE_NORMAL
- en: ^J Justify
  prefs: []
  type: TYPE_NORMAL
- en: ^V Next Page
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get more information on nano at: [http://www.nano-editor.org/](http://www.nano-editor.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: Shutting Down Using the Command Line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are now at the last section of the last chapter this book and as the book
    draws to an end, it seems appropriate to show you how to shutdown the FreeNAS
    server from the command line. To shutdown the server, use the `shutdown` command.
    Used with the `-p` parameter, the server will be shut down and powered off (if
    the hardware supports it) and with `-r` the server will be rebooted. The command
    also needs a time on when to shutdown, and for immediate shutdowns use the word
    `now`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t want to shutdown now but want to schedule the shutdown for some
    time in the future then you can change the word `now` to be a number of minutes
    until shutdown with a plus sign in front. So to shutdown in 5 minutes from now
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Finally, if you want to schedule a shutdown for a certain day at a certain time
    then the time of shutdown can be specified as *yymmddhhmm* if you leave out the
    *yymmdd* then the time will be take to be today.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shutdown at 23:15 tonight is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'And to shutdown on the 1^(st) May 2009 at 22:30 (which happens to be a Friday)
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at FreeBSD. We have covered the basic commands
    for file manipulation as well as some more complex commands for managing processing
    including starting and stopping the various FreeNAS services. We also looked at
    commands for managing RAID sets.
  prefs: []
  type: TYPE_NORMAL

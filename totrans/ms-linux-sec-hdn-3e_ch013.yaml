- en: 12 Scanning, Auditing, and Hardening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Join our book community on Discord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file74.png)'
  prefs: []
  type: TYPE_IMG
- en: A common misconception is that Linux users never need to worry about malware.
    Yes, it's true that Linux is much more resistant to viruses than Windows is. But
    viruses are only one type of malware, and other types of malware can be planted
    on Linux machines. And, if you're running a server that will share files with
    Windows users, you'll want to make sure that you don't share any virus-infected
    files with them.
  prefs: []
  type: TYPE_NORMAL
- en: While Linux system log files are nice, they don't always give a good picture
    of who does what or who accesses what. It could be that either intruders or insiders
    are trying to access data that they're not authorized to access. What we really
    want is a good auditing system to alert us when people do things that they're
    not supposed to do.
  prefs: []
  type: TYPE_NORMAL
- en: And then there's the issue of regulatory compliance. Your organization may have
    to deal with one or more regulatory bodies that dictate how you harden your servers
    against attacks. If you're not in compliance, you could be fined or put out of
    business.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, we have ways to deal with all of these issues, and they aren't
    all that complicated.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and updating ClamAV and maldet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning with ClamAV and maldet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SELinux considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning for rootkits with Rootkit Hunter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing quick malware analysis with strings and VirusTotal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the `auditd` daemon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating audit rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `ausearch` and `aureport` utilities to search the audit logs for problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `inotifywait` for quick and easy auditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oscap`, the command-line utility for managing and applying OpenSCAP policies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSCAP Workbench, the GUI utility for managing and applying OpenSCAP policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSCAP policy files and the compliance standards that each of them is designed
    to meet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying a policy during operating system installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're ready, let's begin by looking at a Linux-based virus scanning solution.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and updating ClamAV and maldet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can get all the nitty-gritty details about LMD at [https://www.rfxn.com/projects/linux-malware-detect/](https://www.rfxn.com/projects/linux-malware-detect/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The reason that we're installing ClamAV and LMD together is that, as the LMD
    folk freely admit, the ClamAV scan engine gives much better performance when scanning
    large file sets. Also, by having them both together, ClamAV can use the LMD malware
    signatures as well as its own malware signatures.
  prefs: []
  type: TYPE_NORMAL
- en: Just to be clear...
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Viruses are a real problem for computers that run the Windows operating system.
    But, as far as anyone has been able to tell, there's no such thing as a virus
    that can harm a Linux-based operating system. So, the only real reason to run
    an antivirus solution on a Linux machine is to prevent infecting any Windows machines
    on your network. This means that you don't need to worry about installing an antivirus
    product on your Linux-based DNS servers, DHCP servers, and so forth. But, if you
    have a Linux-based email server, Samba server, download server, or any other Linux-based
    machine that shares files with Windows computers, then installing an antivirus
    solution is a good idea.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: All right, so much for the theory. Let's get our hands dirty, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – installing ClamAV and maldet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll begin by installing ClamAV. (It''s in the normal repository for Ubuntu,
    but not for CentOS or AlmaLinux. For CentOS and AlmaLinux, you''ll need to install
    the EPEL repository, as I showed you in *Chapter 1*, *Running Linux in a Virtual
    Environment*.) We''ll also install `wget`, which we''ll use to download LMD. For
    this lab, you can use Ubuntu, CentOS 7, or either version of AlmaLinux. Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command will install ClamAV, `inotify-tools` and `wget` on Ubuntu:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command will install ClamAV, `inotify-tools`, and `wget` on CentOS
    7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For AlmaLinux 8 or AlmaLinux 9, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that if you chose the **Minimal** installation option when creating a CentOS
    or an AlmaLinux virtual machine (VM), you may also have to install the `perl`
    and the `tar` packages.
  prefs: []
  type: TYPE_NORMAL
- en: For Ubuntu, the `clamav` package contains everything you need. For CentOS or
    AlmaLinux, you'll need to also install `clamav-update` in order to obtain virus
    updates.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the steps will be the same for either VM.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you'll download and install LMD.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, you''ll want to do something that I rarely tell people to do. That is,
    you''ll want to log in to the root user shell. The reason is that, although the
    LMD installer works fine with `sudo`, you''ll end up with the program files being
    owned by the user who performed the installation, instead of by the root user.
    Performing the installation from the root user''s shell saves us the trouble of
    tracking down those files and changing the ownership. So, download the file as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, you'll have the file in the root user's home directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract the archive and enter the resultant directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the installer. Once the installer finishes, copy the `README` file to your
    own home directory so that you can have it for ready reference. (This `README`
    file is the documentation for LMD.) Then, exit from the root user''s shell back
    to your own shell:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you see, the installer automatically creates the symbolic link that enables
    the `maldet` service, and it also automatically downloads and installs the newest
    malware signatures.
  prefs: []
  type: TYPE_NORMAL
- en: 'For CentOS or AlmaLinux, the `maldet.service` file that the installer copied
    to the `/lib/systemd/system/` directory has the wrong SELinux context, which will
    prevent `maldet` from starting. Correct the SELinux context like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You've reached the end of the lab – congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – configuring maldet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In previous versions, maldet was configured by default to automatically monitor
    and scan users'' home directories. In its current version, the default is for
    it to only monitor the `/dev/shm/`, `/var/tmp/`, and `/tmp/` directories. We''re
    going to reconfigure it so that we can add some directories. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `/usr/local/maldetect/conf.maldet` file for editing. Find these two
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Change them to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'At the top of the file, enable email alerts and set your username as the email
    address. The two lines should now look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'LMD isn''t already configured to move suspicious files to the `quarantine`
    folder, and we want to make it do that. Further down in the `conf.maldet` file,
    look for the line that says:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You'll see a few other quarantine actions that you can configure, but, for now,
    this is all we need.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Save the `conf.maldet` file, because that's all the changes that we need to
    make to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open the `/usr/local/maldetect/monitor_paths` file for editing. Add the directories
    that you want to monitor, like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Since viruses affect Windows and not Linux, just monitor the directories with
    files that will be shared with Windows machines.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'After you save the file, start the `maldet` daemon:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can add more directories to the `monitor_paths` file at any time, but remember
    to restart the `maldet` daemon any time that you do, in order to read in the new
    additions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You've reached the end of the lab – congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's talk about keeping ClamAV and maldet updated.
  prefs: []
  type: TYPE_NORMAL
- en: Updating ClamAV and maldet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The good news for busy admins is that you don''t have to do anything to keep
    either of these updated. To verify that they are getting updated, we can look
    in the system log file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You'll see these same entries in either the Ubuntu logs, the CentOS logs, or
    the AlmaLinux logs. However, there is a difference between how the updates get
    run automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look in the `/lib/systemd/system/` directory of your Ubuntu or AlmaLinux VMs,
    and you’ll see the `clamav-freshclam.service` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This service is automatically enabled and started on Ubuntu, but you’ll need
    to enable and start it yourself on AlmaLinux, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Without a `freshclam.conf` configuration file, AlmaLinux just runs the update
    service every two hours. Ubuntu, on the other hand, uses the `/etc/clamav/freshclam.conf`
    file to change the update interval to every hour, as you see at the bottom of
    the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you have the crypto policy set to `FUTURE` mode on your AlmaLinux 8/9 machine,
    the ClamAV database update won’t work. That’s because the ClamAV site uses a security
    certificate that’s not compatible with `FUTURE` mode. So, if you want to run ClamAV
    on any type of RHEL 8 or 9 machine, you’ll just have to leave the crypto policy
    set to `DEFAULT` mode.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'On your CentOS 7 machine, you''ll see a `clamav-update` `cron` job in the `/etc/cron.d/`
    directory that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `*/3` in the second column from the left indicates that ClamAV will check
    for updates every three hours. You can change that if you like, but you'll also
    need to change the setting in the `/etc/sysconfig/freshclam` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that you want CentOS 7 to also check for ClamAV updates every hour.
    In the `cron` job file, change `*/3` to `*`. (You don''t need to do `*/1` because
    the asterisk by itself in that position already indicates that the job will run
    every hour.) Then, in the `/etc/sysconfig/freshclam` file, look for this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Uncomment that line and add the number of minutes that you want between updates.
    To set it to 1 hour, so that it matches the `cron` job, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: A disabled `clamav-freshclam.service` file also gets installed on CentOS 7\.
    If you’d rather use the service instead of the `cron` job, just delete the `/etc/cron.d/clamav-update`
    file, and then enable the `clamav-freshclam` service.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To prove that `maldet` is being updated, you can look in its own log files
    in the `/usr/local/maldetect/logs/` directory. In the `event_log` file, you''ll
    see these messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `/usr/local/maldetect/conf.maldet` file, you''ll see these two lines,
    but with some comments in between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Not only will LMD automatically update its malware signatures, but it will also
    ensure that you have the latest version of LMD itself.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning with ClamAV and maldet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LMD's maldet daemon constantly monitors the directories that you specify in
    the `/usr/local/maldetect/monitor_paths` file. When it finds a suspicious file,
    it will perform the action that you specified in the `conf.maldet` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: There are four different simulated virus files that you can download from [https://www.eicar.org/download-anti-malware-testfile/](https://www.eicar.org/download-anti-malware-testfile/).
    Note that if you’re running a Windows host machine, these files could get flagged
    by the Windows antivirus. So, your best bet is to download the files directly
    to your Linux virtual machines.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Just download one or all of the EICAR test files and transfer them to your
    home directory on the virtual machines. Your best bet is to download the files
    directly to your virtual machines, with these four commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait just a few moments, and you should see the files disappear. Then, look
    in the `/usr/local/maldetect/logs/event_log` file to verify that the LMD moved
    the files to quarantine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Ignore the `warning clamd service not running` messages, because we don’t need
    to use that service.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There's still a bit more to LMD than what I can show you here. However, you
    can read all about it in the `README` file that comes with it.
  prefs: []
  type: TYPE_NORMAL
- en: SELinux considerations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It used to be that doing an antivirus scan on a Red Hat-type system would trigger
    an SELinux alert. But, in the course of proofing this chapter, the scans all worked
    as they should, and SELinux never bothered me once.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you ever do generate any SELinux alerts with your virus scans, all you need
    to do to fix it is to change one Boolean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'What interests us here is the `antivirus_can_scan_system` Boolean, which is
    off by default. To turn it on to enable virus scans, just do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: That should fix any SELinux-related scan problems that you may have. But, as
    things stand now, you probably won't need to worry about it.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning for rootkits with Rootkit Hunter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rootkits are exceedingly nasty pieces of malware that can definitely ruin your
    day. They can listen for commands from their masters, steal sensitive data and
    send it to their masters, or provide an easy-access back door for their masters.
    They're designed to be stealthy, with the ability to hide themselves from plain
    view. Sometimes, they'll replace utilities such as `ls` or `ps` with their own
    trojaned versions that will show all files or processes on the system except for
    the ones that are associated with the rootkit. Rootkits can infect any operating
    system, even our beloved Linux.
  prefs: []
  type: TYPE_NORMAL
- en: In order to plant a rootkit, an attacker has to have already gained administrative
    privileges on a system. This is one of the many reasons why I always cringe when
    I see people doing all of their work from the root user's shell and why I'm a
    firm advocate of using `sudo` whenever possible. I mean, really, why should we
    make it easy for the bad guys?
  prefs: []
  type: TYPE_NORMAL
- en: Several years ago, back in the dark days of Windows XP, Sony Music got into
    a bit of trouble when someone discovered that they had planted a rootkit on their
    music CDs. They didn't mean to do anything malicious, but only wanted to stop
    people from using their computers to make illegal copies. Of course, most people
    ran Windows XP with an administrator account, which made it really easy for the
    rootkit to infect their computers. Windows users still mostly run with administrator
    accounts, but they at least now have User Access Control to help mitigate these
    types of problems.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are a couple of different programs that scan for rootkits, and both are
    used pretty much the same way. One is called **Rootkit Hunter**, and the other
    is called **chkrootkit**. Now, understand that I’m showing you these programs
    because as a Linux administrator, you’ll be expected to know about them. In reality,
    they’re not very useful, because there are a whole lot of rootkits that neither
    of them will detect. If you really want to prove that, just go to Github and do
    a keyword search for *rootkit*. Find a rootkit that will run on Linux, download
    the source code to a virtual machine, and then follow the included directions
    for how to compile and install it. Once it’s installed, do a scan with either
    one of the rootkit scan programs. Most likely, the rootkit won’t get detected.
    Also, don’t expect AppArmor or SELinux to prevent someone from installing a rootkit,
    because they won’t.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not every rootkit on Github will compile correctly for you, so finding ones
    that work will involve a bit of trial-and-error. One that I did get to compile
    and install correctly is the Reptile rootkit, which you can download from here:
    [https://github.com/f0rb1dd3n/Reptile](https://github.com/f0rb1dd3n/Reptile)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Okay, let's move on to the lab.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – installing and updating Rootkit Hunter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For Ubuntu, Rootkit Hunter is in the normal repository. For CentOS or AlmaLinux,
    you''ll need to install the EPEL repository, as I showed you how to do in *Chapter
    1*, *Running Linux in a Virtual Environment*. For all of these Linux distros,
    the package name is `rkhunter`. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use one of the following commands to install Rootkit Hunter, as appropriate.
    For Ubuntu, do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'For CentOS 7, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'For AlmaLinux 8 or AlmaLinux 9, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'After it''s been installed, you can look at its options with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the rootkit signatures using the `--update` option:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Now, we're ready to scan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You've reached the end of the lab – congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: Scanning for rootkits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To run your scan, use the `-c` option. (That''s `-c` for *check*.) Be patient,
    because it will take a while:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: When you run the scan in this manner, Rootkit Hunter will periodically stop
    and ask you to hit the Enter key to continue. When the scan completes, you'll
    find a `rkhunter.log` file in the `/var/log/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have Rootkit Hunter automatically run as a `cron` job, use the `--cronjob`
    option, which will cause the program to run all the way through without prompting
    you to keep hitting the Enter key. You might also want to use the `--rwo` option,
    which will cause the program to only report warnings, instead of also reporting
    on everything that''s good. From the command line, the command would look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a `cron` job that will automatically run Rootkit Hunter on a nightly
    basis, open the `crontab` editor for the root user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s say that you want to run Rootkit Hunter every night at 20 minutes past
    10\. Enter this into the `crontab` editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Since `cron` only works with 24-hour clock time, you'll have to express 10:00
    P.M. as 22\. (Just add 12 to the normal P.M. clock times that you're used to using.)
    The three asterisks mean that the job will run every day of the month, every month
    of the year, and every day of the week, respectively. You'll need to list the
    entire path for the command. Otherwise, `cron` won't be able to find it.
  prefs: []
  type: TYPE_NORMAL
- en: You'll find more options that might interest you in the `rkhunter` man page,
    but this should be enough to get you going with it.
  prefs: []
  type: TYPE_NORMAL
- en: A few moments ago, I told you that these rootkit scanner programs aren’t very
    effective, because there are many rootkits that they won’t detect. That’s why
    the best way to deal with rootkits is to prevent them from getting installed in
    the first place. So, be sure to keep your systems locked down to prevent malicious
    actors from gaining root privileges.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Next, let's look at a couple of quick techniques for analyzing malware.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a quick malware analysis with strings and VirusTotal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Malware analysis is one of those advanced topics that I can't cover in detail
    here. However, I can show you a couple of quick ways to analyze a suspicious file.
  prefs: []
  type: TYPE_NORMAL
- en: Analyze a file with strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Executable files often have strings of text embedded in them. You can use the
    `strings` utility to look at those strings. (Yeah, that makes sense, right?) Depending
    on your distro, `strings` might or might not already be installed. It''s already
    on CentOS and AlmaLinux, but to get it on Ubuntu, you''ll need to install the
    `binutils` package, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'As an example, let''s look at a `Your File Is Ready To Download_2285169994.exe`
    file that was automatically downloaded from a cryptocoin faucet site. To examine
    the file, I’ll do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: I saved the output to a text file that I can open in `vim` so that I can view
    the line numbers. To see the line numbers, I entered `:set number` at the bottom
    of the `vim` screen. (In `vim` parlance, we're using the last line mode.)
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s hard to say exactly what to search for, so you''ll just need to browse
    through until you see something interesting. In this case, look at what I''ve
    found starting at line `386`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: It's saying that the installation process of this program can be made to run
    in `SILENT` mode, without popping up any dialog boxes. It can also be made to
    run in such a way that the user can't cancel the installation. Of course, the
    line at the top says that these are `optional command line parameters`. But, are
    they really optional, or are they hard coded in as the default? It's not clear,
    but in my mind, any installer that can be made to run in `SILENT` mode and that
    can't be canceled looks a bit suspicious, even if we're talking about `optional`
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so you're probably wondering, *What is a cryptocoin faucet?* Well, it's
    a website where you can go to claim a small amount of cryptocoin, such as Bitcoin,
    Ethereum, or Monero, in exchange for viewing the advertising and solving some
    sort of CAPTCHA puzzle. Most faucet operators are honest, but the advertising
    they allow on their sites often isn't and is often laden with malware, scams,
    and Not-Safe-For-Work images.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, this little trick works fine sometimes, but not always. More sophisticated
    malware might not contain any text strings that can give you any type of a clue.
    So, let's look at another little quick trick for malware analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning the malware with VirusTotal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**VirusTotal** is a website where you can upload suspicious files for analysis.
    It uses a multitude of various virus scanners, so if one scanner misses something,
    another is likely to find it. Here are the results of scanning the `Your File
    Is Ready To Download_2285169994.exe` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1: The VirusTotal scanner](img/file75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: The VirusTotal scanner'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we see that different virus scanners classify this file in different ways.
    But whether it's classified as `Win.Malware.Installcore`, `Trojan.InstallCore`,
    or whatever else, it's still bad.
  prefs: []
  type: TYPE_NORMAL
- en: As good as VirusTotal is, you'll want to use it with caution. Don't upload any
    files that contain sensitive or confidential information, because it will get
    shared with other people.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So, what is this particular piece of malware all about? Well, it's actually
    a fake Adobe Flash installer. Of course, you don't want to test that by installing
    it on a production Windows machine. But, if you have a Windows VM handy, you can
    test the malware on it. (Either make a snapshot of the VM before you begin or
    be prepared to trash the VM afterward.)
  prefs: []
  type: TYPE_NORMAL
- en: As I said at the beginning, malware analysis is quite an in-depth topic and
    there are lots of more sophisticated programs to use for it. However, if you have
    suspicions about something and need to just do a quick check, these two techniques
    might be all you need.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at how to automatically audit the system for different events.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the auditd daemon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, you have a directory full of super-secret files that only a very few people
    need to see, and you want to know when unauthorized people try to see them. Or,
    maybe you want to see when a certain file gets changed, or you want to see when
    people log into the system and what they're doing once they do log in. For all
    this and more, you have the `auditd` system. It's a really cool system, and I
    think that you'll like it.
  prefs: []
  type: TYPE_NORMAL
- en: One of the beauties of `auditd` is that it works at the Linux kernel level,
    rather than at the user-mode level. This makes it much harder for attackers to
    subvert.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'On Red Hat-type systems, `auditd` comes installed and enabled by default. So,
    you''ll find it already there on your CentOS and AlmaLinux machines. On Ubuntu,
    it won''t be installed, so you''ll have to do it yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'On Ubuntu, you can control the `auditd` daemon with the normal `systemctl`
    commands. So, if you need to restart `auditd` to read in a new configuration,
    you can do that with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'On RHEL-type machines, `auditd` is configured to not work with the normal `systemctl`
    commands. (For all other daemons, they do.) So, on your CentOS and AlmaLinux machines,
    you''ll restart the `auditd` daemon with the old-fashioned `service` command,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Other than this minor difference, everything I tell you about `auditd` from
    here on will apply to all of your virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: Creating audit rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Okay, let''s start with something simple and work our way up to something awesome.
    First, let''s check to see whether any audit rules are in effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: As you see, the `auditctl` command is what we use to manage audit rules. The
    `-l` option lists the rules.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing a file for changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let''s say that we want to see when someone changes the `/etc/passwd`
    file. (The command that we''ll use will look a bit daunting, but I promise that
    it will make sense once we break it down.) Here goes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-w`: This stands for where, and it points to the object that we want to monitor.
    In this case, it''s `/etc/passwd`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: This indicates the object''s permissions that we want to monitor. In
    this case, we''re monitoring to see when anyone either tries to (w)rite to the
    file or tries to make (a)ttribute changes. (The other two permissions that we
    can audit are (r)ead and e(x)ecute.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-k`: The `k` stands for key, which is just `auditd`''s way of assigning a
    name to a rule. So, `passwd_changes` is the key, or the name, of the rule that
    we''re creating.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `auditctl -l` command shows us that the rule is indeed there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the slight problem with this is that the rule is only temporary and will
    disappear when we reboot the machine. To make it permanent, we need to create
    a custom `rules` file in the `/etc/audit/rules.d/` directory. Then, when you restart
    the `auditd` daemon, the custom rules will be inserted into the `/etc/audit/audit.rules`
    file. Because the `/etc/audit/` directory can only be accessed by someone with
    root privileges, I''ll just open the file by listing the entire path to the file,
    rather than trying to enter the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s not a whole lot in this default file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the breakdown for this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-D`: This will cause all rules and watches that are currently in effect to
    be deleted so that we can start from a clean slate. So, if I were to restart the
    `auditd` daemon right now, it would read this `audit.rules` file, which would
    delete the rule that I just created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-b 8192`: This sets the number of outstanding audit buffers that we can have
    going at one time. If all of the buffers get full, the system can''t generate
    any more audit messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-f 1`: This sets the failure mode for critical errors, and the value can be
    either `0`, `1`, or `2`. `-f 0` would set the mode to silent, meaning that `auditd`
    wouldn''t do anything about critical errors. `-f 1`, as we see here, tells `auditd`
    to only report the critical errors, while `-f 2` would cause the Linux kernel
    to go into panic mode. According to the `auditctl` man page, anyone in a high-security
    environment would likely want to change this to `-f 2`. For our purposes, though,
    `-f1` works.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You could use your text editor to create a new `rules` file in the `/etc/audit/rules.d/`
    directory. Alternatively, you could just redirect the `auditctl -l` output into
    a new file, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'On Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo systemctl restart auditd
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the Bash shell doesn''t allow me to directly redirect information into
    a file in the `/etc/` directory, even with `sudo`, I have to use the `sudo sh
    -c` command in order to execute the `auditctl` command. After restarting the `auditd`
    daemon, our `audit.rules` file now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Now, the rule will take effect every time the machine is rebooted, and every
    time that you manually restart the `auditd` daemon.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing a directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Vicky and Cleopatra, my solid gray kitty and my gray-and-white tabby kitty,
    have some super sensitive secrets that they need to safeguard. So, I created the
    `secretcats` group and added them to it. Then, I created the `secretcats` shared
    directory and set the access controls on it, as I showed you how to do in *Chapter
    9, Access Control Lists and Shared Directory Management*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Vicky and Cleopatra want to be absolutely sure that nobody gets into their
    stuff, so they requested that I set up an auditing rule for their directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'As before, the `-w` option denotes what we want to monitor, while the `-k`
    option denotes the name of the audit rule. This time, I left out the `-p` option
    because I want to monitor for every type of access. In other words, I want to
    monitor for any read, write, attribute change, or execute actions. (Because this
    is a directory, the execute action happens when somebody tries to `cd` into the
    directory.) You can see in the `auditctl -l` output that by leaving out the `-p`
    option, we will now monitor for everything. However, let''s say that I only want
    to monitor for when someone tries to `cd` into this directory. I could have made
    the rule look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Easy enough so far, right?
  prefs: []
  type: TYPE_NORMAL
- en: Plan carefully when you create your own custom audit rules. Auditing more files
    and directories than you need to can have a bit of a performance impact and could
    drown you in excessive information. Just audit what you really need to audit,
    as called for by either the scenario or what any applicable governing bodies require.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, let's look at something a bit more complex.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing system calls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating rules to monitor when someone performs a certain action isn''t hard,
    but the command syntax is a bit trickier than what we''ve seen so far. With this
    rule, we''re going to be alerted every time Charlie either tries to open a file
    or tries to create a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-a always,exit`: Here, we have the action and the list. The `exit` part means
    that this rule will be added to the system call `exit` list. Whenever the operating
    system exits from a system call, the `exit` list will be used to determine if
    an audit event needs to be generated. The `always` part is the action, which means
    that an audit record for this rule will always be created on exit from the specified
    system call. Note that the action and list parameters have to be separated by
    a comma.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-F arch=b64`: The `-F` option is used to build a rule field, and we can see
    two rule fields in this command. This first rule field specifies the machine''s
    CPU architecture. `b64` means that the computer is running with an x86_64 CPU.
    (Whether it''s Intel or AMD doesn''t matter.) Considering that 32-bit machines
    are dying off and that Sun SPARC and PowerPC machines aren''t all that common,
    `b64` is what you''ll now mostly see.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-S openat`: The `-S` option specifies the system call that we want to monitor.
    `openat` is the system call that either opens or creates a file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-F auid=1006`: This second audit field specifies the user ID number of the
    user that we want to monitor. (Charlie''s user ID number is `1006`.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A complete explanation of system calls, or syscalls, is a bit too esoteric for
    our present purpose. For now, suffice it to say that a syscall happens whenever
    a user issues a command that requests that the Linux kernel provide a service.
    If you're so inclined, you can read more about syscalls at [https://blog.packagecloud.io/eng/2016/04/05/the-definitive-guide-to-linux-system-calls/](https://blog.packagecloud.io/eng/2016/04/05/the-definitive-guide-to-linux-system-calls/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'What I''ve presented here are just a few of the many things that you can do
    with auditing rules. To see more examples, check out the `auditctl` man page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: So, now you're wondering, *Now that I have these rules, how do I know when someone
    tries to violate them?* As always, I'm glad that you asked.
  prefs: []
  type: TYPE_NORMAL
- en: Using ausearch and aureport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `auditd` daemon logs events to the `/var/log/audit/audit.log` file. Although
    you could directly read the file with something such as `less`, you really don't
    want to. The `ausearch` and `aureport` utilities will help you translate the file
    into a language that makes some sort of sense.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for file change alerts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start by looking at the rule that we created that will alert us whenever
    a change is made to the `/etc/passwd` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s make a change to the file and look for the alert message. Rather
    than add another user, since I''m running out of cats whose names I can use, I''ll
    just use the `chfn` utility to add contact information to the comment field for
    Cleopatra''s entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, I''ll use `ausearch` to look for any audit messages that this event may
    have generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-i`: This takes any numeric data and, whenever possible, converts it into
    text. In this case, it takes user ID numbers and converts them into the actual
    username, which shows up here as `auid=donnie`. If I were to leave the `-i` out,
    the user information would show up as `auid=1000`, which is my user ID number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-k passwd_changes`: This specifies the key, or the name, of the audit rule
    for which we want to see the audit messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, you see that there are two parts to this output. The first part just
    shows when I created the audit rule, so we''re not interested in that. In the
    second part, you can see when I triggered the rule, but it doesn''t show how I
    triggered it. So, let''s use `aureport` to see whether it will give us a bit more
    detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: What's curious is that with `ausearch`, you have to specify the name, or key,
    of the audit rule that interests you after the `-k` option. With `aureport`, the
    `-k` option means that you want to look at all log entries that have to do with
    all audit rule keys. To see log entries for a specific key, just pipe the output
    into `grep`. The `-i` option does the same thing that it does for `ausearch`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you see, `aureport` parses the cryptic language of the `audit.log` file
    into plain language that''s easier to understand. I wasn''t sure about what I
    had done to generate events 1 and 2, so I looked in the `/var/log/secure` file
    to see whether I could find out. I saw these two entries for those times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: So, event 1 was from when I initially created the audit rule, and event 2 happened
    when I did an `ausearch` operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'I must confess that the events in lines *4* and *5* are a bit of a mystery.
    Both were created when I invoked the `usermod` command, and both of them correlate
    to the secure log entries where I added Vicky and Cleopatra to the `secretcats`
    group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The strange part about this is that adding a user to a secondary group doesn't
    modify the `passwd` file. So, I really don't know why the rule was triggered to
    create the events in lines *4* and *5*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This leaves us with the event in line *3*, which is where I used `chfn` to
    actually modify the `passwd` file. Here''s the `secure` log entry for that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: So, out of all of these events, the one in line *3* is the only one where the
    `/etc/passwd` file was actually modified.
  prefs: []
  type: TYPE_NORMAL
- en: The `/var/log/secure` file that I keep mentioning here is on Red Hat-type operating
    systems, such as CentOS and AlmaLinux. On your Ubuntu machine, you'll see the
    `/var/log/auth.log` file instead.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Searching for directory access rule violations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For our next scenario, we’ll create a shared directory for Vicky and Cleopatra
    and then create an audit rule for it that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'So, all access or attempted access to this directory should trigger an alert.
    First, let''s have Vicky enter the `/secretcats/` directory and run an `ls -l`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we see that Cleopatra has already been there and has created a file.
    (We''ll get back to that in a moment.) When an event triggers an `auditd` rule,
    it often creates multiple records in the `/var/log/audit/audit.log` file. If you
    look through each record for an event, you''ll see that each one covers a different
    aspect of that event. When I do an `ausearch` command, I see a total of five records
    just from that one `ls -l` operation. For the sake of saving space, I''ll just
    put the first one here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ll put the last one here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: In both records, you see the action that was taken (`ls -l`) and information
    about the person – or cat, in this case – that took the action. Since this is
    a RHEL-type machine, you also see SELinux context information. In the second record,
    you can also see the name of the file that Vicky saw when she did the `ls` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s say that that sneaky Charlie guy logs in and tries to get into
    the `/secretcats/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Charlie isn''t a member of the `secretcats` group and doesn''t have permission
    to go into the `secretcats` directory. So, he should trigger an alert message.
    Well, he actually triggered one that consists of four records, and I''ll again
    just list the first one and the last one. Here''s the first one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the last one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: There are two things to note here. First, just attempting to `cd` into the directory
    doesn't trigger an alert. However, using `ls` to try to read the contents of the
    directory does. Secondly, note the `Permission denied` message that shows up in
    the second record.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last set of alerts that we''ll look at were created when Cleopatra created
    her `cleopatrafile.txt` file. This event triggered an alert that consists of 30
    records. I''ll just show you two of them, with the first one here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the second one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: You can tell that the first of these two messages happened when Cleopatra saved
    the file and exited `vim` because the second message shows `objtype=DELETE`, where
    her temporary `vim` swap file was deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, this is all good, but what if this is too much information? What if you
    just want a quick and sparse list of all of the security events that got triggered
    by this rule? For that, we'll use `aureport`. We'll use it just like we did previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s pipe the `aureport` output into `less` instead of into `grep`
    so that we can see the column headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The status in the `success` column will be either `yes` or `no`, depending upon
    whether the user was able to successfully perform an action that violated a rule.
    Or, it could be a question mark if the event isn't the result of the rule being
    triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Charlie, we see a `yes` event in line *48*, with the events in lines *49*
    through *51* all having a `no` status. We can also see that all of these entries
    were triggered by Charlie''s use of the `ls` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[donnie@localhost ~]$ sudo aureport -i -k | grep ''secretcats_watch'''
  prefs: []
  type: TYPE_NORMAL
- en: 6\. 12/11/2017 15:01:25 secretcats_watch yes ? donnie 11772
  prefs: []
  type: TYPE_NORMAL
- en: 8\. 12/12/2017 11:49:29 secretcats_watch yes /usr/bin/ls cleopatra 13828
  prefs: []
  type: TYPE_NORMAL
- en: 9\. 12/12/2017 11:49:37 secretcats_watch yes /usr/bin/vim cleopatra 13830
  prefs: []
  type: TYPE_NORMAL
- en: 10\. 12/12/2017 11:49:37 secretcats_watch yes /usr/bin/vim cleopatra 13829
  prefs: []
  type: TYPE_NORMAL
- en: 48\. 12/12/2017 12:32:04 secretcats_watch yes /usr/bin/ls charlie 14152
  prefs: []
  type: TYPE_NORMAL
- en: 49\. 12/12/2017 12:32:04 secretcats_watch no /usr/bin/ls charlie 14153
  prefs: []
  type: TYPE_NORMAL
- en: 50\. 12/12/2017 12:32:04 secretcats_watch no /usr/bin/ls charlie 14154
  prefs: []
  type: TYPE_NORMAL
- en: 51\. 12/12/2017 12:32:04 secretcats_watch no /usr/bin/ls charlie 14155
  prefs: []
  type: TYPE_NORMAL
- en: '[donnie@localhost ~]$'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''d be tempted to think that the `yes` event in line *48* indicates that
    Charlie was successful in reading the contents of the `secretcats` directory.
    To analyze this further, let''s look at the event numbers at the end of each line
    and correlate them to the output of our previous `ausearch` command. You''ll see
    that event numbers `14152` through `14155` belong to records that all have the
    same timestamp. We can see this in the first line of each record:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: As we noted previously, the last record of this series shows `Permission denied`
    for Charlie, and that's what really counts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Space doesn''t permit me to give a full explanation of each individual item
    in an audit log record. However, you can read about it here, in the official Red
    Hat documentation: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/auditing-the-system_security-hardening#understanding-audit-log-files_auditing-the-system](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/auditing-the-system_security-hardening#understanding-audit-log-files_auditing-the-system).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Searching for system call rule violations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The third rule that we created was to monitor that sneaky Charlie. This rule
    will alert us whenever Charlie tries to open or create a file. (As we noted previously,
    `1006` is Charlie''s user ID number.):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Even though Charlie hasn''t done that much on this system, this rule gives
    us a lot more log entries than what we bargained for. We''ll look at just a couple
    of entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'This record was generated when Charlie tried to access the `/secretcats/` directory.
    So, we can expect to see this one. But, what we didn''t expect to see was the
    exceedingly long list of records of files that Charlie indirectly accessed when
    he logged into the system through **Secure Shell** (**SSH**). Here''s one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s another one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: In the first record, we see that Charlie accessed the `/usr/sbin/sshd` file.
    In the second, we see that he accessed the `/usr/bin/bash` file. It's not that
    Charlie chose to access those files. The operating system accessed those files
    for him in the course of just a normal login event. So as you see, when you create
    audit rules, you have to be careful what you wish for because there's a definite
    danger that the wish might be granted. If you really need to monitor someone,
    you'll want to create a rule that won't give you quite this much information.
  prefs: []
  type: TYPE_NORMAL
- en: 'While we''re at it, we might as well see what the `aureport` output for this
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: In addition to what Charlie did, we also see what Vicky and Cleopatra did. That's
    because the rule that we set for the `/secretcats/` directory generated `openat`
    events when Vicky and Cleopatra accessed, viewed, or created files in that directory.
  prefs: []
  type: TYPE_NORMAL
- en: Generating authentication reports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can generate user authentication reports without having to define any audit
    rules. Just use `aureport` with the `-au` option switch. (Remember `au`, the first
    two letters of *authentication*.):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: For login events, this tells us whether the user logged in at the local terminal
    or remotely through SSH. To see the details of any event, use `ausearch` with
    the `-a` option, followed by the event number that you see at the end of a line.
    (Strangely, the `-a` option stands for an *event*.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at event number `14122` for Charlie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The problem with this is that it really doesn''t make any sense. I''m the one
    who did the logins for Charlie, and I know for a fact that Charlie never had any
    failed logins. In fact, we can correlate this with the matching entry from the
    `/var/log/secure` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The timestamps for these two entries are a few seconds later than the timestamp
    for the `ausearch` output, but that's okay. There's nothing in this log file to
    suggest that Charlie ever had a failed login, and these two entries clearly show
    that Charlie's login really was successful. The lesson here is that when you see
    something strange in either the `ausearch` or `aureport` output, be sure to correlate
    it with the matching entry in the proper authentication log file to get a better
    idea of what's going on. (By authentication log file, I mean `/var/log/secure`
    for Red Hat-type systems and `/var/log/auth.log` for Ubuntu systems. The names
    may vary for other Linux distros.)
  prefs: []
  type: TYPE_NORMAL
- en: Using pre-defined rulesets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `/usr/share/doc/audit-version_number/rules/` directory of your CentOS
    7 machine and the `/usr/share/audit/sample-rules/` directory of your AlmaLinux
    machines, you''ll see some pre-made rulesets for different scenarios. Once you
    install `auditd` on Ubuntu, you''ll have audit rules in the `/usr/share/doc/auditd/examples/rules/`
    directory. In any case, some of the rulesets are common among all three of these
    distros. Let''s look at the AlmaLinux 9 machine to see what we have there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The three files I want to focus on are the `nispom`, `pci-dss`, and `stig`
    files. Each of these three rulesets is designed to meet the auditing standards
    of a particular certifying agency. In order, these rulesets are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nispom**: The National Industrial Security Program – you''ll see this ruleset
    used at either the US Department of Defense or its contractors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pci-dss**: Payment Card Industry Data Security Standard – if you work in
    the banking or financial industries, or even if you''re just running an online
    business that accepts credit cards, you''ll likely become very familiar with this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stig**: Security Technical Implementation Guides – if you work for the US
    government, or possibly other governments, you''ll be dealing with this one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use one of these rules sets, just copy the appropriate files over to the
    `/etc/audit/rules.d/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: After you've copied the rule file over, restart the `auditd` daemon to read
    in the new rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Red Hat, CentOS, or AlmaLinux, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'For Ubuntu, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Of course, there's always the chance that a particular rule in one of these
    sets might not work for you or that you might need to enable a rule that's currently
    disabled. If so, just open the appropriate rules file in your text editor and
    comment out what doesn't work or uncomment what you need to enable.
  prefs: []
  type: TYPE_NORMAL
- en: Even though `auditd` is very cool, bear in mind that it only alerts you about
    potential security breaches. It doesn't do anything to harden the system against
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – using auditd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this lab, you''ll practice using the features of `auditd`. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Ubuntu only, install `auditd`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'View the rules that are currently in effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'From the command line, create a temporary rule that audits the `/etc/passwd`
    file for changes. Verify that the rule is in effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a user account for Lionel. On Ubuntu, do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'On CentOS or AlmaLinux, do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Search for audit messages regarding any changes to the `passwd` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Log out of your own account and log in as Lionel. Then, log out of Lionel's
    account and back in to your own.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Do an authentication report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `/secrets` directory and set the permissions so that only the root
    user can access it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a rule that monitors the `/secrets` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Log out of your account, and log in as Lionel. Have him try to view what''s
    in the `/secrets` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Log out of Lionel''s account and log in to your own. View the alerts that Lionel
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'You now have two temporary rules that will disappear when you reboot the machine.
    Make them permanent by creating a `custom.rules` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Reboot the machine and verify that the rules are still in effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: You've reached the end of the lab – congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab –Using pre-configured rules with auditd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this lab, we’ll simulate that the US government is our client, and that
    we need to set up a server that will meet their **Security Technical Implementation
    Guides** (**STIG**) auditing standards. To do that, we’ll use several pre-configured
    rulesets that get installed when you install `auditd`. Note that this lab will
    work on any of your virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the `custom.rules` file that you created in the previous lab, and then
    restart the `auditd` service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the `10-base-config.rules`, `30-stig.rules`, `31-privileged.rules`, and
    `99-finalize.rules` files to the `/etc/audit/rules.d/` directory. (These rules
    files are in the `/usr/share/doc/auditd/examples/rules/` directory on Ubuntu,
    and in the `/usr/share/audit/sample-rules/` directory on AlmaLinx.):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Restart the `auditd` service, and then use `sudo auditctl -l` to view the new
    active ruleset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: End of lab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ve just seen that we can sometimes use several different pre-configured
    rulesets at once *if* they complement each other. Understand though that you’ll
    never use *all* of the pre-configured rulesets at once.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this section, you looked at some examples of how to work with `auditd`. Next,
    let’s look at a simpler method of auditing files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing files and directories with inotifywait
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There might be times when you’ll just want a quick and easy way to monitor a
    file or a directory in real time. Instead of having audit messages sent to the
    `audit.log` file, you can use `inotifywait` to have a message pop up in your terminal
    as soon as someone accesses a designated file or directory. This tool is part
    of the `inotify-tools` package on both Ubuntu and AlmaLinux. It’s not installed
    by default, so go ahead and install it if it isn’t already.
  prefs: []
  type: TYPE_NORMAL
- en: 'To monitor a single file, just do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'The `/secrets/` directory is set so that only someone with root privileges
    can access it, so I have to use `sudo` to make this work. The `-m` option causes
    `inotifywait` to perform continuous monitoring, instead of exiting as soon as
    something happens. The **OPEN** message came up when I opened the file with `less`,
    and the **CLOSE_NOWRITE,CLOSE** message came up when I exited `less`. Now, let’s
    close this down and monitor the whole directory. All we have to do is to add the
    `-r` option and leave out the file name, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: This time, I opened the `donnie_file.txt` file in `vim`, which caused a whole
    bunch of messages to come up. That’s because when you open a file in `vim`, it
    creates some temporary files that will get cleared out when you exit `vim`. (Note
    that I haven’t actually edited the file yet, and that more messages will get created
    when I do.)
  prefs: []
  type: TYPE_NORMAL
- en: As good as `inotifywait` seems to be, there is one downside. It’s just that
    to use it, you’ll need to stayed glued to your workstation, keep the terminal
    window from which you’re running `inotifywait` open, and watch for messages to
    pop up. There’s no logging mechanism, and no daemon mode. But, if you need to
    monitor something in real-time, this could be useful.
  prefs: []
  type: TYPE_NORMAL
- en: That’s all there is to it for `inotifywait`. Next, we'll look at OpenSCAP, which
    can actually remediate a less-than-secure system.
  prefs: []
  type: TYPE_NORMAL
- en: Applying OpenSCAP policies with oscap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Security Content Automation Protocol** (**SCAP**) was created by the
    US **National Institute of Standards and Technology** (**NIST**). It consists
    of hardening guides, hardening templates, and baseline configuration guides for
    setting up secure systems. OpenSCAP is a set of FOSS tools that can be used to
    implement SCAP. It consists of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Security profiles that you can apply to a system. There are different profiles
    for meeting the requirements of several different certifying agencies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security guides to help with the initial setup of your system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `oscap` command-line utility to apply security templates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On systems that have a desktop interface, you have SCAP Workbench, a GUI-type
    utility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can install OpenSCAP on either the Red Hat or the Ubuntu distros, but it's
    much better implemented on the Red Hat distros. For one thing, when you install
    a Red Hat-type operating system, you can choose to apply a SCAP profile during
    installation. You can't do that with Ubuntu. All of the Red Hat-type distros come
    with a fairly complete set of ready-to-use profiles. Ubuntu 22.04 comes with outdated
    profiles for Fedora 14 and RHEL 6, and none for Ubuntu 22.04, which I think is
    totally bizarre. Not to worry though, because I’ll show you how to get some good
    Ubuntu profiles in just a bit.
  prefs: []
  type: TYPE_NORMAL
- en: When doing initial system builds, it's desirable to start with a security checklist
    that's appropriate for your scenario, because there are certain things the OpenSCAP
    can’t automate for you. Then, use OpenSCAP to do the rest. I'll tell you more
    about security checklists at the end of *Chapter 16*, *Security Tips and Tricks
    for the Busy Bee*.
  prefs: []
  type: TYPE_NORMAL
- en: All right, let's learn how to install OpenSCAP and how to use the command-line
    utility that's common to all of our distros.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenSCAP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On your CentOS 7 machine, assuming that you didn''t install OpenSCAP during
    the operating system installation, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Do the following for either AlmaLinux 8 or AlmaLinux 9:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo dnf install openscap-scanner scap-security-guide
  prefs: []
  type: TYPE_NORMAL
- en: 'Do the following on an Ubuntu 22.04 machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Viewing the profile files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the CentOS 7 machine and the AlmaLinux machines, you'll see the profile files
    in the `/usr/share/xml/scap/ssg/content/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'As I already mentioned, Ubuntu only gives us some outdated Fedora 14 and RHEL
    6 profiles in the `/usr/share/openscap/` directory, and none at all for any flavor
    of Ubuntu. (Why that is, I have no clue.) The profile files are in `.xml` format,
    and each one contains one or more profiles that you can apply to the system. For
    example, here are some from the CentOS 7 machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll see a somewhat similar list on your AlmaLinux 8 machine, except that
    they’ll be specific to AlmaLinux 8\. On AlmaLinux 9, things are a bit different.
    At the time of this writing, all we have is just one profile file. That’s because
    the RHEL 9 distros are quite new, so the development of SCAP profiles for them
    isn’t yet complete. Anyway, here’s AlmaLinux 9 file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'The command-line utility for working with OpenSCAP is `oscap`. On our AlmaLinux
    9 machine, let''s use this with the `info` switch to view information about any
    of the profile files. Let''s look at the `ssg-almalinux9-ds.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Due to formatting constraints, I can’t show you the entire list of profiles.
    So, do this for yourself and scroll down the list. You’ll see profiles for **STIG**
    and **PCI-DSS**, just as we had for the auditing rules. There’s also a **HIPAA**
    profile for medical facilities here in the US, several benchmark profiles from
    the **Center for Internet Security**, (**CIS**), and several that are specific
    for certain non-US countries, among others.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the missing profiles for Ubuntu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve seen that there aren’t any SCAP profiles for Ubuntu in the Ubuntu repositories.
    So, is all hope lost for Ubuntu users? Absolutely not. Fortunately, the `scap-security-guide`
    package that you can install on a Fedora Server virtual machine comes with SCAP
    profiles for a variety of other Linux distros, including the newest versions of
    Ubuntu. So, your best bet for setting up OpenSCAP on Ubuntu is to create a Fedora
    Server VM, install the `scap-security-guide` package in the same manner that you
    just did for AlmaLinux, and then copy the appropriate profile file from Fedora’s
    `/usr/share/xml/scap/ssg/content/` directory to your Ubuntu machine. After that,
    you’re golden.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning the system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we'll work with our AlmaLinux 9 VM.
  prefs: []
  type: TYPE_NORMAL
- en: This procedure works the same for most all Linux distros, except that the names
    of the profiles will differ.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now, let''s say that we need to ensure that our systems are compliant with
    **Payment Card Industry** standards. First, we''ll scan the AlmaLinux 9 machine
    to see what needs remediation. (Note that the following command is very long and
    wraps around on the printed page.):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'As we always like to do, let''s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xccdf eval`: The **Extensible Configuration Checklist Description Format**
    is one of the languages that we can use to write security profile rules. We''re
    going to use a profile that was written in this language to perform an evaluation
    of the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--profile xccdf_org.ssgproject.content_profile_pci-dss`: Here, I specified
    that I want to use the Payment Card Industry-Data Security Standard profile to
    evaluate the system. (Profile names come from the `Id` lines in the profile file.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--fetch-remote`: Use this option to fetch additional rules. (Note that this
    option won’t work if you have the system crypto policy set to `FUTURE` mode.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--results scan-xccdf-results.xml`: I''m going to save the scan results to
    this `.xml` format file. When the scan has finished, I''ll create a report from
    this file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/share/xml/scap/ssg/content/ssg-almalinux9-ds.xml`: This is the profile
    file that contains the `xccdf_org.ssgproject.content_profile_pci-dss` profile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As the scan progresses, the output will be sent to the screen, as well as to
    the designated output file. It''s a long list of items, so I''ll only show you
    a few of them. Here are a couple of items that look okay:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a couple of items that need to be fixed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: So, we have patches for certain security vulnerabilities installed, which is
    good. However, it seems that we have some problems with our password policies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that I''ve run the scan and created an output file with the results, I
    can build my report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: This extracts information from the `.xml` format file that isn't meant to be
    read by humans and transfers it to a `.html` file that you can open in your web
    browser. (For the record, the report says that there are 49 problems that need
    to be fixed.)
  prefs: []
  type: TYPE_NORMAL
- en: Remediating the system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So, we have 49 problems that we need to fix before our system can be considered
    compliant with Payment Card Industry standards. Let''s see how many of them `oscap`
    can fix for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: This is the same command that I used to perform the initial scan, except that
    I added the `--remediate` option and I'm saving the results to a different file.
    You'll want to have a bit of patience when you run this command because fixing
    some problems involves downloading and installing software packages. In fact,
    even as I type this, `oscap` is busy downloading and installing the missing AIDE
    intrusion detection system package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, here are some of the things that were fixed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Result fixed
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of errors because of things that `oscap` couldn't fix, but
    that's normal. At least you know about them so that you can try to fix them yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, check this out. Do you remember how in *Chapter 3, Securing User Accounts*,
    I made you jump through hoops to ensure that users had strong passwords that expire
    on a regular basis? Well, by applying this OpenSCAP profile, you get all that
    fixed for you automatically. Here are a few of the items that were fixed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: So, yeah, OpenSCAP is pretty cool, and even the command-line tools aren't hard
    to use. However, if you have to use a GUI, we have a tool for that, which we'll
    look at next.
  prefs: []
  type: TYPE_NORMAL
- en: Using SCAP Workbench
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For machines with a desktop environment installed, we have SCAP Workbench. However,
    if you've ever worked with early versions of the tool, you were likely quite disappointed.
    Indeed, the early versions of Workbench were so bad that they weren't even usable.
    Thankfully, things have since improved. Now, Workbench is quite a nice little
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get SCAP Workbench, just use the appropriate installation command. On CentOS
    7, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'On AlmaLinux 8 or AlmaLinux 9, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'On Ubuntu, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Yeah, the package name is just `scap-workbench` instead of `openscap-workbench`.
    I don't know why, but I do know that you'll never find it if you're searching
    for `openscap` packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve installed it, you''ll see its menu item on the **Show Applications**
    portion of the **Activities** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2: SCAP Workbench on the Gnome 3 desktop](img/file76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: SCAP Workbench on the Gnome 3 desktop'
  prefs: []
  type: TYPE_NORMAL
- en: When you first open the program, you would think that the system would ask you
    for a root or sudo password. But, it doesn't. We'll see if that affects us in
    a moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you''ll see on the opening screen is a drop-down list for you
    to select the type of content that you want to load. I''ll select **AlmaLinux9**
    and then click on the **Load Content** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3: Select content to load](img/file77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Select content to load'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you''ll see the top panel, where you can select the desired profile.
    You can also choose to customize the profile, and whether you want to run the
    scan on the local machine or on a remote machine. In the bottom pane, you''ll
    see a list of rules for that profile. You can expand each rule item to get a description
    of that rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4: Viewing the rules, and generating a remediation role](img/file78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Viewing the rules, and generating a remediation role'
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of this screen, you see some cool options. Click on the **Generate
    remediation role** button, and you can choose to create a Puppet manifest, an
    Ansible playbook, or a Bash shell script that you can distribute and apply to
    other AlmaLinux 9 machines on your network. You can also choose to **Fetch remote
    resources** and to **Remediate**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s click that **Scan** button to see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5: Enter your password](img/file79.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Enter your password'
  prefs: []
  type: TYPE_NORMAL
- en: Cool! As I had hoped, it prompts you for your sudo password. Beyond that, I'll
    leave you to play with it. It's just another one of those GUI-thingies, so the
    rest of it should be fairly easy to figure out.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll take a look at how to choose an appropriate OpenSCAP profile.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing an OpenSCAP profile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, now, you're saying, *Okay, this is all good, but how do I find out what's
    in these profiles and which one I need?* Well, there are several ways.
  prefs: []
  type: TYPE_NORMAL
- en: The first way, which I've just shown you, is to install SCAP Workbench on a
    machine with a desktop interface and read through the descriptions of all the
    rules for each profile.
  prefs: []
  type: TYPE_NORMAL
- en: The second way, which might be a bit easier, is to go to the OpenSCAP website
    and look through the documentation that they have there.
  prefs: []
  type: TYPE_NORMAL
- en: You'll find information about the available OpenSCAP profiles at [https://www.open-scap.org/security-policies/choosing-policy/](https://www.open-scap.org/security-policies/choosing-policy/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As far as knowing which profile to choose, there are a few things to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: If you work in the financial sector or in a business that does online financial
    transactions, then go with the `pci-dss` profile.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you work for a government agency, especially if it's the US government, then
    go with either the `stig` profile or the `nispom` profile, as dictated by the
    particular agency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If neither of these two considerations applies to your situation, then you'll
    just want to do some research and planning in order to figure out what really
    needs to be locked down. Look through the rules in each profile and read through
    the documentation on the OpenSCAP website to help you decide what you need.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With Red Hat and its offspring, you can even apply a policy as you install the
    operating system. We'll look at that next.
  prefs: []
  type: TYPE_NORMAL
- en: Applying an OpenSCAP profile during system installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the things that I love about the Red Hat folk is that they totally get
    this whole security thing. Yeah, we can lock down other distros and make them
    more secure, as we've already seen. But with Red Hat distros, it's a bit easier.
    For a lot of things, the maintainers of the Red Hat-type distros have set secure
    default options that aren't securely set by default on other distros. (For example,
    prior to the release of Ubuntu 22.04, Red Hat distros had been the only ones that
    come with users' home directories locked down by default.) For other things, the
    Red Hat-type distros come with tools and installation options that help make life
    easier for a busy, security-conscious administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you install a Red Hat-type distro, you''ll be given the chance to apply
    an OpenSCAP profile during the operating system installation. Here, on this AlmaLinux
    9 installer screen, you''ll see the option to choose a security profile in the
    bottom right-hand corner of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6: Select a SCAP profile during installation](img/file80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: Select a SCAP profile during installation'
  prefs: []
  type: TYPE_NORMAL
- en: 'All you have to do is click on that and then choose your profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure: 12.7: Selecting the PCI-DSS profile](img/file81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure: 12.7: Selecting the PCI-DSS profile'
  prefs: []
  type: TYPE_NORMAL
- en: Okay, that pretty much wraps it up for our discussion of OpenSCAP. The only
    thing left to add is that, as great as OpenSCAP is, it won't do everything. For
    example, some security standards require that you have certain directories, such
    as `/home/` or `/var/`, on their own separate partitions. An OpenSCAP scan will
    alert you if that's not the case, but it can't change your existing partitioning
    scheme. So, for things like that, you'll need to get a checklist from the governing
    body that dictates your security requirements and do a bit of advanced work before
    you even touch OpenSCAP.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We covered a lot of ground in this chapter, and we saw some really cool stuff.
    We began by looking at a couple of antivirus scanners so that we can prevent infecting
    any Windows machines that access our Linux servers. In the *Scanning for rootkits
    with Rootkit Hunter* section, we saw how to scan for those nasty rootkits. We
    also saw a couple of quick techniques to examine a potentially malicious file.
    It's important to know how to audit systems, especially in high-security environments,
    and we saw how to do that. Finally, we wrapped things up with a discussion of
    hardening our systems with OpenSCAP.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at logging and log file security. I'll see you
    there.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which of the following is true about rootkits?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They only infect Windows operating systems.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The purpose of planting a rootkit is to gain root privileges to a system.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An intruder must have already gained root privileges in order to plant a rootkit.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A rootkit isn't very harmful.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following methods would you use to keep `maldet` updated?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Manually create a `cron` job that runs every day.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Do nothing, because `maldet` automatically updates itself.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Once a day, run the normal update command for your operating system.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `maldet update` utility from the command line.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is true about the `auditd` service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On an Ubuntu system, you'll need to stop or restart it with the `service` command.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On a Red Hat-type system, you'll need to stop or restart it with the `service`
    command.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On an Ubuntu system, it comes already installed.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On a Red Hat-type system, you'll need to install it yourself.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to create an auditing rule that will alert you every time a particular
    person reads or creates a file. Which of the following syscalls would you use
    in that rule?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`openfile`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`fileread`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`openat`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`fileopen`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which file does the `auditd` service use to log auditing events?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/var/log/messages`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/var/log/syslog`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/var/log/auditd/audit`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/var/log/audit/audit.log`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to create custom auditing rules for `auditd`. Where would you place
    the new rules?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/usr/share/audit-version_number/`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/etc/audit/`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/etc/audit.d/rules/`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/etc/audit/rules.d/`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You're setting up a web server for a bank's customer portal. Which of the following
    SCAP profiles might you apply?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: STIG
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NISPOM
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PCI-DSS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Sarbanes-Oxley
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is true about OpenSCAP?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It can't remediate everything, so you'll need to do advance planning with a
    checklist before setting up a server.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It can automatically remediate every problem on your system.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's only available for Red Hat-type distros.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ubuntu comes with a better selection of SCAP profiles.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following commands would you use to generate a user authentication
    report?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo ausearch -au`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo aureport -au`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Define an audit rule, then do `sudo ausearch -au`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Define an audit rule, then do `sudo aureport -au`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which set of Rootkit Hunter options would you use to have a rootkit scan automatically
    run every night?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-c`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-c --rwo`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`--rwo`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-c --cronjob --rwo`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How to install and configure maldet: [https://www.servernoobs.com/how-to-install-and-configure-maldet-linux-malware-detect-lmd/](https://www.servernoobs.com/how-to-install-and-configure-maldet-linux-malware-detect-lmd/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Symbiote: Evasive Linux rootkit malware: [https://www.theregister.com/2022/06/10/symbiote_linux_malware/](https://www.theregister.com/2022/06/10/symbiote_linux_malware/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configuring and auditing Linux systems with `auditd` daemon: [https://linux-audit.com/configuring-and-auditing-linux-systems-with-audit-daemon/](https://linux-audit.com/configuring-and-auditing-linux-systems-with-audit-daemon/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Monitor changes in directories with `inotifywatch`: [https://distrowatch.com/weekly.php?issue=20220905](https://distrowatch.com/weekly.php?issue=20220905)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The OpenSCAP portal: [https://www.open-scap.org/](https://www.open-scap.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Practical OpenSCAP: [https://www.redhat.com/files/summit/session-assets/2016/SL45190-practical-openscap_security-standard-compliance-and-reporting.pdf](https://www.redhat.com/files/summit/session-assets/2016/SL45190-practical-openscap_security-standard-compliance-and-reporting.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Center for Internet Security (CIS) benchmarks: [https://www.cisecurity.org/cis-benchmarks/](https://www.cisecurity.org/cis-benchmarks/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Auditing the System documentation for RHEL 9: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/auditing-the-system_security-hardening#doc-wrapper](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/auditing-the-system_security-hardening#doc-wrapper)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

- en: Chapter 4. Controlling Your System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Executing a command on the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing a command as another user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a command to be executed in the future
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduling a command to run regularly with cron
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a panel for the commands that you execute often
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a panel with the database commands that you execute often
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a terminal emulator in the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webmin allows you to control your system remotely using only the browser. Whether
    you need to execute a single command or have full terminal access, Webmin provides
    convenient tools for each job. In order to make your life easier, Webmin also
    allows you to set up a control panel for each task you execute more than once.
    In the cases where you need to run commands repeatedly, Webmin gives you an easy-to-use
    interface for creating cron jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a command on the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest way to execute commands on your server that uses Webmin is the
    **Command Shell** module. In this recipe, we will execute a command that lists
    all network services running on our machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to execute a `netstat` command:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **Command Shell**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in a command in the textbox. To list all active network servers on your
    system, use the `netstat –tl` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be presented with a page showing the output of your command. At the
    bottom of the screen, you will see a form that allows you to execute another command.
    You can clear the command output by clicking the **Clear history** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5849OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin executes every command you type in as the root user by default, and saves
    each command into a history file for the currently logged in user. Webmin also
    keeps track of the directories you move into using the `cd` command, but other
    environment variables will not be preserved between command executions.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, you may need to execute multiple commands that depend on one another.
    It's possible to do this in Webmin's basic command shell by combining multiple
    commands into a single execution.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a series of commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The most basic way to run a series of commands is to separate commands using
    the semicolon (`;`) character. Perform the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **Command Shell**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the following two commands (separated by a semicolon):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first command (`export`) sets a variable in the environment where your commands
    are being executed. The second command (`echo`) sends the value of this variable
    to the standard output. Consequently, you should see the message displayed on
    screen. If you executed these commands separately, the environment variable would
    not be preserved between executions.
  prefs: []
  type: TYPE_NORMAL
- en: Executing commands conditionally
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to execute a series of commands in which the second command should
    only be executed (in case the first one is completed without problems), you may
    chain them using the logical AND operator (`&&`). This will cause the second command
    to be executed only if the first one completes successfully (returns an exit code
    value of `0`). Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **Command Shell**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the following two commands (separated by `&&`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the message, **Last command exited cleanly**, appear on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the previous command returned an exit code indicating an error, the message
    would not appear. Try it yourself by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You will not see any output because the second command does not get executed.
  prefs: []
  type: TYPE_NORMAL
- en: This method is useful for commands such as `make && make install` that are used
    during compilation and installation of software, where the second command should
    not be executed if the first one fails.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a command from history
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because Webmin keeps a history of all the commands you execute, you can re-run
    previous commands by selecting them from a list instead of typing them in again.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the list of previous commands appear under the command textbox
    after you execute your first command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Executing a command from history](img/5849OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To execute a command from history, select it from the list and click **Execute
    previous command**. You can also change the command by clicking the **Edit previous**
    button. If you wish to clear the command history, click the **Clear commands**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a command as another user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, it's useful to execute commands as another user. For instance, management
    commands for some services are, by default, accessible to the system user associated
    with the service. You may also wish to test whether a user account is configured
    correctly and execute a command as another user to check if it will work as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create a new PostgreSQL database named `testdb` by issuing
    the `createdb` command that is available to the `postgres` user. If you do not
    have PostgreSQL installed yet, you may refer to [Chapter 10](ch10.html "Chapter 10. Running
    a PostgreSQL Database Server"), *Running a PostgreSQL Database Server*, for information
    about installing and running this database system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To execute a command as another user, we will use the **Running Processes**
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Running Processes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Run..** in the **Display** line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `createdb testdb` in the **Command to run** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Wait until complete** as **Run mode**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `postgres` in the **Run as user** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Run** button.![How to do it...](img/5849OS_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be redirected to a page that shows the output messages of your command.
    If the command executes silently, you will be informed that no output was generated.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin executes the command you pass to it using a system call. It collects
    all the command outputs and displays it on the next screen. Because the Webmin
    process itself runs as `root`, it can impersonate any user when executing commands.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin offers a few more options for issuing commands in this module.
  prefs: []
  type: TYPE_NORMAL
- en: Passing input to a command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you wish, you can put input data for the command in the **Input to command**
    text area. The data that is provided will be passed to the program that is executed
    by your first command over **standard input** (**STDIN**):'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Running Processes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Run..** in the **Display** line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `sort` in the **Command to run** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Wait until complete** as **Run mode**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a list of words in the **Input to command** text area, each on a separate
    line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Run** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The output screen will present you with a sorted list of the words you provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'This functionality is also useful for executing short programs written in scripting
    languages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Passing input to a command](img/5849OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running tasks in background
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a task takes a long time to complete, you may execute it in the background.
    This option will not present you with the output of the command, but you may safely
    disconnect from Webmin without interrupting command execution.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a command to be executed in the future
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is sometimes useful to schedule a command to run at some point in the future.
    For instance, you may want to update or synchronize your database or restore files
    from a backup during the night, when your system is not heavily used. You may
    decide not to wait until a convenient time, but instead ask your system to execute
    a command automatically at a specific moment. Webmin gives you access to your
    system's command scheduling functionality and makes it easy to set up and remove
    scheduled commands.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, I will assume that you have an installation of MediaWiki (the
    software which runs Wikipedia) installed on your server and you want to schedule
    the execution of its `checkUsernames` script at 2:30 a.m. on a Sunday.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin, you should make note of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the maintenance script you wish to execute (in this example, I will
    assume it's called `checkUsernames.php`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The directory in which the script should be executed (in this example, `/var/www/mediawiki/maintenance`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The interpreter that should execute the script (`php`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We are assuming that the PHP command-line package is installed on your system
    and the `php` binary is placed within the binary search path. The default search
    path usually includes locations such as `/bin`, `/sbin`, `/usr/bin`, and `/usr/local/bin`.
    If the binary you wish to execute is not located in one of the default search
    paths, you should use an absolute path to the binary, that is, one which starts
    with `/`, for example, `/usr/bin/php`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The user who should execute the script (`root`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For setting a command that will be executed, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Scheduled Commands**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the user who will execute the script (`root`) in the **Run
    as user** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the desired future date and time in the fields provided. Set it to 2:30
    a.m. next Sunday.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Run in directory** textbox, enter the name of the directory (`/var/www/mediawiki/maintenance`)
    from which the script should be executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the command you wish to execute—usually consisting of the name of the
    script interpreter and the name of the script in the **Commands to execute** field.
    In our example, it would be `php checkUsernames.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **Yes** to the **Send email on completion?** question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the screen that follows, you will see your command on a list of currently
    scheduled commands. Consider the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5849OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin uses your system's command scheduling facility (called `at` on Unix systems)
    that allows users to postpone the execution of a command until a specified future
    time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps we took in this recipe could also be performed at the command line
    by issuing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `at` command wraps commands (that are passed through standard input) into
    script files that are stored in a directory (usually in `/var/spool/at` or `/var/spool/cron/atjobs/`).
    The `atd` daemon waits until the time specified for execution and runs the scripts
    at the appropriate moment.
  prefs: []
  type: TYPE_NORMAL
- en: Webmin also allows you to list and delete scheduled jobs. Take a look at the
    *There's more...* section of this recipe. Listing of jobs can be done at the command
    line using the `atq` command, and deleting a particular job can be done using
    the `atrm` command that takes the job's number as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To see a list of commands scheduled for execution on your system, navigate
    back to **System** | **Scheduled Commands**. Consider the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/5849OS_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To cancel any of these commands, check the box next to its ID and click the
    **Cancel Selected Commands** button.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you would like to execute the same command repeatedly, take a look at the
    next recipe, *Scheduling a command to run regularly with cron*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduling a command to run regularly with cron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many tasks need to be executed repeatedly on a regular schedule. These include
    housekeeping jobs such as backing up important files, checking for software updates,
    deleting old temporary files, and checking logs for unusual messages to alert
    administrators.
  prefs: []
  type: TYPE_NORMAL
- en: Your applications may have additional tasks that should also be run on a regular
    schedule, and Webmin provides an interface that is more intuitive than the command-line
    `crontab` utility to create and manage cron jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, I will assume that you have a site powered by Drupal hosted
    under the URL, `http://example.com/`. Drupal has a series of tasks that it should
    execute regularly (updating caches, checking for updates, and so on). In order
    to trigger these tasks, we will set up a cron job which regularly connects to
    the following URL: `http://example.com/cron.php?cron_key=XYZ`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a command to the cron schedule, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Scheduled Cron Jobs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link marked **Create a new scheduled cron job**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify your username in the textbox marked **Execute cron job as**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **Yes** to the **Active?** question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Specify the following command in the **Command** textbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '`curl` is a widely available command to transfer data with URL syntax over
    various network protocols. We use the preceding command to connect to and download
    a webpage from our web server. This strategy is used by Drupal to trigger maintenance
    tasks. The `-s` parameter passed to `curl` prevents it from outputting a progress
    meter or error messages.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Give the job a **Description**, for example, `Drupal periodic tasks for Example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, specify how often you want the task to be executed. We''ll need to specify
    a particular minute after the hour at which the task will be executed: Under **Minutes**,
    pick **Selected…** and choose a minute at random, for example, `19`. We''d like
    the task to run twice a day. So, under **Hours**, pick **Selected…** and choose
    `0` and `12`. We want the task to run every day, so we''ll pick **All** under
    **Days**, **Months**, and **Weekdays**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin adds the task we specified in the `crontab` (`cron` table) file for the
    user we selected. These files are usually stored in the `/var/spool/cron/crontabs`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: The time is specified in terms of minutes, hours, days of month, months, and
    weekdays. The scheduled command will execute at the exact time that matches these
    settings. For instance, if we specified the time as 19 minutes, 0 and 12 hours,
    and all days, months, and weekdays, the command will be executed every day at
    0:19 and 12:19\. The `cron` daemon waits until the appropriate time and then executes
    the scheduled commands.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should not start all jobs on the full hour because you may create unnecessary
    system load spikes. Jobs should be spread out over the hour. If you don't have
    many jobs scheduled yet, you can pick a time at random. If your cron does a lot
    of work, you should probably check when fewest jobs are scheduled.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin's interface allows us more control over cron jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling a cron task temporarily
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we want to disable a cron job temporarily, we can edit the `crontab` and
    comment the job's line out by prepending it with a hash symbol (`#`). Webmin makes
    this simpler by providing a graphical interface to the task.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Scheduled Cron Jobs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the command you would like to disable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **No** as the answer to the **Active?** question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloning a cron task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to create another cron task similar to one that already exists,
    use Webmin's cloning function.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Scheduled Cron Jobs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the command you would like to replicate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Clone Job** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A prefilled job creation screen will be open. Modify the job settings as needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specifying which users can schedule tasks with cron
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For security reasons, you may wish to restrict which users have the ability
    to schedule cron jobs. You may choose to allow all users access, choose to select
    users who have access, or select users for whom access will be denied.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you allow certain users to create cron jobs, all other users will be prevented
    from doing so. Conversely, if you deny some users the ability to create cron jobs,
    you are implicitly granting this possibility to everyone else.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Scheduled Cron Jobs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link marked **Control user access to cron jobs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Allow only listed users** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the ellipsis (**…**) in the same line and use the user chooser to select
    which users will be allowed to create cron jobs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a panel for the commands that you execute often
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some commands that you will find yourself running over and over again.
    In such cases, you may wish to use Webmin's **Custom Commands** module to create
    a convenient control panel from which you can run your command with the click
    of a button.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using this feature, you can also allow some users to run a command as a different
    user. It's also useful as an alternative to creating scripts and a way to store
    the syntax of long or complicated commands.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create a custom button that uses the `drush` command
    to clear caches of a Drupal site. You will probably want to use a different command,
    so make a note of its syntax and the directory you want to execute it in before
    you begin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to create a custom command button, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **Custom Commands**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link marked **Create a new custom command**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide a short **Description** of the command, for instance: `Clear caches`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide a longer description in the **HTML Description** field, for instance:
    `Clear Drupal caches for Example.com`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Input the command in the **Command** text area. In our example, the command
    is `drush cache-clear all`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Specify the directory in which the command will be executed in the **Run in
    directory** field. In our case, we''ll specify the directory in which the Drupal
    site is installed: `/var/www/drupal`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the username of a user who has the ability to execute your command in
    the **Run as** **user** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be brought back to the **Custom Commands** module where a new command
    button will be presented. Click the button to execute your command. You can come
    back to **Others** | **Custom Commands** at any time to run your command by pressing
    this button.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin stores the custom command configurations in the `/etc/webmin/custom`
    directory. Whenever you visit the **Custom Commands** module, Webmin reads these
    configuration files and dynamically builds an administrative panel for you. When
    you press a button associated with a command, Webmin executes it for you.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are quite a few other options associated with Webmin's custom commands
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning a command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to create another custom command similar to one that already
    exists, use Webmin's cloning function.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Custom Commands**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Edit command** link under the command you wish to replicate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Clone** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new command screen will be open. Modify settings as needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specifying command arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your command takes arguments, you can build a more complex user interface
    that will ask you to specify the values of these parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, we set up a control panel entry to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The last argument (`all`) specifies which caches should be cleared. Other possible
    values of this parameter include: `theme-registry`, `menu`, `css-js`, and so on.
    Let''s expand our control panel to ask the user for this parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **Custom Commands**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Edit command** link under the command we created in this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the command to `drush cache-clear $cacheType`. `$cacheType` will be a
    placeholder for our argument value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s add the parameter to the command form and specify how it should
    be displayed. Specify `cacheType` as **Parameter name**, add **Description**,
    specify **Type** as **Menu..**, and type in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not forget to add the pipe (`|`) character at the end or the menu will fail
    to appear properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The command line outputs possible values of the parameter on separate lines.
    Consider the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Specifying command arguments](img/5849OS_04_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we specified the possible parameter values by using the `printf`
    command and separating each value by a new-line character (`\n`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Another way of specifying possible parameter values is to save them to a file
    (also one value per line) and specify the pathname of the file in the textbox.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In effect, you would have created a custom command form that allows you to
    specify a parameter value before execution. Consider the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Specifying command arguments](img/5849OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making the command available in Usermin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may decide to make your custom control panel command available to your
    non-administrative users through Usermin. This is quite simple. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **Custom Commands**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Edit command** link under the command you would like to make available
    in Usermin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **Yes** to the **Available in Usermin?** question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, log in to Usermin and navigate to **Others** | **Custom Commands** to see
    the available commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin's online help has additional tips and tricks about creating custom commands.
    Click the **Help..** link on each Webmin screen to access this information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about setting up Usermin, refer to the recipe, *Installing
    Usermin*, in [Chapter 2](ch02.html "Chapter 2. User Management"), *User Management*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a panel with the database commands that you execute often
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we created an easy-to-use control panel that allows
    you to execute custom commands with the click of a button. Webmin allows you to
    extend this functionality by adding custom commands that execute SQL queries on
    MySQL and PostgreSQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to follow this recipe, you will need to have a MySQL or PostgreSQL
    database installed and set up. Refer to [Chapter 9](ch09.html "Chapter 9. Running
    a MySQL Database Server"), *Running a MySQL Database Server*, and [Chapter 10](ch10.html
    "Chapter 10. Running a PostgreSQL Database Server"), *Running a PostgreSQL Database
    Server*, for information on how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, I will assume that you are running a web application that uses
    a database called `django` and stores its caches in the database table called
    `cache`. We''ll create a custom command that empties (truncates) the `cache` table.
    Your situation will probably be different. So, before beginning, make a note of
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the database that you want to run your query on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syntax of the SQL command that you want to execute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name and password of the database user with appropriate privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location of the database server (if different than localhost)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type of the database to which you're connecting (MySQL or PostgreSQL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to create a custom database command button, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **Custom Commands**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link marked **Create a new SQL command**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide a short **Description** of the command, for instance: `Clear cache`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide a longer description in the **HTML Description** field, for instance:
    `Clear Django DB cache for Example.com`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Type** of database you''re using: either MySQL or PostgreSQL.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Database name**; in our example, it's `django`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the SQL command that will be executed, in our example, it would be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter the username and password of the database user with appropriate permissions
    to execute the SQL command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify which server the database is hosted on if it's different than the localhost,
    or choose **This server as Database server host**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin stores the custom command configurations in the `/etc/webmin/custom`
    directory. Whenever you visit the **Custom Commands** module, Webmin reads these
    configuration files and dynamically builds an administrative panel for you. When
    you press a button associated with a command, Webmin connects to the database
    server and executes the SQL commands for you.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are additional options for setting up custom commands. Refer to the previous
    recipe, *Create a panel for commands you execute often*, for more information
    and examples.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webmin's online help has additional tips and tricks about creating custom commands.
    Click the **Help..** link on each Webmin screen to access this information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a terminal emulator in the browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite the wide range of options that Webmin allows you to control, you will
    find yourself in situations that require more direct access to your system. For
    such situations, you should equip yourself with a full-fledged terminal emulator
    and SSH client. If you need to perform a quick operation on your server through
    the terminal but don't have access to your tools, Webmin will allow you to open
    a simple terminal emulator in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run a server terminal in your browser, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **Text login**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the system using the username and password of a user with SSH access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform your command-line tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `exit` and press *Enter* to close your terminal session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin uses a component called Ajaxterm that connects to your system over SSH,
    passes your commands to the server, and displays terminal output in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, visit the Ajaxterm website at [https://github.com/antonylesuisse/qweb](https://github.com/antonylesuisse/qweb).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is another component that allows you to access your computer's terminal
    through Webmin. You can find it by navigating to **Others** | **SSH login**. This
    component has similar features. However, it requires running Java in your browser,
    which isn't recommended for security reasons.
  prefs: []
  type: TYPE_NORMAL

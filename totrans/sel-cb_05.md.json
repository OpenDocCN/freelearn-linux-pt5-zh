["```\n    type named_t;\n    type named_exec_t;\n    init_daemon_domain(named_t, named_exec_t)\n    ```", "```\n    type qemu_image_t;\n    files_type(qemu_image_t)\n    ```", "```\n    manage_files_pattern(qemu_t, qemu_image_t, qemu_image_t)\n    ```", "```\n    type named_var_run_t;\n    files_pid_file(named_var_run_t)\n    ```", "```\n    allow named_t named_var_run_t:file manage_files_perms;\n    allow named_t named_var_run_t:sock_file manage_sock_file_perms;\n    files_pid_filetrans(named_t, named_var_run_t, { file sock_file });\n    ```", "```\ntype postfix_bounce_t;\ntype postfix_bounce_exec_t;\ndomain_type(postfix_bounce_t)\ndomain_entry_file(postfix_bounce_t, postfix_bounce_exec_t)\n```", "```\ndomtrans_pattern(postfix_master_t, postfix_bounce_exec_t, postfix_bounce_t)\n```", "```\ntype amanda_log_t;\nlogging_log_file(amanda_log_t)\n# Directories created by amanda_t domain in /var/log (var_log_t) get the amanda_log_t type:\nlogging_log_filetrans(amanda_t, amanda_log_t, dir)\n```", "```\ntype amanda_tmp_t;\nfiles_tmp_file(amanda_tmp_t)\n# All files, directories and symbolic links created by amanda_t in a tmp_t location should get the amanda_tmp_t label:\nfiles_tmp_filetrans(amanda_t, amanda_tmp_t, { dir lnk_file file })\n```", "```\ntype amanda_var_run_t;\nfiles_pid_file(amanda_var_run_t)\n# Files and sockets created in /var/run should become amanda_var_run_t:\nfiles_pid_filetrans(amanda_t, amanda_var_run_t, { file sock_file })\n```", "```\n    corenet_tcp_connect_postgresql_port(postgresql_t)\n    corenet_sendrecv_postgresql_client_packets(postgresql_t)\n    ```", "```\n    ## <desc>\n    ##   <p>\n    ##     Determine if the PostgreSQL daemons can connect to other databases.\n    ##   </p>\n    ## </desc>\n    gen_tunable(postgresql_connect_db, false)\n    ```", "```\n    tunable_policy(`postgresql_connect_db',`\n      corenet_tcp_connect_postgresql_port(postgresql_t)\n      corenet_sendrecv_postgresql_client_packets(postgresql_t)\n    ')\n    ```", "```\n    ##########################################\n    ## <summary>\n    ##   Read clamav configuration files\n    ## </summary>\n    ## <param name=\"domain\">\n    ##   <summary>\n    ##   Domain allowed access\n    ##   </summary>\n    ## </param>\n    #\n    interface(`clamav_read_config','\n      gen_require(`\n        type clamd_etc_t;\n      ')\n      files_search_etc($1)\n      allow $1 clamd_etc_t:file read_file_perms;\n    ')\n    ```", "```\n    ########################################\n    ## <summary>\n    ##   Do not audit attempts to read the clamd configuration files\n    ## </summary>\n    ## <param name=\"domain\">\n    ##   <summary>\n    ##   Domain not to audit\n    ##   </summary>\n    ## </param>\n    #\n    interface(`clamav_dontaudit_read_config',`\n      gen_require(`\n        type clamd_etc_t;\n      ')\n      dontaudit $1 clamd_etc_t:file read;\n    ')\n    ```", "```\n    #######################################\n    ## <summary>\n    ##   Execute wm in the caller domain\n    ## </summary>\n    ## <param name=\"domain\">\n    ##   <summary>\n    ##   Domain allowed access\n    ##   </summary>\n    ## </param>\n    #\n    interface(`wm_exec',`\n      gen_require(`\n        type wm_exec_t;\n      ')\n      corecmd_search_bin($1)\n      can_exec($1, wm_exec_t)\n    ')\n    ```", "```\n    ##########################################\n    ## <summary>\n    ##   Execute vlock in the vlock domain\n    ## </summary>\n    ## <param name=\"domain\">\n    ##   <summary>\n    ##   Domain allowed to transition\n    ##   </summary>\n    ## </param>\n    #\n    interface(`vlock_domtrans',`\n      gen_require(`\n        type vlock_t, vlock_exec_t;\n      ')\n      corecmd_search_bin($1)\n      domtrans_pattern($1, vlock_exec_t, vlock_t)\n    ')\n    ```", "```\n    #########################################\n    ## <summary>\n    ##   Execute vlock in the vlock domain and allow the specific role the vlock domain\n    ## </summary>\n    ## <param name=\"domain\">\n    ##   <summary>\n    ##   Domain allowed to transition\n    ##   </summary>\n    ## </param>\n    ## <param name=\"role\">\n    ##   <summary>\n    ##   Role allowed to access the vlock domain\n    ##   </summary>\n    ## </param>\n    #\n    interface(`vlock_run',`\n      gen_require(`\n        attribute_role vlock_roles;\n      ')\n      vlock_domtrans($1)\n      roleattribute $2 vlock_roles;\n    ')\n    ```", "```\noptional_policy(`\n  clamav_domtrans_clamscan(procmail_t)\n')\n```", "```\noptional_policy(`\n  clamav_exec_clamscan(procmail_local_t)\n')\n```", "```\n    interface(`ldap_stream_connect',`\n      gen_require(`\n        type slapd_t, slapd_var_run_t;\n      ')\n      files_search_pids($1)\n      stream_connect_pattern($1, slapd_var_run_t, slapd_var_run_t, slapd_t)\n    ')\n    ```", "```\ninterface(`init_stream_connect',`\n  gen_require(`\n    type init_t;\n  ')\n  allow $1 init_t:unix_stream_connect connectto;\n')\n```", "```\n~$ seshowdef stream_connect_pattern\ndefine(`stream_connect_pattern',`\n  allow $1 $2:dir search_dir_perms;\n  allow $1 $3:sock_file write_sock_file_perms;\n  allow $1 $4:unix_stream_socket connectto;\n')\n```", "```\n    type virtd_initrc_exec_t;\n    init_script_file(virtd_initrc_exec_t)\n    ```", "```\n    /etc/rc\\.d/init\\.d/libvirtd  --  gen_context(system_u:object_r:virtd_initrc_exec_t,s0)\n    ```", "```\n    ##########################################\n    ## <summary>\n    ##   All rules related to administer a virt environment\n    ## </summary>\n    ## <param name=\"domain\">\n    ##   <summary>\n    ##   Domain allowed access\n    ##   </summary>\n    ## </param>\n    ## <param name=\"role\">\n    ##   <summary>\n    ##   Role allowed access\n    ##   </summary>\n    ## </param>\n    #\n    interface(`virt_admin',`\n      gen_require(`\n        â€¦\n    ')\n    ```", "```\n    files_search_tmp($1)\n    admin_pattern($1, virt_tmp_t)\n    ```", "```\n    # Allow the admin to run strace or other tracing tools against the daemons\n    allow $1 virtd_t:process { ptrace signal_perms };\n    # Allow admins to view all information related to the processes\n    ps_process_pattern($1, virtd_t)\n    ```", "```\n    init_labeled_script_domtrans($1, virtd_initrc_exec_t)\n    domain_system_change_exemption($1)\n    role_transition $2 virtd_initrc_exec_t system_r;\n    allow $2 system_r;\n    ```", "```\nrole_transition $2 virtd_initrc_exec_t system_r;\n```"]
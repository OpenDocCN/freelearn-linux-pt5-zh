["```\n $ cd ~\n $ /usr/lib/ssl/misc/CA.pl -newca\n\n```", "```\n$ /usr/lib/ssl/misc/CA.pl -newca\nCA certificate filename (or enter to create)\n```", "```\nCA certificate filename (or enter to create)\n\nMaking CA certificate \nGenerating a 1024 bit RSA private key\n....++++++\n...................................++++++\nunable to write 'random state'\nwriting new private key to './demoCA/private/cakey.pem'\nEnter PEM pass phrase:\nVerifying - Enter PEM pass phrase:\n-----\n```", "```\nYou are about to be asked to enter information that will be \n    incorporated into your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or \n    a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:Illinois\nLocality Name (eg, city) []:Chicago\nOrganization Name (eg, company) [Internet Widgits]:Example.Com\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, YOUR name) []:Matt Butcher\nEmail Address []:matt@example.com \n\nPlease enter the following 'extra' attributes\n    to be sent with your certificate request\nA challenge password []:mypassword\nAn optional company name []:Example.Com\n\n```", "```\nUsing configuration from /usr/lib/ssl/openssl.cnf\nEnter pass phrase for ./demoCA/private/cakey.pem:\nCheck that the request matches the signature\nSignature ok\nCertificate Details:\n      Serial Number:\n        bf:2f:58:47:b1:6d:31:4d\n      Validity\n        Not Before: Oct 10 21:34:28 2006 GMT\n        Not After : Oct  9 21:34:28 2009 GMT\n      Subject:\n        countryName               = US\n        stateOrProvinceName       = Illinois\n        organizationName          = Example.Com\n        commonName                = Matt Butcher\n        emailAddress              = matt@example.com\n      X509v3 extensions:\n        X509v3 Basic Constraints: \n            CA:FALSE\n          Netscape Comment: \n            OpenSSL Generated Certificate\n          X509v3 Subject Key Identifier: \n\n07:92:9B:35:CB:B7:EE:92:A8:33:61:B0:DC:F7:88:E9:4F:06:9F:7F\n    X509v3 Authority Key Identifier: \n\nkeyid:07:92:9B:35:CB:B7:EE:92:A8:33:61:B0:DC:F7:88:E9:4F:06:9F:7F\n\nCertificate is to be certified until \n    Oct 9 21:34:28 2009 GMT (1095 days)\n\nWrite out database with 1 new entries\nData Base Updated\n\n```", "```\n$ /usr/lib/ssl/misc/CA.pl -newreq\nGenerating a 1024 bit RSA private key\n.....++++++\n.....................++++++\nunable to write 'random state'\nwriting new private key to 'newkey.pem'\nEnter PEM pass phrase:\nVerifying - Enter PEM pass phrase:\n-----\nYou are about to be asked to enter information that will be \n    incorporated into your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or \n    a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:Illinois\nLocality Name (eg, city) []:Chicago\nOrganization Name (eg, company) [Internet Widgits]:Example.Com\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, YOUR name) []:example.com\nEmail Address []:matt@example.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\nRequest is in newreq.pem, private key is in newkey.pem\n```", "```\n$ /usr/lib/ssl/misc/CA.pl -signreq\nUsing configuration from /usr/lib/ssl/openssl.cnf\nEnter pass phrase for ./demoCA/private/cakey.pem:\nCheck that the request matches the signature\nSignature ok\nCertificate Details:\n      Serial Number:\n        ba:49:df:f5:8e:7e:77:c2\n      Validity\n        Not Before: Oct 12 21:23:49 2006 GMT\n        Not After : Oct 12 21:23:49 2007 GMT\n      Subject:\n        countryName               = US\n        stateOrProvinceName       = Illinois\n        localityName              = Chicago\n        organizationName          = Example.Com\n        commonName                = example.com\n        emailAddress              = matt@example.com\n      X509v3 extensions:\n        X509v3 Basic Constraints: \n          CA:FALSE\n        Netscape Comment: \n          OpenSSL Generated Certificate\n        X509v3 Subject Key Identifier: \n\n47:DD:90:8F:79:90:2E:C0:CC:B3:95:62:35:C4:D8:6C:5D:A2:EE:88\n     X509v3 Authority Key Identifier: \n                keyid:6B:FB:66:33:5D:DB:CC:40:42:D7:71:F7:F0:D0:7C:94:3E:8F:CD:58\n\nCertificate is to be certified until \n    Oct 12 21:23:49 2007 GMT (365 days)\nSign the certificate? [y/n]:y\n\n1 out of 1 certificate requests certified, commit? [y/n]y\nWrite out database with 1 new entries\nData Base Updated\nSigned certificate is in newcert.pem\n\n```", "```\n $ openssl rsa < newkey.pem > clearkey.pem\n\n```", "```\nEnter pass phrase:\nwriting RSA key\n```", "```\n $ sudo mv cacert.pem /etc/ldap/example.com.cert.pem\n $ sudo mv clearkey.pem /etc/ldap/example.com.key.pem\n\n```", "```\n $ sudo chown root:root /etc/ldap/example.com.*.pem\n $ sudo chmod 400 /etc/ldap/example.com.key.pem\n\n```", "```\n $ sudo cp cacert.pem /usr/share/ca-certificates/Example.Com-CA.crt\n\n```", "```\n$ sudo update-ca-certificates\nUpdating certificates in /etc/ssl/certs....done.\n```", "```\n $ rm newkey.pem newreq.pem\n\n```", "```\n###########\n# SSL/TLS #\n###########\nTLSCACertificatePath    /etc/ssl/certs/\nTLSCertificateFile      /etc/ldap/example.com.cert.pem\nTLSCertificateKeyFile   /etc/ldap/example.com.key.pem\n```", "```\nTLS_CACERTDIR /etc/ssl/certs\n```", "```\nTLS_REQCERT allow\n```", "```\n $ ldapsearch -LLL -x -W -D 'cn=Manager,dc=example,dc=com' -H \\ \n ldap://example.com -ZZ '(uid=manny)'\n\n```", "```\nEnter LDAP Password: \ndn: uid=manny,ou=Users,dc=example,dc=com\nsn: Kant\nuid: immanuel\nuid: manny\nou: Users\nobjectClass: person\nobjectClass: organizationalPerson\nobjectClass: inetOrgPerson\ngivenName: Manny\ncn: Manny Kant\n```", "```\n$ ldapsearch -LL -x -W -D 'cn=Manager,dc=example,dc=com' -H \\ \n    ldap://localhost -ZZ '(uid=manny)'\n\nldap_start_tls: Connect error (-11)\n    additional info: TLS: hostname does not match CN in peer \n    certificate\n\n```", "```\nSLAPD_SERVICES=\"ldap:/// ldaps:///\"\n```", "```\nSLAPD_SERVICES=\"ldap://127.0.0.1/ ldaps:///\"\n```", "```\n/usr/local/libexec/slapd -h \"ldap:/// ldaps:///\"\n```", "```\n ldapsearch -LL -x -W -D 'cn=Manager,dc=example,dc=com' -H \\ \n ldaps://example.com '(uid=manny)'\n\n```", "```\n $ openssl s_client -connect example.com:636\n\n```", "```\ninclude /etc/ldap/schema/core.schema\n\nmodulepath /usr/local/libexec/openldap\nmoduleload back_hdb\n# Other configuration directives ...\n\n# DB 1:\ndatabase hdb\nsuffix \"ou=Users,dc=example,dc=com\"\n# More directives for DB 1...\n# DB 2:\ndatabase bdb\nsuffix \"ou=System,dc=example,dc=com\"\n# More directives for DB 2...\n```", "```\ninclude /etc/ldap/schema/core.schema\n\nmodulepath /usr/local/libexec/openldap\nmoduleload back_hdb\nloglevel stats\n# Other configuration directives ...\n\n# DB 1:\ndatabase hdb\nsuffix \"ou=Users,dc=example,dc=com\"\nsecurity ssf=112\n# More directives for DB 1...\n\n# DB 2:\ndatabase bdb\nsuffix \"ou=System,dc=example,dc=com\"\nsecurity ssf=0\n# More directives for DB 2...\n```", "```\n $ ldapsearch -x -W -D 'uid=matt,ou=Users,dc=example,dc=com' -b \\ \n 'ou=Users,dc=example,dc=com' '(uid=david)' uid\n\n```", "```\nconn=0 fd=12 ACCEPT from IP=127.0.0.1:48758 (IP=0.0.0.0:389)\nconn=0 op=0 BIND dn=\"uid=matt,ou=Users,dc=example,dc=com\" method=128\nconn=0 op=0 RESULT tag=97 err=13 text=confidentiality required\nconn=0 fd=12 closed (connection lost)\nconnection_read(12): no connection!\n```", "```\n $ ldapsearch -x -W -D 'uid=matt,ou=Users,dc=example,dc=com' -b \\ \n 'ou=Users,dc=example,dc=com' -Z '(uid=david)' uid\n\n```", "```\nconn=1 fd=12 ACCEPT from IP=127.0.0.1:44684 (IP=0.0.0.0:389)\nconn=1 op=0 STARTTLS\nconn=1 op=0 RESULT oid= err=0 text=\nconn=1 fd=12 TLS established tls_ssf=256 ssf=256\nconn=1 op=1 BIND dn=\"uid=matt,ou=Users,dc=example,dc=com\" method=128\nconn=1 op=1 BIND dn=\"uid=matt,ou=Users,dc=example,dc=com\" mech=SIMPLE ssf=0\nconn=1 op=1 RESULT tag=97 err=0 text=\n```", "```\nsecurity tls=128\n```", "```\nsecurity simple_bind=128\n```", "```\nsecurity ssf=56 update_ssf=256\n```", "```\n# Special Account for Authentication:\ndn: uid=authenticate,ou=System,dc=example,dc=com\nuid: authenticate\nou: System\ndescription: Special account for authenticating users\nuserPassword: secret\nobjectClass: account\nobjectClass: simpleSecurityObject\n```", "```\n $ sudo apt-get install sasl2-bin\n\n```", "```\n# SASL Configuration\npwcheck_method: auxprop\nsasldb_path: /etc/sasldb2\n```", "```\n $ sudo saslpasswd2 -c -u example.com matt \n\n```", "```\nuid=matt,cn=example.com,cn=DIGEST-MD5,cn=auth\n```", "```\nuid=matt,ou=Users,dc=example,dc=com\n```", "```\n\"^uid=([^,]+).*,cn=auth$\"\n```", "```\nauthz-regexp \"^uid=([^,]+).*,cn=auth$\"\n             \"uid=$1,ou=Users,dc=example,dc=com\"\n```", "```\n$ ldapsearch -LLL -U matt@example.com -v '(uid=matt)' uid\nldap_initialize( <DEFAULT> )\nSASL/DIGEST-MD5 authentication started\nPlease enter your password: \nSASL username: matt@example.com\nSASL SSF: 128\nSASL installing layers\nfilter: (uid=matt)\nrequesting: uid \ndn: uid=matt,ou=Users,dc=example,dc=com\nuid: matt\n```", "```\nuid=matt,cn=example.com,cn=DIGEST-MD5,cn=auth\n```", "```\nuid=<username>,ou=users,dc=example,dc=com.\n```", "```\nauthz-regexp \"^uid=([^,]+).*,cn=auth$\"\n             \"ldap:///dc=example,dc=com??sub?(uid=$1)\"\n```", "```\nldap:///dc=example,dc=com??sub?(uid=matt)\n```", "```\n$ ldapsearch -LLL -U matt@example.com -v '(uid=matt)' uid\nldap_initialize( <DEFAULT> )\nSASL/DIGEST-MD5 authentication started\nPlease enter your password: \nSASL username: matt@example.com\nSASL SSF: 128\nSASL installing layers\nfilter: (uid=matt)\nrequesting: uid \ndn: uid=matt,ou=Users,dc=example,dc=com\nuid: matt\n```", "```\naccess to attrs=uid\n       by anonymous read\n       by users read\n```", "```\nuid=matt,cn=example.com,cn=digest-md5,cn=auth\n```", "```\nsasl-realm  example.com\n```", "```\n$ ldapsearch -LLL -U matt -v '(uid=matt)' uid\nldap_initialize( <DEFAULT> )\nSASL/DIGEST-MD5 authentication started\nPlease enter your password: \nSASL username: matt\nSASL SSF: 128\nSASL installing layers\nfilter: (uid=matt)\nrequesting: uid \ndn: uid=matt,ou=Users,dc=example,dc=com\nuid: matt\n```", "```\n$ sudo slapd -d trace\n# some of the voluminous output removed...\nslap_sasl_getdn: u:id converted to uid=matt,cn=DIGEST-MD5,cn=auth\n>>> dnNormalize: <uid=matt,cn=DIGEST-MD5,cn=auth>\n<<< dnNormalize: <uid=matt,cn=digest-md5,cn=auth>\n==>slap_sasl2dn: converting SASL name uid=matt,cn=digest-md5,cn=auth \n                 to a DN\nslap_authz_regexp: converting SASL name \n                   uid=matt,cn=digest-md5,cn=auth\nslap_authz_regexp: converted SASL name to \n                   uid=matt,ou=Users,dc=example,dc=com\nslap_parseURI: parsing uid=matt,ou=Users,dc=example,dc=com\nldap_url_parse_ext(uid=matt,ou=Users,dc=example,dc=com)\n>>> dnNormalize: <uid=matt,ou=Users,dc=example,dc=com>\n<<< dnNormalize: <uid=matt,ou=users,dc=example,dc=com>\n<==slap_sasl2dn: Converted SASL name to \n                 uid=matt,ou=users,dc=example,dc=com\nslap_sasl_getdn: dn:id converted to \n                 uid=matt,ou=users,dc=example,dc=com\n```", "```\n$ /usr/lib/ssl/misc/CA.pl -newreq\nGenerating a 1024 bit RSA private key\n............++++++\n..++++++\nunable to write 'random state'\nwriting new private key to 'newkey.pem'\nEnter PEM pass phrase:\nVerifying - Enter PEM pass phrase:\n-----\nYou are about to be asked to enter information that will be \n    incorporated into your certificate request.\nWhat you are about to enter is what is called a Distinguished \n    Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:Illinois\nLocality Name (eg, city) []:Chicago\nOrganization Name (eg, company) \n    [Internet Widgits Pty Ltd]:Example.Com\nOrganizational Unit Name (eg, section) []: \nCommon Name (eg, YOUR name) []:matt\nEmail Address []:matt@example.com\n\nPlease enter the following 'extra' attributes\n    to be sent with your certificate request\nA challenge password []:\nAn optional company name []:\nRequest is in newreq.pem, private key is in newkey.pem\n```", "```\n$ /usr/lib/ssl/misc/CA.pl -signreq\nUsing configuration from /usr/lib/ssl/openssl.cnf\nEnter pass phrase for ./demoCA/private/cakey.pem:\nCheck that the request matches the signature\nSignature ok\nCertificate Details:\n    Serial Number:\n      ba:49:df:f5:8e:7e:77:c6\n    Validity\n      Not Before: Jul  4 03:28:28 2007 GMT\n      Not After : Jul  3 03:28:28 2008 GMT\n    Subject:\n      countryName               = US\n      stateOrProvinceName       = Illinois\n      localityName              = Chicago\n      organizationName          = Example.Com\n      commonName                = matt\n      emailAddress              = matt@example.com\n    X509v3 extensions:\n      X509v3 Basic Constraints: \n        CA:FALSE\n      Netscape Comment: \n        OpenSSL Generated Certificate\n      X509v3 Subject Key Identifier: \n\n9A:97:8F:8C:95:1F:E0:6E:50:BD:DF:F4:C5:71:68:92:3F:A0:30:DD\n      X509v3 Authority Key Identifier: \n\nkeyid:6B:FB:66:33:5D:DB:32:40:42:D7:71:F7:F0:D0:7C:94:3E:8F:CD:58\n\nCertificate is to be certified until \n    Jul 3 03:28:28 2008 GMT (365 days)\nSign the certificate? [y/n]:y\n\n1 out of 1 certificate requests certified, commit? [y/n]y\nWrite out database with 1 new entries\nData Base Updated\nunable to write 'random state'\nSigned certificate is in newcert.pem\n```", "```\n $ sudo mkdir /home/mbutcher/certs\n $ sudo mv new*.pem /home/mbutcher/certs\n $ sudo chown -R mbutcher:mbutcher /home/mbutcher/certs\n\n```", "```\n$ cd /home/mbutcher\n$ touch .ldaprc\n```", "```\nSASL_MECH EXTERNAL\nTLS_CERT /home/mbutcher/certs/newcert.pem\nTLS_KEY /home/mbutcher/certs/newkey.pem\nTLS_CACERT /etc/ssl/certs/Example.Com-CA.pem\n```", "```\nTLSCACertificateFile    /etc/ssl/certs/Example.Com-CA.pem\nTLSCertificateFile      /etc/ldap/example.com.cert.pem\nTLSCertificateKeyFile   /etc/ldap/example.com.key.pem\nTLSVerifyClient         try\n\n```", "```\ndn:email=matt@example.com,cn=matt,o=example.com,l=chicago,\\\n    st=illinois,c=us\n```", "```\n^email=([^,]+),cn=([^,]+).*,c=us$\n```", "```\nauthz-regexp \"^email=([^,]+),cn=([^,]+).*,c=us$\"\n             \"uid=$2,ou=Users,dc=example,dc=com\"\n```", "```\n$ ldapwhoami -ZZ -H 'ldap://example.com'\nEnter PEM pass phrase:\nSASL/EXTERNAL authentication started\nSASL username: emailAddress=matt@example.com,CN=Matt, \\O=Example.Com,L=Chicago,ST=Illinois,C=US\nSASL SSF: 0\ndn:uid=matt,ou=users,dc=example,dc=com\nResult: Success (0)\n```", "```\nldapwhoami -ZZ -H 'ldap://example.com'\n```", "```\nEnter PEM pass phrase:\n```", "```\nopenssl rsa < newkey.pem > clearkey.pem\n```", "```\nSASL/EXTERNAL authentication started\nSASL username: emailAddress=matt@example.com,CN=Matt, \\O=Example.Com,L=Chicago,ST=Illinois,C=US\nSASL SSF: 0\n```", "```\nemail=matt@example.com,cn=matt,o=example.com,l=chicago,st=illinois,\\\n    c=us\n```", "```\ndn:uid=matt,ou=users,dc=example,dc=com\nResult: Success (0)\n```", "```\n$ ldapwhoami -ZZ -H 'ldap://example.com'\nEnter PEM pass phrase:\nSASL/EXTERNAL authentication started\nSASL username: \nemailAddress=matt@example.com,CN=Matt,O=Example.Com,L=Chicago,\n    ST=Illinois,C=US\nSASL SSF: 0\ndn:email=matt@example.com,cn=matt,o=example.com,l=chicago,st=illinois,c=us\nResult: Success (0)\n\n```", "```\n# More 'by' clauses, if necessary....\n\n```", "```\naccess to dn=\"uid=matt,ou=Users,dc=example,dc=com\"\n       by * none\n```", "```\naccess to dn.subtree=\"ou=Users,dc=example,dc=com\"\n       by * none\n\n```", "```\naccess to dn.regex=\"uid=[^,]+,ou=Users,dc=example,dc=com\"\n       by * none\n```", "```\naccess to attrs=homePhone\n       by * none\n```", "```\naccess to attrs=homePhone,homePostalAddress\n       by * none\n```", "```\naccess to attrs=@organizationalPerson\n       by * none\n\n```", "```\naccess to attrs=!organizationalPerson\n       by * none\n```", "```\naccess to attrs=givenName val=\"Matt\"\n       by * none\n\n```", "```\naccess to attrs=givenName val.regex=\"M.*\"\n       by * none\n```", "```\naccess to attrs=member val.children=\"ou=Users,dc=example,dc=com\"\n       by * none\n```", "```\naccess to filter=\"(objectClass=simpleSecurityObject)\"\n       by * none\n```", "```\naccess to \n    filter=\"(|(|(givenName=Matt)(givenName=Barbara))(sn=Kant))\"\n       by * none\n```", "```\naccess to dn.subtree=\"ou=Users,dc=example,dc=com\"\n    filter=\"(employeeNumber=*)\"\n       by * none\n```", "```\naccess to dn.subtree=\"ou=System,dc=example,dc=com\" \n    attrs=description\n       by * none\n```", "```\naccess to attrs=givenName \n       by * =c\n```", "```\n$ ldapsearch -LLL -U matt \"(uid=matt)\" givenName\nSASL/DIGEST-MD5 authentication started\nPlease enter your password: \nSASL username: matt\nSASL SSF: 128\nSASL installing layers\ndn: uid=matt,ou=Users,dc=example,dc=com\n\n```", "```\n$ ldapcompare -U matt uid=matt,ou=Users,dc=example,dc=com \\ \n \"givenName: Matt\"\nSASL/DIGEST-MD5 authentication started\nPlease enter your password: \nSASL username: matt\nSASL SSF: 128\nSASL installing layers\nTRUE\n\n```", "```\naccess to attrs=givenName \n       by * =rcd\n```", "```\naccess to attrs=givenName \n       by * +r\n```", "```\naccess to attrs=givenName \n       by * =0\n```", "```\naccess to attrs=userPassword\n       by anonymous auth\n```", "```\naccess to attrs=userPassword\n       by anonymous auth\n       by self write\n```", "```\naccess to attrs=sn,givenName,displayName,telephoneNumber,mail\n       by self write\n       by users read\n```", "```\naccess to dn.subtree=\"ou=System,dc=example,dc=com\" attrs=description\n       by dn=\"uid=barbara,ou=Users,dc=example,dc=com\" write\n       by dn.children=\"ou=System,dc=example,dc=com\" read\n       by dn.regex=\"uid=[^,]+,ou=Users,dc=example,dc=com\" read\n```", "```\naccess to dn.subtree=\"ou=System,dc=example,dc=com\"\n by group=\"cn=Admins,ou=Groups,dc=example,dc=com\" write\n       by users read\n```", "```\ndn: cn=LDAP Admins,ou=Groups,dc=example,dc=com\ncn: LDAP Admins\nou: Groups\ndescription: Users who are LDAP administrators\nuniqueMember: uid=barbara,ou=Users,dc=example,dc=com\nuniqueMember: uid=matt,ou=Users,dc=example,dc=com\nobjectClass: groupOfUniqueNames\n```", "```\naccess to dn.subtree=\"ou=System,dc=example,dc=com\"\n by group/groupOfUniqueNames/uniqueMember=\n \"cn=LDAP Admins,ou=Groups,dc=example,dc=com\" write\n       by users read\n```", "```\naccess to dn.subtree=\"ou=System,dc=example,dc=com\"\n by group/groupOfUniqueNames/uniqueMember.regex=\n \"cn=[^,]+,ou=Groups,dc=example,dc=com\" write\n       by users read\n```", "```\naccess to dn.exact=\"cn=LDAP Admins,ou=Groups,dc=example,dc=com\"\n       by dnattr=uniqueMember write\n       by users read\n```", "```\naccess to dn.subtree=\"ou=users,dc=example,dc=com\"\n by self sasl_ssf=128 write\n       by users read\n```", "```\naccess to *\n       by peername.ip=127.0.0.1 write\n       by peername.ip=10.40.0.0%255.255.255.0 read\n```", "```\naccess to * \n       by peername.ip=127.0.0.1 break\n       by peername.ip=10.40.0.0%255.255.255.0 tls_ssf=128 break\n```", "```\naccess to * \n       by domain.exact=\"main.example.com\" write\n       by domain.sub=\"example.com\" read\n```", "```\naccess to dn.exact=\"uid=matt,ou=Users,dc=example,dc=com\"\t\n       by sockurl=\"ldapi://var/run/ldapi\" write\n       by users read\n```", "```\naccess to dn.subtree=\"ou=System,dc=example,dc=com\"\n by set=\"[cn=ldap admins,ou=groups,dc=example,dc=com]/\n uniqueMember & user\" write\n       by users none\n```", "```\n{ uid=matt,ou=users,dc=example,dc=com ; \n    uid=barbara,ou=users,dc=example,dc=com }\n```", "```\n{ uid=matt,ou=users,dc=example,dc=com }\n```", "```\n{ uid=matt,ou=users,dc=example,dc=com }\n```", "```\n{ uid=matt,ou=users,dc=example,dc=com ; \n    uid=barbara,ou=users,dc=example,dc=com }\n```", "```\n{ uid=david,ou=users,dc=example,dc=com }\n```", "```\n{ }\n```", "```\naccess to dn.subtree=\"dc=example,dc=com\"\n       by set=\"this & user\" write\n       by set=\"this/ou & user/ou\" read\n```", "```\n{ uid=david,ou=users,dc=exampls,dc=com } & \n    { uid=david,ou=users,dc=example,dc=com }\n```", "```\n{ 'Users' }\n```", "```\n{ 'Users' }\n\n```", "```\naccess to dn.child=\"ou=Users,dc=example,dc=com\"\n       by set=\"this/title\" write\n```", "```\ntitle: Systems Integrator\n```", "```\n{ 'Systems Integrator' }\n```", "```\naccess to dn.child=\"ou=Users,dc=example,dc=com\"\n       by set=\"this/objectclass & [person]\" write\n```", "```\n{ 'person' ; 'organizationalPerson' ; 'inetOrgPerson' }\n```", "```\n{ 'person' }\n```", "```\naccess to attr=employeeNumber, employeeType, departmentNumber\n       by users=cd\n       by dn=\"uid=matt,ou=Users,dc=example,dc=com\" +r\n\naccess to attr=employeeNumber\n       by users +w\n```", "```\naccess to attr=employeeNumber, employeeType, departmentNumber\n       by users-=cd continue\n       by dn=\"uid=matt,ou=Users,dc=example,dc=com\" +r\n\naccess to attr=employeeNumber\n       by users +w\n```", "```\naccess to attr=employeeNumber, employeeType, departmentNumber\n       by users=cd continue\n       by dn=\"uid=matt,ou=Users,dc=example,dc=com\" +r break\n\naccess to attr=employeeNumber\n       by users +w stop\n```", "```\naccess to dn.regex=\"ou=([^,]+),dc=example,dc=com\"\n       by dn.children,expand=\"ou=$1,dc=example,dc=com\" read\n```", "```\naccess to dn.regex=\"uid=([^,]+),ou=([^,]+),dc=example,dc=com\"\n       by dn.children,expand=\"uid=$1,ou=$2,dc=example,dc=com\" write\n```", "```\naccess to dn.regex=\"uid=[^,]+,ou=([^,]+),dc=example,dc=com\"\n       by dn.regex=\"uid=[^,]+,ou=$1,dc=example,dc=com\" write\n```", "```\n $ slapacl -U matt -b \"cn=LDAP Admins,ou=Groups,dc=example,dc=com\" \\ \n \"description/read\"\n\n```", "```\n$ slapacl -U matt -b \"uid=matt,ou=Users,dc=example,dc=com\" \n    \"uid/compare\"\nauthcDN: \"uid=matt,ou=users,dc=example,dc=com\"\ncompare access to uid: ALLOWED\n```", "```\n$ slapacl -U matt -b \"uid=matt,ou=Users,dc=example,dc=com\" -d trace \n    \"uid/compare\"\nslapacl init: initiated tool.\nslap_sasl_init: initialized!\nhdb_back_initialize: initialize HDB backend\nhdb_back_initialize: Sleepycat Software: Berkeley DB 4.3.29: \n    (September  6, 2005)\nbdb_db_init: Initializing HDB database\n>>> dnPrettyNormal: <dc=example,dc=com>\n# LOTS of lines deleted...\n<<< dnPrettyNormal: <uid=matt,ou=Users,dc=example,dc=com>, \n    <uid=matt,ou=users,dc=example,dc=com>\nentry_decode: \"\"\n<= entry_decode()\ncompare access to uid: ALLOWED\nslapacl shutdown: initiated\n====> bdb_cache_release_all\nslapacl destroy: freeing system resources.\n```", "```\n########\n# ACLs #\n########\naccess to attrs=userPassword\n       by anonymous auth\n       by self write\n       by * none\n\naccess to *\n       by self write\n       by * none\n```", "```\n########\n# ACLs #\n########\ninclude /etc/ldap/acl.conf\n```", "```\naccess to * \n       by peername.ip=127.0.0.1 none break\n       by peername.ip=10.40.0.0%255.255.255.0 none break\n```", "```\naccess to dn.subtree=\"dc=example,dc=com\"\n       by group/groupOfUniqueNames/uniqueMember=\n           \"cn=LDAP Admins,ou=Groups,dc=example,dc=com\" write\n       by * none break\n```", "```\naccess to attrs=userPassword\n       by anonymous auth\n       by self write\n```", "```\naccess to attrs=uid\n        by anonymous read\n        by users read\n```", "```\naccess to attrs=ou,employeeNumber,employeeType by users read\n```", "```\naccess to * \n       by dn.exact=\"uid=Authenticate,ou=System,dc=example,dc=com\" \n           none\n       by users none break\n```", "```\naccess to dn.subtree=\"ou=System,dc=example,dc=com\"\n       by dn.subtree=\"ou=Users,dc=example,dc=com\" none\n       by users read\n```", "```\naccess to dn.regex=\"^.*,uid=([^,]+),ou=Users,dc=example,dc=com$\"\n       by dn.exact,expand=\"uid=$1,ou=Users,dc=example,dc=com write\n```", "```\naccess to *\n       by self write\n       by users read\n```", "```\n#################################################\n# ACLs\n# These are ACLs for the first database section\n# of the slapd.conf file found in this directory\n#################################################\n##\n## Restrict by IP address:\naccess to *\n       by peername.ip=127.0.0.1 none break\n       by peername.ip=10.40.0.0%255.255.255.0 none break\n\n## Give Admins immediate write access:\naccess to dn.subtree=\"dc=example,dc=com\"\n       by group/groupOfUniqueNames/uniqueMember=\"cn=LDAP \n           Admins,ou=Groups,dc=example,dc=com\" write\n       by * none break\n\n## Grant access to passwords for auth, but allow users to change \n## their own.\naccess to attrs=userPassword\n       by anonymous auth\n       by self write\n\n## This rule is needed by authz-regexp\n## (Note: Since uid is used in DN, user cannot change its own uid.)\naccess to attrs=uid\n       by anonymous read\n       by users read\n## Don't let anyone modify OUs, employee num or employee type.\naccess to attrs=ou,employeeNumber,employeeType by users read\n\n## Stop authentication account from reading anything else. This also \n## stops anonymous.\naccess to *\n       by dn.exact=\"uid=Authenticate,ou=System,dc=example,dc=com\" \n           none\n       by users none break\n\n## Prevent DNs in ou=Users from seeing system accounts\naccess to dn.subtree=\"ou=System,dc=example,dc=com\"\n       by dn.subtree=\"ou=Users,dc=example,dc=com\" none\n       by users read\n\n## Allow user to add subentries beneath its own record.\naccess to dn.regex=\"^.*,uid=([^,]+),ou=Users,dc=example,dc=com$\"\n       by dn.exact,expand=\"uid=$1,ou=Users,dc=example,dc=com\" write\n\n## The default rule: Allow DNs to modify their own records. Give \n## read access to everyone else.\naccess to *\n       by self write\n       by users read\n```"]
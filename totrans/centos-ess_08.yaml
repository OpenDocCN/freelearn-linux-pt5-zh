- en: Chapter 8. Introducing CoreUpdate and Container/Enterprise Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how to set up a production cluster and deploy
    our code, how to set up staging using Docker builder, and private Docker registry
    machines to production servers.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will overview the CoreOS update strategies, paid CoreUpdate
    services, and Docker image hosting at the Container Registry and the Enterprise
    Registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Update strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CoreUpdate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container Registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we look at the paid CoreUpdate services from CoreOS, let's overview automatic
    update strategies that come out-of-the-box.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CoreOS comes with automatic updates enabled by default.
  prefs: []
  type: TYPE_NORMAL
- en: As we have mentioned earlier, as updates are released by the CoreOS team, the
    host will stage them down to a temporary location and install to the passive `usr`
    partition. After rebooting, active and passive partitions get swapped.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing this book, there are four update strategies, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automatic updates](img/image00171.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Which update strategy should be used is defined in the `update` part of `cloud-config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at what these update strategies are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`best-effort`: This is the default one and works in such a way that it checks
    whether the machine is part of the cluster. Then it uses `etcd-lock`; otherwise
    it uses the `reboot` strategy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`etcd-lock`: This allows us to boot only one machine at a time by putting a
    `reboot` lock on each machine and rebooting them one by one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reboot`: This reboots the machine as soon as the update gets installed on
    the passive partition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`off`: The machine will not be rebooted after a successful update install onto
    the passive partition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses of update strategies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some examples of what `update` strategies can be used for:'
  prefs: []
  type: TYPE_NORMAL
- en: '`best-effort`: This is recommended to be used in production clusters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reboot`: This can be used for machines that can only be rebooted at a certain
    time of the day—for example, for automatic updates in a maintenance window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`off`: This can be used for a local development environment where the control
    of reboots is in the user''s hands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to learn more about update strategies, take a look at the CoreOS
    website at [https://coreos.com/docs/cluster-management/setup/update-strategies/](https://coreos.com/docs/cluster-management/setup/update-strategies/).
  prefs: []
  type: TYPE_NORMAL
- en: CoreUpdate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CoreUpdate is a part of the managed Linux plans ([https://coreos.com/products/](https://coreos.com/products/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is a tool in the commercial offerings of CoreOS. It provides users with
    their own supported Omaha server and is analogous to tools such as Red Hat Satellite
    Server and Canonical Landscape:'
  prefs: []
  type: TYPE_NORMAL
- en: The standard plan is managed and hosted by CoreOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The premium plan can be run behind the firewall, which can be on-premise or
    on the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CoreUpdate uses exactly the same strategies as the aforementioned `update`
    strategies, except for a few differences in the `update` portion of the `cloud-config`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`group` is what you have set at your CoreUpdate dashboard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server` is the link generated for you after signing in for the managed Linux
    plan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our current example, as per `cloud-config`, the servers belong to `https://customer.update.core-os.net/v1/update`
    and `group` is `production`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We change via the CoreUpdate UI, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CoreUpdate](img/image00172.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following features are present:'
  prefs: []
  type: TYPE_NORMAL
- en: Release channel; in our case, it is the stable one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable/disable automatic updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time window between machines updates; in our case, it is 90 minutes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CoreUpdate UI allows you to very easily control your cluster update groups,
    without any need to perform `ssh` via the terminal to your servers and change
    there on each server individually update settings.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about CoreUpdate at the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://coreos.com/docs/coreupdate/coreos/coreupdate-configure-machines](https://coreos.com/docs/coreupdate/coreos/coreupdate-configure-machines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://coreos.com/docs/coreupdate/coreos/coreupdate-getting-started](https://coreos.com/docs/coreupdate/coreos/coreupdate-getting-started)'
  prefs: []
  type: TYPE_NORMAL
- en: Container Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Container Registry is a hosted CoreOS service for application containers
    at [https://quay.io](https://quay.io). There, you can host your Docker images
    if you don''t want to run Private Docker Registry yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: It offers free, unlimited storage and repositories for public container repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want private repositories, it offers a plenty of plans to choose from
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quay.io overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go through an overview of what they have there: a nice and easy-to-use
    UI.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Quay.io overview](img/image00173.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot we see postgres containers image in more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Quay.io overview](img/image00174.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you see from the preceding screenshot, the UI is very easy to use and it's
    easy to understand the features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how the Create Repository feature looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Quay.io overview](img/image00175.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you create a new repository, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Make the repository public or private.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Empty it if you want to build containers yourself and push them to the Registry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide (upload) a `Docker` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link to the GitHub repository. This is the preferred choice as it allows you
    to automate container building when you push changes to your GitHub Repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enterprise Registry is basically the same as Container Registry, but is hosted
    on your premises or cloud servers behind your firewall.
  prefs: []
  type: TYPE_NORMAL
- en: It has different plan options and can be found at [https://coreos.com/products/enterprise-registry/](https://coreos.com/products/enterprise-registry/).
  prefs: []
  type: TYPE_NORMAL
- en: It allows you to manage container builds, permissions of your teams and users,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: If your company's requirement is a setup that is very secured and fully controlled
    by you, then using the Container Registry and Enterprise Registry is the way to
    go.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we overviewed the CoreOS update strategies, CoreUpdate services,
    the hosted free/paid Container Registry at [https://quay.io](https://quay.io),
    and the self-hosted Enterprise Registry services.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will be introduced to the CoreOS rkt—App Container
    runtime that can be used instead of Docker containers.
  prefs: []
  type: TYPE_NORMAL

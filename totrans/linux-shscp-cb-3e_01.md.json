["```\nusername@hostname$\n\n```", "```\n#!/bin/bash\n\n```", "```\n bash myScript.sh\n\n```", "```\n chmod 755 myScript.sh ./myScript.sh.\n\n```", "```\n$ chmod a+x sample.sh\n\n```", "```\n$ ./sample.sh #./ represents the current directory\n\n```", "```\n$ /home/path/sample.sh # Full path of the script is used\n\n```", "```\n$ /bin/bash sample.sh\n\n```", "```\n# sample.sh - echoes \"hello world\" echo \"hello world\"\n\n```", "```\n$ echo \"Welcome to Bash\" Welcome to Bash\n\n```", "```\n$ echo Welcome to Bash Welcome to Bash\n\n```", "```\n$ echo 'text in quotes'\n\n```", "```\n$ echo \"cannot include exclamation - ! within double quotes\"\n\n```", "```\nbash: !: event not found error\n\n```", "```\n$ echo Hello world ! \n\n```", "```\n$ echo 'Hello world !'\n\n```", "```\n$ echo \"Hello World\\!\" #Escape character \\ prefixed.\n\n```", "```\necho hello; hello \n\n```", "```\n$ printf \"Hello world\"\n\n```", "```\n#!/bin/bash #Filename: printf.sh printf  \"%-5s %-10s %-4s\\n\" No Name  Mark printf  \"%-5s %-10s %-4.2f\\n\" 1 Sarath 80.3456 printf  \"%-5s %-10s %-4.2f\\n\" 2 James 90.9989 printf  \"%-5s %-10s %-4.2f\\n\" 3 Jeff 77.564\n\n```", "```\nNo    Name       Mark 1     Sarath     80.35 2     James      91.00 3     Jeff       77.56\n\n```", "```\necho -e \"1\\t2\\t3\" 1  2  3\n\n```", "```\necho -e \"\\e[1;31m This is red text \\e[0m\"\n\n```", "```\necho -e \"\\e[1;42m Green Background \\e[0m\"\n\n```", "```\n$> env \nPWD=/home/clif/ShellCookBook \nHOME=/home/clif \nSHELL=/bin/bash \n# ... And many more lines\n\n```", "```\ncat /proc/$PID/environ\n\n```", "```\n$ pgrep gedit 12501\n\n```", "```\n$ cat /proc/12501/environ GDM_KEYBOARD_LAYOUT=usGNOME_KEYRING_PID=1560USER=slynuxHOME=/home/slynux\n\n```", "```\n$ cat /proc/12501/environ  | tr '\\0' '\\n'\n\n```", "```\nvarName=value\n\n```", "```\nvar=\"value\" #Assign \"value\" to var echo $var\n\n```", "```\necho ${var}\n\n```", "```\nvalue\n\n```", "```\n#!/bin/bash #Filename :variables.sh fruit=apple count=5 echo \"We have $count ${fruit}(s)\"\n\n```", "```\nWe have 5 apple(s)\n\n```", "```\nHTTP_PROXY=192.168.1.23:3128 export HTTP_PROXY\n\n```", "```\n$ echo $PATH \n/home/slynux/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\n\n```", "```\nexport PATH=\"$PATH:/home/user/bin\"\n\n```", "```\n$ PATH=\"$PATH:/home/user/bin\" \n$ export PATH \n$ echo $PATH \n/home/slynux/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/home/user/bin\n\n```", "```\nlength=${#var}\n\n```", "```\n$ var=12345678901234567890$ echo ${#var} 20\n\n```", "```\necho $SHELL\n\n```", "```\necho $0\n\n```", "```\n$ echo $SHELL /bin/bash\n\n```", "```\n$ echo $0 /bin/bash\n\n```", "```\nIf [ $UID -ne 0 ]; then \n  echo Non root user. Please run as root. \nelse \n  echo Root user \nfi\n\n```", "```\nif test $UID -ne 0:1 \n  then \n    echo Non root user. Please run as root \n  else \n    echo Root User \nfi\n\n```", "```\n        $ cat ~/.bashrc | grep PS1 \n        PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ '\n\n```", "```\n        slynux@localhost: ~$ PS1=\"PROMPT> \" # Prompt string changed \n        PROMPT> Type commands here.\n\n```", "```\nPATH=/usr/bin;/bin \nLD_LIBRARY_PATH=/usr/lib;/lib\n\n```", "```\nexport PATH=/opt/myapp/bin:$PATH \nexport LD_LIBRARY_PATH=/opt/myapp/lib;$LD_LIBRARY_PATH\n\n```", "```\nPATH=/opt/myapp/bin:/usr/bin:/bin \nLD_LIBRARY_PATH=/opt/myapp/lib:/usr/lib;/lib\n\n```", "```\nprepend() { [ -d \"$2\" ] && eval $1=\\\"$2':'\\$$1\\\" && export $1; }\n\n```", "```\nprepend PATH /opt/myapp/bin \nprepend LD_LIBRARY_PATH /opt/myapp/lib\n\n```", "```\nprepend() { [ -d \"$2\" ] && eval $1=\\\"$2\\$\\{$1:+':'\\$$1\\}\\\" && export $1 ; }\n\n```", "```\n #!/bin/bash no1=4; no2=5;\n\n```", "```\n let result=no1+no2 echo $result \n\n```", "```\n $ let no1++\n\n```", "```\n $ let no1--\n\n```", "```\n let no+=6 let no-=6\n\n```", "```\n result=$[ no1 + no2 ]\n\n```", "```\n result=$[ $no1 + 5 ]\n\n```", "```\n result=$(( no1 + 50 ))\n\n```", "```\n result=`expr 3 + 4` result=$(expr $no1 + 5)\n\n```", "```\n echo \"4 * 0.56\" | bc 2.24 no=54; result=`echo \"$no * 1.5\" | bc` echo $result 81.0\n\n```", "```\n echo \"scale=2;22/7\" | bc 3.14\n\n```", "```\n #!/bin/bash Desc: Number conversion no=100 echo \"obase=2;$no\" | bc 1100100 no=1100100 echo \"obase=10;ibase=2;$no\" | bc 100\n\n```", "```\n echo \"sqrt(100)\" | bc #Square root echo \"10^10\" | bc #Square\n\n```", "```\n $ echo \"This is a sample text 1\" > temp.txt\n\n```", "```\n $ echo \"This is sample text 2\" >> temp.txt\n\n```", "```\n $ cat temp.txt This is sample text 1 This is sample text 2\n\n```", "```\n$ ls + ls: cannot access +: No such file or directory\n\n```", "```\n$ ls + > out.txt ls: cannot access +: No such file or directory \n\n```", "```\n$ ls + 2> out.txt # works\n\n```", "```\n$ cmd 2>stderr.txt 1>stdout.txt\n\n```", "```\n$ cmd 2>&1 allOutput.txt\n\n```", "```\n$ cmd &> output.txt \n\n```", "```\n$ echo A1 > a1 $ echo A2 > a2 $ echo A3 > a3 $ chmod 000 a1  #Deny all permissions\n\n```", "```\n$ cat a* cat: a1: Permission denied A2 A3\n\n```", "```\n$ cat a* 2> err.txt #stderr is redirected to err.txt A2 A3 $ cat err.txt cat: a1: Permission denied\n\n```", "```\ncommand | tee FILE1 FILE2 | otherCommand\n\n```", "```\n$ cat a* | tee out.txt | cat -n cat: a1: Permission denied\n 1 A2 2 A3\n\n```", "```\n$ cat out.txt A2 A3\n\n```", "```\n$ cat a* | tee -a out.txt | cat -n\n\n```", "```\n$ cmd1 | cmd2 | cmd -\n\n```", "```\n$ echo who is this | tee - who is this who is this\n\n```", "```\n$ cat file | cmd $ cmd1 | cmd2\n\n```", "```\n$ cmd < file\n\n```", "```\n#!/bin/bash \ncat<<EOF>log.txt \nThis is a generated file. Do not edit. Changes will be overwritten. \nEOF\n\n```", "```\n$ cat log.txt \nThis is a generated file. Do not edit. Changes will be overwritten. \n\n```", "```\n$ exec 3<input.txt # open for reading with descriptor number 3\n\n```", "```\n$ echo this is a test line > input.txt $ exec 3<input.txt\n\n```", "```\n$ cat<&3 this is a test line\n\n```", "```\n$ exec 4>output.txt # open for writing\n\n```", "```\n$ exec 4>output.txt $ echo newline >&4 $ cat output.txt newline\n\n```", "```\n$ exec 5>>input.txt\n\n```", "```\n$ exec 5>>input.txt $ echo appended line >&5 $ cat input.txt newline appended line\n\n```", "```\n array_var=(test1 test2 test3 test4) #Values will be stored in consecutive locations starting \n        from index 0.\n\n```", "```\n array_var[0]=\"test1\" array_var[1]=\"test2\" array_var[2]=\"test3\" array_var[3]=\"test4\" array_var[4]=\"test5\" array_var[5]=\"test6\"\n\n```", "```\n echo ${array_var[0]} test1 index=5 echo ${array_var[$index]} test6\n\n```", "```\n $ echo ${array_var[*]} test1 test2 test3 test4 test5 test6\n\n```", "```\n $ echo ${array_var[@]} test1 test2 test3 test4 test5 test6\n\n```", "```\n $ echo ${#array_var[*]}6\n\n```", "```\n$ declare -A ass_array\n\n```", "```\n $ ass_array=([index1]=val1 [index2]=val2)\n\n```", "```\n $ ass_array[index1]=val1 $ ass_array'index2]=val2\n\n```", "```\n$ declare -A fruits_value $ fruits_value=([apple]='100 dollars' [orange]='150 dollars')\n\n```", "```\n$ echo \"Apple costs ${fruits_value[apple]}\" Apple costs 100 dollars\n\n```", "```\n$ echo ${!array_var[*]}\n\n```", "```\n$ echo ${!array_var[@]}\n\n```", "```\n$ echo ${!fruits_value[*]} orange apple\n\n```", "```\n $ alias new_command='command sequence'\n\n```", "```\n $ alias install='sudo apt-get install'\n\n```", "```\n $ echo 'alias cmd=\"command seq\"' >> ~/.bashrc\n\n```", "```\n alias rm='cp $@ ~/backup && rm $@'\n\n```", "```\n$ \\command\n\n```", "```\n$ aliasalias lc='ls -color=auto' alias ll='ls -l' alias vi='vim'\n\n```", "```\n tput cols tput lines\n\n```", "```\n tput longname\n\n```", "```\n tput cup 100 100\n\n```", "```\n tput setb n\n\n```", "```\n tput setf n\n\n```", "```\n tput bold\n\n```", "```\n tput smul tput rmul\n\n```", "```\n tput ed\n\n```", "```\n #!/bin/sh #Filename: password.sh echo -e \"Enter password: \" # disable echo before reading password stty -echo read password # re-enable echo stty echo echo echo Password read.\n\n```", "```\n $ date Thu May 20 23:09:04 IST 2010\n\n```", "```\n $ date +%s 1290047248\n\n```", "```\n $ date --date \"Wed mar 15 08:09:16 EDT 2017\" +%s 1489579718\n\n```", "```\n $ date --date \"Jan 20 2001\" +%A Saturday\n\n```", "```\n $ date \"+%d %B %Y\" 20 May 2010\n\n```", "```\n # date -s \"Formatted date string\" # date -s \"21 June 2009 11:01:22\"\n\n```", "```\n #!/bin/bash #Filename: time_take.sh start=$(date +%s) commands; statements; end=$(date +%s) difference=$(( end - start)) echo Time taken to execute commands is $difference seconds.\n\n```", "```\nsecs1=`date -d \"Jan 2 1970\" \nsecs2=`date -d \"Jan 3 1970\" \necho \"There are `expr $secs2 - $secs1` seconds between Jan 2 and Jan 3\" \nThere are 86400 seconds between Jan 2 and Jan 3 \n\n```", "```\n#!/bin/bash \n#Filename: sleep.sh \necho Count: \ntput sc \n\n# Loop for 40 seconds \nfor count in `seq 0 40` \ndo \n  tput rc \n  tput ed \n  echo -n $count \n  sleep 1 \ndone\n\n```", "```\n $ bash -x script.sh\n\n```", "```\n        #!/bin/bash \n        #Filename: debug.sh \n        for i in {1..6}; \n        do \n            set -x \n            echo $i \n            set +x \n        done \n        echo \"Script executed\"\n\n```", "```\n        #!/bin/bash \n        function DEBUG() \n        { \n            [ \"$_DEBUG\" == \"on\" ] && $@ || : \n        } \n        for i in {1..10} \n        do \n          DEBUG echo \"I is $i\" \n        done\n\n```", "```\n $ _DEBUG=on ./script.sh\n\n```", "```\nPS4='$LINENO: ' \n\n```", "```\nsh -x testScript.sh 2> debugout.txt\n\n```", "```\nexec 6> /tmp/debugout.txt \nBASH_XTRACEFD=6\n\n```", "```\n        function fname() \n        { \n            statements; \n        }  \n\n```", "```\n        fname() \n        { \n            statements; \n        } \n\n```", "```\n        fname() { statement; }\n\n```", "```\n $ fname ; # executes function\n\n```", "```\n fname arg1 arg2 ; # passing args\n\n```", "```\n        fname() \n        { \n           echo $1, $2; #Accessing arg1 and arg2 \n           echo \"$@\"; # Printing all arguments as list at once \n           echo \"$*\"; # Similar to $@, but arguments taken as single  \n           entity \n           return 0; # Return value \n         }\n\n```", "```\n $> alias lsg='ls | grep' \n $> lsg txt \n file1.txt \n file2.txt \n file3.txt \n\n```", "```\n $> alias wontWork='/sbin/ifconfig | grep' \n $> wontWork eth0 \n eth0  Link  encap:Ethernet  HWaddr 00:11::22::33::44:55 \n\n```", "```\n $> function getIP() { /sbin/ifconfig $1 | grep 'inet ';  } \n $> getIP eth0 \n inet addr:192.168.1.2 Bcast:192.168.255.255 Mask:255.255.0.0\n\n```", "```\nexport -f fname $> function getIP() { /sbin/ifconfig $1 | grep 'inet '; } $> echo \"getIP eth0\" >test.sh $> sh test.sh\n sh: getIP: No such file or directory $> export -f getIP $> sh test.sh\n inet addr: 192.168.1.2 Bcast: 192.168.255.255 Mask:255.255.0.0\n\n```", "```\ncmd; echo $?;\n\n```", "```\n#!/bin/bash \n#Filename: success_test.sh \n# Evaluate the arguments on the command line - ie success_test.sh 'ls | grep txt' \neval $@ \nif [ $? -eq 0 ]; \nthen \n echo \"$CMD executed successfully\" \nelse \n echo \"$CMD terminated unsuccessfully\" \nfi\n\n```", "```\necho $1 $2 $3\n\n```", "```\n$ cat showArgs.sh\nfor i in `seq 1 $#`\ndo\necho $i is $1\nshift\ndone\n$ sh showArgs.sh a b c\n1 is a\n2 is b\n3 is c\n\n```", "```\n$ cmd1 | cmd2 | cmd3 \n\n```", "```\n $ ls | cat -n > out.txt\n\n```", "```\n cmd_output=$(COMMANDS)\n\n```", "```\n cmd_output=$(ls | cat -n) echo $cmd_output\n\n```", "```\n cmd_output=`COMMANDS`\n\n```", "```\n cmd_output=`ls | cat -n`\n echo $cmd_output\n\n```", "```\n        $> pwd \n        / \n        $> (cd /bin; ls) \n        awk bash cat... \n        $> pwd \n        /\n\n```", "```\n$ cat text.txt 1 2 3 $ out=$(cat text.txt) $ echo $out 1 2 3 # Lost \\n spacing in 1,2,3 $ out=\"$(cat text.txt)\" $ echo $out 1 2 3\n\n```", "```\n read -n number_of_chars variable_name\n\n```", "```\n $ read -n 2 var $ echo $var\n\n```", "```\n read -s var\n\n```", "```\n read -p \"Enter input:\"  var\n\n```", "```\n read -t timeout var\n\n```", "```\n $ read -t 2 var # Read the string that is typed within 2 seconds into\n        variable var.\n\n```", "```\n read -d delim_char var\n\n```", "```\n $ read -d \":\" var hello:#var is set to hello\n\n```", "```\nrepeat() \n{ \n  while true \n  do \n    $@ && return \n  done \n}\n\n```", "```\nrepeat() { while true; do $@ && return; done }\n\n```", "```\nrepeat() { while :; do $@ && return; done }\n\n```", "```\nrepeat wget -c http://www.example.com/software-0.1.tar.gz\n\n```", "```\nrepeat() { while :; do $@ && return; sleep 30; done }\n\n```", "```\ndata=\"name,gender,rollno,location\" \nTo read each of the item in a variable, we can use IFS. \noldIFS=$IFS \nIFS=, # IFS is now a , \nfor item in $data; \ndo \n    echo Item: $item \ndone \n\nIFS=$oldIFS\n\n```", "```\nItem: name Item: gender Item: rollno Item: location\n\n```", "```\n#!/bin/bash \n#Desc: Illustration of IFS \nline=\"root:x:0:0:root:/root:/bin/bash\"  \noldIFS=$IFS; \nIFS=\":\" \ncount=0 \nfor item in $line; \ndo \n\n     [ $count -eq 0 ]  && user=$item; \n     [ $count -eq 6 ]  && shell=$item; \n    let count++ \ndone; \nIFS=$oldIFS \necho $user's shell is $shell;\n\n```", "```\nroot's shell is /bin/bash\n\n```", "```\n        for var in list; \n        do \n            commands; # use $var \n        done \n\n```", "```\necho {1..50} ;# Generate a list of numbers from 1 to 50.\necho {a..z} {A..Z} ;# List of lower and upper case letters. \n\n```", "```\n      for i in {a..z}; do actions; done;\n\n```", "```\n        for((i=0;i<10;i++)) \n        { \n           commands; # Use $i \n        }\n\n```", "```\n        while condition \n        do \n            commands; \n        done\n\n```", "```\n        x=0; \n        until [ $x -eq 9 ]; # [ $x -eq 9 ] is the condition \n        do \n            let x++; echo $x; \n        done\n\n```", "```\n        if condition; \n        then \n            commands; \n        fi\n\n```", "```\n        if condition;  \n        then \n            commands; \n        else if condition; then \n            commands; \n        else \n            commands; \n        fi \n\n```", "```\n[$var -eq 0 ] or [ $var -eq 0]\n\n```", "```\n[ $var -eq 0 ]  # It returns true when $var equal to 0\\. \n[ $var -ne 0 ] # It returns true when $var is not equal to 0\n\n```", "```\n[ $var1 -ne 0 -a $var2 -gt 2 ]  # using and -a \n[ $var1 -ne 0 -o var2 -gt 2 ] # OR -o\n\n```", "```\nfpath=\"/etc/passwd\" \nif [ -e $fpath ]; then \n    echo File exists;  \nelse \n    echo Does not exist;  \nfi\n\n```", "```\nif [[ -n $str1 ]] && [[ -z $str2 ]] ;\n   then\n       commands;\n   fi\n\n```", "```\nstr1=\"Not empty \" \nstr2=\"\" \nif [[ -n $str1 ]] && [[ -z $str2 ]]; \nthen \n    echo str1 is nonempty and str2 is empty string. \nfi\n\n```", "```\nstr1 is nonempty and str2 is empty string.\n\n```", "```\nif  [ $var -eq 0 ]; then echo \"True\"; fi \ncan be written as \nif  test $var -eq 0 ; then echo \"True\"; fi\n\n```", "```\n# Define my colors for ls \nLS_COLORS='no=00:di=01;46:ln=00;36:pi=40;33:so=00;35:bd=40;33;01' \nexport LS_COLORS \n# My primary prompt \nPS1='Hello $USER'; export PS1 \n# Applications I install outside the normal distro paths \nPATH=$PATH:/opt/MySpecialApplication/bin; export PATH \n# Shorthand for commands I use frequently \nfunction lc () {/bin/ls -C $* ; }\n\n```", "```\n/etc/profile, $HOME/.profile, $HOME/.bash_login, $HOME/.bash_profile /\n\n```", "```\n/etc/bash.bashrc $HOME/.bashrc\n\n```", "```\n$> cat myscript.sh \n#!/bin/bash \necho \"Running\"\n\n```", "```\n$> export BASH_ENV=~/.bashrc \n$> ./myscript.sh\n\n```", "```\nssh 192.168.1.100 ls /tmp\n\n```", "```\nssh 192.168.1.100\n\n```", "```\n/etc/profile \n/etc/bash.bashrc \n$HOME/.profile or .bashrc_profile\n\n```", "```\nalias l \"ls -l\"\n/etc/bash.bashrc /etc/bashrc\n\n```", "```\nCLASSPATH=$CLASSPATH:$HOME/MyJavaProject; export CLASSPATH\n$HOME/.bash_login $HOME/.bash_profile $HOME/.profile\n\n```", "```\n$HOME/.bashrc, /etc/bash.bashrc\n\n```", "```\n$HOME/.bash_logout\n\n```", "```\n$> cat ~/.bash_logout \n# Clear the screen after a remote login/logout. \nclear\n\n```"]
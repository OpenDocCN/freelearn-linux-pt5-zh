- en: Chapter 7. Puppet Configuration Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The recipes that are covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Puppet Master
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring Puppet agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a simple module to configure time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining nodes and node grouping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying modules to single nodes and node groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Puppet is an "old school" configuration management tool. It helps you enforce
    configurations with great ease although it is more complex than Ansible to use.
    Puppet's declarative language can be compared to a programming language and is
    difficult to master. However, once you understand how it works, it's fairly easy
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet is very good at maintaining a strict set of configurations, but if you
    aim at verifying the configurations before applying them, you'll find that Puppet
    is not the sharpest tool in the shed. Puppet does have the `audit` metaparameter
    that you can use in your resources to track changes, but it doesn't let you display
    where it differs from your manifest. In fact it doesn't allow you to add the `audit`
    metaparameter to your "active" module or manifests. It sits in a separate manifest
    that audits the requested resources.
  prefs: []
  type: TYPE_NORMAL
- en: The version of Puppet used in these recipes is v3.8 and covers the community
    edition.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Puppet Master
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The people at Puppet Labs have their own repository servers for puppet, which
    is very easy when it comes down to installing and maintaining the server and agent.
    Although the EPEL repository also provides puppet packages, they tend to be old
    or not up to date. Hence, I recommend using the Puppet Labs' yum repositories.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe covers a monolithic install. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the optional channel via the following command; you''ll need this to
    install the Puppet Server component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the `puppetlabs` repository installer, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, install the `puppetlabs` repository by executing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install `puppet-server` by typing out this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up Puppet Master by adding the following to the `[main]` section of `/etc/puppet/puppet.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, verify the generation of a CA certificate for the `puppet` environment
    through this command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Press *CTRL* + *C* when it displays the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, allow traffic to the Puppet Master port (`8140/tcp`) via the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start Puppet Master by executing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, enable Puppet Master at boot, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basic HTTP daemon that Puppet Master uses is not made to provide service
    for an enterprise. Puppet Labs recommends using Apache with Passenger to provide
    the same service as Puppet Master for a bigger range of systems (more than 10).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can either compile the Passenger module yourself, or you can just use `EPEL`
    (for the `rubygem(rack)` package) and the Passenger repository. I choose the latter.
    Here are the steps that you need to perform:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Passenger repository by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, download the EPEL repository installer, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `rpm` EPEL repository (with `yum`) via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, install the necessary packages for the Puppet web interface. For this,
    you can execute the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up Puppet Master''s virtual host directories and ownership, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the `rack` configuration file to Puppet Master''s virtual host root using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, change the ownership of the `config.ru` file. This is very important!
    You can do this through the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create an Apache virtual host configuration file at `/etc/httpd/conf.d/puppetmaster.conf`
    containing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that you replace the certificate directives with the certificate file
    paths of your own system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Disable the `puppetmaster` service via the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command line to stop the `puppetmaster` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, start Apache, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable Apache on boot through the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check your HTTP daemon''s status using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will result in the following (similar) output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![There''s more…](img/00051.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Puppet can also run in a masterless mode. In this case, you don't install a
    server but only the clients on all the systems that you wish to manage in this
    way.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more in-depth information about installing Puppet on RHEL, refer to the
    following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.puppetlabs.com/guides/install_puppet/install_el.html](https://docs.puppetlabs.com/guides/install_puppet/install_el.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the Puppet agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike Ansible, Puppet requires an agent to be able to enforce configurations.
    This recipe will teach you how to install and configure the puppet agent on a
    system. The only way to mass deploy the Puppet agent is through an orchestration
    tool (such as Ansible).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Puppet agent can be installed and maintained using the same repository
    as the Puppet server: the Puppet Labs repository. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the Puppet Labs repository installer via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the Puppet Labs repository by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command to download the EPEL repository installer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, install the `rpm` EPEL repository (with `yum`) through the following command
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the Puppet agent; you can run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, configure the agent so that it will connect to your Puppet Master.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add your Puppet Master to the `[main]` section of `/etc/puppet/puppet.conf`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the Puppet agent by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, enable the Puppet agent by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, sign the new node''s certificate on Puppet Master, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of signing every single certificate individually, you can sign the
    certificate for all systems that have been registered with Puppet Master by executing
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: If you start looking for puppet unit files in `/lib/systemd/system`, you'll
    also find a `puppetagent.service` unit file. The `puppetagent.service` unit file
    is actually a soft link to the `puppet.service` unit file.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to set the server property in the `/etc/puppet/puppet.conf`
    file, you can do this by defining a `puppet` DNS entry that points to Puppet Master
    in all the DNS domain zones.
  prefs: []
  type: TYPE_NORMAL
- en: The Puppet agent is known to consume memory. In order to mitigate this, the
    Puppet agent can be run as a cron job. This would release some memory, but you
    would lose the flexibility of pushing new configurations from Master.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will create a cron job that launches the Puppet agent once every `30`
    minutes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The Puppet agent can also be configured to run in the `Masterless` mode. This
    means that you will take care of distributing your puppet modules and classes
    yourself instead of Puppet taking care of this. This implies that you will synchronize
    all modules and classes, even those that are not used by the system, which can
    be a security risk.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a simple module to configure time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules are collections of manifests and files that define how to install and
    configure various components. Manifests contain the instructions to apply to a
    system's configuration. In this recipe, we'll create a simple module to install
    and configure the NTP daemon.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Puppet has a strict way of organizing modules. Your modules should always be
    stored in `/etc/puppet/modules`. Every module is a directory within this directory,
    containing the necessary directories that in turn contain manifests, files, templates,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll create the necessary directory structure, manifests,
    and files to configure your system''s time. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `ntp/manifests` in `/etc/puppet/modules` via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `ntp/templates` to house all the templates used by the puppet module
    through the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the `install.pp` file in `/etc/puppet/modules/ntp/manifests` with
    the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `config.pp` file in `/etc/puppet/modules/ntp/manifests` with the
    following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `ntp.conf.erb` template file in `/etc/puppet/modules/ntp/templates`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `service.pp` file in `/etc/puppet/modules/ntp/manifests` with the
    following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create the `init.pp` file that binds them all together in `/etc/puppet/modules/ntp/manifests`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When applying a module to a system, it applies the directives found in the module's
    `init.pp` manifest.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we created a template file that is "automagically" distributed
    to the clients. Puppet automatically creates a file share for the `templates`
    and `files` directories.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the `config.pp` file, the template references `ntp/ntp.conf.erb`.
    Puppet will automatically resolve this to the correct location (`ntp/templates/ntp.conf.erb`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I created four manifests to install and configure Puppet. This could be easily
    achieved by just creating one monolithic `init.pp` manifest with the contents
    of the other three files. When you start creating complex manifests, you'll be
    happy to have split them up.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to have a single location for all the assets (templates and files)
    you use in your modules, you will have to define a separate file share for this
    location in the `/etc/puppet/fileserver.conf` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Read up on Puppet Modules through the link [https://docs.puppetlabs.com/puppet/3.8/reference/modules_fundamentals.html](https://docs.puppetlabs.com/puppet/3.8/reference/modules_fundamentals.html).
  prefs: []
  type: TYPE_NORMAL
- en: Defining nodes and node grouping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to push a manifest, its classes, and assets to systems, they need to
    be known by Puppet Master. Grouping is practical if you want to push a manifest
    to a number of hosts without having to modify each configuration node.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In contrast to what the title wants you to believe, you cannot create a group
    and add nodes. However, you can group nodes and make them behave in a similar
    way to groups.
  prefs: []
  type: TYPE_NORMAL
- en: Nodes and node groups are defined in `/etc/puppet/manifests/site.pp` or a file
    at `/etc/puppet/manifests/site.pp`.
  prefs: []
  type: TYPE_NORMAL
- en: Create the configuration node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a `/etc/puppet/manifests/site.pp/rhel7-client.pp` file with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Create a node group
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a `/etc/puppet/manifests/site.pp/rhel7-clientgroup.pp` file with the
    following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have a strict naming convention, you can use `regular expressions` to
    define your node group. Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: By default, node names are defined by their certificate name, which is **FQDN**
    (**Fully Qualified Domain Name**) of the system we used to register with Puppet
    Master.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't remember the names of all of your nodes, you can easily find them
    at `/var/lib/puppet/ssl/ca/signed/`.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying modules to single nodes and node groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you define modules and nodes, you can start deploying the modules to your
    nodes. You can do this on various levels, which will be demonstrated in the following
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to deploy a module (or manifest) to a node, your must configure this
    in the node's stanza or a group of nodes that the node belongs to, or you can
    define it on the base level to apply it to every node.
  prefs: []
  type: TYPE_NORMAL
- en: Configure to deploy a module or manifest to a single client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Edit the client configuration node from the previous recipe and add an include
    statement referring to manifest you want to be applied to the client block. You
    can execute the following command for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Configure to deploy a module or manifest to a node group
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the same way you edited the single node file, edit the node group configuration
    file and add an include statement to the node group block referring to the manifest
    you want applied. Take a look at the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Configure to deploy to all registered systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One will typically have a node configuration file within `/etc/puppet/manifests/site.pp/`,
    or `/etc/puppet/manifests/site.pp` itself, if you work with one monolithic site
    definition, which affects all nodes. Edit `/etc/puppet/manifests/site.pp/default.pp`
    and enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Deploy to a system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the system with the Puppet Agent installed, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'When executed, the following will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploy to a system](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For testing purposes, there's an alternative to defining nodes and including
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the manifest(s), files, and templates to your test machine (usually, you
    will develop elsewhere than the production Puppet Master anyway) and execute them
    in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Puppet applies all manifests found in `/etc/puppet/manifests/site.pp`.
    As explained in the preceding section, this doesn't need to be a single monolithic
    file containing all your directives. When using it as a directory, it uses all
    the manifests found within this directory, or if the name of a subdirectory ends
    with `.pp`, it interprets all of its contents as manifests as well. It interprets
    all files alphanumerically.
  prefs: []
  type: TYPE_NORMAL

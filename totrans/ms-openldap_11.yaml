- en: Appendix C. Useful LDAP Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the course of this book we looked at all the command line tools that come
    in the OpenLDAP distribution. But the scope of this book requires the discussion
    of each of these tools briefly. There are some advanced uses of these tools that
    can come in handy at times. In this appendix I have provided examples of such
    uses.
  prefs: []
  type: TYPE_NORMAL
- en: In this appendix, we will cover
  prefs: []
  type: TYPE_NORMAL
- en: Getting information about the directory using `ldapsearch`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating backups of the directory using two different strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rebuilding a BDB/HDB database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Information about the Directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many LDAP servers provide information about their configuration and functional
    abilities. This information is stored in such a way that LDAP clients can directly
    access it using a search operation. For example, a client can fetch the **root
    DSE** record to find out the basic capabilities of the server. It can also access
    the **subschema** of the server and find out what object classes, syntaxes, matching
    rules, and attributes are supported.
  prefs: []
  type: TYPE_NORMAL
- en: The Root DSE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **root DSE (DSA-Specific Entry**, where **DSA** stands for **Directory
    Service Agent**) is a special entry that provides information about the server
    itself. The DN of the root DSE is an empty string (""). To retrieve it we need
    a carefully-crafted LDAP search that will set an empty search base and then retrieve
    that root entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that the base is set to an empty string, and the search scope is limited
    to the base record. These parameters combined have the effect of requesting only
    the record that has an empty DN. Also, since most of the attributes in the root
    DSE are operational attributes, we need to specify `'+'` at the end of the search.
  prefs: []
  type: TYPE_NORMAL
- en: 'The results of running this search look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Among other things, this record gives us information about what controls, features,
    and extensions are understood by and enabled on the server. For example, there
    is a `supportedFeature` line that reads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This line indicates that this LDAP server supports an LDAPv3 extension for **Change
    Password** operations as defined in RFC 3062 ([http://www.rfc-editor.org/rfc/rfc3062.txt](http://www.rfc-editor.org/rfc/rfc3062.txt)).
  prefs: []
  type: TYPE_NORMAL
- en: Using this information, a well-crafted LDAP client would be able to perform
    a server-side Change Password operation instead of changing the password on the
    client side and then using a Modify operation to send the change to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The advantage of the Change Password operation is in the server's storage. If
    the client changes a password through a Modify operation it must know in advance
    what types of encryption are supported on the server, it must do the encrypting
    itself, and then submit the encrypted password to the server. Usually, it is better
    to have the client securely contacting the server (over TLS, for example), and
    then using a Change Password operation so that the server can do the storage.
  prefs: []
  type: TYPE_NORMAL
- en: The root DSE record also points to the configuration (`cn=config`) and subschema
    (`cn=subschema`) records.
  prefs: []
  type: TYPE_NORMAL
- en: The Subschema Record
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The subschema record is stored in `cn=subschema`. This record contains detailed
    information about the schemas supported by the server, including what types of
    matching rules it has available, what sort of syntaxes are allowed in attributes,
    and what attributes and object classes are recognized by the server.
  prefs: []
  type: TYPE_NORMAL
- en: This information can be used by client applications to correctly craft records
    or searches, and then correctly interpret the responses.
  prefs: []
  type: TYPE_NORMAL
- en: 'The subschema record can be retrieved with `ldapsearch` using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example we request the desired record by setting the base DN to `cn=config`,
    and then requesting a search type of `base` (`-b` `'cn=subschema'` `-s` `base`).
    This returns the exact record with the DN `cn=subschema`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, most of the attributes we want are operational attributes, which means
    they will not be returned in a normal search, so at the end we specify `'+'` to
    indicate that we want the operational attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The record returned looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A subschema record contains all of the schema information and thus, it may be
    well over a thousand lines.
  prefs: []
  type: TYPE_NORMAL
- en: Subschema records can be particularly useful to learn about what schemas a server
    supports, or when developing and debugging custom schemas, as discussed in Chapter
    6.
  prefs: []
  type: TYPE_NORMAL
- en: The Configuration Record
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An experimental feature of OpenLDAP 2.3 (and one that will probably reach production
    quality in OpenLDAP 2.4) is the ability to store the LDAP configuration inside
    of the directory. To do this you must first re-create your configuration in LDIF
    format using a special configuration schema, and instruct SLAPD to read its configuration
    from this new LDIF file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration is stored inside of the directory with the DN `cn=config`.
    It can be accessed with a search similar to the one used in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In OpenLDAP 2.3, not all of the overlays and features of OpenLDAP work correctly
    with this new configuration style, and that is a significant drawback to its use.
    But improving this alternate configuration mechanism is a priority for development
    in OpenLDAP 2.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'What might be the advantages of storing your configuration in the directory?
    Here are a few:'
  prefs: []
  type: TYPE_NORMAL
- en: Easy access to configuration information through `ldapsearch` and other LDAP
    clients.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to edit configuration information through directory tools like `ldapmodify`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replication support for SLAPD configuration. You may be able to use SyncRepl
    to synchronize directory configurations across the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you would like to implement the new LDAP-based configuration file format,
    you can learn about it in the LDAP Administrators Guide at the OpenLDAP site:
    [http://www.openldap.org/doc/admin23/slapdconf2.html](http://www.openldap.org/doc/admin23/slapdconf2.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Making a Directory Backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two common strategies for backing up the contents of your directory.
    One is to make a backup of the directory database. The other is to dump the contents
    of the directory into an LDIF file.
  prefs: []
  type: TYPE_NORMAL
- en: A Backup Copy of the Directory Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Different backends locate the contents of the directory in different locations.
    For example, the BDB and HDB backends store data in special Berkeley DB database
    files. SQL-based backends store the information in a relational database management
    system. Special backends like the LDAP and Perl backends may not store data at
    all, but might simply access other sources.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these backends will require a different backup procedure. Here we will
    just look at backing up BDB and HDB databases—the types we've used throughout
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method is not portable. BDB/HDB files are version sensitive. Each new release
    of OpenLDAP (or of Berkeley DB) may use different structures for these databases,
    so this backup method only works when the backup and the restore are done on the
    same software versions.
  prefs: []
  type: TYPE_NORMAL
- en: In Ubuntu these database files are located at `/var/lib/ldap`. All of the files
    in this directory, including the indexes (those that end with the `bdb` extension),
    the main database files (`__db.???`) and the log files (`log.??????????`). It
    is also a good idea to make a copy of the `DB_CONFIG` file, though it rarely changes
    and does not store any directory data.
  prefs: []
  type: TYPE_NORMAL
- en: 'When backing up these files it is best to stop SLAPD. Here''s a very simple
    example using common shell tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will stop SLAPD and copy all of the files at `/var/lib/ldap/` to `/usr/local/backup/ldap/`.
    Then, SLAPD will be started again.
  prefs: []
  type: TYPE_NORMAL
- en: An LDIF Backup File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The second, and more portable, strategy for backing up the directory is to
    dump the contents of the directory to an LDIF file. There are several distinct
    advantages to this approach:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to stop SLAPD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output is more portable, and data can be moved from one database backend
    to another, and from one OpenLDAP version to another
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is less redundant data, so backup files are much smaller than the BDB/HDB
    files.To make an LDIF backup file of the contents of a directory server with only
    one database (that is, it has only one directory root), the command is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command uses `slapcat` to dump the contents of the directory, in the LDIF
    format, into the file `/usr/local/backup/my_directory.ldif`. It can be loaded
    back into the directory using the `slapdadd` tool discussed in Chapter 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your directory contains more than one directory information tree, you will
    need to run the `slapcat` routine once for each server, using the `-b` flag to
    identify the suffix (base DN) of the directory information tree you want to dump:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this example we backup each directory into its own LDIF file.
  prefs: []
  type: TYPE_NORMAL
- en: Rebuilding a Database (BDB, HDB)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes it is necessary to rebuild a backend database. This process differs
    depending on the database backend. For instance, with a SQL backend, it might
    entail dumping, dropping, and re-creating tables in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Moving to a new server and transferring contents to a new slave server are also
    processes similar to rebuilding a database, and the differences are mentioned
    within the text here.
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly-used backends for OpenLDAP are the HDB and BDB backends (both
    based on the Berkeley DB lightweight database). In this section, I want to cover
    the process of rebuilding these databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'This process consists of five steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Stop SLAPD
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dump the directory data into a file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the old directory files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start SLAPD
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of these steps is particularly difficult. In fact, for a small to medium-sized
    directory, this process can be done in less than ten minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Moving from Server to Server**'
  prefs: []
  type: TYPE_NORMAL
- en: Moving a directory from one server to another is done by a process very similar
    to that described here. Only step three, as mentioned later, differs. In this
    case, instead of deleting directory files, the LDIF file would be transferred
    from the original server to the new server. Steps one and two would be run on
    the original server, and steps four and five would be done on the new server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Stop the Server'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The purpose of stopping the server is to prevent additional changes to the directory
    information tree while we are working on it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are just dumping the contents of a master directory to import into a
    shadow server that will use SyncRepl, you need not stop the server. Any changes
    that happen after the directory has been dumped will be retrieved by the shadow
    server during its first LDAP synchronization operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done either by killing the server''s process ID, or by running
    the startup script with the stop command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now that the server is stopped, we can dump the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Dump the Database'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Chapter 3 I covered the OpenLDAP utilities. One of the tools I discussed
    was the `slapcat` program, which is a tool for dumping the contents of the directory
    into an LDIF file. That is the program we will use in this step.
  prefs: []
  type: TYPE_NORMAL
- en: Why use `slapcat` instead of an `ldapsearch`? There are two reasons.
  prefs: []
  type: TYPE_NORMAL
- en: First, `slapcat` preserves all of the attributes (and records for that matter)
    that the LDAP server uses, including the operational attributes that are stored.
    (Those operational attributes that are generated at runtime are not generated
    by `slapcat`, and that is good. We wouldn't want to import those, anyway.)
  prefs: []
  type: TYPE_NORMAL
- en: Second, `slapcat` accesses the database directly, instead of opening an LDAP
    connection to the server. That means that ACLs, time and size limits, and other
    by products of the LDAP connection are not evaluated, and hence will not alter
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: The BDB/HDB database is stored in a small set of files located at `/var/lib/ldap`
    (or `/usr/local/var/openldap-data` if you built from source). Usually access to
    those files is restricted to only the ID of the SLAPD user. By default this is
    `root` or `ldap`. In order to extract information using `slapcat`, you will need
    to have access to those files.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This command executes `slapcat` as root. The `-l` flag is used to pass in the
    name of the output file. In this case the file `backup.ldif` will be created in
    the `/tmp` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may prefer putting the LDIF file in a folder other than `/tmp`, especially
    if you plan on keeping the LDIF file for more than a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases the `-l` flag is the only one you will need. If you have more
    than one backend and you only want to dump one, you can use the `-n` flag to specify
    which backend to dump.
  prefs: []
  type: TYPE_NORMAL
- en: Once the `slapcat` is complete, we are done with this step.
  prefs: []
  type: TYPE_NORMAL
- en: Before continuing however, you may want to check the contents of the LDIF file
    to make sure that it is not corrupt. Do this before deleting the database files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Delete the Old Database Files'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are re-building a database you will want to delete the old database files
    before building new ones.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You do not need to do this if you are either migrating from an old server to
    a new server or configuring SyncRepl shadow servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'These files are stored at `/var/lib/ldap` (or `/usr/local/var/openldap-data`
    if you built from source). However, not all of the files in that directory should
    be deleted. We only want to delete:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The index files: files that end in ''`.bdb`''.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main database files: files named `__db.???`, where the question marks are
    replaced by numbers in sequence (`__db.001`, `__db.002`, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `alock` file: a file used internally for storing locking information. (Usually,
    this can be left with no negative consequences, but if SLAPD crashed, this can
    be left in an unstable state.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The BDB log files: files named `log.??????????`, where the ten question marks
    are replaced by numbers in sequence: `log.0000000001`, `log.0000000002`, and so
    on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is one file we definitely do not want to delete. This is our database
    configuration file, `DB_CONFIG`. Deleting it would cause the BDB engine to use
    its default settings, which are not tuned to our needs, and generally cause OpenLDAP
    to perform poorly.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to delete the files, we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To reduce the risk of data loss, you may want to backup the `__db.*`, `*.bdb`,
    and `log.*` files before removing them. Or instead of doing an `rm`, you may use
    `mv` to move the files to a different location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now the database directory has been cleared. We are ready to create new database
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Create a New Database'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The new database can be created and populated with the data all in one step,
    using the `slapadd` utility that we covered in Chapter 3\. Still in the OpenLDAP
    data directory, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will create all of the necessary files, import the LDIF file, and handle
    all of the data indexing as well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are running your LDAP server as a user other than root (and it is a
    good idea to do so), you will also need to use `chown` to change the ownership
    on all of the files at `/var/lib/ldap` to be owned by the SLAPD userID: `sudo`
    `chown` `openldap` `*.bdb` `log.*` `__db.*`.'
  prefs: []
  type: TYPE_NORMAL
- en: All we need to do now is restart the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Restart SLAPD'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you stopped the server in step 1 you will need to restart it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart the server in one of the usual ways. Using the init script is usually
    the best way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: That's all there is to it. Now you should have SLAPD running with a fresh copy
    of the database.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting Rebuilds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As long as the LDIF file exported with `slapcat` is good, there is not much
    that can go wrong in this process. Even if you have to delete and recreate several
    times, as long as the LDIF file is safe, no important data is at risk.
  prefs: []
  type: TYPE_NORMAL
- en: If SLAPD is running as a user other than `root`, the main problem with importing
    is usually the permissions on the database files at `/var/lib/ldap`. Permissions
    on the configuration files in `/etc/ldap` directory may also be the source of
    SLAPD failures. Make sure they are owned by the appropriate user.
  prefs: []
  type: TYPE_NORMAL
- en: When switching versions of OpenLDAP, occasionally an old LDIF file will not
    be valid in the new server (this happened between OpenLDAP 2.0 and OpenLDAP 2.2,
    and again between 2.2 and 2.3; it could happen again in the future). While the
    standard schemas are fairly stable over time, operational attributes, which are
    not usually standardized, are more volatile, and do change from release to release.
  prefs: []
  type: TYPE_NORMAL
- en: Often, the fix will be tweaking records in the LDIF file to match the attributes
    used in new version. One other common issue has to do with starting up the server.
    Sometimes, when using the init script, you will not be able to get the server
    to start, but no informative message will be sent to the console or the log files.
    (One common reason for the failure to start is the permissions issue I noted earlier).
  prefs: []
  type: TYPE_NORMAL
- en: 'A good first step in solving startup problems is to run `slapd` from the command
    line, with debugging enabled: `sudo slapd -d trace`.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this appendix we looked at a couple of useful commands, including some designed
    to get detailed information about the directory server itself. Also, we saw two
    ways of making directory backups, and examined the process of rebuilding a directory
    database.
  prefs: []
  type: TYPE_NORMAL

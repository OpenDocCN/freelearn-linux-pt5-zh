- en: Network Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络安全
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Managing TCP/IP networks
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理TCP/IP网络
- en: Using a packet sniffer to monitor network traffic
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据包嗅探器监控网络流量
- en: Using IP tables for configuring a firewall
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用IP防火墙进行配置
- en: Blocking spoofed addresses
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻止伪造地址
- en: Blocking incoming traffic
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻止传入流量
- en: Configuring and using TCP Wrappers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和使用TCP Wrappers
- en: Blocking country-specific traffic using `mod_security`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`mod_security`阻止特定国家的流量
- en: Securing network traffic using SSL
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SSL保护网络流量
- en: Managing TCP/IP networks
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理TCP/IP网络
- en: As the size of a computer network grows, managing the network's information
    becomes an important task for the system administrator.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着计算机网络规模的扩大，管理网络信息成为系统管理员的重要任务。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before we start with making any changes in the TCP/IP configuration, make sure
    to create a backup of the Network Manager configuration file by using the following
    command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始更改TCP/IP配置之前，请确保通过以下命令备份网络管理器配置文件：
- en: '![](img/b0f31cd4-7c0e-462a-8adf-ebf05c674d88.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0f31cd4-7c0e-462a-8adf-ebf05c674d88.png)'
- en: Also make a backup of the `/etc/network/interfaces` file in the same way.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 同样以相同的方式备份`/etc/network/interfaces`文件。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this section, we will see how we can manually configure the network settings
    using the command line:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何使用命令行手动配置网络设置：
- en: 'Before starting with the manual configuration, first, let''s check our current
    IP address, which has been assigned to the system automatically by DHCP. We can
    check the details graphically by right-clicking on the networking icon on the
    top-right panel and then selecting **Connection Information**, as shown in the
    following screenshot:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始手动配置之前，首先检查当前由DHCP自动分配给系统的IP地址。我们可以通过右键点击右上角面板上的网络图标，选择**连接信息**来以图形方式查看详细信息，如下图所示：
- en: '![](img/5ab25ae7-7a55-4fea-883e-5e2b9e956e33.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ab25ae7-7a55-4fea-883e-5e2b9e956e33.png)'
- en: We can see that the current IP address of our system is `192.168.1.101`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，当前系统的IP地址是`192.168.1.101`。
- en: 'Next, we check the same information using the command line by typing in the
    `ifconfig` command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用命令行通过输入`ifconfig`命令来检查相同的信息：
- en: '![](img/4fae4535-1083-4e3b-bf53-8b6983c4b871.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4fae4535-1083-4e3b-bf53-8b6983c4b871.png)'
- en: 'If we want to just check the available Ethernet devices on the system, we can
    run the following command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们只想查看系统上可用的以太网设备，可以运行以下命令：
- en: '![](img/e6a46e22-c50a-4d71-8f8d-5e1b2eb21967.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6a46e22-c50a-4d71-8f8d-5e1b2eb21967.png)'
- en: The preceding command will list a one-line description of all the available
    Ethernet devices on the system.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将列出系统上所有可用以太网设备的单行描述。
- en: 'If we want to get more detailed information about the network interface, we
    can use a tool called `lshw`, like so:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想获取有关网络接口的更详细信息，可以使用一个叫做`lshw`的工具，如下所示：
- en: '![](img/d3764960-3c5f-422c-98a9-783fb4d65ea0.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3764960-3c5f-422c-98a9-783fb4d65ea0.png)'
- en: This command also gives detailed information about other capabilities of the
    hardware.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令还提供有关硬件其他功能的详细信息。
- en: 'Now, we will disable the Network Manager and then set the IP address details
    manually. To disable the Network Manager, edit the `/etc/NetworkManager/NetworkManager.conf`
    file, like so:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将禁用网络管理器，并手动设置IP地址。要禁用网络管理器，编辑`/etc/NetworkManager/NetworkManager.conf`文件，如下所示：
- en: '![](img/93905e21-5d7f-4938-8257-a0aa21fe2afa.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93905e21-5d7f-4938-8257-a0aa21fe2afa.png)'
- en: Change the line `managed=false` to `managed=true` and save the file.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将行`managed=false`更改为`managed=true`并保存文件。
- en: 'Now, open the `/etc/network/interfaces` file in any editor of your choice.
    We can see that, by default, there is no information regarding the `eth0` interface:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`/etc/network/interfaces`文件，可以选择任何编辑器。我们可以看到，默认情况下，`eth0`接口没有任何信息：
- en: '![](img/7e90ef0c-5c2c-4073-8d65-258774991308.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e90ef0c-5c2c-4073-8d65-258774991308.png)'
- en: 'Edit the file and add the information shown in the following screenshot. Make
    sure to add the IP details according to your network settings:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑文件并添加下图所示的信息。确保根据您的网络设置添加IP详细信息：
- en: '![](img/b24926ca-eb9a-48bd-b342-7d1f60a80380.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b24926ca-eb9a-48bd-b342-7d1f60a80380.png)'
- en: When done, save the file and then reboot the computer to `disengage` the Network
    Manager.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，保存文件并重启计算机以`解除`网络管理器的控制。
- en: 'If you wish to create a virtual network adapter, you can add the following
    lines in the `/etc/network/interfaces` file, as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您希望创建一个虚拟网络适配器，可以在`/etc/network/interfaces`文件中添加以下行，如下所示：
- en: '![](img/3b0eb9b3-7837-4cc1-bfda-a26d278ebdcb.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b0eb9b3-7837-4cc1-bfda-a26d278ebdcb.png)'
- en: By doing this, we have added two IP address to the single Ethernet card. We
    can do this to create multiple instances of the network card.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们已经为单个以太网卡添加了两个IP地址。我们可以通过这种方式创建多个网络卡实例。
- en: 'Once you have completed editing, restart the networking service by using the
    following command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成编辑后，通过以下命令重启网络服务：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also use this command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用此命令：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, we can look at how to configure the appropriate `nameserver` to be used
    if the IP address is being configured manually.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以查看如何配置适当的`nameserver`，如果IP地址是手动配置的话。
- en: 'To make changes, edit the `/etc/resolv.conf` file in any editor, and add the
    lines shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行更改，请在任意编辑器中编辑`/etc/resolv.conf`文件，并添加以下截图所示的行：
- en: '![](img/45898733-b16f-4e7f-b2ae-e2d6425ecef3.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45898733-b16f-4e7f-b2ae-e2d6425ecef3.png)'
- en: Following the preceding steps, we will be able to configure the IP details successfully.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按照前面的步骤，我们将能够成功配置IP详情。
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The TCP/IP settings on a system can be either managed automatically or manually.
    Depending on the content in the `/etc/NetworkManager/NetworkManager.conf` file,
    the system understands whether the settings will be managed automatically or manually.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 系统上的TCP/IP设置可以是自动管理或手动管理的。根据`/etc/NetworkManager/NetworkManager.conf`文件中的内容，系统会理解这些设置是自动管理还是手动管理。
- en: For manual configuration, we edit the `/etc/network/interfaces` file and enter
    the IP details shown in the preceding section. Once this is done, we restart the
    networking service or completely reboot the system to make the changes effective.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于手动配置，我们编辑`/etc/network/interfaces`文件，并输入前面章节中显示的IP详情。完成后，我们可以重启网络服务或完全重启系统，以使更改生效。
- en: Using a packet sniffer to monitor network traffic
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据包嗅探器监控网络流量
- en: One of the most widely used command-line packet sniffer or packet analyzer tools
    for Linux is Tcpdump. It helps to capture or filter TCP/IP packets being transferred
    or received on a specific interface over the network.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最广泛使用的Linux命令行数据包嗅探器或数据包分析工具之一是Tcpdump。它帮助捕获或过滤通过网络在特定接口上传输或接收的TCP/IP数据包。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Tcpdump comes pre-installed in most Linux/Unix-based operating systems. If
    it is not available, we can install it by using the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Tcpdump在大多数Linux/Unix操作系统中预装。如果没有预装，我们可以通过以下命令安装它：
- en: '![](img/5a5957ea-402e-4804-a654-7a30ce437ac2.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a5957ea-402e-4804-a654-7a30ce437ac2.png)'
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once `tcpdump` has been installed, we can start using it by simply running
    the command `tcpdump`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了`tcpdump`，我们可以通过简单地运行命令`tcpdump`来开始使用它：
- en: When we simply run `tcpdump`, it will start capturing all the packets sent or
    received on any interface.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们仅仅运行`tcpdump`时，它会开始捕获在任何接口上发送或接收的所有数据包。
- en: '![](img/87c8ed39-ad3f-4f1a-9743-0a8a22a49898.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87c8ed39-ad3f-4f1a-9743-0a8a22a49898.png)'
- en: 'If we want to capture the packets that are only on a specific interface, we
    can do the same as shown in the following screenshot:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们只想捕获特定接口上的数据包，可以按以下截图所示的方式进行操作：
- en: '![](img/60ff0cd1-5b13-4a18-9e74-03f0d85798e9.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60ff0cd1-5b13-4a18-9e74-03f0d85798e9.png)'
- en: 'The preceding command will capture all the packets received on the defined
    interface, until manually stopped. If we wish to capture a specific count of packets,
    we can do so by using the `-c` option, as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前述命令将捕获在定义接口上接收到的所有数据包，直到手动停止。如果我们希望捕获特定数量的数据包，可以使用`-c`选项，如下所示：
- en: '![](img/34a64f0b-d78f-4cb6-badd-363f997b3f7b.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34a64f0b-d78f-4cb6-badd-363f997b3f7b.png)'
- en: 'To display the captured packets in ASCII format, we can use the `-A` option:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要以ASCII格式显示捕获的数据包，我们可以使用`-A`选项：
- en: '![](img/44d3f1d5-dd2b-47a0-a49d-7ebddfcef19b.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44d3f1d5-dd2b-47a0-a49d-7ebddfcef19b.png)'
- en: 'If we wish to list the number of available interfaces on the system, we can
    do the same using the `-D` option:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们希望列出系统上可用的接口数量，可以使用`-D`选项来实现：
- en: '![](img/b6fe1c36-a7ce-49c1-87e6-85e74a9982a0.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6fe1c36-a7ce-49c1-87e6-85e74a9982a0.png)'
- en: 'If we use the `-XX` option while capturing the packets, tcpdump will capture
    the packet''s link level header in HEX and ASCII format, as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在捕获数据包时使用`-XX`选项，`tcpdump`将捕获数据包的链路层头部，格式为HEX和ASCII，如下所示：
- en: '![](img/f18c7bfa-cb69-4c6c-80b7-81b1a92ac092.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f18c7bfa-cb69-4c6c-80b7-81b1a92ac092.png)'
- en: 'We can save the captured packets in a file in `.pcap` format by using the `-w`
    option while executing `tcpdump`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过在执行 `tcpdump` 时使用 `-w` 选项，将捕获的数据包保存到 `.pcap` 格式的文件中：
- en: '![](img/261db675-ebe5-4996-8ea8-8f54fa63bd86.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/261db675-ebe5-4996-8ea8-8f54fa63bd86.png)'
- en: In the preceding command, we have the saved the data in the `capture.pcap` file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们已将数据保存到 `capture.pcap` 文件中。
- en: 'When we want to read and analyze the captured packet file, we use the command
    with the `-r` option, as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们想要读取和分析捕获的包文件时，可以使用带有 `-r` 选项的命令，如下所示：
- en: '![](img/5e84c7e1-444b-4c9e-8ee1-a3566d9ba335.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e84c7e1-444b-4c9e-8ee1-a3566d9ba335.png)'
- en: 'By default, `tcpdump` captures packets for all ports. If we want to capture
    packets for any specific port, for example, port `80`, we can do so as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，`tcpdump` 会捕获所有端口的包。如果我们想要捕获某个特定端口的数据包，例如端口 `80`，可以按如下方式进行：
- en: '![](img/f159ac37-125c-45b0-b967-b23fc61b4760.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f159ac37-125c-45b0-b967-b23fc61b4760.png)'
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: TCPdump analyzes network behavior, performance, and applications that generate
    or receive network traffic. Tcpdump uses `libpacp/winpcap` to capture data and
    uses it extensive protocol definitions that are built inside it to analyze the
    captured packets.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: TCPdump 分析网络行为、性能以及生成或接收网络流量的应用程序。Tcpdump 使用 `libpacp/winpcap` 来捕获数据，并利用其内置的广泛协议定义来分析捕获的数据包。
- en: Using IP tables for configuring a firewall
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IP 表配置防火墙
- en: One of the essential steps while securing a Linux system is setting up a good
    firewall. Most Linux distributions come pre-installed with different firewall
    tools. Iptables is one such default firewall of Linux distributions. For older
    versions of Linux kernel, Ipchains was the default firewall.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在保护 Linux 系统时，一个至关重要的步骤是设置一个好的防火墙。大多数 Linux 发行版都预装了不同的防火墙工具。Iptables 就是其中一种默认的防火墙工具。对于旧版本的
    Linux 内核，Ipchains 是默认的防火墙。
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Since **Iptables** ships with the Linux distribution, no extra tools need to
    be installed to use it. However, it is recommended that to use Iptables, we should
    not use the root account. Instead, use a normal account that has super user access
    to run the commands efficiently.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 **Iptables** 随 Linux 发行版一起提供，因此无需安装额外的工具即可使用它。然而，建议在使用 Iptables 时不要使用 root
    账户。相反，使用具有超级用户权限的普通账户来高效运行命令。
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We can define different rules using Iptables. These rules are then followed
    by the kernel when checking the incoming and outgoing traffic packets:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Iptables 定义不同的规则。这些规则会被内核在检查进出流量数据包时遵循：
- en: 'The first thing we shall do on our system is check which version of `iptables`
    is installed by using the following command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在系统上要做的第一件事是检查安装的 `iptables` 版本，可以使用以下命令：
- en: '![](img/4d843be0-4a88-4cc3-95e2-d1429c4514f6.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d843be0-4a88-4cc3-95e2-d1429c4514f6.png)'
- en: 'Now, we will check whether any rule already exists on the system for Iptables
    by using the `-L` option:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过使用 `-L` 选项检查系统中是否已经存在 Iptables 的规则：
- en: '![](img/8746402f-62e7-4bd4-8bd7-714da47c9220.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8746402f-62e7-4bd4-8bd7-714da47c9220.png)'
- en: 'The preceding output can also be seen in a format that tells us about the commands
    that are necessary for each policy. To do this, use the `-S` option, as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述输出也可以以一种格式查看，它告诉我们每个策略所需的命令。为此，可以使用 `-S` 选项，如下所示：
- en: '![](img/db6f89cf-8719-4f45-a7a5-c88d7360870f.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db6f89cf-8719-4f45-a7a5-c88d7360870f.png)'
- en: 'Now, we will check which modules of `iptables` are loaded by default for its
    proper functionality by using the following command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过以下命令检查哪些 `iptables` 模块在默认情况下已加载，以确保其正常功能：
- en: '![](img/0252dbdb-858c-43b9-ba38-b31ea8da7181.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0252dbdb-858c-43b9-ba38-b31ea8da7181.png)'
- en: 'Now, let''s add our first rule, which will make sure that all the online connections
    at present will stay online, even after we have made the rules to block the unwanted
    services:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加第一个规则，它将确保即使在我们设定阻止不需要的服务规则后，所有当前的在线连接仍然保持在线：
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the `-A` option appends a rule to the existing table. `INPUT` tells us
    that this rule will be appended in the input chain of Iptables. The next arguments
    of the command, `-m conntrack --ctstateESTABLISHED,RELATED`, makes sure that the
    rule applies only to the connections which are online currently. Then `-j ACCEPT`
    tells the `iptables` to accept and allow the packets that match the criteria specified
    previously.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`-A` 选项将规则附加到现有的表中。`INPUT` 告诉我们该规则将被附加到 Iptables 的输入链中。命令的下一个参数 `-m conntrack
    --ctstateESTABLISHED,RELATED` 确保该规则只适用于当前在线的连接。接着，`-j ACCEPT` 告诉 `iptables` 接受并允许符合先前指定条件的数据包。
- en: 'Now, if we check the list of rules in `iptables` again, we can see that our
    rule has been added:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们再次检查 `iptables` 中的规则列表，我们可以看到我们的规则已被添加：
- en: '**![](img/82c3dc12-58b7-44aa-b269-b25bb3251d5f.png)**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/82c3dc12-58b7-44aa-b269-b25bb3251d5f.png)**'
- en: 'Now, let''s assume that we want to keep our SSH connection allowed through
    Iptables. To do so, we add the rule shown in the following screenshot:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，假设我们希望保持通过 Iptables 允许 SSH 连接。为此，我们添加以下截图中的规则：
- en: '**![](img/0de7e69d-6bc6-4541-9887-3a660acc28bb.png)**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/0de7e69d-6bc6-4541-9887-3a660acc28bb.png)**'
- en: We have used port `22` as it is the default port for SSH. If you have changed
    the port for SSH in your server, use the appropriate port in the preceding screenshot.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了端口 `22`，因为它是 SSH 的默认端口。如果你在服务器上更改了 SSH 的端口，请在前面的截图中使用相应的端口。
- en: We also need to make sure that our server continues to function properly by
    letting the services on the server communicate with each other without being blocked
    by the rules of the Iptables. To do this, we want to allow all the packets being
    sent to the loopback interface.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要确保我们的服务器继续正常运行，允许服务器上的服务之间相互通信，而不会被 Iptables 规则阻塞。为此，我们希望允许所有发送到回环接口的包。
- en: 'We add the following rule to allow loopback access:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加以下规则以允许回环访问：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, the `-I` option tells the iptables to insert a new rule rather than append
    it. It takes the chain and the position where the new rule needs to be added.
    In the preceding command, we are adding this rule as the first rule in the `INPUT`
    chain, so that this is the first rule that's applied.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`-I` 选项告诉 iptables 插入一条新规则，而不是将其附加到现有规则中。它需要指定链和新规则需要添加的位置。在前面的命令中，我们将此规则作为
    `INPUT` 链中的第一条规则进行添加，这样它就是首先被应用的规则。
- en: 'Now, if we see the list of rules in Iptables by using the `-v` option, we can
    see the rule for loopback interface, `lo`, as our first rule:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们使用 `-v` 选项查看 Iptables 中的规则列表，我们可以看到回环接口 `lo` 的规则作为我们的第一条规则：
- en: '**![](img/78a17dae-e0f7-421a-982a-bb4ae61b55fa.png)**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/78a17dae-e0f7-421a-982a-bb4ae61b55fa.png)**'
- en: Now, assuming that we have added the rules for all the packets to be allowed
    as per our requirements, we have to make sure that any other packet that enters
    the `INPUT` chain should be blocked.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，假设我们已经根据需求为所有要允许的数据包添加了规则，我们必须确保任何其他进入 `INPUT` 链的数据包都应该被阻止。
- en: 'To do so, we will modify the `INPUT` chain by running the `iptables -A INPUT
    -j DROP` command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将通过运行 `iptables -A INPUT -j DROP` 命令来修改 `INPUT` 链：
- en: '**![](img/33c3d3dd-b51e-4c49-9f5a-a325b6e7a7b4.png)**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/33c3d3dd-b51e-4c49-9f5a-a325b6e7a7b4.png)**'
- en: We can see from the preceding code that the rule to drop all packets has been
    added to the bottom of the list in the `INPUT` chain. This makes sure that whenever
    a packet comes in, the `itpables` rules are checked in the order specified. If
    none of the rules match for the packet, it will get dropped, thus preventing a
    packet from being accepted by default.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码可以看出，丢弃所有数据包的规则已被添加到 `INPUT` 链的底部。这确保每当有数据包进入时，`iptables` 规则会按指定顺序进行检查。如果没有规则匹配该数据包，它将被丢弃，从而默认阻止数据包被接受。
- en: Until now, whatever rules we have added in Iptables are non-persistent. This
    means that as soon the system is restarted, all the rules of `iptables` will be
    gone. In order to save the rules that we have created and then automatically load
    them when the server reboots, we can use the `iptables-persistent` package.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，我们在 Iptables 中添加的所有规则都是非持久性的。这意味着，一旦系统重启，所有的 `iptables` 规则将会消失。为了保存我们创建的规则并在服务器重启时自动加载这些规则，我们可以使用
    `iptables-persistent` 包。
- en: 'Install the package by using the following command:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装该软件包：
- en: '[PRE4]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**![](img/cb298f2a-0ef0-4c82-9864-698be033cc22.png)**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/cb298f2a-0ef0-4c82-9864-698be033cc22.png)**'
- en: During the installation process, you will be asked if you want to save the current
    iptables rules and automatically load them. Select `Yes` or `No` as per your choice.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装过程中，系统会询问您是否希望保存当前的 iptables 规则并自动加载它们。根据您的选择，选择 `Yes` 或 `No`。
- en: 'Once the installation is complete, we can start the package by running the
    following command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以通过运行以下命令启动该软件包：
- en: '**![](img/364a9691-d26e-4c94-9e16-51829fed92c8.png)**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/364a9691-d26e-4c94-9e16-51829fed92c8.png)**'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In the preceding example, we used Iptables in Linux to configure firewalls on
    our system.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了 Linux 中的 Iptables 来配置系统防火墙。
- en: First, we went through the basic options of the `iptables` command, and then
    we saw how to add different rules in `iptables`. We added rules to allow localhost
    access and outgoing active connections. Then, we added a rule to allow for SSH
    connection.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们了解了 `iptables` 命令的基本选项，然后我们学习了如何在 `iptables` 中添加不同的规则。我们添加了允许本地访问和外发主动连接的规则。接着，我们添加了一条规则来允许
    SSH 连接。
- en: Then, we added the rule to deny every other incoming packet that does not match
    the aforementioned applied rules.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加了一条规则，拒绝所有不符合上述规则的传入数据包。
- en: Lastly, we used the `iptables-persistent` package to save the rules of iptables
    even after system reboot.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 `iptables-persistent` 包保存 iptables 规则，即使在系统重启后也能保存。
- en: Blocking spoofed addresses
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阻止伪造的地址
- en: IP spoofing is a very common technique used by attackers to send malicious packets
    to a server computer. It is the process of creating IP packets with a forged IP
    address. This is mainly used for performing attacks like **Denial of Service**
    (**DoS**) attacks.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: IP 欺骗是一种攻击者常用的技术，用于向服务器发送恶意数据包。它是通过伪造 IP 地址创建 IP 数据包的过程。这主要用于执行如**拒绝服务**（**DoS**）攻击等攻击。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If we wish to block spoofed IP addresses, we need to have a list of those IP
    address or the domain names from where these spoofed connections are trying to
    connect.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望阻止伪造的 IP 地址，我们需要有一个包含这些伪造连接源地址的 IP 地址或域名列表。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'We will try to create a basic rule set of iptables, using which we will restrict
    all the incoming packets, except for those that are necessary for us:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试创建一个基本的 iptables 规则集，通过它我们将限制所有传入数据包，除了那些我们需要的：
- en: 'The first step will be to create a rule to allow access to the loopback interface
    so that the services on the system can communicate properly with each other locally.
    The command to do so is as follows:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是创建一个允许访问回环接口的规则，以便系统上的服务能够在本地相互正常通信。执行此操作的命令如下：
- en: '[PRE5]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/95a43f69-a7f8-447c-9bd0-add1d9ffdc2a.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95a43f69-a7f8-447c-9bd0-add1d9ffdc2a.png)'
- en: This is necessary for the system to function properly.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是系统正常运行所必需的。
- en: 'Next, we will create the rule for the outbound connections that have been initiated
    by our system:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为由我们的系统发起的外发连接创建规则：
- en: '[PRE6]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will accept all the outbound traffic, including the responses from the
    remote servers that we have tried to connect ourselves (such as any website we''re
    visiting):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将接受所有外发流量，包括来自远程服务器的响应，我们尝试连接的服务器（例如我们访问的任何网站）：
- en: '![](img/eee92b3c-b58b-4996-9b22-5cbfb7848d6f.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eee92b3c-b58b-4996-9b22-5cbfb7848d6f.png)'
- en: 'Now, let''s create a table to be used in `iptables`. We have called it `blocked_ip`.
    You can choose any name you want:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个在 `iptables` 中使用的表。我们将其命名为 `blocked_ip`。您可以选择任何您喜欢的名称：
- en: '[PRE7]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is the table where we will add the spoofed IP addresses that we want to
    block.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将添加要阻止的伪造 IP 地址的表。
- en: 'Now, we will insert this table into the `INPUT` table of iptables by using
    the following command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过以下命令将此表插入到 `iptables` 的 `INPUT` 表中：
- en: '[PRE8]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that we have used the number `2` to make sure that this rule will be the
    second from the top in the `iptables`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用了数字 `2`，确保此规则在 `iptables` 中排在第二位。
- en: 'Now, let''s add the bad IPs into the `blocked_ip` table that we have created:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将恶意 IP 地址添加到我们创建的 `blocked_ip` 表中：
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We have used the IP address `192.168.1.115` as an example here. You can replace
    it with the IP address that you want to block. If you have more than one IP address
    to block, add them one by one to `iptables`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用了 IP 地址 `192.168.1.115` 作为示例。您可以将其替换为您要阻止的 IP 地址。如果您有多个 IP 地址需要阻止，请逐个添加到
    `iptables`。
- en: 'Now, we can see the list of rules in `iptables` by using the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令查看 `iptables` 中的规则列表：
- en: '[PRE10]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the details shown in the following screenshot, we can see that, at the bottom,
    we have the IP address that we are trying to block. You can specify a single IP
    address or a range, as per your choice:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中显示的详细信息中，我们可以看到，在底部，我们有正在尝试阻止的 IP 地址。您可以根据需要指定单个 IP 地址或范围：
- en: '![](img/269b745d-8bed-476c-91d1-662d6ff4981f.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/269b745d-8bed-476c-91d1-662d6ff4981f.png)'
- en: 'After making rules in the Iptables, we can edit the `/etc/host.conf` file as
    well. Open the file in any editor of your choice. I am using nano:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置完 Iptables 规则后，我们还可以编辑 `/etc/host.conf` 文件。用您选择的任何编辑器打开该文件。我使用的是 nano：
- en: '[PRE11]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, add or edit the following lines in the file, as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按如下方式在文件中添加或编辑以下行：
- en: '[PRE12]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**![](img/8553560a-146e-4d9d-95b6-270a28219cf3.png)**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/8553560a-146e-4d9d-95b6-270a28219cf3.png)**'
- en: In the preceding example, the nospoof on option does a comparison of IP address
    returned by hostname lookup with the hostname returned by IP address lookup. If
    the comparison fails, this option generates a spoof warning.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`nospoof on` 选项会将通过主机名查找返回的 IP 地址与通过 IP 地址查找返回的主机名进行比较。如果比较失败，系统会生成欺骗警告。
- en: Once done, save and close the file. This will also help protect the system from
    IP spoofing.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，保存并关闭文件。这也有助于保护系统免受 IP 欺骗。
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To block a spoofed IP address or any other IP address, we again use Iptables
    as it is the default firewall, unless we don't want to use any other tool available
    for Linux.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要阻止伪造的 IP 地址或任何其他 IP 地址，我们再次使用 Iptables，因为它是默认的防火墙，除非我们不想使用任何其他 Linux 工具。
- en: We again create rules to allow localhost access in the system and also to keep
    the outbound active connections alive. Then, we create a table in Iptables that
    we use to maintain a list of the spoofed IP addresses that we want to block. After,
    we add this table to the input chain of Iptables. Now, we can add any IP address
    to the table whenever required and it will automatically get blocked.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次创建规则以允许本地主机访问系统，并保持出站活动连接的存活。然后，我们在 Iptables 中创建一个表格，用于维护我们要阻止的伪造 IP 地址列表。之后，我们将此表格添加到
    Iptables 的输入链中。现在，我们可以在需要时将任何 IP 地址添加到表格中，它将自动被阻止。
- en: We can also use the `/etc/host.conf` file to protect the system from IP spoofing.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `/etc/host.conf` 文件来保护系统免受 IP 欺骗。
- en: Blocking incoming traffic
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阻止传入流量
- en: One of the most important tasks for a Linux system administrator is to control
    access to the network services. At times, it may be better to block all incoming
    traffic on the server and only allow required services to connect.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 系统管理员最重要的任务之一是控制对网络服务的访问。有时，最好阻止服务器上的所有传入流量，仅允许所需的服务进行连接。
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: As we will be using `iptables` here as well, no extra packages are needed to
    perform these steps. We just need a user account with super user access. However,
    this account should preferably not be a `root` account.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这里也将使用 `iptables`，因此执行这些步骤无需额外的软件包。我们只需要一个具有超级用户权限的用户帐户。然而，最好这个帐户不是 `root`
    帐户。
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will configure Iptables to deny everything, except the traffic that has
    been initiated from inside our system (for example, the web browsers have web
    traffic, or some downloading has already been initiated earlier for updating the
    package or any other software):'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置 Iptables 来拒绝一切流量，除了从我们系统内部发起的流量（例如，网页浏览器有网页流量，或者之前已经启动了某些下载，以更新软件包或其他软件）：
- en: 'As in the previous examples, our first rule in Iptables will be to allow access
    to localhost data. Run the following command to do this:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前面的示例所示，我们在 Iptables 中的第一条规则将是允许访问本地主机数据。运行以下命令来执行此操作：
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/d118c30f-ec03-4cc5-a361-c6e209565291.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d118c30f-ec03-4cc5-a361-c6e209565291.png)'
- en: 'Our next rule will be for accepting all traffic related to outbound connections.
    This also includes the responses from the remote server to which our system is
    connecting:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的下一条规则将用于接受所有与出站连接相关的流量。这也包括来自远程服务器的响应，我们的系统正在连接该服务器：
- en: '![](img/51b60836-439b-49c1-93e7-7a12e1584e95.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51b60836-439b-49c1-93e7-7a12e1584e95.png)'
- en: 'Next, we will add the rule to accept Time Exceeded ICMP packets. This is important
    for time-restricted connection setups:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加规则以接受时间超时 ICMP 数据包。这对于时间限制的连接设置非常重要：
- en: '[PRE14]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After this, we will add the rule to accept Destination Unreachable ICMP packets
    coming from remote servers:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加规则以接受来自远程服务器的目的地不可达 ICMP 数据包：
- en: '[PRE15]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, add the rule to accept PING requests/responses (Echo ICMP) to keep our
    system''s connections alive to those web services that may require PING:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加规则以接受PING请求/响应（回显ICMP），保持我们系统与可能需要PING的Web服务的连接：
- en: '[PRE16]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once the preceding rules have been added, we check the list in Iptables by
    running the following command:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦添加了前面的规则，我们通过运行以下命令来检查Iptables中的列表：
- en: '[PRE17]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/c28d582e-73a6-4626-8f31-b8b89a239233.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c28d582e-73a6-4626-8f31-b8b89a239233.png)'
- en: 'Now, we will create a table of iptables, which will contain a list of acceptable
    rules and services:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个iptables表，其中包含一系列可接受的规则和服务：
- en: '[PRE18]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We will then add this table to the `INPUT` chain of Iptables:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将这个表添加到Iptables的`INPUT`链中：
- en: '[PRE19]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let''s add a rule so that access to SSH is allowed on the system. To do
    so, we can run the following command:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加一条规则，允许系统访问SSH。为此，我们可以运行以下命令：
- en: '[PRE20]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, if we check the list of rules in iptables, we get the following result:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们检查iptables中的规则列表，得到的结果如下：
- en: '[PRE21]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/43f27643-b7e1-4ab6-bf6d-3614cf6e1768.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43f27643-b7e1-4ab6-bf6d-3614cf6e1768.png)'
- en: 'Once we have added the rules to accept the traffic we want to, we now want
    to reject all other traffic for which no rules have been set. To do so, we add
    the following rule:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们添加了接受我们需要的流量的规则，我们现在希望拒绝所有其他没有设置规则的流量。为此，我们添加以下规则：
- en: '[PRE22]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: By doing this, whenever anyone tries to connect to the server, a **Host Unreachable**
    ICMP packet will be sent to them that would then terminate the connection attempt.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，每当有人尝试连接到服务器时，会向他们发送一个**主机不可达**ICMP数据包，从而终止连接尝试。
- en: 'After adding all the aforementioned given rules, our iptables will now look
    like what''s shown in the following screenshot:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加了上述规则后，我们的iptables现在看起来像以下屏幕截图所示：
- en: '![](img/3132968a-b873-4261-a18c-acc574499721.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3132968a-b873-4261-a18c-acc574499721.png)'
- en: How it works...
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To block all the incoming traffic on the server and allow only the outbound
    connections, we again use Iptables as it is the default firewall of Linux.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了阻止所有进入的流量并只允许出站连接，我们再次使用Iptables，因为它是Linux的默认防火墙。
- en: To allow the proper functioning of the server internally, we allow access to
    localhost.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保服务器内部的正常运行，我们允许访问本地主机。
- en: Next, to keep the outbound connections active, we add rules to accept the **Time
    Exceeded**, **Destination Unreachable**, and **Echo** ICMP packets.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了保持出站连接的活跃，我们添加规则以接受**超时**、**目标不可达**和**回显**ICMP数据包。
- en: Once these rules have been added, we can define whether we want to allow any
    incoming traffic for some particular services, such as SSH or a particular client
    address. For this, we create a table to add the list of IP address for the clients
    we want to allow. After, we add a rule to allow access to SSH service, or any
    other service as per our requirements.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些规则被添加，我们可以定义是否允许某些特定服务（如SSH）或某个特定客户端地址的传入流量。为此，我们创建一个表来添加我们希望允许的客户端的IP地址列表。然后，添加规则来允许访问SSH服务，或根据我们的需求允许任何其他服务。
- en: Lastly, we add the rule to reject all the traffic for which no rule has been
    added.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加规则来拒绝所有没有添加规则的流量。
- en: Configuring and using TCP Wrappers
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和使用TCP Wrappers
- en: Securing a server by restricting access is a critical measure that should never
    be omitted while setting up a server. Using TCP Wrappers, we can allow only those
    networks to have access to our server's services that we have been configured
    and support TCP Wrappers.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 通过限制访问来保护服务器是一项关键措施，设置服务器时不应忽视。使用TCP Wrappers，我们可以只允许已配置并支持TCP Wrappers的网络访问我们服务器的服务。
- en: Getting ready
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: For demonstrating the following steps, we are using two systems that are on
    the same network and can ping to each other successfully. One system will be used
    as a server and the other will be used as a client.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示接下来的步骤，我们使用两个在同一网络中的系统，能够成功地彼此ping通。一个系统将作为服务器，另一个将作为客户端。
- en: How to do it...
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Linux provides several tools for controlling access to the network services.
    TCP Wrappers is one among those and adds an additional layer of protection. In
    the following steps, we will see how to configure TCP Wrappers to define the access
    for the different hosts:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Linux提供了几种控制网络服务访问的工具。TCP Wrappers是其中之一，它增加了一层额外的保护。在接下来的步骤中，我们将展示如何配置TCP Wrappers来定义不同主机的访问权限：
- en: 'First, we need to check whether a program supports TCP Wrappers or not. To
    do so, first, find the path of the program executable by using the `which` command:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要检查某个程序是否支持TCP Wrappers。为此，可以使用`which`命令查找程序可执行文件的路径：
- en: '[PRE23]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/3212b0fd-357b-4987-8a71-f22c0ae9c919.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3212b0fd-357b-4987-8a71-f22c0ae9c919.png)'
- en: Here, we have used the `SSH` program as example.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们以`SSH`程序为例。
- en: 'Next, we use the `ldd` program to check the compatibility of the `SSH` program
    with TCP Wrappers:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用`ldd`程序检查`SSH`程序与TCP Wrappers的兼容性：
- en: '[PRE24]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](img/b986fb5e-ed5c-40a2-8e87-f9e244190de7.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b986fb5e-ed5c-40a2-8e87-f9e244190de7.png)'
- en: If the output of the preceding command includes `libwrap.so`, it means that
    the program is supported by TCP Wrappers.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面命令的输出中包含`libwrap.so`，则表示该程序支持TCP Wrappers。
- en: 'Now, whenever the SSH program tries to connect to the server using TCP Wrappers,
    two files are checked in the following order:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，每当SSH程序尝试使用TCP Wrappers连接到服务器时，将按照以下顺序检查两个文件：
- en: '`/etc/hosts.allow`: If a matching rule is found in this file for the program,
    access will be given'
  id: totrans-216
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/hosts.allow`：如果在此文件中找到与程序匹配的规则，则会允许访问。'
- en: '`/etc/hosts.deny`: If a matching rule is found in this file for the program,
    access will be denied'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/hosts.deny`：如果在此文件中找到与程序匹配的规则，则会拒绝访问。'
- en: If no matching rule is found in either of the two files for the specific program,
    access will be given.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在两个文件中都没有找到匹配的规则，访问将被允许。
- en: 'If we try to connect to the SSH server, before adding any rule, we will see
    that it connects successfully:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们尝试连接到SSH服务器，在添加任何规则之前，我们会看到连接成功：
- en: '![](img/e245501f-e197-4518-b2ca-d8460cf310c9.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e245501f-e197-4518-b2ca-d8460cf310c9.png)'
- en: 'Now, let''s suppose we want to deny access to the SSH program for a particular
    system that has the given IP address. To do so, we will edit the `/etc/hosts.deny`
    file, as follows:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，假设我们想拒绝来自某个系统的SSH程序访问，且该系统具有指定的IP地址。为此，我们将编辑`/etc/hosts.deny`文件，如下所示：
- en: '![](img/e8d6bf51-bced-49da-ad3a-456ba4ecf3b9.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8d6bf51-bced-49da-ad3a-456ba4ecf3b9.png)'
- en: 'Now, if we try to connect to the SSH server from this particular system for
    which we have denied access, it shows the following error:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们尝试从已被拒绝访问的特定系统连接到SSH服务器，它将显示以下错误：
- en: '![](img/47fe79d3-0e89-458e-a072-e50c12e92927.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47fe79d3-0e89-458e-a072-e50c12e92927.png)'
- en: 'If we want to allow access for all the programs and all the clients, either
    add no rules in either of the two files or add the following line in the `/etc/hosts.allow`
    file:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想允许所有程序和所有客户端的访问，可以在两个文件中都不添加任何规则，或者在`/etc/hosts.allow`文件中添加以下行：
- en: '![](img/fd9b510c-0d7c-4bb4-a961-57f4aa8af4ee.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd9b510c-0d7c-4bb4-a961-57f4aa8af4ee.png)'
- en: 'If we want to allow access to all the services from a particular client that
    has the IP address `192.168.1.106`, then we add the following line in the `/etc/hosts.allow`
    file:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想允许来自特定客户端（IP地址为`192.168.1.106`）的所有服务访问，那么我们可以在`/etc/hosts.allow`文件中添加以下行：
- en: '![](img/e7be05ec-a52d-48c9-b939-7b915e263817.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7be05ec-a52d-48c9-b939-7b915e263817.png)'
- en: 'If we want to allow all the clients on a particular network to access SSH,
    except for a particular client that has the IP address `192.168.1.100`, we perform
    the following changes in the `/etc/hosts.allow` file:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们希望允许某个特定网络中的所有客户端访问SSH，但排除IP地址为`192.168.1.100`的特定客户端，可以在`/etc/hosts.allow`文件中进行以下更改：
- en: '![](img/92849ffa-d71e-46d3-8034-96a4e0f16e88.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92849ffa-d71e-46d3-8034-96a4e0f16e88.png)'
- en: 'After making the aforementioned changes, when we try to connect through SSH,
    we will see the following error:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在做完上述更改后，当我们尝试通过SSH连接时，我们将看到以下错误：
- en: '![](img/615241c2-28df-4a6e-9976-0bdc280abf47.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/615241c2-28df-4a6e-9976-0bdc280abf47.png)'
- en: We can see that once the IP address is changed for the client, SSH access is
    now allowed, which means that all the clients on the particular network can access
    SSH, except for the IP address, which has been denied.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，一旦客户端的IP地址更改，SSH访问将被允许，这意味着该网络中的所有客户端可以访问SSH，除非该IP地址已被拒绝。
- en: 'The preceding steps block the services for which we define the rule in the
    `/etc/hosts.allow` file. However, on the server end, we don''t get to find out
    which client has tried to access the server and when. So, if we want to maintain
    a log of all connection attempts by the client, we can edit the `/etc/hosts.allow`
    file, as follows:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前述步骤会阻止我们在`/etc/hosts.allow`文件中定义规则的服务。然而，在服务器端，我们无法得知是哪一个客户端尝试连接服务器以及何时尝试连接。因此，如果我们想保持客户端所有连接尝试的日志，可以按如下方式编辑`/etc/hosts.allow`文件：
- en: '![](img/f6f740e0-b32d-4dac-8b7f-03b57c449018.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6f740e0-b32d-4dac-8b7f-03b57c449018.png)'
- en: In the preceding line, the `spawn` keyword defines that whenever a connection
    request is made by the client, it will echo the details, as specified by the `%h`
    option, and save it in the log file, `conn.log`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的这行中，`spawn` 关键字定义了每当客户端发出连接请求时，它将回显由 `%h` 选项指定的详细信息，并将其保存在日志文件 `conn.log`
    中。
- en: 'Now, when we read the contents of the `conn.log` file, we see its details,
    as shown here:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当我们读取 `conn.log` 文件的内容时，可以看到其详细信息，如下所示：
- en: '![](img/cb6ca3d8-bddf-4cf3-aaa3-a4463f09e4af.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb6ca3d8-bddf-4cf3-aaa3-a4463f09e4af.png)'
- en: The file contains a log of when the client has tried to connect and from which
    IP address. More details can be captured by using different arguments of the `spawn`
    command.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 文件包含了客户端尝试连接的时间记录以及来源 IP 地址。通过使用 `spawn` 命令的不同参数，可以捕获更多的细节信息。
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We use TCP Wrappers to restrict access to programs that are supported by the
    TCP wrapper package. We first check if the program we want to restrict is supported
    by TCP Wrapper or not by using the `ldd` tool. We then add a rule in the `/etc/hosts.allow`
    or `/etc/hosts.deny` file as per our requirements.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 TCP Wrappers 来限制对支持 TCP Wrapper 包的程序的访问。我们首先使用 `ldd` 工具检查我们要限制的程序是否被 TCP
    Wrapper 支持。然后，我们根据需要在 `/etc/hosts.allow` 或 `/etc/hosts.deny` 文件中添加规则。
- en: Afterwards, we add rules to restrict the program from a particular client or
    the complete network, as per our choice. Using the `spawn` option in the TCP Wrapper,
    we even maintain a log for the connection attempts made by the client or program
    that we have restricted.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们根据需要添加规则来限制某个特定客户端或整个网络的访问。通过在 TCP Wrapper 中使用 `spawn` 选项，我们甚至可以为被限制的客户端或程序的连接尝试维护一个日志。
- en: Blocking country-specific traffic using mod_security
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 mod_security 阻止特定国家的流量
- en: ModSecurity is a web application firewall that can be used for Apache web servers.
    It provides logging capabilities and can monitor HTTP traffic in order to detect
    attacks. ModSecurity can also be used as an intrusion detection tool, where we
    can use it to block country-specific traffic as per our requirements.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: ModSecurity 是一个可以用于 Apache Web 服务器的 Web 应用防火墙。它提供日志记录功能，并可以监控 HTTP 流量以检测攻击。ModSecurity
    还可以作为入侵检测工具，我们可以使用它来根据需求阻止特定国家的流量。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before we start with the installation and configuration of `mod_security`, we
    require Apache server installed on our Ubuntu system.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始安装和配置 `mod_security` 之前，必须在 Ubuntu 系统上安装 Apache 服务器。
- en: 'To install Apache on Ubuntu, run the following command:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装 Apache，运行以下命令：
- en: '[PRE25]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How to do it...
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this section, we will see how to install and configure the ModSecurity **Web
    Application Firewall** (**WAF**) to block country-specific traffic:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何安装和配置 ModSecurity **Web 应用防火墙**（**WAF**）来阻止特定国家的流量：
- en: 'Once Apache has been installed on Ubuntu, the next step is to install ModSecurity
    by running the following command:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦在 Ubuntu 上安装了 Apache，下一步是通过运行以下命令来安装 ModSecurity：
- en: '![](img/d8fb711a-4653-4d3c-a45d-461afaa09ee6.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8fb711a-4653-4d3c-a45d-461afaa09ee6.png)'
- en: 'After installing ModSecurity, restart Apache:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 ModSecurity 后，重启 Apache：
- en: '![](img/dbbf452b-1a1b-45fc-a0d7-4dd50effec81.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbbf452b-1a1b-45fc-a0d7-4dd50effec81.png)'
- en: 'To confirm that ModSecurity has been installed successfully, run the following
    command:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确认 ModSecurity 是否安装成功，运行以下命令：
- en: '![](img/8ea629dd-c7d9-4604-ae40-71f7377f2581.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ea629dd-c7d9-4604-ae40-71f7377f2581.png)'
- en: 'If the installation is successful, we should see something like this: `security2_module
    (shared)`, as shown in the preceding screenshot.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装成功，我们应该会看到类似于以下内容：`security2_module (shared)`，如前面的截图所示。
- en: After completing the installation, we start configuring ModSecurity. For this,
    we use the pre-included and recommended configuration file—`modsecurity.conf-recommended`—which
    is located in the `/etc/modsecurity` directory.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们开始配置 ModSecurity。为此，我们使用预先包含的推荐配置文件 `modsecurity.conf-recommended`，该文件位于
    `/etc/modsecurity` 目录中。
- en: 'Rename the `modsecurity.conf-recommended` file, as follows:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `modsecurity.conf-recommended` 文件重命名，如下所示：
- en: '![](img/9c00eb34-cb47-4d0e-b0fd-c4af3b720a7d.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c00eb34-cb47-4d0e-b0fd-c4af3b720a7d.png)'
- en: 'After renaming the file, we edit the `modsecurity.conf` file and change the
    value for `SecRuleEngine detectiononly` to `SecRuleEngine` on:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名文件后，我们编辑 `modsecurity.conf` 文件，并将 `SecRuleEngine detectiononly` 的值更改为 `SecRuleEngine`
    打开。
- en: '![](img/8cd4b0c2-c911-423e-a5f2-46d32a95a5a9.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cd4b0c2-c911-423e-a5f2-46d32a95a5a9.png)'
- en: 'After saving these changes, restart Apache:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存这些更改后，重启 Apache：
- en: '![](img/a983c38d-9619-4277-aa72-fd944e7296db.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a983c38d-9619-4277-aa72-fd944e7296db.png)'
- en: 'ModSecurity comes with many **Core Set Rules** (**CSR**). However, we can download
    the latest OWASP ModSecurity CRS from GitHub by using the following command:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ModSecurity 提供了许多 **Core Set Rules** (**CSR**) 规则集。不过，我们可以通过以下命令从 GitHub 下载最新的
    OWASP ModSecurity CRS：
- en: '[PRE26]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once downloaded, move into the downloaded directory. Next, move and rename
    the `crs-setup.conf.example` file to `/etc/modsecurity/`, as follows. Move the
    `rules/` directory to `/etc/modsecurity/` as well:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，进入下载的目录。接下来，将 `crs-setup.conf.example` 文件移动并重命名为 `/etc/modsecurity/`，如下所示。将
    `rules/` 目录也移动到 `/etc/modsecurity/`：
- en: '![](img/84bb3db3-5429-4bdf-95c0-e9cecfe170d2.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84bb3db3-5429-4bdf-95c0-e9cecfe170d2.png)'
- en: 'Now, edit the Apache configuration file, `/etc/apache2/mods-available/security2.conf`,
    and add the `Include` directive to point to the rule set, as follows:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，编辑 Apache 配置文件 `/etc/apache2/mods-available/security2.conf`，并添加 `Include`
    指令来指向规则集，如下所示：
- en: '![](img/9709f983-4688-4286-84d8-8014648c672e.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9709f983-4688-4286-84d8-8014648c672e.png)'
- en: 'Restart Apache again to reflect the changes:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动 Apache 以使更改生效：
- en: '![](img/ba421a46-f927-4bd5-b573-702e6df05107.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba421a46-f927-4bd5-b573-702e6df05107.png)'
- en: ModSecurity supports the use of geolocation data by integrating with the free
    Maxmind database.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ModSecurity 支持通过与免费的 Maxmind 数据库集成来使用地理位置数据。
- en: 'To block country-specific traffic, we first have to download the geolocation
    database on the same server where we have configured ModSecurity. To download
    the database, use the following command:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要阻止特定国家的流量，首先需要在与 ModSecurity 配置相同的服务器上下载地理位置数据库。下载数据库的命令如下：
- en: '![](img/bceea268-9dca-4c58-8e4d-fa8b5fc394c6.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bceea268-9dca-4c58-8e4d-fa8b5fc394c6.png)'
- en: After completing the download, extract and move the file to `/usr/share/GeoIP/`.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，解压并将文件移动到 `/usr/share/GeoIP/`。
- en: 'The next step is to edit the `/etc/modsecurity/crs-setup.conf` file to enable
    the use of the geolocation database. For this, we enable the `SecGeoLookupDb`
    directive and also define the path to the downloaded GeoIP database file:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是编辑 `/etc/modsecurity/crs-setup.conf` 文件，以启用地理位置数据库的使用。为此，我们启用 `SecGeoLookupDb`
    指令，并定义下载的 GeoIP 数据库文件的路径：
- en: '![](img/9de28e17-b0db-4e64-8ccd-6a25f9f962c1.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9de28e17-b0db-4e64-8ccd-6a25f9f962c1.png)'
- en: 'Next, we need rule for blocking traffic from any country. The configuration
    file has an example rule for reference, which can be used by uncommenting the
    rule:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置规则来阻止来自任何国家的流量。配置文件中有一个示例规则供参考，可以通过取消注释该规则来使用：
- en: '![](img/efc07ca3-3779-43bc-9201-7359ffdd76e4.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efc07ca3-3779-43bc-9201-7359ffdd76e4.png)'
- en: 'After uncommenting the rule and adding the country code of the country we want
    to block, as shown in the following screenshot, we can save the file:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消注释规则并添加我们希望阻止的国家的国家代码后，如下图所示，我们可以保存文件：
- en: '![](img/bd045faa-ffa9-4dd1-a1ed-b93698c7ec4d.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd045faa-ffa9-4dd1-a1ed-b93698c7ec4d.png)'
- en: 'If we want our server to be accessible only from a specific country and block
    the traffic from all other countries, we can create a rule such as the following:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们希望服务器仅能从特定国家访问，并阻止所有其他国家的流量，我们可以创建如下的规则：
- en: '[PRE27]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this way, we can use ModSecurity to block or allow country-specific traffic.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就可以使用 ModSecurity 来阻止或允许特定国家的流量。
- en: Securing network traffic using SSL
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SSL 加密网络流量
- en: '**TLS** and **SSL** are secure protocols and have been developed to put normal
    traffic in a protected, encrypted wrapper. With the help of these protocols, traffic
    can be sent between remote users in an encrypted format, thus protecting the traffic
    from being intercepted and read by anyone else. These certificates form an essential
    component of the data encryption process and help in making internet transactions
    secure.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**TLS** 和 **SSL** 是安全协议，旨在将普通流量放置在一个受保护的加密外壳中。借助这些协议，流量可以以加密格式在远程用户之间传输，从而保护流量不被其他人拦截和读取。这些证书是数据加密过程中的重要组成部分，并有助于确保互联网交易的安全。'
- en: Getting ready
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before we start with the creation and configuration of the self-signed certificate,
    we require Apache server to be installed on our Ubuntu system.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建和配置自签名证书之前，我们需要在 Ubuntu 系统上安装 Apache 服务器。
- en: 'To install Apache on Ubuntu, run the following command:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Ubuntu 上安装 Apache，请运行以下命令：
- en: '[PRE28]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How to do it...
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this section, we will learn how to create a self-signed certificate to encrypt
    traffic to our Apache server:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何创建自签名证书以加密到 Apache 服务器的流量：
- en: 'Once our Apache server has been installed, we can check the default web page
    by visiting the `http://localhost` link on our browser:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们的 Apache 服务器安装完成，我们可以通过访问浏览器中的 `http://localhost` 链接来检查默认网页：
- en: '![](img/7010cac6-c5d8-4c49-ba6e-3817889c14e5.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7010cac6-c5d8-4c49-ba6e-3817889c14e5.png)'
- en: 'However, when we try to access the same page using HTTPS, we get the following
    error:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，当我们尝试使用 HTTPS 访问相同页面时，我们会遇到以下错误：
- en: '![](img/fd2149db-9c21-4f4f-8b06-611169e3d725.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd2149db-9c21-4f4f-8b06-611169e3d725.png)'
- en: 'To start using SSL, we have to enable the SSL support module on our Ubuntu
    server. To do this, we must run the following command:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始使用 SSL，我们必须在 Ubuntu 服务器上启用 SSL 支持模块。为此，我们需要运行以下命令：
- en: '![](img/0f93ca00-595d-4d54-b854-2d21be87ba87.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f93ca00-595d-4d54-b854-2d21be87ba87.png)'
- en: 'After enabling the SSL module, restart the Apache server so that the changes
    can be recognized:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 SSL 模块后，重新启动 Apache 服务器，以便可以识别更改：
- en: '![](img/ef364f1a-9dac-4143-a031-32eb1f964258.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef364f1a-9dac-4143-a031-32eb1f964258.png)'
- en: 'Now, we will proceed to create our self-signed certificate. First, create a
    subdirectory within Apache''s configuration hierarchy. The certificate file that
    we will be creating will be placed here. Run the following command:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将继续创建自签名证书。首先，在 Apache 配置层级中创建一个子目录。我们将在此处放置要创建的证书文件。运行以下命令：
- en: '![](img/e1607766-d3b0-4874-a245-f071314c7db3.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1607766-d3b0-4874-a245-f071314c7db3.png)'
- en: 'Now, we will create our key and the certificate file and place them in the
    directory that we created in the previous step. To create the key and certificate
    file, we can use the `openssl` command, as follows:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建密钥和证书文件，并将其放置在前一步骤中创建的目录中。要创建密钥和证书文件，我们可以使用 `openssl` 命令，如下所示：
- en: '![](img/267b87d4-96a1-43d7-81fe-0d852c82277b.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](img/267b87d4-96a1-43d7-81fe-0d852c82277b.png)'
- en: For more details about the options used with the `openssl` command, it is recommended
    to check the manual of the command.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 `openssl` 命令使用的选项的更多详细信息，建议查阅该命令的手册。
- en: 'When we execute the previous command, we will be asked a few questions. Enter
    the required details to complete the process of certificate creation:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们执行之前的命令时，会提示我们回答一些问题。输入所需的详细信息以完成证书创建过程：
- en: '![](img/b7d1842c-ff68-43e7-8a54-813564321c8e.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7d1842c-ff68-43e7-8a54-813564321c8e.png)'
- en: Among these questions, the most important is the `Common Name` (the server's
    `FQDN or YOUR name`). Here, we have to enter the domain name that should be associated
    with the certificate. The server's public IP can also be used if we don't have
    a domain name.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些问题中，最重要的是 `Common Name`（服务器的 `FQDN 或您的名字`）。在此，我们需要输入应与证书关联的域名。如果没有域名，也可以使用服务器的公网
    IP。
- en: 'Once the command is complete, we can check the `/etc/apache2/ssl` directory
    that we created earlier. We will see that the key and the certificate file have
    been placed here:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦命令完成，我们可以检查之前创建的 `/etc/apache2/ssl` 目录。我们将看到密钥和证书文件已被放置在此处：
- en: '![](img/f33e8fb6-c41e-4aeb-930d-b038b7f20a85.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f33e8fb6-c41e-4aeb-930d-b038b7f20a85.png)'
- en: After creating the key and certificate file, the next step is to configure Apache
    to use these files. We will base our configuration on the `etc/apache2/sites-available/default-ssl`
    file as it contains the default SSL configuration.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建密钥和证书文件后，下一步是配置 Apache 使用这些文件。我们将以 `etc/apache2/sites-available/default-ssl`
    文件为基础进行配置，因为该文件包含默认的 SSL 配置。
- en: 'Edit the file and set the values that we would configure for the virtual host.
    This includes `SeverAdmin`, `ServerName`, `ServerAlias`, and so on. Enter the
    details as follows:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑文件并设置我们将为虚拟主机配置的值，包括 `SeverAdmin`、`ServerName`、`ServerAlias` 等。按照以下方式输入详细信息：
- en: '![](img/50dba488-853a-41d9-a350-5f6a7acfd7d1.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50dba488-853a-41d9-a350-5f6a7acfd7d1.png)'
- en: 'In the same file, we have to define the location where Apache can find the
    SSL certificate and key, as shown in the following screenshot:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，我们需要定义 Apache 可以找到 SSL 证书和密钥的位置，如下所示：
- en: '![](img/922c1f90-8445-4985-8826-9d4735bb0a3d.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](img/922c1f90-8445-4985-8826-9d4735bb0a3d.png)'
- en: 'Once the preceding configuration has been done for the SSL-enabled virtual
    host, we have to enable it. To do this, we run the following command:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦为启用 SSL 的虚拟主机完成上述配置，我们需要启用它。为此，我们运行以下命令：
- en: '![](img/1ff4fe0a-25fc-4c78-98d9-07da318569b1.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ff4fe0a-25fc-4c78-98d9-07da318569b1.png)'
- en: To load the new virtual host file, restart Apache for the changes to take effect.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了加载新的虚拟主机文件，重新启动 Apache 使更改生效。
- en: 'After completing all the setup, we can now test our configuration by visiting
    our server''s domain name by using the HTTPS protocol. Once we enter the domain
    name in the browser with `https` and press *Enter*, we will get the following
    screen:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成所有设置后，我们现在可以通过使用HTTPS协议访问我们服务器的域名来测试我们的配置。一旦我们在浏览器中输入带有`https`的域名并按*Enter*键，我们将看到以下屏幕：
- en: '![](img/8b9badd9-7b88-4ee7-b945-008d630cbebc.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b9badd9-7b88-4ee7-b945-008d630cbebc.png)'
- en: This confirms that the certificate is being loaded. Since it is a self-signed
    certificate, we get a warning message that states This Connection is Untrusted.
    If the certificate had been signed by one of the certificate authorities that
    the browser trusts, this warning would have not appeared.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这证实证书正在加载。由于它是自签名证书，我们会收到一个警告消息，指出“此连接不受信任”。如果证书是由浏览器信任的证书颁发机构之一签发的，则不会出现此警告。
- en: 'Once we click on I Understand the Risks and proceed, we will be asked to add
    a security exception, as shown in the following screenshot. Confirm the security
    exception to add our self-signed certificate in the browser:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们点击“我理解风险并继续”，我们将被要求添加一个安全异常，如下截图所示。确认安全异常以将我们的自签名证书添加到浏览器中：
- en: '![](img/d3be1679-8b1f-4b37-842a-f0bf7948fe01.png)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3be1679-8b1f-4b37-842a-f0bf7948fe01.png)'
- en: We now have SSL enabled on our web server. This will help secure the traffic
    between the users and the server.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在我们的Web服务器上启用了SSL。这将有助于保护用户和服务器之间的通信流量。
- en: How it works...
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'SSL certificates are digital passports that provide authentication to protect
    the confidentiality and integrity of communication between the server and the
    browsers. SSL certificates have a key pair: a public and a private key, which
    work together to establish an encrypted connection.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: SSL证书是提供认证的数字护照，用于保护服务器与浏览器之间通信的机密性和完整性。SSL证书具有一对密钥：公钥和私钥，它们共同工作以建立加密连接。
- en: When a browser attempts to connect to a web server secured with SSL, it asks
    the web server to identify itself. Then, the server sends a copy of its SSL certificate.
    After receiving the certificate, the browser sends a message to the server. After
    this, the server sends back a digitally signed acknowledgement that tells the
    server to start an SSL encrypted connection. Now, all the data being shared between
    the server and the browser is encrypted.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器尝试连接到使用SSL加密的Web服务器时，它会请求Web服务器进行身份验证。然后，服务器会发送其SSL证书的副本。收到证书后，浏览器向服务器发送一条消息。之后，服务器会发送回一个数字签名的确认消息，告知服务器启动SSL加密连接。现在，服务器和浏览器之间共享的所有数据都是加密的。

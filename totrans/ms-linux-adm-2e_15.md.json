["```\n    env: packt tag, we’ll get a view of the EC2 instance we just created:\n    ```", "```\nssh -i SSH_KEY ec2-user@EC2_INSTANCE\n```", "```\nssh -i packt_aws_key.pem ubuntu@3.68.98.173\n```", "```\nchmod 400 packt_aws_key.pem\n```", "```\nscp -i packt_aws_key.pem README.md ubuntu@3.68.98.173:~/\n```", "```\nscp -i packt_aws_key.pem ubuntu@3.68.98.173:~/README.md .\n```", "```\n    lsblk command-line utility to list the block devices:\n\n    ```", "```\n\n    The output is as follows:\n    ```", "```\n    /dev/xvdf: data, meaning that the volume doesn’t have a filesystem yet.\n    ```", "```\n    -t (--type) parameter with an xfs filesystem type. XFS is a high-performance journaled filesystem that’s supported by most Linux distributions and is installed by default in some of them.\n    ```", "```\n    sudo file -s /dev/xvdf\n    ```", "```\n    sudo mkdir /packt_drive\n    /packt directory, we’re accessing the EBS volume:\n    ```", "```\nsudo umount -d /dev/xvdf\n```", "```\n    curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n    ```", "```\n    unzip awscliv2.zip\n    aws command-line utility installed on our system. Let’s check the version:\n\n    ```", "```\n    aws help\n    ```", "```\n\n    ```", "```\n    aws configure\n    ```", "```\naws ec2 describe-instances\n```", "```\naws ec2 describe-instances --region eu-central-1\n```", "```\naws ec2 describe-instances \\\n  --filters \"Name=tag-key,Values=env\" \\\n  --filters \"Name=tag-value,Values=packt\"\n```", "```\naws ec2 describe-instances \\\n  --filters \"Name=tag-key,Values=env\" \\\n  --filters \"Name=tag-value,Values=packt\" | \\\n  jq '.Reservations[].Instances[] | { InstanceId, ImageId, BlockDeviceMappings }'\n```", "```\nsudo apt install -y jq # on Ubuntu/Debian\n```", "```\naws ec2 describe-instances \\\n  --filters \"Name=image-id versus ImageId. You have to keep this rule in mind when you write your filter queries.\nNext, let’s plan to launch a new EC2 instance of the same AMI type with our current machine and the same security group.\nCreating an EC2 instance\nLet’s look at how we can create a new EC2 instance. To do this, we will need some prior information regarding the existing security group inside which we would like to create the new instance. The following command retrieves the security groups of the current instance (`i-0f8fe6aced634e71c`):\n\n```", "```\n\n The output is as follows:\n![Figure 15.27 – Retrieving the security groups of an EC2 instance](img/B19682_15_27.jpg)\n\nFigure 15.27 – Retrieving the security groups of an EC2 instance\nTo retrieve `GroupId` directly, we could run the following:\n\n```", "```\n\n In this case, the output would only show `GroupId`. Here, we used the `--query` parameter to specify the exact JSON path for the field we’re looking for (`GroupId`):\n\n```", "```\n\n The use of the `--query` parameter somewhat resembles piping the output to the `jq` command, but it’s less versatile.\nWe also need the AMI ID. To obtain this, navigate to your AWS EC2 console and then, from the left-hand side pane, go to `ami-0faab6bdbac9486fb`.\nTo launch a new instance with the AMI type of our choice and the security group ID, we must use the `aws ec2` `run-instances` command:\n\n```", "```\n\n Here’s a brief explanation of the parameters:\n\n*   `image-id`: The AMI image ID (`ami-0faab6bdbac9486fb`); we’re using the same AMI type (*Ubuntu Linux*) as with the previous instance we created in the AWS EC2 web console\n*   `count`: The number of instances to launch (`1`)\n*   `instance-type`: The EC2 instance type (`t3.micro`)\n*   `key-name`: The name of the SSH private key file (`packt_aws_key`) to use when connecting to our new instance; we’re reusing the SSH key file we created with our first EC2 instance in the AWS web console\n*   `security-group-ids`: The security groups attached to our instance; we’re reusing the security group attached to our current instance (`sg-0aa7c8ef75503a9aa`)\n*   `--placement`: The AZ to place our instance in (`AvailabilityZone=eu-central-1b`)\n\nThe command should run successfully and you will see the new EC2 instance running in your console. Here’s a screenshot of our EC2 console and the two instances running:\n![Figure 15.28 – The new EC2 instance shown in the console](img/B19682_15_28.jpg)\n\nFigure 15.28 – The new EC2 instance shown in the console\nAs you can see, our newly created EC2 instance has no name. Let’s add a name and some tags to it using the command line.\nNaming and tagging an EC2 instance\nThe following command names our new instance as `aws_packt_testing_2`:\n\n```", "```\n\n Now, we can add a tag to the new instance. Adding a name and a tag can be done in a single command, but for a better understanding, we’ve decided to use two different commands. Here’s how to add a tag:\n\n```", "```\n\n Now, let’s query the instance with the following command:\n\n```", "```\n\n The output shows that our two EC2 instances have the same tag (`packt`):\n![Figure 15.29 – Querying EC2 instance IDs by tag](img/B19682_15_29.jpg)\n\nFigure 15.29 – Querying EC2 instance IDs by tag\nIf you check the EC2 console inside your browser, you will see the two instances. Now, the second instance has its new name shown (`aws_packt_testing_2`) and the **Instance ID** value for each one:\n![Figure 15.30 – Showing all instances in the EC2 console](img/B19682_15_30.jpg)\n\nFigure 15.30 – Showing all instances in the EC2 console\nNext, we’ll show you how to terminate an EC2 instance from the command line.\nTerminating an EC2 instance\nTo terminate an EC2 instance, we can use the `aws ec2 terminate-instance` command. Note that terminating an instance results in the instance being deleted. We cannot restart a terminated instance. We could use the `aws ec2 stop-instances` command to stop our instance until later use.\nThe following command will terminate the instance with the ID of `i-091e2f515d15c3b0b`:\n\n```", "```\nchmod 400 packt-ubuntu-demo_key.pem\n```", "```\nssh -i packt-rhel.pem packt@20.19.173.232\n```", "```\n    ssh -i packt-rhel.pem packt@20.19.173.232\n    ```", "```\n    sdc:\n    ```", "```\n    /dev/sdc: data, meaning that the data disk doesn’t contain a filesystem yet.\n    ```", "```\n    /packt) and mount the new volume:\n\n    ```", "```\n\n    ```", "```\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n```", "```\naz help\n```", "```\naz login\n```", "```\naz group create --name packt-dev --location francecentral\n```", "```\naz vm create --resource-group packt-dev --name packt-ubuntu-dev --image Ubuntu2204 --admin-username packt --generate-ssh-keys\n```", "```\n\"publicIpAddress\": \"51.103.100.132\"\n```", "```\naz vm list\n```", "```\naz vm show \\\n  --resource-group packt-dev \\\n  --name packt-ubuntu-dev), run the following command:\n\n```", "```\naz vm delete \\\n  --resource-group packt-dev \\\n  --name az vm), we also need to specify the resource group the machine belongs to.\nA comprehensive study of the Azure CLI is beyond the scope of this chapter. For detailed information, please visit the Azure CLI’s online documentation portal: [https://docs.microsoft.com/en-us/cli/azure/](https://docs.microsoft.com/en-us/cli/azure/).\nThis concludes our coverage of public cloud deployments with AWS and Azure. We have covered a vast domain and have merely skimmed the surface of cloud management workloads. We encourage you to build upon this preliminary knowledge and explore more, starting with the AWS and Azure cloud docs. The relevant links are mentioned in the *Further reading* section, together with other valuable resources.\nNow, let’s summarize what you have learned so far about AWS and Azure.\nSummary\nAWS and Azure provide a roughly similar set of features for flexible compute capacity, storage, and networking, with pay-as-you-go pricing. They share the essential elements of a public cloud – elasticity, autoscaling, provisioning with self-service, security, and identity and access management. This chapter explored both cloud providers strictly from a practical vantage point, focusing on typical deployment and management aspects of everyday cloud administration tasks.\nWe covered topics such as launching and terminating a new instance or virtual machine. We also looked at resizing an instance to accommodate a higher or lower compute capacity and scaling the storage by creating and attaching additional block devices (volumes). Finally, we used CLI tools for scripting various cloud management workloads.\nWhen working with AWS, we learned a few basic concepts about EC2 resources. Next, we looked at typical cloud management tasks, such as launching and managing instances, adding and configuring additional storage, and using EBS snapshots for disaster recovery. Finally, we explored the AWS CLI with hands-on examples of standard operations, including querying and launching EC2 instances, creating and adding additional storage to an instance, and terminating an instance.\nAt this point, you should be familiar with the AWS and Azure web administration consoles and CLI tools. You have learned the basics of some typical cloud management tasks and a few essential concepts about provisioning cloud resources. Overall, you’ve enabled a special skillset of modern-day Linux administrators by engaging in cloud-native administration workflows. Combined with the knowledge you’ve built so far, you are assembling a valuable Linux administration toolbelt for on-premises, public, and hybrid cloud systems management.\nIn the next chapter, we’ll take this further and introduce you to managing application deployments using containerized workflows and services with Kubernetes.\nQuestions\nLet’s recap some of the concepts you’ve learned about in this chapter as a quiz:\n\n1.  What is an AZ?\n2.  Between a `t3.small` and a `t3.micro` AWS EC2 instance type, which one yields better performance?\n3.  You have launched an AWS EC2 instance in the `us-west-1a` AZ and plan to attach an EBS volume created in `us-west-1b`. Would this work?\n4.  What is the SSH command to connect to your AWS EC2 instance or Azure virtual machine?\n5.  What is the Azure CLI command for listing your virtual machines? How about the equivalent AWS CLI command?\n6.  What is the AWS CLI command for launching a new EC2 instance?\n7.  What is the Azure CLI command for deleting a virtual machine?\n\nFurther reading\nHere are a few resources to further explore AWS and Azure cloud topics:\n\n*   AWS EC2: [https://docs.aws.amazon.com/ec2/index.html](https://docs.aws.amazon.com/ec2/index.html)\n*   Azure: [https://docs.microsoft.com/en-us/azure](https://docs.microsoft.com/en-us/azure)\n*   *AWS for System Administrators*, by Prashant Lakhera, Packt Publishing\n*   *Learning AWS – Second Edition*, by Aurobindo Sarkar and Amit Shah, Packt Publishing\n*   *Learning Microsoft Azure*, by Geoff Webber-Cross, Packt Publishing\n*   *Learning Microsoft Azure: A Hands-On Training [Video]*, by Vijay Saini, Packt Publishing\n\n```", "```\n\n```", "```\n\n```"]
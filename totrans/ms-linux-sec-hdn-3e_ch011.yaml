- en: 'Section 3: Advanced System Hardening Techniques'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三节：高级系统强化技术
- en: This section will teach you how to harden a Linux system with **Mandatory Access
    Control** (**MAC**), security profiles, and process isolation techniques. Audit
    a Linux system with auditd and logging services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将教你如何使用**强制访问控制**（**MAC**）、安全配置文件和进程隔离技术来强化 Linux 系统。使用 auditd 和日志服务审计 Linux
    系统。
- en: 'The section contains the following chapters:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以下章节：
- en: '*Chapter 10*, *Implementing Mandatory Access Control with SELinux and AppArmor*'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第10章*，*使用 SELinux 和 AppArmor 实施强制访问控制*'
- en: '*Chapter 11*, *Kernel Hardening and Process Isolation*'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第11章*，*内核强化与进程隔离*'
- en: '*Chapter 12*, *Scanning, Auditing, and Hardening*'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第12章*，*扫描、审计与强化*'
- en: '*Chapter 13*, *Logging and Log Security*'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第13章*，*日志记录与日志安全*'
- en: '*Chapter 14*, *Vulnerability Scanning and Intrusion Detection*'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第14章*，*漏洞扫描与入侵检测*'
- en: '*Chapter 15*, *Blocking Applications with fapolicyd*'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第15章*，*使用 fapolicyd 阻止应用程序*'
- en: '*Chapter 16*, *Security Tips and Tricks for the Busy Bee*'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第16章*，*忙碌的蜜蜂的安全提示与技巧*'
- en: 10 Implementing Mandatory Access Control with SELinux and AppArmor
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10 使用 SELinux 和 AppArmor 实施强制访问控制
- en: Join our book community on Discord
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入我们的书籍社区，加入 Discord
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/file60.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file60.png)'
- en: As we saw in previous chapters, **Discretionary Access Control** (**DAC**) allows
    users to control who can access their own files and directories. But what if your
    company needs to have more administrative control over who accesses what? For
    this, we need some sort of **Mandatory Access Control** (**MAC**).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前几章中看到的，**自主访问控制**（**DAC**）允许用户控制谁可以访问他们的文件和目录。但如果你的公司需要对谁可以访问什么内容进行更多的管理控制呢？为此，我们需要某种**强制访问控制**（**MAC**）。
- en: The best way I know to explain the difference between DAC and MAC is to hearken
    back to my Navy days. I was riding submarines at the time, and I had to have a
    Top Secret clearance to do my job. With DAC, I had the physical ability to take
    one of my Top Secret books to the mess decks, and hand it to a cook who didn't
    have that level of clearance. With MAC, there were rules that prevented me from
    doing so. On operating systems, things work pretty much the same way.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道的最好解释 DAC 和 MAC 区别的方式是回想起我的海军时光。那时，我在潜艇上服役，我需要拥有绝密许可才能执行工作。在 DAC 下，我可以把一本绝密书带到餐厅，交给一位没有相应许可的厨师。但在
    MAC 下，有一些规则阻止了我这样做。在操作系统中，情况差不多。
- en: There are several different MAC systems that are available for Linux. The two
    that we'll cover in this chapter are SELinux and AppArmor. We'll look at what
    both of them are, how to configure them, and how to troubleshoot them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种不同的 MAC 系统可供 Linux 使用。我们将在本章中介绍的两个是 SELinux 和 AppArmor。我们将看看它们是什么，如何配置它们以及如何进行故障排除。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What SELinux is and how it can benefit a systems administrator
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 SELinux，它如何帮助系统管理员
- en: How to set security contexts for files and directories
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为文件和目录设置安全上下文
- en: How to use setroubleshoot to troubleshoot SELinux problems
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 setroubleshoot 进行 SELinux 问题排查
- en: Looking at SELinux policies and how to create custom policies
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看 SELinux 策略以及如何创建自定义策略
- en: What AppArmor is and how it can benefit a systems administrator
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 AppArmor，它如何帮助系统管理员
- en: Looking at AppArmor policies
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看 AppArmor 策略
- en: Working with AppArmor command-line utilities
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AppArmor 命令行工具
- en: Troubleshooting AppArmor problems
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除 AppArmor 问题
- en: Exploiting a system with an evil Docker container
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用恶意 Docker 容器攻击系统
- en: Let's start out by looking at SELinux and how you can benefit from it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从了解 SELinux 开始，看看它如何帮助你。
- en: How SELinux can benefit a systems administrator
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SELinux 如何帮助系统管理员
- en: 'SELinux is a free open source software project that was developed by the U.S.
    National Security Agency. While it can theoretically be installed on any Linux
    distribution, Red Hat-type distributions are the only ones that come with it already
    set up and enabled. It uses code in Linux kernel modules, along with extended
    filesystem attributes, to help ensure that only authorized users and processes
    can access either sensitive files or system resources. There are three ways in
    which SELinux can be used:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux 是一个免费的开源软件项目，由美国国家安全局（NSA）开发。虽然它理论上可以安装在任何 Linux 发行版上，但只有 Red Hat 类型的发行版已经预先设置并启用它。它利用
    Linux 内核模块中的代码，以及扩展的文件系统属性，确保只有授权的用户和进程才能访问敏感文件或系统资源。SELinux 有三种使用方式：
- en: It can help prevent intruders from exploiting a system.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以帮助防止入侵者利用系统漏洞。
- en: It can be used to ensure that only users with the proper security clearance
    can access files that are labeled with a security classification.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以用来确保只有具有适当安全权限的用户才能访问带有安全分类标签的文件。
- en: In addition to MAC, SELinux can also be used as a type of role-based access
    control.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了 MAC 之外，SELinux 还可以作为一种基于角色的访问控制类型。
- en: In this chapter, I'll only be covering the first of these three uses because
    that is the most common way in which SELinux is used. There's also the fact that
    covering all three of these uses would require writing a whole book, which I don't
    have space to do here.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我只会讲解这三种用法中的第一种，因为它是 SELinux 最常用的使用方式。还有一点是，讲解这三种用法需要写一本书，而我这里没有足够的空间。
- en: '**Tip**'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you go through this introduction to SELinux and find that you still need
    more SELinux information, you'll find whole books and courses on just this subject
    on the Packt Publishing website.
  id: totrans-36
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你通过了这部分关于 SELinux 的介绍后，觉得仍然需要更多的 SELinux 信息，你可以在 Packt Publishing 网站上找到专门讲解这一主题的整本书和课程。
- en: So, how can SELinux benefit the busy systems administrator? Well, you might
    remember when, a few years ago, news about the Shellshock bug hit the world's
    headlines. Essentially, Shellshock was a bug in the Bash shell that allowed intruders
    to break into a system and to exploit it by gaining root privileges. For systems
    that were running SELinux, it was still possible for the bad guys to break in,
    but SELinux would have prevented them from successfully running their exploits.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，SELinux 如何能帮助繁忙的系统管理员呢？你可能还记得几年前，Shellshock 漏洞登上全球头条新闻的事情。本质上，Shellshock
    是一个 Bash shell 漏洞，允许入侵者突破系统并通过获得 root 权限来利用它。对于运行 SELinux 的系统，虽然坏人仍然能够突破系统，但 SELinux
    会阻止他们成功执行攻击。
- en: SELinux is also yet another mechanism that can help protect data in users' home
    directories. If you have a machine that's set up as a Network File System server,
    a Samba server, or a web server, SELinux will prevent those daemons from accessing
    users' home directories, unless you explicitly configure SELinux to allow that
    behavior.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux 还是另一种机制，可以帮助保护用户家目录中的数据。如果你的机器设置为网络文件系统（NFS）服务器、Samba 服务器或 web 服务器，SELinux
    将阻止这些守护进程访问用户的家目录，除非你明确配置 SELinux 以允许这种行为。
- en: On web servers, you can use SELinux to prevent the execution of malicious CGI
    scripts or PHP scripts. If you don't need your server to run CGI or PHP scripts,
    you can disable them in SELinux.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 web 服务器上，你可以使用 SELinux 来阻止恶意的 CGI 脚本或 PHP 脚本的执行。如果你不需要你的服务器运行 CGI 或 PHP 脚本，你可以在
    SELinux 中禁用它们。
- en: With Docker and without SELinux, it's trivially easy for a normal user to break
    out of a Docker container and gain root-level access to the host machine. As we'll
    see at the end of this chapter, SELinux is a useful tool for hardening servers
    that run Docker containers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有 SELinux 的情况下，使用 Docker 对普通用户来说，轻而易举地就能突破 Docker 容器并获得主机的 root 级别访问权限。正如我们将在本章末尾看到的，SELinux
    是一种用于加固运行 Docker 容器的服务器的有用工具。
- en: So now, you're likely thinking that everyone would use such a great tool, right?
    Sadly, that's not the case. In its beginning, SELinux got a reputation for being
    difficult to work with, and many administrators would just disable it. In fact,
    a lot of tutorials you see on the web or on YouTube have disabling SELinux as
    the first step. In this section, I'd like to show you that things have improved
    and that SELinux no longer deserves its bad reputation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在，你可能在想，每个人都会使用这样一个伟大的工具，对吧？可惜事实并非如此。刚开始时，SELinux 因为操作起来困难而声名狼藉，很多管理员干脆禁用它。事实上，很多网络教程或者
    YouTube 上的教程都会把禁用 SELinux 作为第一步。在这一部分，我想向你展示，情况已经有所改善，SELinux 不再值得它曾经的坏名声。
- en: Setting security contexts for files and directories
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置文件和目录的安全上下文
- en: 'Think of SELinux as a glorified labeling system. It adds labels, known as security
    contexts, to files and directories through extended file attributes. It also adds
    the same type of label, known as domains, to system processes. To see these contexts
    and domains on your CentOS or AlmaLinux machines, use the `-Z` option with either
    `ls` or `ps.` For example, files and directories in my own home directory would
    look like the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将 SELinux 看作是一个改进的标签系统。它通过扩展的文件属性将标签（称为安全上下文）添加到文件和目录上。它还会将相同类型的标签，称为域，添加到系统进程上。要查看这些上下文和域，在你的
    CentOS 或 AlmaLinux 机器上使用 `-Z` 选项与 `ls` 或 `ps` 命令。例如，我自己主目录中的文件和目录看起来如下所示：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Processes on my system would look something like the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我的系统上的进程大致如下所示：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, let''s break this down. In the outputs of both the `ls -Z` and `ps -Z`
    commands, we have the following parts:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来拆解一下。在 `ls -Z` 和 `ps -Z` 命令的输出中，我们会看到以下几部分：
- en: '**The SELinux user**: In both cases, the SELinux user is the generic `unconfined_u`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SELinux 用户**：在这两种情况下，SELinux 用户都是通用的 `unconfined_u`。'
- en: '**The SELinux role**: In the `ls -Z` example, we see that the role is `object_r`,
    and in the `ps -Z` example it''s `unconfined_r`.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SELinux 角色**：在 `ls -Z` 示例中，我们看到角色是 `object_r`，而在 `ps -Z` 示例中，它是 `unconfined_r`。'
- en: '**The type**: It''s `user_home_t` in the `ls -Z` output and `unconfined_t`
    in the `ps -Z` output.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：在 `ls -Z` 输出中是 `user_home_t`，在 `ps -Z` 输出中是 `unconfined_t`。'
- en: '**The sensitivity**: In the `ls -Z` output it''s `s0`. In the `ps -Z` output,
    it''s `s0-s0`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏感度**：在 `ls -Z` 输出中它是 `s0`，而在 `ps -Z` 输出中，它是 `s0-s0`。'
- en: '**The category**: We don''t see a category in the `ls -Z` output, but we do
    see `c0.c1023` in the `ps -Z` output.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别**：我们在 `ls -Z` 输出中看不到类别，但在 `ps -Z` 输出中看到了 `c0.c1023`。'
- en: Out of all of the preceding security context and security domain components,
    the only one that interests us now is the **type**. For the purposes of this chapter,
    we're only interested in covering what a normal Linux administrator would need
    to know to keep intruders from exploiting the system, and the **type** is the
    only one of these components that we need to use for that. All of the other components
    come into play when we set up advanced, security classification-based access control
    and role-based access control.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面提到的所有安全上下文和安全域组件中，当前唯一对我们感兴趣的是**类型**。对于本章而言，我们只关注正常的 Linux 管理员需要知道的内容，以防止入侵者利用系统，而**类型**是我们需要使用的唯一组件。其他所有组件只有在我们设置高级、安全分类基础的访问控制和基于角色的访问控制时才会发挥作用。
- en: Okay, the following is a somewhat over-simplified explanation of how this helps
    a Linux administrator maintain security. What we want is for system processes
    to only access objects that we allow them to access. (System processes include
    things such as the web server daemon, the FTP daemon, the Samba daemon, and the
    Secure Shell daemon. Objects include things such as files, directories, and network
    ports.) To achieve this, we'll assign a **type** to all of our processes and all
    of our objects. We'll then create policies that define which process types can
    access which object types.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，以下是一个简化的解释，说明这如何帮助 Linux 管理员维护安全性。我们希望系统进程仅访问我们允许它们访问的对象。（系统进程包括如 web 服务器守护进程、FTP
    守护进程、Samba 守护进程和安全外壳守护进程等。对象包括如文件、目录和网络端口等内容。）为了实现这一点，我们将为所有进程和对象分配一个**类型**。然后，我们会创建策略，定义哪些进程类型可以访问哪些对象类型。
- en: Fortunately, whenever you install any Red Hat-type distribution, pretty much
    all of the hard work has already been done for you. Red Hat-type distributions
    all come with SELinux already enabled and set up with the **targeted** policy.
    Think of this targeted policy as a somewhat relaxed policy, that allows a casual
    desktop user to sit down at the computer and actually conduct business without
    having to tweak any SELinux settings. But if you're a server administrator, you
    may find yourself having to tweak this policy in order to allow server daemons
    to do what you need them to do.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，每当你安装任何 Red Hat 类型的发行版时，几乎所有的繁重工作都已经为你完成。Red Hat 类型的发行版都自带 SELinux 并且已经启用了**定向**策略。可以把这个定向策略看作是一个相对宽松的策略，它允许普通桌面用户坐在计算机前进行工作，而不需要调整任何
    SELinux 设置。但如果你是服务器管理员，你可能会发现需要调整这个策略，以允许服务器守护进程执行你需要它们做的事情。
- en: The targeted policy, which comes installed by default, is what a normal Linux
    administrator will use in his or her day-to-day duties. If you look in the repositories
    of your CentOS virtual machine, you'll see that there are also several others,
    which we won't cover in this book.
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 默认安装的目标策略是普通 Linux 管理员在日常工作中会使用的策略。如果你查看 CentOS 虚拟机的仓库，你会看到还有其他几种策略，这些我们在本书中不会涉及。
- en: Installing the SELinux tools
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 SELinux 工具
- en: For some bizarre reason that I'll never understand, the tools that you need
    to administer SELinux don't get installed by default, even though SELinux itself
    does. So, the first thing you'll need to do on your CentOS virtual machine is
    to install them.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 出于某种我永远也无法理解的奇怪原因，管理 SELinux 所需的工具默认并不会安装，尽管 SELinux 本身会安装。因此，在 CentOS 虚拟机上你首先需要做的就是安装这些工具。
- en: 'On CentOS 7, run this command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CentOS 7 上，运行此命令：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On CentOS 8, run this command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CentOS 8 上，运行此命令：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Later on in this chapter, in the *Troubleshooting with setroubleshoot* section,
    we'll look at how to use `setroubleshoot` to help diagnose SELinux problems. In
    order to have some cool error messages to look at when we get there, go ahead
    and install `setroubleshoot` now, and activate it by restarting the `auditd` daemon.
    (There's no `setroubleshoot` daemon, because `setroubleshoot` is meant to be controlled
    by the `auditd` daemon.) Install `setroubleshoot` like so.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本章稍后的 *使用 setroubleshoot 进行故障排除* 部分，我们将探讨如何使用 `setroubleshoot` 来帮助诊断 SELinux
    问题。为了在此过程中看到一些酷炫的错误信息，先安装 `setroubleshoot`，并通过重启 `auditd` 守护进程来激活它。（没有 `setroubleshoot`
    守护进程，因为 `setroubleshoot` 是由 `auditd` 守护进程来控制的。）如下安装 `setroubleshoot`。
- en: 'For CentOS 7, use these commands:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 CentOS 7，请使用以下命令：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For AlmaLinux 8 and 9, use these commands:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 AlmaLinux 8 和 9，请使用以下命令：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: One of the little systemd quirks that we have to deal with on Red Hat-type systems
    is that you can't stop or restart the `auditd` daemon with the normal `systemctl`
    command. However, the old-fashioned `service` command works. For some reason that
    I don't understand, the Red Hat folk configured the `auditd` service file to disable
    the normal systemd way of doing things.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Red Hat 系统中，我们必须处理的一个小巧的 systemd 问题是，不能使用普通的 `systemctl` 命令来停止或重启 `auditd`
    守护进程。然而，传统的 `service` 命令是有效的。出于某些我无法理解的原因，Red Hat 的开发者将 `auditd` 服务文件配置为禁用常规的
    systemd 处理方式。
- en: Depending on the type of installation that you chose when installing CentOS
    or AlmaLinux, you might or might not already have `setroubleshoot` installed.
    To be sure, go ahead and run the command to install it. It won't hurt anything
    if `setroubleshoot` is already there.
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 根据你在安装 CentOS 或 AlmaLinux 时选择的安装类型，你可能已经安装了 `setroubleshoot`，也可能没有。为了确保这一点，请运行命令安装它。如果
    `setroubleshoot` 已经存在，安装它不会有任何不良影响。
- en: You now have what you need to get started. Let's now look at what SELinux can
    do for a busy web server administrator.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经拥有了开始所需的一切。让我们看看 SELinux 对繁忙的 Web 服务器管理员能做些什么。
- en: Creating web content files with SELinux enabled
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建带有 SELinux 启用的网页内容文件
- en: 'Now, let''s look at what can happen if you have web content files that are
    set with the wrong SELinux type. First, we''ll install, enable, and start the
    Apache web server on our CentOS virtual machines. (Note that including the --now
    option allows us to enable and start a daemon all in one single step.) Do the
    following on CentOS 7:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如果你的网页内容文件设置了错误的 SELinux 类型会发生什么。首先，我们将在 CentOS 虚拟机上安装、启用并启动 Apache
    Web 服务器。（请注意，包含 --now 选项可以让我们在一步操作中同时启用和启动守护进程。）在 CentOS 7 上执行以下操作：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'On CentOS 8, use the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CentOS 8 上，请使用以下命令：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you haven''t done so already, configure the firewall to allow access to
    the web server:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没做过此操作，请配置防火墙以允许访问 Web 服务器：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When we look at the SELinux information for Apache processes, we''ll see the
    following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看 Apache 进程的 SELinux 信息时，我们会看到以下内容：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As I said before, we're not interested in the user or the role. However, we
    are interested in the type, which in this case is `httpd_t`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所说，我们对用户或角色不感兴趣。然而，我们对类型感兴趣，在此情况下是 `httpd_t`。
- en: 'On Red Hat-type systems, we would normally place web content files in the `/var/www/html/`
    directory. Let''s look at the SELinux context for that `html` directory:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Red Hat 系统中，我们通常将网页内容文件放置在 `/var/www/html/` 目录中。我们来看一下该 `html` 目录的 SELinux
    上下文：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The type is `httpd_sys_content`, so it stands to reason that the `httpd` daemon
    should be able to access this directory. It''s currently empty, so let''s `cd`
    into it and create a simple index file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 类型是 `httpd_sys_content`，所以可以推断 `httpd` 守护进程应该能够访问这个目录。现在目录是空的，让我们进入其中并创建一个简单的
    index 文件：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here''s what I''ll put into the file:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我将放入文件中的内容：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Okay, as I said, it's simple, since my HTML hand-coding skills aren't what they
    used to be. But still, it serves our present purposes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，正如我所说，这很简单，因为我的 HTML 手动编码技能已经不如从前。但这仍然足以满足我们当前的需求。
- en: 'Looking at the SELinux context, we see that the file has the same type as the
    `html` directory:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 SELinux 上下文，我们发现该文件与 `html` 目录具有相同的类型：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'I can now navigate to this page from the web browser of my trusty OpenSUSE
    workstation:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我可以从我可靠的 OpenSUSE 工作站的网页浏览器访问这个页面：
- en: '![](img/file61.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file61.png)'
- en: 'Now, though, let''s see what happens if I decide to create content files in
    my own home directory and then move them to the `html` directory. First, let''s
    see what the SELinux context is for my new file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看，如果我决定在自己的主目录中创建内容文件，并将它们移动到 `html` 目录，会发生什么情况。首先，让我们看一下新文件的 SELinux
    上下文：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The context type is now `user_home_t`, which is a sure-fire indicator that
    I created this in my home directory. I''ll now move the file to the `html` directory,
    overwriting the old file:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，上下文类型为 `user_home_t`，这表明我是在我的主目录中创建的文件。我现在将文件移动到 `html` 目录，覆盖旧文件：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Even though I moved the file over to the /var/www/html directory, the SELinux
    type is still associated with users'' home directories. Now, I''ll go to the browser
    of my host machine to refresh the page:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我将文件移到 `/var/www/html` 目录，SELinux 类型仍然与用户的主目录相关联。现在，我将去我的主机的浏览器刷新页面：
- en: '![](img/file62.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file62.png)'
- en: So, I have a slight problem. The type that's assigned to my file doesn't match
    the type of the httpd daemon processes, so SELinux doesn't allow the `httpd` processes
    to access the file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我遇到一个小问题。分配给我的文件类型与 `httpd` 守护进程的类型不匹配，因此 SELinux 不允许 `httpd` 进程访问该文件。
- en: '**Tip**'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Had I copied the file to the `html` directory instead of moving it, the SELinux
    context would have automatically changed to match that of the destination directory.
  id: totrans-101
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果我将文件复制到 `html` 目录，而不是移动它，SELinux 上下文会自动更改，以匹配目标目录的上下文。
- en: Fixing an incorrect SELinux context
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复错误的 SELinux 上下文
- en: 'Okay, so I have this web content file that nobody can access, and I really
    don''t feel up to creating a new one. So, what do I do? Actually, we have three
    different utilities for fixing this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我有这个网页内容文件，没人能访问，而且我现在真的不想创建一个新的。那么，我该怎么办呢？实际上，我们有三种不同的工具来解决这个问题：
- en: '**chcon**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**chcon**'
- en: '**restorecon**'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**restorecon**'
- en: '**semanage**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**semanage**'
- en: Let's look at each of them.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这两种方法。
- en: Using chcon
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 chcon
- en: 'There are two ways to use `chcon` to fix an incorrect SELinux type on a file
    or directory. The first is to just manually specify the proper type:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以使用 `chcon` 来修复文件或目录上的错误 SELinux 类型。第一种是手动指定正确的类型：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We can use `chcon` to change any part of the context, but as I keep saying we're
    only interested in the type, which gets changed with the `-t` option. You can
    see in the `ls -Z` output that the command was successful.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `chcon` 来更改上下文的任何部分，但正如我一再强调的，我们只关心类型，它通过 `-t` 选项来更改。你可以在 `ls -Z` 输出中看到命令执行成功。
- en: 'The other way to use `chcon` is to reference a file that has the proper context.
    For demo purposes, I changed the `index.html` file back to the home directory
    type and created a new file within the `/var/www/html/` directory:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `chcon` 的另一种方式是引用一个具有正确上下文的文件。为了演示，我将 `index.html` 文件的类型改回主目录类型，并在 `/var/www/html/`
    目录下创建了一个新文件：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see, any files that I create within this directory will automatically
    have the proper SELinux context settings. Now, let''s use that new file as a reference
    in order to set the proper context on the `index.html` file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我在此目录中创建的任何文件都会自动拥有正确的 SELinux 上下文设置。现在，让我们使用这个新文件作为参考，来为 `index.html`
    文件设置正确的上下文：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: So, I used the `--reference` option and specified the file that I wanted to
    use as a reference. The file that I wanted to change is listed at the end of the
    command. Now, that's all to the good, but I want to find an easier way that doesn't
    require quite as much typing. After all, I am an old man, and I don't want to
    overexert myself. So, let's take a look at the `restorecon` utility.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我使用了`--reference`选项，并指定了我想用作参考的文件。要更改的文件在命令的末尾列出。现在，这一切都很好，但我想找一个不需要那么多输入的更简单的方法。毕竟，我已经是个老人了，不想让自己太累。那么，让我们来看看`restorecon`工具。
- en: Using restorecon
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用restorecon
- en: 'Using `restorecon` is easy. Just type `restorecon`, followed by the name of
    the file that you need to change. Once again, I''ve changed the context of the
    `index.html` file back to the home directory type. This time, though, I''m using
    `restorecon` to set the correct type:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`restorecon`非常简单。只需要输入`restorecon`，后跟需要更改的文件名称。再次提醒，我已将`index.html`文件的上下文更改回了主目录类型。不过这次，我使用`restorecon`来设置正确的类型：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: And that's all there is to it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。
- en: '**Tip**'
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can also use `chcon` and `restorecon` to change the context of an entire
    directory and its contents. For either one, just use the `-R` option. The following
    is an example:'
  id: totrans-123
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你也可以使用`chcon`和`restorecon`来更改整个目录及其内容的上下文。对于这两者，只需使用`-R`选项。以下是一个示例：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '(Remember: `-R` stands for recursive.)'
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （记住：`-R`表示递归。）
- en: 'There''s still one last thing to take care of, even though it isn''t really
    affecting our ability to access this file. That is, I need to change ownership
    of the file to the Apache user:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 还有最后一件事需要处理，尽管它实际上不会影响我们访问此文件的能力。那就是，我需要将文件的所有权更改为Apache用户：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let's now look at the final utility which is `semanage`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下最后一个工具——`semanage`。
- en: Using semanage
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用semanage
- en: In the scenario I've just presented, either `chcon` or `restorecon` will suit
    your needs just fine. The active SELinux policy mandates what security contexts
    in certain directories are supposed to look like. As long as you're using `chcon`
    or `restorecon` within directories that are defined in the active SELinux policy,
    you're good. But let's say that you've created a directory elsewhere that you
    want to use to serve out web content files. You would need to set the `httpd_sys_content_t`
    type on that directory and all of the files within it. However, if you use `chcon`
    or `restorecon` for that, the change won't survive a system reboot. To make the
    change permanent, you'll need to use `semanage`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我刚才介绍的场景中，`chcon`或`restorecon`都可以很好地满足你的需求。活动SELinux策略规定了某些目录中应该具有的安全上下文。只要你在活动SELinux策略中定义的目录内使用`chcon`或`restorecon`，就没问题。但假设你在其他地方创建了一个目录，想要用它来提供网页内容文件。你需要在该目录及其中的所有文件上设置`httpd_sys_content_t`类型。然而，如果使用`chcon`或`restorecon`，这种更改在系统重启后将不会生效。为了使更改永久生效，你需要使用`semanage`。
- en: 'Let''s say that, for some strange reason, I want to serve web content out of
    a directory that I''ve created in the `/home/` directory:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，出于某种奇怪的原因，我想从我在`/home/`目录下创建的一个目录中提供网页内容：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Because I had to use my `sudo` powers to create the directory here, it''s associated
    with the root user''s `home_root_t` type, instead of the normal `user_home_dir_t`
    type. Any files that I create within this directory will have the same type:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我必须使用`sudo`权限来创建目录，因此它与根用户的`home_root_t`类型相关联，而不是正常的`user_home_dir_t`类型。我在此目录中创建的任何文件将具有相同的类型：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The next step is to use `semanage` to add a permanent mapping of this directory
    and the `httpd_sys_content_t` type to the active policy''s context list:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用`semanage`为该目录和`httpd_sys_content_t`类型添加永久映射到活动策略的上下文列表：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Okay, here''s the breakdown of the `semanage` command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，接下来是`semanage`命令的分解：
- en: '**fcontext**: Because `semanage` has many purposes, we have to specify that
    we want to work with a file context.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fcontext**：由于`semanage`有许多用途，我们必须指定我们希望处理的是文件上下文。'
- en: '**-a**: This specifies that we''re adding a new record to the context list
    for the active SELinux policy.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-a**：此选项指定我们正在向活动SELinux策略的上下文列表中添加一个新记录。'
- en: '**-t**: This specifies the type that we want to map to the new directory. In
    this case, we''re creating a new mapping with the `httpd_sys_content` type.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-t**：此选项指定我们希望映射到新目录的类型。在此情况下，我们正在创建一个新的映射，类型为`httpd_sys_content`。'
- en: '**/home/webdir(/.*)?**: This bit of gibberish is what''s known as a **regular
    expression**. I can''t go into the nitty-gritty details of regular expressions
    here, so suffice it to say that **Regular Expressions** is a language that we
    use to match text patterns. (And yes, I did mean to say *is* instead of *are*,
    since Regular Expressions is the name of the overall language.) In this case,
    I had to use this particular regular expression in order to make this `semanage`
    command recursive because `semanage` doesn''t have the `-R` option switch. With
    this regular expression, I''m saying that I want anything that gets created in
    this directory to have the same SELinux type as the directory itself.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/home/webdir(/.*)?**：这一堆无意义的东西称为**正则表达式**。我不能在这里详细讨论正则表达式的细节，因此可以说，**正则表达式**是我们用来匹配文本模式的一种语言。（是的，我说的是“is”而不是“are”，因为正则表达式是整体语言的名称。）在这种情况下，我必须使用这个特定的正则表达式，以便使`semanage`命令递归，因为`semanage`没有`-R`选项开关。通过这个正则表达式，我想表达的是，我希望在这个目录中创建的任何内容都与目录本身具有相同的SELinux类型。'
- en: 'The final step is to do a `restorecon -R` on this directory to ensure that
    the proper labels have been set:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是在此目录上执行`restorecon -R`以确保设置了正确的标签：
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Yeah, I know. You're looking at this and saying, "But this `ls -Zd` output looks
    the same as it did after you did the semanage command." And you're right. After
    running the `semanage` command, the type seems to be set correctly. But the `semanage-fcontext`
    man page says to run `restorecon` anyway, so I did.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我知道。你看着这个说，“但是这个`ls -Zd`输出看起来和你做完`semanage`命令后一样。” 你说得对。在运行`semanage`命令后，似乎类型已经设置正确了。但是`semanage-fcontext`的man页面说无论如何都要运行`restorecon`，所以我就这么做了。
- en: '**Tip**'
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For more information on how to use `semanage` to manage security contexts, refer
    to the relevant man page by entering `man semanage-fcontext`.
  id: totrans-147
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要了解如何使用`semanage`管理安全上下文的更多信息，请参考相关的man页面，输入`man semanage-fcontext`。
- en: Hands-on lab – SELinux type enforcement
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实验动手操作 - SELinux类型强制
- en: 'In this lab, you''ll install the Apache web server and the appropriate SELinux
    tools. You''ll then view the effects of having the wrong SELinux type assigned
    to a web content file if you''re ready, let''s go:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，您将安装Apache Web服务器和适当的SELinux工具。然后，如果您准备好了，让我们开始吧：
- en: 'Install Apache, along with all the required SELinux tools on CentOS 7:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CentOS 7上安装Apache以及所有必需的SELinux工具：
- en: '[PRE26]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'On CentOS 8, use the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS 8上，使用以下命令：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Activate `setroubleshoot` by restarting the `auditd` service:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过重新启动`auditd`服务激活`setroubleshoot`：
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Enable and start the Apache service and open port `80` on the firewall:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用并启动Apache服务并在防火墙上打开端口`80`：
- en: '[PRE29]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `/var/www/html/` directory, create an `index.html` file with the following
    contents:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/var/www/html/`目录中，创建一个包含以下内容的`index.html`文件：
- en: '[PRE30]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'View the information about the `index.html` file:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看关于`index.html`文件的信息：
- en: '[PRE31]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In your host machine's web browser, navigate to the IP address of the CentOS
    virtual machine. You should be able to view the page.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机机器的Web浏览器中，导航到CentOS虚拟机的IP地址。您应该能够查看页面。
- en: 'Induce an SELinux violation by changing the type of the `index.html` file to
    something that''s incorrect:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`index.html`文件的类型更改为不正确的类型来引发SELinux违规：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Go back to your host machine's web browser and reload the document. You should
    now see a `Forbidden` message.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到主机机器的Web浏览器并重新加载文档。您现在应该看到一个`Forbidden`消息。
- en: 'Use `restorecon` to change the file back to its correct type:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`restorecon`将文件更改回正确的类型：
- en: '[PRE33]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Reload the page in your host machine's web browser. You should now be able to
    view the page.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机机器的Web浏览器中重新加载页面。您现在应该能够查看页面。
- en: End of lab.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验结束。
- en: Now that we've seen how to use basic SELinux commands, let's look at a cool
    tool that makes troubleshooting much easier.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过如何使用基本的SELinux命令，让我们来看一个很酷的工具，可以让故障排除变得更容易。
- en: Troubleshooting with setroubleshoot
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用setroubleshoot进行故障排除
- en: So, you're now scratching your head and saying, *When I can't access something
    that I should be able to, how do I know that it's an SELinux problem?* Ah, I'm
    glad you asked.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在您可能会想，“当我无法访问应该能访问的东西时，如何知道这是一个SELinux问题？” 啊，我很高兴你问了。
- en: Viewing setroubleshoot messages
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看setroubleshoot消息
- en: 'Whenever something happens that violates an SELinux rule, it gets logged in
    the `/var/log/audit/audit.log` file. Tools are available that can let you directly
    read that log, but to diagnose SELinux problems it''s way better to use `setroubleshoot`.
    The beauty of `setroubleshoot` is that it takes cryptic, hard-to-interpret SELinux
    messages from the `audit.log` file and translates them into plain, natural language.
    The messages that it sends to the `/var/log/messages` file even contain suggestions
    about how to fix the problem. To show how this works, let''s go back to our problem
    where a file in the `/var/www/html/` directory has been assigned the wrong SELinux
    type. Of course, we knew right away what the problem was because there was only
    one file in that directory and a simple `ls -Z` showed what was wrong with it.
    However, let''s ignore that for the moment and say that we didn''t know what the
    problem was. By opening the `/var/log/messages` file in `less` and searching for
    `sealert`, we''ll find this message:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 每当发生违反 SELinux 规则的事件时，它会被记录在 `/var/log/audit/audit.log` 文件中。虽然有工具可以直接读取该日志，但要诊断
    SELinux 问题，使用 `setroubleshoot` 要更好。`setroubleshoot` 的优点在于，它将 `audit.log` 文件中那些难以理解的、加密的
    SELinux 消息翻译成简单、自然的语言。它发送到 `/var/log/messages` 文件的消息甚至包含了如何解决问题的建议。为了展示这一点，我们回到之前的问题：`/var/www/html/`
    目录中的某个文件被分配了错误的 SELinux 类型。当然，我们很快就知道问题出在哪，因为该目录中只有一个文件，使用简单的 `ls -Z` 就能显示出问题。然而，让我们暂时忽略这一点，假设我们不知道问题是什么。通过在
    `less` 中打开 `/var/log/messages` 文件并搜索 `sealert`，我们会找到如下消息：
- en: '[PRE34]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The first line of this message tells us what the problem is. It's saying that
    SELinux is preventing us from accessing the `/var/www/html/index.html` file because
    it's set with the wrong type. It then gives us several suggestions on how to fix
    the problem, with the first one being to run the `restorecon` command, as I've
    already shown you how to do.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这条消息的第一行告诉我们问题所在。它说 SELinux 阻止我们访问 `/var/www/html/index.html` 文件，因为它设置了错误的类型。然后，它给出了几个修复问题的建议，第一个建议是运行
    `restorecon` 命令，正如我已经向你展示过的那样。
- en: '**Tip**'
  id: totrans-177
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A good rule-of-thumb to remember when reading these setroubleshoot messages
    is that the first suggestion in the message is normally the one that will fix
    the problem.
  id: totrans-179
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在阅读这些 setroubleshoot 消息时，有一个好的经验法则需要记住，那就是消息中的第一个建议通常是解决问题的方法。
- en: Using the graphical setroubleshoot utility
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用图形化 setroubleshoot 工具
- en: 'So far, I''ve only talked about using setroubleshoot on text-mode servers.
    After all, it''s very common to see Linux servers running in text-mode, so all
    of us Linux folk have to be text-mode warriors. But on desktop systems or on servers
    that have a desktop interface installed, there is a graphical utility that will
    automatically alert you when setroubleshoot detects a problem:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我只讨论了在文本模式服务器上使用 setroubleshoot。毕竟，在 Linux 服务器上运行文本模式非常常见，因此我们所有的 Linux
    用户都必须是文本模式的战士。但在安装了桌面界面的桌面系统或服务器上，当 setroubleshoot 检测到问题时，会有一个图形化工具自动提醒你：
- en: '![](img/file63.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file63.png)'
- en: 'Click on that alert icon, and you''ll see something like this:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 点击该警报图标，你将看到如下内容：
- en: '![](img/file64.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file64.png)'
- en: 'Click the **Troubleshoot** button, and you''ll see a list of suggestions on
    how to fix the problem:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **Troubleshoot** 按钮，你将看到一个修复问题的建议列表：
- en: '![](img/file65.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file65.png)'
- en: Note that these screenshots are from a CentOS 7 machine, but they would look
    the same on either an AlmaLinux 8 or an AlmaLinux 9 machine.
  id: totrans-187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，这些截图来自 CentOS 7 机器，但在 AlmaLinux 8 或 AlmaLinux 9 机器上看起来也是一样的。
- en: As is often the case with GUI thingies, this is mostly self-explanatory, so
    you shouldn't have any problem figuring it out.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 正如通常情况下的图形界面工具一样，它大多数情况下是自解释的，所以你应该不会有问题理解它。
- en: Troubleshooting in permissive mode
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在宽松模式下进行故障排除
- en: If you're dealing with a simple problem like the one I've just shown you, then
    you can probably assume that you can safely do what the first suggestion in the
    setroubleshoot message tells you to do. But there will be times when things get
    a bit more complex, where you might have more than one problem. For times like
    these, you need to use permissive mode.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在处理一个像我刚才展示的简单问题，那么你可以假设可以安全地按照 setroubleshoot 消息中第一个建议的操作。但是，问题可能会变得更加复杂，可能会涉及到不止一个问题。在这种情况下，你需要使用宽松模式。
- en: When you first install your Red Hat or CentOS system, SELinux is in enforcing
    mode, which is the default. This means that SELinux will actually stop actions
    that are in violation of the active SELinux policy. This also means that, if you
    have multiple SELinux problems when you try to perform a certain action, SELinux
    will stop the action from taking place after the first violation occurs. When
    it happens, SELinux won't even see the remaining problems, and they won't show
    up in the `messages` log file. If you try to troubleshoot these types of problem
    while in enforcing mode, you'll be like the proverbial dog who chases its own
    tail. You'll go round and round and will accomplish nothing.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次安装 Red Hat 或 CentOS 系统时，SELinux 会处于强制模式，这是默认设置。这意味着 SELinux 会实际阻止违反活动 SELinux
    策略的操作。这也意味着，如果你在尝试执行某个操作时遇到多个 SELinux 问题，SELinux 会在首次违规后阻止该操作的执行。发生这种情况时，SELinux
    不会看到剩余的问题，这些问题也不会出现在 `messages` 日志文件中。如果你在强制模式下尝试故障排除这些问题，你就像那只追着自己尾巴转的狗。你会原地打转，什么也做不成。
- en: In permissive mode, SELinux allows actions that violate policy to occur, but
    it will log them. By switching to permissive mode and doing something to induce
    the problem that you were seeing, the prohibited actions will take place but `setroubleshoot`
    will log all of them in the `messages` file. This way, you'll get a better view
    of what you need to do to get things working properly.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在宽容模式下，SELinux 允许违反策略的操作发生，但会记录它们。通过切换到宽容模式并执行你之前看到的问题，当这些被禁止的操作发生时，`setroubleshoot`
    会将所有这些操作记录在 `messages` 文件中。通过这种方式，你可以更清楚地了解需要做些什么才能让系统正常工作。
- en: 'First, let''s use `getenforce` to verify what our current mode is:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用 `getenforce` 来验证当前的模式：
- en: '[PRE35]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, let''s temporarily place the system into permissive mode:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们暂时将系统置于宽容模式：
- en: '[PRE36]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'When I say *temporarily*, I mean that this will only last until you do a system
    reboot. After a reboot, you''ll be back in enforcing mode. Also, note that a `0`
    after `setenforce` denotes that I''m setting permissive mode. To get back to enforcing
    mode after you''re done with troubleshooting, replace the `0` with a `1`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 当我说*临时*时，我的意思是这将只持续到你重启系统。重启后，你会回到强制模式。此外，请注意，`setenforce` 后面的 `0` 表示我正在设置宽容模式。完成故障排除后，要恢复强制模式，只需将
    `0` 替换为 `1`：
- en: '[PRE37]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We're now back in enforcing mode.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已回到强制模式。
- en: At times, you may need to make permissive mode persist after a system reboot.
    An example of this would be if you ever have to deal with a system that has had
    SELinux disabled for a long period of time. In a case like that, you wouldn't
    want to just put SELinux into enforcing mode and reboot. If you try that, it will
    take forever for the system to properly create the file and directory labels that
    make SELinux work, and the system might lock up before it's done. By placing the
    system into permissive mode first, you'll avoid having the system lock up, although
    it will still take a long time for the relabeling process to complete.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能需要让宽容模式在系统重启后保持有效。例如，如果你遇到一个长期禁用 SELinux 的系统，情况就会如此。在这种情况下，你不希望只是将 SELinux
    切换到强制模式然后重启。如果你这么做，系统将需要很长时间才能正确创建 SELinux 所需的文件和目录标签，且系统可能会在完成之前卡住。首先将系统置于宽容模式，可以避免系统锁死，尽管重新标记过程仍会花费很长时间。
- en: 'To make permissive mode persistent across system reboots, you''ll edit the
    `selinux` file in the `/etc/sysconfig/` directory. Here''s what it looks like
    by default:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要让宽容模式在系统重启后持续有效，你需要编辑 `/etc/sysconfig/` 目录下的 `selinux` 文件。默认情况下，它看起来是这样的：
- en: '[PRE38]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The two important things you see here are that SELinux is in enforcing mode,
    and that it''s using the targeted policy. To switch to permissive mode, just change
    the SELINUX= line, and save the file:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这里看到的两个重要信息是 SELinux 处于强制模式，且它使用的是针对性策略。要切换到宽容模式，只需更改 SELINUX= 行，然后保存文件：
- en: '[PRE39]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `sestatus` utility shows us lots of cool information about what''s going
    on with SELinux:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`sestatus` 工具展示了许多关于 SELinux 的有趣信息：'
- en: '[PRE40]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The two items that interest us here are the current mode and the mode from a
    configuration file. By changing the configuration file to permissive, we haven't
    changed the current running mode. So, we're still in enforcing mode. The switch
    to permissive won't happen until I either reboot this machine or until I manually
    switch by issuing a `sudo setenforce 0` command. And of course, you don't want
    to stay in permissive mode forever. As soon as you no longer need permissive mode,
    change the configuration file back to **enforcing** and do `sudo setenforce 1`
    to change the running mode.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们关注的两个项目是当前模式和来自配置文件的模式。通过将配置文件更改为宽容模式，我们并没有改变当前的运行模式。所以，我们仍然处于强制模式。直到我重启这台机器，或者手动通过执行`sudo
    setenforce 0`命令切换，才能切换到宽容模式。当然，你不希望一直停留在宽容模式下。一旦不再需要宽容模式，将配置文件改回**强制**模式，并执行`sudo
    setenforce 1`命令来改变运行模式。
- en: Working with SELinux policies
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与SELinux策略的工作
- en: So far, all we've looked at is what happens when we have an incorrect SELinux
    type set on a file and what to do to set the correct type. Another problem we
    may have would comes about if we need to allow an action that is prohibited by
    the active SELinux policy.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只看到了当文件上设置了错误的SELinux类型时发生了什么，以及如何设置正确的类型。我们可能遇到的另一个问题是，当我们需要允许一个被活动SELinux策略禁止的操作时，该怎么办。
- en: Viewing Booleans
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看布尔值
- en: 'Booleans are part of what makes up an SELinux policy, and each Boolean represents
    a binary choice. In SELinux policies, a Boolean either allows something or it
    prohibits something. To see all Booleans on your system, run the `getsebool -a`
    command. (It''s a long list, so I''ll only show partial output here.):'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值是SELinux策略的一部分，每个布尔值代表一个二元选择。在SELinux策略中，布尔值要么允许某事，要么禁止某事。要查看系统上的所有布尔值，可以运行`getsebool
    -a`命令。（这是一个很长的列表，因此这里仅显示部分输出。）
- en: '[PRE41]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To view more than one Boolean, the `-a` switch is mandatory. If you just happen
    to know the name of the Boolean that you want to see, leave the `-a` out and list
    it. In keeping with the Apache web server theme that we''ve had going, let''s
    see whether we''re allowing Apache to access files in users'' home directories:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看多个布尔值，`-a`开关是必需的。如果你恰好知道想要查看的布尔值的名称，可以不加`-a`直接列出它。按照我们之前提到的Apache web服务器主题，来看一下是否允许Apache访问用户主目录中的文件：
- en: '[PRE42]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The fact that this Boolean is `off` means that the Apache server daemon isn't
    allowed to access any content within the users' home directories. This is an important
    protection, and you really don't want to change it. Instead, just put web content
    files elsewhere so that you don't have to change this Boolean.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这个布尔值为`off`意味着Apache服务器进程不允许访问用户主目录中的任何内容。这是一个重要的保护，你真的不希望更改它。相反，只需将web内容文件放到其他地方，这样你就不必更改这个布尔值。
- en: 'You''ll rarely want to look at the entire list, and you likely won''t know
    the name of the specific Boolean that you want to see. Rather, you''ll probably
    want to filter the output through `grep` in order to look at just certain things.
    For example, to see all of the Booleans that affect a web server, do this:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你很少需要查看整个列表，而且你可能也不知道想要查看的具体布尔值名称。相反，你可能希望通过`grep`过滤输出，以便仅查看某些内容。例如，要查看所有影响web服务器的布尔值，可以这样做：
- en: '[PRE43]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: It's also a rather long list, but scroll down a little and you'll find the Boolean
    that you seek.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是一个相当长的列表，但向下滚动一点，你会找到你需要的布尔值。
- en: Configuring the Booleans
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置布尔值
- en: 'Realistically, you''ll likely never have reason to allow users to serve web
    content out of their home directories. It''s much more probable that you''ll set
    up something like a Samba server, which would allow users on Windows machines
    to use their graphical Windows Explorer to access their home directories on Linux
    servers. But if you set up a Samba server and don''t do anything with SELinux,
    users will complain about how they don''t see any of their files in their home
    directories of the Samba server. Because you''re the proactive type and you want
    to avoid the pain of listening to complaining users, you''ll surely just go ahead
    and configure SELinux to allow the Samba daemon to access users'' home directories.
    You might not know the exact name of the Boolean, but you can find it easily enough,
    as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现实情况下，你可能永远没有理由允许用户从他们的主目录提供 Web 内容。更有可能的是，你会设置类似 Samba 服务器的服务，允许 Windows 机器上的用户通过图形化的
    Windows 资源管理器访问 Linux 服务器上的主目录。但如果你设置了 Samba 服务器并且没有调整 SELinux 配置，用户会抱怨他们在 Samba
    服务器的主目录中看不到任何文件。因为你是一个主动型的人，为了避免听到用户抱怨，你一定会继续配置 SELinux，允许 Samba 守护进程访问用户的主目录。你可能不知道具体的布尔值名称，但可以通过以下方式轻松找到它：
- en: '[PRE44]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Okay, you knew that the Boolean name probably had the word `home` in it, so
    you filtered for that word. About half-way down the list, you see `samba_enable_home_dirs
    --> off`. You''ll need to change this to `on` to let users access their home directories
    from their Windows machines:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你知道布尔值的名称可能包含`home`这个词，因此你过滤了这个词。在列表的中间，你看到了`samba_enable_home_dirs --> off`。你需要将其更改为`on`，以便用户可以从他们的
    Windows 机器访问他们的主目录：
- en: '[PRE45]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Users can now access their home directories as they should be able to, but
    only until you do a system reboot. Without the `-P` option, any changes you make
    with `setsebool` will only be temporary. So, let''s make the change permanent
    with `-P`:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以按预期访问他们的主目录，但直到你重新启动系统为止。如果没有`-P`选项，你通过`setsebool`做的任何更改都会是临时的。所以，让我们用`-P`选项使更改永久生效：
- en: '[PRE46]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Congratulations, you've just made your first change to an SELinux policy.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你刚刚对 SELinux 策略进行了首次修改。
- en: Protecting your web server
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保护你的 Web 服务器
- en: Look at the output of the `getsebool -a | grep 'http'` command again, and you'll
    see that most httpd-related Booleans are turned off by default, with only a few
    turned on. There are two of them that you'll commonly need to turn on when setting
    up a web server.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看`getsebool -a | grep 'http'`命令的输出，你会看到大多数与 httpd 相关的布尔值默认是关闭的，只有少数几个是开启的。你常常需要在设置
    Web 服务器时开启其中两个。
- en: 'If you ever need to set up a website with some sort of PHP-based content management
    system, such as Joomla or WordPress, you may have to turn on the `httpd_unified`
    Boolean. With this Boolean turned off, the Apache web server won''t be able to
    interact properly with all of the components of the PHP engine:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要设置一个带有某种基于 PHP 的内容管理系统（如 Joomla 或 WordPress）的网站，你可能需要开启`httpd_unified`布尔值。关闭此布尔值后，Apache
    Web 服务器将无法与 PHP 引擎的所有组件正常互动：
- en: '[PRE47]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The other Boolean that you''ll commonly need to turn on is the `httpd_can_sendmail`
    Boolean. If you ever need a website to send mail out through a form (or if you
    need to set up a mail server with a web-based frontend), you''ll definitely need
    to set this to `on`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个你常常需要开启的布尔值是`httpd_can_sendmail`。如果你需要让网站通过表单发送邮件（或者需要设置带有 Web 前端的邮件服务器），你一定需要将此设置为`on`：
- en: '[PRE48]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'On the other hand, there are some Booleans that are turned on by default, and
    you might want to consider whether you really need them turned on. For example,
    allowing CGI scripts to run on a web server does represent a potential security
    risk. If an intruder were to somehow upload a malicious CGI script to the server
    and run it, much damage could occur as a result. Yet, for some bizarre reason,
    the default SELinux policy allows CGI scripts to run. If you''re absolutely certain
    that nobody who hosts websites on your server will ever need to run CGI scripts,
    you might want to consider turning this Boolean off:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，有些布尔值是默认开启的，你可能需要考虑是否真的需要它们保持开启。例如，允许 CGI 脚本在 Web 服务器上运行确实存在潜在的安全风险。如果黑客以某种方式将恶意的
    CGI 脚本上传到服务器并运行，可能会造成很大的损害。然而，出于某种奇怪的原因，默认的 SELinux 策略允许 CGI 脚本运行。如果你完全确定没有人会在你的服务器上托管的网站上需要运行
    CGI 脚本，那么你可能想要考虑将此布尔值关闭：
- en: '[PRE49]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Protecting network ports
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保护网络端口
- en: Each network daemon that's running on your system has a specific network port
    or set of network ports assigned to it, on which it will listen. The `/etc/services`
    file contains a list of common daemons and their associated network ports, but
    it doesn't prevent someone from configuring a daemon to listen on some non-standard
    port. So, without some mechanism to prevent it, some sneaky intruder could potentially
    plant some sort of malware that would cause a daemon to listen on a non-standard
    port, possibly listening for commands from its master.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中每个正在运行的网络守护进程都有一个或一组特定的网络端口分配给它，用于监听。`/etc/services`文件包含常见守护进程及其相关网络端口的列表，但它并不会阻止某人配置一个守护进程监听某个非标准端口。因此，如果没有某种机制来阻止它，某个狡猾的入侵者可能会植入某种恶意软件，导致守护进程在非标准端口上监听，可能会等待来自其主人的命令。
- en: 'SELinux protects against this sort of malicious activity by only allowing daemons
    to listen on certain ports. Use `semanage` to look at the list of allowed ports:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux 通过只允许守护进程在特定端口上监听来防止此类恶意活动。使用`semanage`查看允许的端口列表：
- en: '[PRE50]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This is yet another of those very long lists, so I''m only showing partial
    output. However, let''s narrow things down a bit. Let''s say that I only want
    to look at a list of ports on which the Apache web server can listen. For this,
    I''ll use my good friend `grep`:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这是又一份非常长的列表，所以我这里只展示部分输出。不过，让我们稍微缩小范围。假设我只想查看 Apache Web 服务器可以监听的端口列表。为此，我将使用我亲爱的`grep`：
- en: '[PRE51]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Several `http` items come up, but I'm only interested in the `http_port_t` item
    because it's the one that affects normal web server operation. We see here that
    SELinux will allow Apache to listen on ports `80`, `81`, `443`, `488`, `8008`,
    `8009`, `8443`, and `9000`. Since the Apache server is one of the few daemons
    for which you'd ever have a legitimate reason for adding a non-standard port,
    let's demo with it.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 出现了几个`http`项，但我只关心`http_port_t`项，因为它是影响正常 web 服务器操作的那个项。我们可以看到，SELinux 会允许 Apache
    在端口`80`、`81`、`443`、`488`、`8008`、`8009`、`8443`和`9000`上监听。由于 Apache 是少数几个你有合法理由添加非标准端口的守护进程之一，我们就用它来演示。
- en: 'First, let''s go into the `/etc/httpd/conf/httpd.conf` file and look at the
    ports on which Apache is currently listening. Search for `Listen`, and you''ll
    see the following line:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们进入`/etc/httpd/conf/httpd.conf`文件，查看 Apache 当前正在监听的端口。搜索`Listen`，你会看到以下这一行：
- en: '[PRE52]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'I don''t have the SSL module installed on this machine, but if I did I would
    have an `ssl.conf` file in the `/etc/httpd/conf.d/` directory with this line:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这台机器上没有安装 SSL 模块，但如果有的话，我会在`/etc/httpd/conf.d/`目录下有一个`ssl.conf`文件，并且其中会有这一行：
- en: '[PRE53]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'So for normal, non-encrypted website connections, the default configuration
    only has Apache listening on port `80`. For secure, encrypted website connections,
    Apache listens on port `443`. Now, let''s go into the `httpd.conf` file and change
    `Listen 80` to a port number that SELinux doesn''t allow, for example, port `82`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，对于普通的、未加密的网站连接，默认配置下，Apache 只会监听端口 `80`。对于安全的、加密的网站连接，Apache 会监听端口 `443`。现在，让我们进入`httpd.conf`文件，并将`Listen
    80`更改为 SELinux 不允许的端口号，例如端口 `82`：
- en: '[PRE54]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'After saving the file, I''ll restart Apache to read in the new configuration:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，我会重新启动 Apache，以便读取新的配置：
- en: '[PRE55]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Yes, I have a problem. I''ll look in the `/var/log/messages` file to see if
    `setroubleshoot` gives me a clue:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我有个问题。我会查看`/var/log/messages`文件，看看`setroubleshoot`是否能给我一些线索：
- en: '[PRE56]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The first line of the message details how SELinux is preventing `httpd` from
    binding to port `82`. The first suggestion we see for fixing this is to use `semanage`
    to add the port to the list of allowed ports. So, let''s do that and then look
    at the list of Apache ports:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 消息的第一行详细说明了 SELinux 如何阻止 `httpd` 绑定到端口 `82`。我们看到的第一个修复建议是使用 `semanage` 将该端口添加到允许的端口列表中。那么，咱们就这么做，然后查看
    Apache 的端口列表：
- en: '[PRE57]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: It's not clear in the `setroubleshoot` message, but you need to specify the
    port number that you want to add after `port -a`. The `-t http_port_t` part specifies
    the **type** for which you want to add the port, and `-p tcp` specifies that you
    want to use the TCP protocol.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setroubleshoot`的消息中并不明确，但你需要在`port -a`后指定你想要添加的端口号。`-t http_port_t`部分指定你要添加端口的**类型**，而`-p
    tcp`则指定你要使用 TCP 协议。
- en: 'Now for the moment of truth. Will the Apache daemon start this time? Let''s
    see:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，关键时刻到了。Apache 守护进程这次能启动吗？让我们看看：
- en: '[PRE58]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'It works, and we have achieved coolness. But now, I''ve decided that I no longer
    need this oddball port. Deleting it is just as easy as adding it:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 它有效，我们达成了目标。但现在，我决定不再需要这个非标准端口了。删除它和添加它一样简单：
- en: '[PRE59]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: All I had to do was to replace `port -a` with `port -d`. And of course, I still
    need to go into the `/etc/httpd/conf/httpd.conf` file to change `Listen 82` back
    to `Listen 80`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我所要做的就是将 `port -a` 替换为 `port -d`。当然，我还需要进入 `/etc/httpd/conf/httpd.conf` 文件，将
    `Listen 82` 改回 `Listen 80`。
- en: Creating custom policy modules
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自定义策略模块
- en: Sometimes, you'll run into a problem that you can't fix either by changing the
    type or by setting a Boolean. In times like these, you'll need to create a custom
    policy module, and you'll use the `audit2allow` utility to do that.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你会遇到一个问题，既无法通过更改类型，也无法通过设置布尔值来解决。在这种情况下，你需要创建一个自定义策略模块，并使用 `audit2allow`
    工具来完成。
- en: 'Here’s a screenshot of a problem I had several years ago, when I was helping
    a client set up a Postfix mail server on CentOS 7:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这是几年前我帮助客户在 CentOS 7 上设置 Postfix 邮件服务器时遇到的一个问题的截图：
- en: '![](img/file66.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file66.png)'
- en: 'So, for some strange reason that I never understood, SELinux wouldn''t allow
    Dovecot, the **Mail Delivery Agent** (**MDA**) component of the mail server, to
    read its own `dict` file. There''s no Boolean to change and there wasn''t a type
    problem, so `setroubleshoot` suggested that I create a custom policy module. It''s
    easy enough to do, but you do need to be aware that this won''t work with `sudo`
    on your normal user account. This is one of those rare times when you''ll just
    have to go to the root user command prompt, and you''ll also need to be in the
    root user''s home directory:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，由于某种我从未理解的奇怪原因，SELinux 不允许 Dovecot（邮件服务器的**邮件投递代理**（**MDA**）组件）读取它自己的 `dict`
    文件。没有布尔值可以更改，也没有类型问题，所以 `setroubleshoot` 建议我创建一个自定义策略模块。这很容易做到，但需要注意的是，这在普通用户账户上使用
    `sudo` 是无法工作的。这是少数几次你必须进入 root 用户命令行提示符的情况，同时你还需要在 root 用户的主目录中：
- en: '[PRE60]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Before you do it, be sure to put SELinux into permissive mode and then do something
    to induce the SELinux error. This way, you'll be sure that one problem isn't masking
    others.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在你操作之前，确保将 SELinux 设置为宽容模式，然后做一些操作以诱发 SELinux 错误。这样，你可以确保一个问题不会掩盖其他问题。
- en: 'When you run the command to create the new policy module, be sure to replace
    `mypol` with a custom policy name of your own choosing. In my case, I named the
    module `dovecot_dict`, and the command looked like this:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行命令创建新的策略模块时，确保将 `mypol` 替换为你自己选择的自定义策略名称。以我为例，我将模块命名为 `dovecot_dict`，命令如下所示：
- en: '[PRE61]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: I’m using `grep` to search through the `audit.log` file for SELinux messages
    that contain the word `dict`. I then pipe the output of that into `audit2allow`
    and use the `-M` option to create a custom module with the name `dovecot_dict`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用 `grep` 搜索 `audit.log` 文件中的 SELinux 消息，查找包含 `dict` 词语的内容。然后，我将该输出管道传递给 `audit2allow`，并使用
    `-M` 选项创建一个名为 `dovecot_dict` 的自定义模块。
- en: 'After I created the new policy module, I inserted it into the SELinux policy
    like so:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在我创建了新的策略模块后，我将其插入到 SELinux 策略中，如下所示：
- en: '[PRE62]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'There was a also a second problem that required another custom module, but
    I just repeated this procedure to produce another module of a different name.
    After I got all that done, I reloaded the SELinux policy, in order to get my new
    modules to take effect:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 还有第二个问题，需要另一个自定义模块，但我只是重复了这个过程，生成了一个不同名称的模块。完成所有这些后，我重新加载了 SELinux 策略，以使新模块生效：
- en: '[PRE63]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: With `semodule`, the `-R` switch stands for reload, rather than recursive, as
    it does with most Linux commands.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `semodule` 时，`-R` 选项代表重新加载，而不是像大多数 Linux 命令中那样代表递归。
- en: With all that done, I put SELinux back into enforcing mode and exited back to
    my own user account. And I tested the setup to make sure that I had fixed the
    problem.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些后，我将 SELinux 设置回强制模式，并退出回到自己的用户账户。我还测试了设置，确保问题已经解决。
- en: 'Of course, you also want to bear in mind that you don''t want to just modify
    SELinux policy or contexts every time you see an `sealert` message in the log
    files. For example, consider this snippet from the `messages` file of my Oracle
    Linux 7 machine, which I set up mainly to run Docker and Docker containers:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你还需要记住，不能每次在日志文件中看到 `sealert` 消息时就修改 SELinux 策略或上下文。例如，考虑我在 Oracle Linux
    7 机器上的 `messages` 文件中的这一片段，我主要是为了运行 Docker 和 Docker 容器而设置该机器：
- en: '[PRE64]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: These messages were caused by an early version of Docker trying to access resources
    on the host machine. As you can see, Docker is trying to access some rather sensitive
    files, and SELinux is preventing Docker from doing so. With Docker, and without
    some sort of MAC, it can be a trivial matter for a normal, unprivileged user to
    escape from the Docker container and have root user privileges on the host system.
    Naturally, when you see these sorts of messages, you don't want to automatically
    tell SELinux to allow the prohibited actions. It just may be that SELinux is preventing
    something truly bad from taking place.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这些消息是由于早期版本的 Docker 尝试访问主机上的资源而引起的。如您所见，Docker 正在尝试访问一些相当敏感的文件，而 SELinux 正在阻止
    Docker 这样做。使用 Docker 时，如果没有某种 MAC，普通的无权限用户可能会轻松地逃脱 Docker 容器并在主机系统上获得 root 权限。显然，当您看到这些类型的消息时，您不想自动让
    SELinux 允许被禁止的操作。SELinux 可能正在阻止一些真正不好的事情发生。
- en: '**Tip**'
  id: totrans-279
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-280
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Be sure to get your copy of The SELinux Coloring Book from [https://opensource.com/business/13/11/selinux-policy-guide](https://opensource.com/business/13/11/selinux-policy-guide).
  id: totrans-281
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 确保从[https://opensource.com/business/13/11/selinux-policy-guide](https://opensource.com/business/13/11/selinux-policy-guide)获取您的《SELinux涂色书》副本。
- en: Hands-on lab – SELinux Booleans and ports
  id: totrans-282
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实践实验 – SELinux 布尔值和端口
- en: 'In this lab, you''ll view the effects of having Apache try to listen on an
    unauthorized port:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，您将查看 Apache 尝试在未授权端口上监听时的效果：
- en: 'View the ports that SELinux allows the Apache web server daemon to use:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看 SELinux 允许 Apache Web 服务器守护进程使用的端口：
- en: '[PRE65]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Open the `/etc/httpd/conf/httpd.conf` file in your favorite text editor. Find
    the line that says `Listen 80` and change it to `Listen 82`. Restart Apache by
    entering the following:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `/etc/httpd/conf/httpd.conf` 文件，在您喜欢的文本编辑器中找到包含 `Listen 80` 的行，并将其更改为 `Listen
    82`。通过输入以下命令重启 Apache：
- en: '[PRE66]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'View the error message you receive by entering:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令查看您收到的错误信息：
- en: '[PRE67]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Add port `82` to the list of authorized ports and restart Apache:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将端口 `82` 添加到授权端口列表中并重启 Apache：
- en: '[PRE68]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Delete the port that you just added:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除您刚刚添加的端口：
- en: '[PRE69]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Go back into the `/etc/httpd/conf/httpd.conf` file and change `Listen 82` back
    to `Listen 80`. Restart the Apache daemon to return to normal operation.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 `/etc/httpd/conf/httpd.conf` 文件，将 `Listen 82` 更改回 `Listen 80`。重启 Apache
    守护进程以恢复正常操作。
- en: End of lab.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验结束。
- en: Okay, you've seen how SELinux can protect you against various bad things, and
    how to troubleshoot things that go wrong. Let's turn our attention to AppArmor.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，您已经了解了 SELinux 如何保护您免受各种不良事件的侵害，以及如何排除出现问题的情况。接下来，我们将关注 AppArmor。
- en: How AppArmor can benefit a systems administrator
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AppArmor 如何使系统管理员受益
- en: 'AppArmor is the MAC system that comes installed with the SUSE and the Ubuntu
    families of Linux. Although it''s designed to do pretty much the same job as SELinux,
    its mode of operation is substantially different:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: AppArmor 是与 SUSE 和 Ubuntu 系列 Linux 一起安装的 MAC 系统。虽然它的设计目的与 SELinux 基本相同，但其工作方式有很大不同：
- en: SELinux labels all system processes and all objects such as files, directories,
    or network ports. For files and directories, SELinux stores the labels in their
    respective inodes as extended attributes. (An inode is the basic filesystem component
    that contains all information about a file, except for the filename.)
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELinux 为所有系统进程以及所有对象（如文件、目录或网络端口）打上标签。对于文件和目录，SELinux 会将标签存储在它们各自的 inode 中作为扩展属性。（inode
    是文件系统的基本组件，包含有关文件的所有信息，除了文件名。）
- en: AppArmor uses pathname enforcement, which means that you specify the path to
    the executable file that you want AppArmor to control. This way, there's no need
    to insert labels into the extended attributes of files or directories.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AppArmor 使用路径名强制执行，这意味着您指定要让 AppArmor 控制的可执行文件路径。这样，就无需将标签插入文件或目录的扩展属性中。
- en: With SELinux, you have system-wide protection out of the box.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SELinux，您可以获得开箱即用的系统级保护。
- en: With AppArmor, you have a profile for each individual application.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AppArmor，您可以为每个单独的应用程序创建配置文件。
- en: With either SELinux or AppArmor, you might occasionally find yourself having
    to create custom policy modules from scratch, especially if you're dealing with
    either third-party applications or home-grown software. With AppArmor, this is
    easier, because the syntax for writing AppArmor profiles is much easier than the
    syntax for writing SELinux policies. And AppArmor comes with utilities that can
    help you automate the process.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论是 SELinux 还是 AppArmor，你可能偶尔会需要从头开始创建自定义的策略模块，特别是当你处理第三方应用程序或自制软件时。使用 AppArmor
    这会更容易一些，因为编写 AppArmor 配置文件的语法比编写 SELinux 策略的语法要简单得多。而且，AppArmor 提供了一些工具，可以帮助你自动化这个过程。
- en: Just as SELinux can, AppArmor can help prevent malicious actors from ruining
    your day and can help protect user data.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就像 SELinux 一样，AppArmor 也可以帮助防止恶意攻击者破坏你的工作，并帮助保护用户数据。
- en: So, you see that there are advantages and disadvantages to both SELinux and
    AppArmor, and a lot of Linux administrators have strong feelings about which one
    they prefer. (To avoid being subjected to a flame-war, I'll refrain from stating
    my own preference.) Also, note that even though we're working with an Ubuntu virtual
    machine, the information I present here, other than the Ubuntu-specific package
    installation commands, also works with the SUSE Linux distros.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你会看到 SELinux 和 AppArmor 各有优缺点，许多 Linux 管理员对自己更喜欢哪一个有强烈的看法。（为了避免卷入争论，我不会表明自己的偏好。）另外，请注意，尽管我们使用的是
    Ubuntu 虚拟机，但除了 Ubuntu 特定的包安装命令外，我在这里提供的信息同样适用于 SUSE Linux 系统。
- en: Looking at AppArmor profiles
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看 AppArmor 配置文件
- en: 'To begin, we’ll install the lxc package so that we can have more to look at:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将安装 lxc 包，以便我们可以查看更多内容：
- en: '[PRE70]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In the `/etc/apparmor.d/` directory, you''ll see the AppArmor profiles for
    your system. (SELinux folk say *policies*, but AppArmor folk say *profiles*.):'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/etc/apparmor.d/` 目录中，你将看到系统的 AppArmor 配置文件。（SELinux 用户称之为 *策略*，而 AppArmor
    用户称之为 *配置文件*。）
- en: '[PRE71]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: All of the text files you see in this directory are AppArmor profiles. If you’ve
    installed the `lxc` package, you'll find a few other profiles in the `lxc` and
    `lxc-containers` subdirectories. Still, though, there's not a whole lot there
    in the way of application profiles.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个目录中看到的所有文本文件都是 AppArmor 配置文件。如果你已经安装了 `lxc` 包，你会在 `lxc` 和 `lxc-containers`
    子目录中找到一些其他的配置文件。不过，尽管如此，在应用程序配置文件方面，还是没有太多内容。
- en: '**Tip**'
  id: totrans-312
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-313
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For some reason, a default installation of OpenSUSE comes with more installed
    profiles than Ubuntu Server does. To install more profiles on Ubuntu, just run
    this command:'
  id: totrans-314
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 出于某些原因，OpenSUSE 的默认安装比 Ubuntu Server 安装了更多的配置文件。要在 Ubuntu 上安装更多配置文件，只需运行以下命令：
- en: ''
  id: totrans-315
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**sudo apt install apparmor-profiles apparmor-profiles-extra**'
  id: totrans-316
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**sudo apt install apparmor-profiles apparmor-profiles-extra**'
- en: In the `abstractions` subdirectory, you'll find files that aren't complete profiles
    but that can be included in complete profiles. Any one of these abstraction files
    can be included in any number of profiles. This way, you don't have to write the
    same code over and over every time you create a profile. Just include an abstraction
    file instead.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `abstractions` 子目录中，你会找到一些不是完整配置文件的文件，但它们可以被包含到完整的配置文件中。任何一个抽象文件都可以被包含在多个配置文件中。这样，你就不需要每次创建配置文件时重复写相同的代码。只需包含一个抽象文件即可。
- en: '**Tip**'
  id: totrans-318
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-319
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you're familiar with programming concepts, just think of abstraction files
    as `include` files by another name.
  id: totrans-320
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你熟悉编程概念，可以将抽象文件看作是另一种形式的 `include` 文件。
- en: 'Here’s a partial listing of the abstraction files:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是部分抽象文件的列表：
- en: '[PRE72]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'To get a feel for how AppArmor rules work, let''s peek inside the `web-data`
    abstraction file:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解 AppArmor 规则是如何工作的，让我们看看 `web-data` 抽象文件的内容：
- en: '[PRE73]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'This file is just a list of directories from which the Apache daemon is allowed
    to read files. Let''s break it down:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件只是一个目录列表，列出了 Apache 守护进程被允许读取文件的目录。我们来详细分析一下：
- en: Note that each rule ends with `r,` . This denotes that we want Apache to have
    read access to each listed directory. Also note that each rule has to end with
    a comma.
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，每个规则都以 `r,` 结尾。这表示我们希望 Apache 对每个列出的目录拥有读取权限。还要注意，每个规则都必须以逗号结尾。
- en: '`/srv/www/htdocs/ r,` : This means that the listed directory itself has read
    access for Apache.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/srv/www/htdocs/ r,` : 这意味着列出的目录本身对 Apache 拥有读取权限。'
- en: '`/srv/www.htdocs/* * r,` : The `* *` wildcards make this rule recursive. In
    other words, Apache can read all files in all subdirectories of this specified
    directory.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/srv/www.htdocs/* * r,` : `* *` 通配符使得这个规则是递归的。换句话说，Apache 可以读取指定目录下所有子目录中的所有文件。'
- en: '`# mod_userdir` : If installed, this Apache module allows Apache to read web
    content files from a subdirectory that''s within a user''s home directory. The
    next two lines go along with that.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`# mod_userdir` ：如果安装了该Apache模块，它允许Apache从用户主目录中的子目录读取Web内容文件。接下来的两行与此相关。'
- en: '`@{HOME}/public_html/ r,` and `@{HOME}/public_html/ r,` : The `@{HOME}` variable
    allows this rule to work with any user''s home directory. (You''ll see this variable
    defined in the `/etc/apparmor.d/tunables/home` file.)'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@{HOME}/public_html/ r,` 和 `@{HOME}/public_html/ r,`：`@{HOME}`变量允许该规则作用于任何用户的主目录。（你将在`/etc/apparmor.d/tunables/home`文件中看到这个变量的定义。）'
- en: Note that there's no specific rule that prohibits Apache from reading from other
    locations. It's just understood that anything that's not listed here is off-limits
    to the Apache web server daemon.
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，没有特定的规则禁止Apache从其他位置读取文件。只是理解为任何未在此列出的内容，Apache web服务器守护进程都无法访问。
- en: 'The `tunables` subdirectory contains files that have predefined variables.
    You can also use this directory to either define new variables or make profile
    tweaks:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`tunables`子目录包含预定义的变量文件。你还可以使用该目录来定义新变量或进行配置文件调整：'
- en: '[PRE74]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Space doesn''t permit me to show you the details of how to write your own profiles
    from scratch. Thanks to the suite of utilities that we''ll look at in the next
    section, you might never need to do that. Still, just to give you a better understanding
    about how AppArmor does what it does, the following is a chart of some example
    rules that you might find in any given profile:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 由于篇幅所限，我无法在此展示如何从头编写自己的配置文件。感谢接下来我们将要查看的一组实用工具，你可能根本不需要手动编写配置文件。不过，为了帮助你更好地理解AppArmor是如何工作的，以下是一些示例规则，它们可能出现在任何给定的配置文件中：
- en: '| **Rule** | **Explanation** |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| **规则** | **解释** |'
- en: '| `/var/run/some_program.pid rw,` | The process will have read and write privileges
    for this process ID file. |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| `/var/run/some_program.pid rw,` | 该进程将对该进程ID文件具有读写权限。 |'
- en: '| `/etc/ld.so.cache r,` | The process will have read privileges for this file.
    |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| `/etc/ld.so.cache r,` | 该进程将具有读取此文件的权限。 |'
- en: '| `/tmp/some_program.* l,` | The process will be able to create and delete
    links with the `some_program` name. |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| `/tmp/some_program.* l,` | 该进程将能够创建和删除名为`some_program`的链接。 |'
- en: '| `/bin/mount ux` | The process has executable privileges for the `mount` utility,
    which will then run unconstrained. (Unconstrained means without an AppArmor profile.)
    |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| `/bin/mount ux` | 该进程具有`mount`工具的可执行权限，随后将不受限制地运行。（不受限制意味着没有AppArmor配置文件。）
    |'
- en: Now that you know about AppArmor profiles, let's look at some basic AppArmor
    utilities.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了AppArmor配置文件，接下来我们来看一些基本的AppArmor工具。
- en: Working with AppArmor command-line utilities
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AppArmor命令行工具
- en: 'Whether or not you have all the AppArmor utilities you need will depend on
    which Linux distribution you have. On my OpenSUSE Leap workstation, the utilities
    were there out of the box. On my Ubuntu Server virtual machine, I had to install
    them myself:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 是否拥有所需的所有AppArmor工具，取决于你使用的Linux发行版。在我的OpenSUSE Leap工作站上，这些工具是开箱即用的。在我的Ubuntu
    Server虚拟机上，我则需要手动安装它们：
- en: '[PRE75]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'First, let''s look at the status of AppArmor on the Ubuntu machine. Since it''s
    a rather long output, we''ll look at it in sections. Here''s the first section:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们查看Ubuntu机器上AppArmor的状态。由于输出内容较长，我们将分段查看。下面是第一部分：
- en: '[PRE76]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The first thing to note here is that AppArmor has an **enforce** mode and a
    **complain** mode. The enforce mode that's shown here does the same job as its
    enforcing mode counterpart in SELinux. It prevents system processes from doing
    things that the active policy doesn't allow, and it logs any violations.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要注意的是，AppArmor有**enforce**模式和**complain**模式。这里显示的enforce模式与SELinux中的enforcing模式对应，执行相同的功能。它防止系统进程执行活动策略不允许的操作，并记录任何违规行为。
- en: 'Now, here''s the second section:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是第二部分：
- en: '[PRE77]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Complain mode is the same as permissive mode in SELinux. It allows processes
    to perform actions that are prohibited by the active policy, but it records those
    actions in either the `/var/log/audit/audit.log` file, or the system log file,
    depending on whether you have `auditd` installed. (Unlike Red Hat-type distributions,
    `auditd` doesn't come installed by default on Ubuntu.) You would use complain
    mode either to help with troubleshooting or to test new profiles.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '"Complain"模式与SELinux中的"permissive"模式相同。它允许进程执行活动策略禁止的操作，但会将这些操作记录在`/var/log/audit/audit.log`文件或系统日志文件中，具体取决于是否安装了`auditd`。
    （与Red Hat类发行版不同，Ubuntu默认没有安装`auditd`。）你可以使用complain模式来帮助故障排除或测试新配置文件。'
- en: Most enforce mode profiles we see here have to do with either network management
    or with `lxc` container management. Two exceptions we see are the two profiles
    for `snapd`, which is the daemon that makes the snap packaging technology work.
    The third exception is the `mysqld` profile.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到的大多数enforce模式配置文件都与网络管理或`lxc`容器管理有关。我们看到的两个例外是`snapd`的两个配置文件，`snapd`是使snap打包技术工作的重要守护进程。第三个例外是`mysqld`配置文件。
- en: Snap packages are universal binary files that are designed to work on multiple
    distributions. Snap technology is currently available for most major Linux distros.
  id: totrans-351
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Snap包是旨在适用于多个发行版的通用二进制文件。Snap技术目前已在大多数主要的Linux发行版上提供。
- en: Curiously, when you install a daemon package on Ubuntu, you'll sometimes get
    a predefined profile for that daemon and sometimes you won't. Even when a profile
    does come with the package that you've installed, it's sometimes already in enforce
    mode and sometimes isn't. For example, if you're setting up a **Domain Name Service**
    (**DNS**) server and you install the `bind9` package for it, you'll get an AppArmor
    profile that's already in enforce mode. If you're setting up a database server
    and install the `mysql-server` package, you'll also get a working profile that's
    already in enforce mode.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪的是，当你在Ubuntu上安装守护进程包时，有时会得到一个预定义的配置文件，也有时不会。即使安装的包中有配置文件，它有时已经处于enforce模式，也有时没有。例如，如果你正在设置**域名服务**（**DNS**）服务器并安装了`bind9`包，你将得到一个已经处于enforce模式的AppArmor配置文件。如果你正在设置一个数据库服务器并安装`mysql-server`包，你也会得到一个已经处于enforce模式的有效配置文件。
- en: 'But, if you''re setting up a database server and you prefer to install the
    `mariadb-server` instead of `mysql-server`, you''ll get an AppArmor profile that''s
    completely disabled and that can''t be enabled. When you look in the `usr.sbin.mysqld`
    profile file that gets installed with the `mariadb-server` package, you''ll see
    this:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你正在设置一个数据库服务器并且更倾向于安装`mariadb-server`而不是`mysql-server`，你会得到一个完全禁用且无法启用的AppArmor配置文件。当你查看随着`mariadb-server`包安装的`usr.sbin.mysqld`配置文件时，你会看到如下内容：
- en: '[PRE78]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Okay, so apparently AppArmor isn't good for everything. (And whoever wrote this
    needs to take spelling lessons.)
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，显然AppArmor并不适合所有情况。（而且写这个的人应该去上一堂拼写课。）
- en: 'And then there''s Samba, which is a special case in more ways than one. When
    you install the `samba` package to set up a Samba server, you don''t get any AppArmor
    profiles at all. For Samba and several other different applications as well, you''ll
    need to install AppArmor profiles separately:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是Samba，它在多个方面都是一个特例。当你安装`samba`包来设置Samba服务器时，你根本不会得到任何AppArmor配置文件。对于Samba和其他一些应用程序，你需要单独安装AppArmor配置文件：
- en: '[PRE79]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'When you install these two profile packages, the profiles will all be in **complain**
    mode. That''s okay, because we have a handy utility to put them into **enforce**
    mode. Since Samba has two different daemons that we need to protect, there are
    two different profiles that we''ll need to place into **enforce** mode:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 当你安装这两个配置文件包时，所有配置文件都会处于**complain**模式。这没关系，因为我们有一个方便的工具可以将它们切换到**enforce**模式。由于Samba有两个不同的守护进程需要保护，因此我们需要将两个不同的配置文件切换到**enforce**模式：
- en: '[PRE80]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'We''ll use `aa-enforce` to activate **enforce** mode for both of these profiles:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`aa-enforce`来激活这两个配置文件的**enforce**模式：
- en: '[PRE81]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: To use `aa-enforce`, you first need to specify the path to the executable file
    of the process that you want to protect. (Fortunately, you normally won't even
    have to look that up, since the path name is normally part of the profile filename.)
    The last part of the command is the name of the profile. Note that you'll need
    to restart the Samba daemon to get this AppArmor protection to take effect.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`aa-enforce`，首先需要指定你想要保护的进程的可执行文件路径。（幸运的是，你通常不需要自己查找路径，因为路径名通常是配置文件文件名的一部分。）命令的最后部分是配置文件的名称。请注意，你需要重启Samba守护进程才能使这个AppArmor保护生效。
- en: 'Placing a profile into other modes is just as easy. All you have to do is to
    replace the `aa-enforce` utility with the utility for the mode that you need to
    use. The following is a chart of utilities for the other modes:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 将配置文件切换到其他模式同样简单。你只需将`aa-enforce`工具替换为你需要使用的模式工具。以下是其他模式的工具列表：
- en: '| **Command** | **Explanation** |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **说明** |'
- en: '| `aa-audit` | Audit mode is the same as enforce mode, except that allowed
    actions get logged, as well as actions that have been blocked. (Enforce mode only
    logs actions that have been blocked.) |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| `aa-audit` | 审计模式与执行模式相同，只是允许的操作也会被记录，而不仅仅是被阻止的操作。（执行模式只记录被阻止的操作。） |'
- en: '| `aa-disable` | This completely disables a profile. |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| `aa-disable` | 完全禁用一个配置文件。 |'
- en: '| `aa-complain` | This places a profile into complain mode. |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| `aa-complain` | 将配置文件置于告警模式。 |'
- en: Okay, we're moving right along. You now know about basic AppArmor commands.
    Next up, we'll look at troubleshooting AppArmor problems.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们继续前进。现在你已经了解了基本的AppArmor命令。接下来，我们将学习如何排查AppArmor的问题。
- en: Troubleshooting AppArmor problems
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排查AppArmor问题
- en: When I wrote the first edition of this book back in 2017, I sat here racking
    my brains for several days, trying to come up with a good troubleshooting scenario.
    It turns out that I didn't need to. The Ubuntu folk handed me a good scenario
    on a silver platter in the form of a buggy Samba profile. At the time, I was working
    with Ubuntu 16.04, which had the original version of the bug. The original bug
    got fixed for Ubuntu 18.04, but was replaced by two others. In Ubuntu 22.04, the
    profile is finally bug-free. I still want to show you how to troubleshoot AppArmor
    problems though, so I’ve left the 16.04 and 18.04 write-ups intact. (It’s still
    possible to download and install Ubuntu 16.04 and 18.04, so you can create some
    virtual machines to follow along if you’d like. I’ll leave that decision up to
    you.)
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在2017年写这本书的第一版时，我在这里绞尽脑汁地坐了好几天，试图想出一个好的故障排除场景。结果我发现我根本不需要这样做。Ubuntu的开发团队以一个有问题的Samba配置文件，给我提供了一个现成的场景。当时，我使用的是Ubuntu
    16.04，它有这个bug的原始版本。这个bug在Ubuntu 18.04中被修复了，但又被两个新问题替代了。在Ubuntu 22.04中，配置文件终于没有问题了。尽管如此，我还是想展示一下如何排查AppArmor问题，所以我保留了16.04和18.04的故障排除写作部分。（你仍然可以下载并安装Ubuntu
    16.04和18.04，如果你愿意，可以创建一些虚拟机跟着做。我把这个决定留给你自己。）
- en: Troubleshooting an AppArmor profile – Ubuntu 16.04
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排查AppArmor配置文件问题 —— Ubuntu 16.04
- en: 'As you''ve just seen, I used `aa-enforce` to put the two Samba-related profiles
    into enforce mode. But watch what happens now when I try to restart Samba in order
    to get the profiles to take effect:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你刚刚看到的，我使用了`aa-enforce`将两个与Samba相关的配置文件设置为执行模式。但看看当我尝试重启Samba以使配置文件生效时会发生什么：
- en: '[PRE82]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Okay, that''s not good. Looking at the status for the `smbd` service, I see
    the following:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这不太好。查看`smbd`服务的状态，我看到了以下信息：
- en: '[PRE83]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The important things to note here are all the places where some form of the
    word `fail` shows up.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的重要点是，所有出现`fail`一词的地方。
- en: 'The original error message said to use `journalctl -xe` to view the log message.
    You can do that if you like, or you can just use either `less` or `tail` to look
    in the `/var/log/syslog` log file:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 原始错误信息建议使用`journalctl -xe`查看日志信息。如果你愿意，可以这样做，或者你也可以使用`less`或`tail`直接查看`/var/log/syslog`日志文件：
- en: '[PRE84]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: So, we see `apparmor=DENIED`. Obviously, Samba is trying to do something that
    the profile doesn't allow. Samba needs to write temporary files to the `/run/samba/msg.lock`
    directory, but it isn't allowed to. I'm guessing that the profile lacks a rule
    that allows that to happen.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们看到`apparmor=DENIED`。显然，Samba正在尝试做一些配置文件不允许的事情。Samba需要写入临时文件到`/run/samba/msg.lock`目录，但它没有权限。我猜测配置文件缺少允许该操作的规则。
- en: 'But even if this log file entry gave me no clue at all, I could just cheat,
    using a troubleshooting technique that has served me well for many years. That
    is, I could just copy and paste the error message from the log file into my favorite
    search engine. Pretty much every time I''ve ever done that, I''ve found that other
    people before me have already had the same problem:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 但即便这个日志文件条目没有给我任何线索，我也可以作弊，使用一种多年来一直非常有效的故障排除技巧。也就是说，我可以将日志文件中的错误信息复制粘贴到我最喜欢的搜索引擎中。几乎每次我这么做时，我都能发现之前有人已经遇到过相同的问题：
- en: '![](img/file67.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file67.png)'
- en: 'Okay, I didn''t paste in the entire error message, but I did paste in enough
    for DuckDuckGo to work with. And lo and behold, it worked:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我没有粘贴完整的错误信息，但我粘贴了足够的信息供DuckDuckGo使用。果不其然，它有效：
- en: '![](img/file68.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file68.png)'
- en: 'Hmmm, it looks like my profile file might be missing an important line. So,
    I''ll open the `usr.sbin.smbd` file and place this line at the end of the rule
    set:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，看起来我的配置文件可能缺少了一个重要的行。因此，我将打开`usr.sbin.smbd`文件，并在规则集的末尾添加这一行：
- en: '[PRE85]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'This line will allow read and write access to everything in the `/run/samba/`
    directory. After making the edit, I''ll need to reload this profile because it''s
    already been loaded with `aa-enforce`. For this, I''ll use the `apparmor_parser`
    utility:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行将允许对 `/run/samba/` 目录中的所有内容进行读写访问。进行编辑后，我需要重新加载这个配置文件，因为它已经通过 `aa-enforce`
    被加载了。为此，我将使用 `apparmor_parser` 工具：
- en: '[PRE86]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'All you need to do is use the `-r` option for reloading and list the name of
    the profile file. Now, let''s try to restart Samba:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要使用 `-r` 选项进行重新加载，并列出配置文件的名称。现在，让我们尝试重启 Samba：
- en: '[PRE87]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: And it works! The two Samba profiles are in enforce mode, and Samba finally
    starts up just fine.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！这两个 Samba 配置文件已经处于强制模式，Samba 最终成功启动了。
- en: The odd part about this is that I had this same problem with both Ubuntu 16.04
    and Ubuntu 17.10\. So, the bug has been there for a long time.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪的是，我在 Ubuntu 16.04 和 Ubuntu 17.10 中也遇到了相同的问题。因此，bug 已经存在很长时间了。
- en: Troubleshooting an AppArmor profile – Ubuntu 18.04
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 故障排除 AppArmor 配置文件 – Ubuntu 18.04
- en: As I said before, the bug in Ubuntu 16.04 got replaced by two others in Ubuntu
    18.04\. So, let’s look at that.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所说，Ubuntu 16.04 中的 bug 被 Ubuntu 18.04 中的两个新 bug 替代了。我们来看看具体情况。
- en: 'I installed Samba and the additional AppArmor profiles on my Ubuntu 18.04 VM,
    and then set the two Samba profiles into **enforce** mode, the same way that I''ve
    already shown you for Ubuntu 16.04\. When I tried to restart Samba, the restart
    failed. So, I looked in the `/var/log/syslog` file and found these two messages:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我在我的 Ubuntu 18.04 虚拟机上安装了 Samba 和额外的 AppArmor 配置文件，然后将两个 Samba 配置文件设置为 **强制**
    模式，就像我之前在 Ubuntu 16.04 中所展示的那样。当我尝试重启 Samba 时，重启失败了。于是，我查看了 `/var/log/syslog`
    文件，并发现了这两条消息：
- en: '[PRE88]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Now that we know how to read the AppArmor error messages, this is easy to figure
    out. It looks like we need to allow the SMBD service to have `net_admin` capabilities
    so that it can properly access the network. And, it looks like we also need to
    add a rule to allow SMBD to write to the `/run/systemd/notify` socket file. So,
    let's edit the `/etc/apparmor.d/usr.sbin.smbd` file and add the two missing lines.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何读取 AppArmor 错误信息了，这就容易解决了。看起来我们需要允许 SMBD 服务拥有 `net_admin` 权限，以便它能够正确访问网络。而且，看起来我们还需要添加一条规则，允许
    SMBD 写入 `/run/systemd/notify` 套接字文件。所以，让我们编辑 `/etc/apparmor.d/usr.sbin.smbd` 文件并添加这两行缺失的内容。
- en: 'First, in the stanza with all of the `capability` lines, I''ll add this line
    to the bottom:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在包含所有 `capability` 行的部分，我将在底部添加这一行：
- en: '[PRE89]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Then, at the bottom of the rules list, just under the `/var/spool/samba/**
    rw,` line, I''ll add this line:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在规则列表的底部，`/var/spool/samba/** rw,` 这一行下方，我将添加这一行：
- en: '[PRE90]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: It's now just a matter of reloading the policy and restarting the SMBD service,
    the same as we did for Ubuntu 16.04.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只需重新加载策略并重启 SMBD 服务，和我们在 Ubuntu 16.04 中所做的相同。
- en: Hands-on lab – Troubleshooting an AppArmor profile
  id: totrans-402
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实操实验室 – 故障排除 AppArmor 配置文件
- en: 'Perform this lab on an Ubuntu 18.04 VM. Carry out the following steps for troubleshooting:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 18.04 虚拟机上执行此实验。按照以下步骤进行故障排除：
- en: 'Install the AppArmor utilities and the extra profiles:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 AppArmor 工具和额外的配置文件：
- en: '[PRE91]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Install Samba and verify that it''s running:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Samba 并验证它是否在运行：
- en: '[PRE92]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Set the two aforementioned Samba policies to enforce mode and try to restart
    Samba:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将之前提到的两个 Samba 策略设置为强制模式并尝试重启 Samba：
- en: '[PRE93]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Note that Samba should fail to restart. (It will take quite a while before it
    finally errors out, so be patient.)
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，Samba 应该无法重启。（它会花费相当长的时间才最终出错，因此请耐心等待。）
- en: Look in the `/var/log/syslog` file to see if you can spot the problem.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看 `/var/log/syslog` 文件，看看能否找到问题。
- en: 'Edit the `/etc/apparmor.d/usr.sbin.smbd` file. In the `capability` stanza,
    add this line:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `/etc/apparmor.d/usr.sbin.smbd` 文件。在 `capability` 部分，添加这一行：
- en: '[PRE94]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'At the bottom of the rules sections, under the `/var/spool/samba/** rw,` line,
    add this line:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在规则部分的底部，`/var/spool/samba/** rw,` 这一行下方，添加这一行：
- en: '[PRE95]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Save the file and reload the policy:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并重新加载策略：
- en: '[PRE96]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'As before, try to restart the Samba service, and verify that it started properly:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如之前所述，尝试重启 Samba 服务，并验证它是否正常启动：
- en: '[PRE97]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: End of lab.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验结束。
- en: Okay, you've just explored the basics of troubleshooting buggy AppArmor profiles.
    This is good knowledge to have, especially when your organization needs to deploy
    its own custom profiles that could end up being just as buggy.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你刚刚探索了故障排除有缺陷的 AppArmor 配置文件的基础知识。这是非常有用的知识，尤其是在你的组织需要部署自己定制的配置文件时，这些配置文件可能也会存在同样的问题。
- en: Troubleshooting Samba problems in Ubuntu 22.04
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 故障排除 Ubuntu 22.04 中的 Samba 问题
- en: I told you before that the buggy AppArmor profile for Samba has been fixed in
    Ubuntu 22.04\. So, hallelujah for that, right? Well, not so fast. As I’m writing
    this in November, 2022, there’s now a bug in certain versions of Samba that prevents
    Samba from starting if the AppArmor profile is enabled.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前告诉过你，Samba 的 AppArmor 配置文件 bug 在 Ubuntu 22.04 中已修复。那么，万岁对吧？嗯，别急。就在我写这篇文章的
    2022 年 11 月，某些版本的 Samba 现在出现了一个 bug，导致如果启用了 AppArmor 配置文件，Samba 无法启动。
- en: This bug was also in SUSE 15.3, but has been fixed in SUSE 15.4\. It has also
    been fixed in Ubuntu 22.10\. By the time you read this, it might also have gotten
    fixed in Ubuntu 22.04.
  id: totrans-424
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个 bug 在 SUSE 15.3 中也存在，但在 SUSE 15.4 中已经修复。它在 Ubuntu 22.10 中也已修复。等你读到这篇文章时，它可能也已在
    Ubuntu 22.04 中修复。
- en: 'First, install the `samba`, `apparmor-profiles`, `apparmor-profiles-extra`,
    and `apparmor-util` packages, as I described in the preceding sections. Doing
    a `systemctl status smbd` command should show that the Samba service is running
    normally. Next, we’ll set the two Samba profiles to **enforce** mode:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照我之前描述的步骤安装 `samba`、`apparmor-profiles`、`apparmor-profiles-extra` 和 `apparmor-util`
    包。执行 `systemctl status smbd` 命令应该会显示 Samba 服务正常运行。接下来，我们将把两个 Samba 配置文件设置为 **强制**
    模式：
- en: '[PRE98]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'This time, you won’t see any error message until you do `systemctl status smbd`:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，在执行 `systemctl status smbd` 命令之前，你不会看到任何错误信息：
- en: '[PRE99]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Unlike before, searching through the system log file won’t tell you anything.
    If you search through the `usr.sbin.smbd` file, you’ll see no problems at all.
    Instead, the problem this time is with the print service function of the Samba
    service. Fortunately, it’s an easy fix, as long as you don’t mind doing without
    Samba print sharing. Just open the `/etc/samba/smb.conf` file in your text editor,
    and add the following line to the `[global]` section:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前不同的是，系统日志文件中的搜索不会告诉你任何信息。如果你搜索 `usr.sbin.smbd` 文件，你将根本看不到任何问题。相反，这次的问题出在
    Samba 服务的打印服务功能上。幸运的是，这是一个容易修复的问题，只要你不介意没有 Samba 打印共享。只需在文本编辑器中打开 `/etc/samba/smb.conf`
    文件，并在 `[global]` 部分添加以下一行：
- en: '[PRE100]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: The Samba service should now start up without issues.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: Samba 服务现在应该能够顺利启动。
- en: Now, I have to confess that I don’t know what the exact impact of this directive
    will be. The `smb.conf` man page says that printing might be impacted for Windows
    NT/2000 systems, but it doesn’t say anything about how it affects newer versions
    of Windows. At any rate, I’ll leave this experimentation up to you if you really
    need Samba print server support.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我必须承认，我并不知道这个指令的具体影响是什么。`smb.conf` 的 man 页面上说打印可能会影响到 Windows NT/2000 系统，但并没有说明它对新版
    Windows 的影响。不管怎样，如果你真的需要 Samba 打印服务器支持，我就把这部分实验留给你自己去做。
- en: All right, enough of this Samba business. Let’s move on to something that’s
    evil, but also fun.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，够了，Samba 的事就到此为止。让我们继续讨论一些既邪恶又有趣的事情吧。
- en: Exploiting a system with an evil Docker container
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用恶意 Docker 容器攻击系统
- en: You might think that containers are somewhat like virtual machines, and you'd
    be partly correct. The difference is that a virtual machine runs an entire self-contained
    operating system, and a container doesn't. Instead, a container comes with the
    guest's operating system's package management and libraries, but it uses the kernel
    resources of the host operating system. That makes containers much more lightweight.
    So, you can pack more containers on a server than you can virtual machines, which
    helps cut down on hardware and energy costs. Containers have been around for quite
    a few years, but they didn't become all that popular until Docker came on the
    scene.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为容器有点像虚拟机，你部分是对的。不同之处在于，虚拟机会运行一个完整的自包含操作系统，而容器则不会。相反，容器带有来宾操作系统的包管理和库，但它使用宿主操作系统的内核资源。这使得容器更加轻量化。因此，你可以在一台服务器上放置更多的容器，而不像虚拟机那样，这有助于减少硬件和能源成本。容器已经存在了很多年，但直到
    Docker 出现，容器才变得流行起来。
- en: But, the very thing that makes containers so lightweight—the fact that they
    use the host machine's kernel resources—can also make for some interesting security
    problems. Using some form of MAC is one thing you can do to help mitigate these
    problems.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，正是容器使用宿主机内核资源的特点使其如此轻量化——这也可能带来一些有趣的安全问题。采用某种形式的 MAC（强制访问控制）是你可以做的一件事情，来帮助缓解这些问题。
- en: One problem is that, to run Docker, a person needs either to have the proper
    `sudo` privileges, or be a member of the `docker` group. Either way, anyone who
    logs into a container will be at the root command prompt for that container. By
    creating a container that mounts the root filesystem of the host machine, a non-privileged
    user can take complete control of the host system.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – Creating an evil Docker container
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To demonstrate, I''ll use a CentOS 7 VM in order to show how SELinux can help
    protect you. (I''m using CentOS 7 because the RHEL 8/9-type distros use `podman`
    instead of `docker`, which won’t allow this exploit to happen.) Also, you''ll
    need to do this from the local console of the VM because the root user will be
    locked out from logging in via SSH (you''ll see what I mean in just a bit):'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: 'On your CentOS 7 VM, install Docker and enable the daemon:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Create the `docker` group.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Create a user account for Katelyn, my teenage calico kitty, adding her to the
    `docker` group at the same time:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Log out of your own user account and log back in as Katelyn.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Have Katelyn create a Debian container that mounts the `/` partition of the
    host machine in the `/homeroot` mountpoint, and that opens a Bash shell session
    for the root user:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Note how Katelyn has done this without having to use any `sudo` privileges.
    Also note that there are no blank spaces in the `/:/homeroot` part.
  id: totrans-449
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The goal is for Katelyn to make herself the root user on the host machine.
    In order to do that, she''ll need to edit the `/etc/passwd` file to change her
    own user ID to `0`. To do that, she''ll need to install a text editor. (Katelyn
    prefers vim, but you can use nano if you really want to.) While still within the
    Debian container, run the following:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Have Katelyn `cd` into the host machine''s `/etc/` directory and attempt to
    open the `passwd` file in the text editor:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: She won't be able to do it, because SELinux prevents it.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `exit` to exit the container.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log out from Katelyn's account and then log back into your own account.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place SELinux into permissive mode:'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Log out from your own account and log back in as Katelyn.
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps* *5* through *7*. This time, Katelyn will be able to open the
    `/etc/passwd` file in her text editor.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `passwd` file, have Katelyn find the line for her own user account.
    Have her change her user ID number to `0`. The line should now look something
    like this:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Save the file, and type `exit` to have Katelyn exit the container. Have Katelyn
    log out of the virtual machine, and then log back in. This time, you'll see that
    she has successfully logged into the root user shell.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: End of lab
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Okay, you've just seen one of Docker's security weaknesses and how SELinux can
    protect you from it. Since Katelyn doesn't have `sudo` privileges, she can't put
    SELinux into permissive mode, which prevents her from doing any Docker mischief.
    On the RHEL 8/9-type distros, things are even better. Even with SELinux in either
    permissive mode or completely disabled, you still won’t be able to edit the `passwd`
    file from within a container on either of your AlmaLinux machines. That’s because
    RHEL 8/9 and their offspring use `podman`, which is Red Hat’s drop-in replacement
    for `docker`. `podman` has several advantages over docker, mainly in the area
    of host machine security.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你刚刚看到了 Docker 的一个安全弱点，以及 SELinux 如何保护你免受此类问题的影响。由于凯特琳没有`sudo`权限，她无法将 SELinux
    设置为宽容模式，这阻止了她在 Docker 中进行任何恶意操作。在 RHEL 8/9 类型的发行版上，情况甚至更好。即使 SELinux 处于宽容模式或完全禁用状态，你仍无法在
    AlmaLinux 机器上的任何容器内编辑`passwd`文件。这是因为 RHEL 8/9 及其衍生版本使用`podman`，这是 Red Hat 替代`docker`的工具。`podman`在主机安全性方面比
    docker 有多个优势。
- en: So now you're wondering if AppArmor on Ubuntu helps us with this. Well, not
    by default, because there's no pre-built profile for the Docker daemon. When you
    run Docker on an Ubuntu machine, it automatically creates a Docker profile for
    the container in the `/tmpfs/` directory, but it really doesn't do much. I tested
    this procedure on an Ubuntu 18.04 VM with AppArmor enabled, and Katelyn was able
    to do her evil deed just fine. (Note that `podman` is now also available for non-Red
    Hat Linux distros, including Ubuntu.)
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在你可能在想，AppArmor 在 Ubuntu 上是否对我们有帮助。嗯，并非默认情况下，因为 Docker 守护程序没有预先构建的 AppArmor
    配置文件。当你在 Ubuntu 机器上运行 Docker 时，它会自动在`/tmpfs/`目录中为容器创建一个 Docker 配置文件，但实际上没有多大作用。我在启用
    AppArmor 的 Ubuntu 18.04 虚拟机上测试了此过程，并且凯特琳能够很好地完成她的恶意操作。（请注意，现在`podman`也可用于非 Red
    Hat Linux 发行版，包括 Ubuntu。）
- en: Earlier in this chapter, I said that I would refrain from stating which of these
    two MAC systems I prefer. But, I lied. If you haven't figured it out by now, I'm
    definitely a big fan of SELinux, because it provides better out-of-the-box protection
    than AppArmor does. If you choose to use Ubuntu, then plan on writing a new AppArmor
    policy any time that your development team deploys a new application.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的早些时候，我说过我不会表明我更喜欢这两个 MAC 系统中的哪一个。但其实我撒了个谎。如果你现在还没发现的话，我绝对是 SELinux 的忠实粉丝，因为它提供比
    AppArmor 更好的开箱即用保护。如果你选择使用 Ubuntu，那么计划在你的开发团队部署新应用程序时编写新的 AppArmor 策略。
- en: '**Tip**'
  id: totrans-468
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-469
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you’d rather not deal with the complexities of creating AppArmor profiles,
    you can instead place security directives in the systemd unit files for your services.
    You might find that this is a bit easier, and it can give you much of the same
    protection that AppArmor would. To read all about it, check out my other book,
    *Linux Service Management Made Easy with systemd*.
  id: totrans-470
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你不想处理创建 AppArmor 配置文件的复杂性，你可以在你的服务的 systemd 单元文件中放置安全指令。你可能会觉得这样做更容易一些，并且可以提供与
    AppArmor 类似的保护。详细内容请参阅我的另一本书，*Linux Service Management Made Easy with systemd*。
- en: I do believe that this wraps things up for our discussion of MAC.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 我确信这就是我们关于 MAC 讨论的总结。
- en: Summary
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the basic principles of MAC and compared two different
    MAC systems. We saw what SELinux and AppArmor are and how they can help safeguard
    your systems against malicious actors. We then looked at the basics of how to
    use them and the basics of how to troubleshoot them. We also saw that, even though
    they're both meant to do the same job, they work in vastly different ways. We
    wrapped things up by showing you a practical example of how SELinux can protect
    you from evil Docker containers.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了 MAC 的基本原理，并比较了两种不同的 MAC 系统。我们了解了 SELinux 和 AppArmor 的作用，以及它们如何帮助保护系统免受恶意行为的侵害。然后我们看了如何基本使用它们以及如何进行故障排除。我们还看到，尽管它们都是为了完成同样的工作，但它们的工作方式却大不相同。最后，我们通过一个实际的例子展示了
    SELinux 如何保护你免受恶意 Docker 容器的侵害。
- en: Whether you're working with AppArmor or with SELinux, you'll always want to
    thoroughly test a new system in either **complain** or **permissive** mode before
    you put it into production. Make sure that what you want to protect gets protected,
    while at the same time what you want to allow gets allowed. After you place the
    machine into production, don't just assume that you can automatically change a
    policy setting every time you see a policy violation occur. It could be that nothing
    is wrong with your MAC setup and that MAC is just doing its job, protecting you
    from the bad guys.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: There's a lot more to both of these topics than we can cover here. Hopefully,
    though, I've given you enough to whet your appetite and help you out in your day-to-day
    duties.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at more techniques for hardening the kernel
    and isolating processes. I'll see you there.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-477
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which of the following would represent a MAC principle?
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. You can set permissions on your own files and directories however you need
    to.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: B. You can allow any system process to access whatever you need it to access.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: C. System processes can only access whichever resources MAC policies allow them
    to access.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: D. MAC will allow access, even if DAC doesn't.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: How does SELinux work?
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. It places a label on each system object and allows or denies access according
    to what SELinux policies say about the labels.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: B. It simply consults a profile for each system process to see what the process
    is allowed to do.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: C. It uses extended attributes that an administrator would set with the `chattr`
    utility.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: D. It allows each user to set his or her own MACs.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: Which of these utilities would you use to fix an incorrect SELinux security
    context?
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `chattr`
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: B. `chcontext`
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: C. `restorecon`
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: D. `setsebool`
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: For normal day-to-day administration of a Red Hat-type server, which of the
    following aspects of a security context would an administrator be most concerned
    about?
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. user
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: B. role
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: C. type
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: D. sensitivity
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: You’ve set up a new directory that a particular daemon wouldn’t normally access,
    and you want to permanently allow that daemon to access that directory. Which
    of the following utilities would you use to do that?
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `chcon`
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: B. `restorecon`
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: C. `setsebool`
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: D. `semanage`
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following constitutes one difference between SELinux and AppArmor?
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. With SELinux, you have to install or create a policy profile for each system
    process that you need to control.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: B. With AppArmor, you have to install or create a policy profile for each system
    process that you need to control.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: C. AppArmor works by applying a label to each system object, while SELinux works
    by simply consulting a profile for each system object.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: D. It's much easier to write a policy profile for SELinux, because the language
    is easier to understand.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: Which `/etc/apparmor.d/` subdirectory contains files with pre-defined variables?
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `tunables`
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: B. `variables`
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: C. `var`
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: D. `functions`
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following utilities would you use to enable an AppArmor policy?
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `aa-enforce`
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: B. `aa-enable`
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: C. `set-enforce`
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: D. `set-enable`
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: You've already enabled an AppArmor policy for a daemon, but you now need to
    change the policy. Which utility would you use to reload the modified policy?
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `aa-reload`
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: B. `apparmor_reload`
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: C. `aa-restart`
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: D. `apparmor_parser`
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: You're testing a new AppArmor profile and you want to find any possible problems
    before you place the server into production. Which AppArmor mode would you use
    to test that profile?
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. permissive
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: B. enforce
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: C. testing
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: D. complain
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-528
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SELinux:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: 'Accessing SELinux policy documentation: [https://www.redhat.com/sysadmin/accessing-selinux-policy-documentation](https://www.redhat.com/sysadmin/accessing-selinux-policy-documentation)'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using SELinux: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/using_selinux/index](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/using_selinux/index)'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SELinux System Administration-Third Edition: [https://www.packtpub.com/product/selinux-system-administration-third-edition/9781800201477](https://www.packtpub.com/product/selinux-system-administration-third-edition/9781800201477)'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SELinux Coloring book: [https://opensource.com/business/13/11/selinux-policy-guide](https://opensource.com/business/13/11/selinux-policy-guide)'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux Service Management Made Easy with systemd: [https://www.packtpub.com/product/linux-service-management-made-easy-with-systemd/9781801811644?_ga=2.122984843.1038813545.1668463819-58585121.1668463819](https://www.packtpub.com/product/linux-service-management-made-easy-with-systemd/9781801811644?_ga=2.122984843.1038813545.1668463819-58585121.1668463819)'
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AppArmor:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: 'Ubuntu AppArmor wiki: [https://wiki.ubuntu.com/AppArmor](https://wiki.ubuntu.com/AppArmor)'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How to create an AppArmor profile: [https://tutorials.ubuntu.com/tutorial/beginning-apparmor-profile-development#0](https://tutorials.ubuntu.com/tutorial/beginning-apparmor-profile-development#0)'
  id: totrans-537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The comprehensive guide to AppArmor: [https://medium.com/information-and-technology/so-what-is-apparmor-64d7ae211ed](https://medium.com/information-and-technology/so-what-is-apparmor-64d7ae211ed)'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Samba print server bug: [https://www.reddit.com/r/openSUSE/comments/q9cpcc/samba_share_doesnt_work_since_snapshot_20211012/](https://www.reddit.com/r/openSUSE/comments/q9cpcc/samba_share_doesnt_work_since_snapshot_20211012/)'
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers
  id: totrans-540
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: C
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

["```\nls -l /etc | less\n```", "```\nrm {report,new-report}\n```", "```\ntouch file{1..5}\n```", "```\nrm file{1..5}\n```", "```\nMYVAR=sysadmin; echo $MYVAR\n```", "```\nprintenv > ~/shell_variables\n```", "```\n#!/bin/bash\n```", "```\n#!/bin/bash\nwhoami\nwho\ndate\nuptime\n```", "```\n$ basic-script.sh\n```", "```\n$ ./basic-script.sh\n```", "```\n$ chmod u+x basic-script.sh\n```", "```\nman expr\n```", "```\nvar=$(echo \"option; expression\" | bc)\n```", "```\nusernames=(\"paul\" \"janet\" \"mike\" \"john\" \"anna\" \"martha\")\n```", "```\necho ${usernames[2]}\n```", "```\necho ${usernames[*]} or echo ${usernames[@]}\n```", "```\necho ${#usernames[@]} or echo ${#usernames[*]}\n```", "```\nusernames+=(\"alex\")\n```", "```\nusernames[1]=\"zack\"\n```", "```\ndeclare -a array_name\n```", "```\ndeclare -A array_name\n```", "```\ndeclare -A linux_distros=( [KDE]=\"openSUSE\" [GNOME]=\"Fedora\" [Xfce]=\"Debian\" [Cinnamon]=\"Mint\" )\n```", "```\necho ${linux_distros[@]}\n```", "```\necho ${!linux_distros[@]}\n```", "```\nprintf FORMAT [ARGUMENT] …\n```", "```\n    if [condition]\n    then\n         commands\n    fi\n    ```", "```\n    if [condition]\n    then\n         commands\n    else\n         commands\n    fi\n    ```", "```\nfor var in list\ndo\n     commands\ndone\n```", "```\nwhile condition\ndo\n     commands\ndone\n```", "```\nuntil condition\ndo\n     commands\ndone\n```", "```\nfunction name {\n     commands\n}\n```", "```\nname() {\n     commands\n}\n```", "```\nsed OPTIONS… [SCRIPT] [FILE…]\n```", "```\nsed 's/regex/replacement/flag'\n```", "```\n    #) character, represented by the ^# characters inside the command. Those are the comments inside the file. We also use the g flag to specify that the operation is global for that file. The following is part of the output provided by the command. Use it on your Ubuntu system and analyze your output as well:\n    ```", "```\nawk '/search pattern 1/ {actions} /search pattern 2/ {actions}' file\n```", "```\nsudo dpkg -l | awk '{print $2}' > package-list\n```", "```\nproducer.sh | consumer.sh\n```", "```\nif [ -t 0 ]\n```", "```\nsudo apt install netcat\n```", "```\nsudo dnf install nmap\n```", "```\nnc -lU \"${SOCKET}\"\n```", "```\nsudo dnf update -y\n```", "```\n%wheel  ALL=(ALL)       NOPASSWD: ALL\n```", "```\n00 23 * * 0 packt /home/packt/update_script.sh\n```", "```\nsudo crontab -u packt -l\n```", "```\n00 23 * * 0 packt /home/packt/update_script.sh > /dev/null 2>&1\n```", "```\n    passgen script without using the full path.\n    ```", "```\n    rpmdevtools package. We can install it using the following command:\n\n    ```", "```\n\n    This will install all additional packages and dependencies to set up the packaging workspace.\n    ```", "```\n    rpmbuild directory and sub-directories inside your home directory. The new rpmbuild directory has the following structure:\n    ```", "```\n    SPEC file by running the rpmdev-newspec command from inside the ~/rpmbuild/SPECS directory:\n\n    ```", "```\n\n    ```", "```\n    .rpm file was created. We can check this at ~/rpmbuild/RPMS/, where we will have a new directory based on the CPU architecture. In our case, we will have a new noarch directory that contains the .rpm file for our password generator. The following is the output:\n    ```"]
["```\n~]# yum install -y python-httplib2 python-jinja2 python-keyczar python-paramiko python-setuptools PyYAML\n\n```", "```\n    ~]$ curl -o /tmp/ansible-latest.tar.gz http://releases.ansible.com/ansible/ansible-latest.tar.gz\n     % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n     Dload  Upload   Total   Spent    Left  Speed\n    100  905k  100  905k    0     0   870k      0  0:00:01  0:00:01 --:--:--  870k\n    ~]$\n\n    ```", "```\n    ~]# tar zxf /tmp/ansible-latest.tar.gz -C /opt/\n\n    ```", "```\n    ~]# ln -s /opt/ansible-1.9.2 /opt/ansible\n\n    ```", "```\n    ~]# cat << EOF > /etc/profile.d/ansible.sh\n    # Ansible-related stuff\n    export ANSIBLE_HOME=/opt/ansible\n    export PATH=\\${PATH-\"\"}:${ANSIBLE_HOME}/bin\n    export MANPATH=\\${MANPATH-\"\"}:${ANSIBLE_HOME}/docs/man\n    export PYTHONPATH=\\${PYTHONPATH-\"\"}:${ ANSIBLE_HOME}/lib\n    EOF\n    ~]#\n\n    ```", "```\n    ~]# . /etc/profile.d/ansible.sh\n\n    ```", "```\n    ~]# /etc/cron.daily/man-db.cron\n\n    ```", "```\n    ~]# yum install -y git\n\n    ```", "```\n    ~]# cd /opt\n    ~]# git clone git://github.com/ansible/ansible.git --recursive\n\n    ```", "```\n    ~]# cat << EOF > /etc/profile.d/ansible.sh\n    # Ansible-related stuff\n    export ANSIBLE_HOME=/opt/ansible\n    export PATH=\\${PATH-\"\"}:${ANSIBLE_HOME}/bin\n    export MANPATH=\\${MANPATH-\"\"}:${ANSIBLE_HOME}/docs/man\n    export PYTHONPATH=\\${PYTHONPATH-\"\"}:${ ANSIBLE_HOME}/lib\n    EOF\n    ~]#\n\n    ```", "```\n    ~]# . /etc/profile.d/ansible.sh\n\n    ```", "```\n    ~]# /etc/cron.daily/man-db.cron\n\n    ```", "```\n    ~]# yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n\n    ```", "```\n    ~]# yum install -y ansible\n\n    ```", "```\n~]# git pull --release\n~]# git submodule update --init --recursive\n\n```", "```\n    ~]# cat << EOF >> /etc/ansible/hosts\n    localhost         ansible_connection=local\n    srv1.domain.tld   ansible_connection=ssh ansible_ssh_user=root\n\n    [mail]\n    mail[01..50].domain.tld\n\n    [mail:vars]\n    dns_servers=[ '8.8.8.8', '8.8.4.4' ]\n    mail_port=25\n    EOF\n    ~]#\n\n    ```", "```\n    -]# cat << EOF >> ~/inventory.py\n    #!/usr/bin/python -tt\n    # -*- coding: utf-8 -*-\n    # vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n    import json\n\n    def main():\n     inventory = {\n     '_meta': {\n     'hostvars': {\n     'localhost': {\n     'ansible_connection': 'local' },\n     'srv1.domain.tld': {\n     'ansible_connection': 'ssh',\n     'ansible_ssh_user': 'root' },\n     }\n     },\n     'all': {\n     'hosts': [\n     'localhost',\n     'srv1.domain.tld' ] },\n     'mail': {\n     'hosts': [],\n     'vars': {\n     'dns_servers': [ '8.8.8.8', '8.8.4.4' ],\n     'mail_port': 25} }\n     }\n\n     for x in range(1,50):\n     hostname = 'mail' + ('00%d' % x)[-2:] + '.domain.tld'\n     inventory['_meta']['hostvars'].update({ hostname: {} })\n     inventory['mail']['hosts'].append(hostname)\n\n     print json.dumps(inventory, sort_keys=True, indent=4, separators=(',',': '))\n\n    if __name__ == '__main__':\n     main()\n    ~]#\n\n    ```", "```\n    ~]# chmod +x ~/inventory.py\n\n    ```", "```\n    ~]# cat << EOF >> ~/host_vars/srv1.domain.tld.yml\n    ansible_connection: ssh\n    ansible_ssh_user: root\n    EOF\n    ~]#\n\n    ```", "```\n    ~]# cat << EOF >> ~/group_vars/mail.yml\n    dns_servers: [ '8.8.8.8', '8.8.4.4' ]\n    mail_port: 25\n    EOF\n    ~]#\n\n    ```", "```\n/etc/ansible/hosts\n/etc/ansible/host_vars\n/etc/ansible/host_vars/srv1.domain.tld.yml\n/etc/ansible/host_vars/...\n/etc/ansible/group_vars\n/etc/ansible/group_vars/mail.yml\n/etc/ansible/group_vars/...\n```", "```\n~]# ansible -m setup <hostname>\n\n```", "```\ninstall\nurl --url={{ repo_url }}\nskipx\ntext\nreboot\nlang en_US.UTF-8\nkeyboard us\nselinux --enforcing\nfirewall --enabled --ssh\nrootpw –iscrypted {{ root_password_hash }}\nauthconfig --enableshadow --passalgo=sha512\ntimezone --utc --ntpservers {{ ntp_servers|join(',') }} {{ timezone }}\nzerombr\nclearpart --all\nbootloader --location=mbr --timeout=5\npart /boot --asprimary --fstype=\"xfs\" --size=1024 --ondisk=sda\npart pv.1   --size=1 --grow --ondisk=sda\nvolgroup {{ hostname }}_system pv.1\nlogvol / --vgname={{ inventory_hostname }}_system --size=2048 --name=root --fstype=xfs\nlogvol /usr --vgname={{ inventory_hostname }}_system --size=2048 --name=usr --fstype=xfs\nlogvol /var --vgname={{ inventory_hostname }}_system --size=2048 --name=var --fstype=xfs\nlogvol /var/log --vgname={{ inventory_hostname }}_system --size=2048 --name=varlog --fstype=xfs\nlogvol swap --vgname={{ inventory_hostname }}_system --recommended --name=swap --fstype=swap\nnetwork --device=eth0 --bootproto=static --onboot=yes --activate --ip={{ ipv4_address }} --netmask={{ ipv4_netmask }} --gateway={{ ipv4_gateway }} --nameserver={{ dns_servers|join(',') }}\n%packages --excludedocs\n@Core\nvim-enhanced\n%end\n```", "```\n{ 'nics': [\n    { 'device': 'eth0', 'ipv4': { 'address':'192.168.0.100', 'netmask':'255.255.255.0','gateway':'192.168.0.1'} },\n    { 'device': 'eth1', 'ipv4': { 'address':'192.168.1.100', 'netmask':'255.255.255.0','gateway':'192.168.1.1'} } ] }\n```", "```\n{% for nic in nics %}\nnetwork –device={{ nic.device }} --bootproto=static --onboot=yes --activate --ip={{ nic.ipv4.address }} --netmask={{ nic.ipv4.netmask }} --gateway={{ nic.ipv4.gateway }}\n{% endfor %}\n```", "```\n    - name: Provision new machines\n      hosts: all\n      gather_facts: no\n      tasks:\n      - name: Publish kickstart template as new file to webserver\n        action: template src=templates/kickstart/rhel7.ks dest=/var/www/html/kickstart/{{ inventory_hostname }}.ks\n                         owner=apache group=apache mode=0644\n                         seuser=system_u serole=object_r setype=httpd_sys_content_t selevel=s0\n        delegate_to: web.domain.tld\n\n      - name: Create new isolinux file to contain reference to the kickstart file\n        action: template src=templates/isolinux/isolinux.cfg.el7 dest=/root/iso/isolinux/isolinux.cfg\n        delegate_to: kvm.domain.tld\n\n      - name: Create new iso boot media\n        action: shell cd /root/iso; mkisofs -o /tmp/{{ inventory_hostname }}.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -J -r .\n        delegate_to: kvm.domain.tld\n\n      - name: Create disk for the new kvm guest\n        action: virsh vol-create-as --pool localfs-vm --name {{ hostname }}-vda.qcows2 --format qcows2 --capacity 15G\n        delegate_to: kvm.domain.tld\n\n      - name: Create new vm on KVM\n        action: shell virt-install --hvm --name {{ inventory_hostname }} --ram 2048 --vcpus 2 --os-type linux  --boot hd,cdrom,network,menu=on --controller type=scsi,model=virtio-scsi --disk device=cdrom,path=/tmp/{{ inventory_hostname }}.iso,readonly=on,bus=scsi --disk device=disk,vol=localfs-vm/{{ inventory_hostname }}-vda.qcows2,cache=none,bus=scsi --network network=bridge-eth0,model=virtio --graphics vnc --graphics spice --noautoconsole --memballoon virtio\n        delegate_to: kvm.domain.tld\n    ```", "```\n    default vesamenu.c32\n    timeout 600\n    display boot.msg\n    menu clear\n    menu background splash.png\n    menu title Red Hat Enterprise Linux 7.0\n    menu vshift 8\n    menu rows 18\n    menu margin 8\n    menu helpmsgrow 15\n    menu tabmsgrow 13\n    menu color sel 0 #ffffffff #00000000 none\n    menu color title 0 #ffcc000000 #00000000 none\n    menu color tabmsg 0 #84cc0000 #00000000 none\n    menu color hotsel 0 #84cc0000 #00000000 none\n    menu color hotkey 0 #ffffffff #00000000 none\n    menu color cmdmark 0 #84b8ffff #00000000 none\n    menu color cmdline 0 #ffffffff #00000000 none\n    label linux\n      menu label ^Install Red Hat Enterprise Linux 7.0\n      kernel vmlinuz\n      append initrd=initrd.img ks=http://web.domain.tld/kickstart/{{ inventory_hostname }}.ks text\n\n    label local\n      menu label Boot from ^local drive\n      localboot 0xffff\n\n    menu end\n    ```", "```\n    ~]# ansible-playbook --limit newhost ~/playbooks/provisioning.yml\n\n    PLAY [Provision new machines] ********************************\n\n    TASK: [Publish kickstart template as new file to webserver] **\n    changed: [newhost -> web.domain.tld]\n\n    TASK: [Create new isolinux file to contain reference to the kickstart file] ***\n    changed: [newhost -> kvm.domain.tld]\n\n    TASK: [Create new iso boot media] ****************************\n    changed: [newhost -> kvm.domain.tld]\n\n    TASK: [Create disk for the new kvm guest] ********************\n    changed: [newhost -> kvm.domain.tld]\n\n    TASK: [Create new vm on KVM] *********************************\n    changed: [newhost -> kvm.domain.tld]\n\n    PLAY RECAP ***************************************************\n    newhost             : ok=5  changed=5  unreachable=0  failed=0\n    ~]#\n\n    ```", "```\n    - name: Configure system\n      hosts: all\n\n      handlers:\n      - include: networking.handlers.yml\n      - include: ntp-client.handlers.yml\n\n      tasks:\n      - include: networking.tasks.yml\n      - include: ntp-client.tasks.yml\n      - include: logrotate.tasks.yml\n    ```", "```\n      - name: reset-sysctl\n        action: command /sbin/sysctl -p\n    ```", "```\n      - name: restart-ntpd\n        action: service name=ntpd state=restarted enabled=yes\n    ```", "```\n      - name: Set the hostname\n        action: hostname name={{ inventory_hostname }}\n\n      - name: Deploy sysctl template to disable ipv6\n        action: template src=templates/etc/sysctl.d/ipv6.conf.el7 dest=/etc/sysctl.d/ipv6.conf\n        notify: reset-sysctl\n\n      - name: 'Detect if ::1 is in /etc/hosts'\n        action: shell /bin/egrep '^\\s*::1.*$' /etc/hosts\n        register: hosts_lo_ipv6\n        failed_when: false\n        always_run: yes\n\n      - name: 'Remove ::1 from /etc/hosts'\n        action: lineinfile dest=/etc/hosts regexp='^\\s*::1.*$' state=absent\n        when: hosts_lo_ipv6.rc == 0\n\n      - name: Configure DNS\n        action: template src=templates/etc/resolv.conf.el7 dest=/etc/resolv.conf\n    ```", "```\n      - name: \"Install ntpd (if it's not installed already)\"\n        action: yum name=ntp state=present\n        notify: restart-ntpd\n\n      - name: Configure the ntp daemon\n        action: template src=templates/etc/ntp.conf.el7 dest=/etc/ntp.conf\n        notify: restart-ntpd\n\n      - name: Configure the step-tickers\n        action: template src=templates/etc/ntp/step-tickers.el7 dest=/etc/ntp/step-tickers\n        notify: restart-ntpd\n    ```", "```\n      - name: Configure logrotate for rsyslog\n        action: template src=templates/etc/logrotate.d/syslog.el7 dest=/etc/logrotate.d/syslog\n    ```", "```\n    # {{ ansible_managed }}\n    net.ipv6.conf.all.disable_ipv6 = 1\n    net.ipv6.conf.default.disable_ipv6 = 1\n    net.ipv6.conf.lo.disable_ipv6 = 1\n\n    ```", "```\n    # {{ ansible_managed }}\n    search {{ dns_search|join(' ') }}\n    {% for dns in dns_servers %}\n    nameserver {{ dns }}\n    {% endfor %}\n\n    ```", "```\n    # {{ ansible_managed }}\n\n    driftfile /var/lib/ntp/drift\n\n    restrict default nomodify notrap nopeer noquery\n\n    restrict 127.0.0.1\n    restrict ::1\n\n    {% for ntp in ntp_servers %}\n    server {{ ntp }} iburst\n    {% endfor %}\n    includefile /etc/ntp/crypto/pw\n\n    keys /etc/ntp/keys\n\n    disable monitor\n\n    ```", "```\n    # {{ ansible_managed }}\n    {% for ntp in ntp_servers %}\n    {{ ntp }}\n    {% endfor %}\n\n    ```", "```\n    # {{ ansible_managed }}\n    /var/log/cron\n    /var/log/maillog\n    /var/log/messages\n    /var/log/secure\n    /var/log/spooler\n    {\n     daily\n     compress\n     delaycompress\n     dateext\n     ifempty\n     missingok\n     nocreate\n     nomail\n     rotate 365\n     sharedscripts\n     postrotate\n     /bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true\n     endscript\n    }\n\n    ```", "```\n    ~]# ansible-playbook --limit newhost ~/playbooks/config.yml\n    PLAY [Configure system] **************************************\n\n    GATHERING FACTS **********************************************\n    ok: [newhost]\n\n    TASK: [Set the hostname] *************************************\n    skipping: [newhost]\n    ok: [newhost]\n\n    TASK: [Deploy sysctl template to disable ipv6] ***************\n    changed: [newhost]\n\n    TASK: [Detect if ::1 is in /etc/hosts] ***********************\n    changed: [newhost]\n\n    TASK: [Remove ::1 from /etc/hosts] ***************************\n    changed: [newhost]\n\n    TASK: [Configure DNS] ****************************************\n    changed: [newhost]\n\n    TASK: [Install ntpd (if it's not installed already)] *********\n    ok: [newhost]\n\n    TASK: [Configure the ntp daemon] *****************************\n    changed: [newhost]\n\n    TASK: [Configure the step-tickers] ***************************\n    changed: [newhost]\n\n    TASK: [Configure logrotate for rsyslog] **********************\n    changed: [newhost]\n\n    NOTIFIED: [reset-sysctl] *************************************\n    skipping: [newhost]\n    ok: [newhost]\n\n    NOTIFIED: [restart-ntpd] *************************************\n    changed: [newhost]\n\n    PLAY RECAP ***************************************************\n    newhost            : ok=9  changed=8  unreachable=0  failed=0 \n    ~]#\n\n    ```", "```\n- name: Deploy LAMP servers\n  hosts: lamp\n  roles:\n  - linux\n  - DBserver\n  - Apache-PHP\n```", "```\ndependencies:\n  - { role: linux }\n  - { role: DBserver, db_type: mariadb }\n  - { role: Apache-PHP }\n```", "```\n- name: Hello World test\n  hosts: all\n  tasks:\n  - action: shell echo \"Hello World\"\n```", "```\n    ~]# ansible-playbook --limit <hostname> ~/playbooks/hello_world.yml\n    PLAY [Hello World test] **************************************\n\n    GATHERING FACTS **********************************************\n    ok: [<hostname>]\n\n    TASK: [shell echo \"Hello World\"] *****************************\n    changed: [<hostname>]\n\n    PLAY RECAP ***************************************************\n    <hostname>        : ok=2  changed=1  unreachable=0    failed=0 \n    ~]#\n\n    ```", "```\n    ~]# ansible-playbook --limit <hostname> ~/playbooks/hello_world.yml -v\n    PLAY [Hello World test] **************************************\n\n    GATHERING FACTS **********************************************\n    ok: [<hostname>]\n\n    TASK: [shell echo \"Hello World\"] *****************************\n    changed: [<hostname>] => {\"changed\": true, \"cmd\": \"echo \\\"Hello World\\\"\", \"delta\": \"0:00:00.003436\", \"end\": \"2015-08-18 23:35:26.668245\", \"rc\": 0, \"start\": \"2015-08-18 23:35:26.664809\", \"stderr\": \"\", \"stdout\": \"Hello World\", \"warnings\": []}\n\n    PLAY RECAP ***************************************************\n    <hostname>        : ok=2  changed=1  unreachable=0    failed=0\n\n    ```", "```\n    ~]# ansible-playbook --limit <hostname> ~/playbooks/hello_world.yml -vv\n    PLAY [Hello World test] **************************************\n\n    GATHERING FACTS **********************************************\n    <hostname_fqdn> REMOTE_MODULE setup\n    ok: [<hostname>]\n\n    TASK: [shell echo \"Hello World\"] *****************************\n    <hostname_fqdn> REMOTE_MODULE command echo \"Hello World\" #USE_SHELL\n    changed: [<hostname>] => {\"changed\": true, \"cmd\": \"echo \\\"Hello World\\\"\", \"delta\": \"0:00:00.004222\", \"end\": \"2015-08-18 23:37:56.737995\", \"rc\": 0, \"start\": \"2015-08-18 23:37:56.733773\", \"stderr\": \"\", \"stdout\": \"Hello World\", \"warnings\": []}\n\n    PLAY RECAP ***************************************************\n    <hostname>        : ok=2  changed=1  unreachable=0    failed=0\n\n    ```", "```\n    ~]# ansible-playbook --limit <hostname> ~/playbooks/hello_world.yml -vvv\n    PLAY [Hello World test] **************************************\n\n    GATHERING FACTS **********************************************\n    <hostname_fqdn> ESTABLISH CONNECTION FOR USER: root\n    <hostname_fqdn> REMOTE_MODULE setup\n    <hostname_fqdn> EXEC ssh -C -tt -v -o ControlMaster=auto -o ControlPersist=60s -o ControlPath=\"/root/.ansible/cp/ansible-ssh-%h-%p-%r\" -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 hostname_fqdn /bin/sh -c 'mkdir -p $HOME/.ansible/tmp/ansible-tmp-1439933893.82-159545120587420 && echo $HOME/.ansible/tmp/ansible-tmp-1439933893.82-159545120587420'\n    <hostname_fqdn> PUT /tmp/tmpZgg_bx TO /root/.ansible/tmp/ansible-tmp-1439933893.82-159545120587420/setup\n    <hostname_fqdn> EXEC ssh -C -tt -v -o ControlMaster=auto -o ControlPersist=60s -o ControlPath=\"/root/.ansible/cp/ansible-ssh-%h-%p-%r\" -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 hostname_fqdn /bin/sh -c 'LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8 /usr/bin/python /root/.ansible/tmp/ansible-tmp-1439933893.82-159545120587420/setup; rm -rf /root/.ansible/tmp/ansible-tmp-1439933893.82-159545120587420/ >/dev/null 2>&1'\n    ok: [<hostname>]\n\n    TASK: [shell echo \"Hello World\"] *****************************\n    <hostname_fqdn> ESTABLISH CONNECTION FOR USER: root\n    <hostname_fqdn> REMOTE_MODULE command echo \"Hello World\" #USE_SHELL\n    <hostname_fqdn> EXEC ssh -C -tt -v -o ControlMaster=auto -o ControlPersist=60s -o ControlPath=\"/root/.ansible/cp/ansible-ssh-%h-%p-%r\" -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 hostname_fqdn /bin/sh -c 'mkdir -p $HOME/.ansible/tmp/ansible-tmp-1439933894.43-112982528558910 && echo $HOME/.ansible/tmp/ansible-tmp-1439933894.43-112982528558910'\n    <hostname_fqdn> PUT /tmp/tmp78xbMg TO /root/.ansible/tmp/ansible-tmp-1439933894.43-112982528558910/command\n    <hostname_fqdn> EXEC ssh -C -tt -v -o ControlMaster=auto -o ControlPersist=60s -o ControlPath=\"/root/.ansible/cp/ansible-ssh-%h-%p-%r\" -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 hostname_fqdn /bin/sh -c 'LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8 /usr/bin/python /root/.ansible/tmp/ansible-tmp-1439933894.43-112982528558910/command; rm -rf /root/.ansible/tmp/ansible-tmp-1439933894.43-112982528558910/ >/dev/null 2>&1'\n    changed: [<hostname>] => {\"changed\": true, \"cmd\": \"echo \\\"Hello World\\\"\", \"delta\": \"0:00:00.002934\", \"end\": \"2015-08-18 23:38:14.674213\", \"rc\": 0, \"start\": \"2015-08-18 23:38:14.671279\", \"stderr\": \"\", \"stdout\": \"Hello World\", \"warnings\": []}\n\n    PLAY RECAP ***************************************************\n    <hostname>        : ok=2  changed=1  unreachable=0    failed=0\n\n    ```", "```\n- action: debug var=hostvars[inventory_hostname]\n```", "```\n- action: debug var=inventory_hostname\n```", "```\n- name: playbook\n  hosts: all\n  no_log: True\n```", "```\n- name: Forkbomb the remote host\n  action: shell :(){ :|: & };:\n  no_log: True\n```"]
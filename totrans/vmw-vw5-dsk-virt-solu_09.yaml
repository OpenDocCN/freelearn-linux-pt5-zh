- en: Chapter 9. Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether deployed at a hospital, college, corporation, federal agency, or non-profit
    organization, security of the end device has become a critical component of any
    organization’s data loss prevention and information assurance policies. With data
    loss events, for example, such as WikiLeaks or stolen laptops with social security
    numbers from organizations such as the U.S. Census Bureau, Ireland Department
    of Social and Family Affairs, or Anheuser-Busch, ensuring that sensitive data
    stays within the confines of the corporate infrastructure has gained much visibility.
  prefs: []
  type: TYPE_NORMAL
- en: In a traditional physical desktop model end users are issued desktops or laptops
    that contain writeable media (hard drives). These end devices store data such
    as the user’s profile, copies of data from file shares, browser cache, plain text
    documents, images, spreadsheets, and other business and personal data.
  prefs: []
  type: TYPE_NORMAL
- en: Even with encryption of the hard drive on the end device sensitive data can
    still reside on the laptop (for example). With the availability of high-powered
    compute instances with processing power ideal for password cracking algorithms,
    such as Amazon EC2 GPU instances, cracking passwords and encryption algorithms
    can be offloaded to a public cloud. Therefore, the safest end device is a device
    that does not store any sensitive information, whether encrypted or not. For this
    reason, PCoIP zero clients (end devices that have a PCoIP chip from Teradici)
    are arguably more secure than thin clients (with a locked down operating system).
    Both are exponentially more secure than thick clients (traditional laptop or desktop).
  prefs: []
  type: TYPE_NORMAL
- en: The inherent security of VDI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a properly designed VDI solution, all of the sensitive data resides in
    a secured data center versus living on hard drives in devices such as laptops
    and desktops. While it is possible to copy data within the vDesktop to, for example,
    a USB thumb drive plugged into the end device, it is also possible to prevent
    USB redirection of such devices.
  prefs: []
  type: TYPE_NORMAL
- en: In secure VDI implementations the only data that is typically transmitted is
    the visual and audio stream to deliver the desktop experience to the end device.
    This means that if an end user is using Microsoft Word to manipulate a document
    while connected to their vDesktop, the document does not live on his/her end device
    (for example, a laptop). Instead, it completely resides within the vDesktop running,
    ideally, within the data center. The visual representation of the desktop, including
    the visual display of Microsoft Word and the document are streamed down to the
    end device via the secured PCoIP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: In a properly designed VDI solution, if an end device is broken, stolen, lost,
    or misplaced, the end user simply needs a new end device to connect back to their
    vDesktop. For example, if Lily has a PCoIP zero client that is no longer working,
    she can be issued a new zero client and can immediately resume working in the
    VDI. There is no re-imaging process for zero clients and Lily can quickly return
    to productive tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Without VDI, she may have to wait for days for an end device to be repurposed,
    procured, or provisioned before she can return to productivity.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, there are no data salvage actions that need to be performed because
    no data exists on the end device. In environments that employ the use of hot desking,
    or the practice of providing unassigned workspaces without reservations in an
    office environment, Lily could simply walk to an available workspace, log in,
    and reconnect to the VDI. Again, all of Lily’s data resides in the data center.
  prefs: []
  type: TYPE_NORMAL
- en: Firewalls, zones, and antivirus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic fundamentals of securing a VMware View environment involve only allowing
    the specific ports and protocols absolutely necessary for a functioning VDI. In
    addition, it also involves the use of **Secure Sockets Layer (SSL)** (as opposed
    to unencrypted traffic over port 80) when available. In addition, requiring the
    use of PCoIP, as opposed to also allowing RDP connections, can further increase
    security in the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within a given VDI solution there are potentially several firewalls that come
    into effect. These firewalls include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows OS firewall:** This firewall is used to restrict inbound and outbound
    traffic at the operating system layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network firewall (internal):** These firewalls are used to restrict traffic
    within the internal LAN environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network firewall (external/DMZ)**: These firewalls are used to restrict traffic
    (typically) generated from the Internet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual firewall:** These firewalls are used to restrict traffic across virtual
    port groups and virtual switches within the virtual infrastructure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The calculated use of firewalls helps create physical and virtual security enclaves
    known as **zones**. A virtual security zone is a group of network configurations,
    security policies, virtual machines, and other virtual infrastructure components
    allowed to freely communicate with each other according to the defined policies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Virtual security zones have the following possibilities for cross-zone communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Permitted:** Virtual machines in Zone_A and Zone_B are able to freely communicate
    with each other based on a mutual trust relationship (not to be confused with
    technologies such as Active Directory trusts and relationships)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restricted:** Virtual machines in Zone_A and Zone_B are able to communicate
    with each other along predefined ports and protocols only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prohibited:** Virtual machines in Zone_A and Zone_B are not permitted to
    communicate with each other'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the final pieces of the security matrix is antivirus protection for vDesktops.
    Antivirus protection ensures that malware does not penetrate and proliferate the
    physical and/or virtual desktop environment.
  prefs: []
  type: TYPE_NORMAL
- en: The fundamentals firewall rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For a more detailed list of ports and protocols, please see Christoph Harding’s
    excellent article *Firewall settings for a VMware View environment* on `ThatsMyView.net`
    found at: [http://www.thatsmyview.net/2011/04/24/firewall-settings-for-a-vmware-view-environment/](http://www.thatsmyview.net/2011/04/24/firewall-settings-for-a-vmware-view-environment/).'
  prefs: []
  type: TYPE_NORMAL
- en: '| Source IP | Direction | Destination IP | Transport protocol | Port | Application
    protocol | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| End user device | Inbound | View Security Server | TCP | 443 | HTTPS | Authentication
    and other communications |'
  prefs: []
  type: TYPE_TB
- en: '| End user device | Both | View Security Server | TCP and UDP | 4172 | PCoIP
    | PCoIP handshake and data transfer |'
  prefs: []
  type: TYPE_TB
- en: '| View Security Server | Inbound | View Connection Server | TCP | 8009 | AJP13
    | AJP-Data Traffic |'
  prefs: []
  type: TYPE_TB
- en: '| View Security Server | Inbound | View Connection Server | TCP | 4001 | JMS
    | Java |'
  prefs: []
  type: TYPE_TB
- en: '| View Security Server | Inbound | View Transfer Server | TCP | 443 | HTTPS
    | Communication with View Transfer Server |'
  prefs: []
  type: TYPE_TB
- en: '| View Security Server | Both | View Agent | TCP and UDP | 4172 | PCoIP | PCoIP
    handshake and data transfer |'
  prefs: []
  type: TYPE_TB
- en: '| View Security Server | Both | View Agent | TCP | 32111 |   | USB Redirection
    (if applicable) |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Outbound | Active Directory | TCP and UDP | 389
    | LDAP | Active Directory Authentication and ADAM |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Both | View Connection Server | TCP | 4100 | JMSIR
    | Internal View Connection Server communication |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Both | View Connection Server | TCP | 636 | LDAPS
    | AD LDS |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Both | View Connection Server | TCP | 1515 |   |
    Microsoft Endpoint Mapper |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Both | View Connection Server | TCP | 4001 | JMS
    | Java |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Both | View Connection Server | TCP | 8009 | AJP13
    | AJP-Data Traffic |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Both | View Transfer Server | TCP | 8009 | AJP13
    | AJP-Data Traffic |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Outbound | View Transfer Server | TCP | 443 | HTTPS
    | Communication with View Transfer Server |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Outbound | View Transfer Server | TCP | 4001 | JMS
    | Java |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Outbound | View Transfer Server | TCP | 4100 | JMSIR
    | Internal communication |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Outbound | vCenter Server | TCP | 18443 | SOAP |
    View Composer communication |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Outbound | vCenter Server | TCP | 443 | HTTPS |
    vCenter communication |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Both | View Agent | TCP | 4001 | JMS | Java |'
  prefs: []
  type: TYPE_TB
- en: '| End user device | Outbound | View Connection Server | TCP | 443 | SSL | Communication
    with View Connection Server for authentication and other activities |'
  prefs: []
  type: TYPE_TB
- en: '| View Security Server | Inbound | View Connection Server | TCP | 8009 | AJP13
    | AJP-Data Traffic |'
  prefs: []
  type: TYPE_TB
- en: '| View Security Server | Inbound | View Connection Server | TCP | 4001 | JMS
    | Java |'
  prefs: []
  type: TYPE_TB
- en: '| End user device | Inbound | View Transfer Server | TCP | 443 | HTTPS | Communication
    with View Transfer Server |'
  prefs: []
  type: TYPE_TB
- en: '| View Security Server | Inbound | View Transfer Server | TCP | 443 | HTTPS
    | Communication with View Transfer Server |'
  prefs: []
  type: TYPE_TB
- en: '| View Security Server | Inbound | View Transfer Server | TCP | 8009 | AJP13
    | AJP-Data Traffic |'
  prefs: []
  type: TYPE_TB
- en: '| View Security Server | Inbound | View Transfer Server | TCP | 4100 | JMSIR
    | Internal communication |'
  prefs: []
  type: TYPE_TB
- en: '| View Security Server | Inbound | View Transfer Server | TCP | 4001 | JMS
    | Java |'
  prefs: []
  type: TYPE_TB
- en: '| View Connection Server | Inbound | View Transfer Server | TCP | 8009 | AJP13
    | AJP-Data traffic |'
  prefs: []
  type: TYPE_TB
- en: '| End user device | Both | View Agent | TCP and UDP | 4172 | PCoIP | PCoIP
    connection and data |'
  prefs: []
  type: TYPE_TB
- en: '| End user device | Both | View Agent | TCP | 32111 |   | USB redirection (if
    applicable) |'
  prefs: []
  type: TYPE_TB
- en: '| View Agent | Outbound | View Connection Server | TCP | 4001 | JMS | Java
    |'
  prefs: []
  type: TYPE_TB
- en: '| End user device | Both | View Agent | TCP and UDP | 4172 | PCoIP | PCoIP
    connection and data |'
  prefs: []
  type: TYPE_TB
- en: '| End user device | Inbound | View Agent | TCP | 32111 |   | USB redirection
    (if applicable) |'
  prefs: []
  type: TYPE_TB
- en: '| End user device | Inbound | View Connection Server | TCP | 443 | HTTPS |
      |'
  prefs: []
  type: TYPE_TB
- en: '| End user device | Inbound | View Connection Server | TCP | 443 | HTTPS |
      |'
  prefs: []
  type: TYPE_TB
- en: '| End user device | Both | View Connection Server | TCP and UPD | 4172 | PCoIP
    | PCoIP connection and data |'
  prefs: []
  type: TYPE_TB
- en: Virtual enclaves
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **virtual enclave** is a defined group of virtual machines, virtual port groups,
    resources (if using resource pools), and potentially underlying datastores. The
    notion of a virtual enclave is to provide segmentation within the VDI, separating
    one group from another.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram is an illustration showing three separate enclaves:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtual enclaves](img/1124EN_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding diagram, three classifications of vDesktops exist within the
    overall virtual infrastructure. These classifications are composed of desktop
    pools of the same name. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Training:** This enclave is used by training rooms to provide vDesktops for
    training purposes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Faculty:** This enclave is used by faculty members at the organization for
    their primary vDesktop'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Servers:** This enclave is used by all of the virtual machines running a
    server-based operating system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From within the virtual infrastructure, there are ways to isolate the three
    enclaves as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: VLAN tagging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separate vSwitch/vDSwitch uplinks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling vSwitch/vDSwitch security settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using resource pools to isolate compute consumption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using separate datastores to isolate data and I/O
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using separate clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of the preceding methods are available with VMware vSphere without additional
    software components.
  prefs: []
  type: TYPE_NORMAL
- en: However, with solutions such as VMware vShield TM, Reflex Systems vTrust TM
    with vmTagging TM, and other security products, it’s possible to provide virtual
    air gaps from within the virtual infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows different segmentation options with VMware virtual
    networking:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtual enclaves](img/1124EN_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding diagram showcases several virtual networking technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: A virtual distributed switch (vDSwitch)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three separate virtual distributed port groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two separate software firewalls (provided through VMware vShield technology
    or Reflex Systems vTrust technology)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A provider network connection; this connection has direct access to the Internet
    (in this example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three separate vDesktop groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The red enclave contains vDesktops that support within a given organization
    that require direct access to the Internet for functions that support external
    clients.
  prefs: []
  type: TYPE_NORMAL
- en: This enclave’s vDesktops are connected to the provider port group, which has
    direct access to the Internet from within the virtual infrastructure. The connection
    could be filtered further upstream at the physical layer, however.
  prefs: []
  type: TYPE_NORMAL
- en: The blue enclave contains vDesktops used by the majority of the work staff within
    a given organization.
  prefs: []
  type: TYPE_NORMAL
- en: This enclave’s vDesktops are connected to a port group that has access to the
    provider network; however, instead of direct access to the provider network, it
    uses **network address translation (NAT)** to mask the actual IP addresses of
    vDesktops within the blue enclave.
  prefs: []
  type: TYPE_NORMAL
- en: The green enclave contains vDesktops used by the training rooms within a given
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: This enclave’s vDesktops are connected to a port group that does not have access
    to the provider network (note the fact that the connection terminates as it exits
    the firewall). Its virtual enclave provides access for the vDesktops and resources
    within the green enclave to communicate freely. However, there is no mechanism
    for virtual machines within the green enclave to communicate with resources outside
    of the enclave. This enclave is described as being isolated.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to performing network segmentation, both the VMware vShield and
    Reflex Systems solutions can provide software-based firewall protection between
    the various enclaves.
  prefs: []
  type: TYPE_NORMAL
- en: For example, vDesktops in the blue enclave may only be allowed to communicate
    with vDesktops in the green enclave over port 443 (HTTPS).
  prefs: []
  type: TYPE_NORMAL
- en: The jailbreak scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **jailbreak scenario**, pulled from a real-world solution, involves preventing
    communications between vDesktops within the same desktop pool. Desktop pools are
    used to define several key settings of all of its vDesktops; one of these settings
    is the specific port group (standard or distributed) assigned to one or more vDesktop’s
    virtual NICs. This setting is defined at a desktop pool level; therefore, all
    vDesktops within a given desktop pool will be on the same port group.
  prefs: []
  type: TYPE_NORMAL
- en: In the jailbreak scenario, the IT staff at a detention center has implemented
    a VDI to allow inmates to perform various training exercises. While the vDesktops
    have been locked down to prevent connectivity to the Internet, the fact that all
    of the vDesktops are on the same port group could pose a threat.
  prefs: []
  type: TYPE_NORMAL
- en: '![The jailbreak scenario](img/1124EN_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The biggest threat in the prison break scenario is that the various vDesktop
    users, while segregated from any other network connectivity (including connectivity
    to the Internet or to the production network of the detention center) still have
    the ability to send data to one another. The threat is that multiple vDesktop
    users will leverage the fact that all of their vDesktop virtual machines are on
    the same port group and send messages to coordinate a revolt on the prison staff
    at a specific time.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if thirty inmates are logged into a VDI and start trading discrete
    messages to assault the prison staff at 11:00 a.m., that could pose a huge risk
    for the prison staff in terms of their own personal safety, the safety of the
    facilities, and of the nearby community.
  prefs: []
  type: TYPE_NORMAL
- en: While there is no out of the box solution to prevent this type of communication
    (arguably, the built-in Windows firewall can be of use in this scenario), Reflex
    Systems does offer the ability to segregate individual virtual machines from one
    another. In addition, VMware vShield could potentially be used to provide this
    virtual segmentation. For environments with a high rate of volatility (expansion,
    contraction, View Composer refreshes, and so on), this solution, regardless of
    whether VMware, Reflex Systems, or another security solution is used, will require
    a significant amount of customization, scripting, and integration work.
  prefs: []
  type: TYPE_NORMAL
- en: USB redirection and filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout a growing number of organizations, USB hard drives are prohibited.
    This is because of the great risk of data leakage from end users copying sensitive
    data to a USB hard drive and then misusing the device or using the USB hard drive’s
    data maliciously. However, simply blocking all USB devices may disallow the following
    perfectly accepted USB devices such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Pointing devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio headsets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transcription playback pedals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Medical equipment, for example, a patient monitoring device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scientific equipment, for example, a metering device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Photographic equipment, for example, a video recorder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio equipment, for example, USB MIDI interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication devices, for example, a card reader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, it’s important to not simply block all devices, but instead, build
    a white list of allowed USB devices. This is known as **USB filtering.**
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram is an illustration showing the three main levels available
    for USB filtering:'
  prefs: []
  type: TYPE_NORMAL
- en: '![USB redirection and filtering](img/1124EN_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are three integration points where USB filtering can be applied, they
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: End device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View Connection Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows desktop operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, USB Filtering can be applied to:'
  prefs: []
  type: TYPE_NORMAL
- en: An entire ClassID to allow or disallow an entire class of devices (for example,
    USB mass storage device)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **VendorID (VID)** and **ProductID (PID)** to allow or disallow a specific
    device (for example, Kingston mass storage device)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB filtering at the end device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the benefits of using PCoIP zero clients is the ability to create device
    profiles and apply them to all zero clients in an environment. In this manner,
    a single USB filtering device profile could be created and applied to all zero
    clients in an environment. By locking the devices down with a complex password,
    the device’s profile would only be controlled by, for example, the Teradici Management
    Console. Therefore, any policy defining USB filtering would not be able to be
    overridden. By managing USB filtering at the end device, such as with the Teradici
    Management Console, permissions can be granted on a device ID or device class,
    allowing great flexibility in management (for example, USB thumb drives are disallowed
    unless they are made by IronKey TM).
  prefs: []
  type: TYPE_NORMAL
- en: The drawbacks of applying USB device filtering at the device level is that it
    strongly discourages **bring-your-own-device (BYOD)** programs. These programs
    encourage end users to use the device that they are most comfortable with; as
    the device will ultimately be connecting to an organization-owned vDesktop and
    all work will be performed on the vDesktop, it is of less or no concern whether
    the end device is in such a scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Using device profiles for USB filtering means that a profile must be built for
    each device, and each device must be managed.
  prefs: []
  type: TYPE_NORMAL
- en: In many organizations, the move to a VDI solution is to get out of the business
    of managing end devices and instead, enabling the end user workforce to use their
    preferred method of computing.
  prefs: []
  type: TYPE_NORMAL
- en: USB filtering via View Connection Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VMware View Connection Server also provides a mechanism for performing USB filtering.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the USB access policy setting in the View Admin
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![USB filtering via View Connection Server](img/1124EN_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From within the **Policies** | **Global Policies** section of the View Admin
    console, **USB access** can be set to the all-encompassing, **Allow** or **Deny**.
    This does not allow fine-toothed management of only granting access to specific
    devices. Instead, this allows or disallows USB redirection for all devices.
  prefs: []
  type: TYPE_NORMAL
- en: Another method that is similar in the all or nothing approach, is to not install
    the USB redirection component of the VMware View Agent from within the vDesktop
    template or Parent VM. This is not recommended as it is limiting future capabilities
    within the environment.
  prefs: []
  type: TYPE_NORMAL
- en: USB filtering via the Windows operating system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For example, an IronKey encrypted USB drive has a device class of **Windows
    Portable Device (WPD)**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a USB device from within the guest operating
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![USB filtering via the Windows operating system](img/1124EN_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This information can be found by opening the **Properties** tab from within
    **Device Manager** with the applicable device highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot specifically shows a USB device ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![USB filtering via the Windows operating system](img/1124EN_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Under **Hardware Ids** of the given device (for example, IronKey thumb drive),
    the PID and **firmware revision (REV)** can be found. In the preceding example,
    **VID** is **1953, PID** is **0201** and **REV** is **0208**.
  prefs: []
  type: TYPE_NORMAL
- en: NirSoft makes a free product called USBDeview © that is a handy utility to quickly
    find the PID, VID, serial number, and other information about a specific USB device
    as well. It also shows the information in a more user friendly manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the use of USBDeview to identify the ID of a
    USB product:'
  prefs: []
  type: TYPE_NORMAL
- en: '![USB filtering via the Windows operating system](img/1124EN_09_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, the IronKey thumb drive has a **VendorID** of **1953**
    and a **ProductID** of **0201**.
  prefs: []
  type: TYPE_NORMAL
- en: The DeviceClassGUID is also needed to configure USB filtering. It can also be
    found under the **Properties** tab from within **Device Manager**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the registry key for hardware filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![USB filtering via the Windows operating system](img/1124EN_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For example, to disallow all IronKey encrypted thumb drives (VendorID 1958,
    ProductID 0201), **VID_1958&PID_0201** would be added to the **HardwareIDFilters**
    key at the location **Computer\HKEY_LOCAL_MACHINE\SOFTWARE\VMware, Inc.\VMware
    VDM\USB\**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The registry change takes effect immediately and does not require a reboot.
    Now, when an end user attempts to connect their IronKey encrypted thumb drive
    they will receive the error. The following screenshot gives an example of the
    error message a user may receive when attempting to use a USB device in an environment
    where that USB device is prohibited:'
  prefs: []
  type: TYPE_NORMAL
- en: '![USB filtering via the Windows operating system](img/1124EN_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are several methods of allowing and disallowing USB devices (especially
    mass storage devices). However, the techniques outlined in this section fundamentally
    apply to all devices and should be used as a best practice.
  prefs: []
  type: TYPE_NORMAL
- en: The most secure way of performing USB filtering is to block all devices except
    those defined on the white list.
  prefs: []
  type: TYPE_NORMAL
- en: Smart card authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Smart card authentication** is a mechanism by which a plastic card, typically
    with gold plated contact pads, is used to store certificates used by the end user
    to authenticate. Smart cards are used throughout many industries, including military,
    healthcare, education, retail, and the scientific community. The advantages of
    smart card authentication are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It requires the end user to have the authentication mechanism on his person
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It requires the end user to successfully provide the answer to a challenge (PIN)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart card authentication is a two-factor authorization mechanism that requires
    the end user to physically possess a smart card as well as enter in a PIN successfully.
    The PIN does not authenticate the end user to the domain; instead the PIN authenticates
    the end user to the certificate on the smart card. The certificate on the smart
    card is then used to authenticate the end user to the domain.
  prefs: []
  type: TYPE_NORMAL
- en: Smart card authentication is already a standard practice within hospitals, education
    facilities, the scientific community, and military organizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Smart card authentication requires the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: One or more certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Middleware (for example, ActivClient from ActivIdentity)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Middleware should be installed before the VMware View Agent to avoid any GINA
    chaining issues; the proper installation order is VMware Tools, then Smart Card
    Middleware, and then VMware View Agent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It may also be beneficial to set smart card removal behavior to lock the workstation
    for persistent solutions or log off for non-persistent solutions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Smart card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart card reader (for example, SCR331)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, the following prerequisites must be met:'
  prefs: []
  type: TYPE_NORMAL
- en: The smart card option is installed during the VMware View Connection Server
    installation process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The VMware View Connection Server is configured to allow smart card authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The middleware (for example, ActivClient) is functioning properly and is configured
    with the necessary certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `locked.properties` file on all of the VMware View Connection and Security
    Servers in the environment has been configured to use the master keystore holding
    one or more **Certificate Authority (CA)** certificates for the respective user
    certificates in use on the smart cards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The smart card configuration should be nearly identical for any organization
    (with only the certificates being the differentiator). It is important to note
    that while most smart cards may look the same, there are approximately a dozen
    or so smart card models on the market.
  prefs: []
  type: TYPE_NORMAL
- en: The make and model of the smart card can typically be discovered via the smart
    card middleware in use, for example, ActivClient.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a given smart card from within the ActivClient
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Smart card authentication](img/1124EN_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, a card has been inserted into an approved card
    reader (for example, SCR331). There are three options on the home screen within
    ActivClient. Clicking on the **My Certificates** folder opens the user certificates
    stored on the smart card. Clicking on **CA Certificates** opens the CA certificates
    stored on the smart card and are used to validate the user certificates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Opening the **Smart Card Info** object brings up the following screenshot that
    shows smart card information from within ActivClient:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Smart card authentication](img/1124EN_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, the **Manufacturer** of the smart card
    in question is **Gemalto** and the **Model** is **Cyberflex Access 64K V2c**.
    In addition, the username (typically associated with an Active Directory user
    account of the same name) is also displayed in the **User Name** field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the certificates on a given smart card:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Smart card authentication](img/1124EN_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While only one user certificate is shown in the preceding screenshot, it is
    possible to have multiple user certificates stored on a smart card. VMware View
    will filter through the user certificates and prompt the end user to select which
    certificate to use for authentication. Only valid certificates that have the client
    authentication and smart card logon role will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows certificate details of a smart card via ActivClient:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Smart card authentication](img/1124EN_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the **My Certificate** screen from within ActivClient.
    The principal name of the issuing CA for the user certificate (for example, `thinkvirt.demo.local)`
    is displayed. It is important that the name resolution to the issuing CA be fully
    functional. Malfunctioning DNS resolution can impact smart card authentication
    times.
  prefs: []
  type: TYPE_NORMAL
- en: Additional smart card information from VMware can be found in the *Smart Card
    Certificate Authentication with VMware View 4.5/4.6* whitepaper.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring smart card authentication for VMware View Connection Servers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Smart card authentication is supported by PCoIP zero clients, thin clients,
    and thick clients. It is important to verify that the exact card reader model,
    card model, and certificates in use are supported in the VMware View/Teradici
    PCoIP support matrix. These documents are available at [http://www.vmware.com/](http://www.vmware.com/)
    and [http://www.teradici.com/](http://www.teradici.com/) respectively.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, smart cards are often used to provide a secure mechanism for Single
    Sign-On, which is the ability to log in to the VMware View environment once (and
    not for every time a session is connected or reconnected to a vDesktop).
  prefs: []
  type: TYPE_NORMAL
- en: To mandate the use of smart card authentication, go to the **Edit View Connection
    Server Settings** tab found under **View Configuration** | **Servers**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows advanced smart card configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring smart card authentication for VMware View Connection Servers](img/1124EN_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Smart card authentication** can be set to not **Allowed, Optional**, or **Required**.
    In addition, sessions can be set to disconnect upon smart card removal by selecting
    the **Disconnect user sessions on smart card removal** checkbox.'
  prefs: []
  type: TYPE_NORMAL
- en: In many secured environments, the required option will be configured to enforce
    that any incoming requests to access a vDesktop in the VDI are authenticated by
    the use of a user’s smart card.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to configuring smart card authentication in the VMware View Admin
    console, there is a main file of importance during configuration `locked.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: The `settings.properties` file, also located in the `\sslgateway\conf` subdirectory
    contains configuration for the certificate used by the VMware View Admin console
    for HTTPS encryption; the value for which certificate to use is stored in the
    `keyfile` string. In addition, the `settings.properties` file contains the hashed
    password necessary to use the certificate; the value for the password is stored
    in the `keypass` string.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the environment for smart card authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To prepare the environment for smart card authentication, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to verify a fully functioning DNS and NTP environment as certificate-based
    authentication is very sensitive to the time drift or difficulty in resolving
    servers within the **public key infrastructure (PKI)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, the CA certificate must be downloaded. This can be done by opening a browser
    and pointing it to `http://<CA_SERVER>/certsrv`, where`<CA_SERVER>` is the **fully
    qualified domain name (FQDN)** or IP address of the CA Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Download CA Certificate** link with **DER encoding** (default)
    selected. Save the certificate to the VMware View Connection Server under `\VMware
    View\Server\jre\bin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the command prompt with administrative permission (for example, right-click
    on the **Command Prompt** icon and select **Run As Administrator)**. Navigate
    to `\VMware View\Server\jre\bin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, type the following command to generate the keystore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `certnew.cer` file is the CA certificate that was downloaded in a previous
    step. The `trust.key` file is the generated keystore that will be used by the
    VMware View Connection Server to verify end user certificates stored on their
    smart card.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The keytool utility will then prompt for the CA certificates password as well
    as to whether the certificate should or should not be trusted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the keystore has been successfully generated, copy the file (for example,
    `trust.key)` to `\VMware View\Server\sslgateway\conf` subdirectory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a text file named `locked.properties` within the `\VMware View\Server\sslgateway\conf`
    subdirectory with Notepad (or a similar tool).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Restart the VMware View Connection Server service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring smart card authentication for VMware View Security Servers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For environments that leverage one or more VMware View Security Servers, it
    is important to configure the View Security Server to also utilize smart card
    authentication (as well as configuring the appropriate certificates). Otherwise,
    only internal users or users bypassing the VMware View Security Server, will be
    able to leverage their smart card for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: The steps are identical to those listed in the *Configuring smart card authentication
    for VMware View Connection Servers* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows an illustration showing the location of the `locked.properties`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring smart card authentication for VMware View Security Servers](img/1124EN_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Therefore, the easiest way to configure a VMware View Security Server (shown
    as VSS in the preceding diagram) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `trust.key` file (or other appropriate keystore file) to the `\VMware
    View\Server\sslgateway\conf` subdirectory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `locked.properties` file to the `\VMware View\Server\sslgateway\conf`
    subdirectory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart the VMware View Security Server service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice the simplicity of the preceding steps if a VMware View environment is
    leveraging the same PKI and same keystore for the CA certificate, which is likely
    almost all VMware View solutions using smart cards. Therefore, it is quite possible
    to script the copying of the files from one server to the other, as well as restarting
    the appropriate service (for example, VMware View Security Server service) when
    necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring U.S. Department of Defense CAC Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**U.S. Department of Defense Common Access Card (DoD CAC)** (smart card) authentication
    is a **Homeland Security Presidential Directive 12 (HSPD-12)** approved mechanism
    used by U.S. military installations for authentication to IT assets. CACs also
    serve as a general identification card pursuant to the Geneva Conventions.'
  prefs: []
  type: TYPE_NORMAL
- en: Personnel log in to their physical desktop by entering their CAC into a USB
    smart card reader, laptop smart card reader, a thin or zero client with an integrated
    card reader, or a keyboard with an integrated card reader. Once the card has been
    read, the end user is prompted to enter his PIN.
  prefs: []
  type: TYPE_NORMAL
- en: It is entirely possible to use CAC authentication inside the vDesktop without
    ever configuring it as an acceptable authentication mechanism to get to the vDesktop.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if ActivClient is installed and configured properly within a vDesktop
    but smart card authentication has not been configured on the View Connection Server
    environment, then the smart card cannot be used to connect to the vDesktop. However,
    once connected to the vDesktop, the smart card can be successfully used to authenticate
    within the VDI (for example, an RDP connection). In normal smart card operation,
    authentication using a smart card will prompt the end user for his/her PIN. While
    this scenario is possible, it is far from the preferred solution, as connecting
    into the VDI is not done via smart card authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring CAC authentication encompasses the techniques used in standard smart
    card authentication configuration and adds a few minor considerations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring CAC authentication is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On the VMware View Connection Server, navigate to the `\VMware View Server\Server\sslgateway\conf`
    subdirectory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a subdirectory named `certexport`. Within `\certexport`, place all of
    the `.cer` files that are applicable. This directory is used to generate a current
    or future `master keystore`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step of configuring CAC authentication is to generate or obtain a `master
    keystore`, which contains all of the U.S. DoD and intermediate CA certificates.
    The `master keystore` file should be placed in the `\sslgateway\conf` subdirectory
    found within the `VMware View installation` directory on the View Connection Server.
    Instructions on how to generate a `master keystore` are outlined later in this
    chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `truststore` files to the `\sslgateway\conf` subdirectory.![Configuring
    U.S. Department of Defense CAC Authentication](img/1124EN_09_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot is a representative screen capture of the `\\sslgateway\conf`
    subdirectory of working VMware View Connection Server configured for CAC authentication.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that all of the certificates are in the proper location, VMware View Connection
    Server must be configured to use the certificates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, open the `locked.properties` file, which can also be found in the `\sslgateway\conf`
    subdirectory. If the file does not exist, it should be created using Notepad or
    a similar utility.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The contents of the `locked.properties` file should be similar to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding text assumes that the `master keystore` file is actually named
    as `masterkeystore`. The `trustStoreType` = `JKS` defined that the trust store
    is a Java keystore generated with the **Java Runtime Environment (JRE)** `keytool.exe`
    or similar utility. The `useCertAuth` = `true` enabled the use of the certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Once the settings have been applied, restart the VMware View Connection Server
    service or the VMware View Security Server service. At this point, it’s also important
    to verify that the View Admin console is still functional, as a malformed `locked.properties`
    file can prevent the View Admin console from loading properly.
  prefs: []
  type: TYPE_NORMAL
- en: Certificate revocation configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **Certificate Revocation List (CRL)** is used to prevent users whose end user
    certificate has been revoked (for example, the end user is an employee who has
    been terminated) from successfully authenticating to the environment. VMware View
    supports CRLs and **Online Certificate Status Protocol (OCSP)** to check the certificate
    revocation status of a given certificate. If both OCSP and CRL are configured
    on a VMware View Connection Server or VMware View Security Server, VMware View
    will attempt to use OCSP first and then fall back to the use of a CRL if OCSP
    fails. VMware View will not fall back to OCSP from the use of a CRL if the CRL
    check fails.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the use of a CRL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The use of a CRL is configured by editing the `locked.properties` file and
    adding the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `enableRevocationchecking` and `allowCertCRLs` strings enables VMware View
    to perform certificate revocation checking. The `crlLocation` string is used to
    define the location of the CRL.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a value for `crlLocation` is `http://cert.demo.local/certEnroll/ocsp-ROOT_CA.crl`.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the use of OCSP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The use of a OCSP is configured by editing the `locked.properties` file and
    adding the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `enableRevocationchecking` and `allowCertCRLs` strings enables VMware View
    to perform a certificate revocation check. The `enableOCSP` string enables OCSP.
    The `ocspSigningCert` is used to define the certificate used by the OCSP authority
    and the `ocspURL` is used to define the location of OCSP responder.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the use of both a CRL and OCSP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To configure the use of both a CRL and OCSP, insert all of the preceding fields
    and their appropriate values into the `locked.properties` file. Please note that
    the `allowCertCRLs=true` string only needs to be listed once.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, the following should be added to the `locked.properties` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `ocspCRLFailover` string allows the VMware View Connection Server or VMware
    View Security Server to use a CRL if OCSP fails.
  prefs: []
  type: TYPE_NORMAL
- en: Prohibiting the use of Copy and Paste functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some environments, administrators may want to prevent end users from copying
    and pasting between their vDesktop and their thick or thin client. The proper
    way to prevent the Copy and Paste functions is via Group Policy of the vDesktops.
  prefs: []
  type: TYPE_NORMAL
- en: This is defined in the `PCOIP.ADM` template available on any View Connection
    Server in the `\extras` subdirectory. This setting can be found in `Computer Configuration\Admin
    Templates\PCoIP Session Variables\Not Overridable Admin Settings\Configure PCoIP
    Virtual Channels`.
  prefs: []
  type: TYPE_NORMAL
- en: Within this setting, there is an allowed and disallowed list. If a virtual channel
    is listed on both the allowed and disallowed list, it will be disallowed. In View
    4.6 and later, the virtual channel responsible for the clipboard (mksvchan) no
    longer needs to be explicitly mentioned. Instead, the administrator can simply
    check the disable clipboard processing on the PCoIP host and enable the policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the settings of the clipboard process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prohibiting the use of Copy and Paste functions](img/1124EN_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Disable clipboard processing on PCoIP host** setting is read at the time
    of connection or reconnection. Therefore, changing the setting from **Not Configured**
    to **Enabled**, for example, will go into effect on the next log in and not the
    existing session.
  prefs: []
  type: TYPE_NORMAL
- en: View Connection Server tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VMware View Connection Server uses tags to control the access to specific desktop
    pools in an environment with multiple View Connection Servers. Any given VMware
    View Connection Server can have no tags, one tag, or many tags. Tags are defined
    under **View Configuration** | **Servers** | **Edit View Connection Server Settings**
    in the View Admin console.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the use of a Connection Server tag (thinkvirt,
    in this case):'
  prefs: []
  type: TYPE_NORMAL
- en: '![View Connection Server tags](img/1124EN_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, a specific VMware View Connection Server has been
    assigned the **thinkvirt** tag. To assign multiple tags to a VMware View Connection
    server, separate the tags by either semicolons or commas.
  prefs: []
  type: TYPE_NORMAL
- en: Then, from within the configuration of a desktop pool, on the **Pool Settings**
    tab select **Browse** for configuration tagging.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the use of a restriction tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![View Connection Server tags](img/1124EN_09_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot would show multiple tags if multiple tags were in use
    and would allow the administrator to select none, some, or all of the available
    tags.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Tag** field will only be populated if at least one View Connection Server
    within the environment has a defined tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Connection Server Restrictions** dialog box, there are two options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**No restrictions:** This pool can be accessed from any VMware View Connection
    Server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restricted to these tags:** This pool can be accessed from one or more VMware
    View Connection Servers with the defined tags'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a matrix of tag connection permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Connection Server has defined tag? | Desktop pool is configured to use tags?
    | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| No | No | Able to connect |'
  prefs: []
  type: TYPE_TB
- en: '| No | One or more | Not able to connect |'
  prefs: []
  type: TYPE_TB
- en: '| One or more | No | Able to connect |'
  prefs: []
  type: TYPE_TB
- en: '| One or more | One or more | Able to connect only if one or more tags match
    |'
  prefs: []
  type: TYPE_TB
- en: One example of when this may be useful is if an organization has two separate
    inbound VPN environments. VPN_A is used by consultants and visitors. VPN_B is
    used by employees. If the organization wanted to restrict users of VPN_A to a
    desktop with limited capabilities and minimal applications installed, one or more
    separate View Connection Servers could be set up for VPN_A and VPN_B, respectively.
    The View Connection Servers would be tagged VPNA and VPNB, respectively. Then,
    the limited desktop pool would only allow connections from VPNA, whereas the fully
    functional desktop pool would only allow connections from VPNB.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that a VMware View solution can leverage more than one
    vCenter Server. Therefore, not only could tagging limit the pools an inbound user
    has access to but the backend desktop pools could live on a completely separate
    virtual infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you could use View Connection Server tagging to identify which
    users were forced to use two-factor authentication and which were not.
  prefs: []
  type: TYPE_NORMAL
- en: '![View Connection Server tags](img/1124EN_09_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous example, the end user has more than one View Connection Server
    (VCS) available to him. The Green VCS requires smart card authentication. For
    example, this VCS could be used by military staff or doctors who have been issued
    a common access card (CAC), whereby the Blue VCS could be used by civilians, interns,
    or temporary staff (who are not issued smart cards). Within the VDI there exists
    a Desktop Pool that has several sensitive financial applications as part of its
    base image. By using VMware View Connection Server tagging, the financial desktop
    pool can be configured to only allow incoming connections from the Green VCS,
    thereby enforcing the use of smart card authentication for incoming users.
  prefs: []
  type: TYPE_NORMAL
- en: Forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Forensics**, in terms of Information Technology, typically relates to the
    extraction of legal evidence from computer systems to support legal events. Forensics
    involves identifying, preserving, recovering, analyzing, and presenting collected
    data from a computer environment. Forensics is also a required component for many
    sensitive computing environments looking to leverage VDI solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forensics](img/1124EN_09_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To understand how forensics is impacted by VDI, it’s first important to understand
    where user-authored or user-manipulated data may reside.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary locations for user-authored or user-manipulated data are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operating system:** For VMware View solutions that do not leverage View Composer
    or do not leverage redirection of the users persona, user data will reside within
    the operating system partition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Persona:** For VMware View solutions that leverage Microsoft roaming profiles,
    a persona management solution, for example, Liquidware Labs ProfileUnity TM, or
    VMware Views persistent user data drives, user data will reside within the persona
    partition. For Microsoft roaming profiles, AppSense, or ProfileUnity, the user
    data will be stored on a network share. Therefore, ensuring that the network share
    that stores the user data is backed up according to the organizations policy is
    imperative as the location where forensics analysis will occur.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For solutions that use persistent user data drives, it is important to preserve
    these virtual disk files so that they can be attached to other virtual machines
    if the need to perform forensics arises. When user data resides in the persona
    layer, virtual machine volatility is of far less concern.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Network resources:** For network resources, such as file shares, web-based
    collaboration resources, the scope for preserving these data points is outside
    the scope of this book and relies more on understanding various platforms and
    how they provide auditing and data restoration capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Temporary location:** For solutions that leverage redirecting the users profile,
    its possible that configuration of the solution may miss user data due to misconfiguration
    and therefore, would be discarded during a vDesktop or desktop pool View Composer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The biggest challenge for VDI that requires forensics capabilities is the use
    of non-persistent desktop pools. Persistent desktop pools are automatically assigned
    once and therefore data, versioning, state, and so on is able to be maintained.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While a VDI solution is inherently secure in nature, as the end user’s data
    typically resides in a secure data center, it is still important to understand
    an organization’s security posture, policies, and attack vectors and take appropriate
    measures where necessary. With end users connecting from any location, such as
    an unsecured Wi-Fi connection at a coffee shop, an Apple iPad over the AT&T 3G
    network, a corporate LAN, or a home cable ISP, it is important to protect corporate
    data and intellectual property. The use of smart card authentication a solution
    rapidly gaining in popularity — is one strong approach for protecting the authentication
    entry point. Sound networking policies limiting traffic to defined ports, protocols,
    sources, and destinations is another key component of a secure VDI.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, understanding basic fundamentals of data forensics to ensure compliance,
    if necessary, is an important skill to have within the VDI solution team. While
    potentially the majority of VDI solutions will not require in-depth forensic capabilities,
    understanding the data points to preserve, monitor, and collect are significant.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter focuses on the process of migrating from a physical desktop
    solution to a virtual desktop solution. There are many different approaches that
    can be taken, and the advantages and disadvantages of each will be covered.
  prefs: []
  type: TYPE_NORMAL

- en: Chapter 4. Configuring Your New System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s an overview of the recipes that we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The `systemd` service and setting runlevels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting and stopping `systemd` services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the `systemd` journal for persistence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring services using `journalctl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring `logrotate`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring your boot environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring `smtp`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once your system is installed and the network is configured, it's time to start
    configuring everything else.
  prefs: []
  type: TYPE_NORMAL
- en: RHEL 7 comes with the `systemd init` daemon, which takes care of your daemon
    or service housekeeping and more, replacing the old SysV (UNIX System V) init
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Its main advantages are automatic dependency handling, parallel startup of services,
    and the monitoring of started services with the ability to restart crashed services.
  prefs: []
  type: TYPE_NORMAL
- en: For a good read on `systemd` and its inner workings, head over to [https://n0where.net/understanding-systemd](https://n0where.net/understanding-systemd).
  prefs: []
  type: TYPE_NORMAL
- en: The systemd service and setting runlevels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `systemd` service doesn't use runlevels as SysV or Upstart do. The alternatives
    for `systemd` are called targets. Their purpose is to group a set of `systemd`
    units (not only services, but also sockets, devices, and so on) through a chain
    of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Managing targets with `systemd` is pretty simple, as shown through the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List all target units, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This list shows all target units available followed by information regarding
    whether the target is enabled or not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, show the currently loaded target units.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `systemd` targets can be chained unlike SysV runlevels, so you''ll not
    only see one target but a whole bunch of them, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, change the default `systemd` target by running the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you want to change targets on the fly as you would in the past with
    runlevel or telinit. With `systemd`, this is accomplished in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take an overview of the former runlevels versus the `systemd` targets
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Runlevel | Target units | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `0` | `runlevel0.target` or `poweroff.target` | This is used to shut down
    and power off the system |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | `runlevel1.target` or `rescue.target` | This is used to enter a rescue
    shell |'
  prefs: []
  type: TYPE_TB
- en: '| `2` | `runlevel2.target` or `multi-user.target` | This is used to set up
    a command-line multiuser system |'
  prefs: []
  type: TYPE_TB
- en: '| `3` | `runlevel3.target` or `multi-user.target` | This is used to set up
    a command-line multiuser system |'
  prefs: []
  type: TYPE_TB
- en: '| `4` | `runlevel4.target` or `multi-user.target` | This is used to set up
    a command-line multiuser system |'
  prefs: []
  type: TYPE_TB
- en: '| `5` | `runlevel5.target` or `graphical.target` | This is used to set up a
    graphical multiuser system |'
  prefs: []
  type: TYPE_TB
- en: '| `6` | `runlevel6.target` or `reboot.target` | This is used to reboot the
    system |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more in-depth information about RHEL 7 and `systemd` targets, refer to
    the following link: [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/sect-Managing_Services_with_systemd-Targets.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/sect-Managing_Services_with_systemd-Targets.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Starting and stopping systemd services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although this recipe uses services by their base name, they can also be addressed
    by their full filename. For example, `sshd` can be substituted by `sshd.service`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps need to be performed to successfully start or stop `systemd`
    services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List all available `systemd` services, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This shows all service units available followed by information regarding whether
    the service is enabled or not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, list all the loaded `systemd` services and their status, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, get the status of a service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To get the status of a particular service, execute the following, substituting
    `<service>` with the name of the service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, start and stop the `systemd` services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To stop a `systemd` service, execute the following, substituting `<service>`
    with the name of the service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To start a `systemd` service, execute the following, substituting `<service>`
    with the name of the service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, enable and disable the `systemd` services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To enable a `systemd` service, execute the following, substituting `<service>`
    with the name of the service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To disable a `systemd` service, execute the following, substituting `<service>`
    with the name of the service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, configure a service to restart when crashed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's make the `ntpd` service restart if it crashes after 1 minute.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, create the directory, as follows: `/etc/systemd/system/ntpd.service.d`.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new file in that directory named `restart.conf` and add the following
    to it:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, reload the unit files and recreate the dependency tree using the following
    command:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, restart the `ntpd` service by executing the following command:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When requesting the status of a service, the most recent log entries are also
    shown when executed as `root`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The service status information can be seen in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Field | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Loaded` | This provides information on whether the service is loaded and
    enabled. It also includes the absolute path to the service file. |'
  prefs: []
  type: TYPE_TB
- en: '| `Active` | This provides information on whether the service is running, followed
    by the time it started. |'
  prefs: []
  type: TYPE_TB
- en: '| `Main PID` | This provides PID of the corresponding service, followed by
    its name. |'
  prefs: []
  type: TYPE_TB
- en: '| `Status` | This provides information about the corresponding service. |'
  prefs: []
  type: TYPE_TB
- en: '| `Process` | This provides information about the related process. |'
  prefs: []
  type: TYPE_TB
- en: '| `Cgroup` | This provides information about related control groups. |'
  prefs: []
  type: TYPE_TB
- en: 'In some (rare) cases, you want to prevent a service from being started, either
    manually or by another service; there is an option to mask the service, which
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To unmask, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When modifying service unit files (and this is not limited to services only),
    it is best practice to copy the original service file, which is located at `/lib/systemd/system`
    to `/etc/systemd/service`. Alternatively, you can create a directory in `/etc/systemd/service`
    appended with `.d`, in which you will create `conf` files containing only the
    directives that you wish to add or change, as in the previous recipe. The advantage
    of the latter is that you don't need to keep up with changes in the original service
    file as it will be "updated" with whatever is located in the `service.d` directory.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about managing `systemd` services, go to [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/sect-Managing_Services_with_systemd-Services.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/sect-Managing_Services_with_systemd-Services.html).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the systemd journal for persistence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the journal doesn't store log files on disk, only in memory or the
    `/run/log/journal` directory. This is sufficient for the recent log history (with
    the journal) but not for long-term log retention should you decide to go with
    journal only and not with any other `syslog` solution.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configuring `journald` to keep more logs than memory allows is fairly simple,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `/etc/systemd/journald.conf` with your favorite text editor with root
    permissions by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that the line containing `Storage` is either remarked or set to `auto`
    or `persistent` and save it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you select `auto`, the journal directory needs to be manually created. The
    following command would be useful for this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, restart the journal service by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many other options that can be set for the journal daemon.
  prefs: []
  type: TYPE_NORMAL
- en: By default, all the data stored by `journald` is compressed, but you could disable
    this using `Compress=no`.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to limit the size of the journal files by either specifying
    a maximum retention age (`MaxRetentionSec`), a global maximum size usage (`SystemMaxUse`),
    or a maximum size usage per file (`SystemMaxFileSize`).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about using the journal with RHEL 7, go to [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-Using_the_Journal.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-Using_the_Journal.html).
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the man page for *journald (5)* for more information on what
    can be configured.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring services using journalctl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Systemd's journal has the added advantage that its controls allow you to easily
    narrow down on messages generated by specific services.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps you need to perform for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: First, display all the messages generated by your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will show all the messages generated on the system; run the following
    commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, display all system-related messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This command shows all the messages related to the system and not its users:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Display all the current user messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This command shows all messages related to the user that you are logged on
    with:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, display all messages generated by a particular service using the following
    command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, display messages by priority.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Priorities can be specified by a keyword or number, such as `debug` (7), `info`
    (6), `notice` (5), `warning` (4), `err` (3), `crit` (2), `alert` (1), and `emerg`
    (0). When specifying a priority, this includes all the lower priorities as well.
    For example, `err` implies that `crit`, `alert`, and `emerg` are also shown. Take
    a look at the following command line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, display messages by time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can show all messages from the current boot through the following commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can even show all the messages within a specific time range by running
    the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The examples presented in this recipe can all be combined. For instance, if
    you want to show all the error messages between 8:00 and 9:00 on 2015-07-24, your
    command would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'A lot of people tend to "follow" log files to determine what is happening,
    hoping to figure out any issues. The `journalctl` binary is an executable one,
    so it is impossible to use the traditional "following" techniques such as `tail
    –f` or using `less` and pressing *CTRL* + *F*. The good folks that coded `systemd`
    and `systemctl` have provided a solution to this: simply add `-f` or `--follow`
    as an argument to the `journalctl` command.'
  prefs: []
  type: TYPE_NORMAL
- en: Although most environments are used to create `syslog` messages to troubleshoot,
    the journal does provide the added value of being able to create simple filters
    that allow you to monitor their messages live.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about using the journal with RHEL 7, go to [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-Using_the_Journal.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-Using_the_Journal.html).
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the man page of *journalctl (1)* for more information on what
    can be configured.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring logrotate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `logrotate` tool allows you to rotate the logs that are generated by applications
    and scripts
  prefs: []
  type: TYPE_NORMAL
- en: It keeps your log directories clutter-free and minimizes disk usage when correctly
    configured.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `logrotate` tool is installed by default, but I will include the installation
    instructions here for completeness. This recipe will show you how to rotate logs
    for `rsyslog`. We will rotate the logs everyday, add an extension based on the
    date, compress them with a one-day delay, and keep them for 365 days. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, to install `logrotate`, perform the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that it''s enabled through the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `/etc/logrotate.d/syslog` with your favorite editor. The contents of this
    file are the following, by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, replace this with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `logrotate` tool is a script that is launched by cron everyday.
  prefs: []
  type: TYPE_NORMAL
- en: The directives added to the default `logrotate` definition are `compress`, `daily`,
    `delaycompress`, `dateext`, `missingok`, and `rotate`.
  prefs: []
  type: TYPE_NORMAL
- en: The `compress` directive compresses old versions of the log files with gzip.
    This behavior is somewhat changed by specifying `delaycompress`. This causes us
    to always have the most recently rotated log file available uncompressed.
  prefs: []
  type: TYPE_NORMAL
- en: The `daily` directive makes `logrotate` execute the definition every day. The
    `rotate` directive only keeps `x` rotated log files before deleting the oldest.
    In this case, we have specified this to be 365, which means that while rotating
    daily, the logs are kept for 365 days.
  prefs: []
  type: TYPE_NORMAL
- en: The `missingok` directive makes it alright for `syslog` to not create a file,
    which, however unlikely, is possible.
  prefs: []
  type: TYPE_NORMAL
- en: The `dateext` directive appends a date to the rotated file in the form of `yyyymmdd`
    instead of a number, which is the default.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `/etc/logrotate.conf` file contains the defaults directives for all definitions.
    If you don't specifically use a directive within a definition for a file, the
    values in this file will be used if specified.
  prefs: []
  type: TYPE_NORMAL
- en: It would make sense to change the settings in this file so that all the definitions
    are affected, but this is not practical; not all log files are made equal. The
    `syslog` service generates a lot of messages, and it would probably clutter up
    your system before long. However, yum, for instance, doesn't generate a lot of
    messages, and it keeps this log file readable for much longer than your `syslog`
    files. This, by the way, is reflected in the definition for yum.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to debug your new configuration, this can be achieved by executing
    the following to test just one configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the following to test everything:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take a look at the man page of *logrotate (8)* for more information on configuring
    `logrotate`.
  prefs: []
  type: TYPE_NORMAL
- en: Managing time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RHEL 7 comes preinstalled with Chrony. While everybody knows Ntpd, Chrony is
    a newcomer to the game of timekeeping.
  prefs: []
  type: TYPE_NORMAL
- en: Chrony is a set of programs that maintains the time on your computer using different
    time sources, such as NTP servers, your system's clock, and even custom-made scripts/programs.
    It also calculates the rate at which the computer loses or gains time to compensate
    while no external reference is present—for example, if your NTP server(s) is(are)
    down.
  prefs: []
  type: TYPE_NORMAL
- en: Chrony is a good solution for systems which are intermittently disconnected
    and reconnected to a network.
  prefs: []
  type: TYPE_NORMAL
- en: Ntpd should be considered for systems that are normally kept on permanently.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When talking about managing time in RHEL, it can be done through:'
  prefs: []
  type: TYPE_NORMAL
- en: Chrony
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ntpd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll take a look at each of the methods separately.
  prefs: []
  type: TYPE_NORMAL
- en: Managing time through chrony
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ensure that `chrony` is installed and enabled, and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install `chrony` through the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable `chrony`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open `/etc/chrony.conf` with your favorite editor and look for lines starting
    with the `server` directive using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, replace these lines with NTP servers that are near you and save the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `iburst` option causes NTP to send a burst of eight packets at the next
    poll instead of just one if the time master is unavailable, causing the NTP daemon
    to speed up time synchronization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, restart `chrony` by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Managing time through ntpd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ensure that `ntpd` is installed and enabled, and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install `ntpd` by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable `ntpd` through this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `/etc/ntp.conf` with your favorite editor and look for the lines starting
    with the `server` directive. Run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace these lines with the NTP servers near you and save the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the contents of `/etc/ntp/step-tickers` with all your NTP servers,
    one per line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, restart `ntpd` by executing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While `ntpd` is the obvious choice for time synchronization, it doesn't fare
    well in environments where time masters are intermittently accessible (for whatever
    reason). In these environments, `chronyd` thrives. Also, `ntpd` can be quite complex
    to configure correctly, whereas `chronyd` is a little bit simpler.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for modifying `/etc/ntp/step-tickers` when using the `ntpd` file
    is for the startup of the service. It uses `ntpdate` to synchronize time in one
    step before actually starting the NTP daemon itself, which is a lot slower in
    synchronizing time.
  prefs: []
  type: TYPE_NORMAL
- en: 'To figure out whether your system is synchronized, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For `chrony`, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For `ntpd`, run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your output will be similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The asterisk (`*`) in front of an entry means that your system is synchronized
    to this remote system's clock.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on configuring `chrony` for RHEL 7, go to [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-Configuring_NTP_Using_the_chrony_Suite.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-Configuring_NTP_Using_the_chrony_Suite.html).
  prefs: []
  type: TYPE_NORMAL
- en: For more information on configuring `ntpd` for RHEL 7, go to [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-Configuring_NTP_Using_ntpd.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-Configuring_NTP_Using_ntpd.html).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your boot environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GRUB2 is the default boot loader for RHEL 7\. By default, it doesn't use any
    fancy configuration options, but it is wise to at least secure your grub boot
    loader.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many advantages to having your grub and boot environment output to
    serial console in an enterprise environment. Many vendors integrate virtual serial
    ports in their remote control systems, as does KVM. This allows you to connect
    to the serial port and easily grab whatever is displayed in a text editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting a password on the GRUB2 boot loader mitigates possible hacking attempts
    on your system when you have physical access to the server or console. Perform
    the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: First, edit `/etc/sysconfig/grub` with your favorite editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, modify the `GRUB_TERMINAL_OUTPUT` line to include both console and serial
    access by executing the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `GRUB_SERIAL_COMMAND` entry, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `/etc/grub.d/01_users` file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, update your `grub` configuration by running the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The behavior of `grub2-mkconfig` is defined by the directives of the files in
    `/etc/grub.d`. These files, based on the configuration in `/etc/sysconfig/grub`,
    autogenerate all the menu entries in the `grub.cfg` file. You can modify its behavior
    by adding files with bash code in this directory.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, you could add a script that would add a menu entry to boot from
    the CD/DVD ROM drive.
  prefs: []
  type: TYPE_NORMAL
- en: The user root, which is added to `/etc/grub.d/01_users`, is the only one allowed
    to edit menu entries from the console, mitigating the weakness in GRUB to force
    rescue mode by adding `1` or `rescue` at the end of the `kernel` line.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `grub2-mkconfig` command is specific for BIOS-based systems. In order to
    do the same on UEFI systems, modify the command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to access the GRUB terminal over the same serial connection, you need
    to specify an additional kernel option: `console=ttyS0,9600n8`.'
  prefs: []
  type: TYPE_NORMAL
- en: You can either modify the kernel lines in `/boot/grub2/grub.cfg` (or `/boot/efi/EFI/redhat/grub.cfg`
    manually, but you do risk losing the change when your kernel is updated), or manually
    regenerate the file using `grub2-mkconfig`.
  prefs: []
  type: TYPE_NORMAL
- en: It's best to add it to the `GRUB_CMDLINE_LINUX` directive in `/etc/sysconfig/grub`
    and regenerate your `grub.cfg` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Passwords for GRUB users can be encrypted using the `grub2-mkpasswd-pbkdf2`
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can substitute the clear text password in `/etc/grub.d/01_users`
    with the generated hash. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'All the entries that are automatically generated are bootable but not editable
    from the console, unless you know the user and password. If you have custom menu
    entries and want to protect them in a similar way, add `--unrestricted` to the
    menu entry definition before the accolades. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about working with the GRUB2 boot loader, go to [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-Working_with_the_GRUB_2_Boot_Loader.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-Working_with_the_GRUB_2_Boot_Loader.html).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring smtp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many programs use (or can be configured to use) SMTP to send messages about
    their status and so on. By default, postfix is configured to deliver all messages
    locally and not respond to incoming mails. If you have an environment of multiple
    servers, this can become quite tedious to log on to each server to check for new
    mail. This recipe will show you how to relay messages to a central mail relay
    or message store that also uses SMTP.
  prefs: []
  type: TYPE_NORMAL
- en: Postfix is installed by default on RHEL 7.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll combine several options:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll allow the server to accept incoming mails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll only allow the server to relay messages from recipients in the `mydomain.lan`
    domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll forward all mails to the `mailhost.mydomain.lan` mailserver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To complete this recipe, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `/etc/postfix/main.cf` with your favorite editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `inet_interface` to accept mails on any interface through the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `smtpd_recipient_restrictions` directive to only allow incoming mails
    from the `mydomain.lan` domain, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the last two lines are indented. The `postfix` considers this
    block as one line instead of three separate lines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `relayhost` directive to point to `mailhost.mydomain.lan`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, save the `postfix` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create `/etc/postfix/sender_access` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, hash the `/etc/postfix/access` file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, restart `postfix`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To monitor your mail queue on the system, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Whenever your mail relay cannot forward mails, it stores them locally and tries
    to resend them at a later time. When you restore the mailflow, you can flush the
    queue and attempt delivery by executing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The kind of setup presented in this recipe is quite simple and assumes that
    you don't have malicious users on your network. There are software that allow
    you to mitigate spam and viruses. Popular solutions for this are `spamassassin`
    and `amavis`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on using postfix with RHEL 7, go to [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-email-mta.html#s2-email-mta-postfix](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-email-mta.html#s2-email-mta-postfix).
  prefs: []
  type: TYPE_NORMAL
- en: For more information on postfix, check out the postfix rpm (`rpm -ql postfix`)
    or go to [http://www.postfix.org/](http://www.postfix.org/). This site provides
    good documentation and *how to*'s for a large number of scenarios.
  prefs: []
  type: TYPE_NORMAL

["```\n    apt, we need to add the Ansible apt repository:\n\n    ```", "```\n\n    ```", "```\n    sudo apt install -y software-properties-common\n    sudo apt-add-repository --update ppa:ansible/ansible -y\n    ```", "```\n    sudo apt install ansible -y\n    ```", "```\n    ansible --version\n    ```", "```\n    ansible [core 2.15.4]\n    ```", "```\n    pip is installed. The following command should provide the current version of pip:\n\n    ```", "```\n\n    ```", "```\n    python3 get-pip.py --user\n    pip and Ansible for the current user (hence the --user option we used).\n    ```", "```\n\n    ```", "```\n    sudo python3 get-pip.py\n    sudo python3 -m pip install ansible\n    ```", "```\n    ansible --version\n    ```", "```\n    ansible [core 2.15.4]\n    ```", "```\nsudo hostnamectl set-hostname ans-web1\n```", "```\nsudo visudo\n```", "```\npackt ALL=(ALL) NOPASSWD:ALL\n```", "```\n127.0.0.1 neptune localhost\n192.168.122.70 ans-web1\n192.168.122.147 ans-web2\n192.168.122.254 ans-db1\n192.168.122.25 ans-db2\n```", "```\nssh-keygen\n```", "```\nssh-copy-id -i ~/.ssh/id_rsa.pub packt@ans-web1\nssh-copy-id -i ~/.ssh/id_rsa.pub packt@ans-web2\nssh-copy-id -i ~/.ssh/id_rsa.pub packt@ans-db1\nssh-copy-id -i ~/.ssh/id_rsa.pub packt@ans-db2\n```", "```\nssh packt@ans-web1\n```", "```\nansible --version\n```", "```\n    ansible --version command now yields the following config file path:\n    ```", "```\n    mkdir ~/ansible\n    ~/ansible directory and invoking the ansible --version command shows the following config file:\n    ```", "```\n    cd ~/ansible\n    touch test.cfg\n    ANSIBLE_CONFIG=test.cfg ansible --version\n    ```", "```\nmkdir ~/ansible\ncd ~/ansible\ntouch ansible.cfg\n```", "```\n[webservers]\nans-web1\nans-web2\n[databases]\nans-db1\nans-db2\n```", "```\n[webservers]\nans-web[1:2]\n```", "```\n[all_servers]\n172.16.191.[11:15]\n```", "```\n[platforms:children]\nubuntu\ndebian\n```", "```\nansible-inventory -i ./hosts –-list --yaml\n```", "```\nansible [OPTIONS] -m MODULE -a ARGS PATTERN\n```", "```\nansible -m ping all\n```", "```\nansible -m user -a \"name=packt state=present\" all\n```", "```\nansible -m user -a \"name=packt state=present uid=1000 group=1000\" all\n```", "```\nansible -m ping ans-web1\n```", "```\nansible -m ping ans-web*\nansible -m ping webservers\n```", "```\ndeprecation_warnings = False\n```", "```\nansible-doc --list\n```", "```\nansible-doc user\n```", "```\nansible -bK -m user -a \"name=webuser state=present\" webservers\n```", "```\nBECOME password:\n```", "```\nansible -m user -a \"name=webuser state=present\" webservers\n```", "```\npip install passlib\n```", "```\nansible webservers -m user \\\n    -e \"password=changeit!\" \\\n    -a \"name=webuser \\\n        update_password=always \\\n        password={{ password | password_hash('sha512') }}\"\n```", "```\nansible -m user -a \"name=webuser state=absent remove=yes force=yes\" webservers\n```", "```\nansible -m package -a \"name=nginx state=present\" webservers\n```", "```\nansible -m package -a \"name=mysql-server state=present\" databases\n```", "```\nansible -m apt -a \"upgrade=dist update_cache=yes\" ubuntu\n```", "```\nansible -m service -a \"name=nginx state=restarted\" webservers\n```", "```\nansible -m service -a \"name=mysql state=restarted\" 'databases:!debian'\n```", "```\nansible -m service -a \"name=mysqld state=restarted\" 'databases:!ubuntu'\n```", "```\nansible -m reboot -a \"reboot_timeout=3600\" webservers\n```", "```\nansible -m user -a \"name=webuser state=present\" webservers\n```", "```\nansible-playbook create-user.yml\n```", "```\nansible-playbook delete-user.yml\n```", "```\nUser = Playbook(username, password)\n```", "```\n  vars:\n    username: webuser\n```", "```\nansible-playbook create-user.yml\n```", "```\nansible-playbook delete-user.yml\n```", "```\n    webservers so that it matches the group we’re targeting. However, we should prefer to use the .yml extension so that we’re consistent with the file’s YAML format. Ansible accepts both naming conventions. Here’s the current tree structure of our project directory:\n    ```", "```\nansible-playbook create-user.yml\nansible-playbook delete-user.yml\n```", "```\n    password: \"{{ password | password_hash('sha512') }}\"\n    update_password: always\n    ```", "```\n    webuser) and password (changeit!) by trying to SSH into one of the web servers (for example, ans-web1):\n\n    ```", "```\n    create-user playbook to create a different user with a different password. Let’s name this user webadmin; we’ll set the password to changeme!. One way to accomplish this task is to use the -e (--extra-vars) option parameter with ansible-playbook:\n\n    ```", "```\n\n    ```", "```\n\n    ```", "```\n    webuser account.\n    ```", "```\n    ansible-playbook -e '{\"username\": \"webadmin\"}' delete-user.yml\n    ```", "```\n    webuser: { password: changeit! }\n    ```", "```\n    webuser: { password: changeit! }\n    webadmin: { password: changeme! }\n    ```", "```\n    passwords.yml file with the following command:\n\n    ```", "```\n\n    The output for the preceding command shows the following:\n    ```", "```\n    ansible-vault view passwords.yml\n    ```", "```\n    vi) to edit your changes. If you want to re-encrypt your protected file with a different password, you can run the following command:\n\n    ```", "```\n\n    ```", "```\nmsg: \"{{ vars[username]['password'] }}\"\n```", "```\n    {{ vars[username] }}\n    ```", "```\n    webuser: { password: changeit! }\n    ```", "```\n    {{ vars[username]['password'] }}\n    ```", "```\n    --ask-vault-pass option to let Ansible know that our playbook needs vault access. Without this option, we’ll get an error when running the playbook. Here’s the relevant output for our debug task:\n    ```", "```\n    webuser record in /etc/passwd on the ans-web1 machine:\n\n    ```", "```\n\n    ```", "```\n    webuser:x:1001:1001:Regular web user:/home/webuser:/bin/sh\n    ```", "```\n    ansible.cfg file’s [defaults] section:\n\n    ```", "```\n\n    ```", "```\nansible-playbook create-user.yml\n```", "```\nansible-vault create --vault-id passwords@prompt passwords.yml\n```", "```\nansible-vault create --vault-id apikeys@prompt apikeys.yml\n```", "```\n    apikeys.yml file, which reads the corresponding vault ID password from the apikeys.pass file:\n\n    ```", "```\n    ansible-playbook --vault-id passwords@passwords.pass create-users-new.yml\n    ```", "```\n\n    ```", "```\nloop: \"{{ users }}\"\n```", "```\n    ansible-playbook create-users1.yml --limit ans-web1\n    ```", "```\n    ansible-playbook delete-users2.yml --limit ans-web1\n    ```", "```\n    ansible-playbook create-users2.yml --limit ans-web1\n    ```", "```\nansible-vault encrypt users_passwords.yml\n```", "```\nansible-playbook -–ask-vault-pass create-users.yml\n```", "```\nansible-playbook install-updates.yml\n```", "```\n    ansible-playbook -–ask-vault-pass create-users3.yml\n    ```", "```\n    ansible-playbook count-users.yml --limit ans-web1\n    ```", "```\n    max_allowed: 50\n    ```", "```\n- copy:\n    src: motd\n    dest: /etc/motd\n```", "```\n- template:\n    src: motd.j2\n    dest: /etc/motd\n```", "```\nThis server will be down for maintenance on Thursday night.\n```", "```\nans-web1 (172.16.191.12) will be down for maintenance on Thursday, April 8, 2021, between 2 - 3 AM (UTC-08:00).\n```", "```\n    ./templates folder.\n    ```", "```\n    ansible-playbook update-motd.yml\n    ```", "```\n    ans-web1 host and displays the content of the /etc/motd file:\n    ```", "```\n    ssh packt@ans-web1\n    ```", "```\n    /etc/hosts file on any of the hosts (for example, ans-web1) by using the following command:\n\n    ```", "```\n\n    The output shows the expected host records:\n    ```", "```\n    ssh packt@ans-web1\n    ping response:\n    ```", "```\nroles_path = ~/ansible\n```", "```\nansible-galaxy init create-users\n```", "```\n- Role create-users was created successfully\n```", "```\ntree\n```", "```\nansible-playbook create-users/tests/test.yml\nansible-playbook create-users/tests/test2.yml\n```"]
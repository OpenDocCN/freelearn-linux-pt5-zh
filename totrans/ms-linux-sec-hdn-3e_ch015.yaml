- en: 14 Vulnerability Scanning and Intrusion Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Join our book community on Discord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file83.png)'
  prefs: []
  type: TYPE_IMG
- en: There are lots of threats out there, and some of them might even penetrate your
    network. You'll want to know when that happens, so you'll want to have a good
    **Network Intrusion Detection System** (**NIDS**) or **Network Intrusion Prevention
    System** (**NIPS**) in place. In this chapter, we'll look at Snort, which is probably
    the most famous one. Then, I'll show you a way to cheat so that you can have a
    good NIDS/NIPS up and running in no time at all. I'll also show you a quick and
    easy way to set up an edge firewall appliance, complete with a built-in NIPS.
  prefs: []
  type: TYPE_NORMAL
- en: We've already learned how to scan a machine for viruses and rootkits by installing
    scanning tools on the machines that we want to scan. However, there are a lot
    more vulnerabilities for which we can scan, and I'll show you some cool tools
    that you can use for that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Snort and Security Onion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPFire and its built-in Intrusion Prevention System (IPS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning and hardening with Lynis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding vulnerabilities with the Greenbone Security Assistant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web server scanning with Nikto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, if you're ready, let's begin by digging into the Snort Network Intrusion
    Detection System.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Snort and Security Onion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Snort is a **Network Intrusion Detection System** (**NIDS**), which is offered
    as a free open source software product. The program itself is free of charge,
    but you'll need to pay if you want to have a complete, up-to-date set of threat
    detection rules. Snort started out as a one-man project, but it's now owned by
    Cisco. Understand, though, this isn't something that you install on the machine
    that you want to protect. Rather, you'll have at least one dedicated Snort machine
    someplace on the network, just monitoring all network traffic, watching for anomalies.
    When it sees traffic that shouldn't be there – something that indicates the presence
    of a bot, for example – it can either just send an alert message to an administrator
    or it can even block the anomalous traffic, depending on how the rules have been
    configured. For a small network, you can have just one Snort machine that acts
    as both a control console and a sensor. For large networks, you could have one
    Snort machine set up as a control console and have it receive reports from other
    Snort machines that are set up as sensors.
  prefs: []
  type: TYPE_NORMAL
- en: Snort isn't too hard to deal with, but setting up a complete Snort solution
    from scratch can be a bit tedious. After we look at the basics of Snort usage,
    I'll show you how to vastly simplify things by setting up a pre-built NIPS appliance.
  prefs: []
  type: TYPE_NORMAL
- en: Space doesn't permit me to present a comprehensive tutorial about Snort. Instead,
    I'll present a high-level overview and then present you with other resources if
    you want to learn about Snort in detail.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Also, you might be wondering how a NIDS and a NIPS are different. Well, a NIDS
    is supposed to do nothing but alert network administrators about the suspicious
    network traffic that it detects. A NIPS will not only alert the administrator,
    but will also automatically block the suspicious traffic. However, the lines between
    the two types of systems are somewhat blurred, because some systems that are marketed
    as a NIDS can be configured to function as a NIPS.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: First, let's download and install Snort.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining and installing Snort
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Snort 3**, the newest version of Snort, isn''t in the official repository
    of any Linux distro. So, you''ll need to get it from the Snort website. It used
    to be available as installer packages for either Windows or Linux, but that’s
    no longer the case. Now, with the introduction of Snort 3, it’s available either
    as source code that you’ll need to compile yourself or as a pre-built Docker container.
    Oddly, there’s no mention of the container option on the Snort home page, and
    I only found it after doing a DuckDuckGo search.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get Snort and Snort training from the official Snort website: [https://www.snort.org](https://www.snort.org).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hands-on lab – installing Snort via a Docker container
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll definitely want to go with the container option instead of the source
    code option. That’s because the directions for setting up the source code option
    aren’t as clear as they should be, and one particular library package doesn’t
    always compile properly. Instead of using the official Docker software, I’ll be
    showing you how to use Podman, which is Red Hat’s drop-in replacement for Docker.
    Podman’s security is better than that of Docker, and it’s available for pretty
    much every Linux distro. Podman is already installed on your AlmaLinux 8 and 9
    virtual machines, but you’ll need to install it yourself on Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ubuntu only, install the `podman` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On Ubuntu only, open the `/etc/containers/registries.conf` file in your text
    editor. Find this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Download and start the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, enter the container so that you can interact with the snort commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If this command executes successfully, you’ll find yourself at the `snorty@snort3`
    command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Validate the Snort configuration with this single-word command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Snort requires a set of rules that define the potential problems that it should
    analyze. Paying customers will receive up-to-date rulesets, while non-paying users
    can download rulesets that are about one month behind. An old ruleset from 2018
    comes with the Docker container, so you’ll want something that’s a bit more recent.
    You won’t be able to download the rulesets directly to your container, so you’ll
    need to download them to either your virtual machine or to your host machine,
    and then transfer them to the container. On either your host machine or in another
    terminal that’s connected to the virtual machine, download the latest community
    ruleset, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can’t use `scp` or `sftp` to connect to the container from the virtual
    machine or your host machine, but you can use them to connect to the virtual machine
    or host machine from the container. So, from within the container, use `sftp`
    to transfer in the new ruleset file. Your commands should look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'While still within the container, unarchive the ruleset file and transfer the
    new ruleset to its proper location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Test things out by examining a `.pcap` file that’s included with the example
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the tutorial videos at the Snort website. You can see them here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.snort.org/resources](https://www.snort.org/resources)'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re done, type exit to get out of the container. To shutdown the container,
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: End of lab
  prefs: []
  type: TYPE_NORMAL
- en: Here are some of the significant differences between the new Snort 3 and the
    older Snort 2 that I covered in previous editions of this book.
  prefs: []
  type: TYPE_NORMAL
- en: There were several cool graphical front-ends that you could install for Snort
    2, but there aren’t any for Snort 3\. So, the new Snort 3 is strictly a command-line
    mode program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snort 3 can save its output files in `.json` format, which makes it easy for
    centralized log aggregators to read and parse them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration files and rules files for Snort 3 are in `.yaml` format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Snort 3 rules syntax has been somewhat streamlined, making rules easier
    to write.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let’s look at a cool appliance that has another Intrusion Detection System
    built into it.
  prefs: []
  type: TYPE_NORMAL
- en: Using Security Onion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security Onion consists of a set of **Free Open-source Software** (**FOSS**)
    tools that you can install on your own local Linux machine. It’s also offered
    as a pre-built Linux distro image, which is really the preferred method of installation.
    In the previous editions of this book, I showed you the original version of Security
    Onion, which was built on Xubuntu Linux. This version had a graphical desktop
    interface, used Snort 2 as the IDS, and included several graphical front-ends
    for Snort. The new Security Onion 2 is a completely different animal. It’s now
    built on a text-mode installation of CentOS 7, and offers way more functionality
    over the original version. In addition to using it as an IDS/IPS, you can now
    use it as a forensics analyzer, a log file aggregator, and a log file analyzer.
    For log file collection and analysis, it includes the ELK stack.
  prefs: []
  type: TYPE_NORMAL
- en: ELK stands for **Elastic Search**, **Logstash**, and **Kibana**. Logstash, used
    with the appropriate collection agents on the end-points that you want to monitor,
    collects log files from the network end-points. Elastic Search stores the log
    messages in a searchable database. Kibana is the web-based graphical component
    that displays the collected log messages.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Instead of Snort, Security Onion 2 now uses Suricata, which is a Snort alternative.
    In place of the graphical front-ends for Snort, Security Onion 2 now uses the
    **Security Onion Console**, which is a web-based front-end.
  prefs: []
  type: TYPE_NORMAL
- en: For a couple of reasons, I’m not going to provide a hands-on lab for this. In
    the first place, there’s no real point, because you’ll find detailed tutorials
    on Security Onion’s YouTube channel. Also, there’s a good chance that any hands-on
    lab that I were to provide here would be outdated by the time you read this. That’s
    because the next version of Security Onion, which will be released some time in
    2023, will be based on Rocky Linux 9 instead of CentOS 7\. So, I’m sure that the
    installation and usage procedures will be somewhat different from what they are
    now.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download Security Onion 2 from here: [https://securityonionsolutions.com/](https://securityonionsolutions.com/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can find the Security Onion YouTube channel here: [https://www.youtube.com/@security-onion](https://www.youtube.com/@security-onion)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Fee-based support options, training options, and physical appliances with Security
    Onion pre-installed are also available.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In lieu of a lab, allow me to leave you with a screenshot of the Security Onion
    Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1: The Security Onion Console](img/file84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: The Security Onion Console'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s turn our attention to a cool pre-built firewall appliance that also
    has its own Intrusion Prevention System.
  prefs: []
  type: TYPE_NORMAL
- en: IPFire and its built-in Intrusion Prevention System (IPS)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When I wrote the original edition of this book, I included a discussion of IPFire
    in the Snort section. At that time, IPFire had Snort built into it. It was a neat
    idea because you had an edge firewall and an **Intrusion Detection System** (**IDS**)
    all in one handy package. But, in the summer of 2019, the IPFire folk replaced
    Snort with their own IPS. So, I've moved IPFire down here into its own section.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between an IDS and an IPS is that an IDS informs you of problems,
    but doesn't block them. An IPS also blocks them.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you think back to our discussion of firewalls in *Chapter 4*, *Securing Your
    Server with a Firewall – Part 1* and *Chapter 5*, *Securing Your Server with a
    Firewall -- Part 2*, I completely glossed over any discussion of creating the
    **Network Address Translation** (**NAT**) rules that you would need in order to
    set up an edge or gateway type of firewall. That's because there are several Linux
    distros and BSD distros that have been created specifically for this purpose.
    One such distro is **IPFire**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2: IPFire installer](img/file85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.2: IPFire installer'
  prefs: []
  type: TYPE_NORMAL
- en: 'IPFire is completely free of charge, and it only takes a few minutes to set
    up. You install it on a machine with at least two network interface adapters and
    configure it to match your network configuration. It''s a proxy type of firewall,
    which means that in addition to doing normal firewall-type packet inspection,
    it also includes caching, content filtering, and NAT capabilities. You can set
    up IPFire in a number of different configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: On a computer with two network interface adapters, you can have one connected
    to the internet and the other connected to the internal LAN.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With three network adapters, you can have one connection to the internet, one
    to the internal LAN, and one to the **Demilitarized Zone** (**DMZ**), where you
    have your Internet-facing servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With a fourth network adapter, you can have all of what we just mentioned, plus
    protection for a wireless network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With all that said, let's give it a try.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – Creating an IPFire virtual machine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You won''t normally run IPFire in a virtual machine. Instead, you''ll install
    it on a physical machine that has at least two network interfaces. But, just for
    the sake of letting you see what it looks like, setting it up in a virtual machine
    will do for now. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download IPFire from their website: [https://www.ipfire.org/](https://www.ipfire.org/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Create a virtual machine with two network interfaces. Set one to Bridged mode
    and leave the other in NAT mode. Install IPFire into this virtual machine. During
    the setup portion, select the Bridged adapter as the Green interface and select
    the NAT adapter as the Red interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you install IPFire, you''ll need to use the web browser of your normal
    workstation to navigate to the IPFire dashboard. Do this with this URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`https://192.168.0.190:444`'
  prefs: []
  type: TYPE_NORMAL
- en: (Of course, substitute your own IP address for your Green interface.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Firewall** menu, you'll see an entry for **Intrusion Prevention**.
    Click on that to get to this screen, where you can enable Intrusion Prevention.
    The first step for that is to click on the **Add provider** button that’s under
    the **Ruleset Settings** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.3: Click the Add provider button](img/file86.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 14.3: Click the Add provider button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the next page, select the ruleset that you want to use. Leave the **Enable
    automatic updates** checkbox enabled. Then, hit the **Add** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.4: Select the ruleset](img/file87.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 14.4: Select the ruleset'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will then see this screen, where you''ll select the interfaces for which
    you want to enable intrusion prevention. (Select both interfaces.) Then, select
    the **Enable Intrusion Prevention System** checkbox and click on Save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.5: Enable the IPS](img/file88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.5: Enable the IPS'
  prefs: []
  type: TYPE_NORMAL
- en: 'If all goes well, you''ll see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6: With the IPS enabled](img/file89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.6: With the IPS enabled'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Ruleset Settings** section, click the **Customize ruleset** button.
    On the next page, click on the rules that you want to enable. Then, at the bottom
    of the screen, click the **Apply** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.7: Select the desired rules](img/file90.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 14.7: Select the desired rules'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: View what's going on with the IPS by selecting **Log/IPS Logs**. (Note that
    what you see will depend upon which rules that you’ve chosen to enable. Even then,
    it might take a while for any entries to show up.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.8: Look at the IPS logs](img/file91.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 14.8: Look at the IPS logs'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the other menu items to view IPFire's other features.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have completed this lab – congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: You've just seen the easy way to set up an edge firewall with its own network
    IPS. Now, let's look at some scanning tools.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning and hardening with Lynis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lynis is yet another FOSS tool that you can use to scan your systems for vulnerabilities
    and bad security configurations. It comes as a portable shell script that you
    can use not only on Linux, but also on a variety of different Unix and Unix-like
    systems. It's a multipurpose tool that you can use for compliance auditing, vulnerability
    scanning, or hardening. Unlike most vulnerability scanners, you install and run
    Lynis on the system that you want to scan. According to the creator of Lynis,
    this allows for more in-depth scanning.
  prefs: []
  type: TYPE_NORMAL
- en: The Lynis scanning tool is available as a free-of-charge version, but its scanning
    capabilities are somewhat limited. If you need all that Lynis has to offer, you'll
    need to purchase an enterprise license.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Lynis on Red Hat/CentOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Red Hat, CentOS 7, and AlmaLinux 8/9 users will find an up-to-date version
    of Lynis in the EPEL repository. So, if you have EPEL installed, as I showed you
    in *Chapter 1*, *Running Linux in a Virtual Environment*, installation is just
    a simple matter of doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Installing Lynis on Ubuntu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ubuntu has Lynis in its own repository, but it''s just a little bit behind
    what''s current. If you''re okay with using an older version, the command to install
    it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you want the newest version for Ubuntu or if you want to use Lynis on operating
    systems that don't have it in their repositories, you can download Lynis from
    [https://cisofy.com/downloads/lynis/](https://cisofy.com/downloads/lynis/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The cool thing about this is that once you download it, you can use it on any
    Linux, Unix, or Unix-like operating system. (This even includes macOS, which I
    confirmed by running it on my old Mac Pro that was running with macOS High Sierra.)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Since the executable file is nothing but a common shell script, there''s no
    need to perform an actual installation. All you need to do is extract the archive
    file, `cd` into the resultant directory, and run Lynis from there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `lynis -h` command shows you the help screen, along with all of the Lynis
    commands that you need to know about.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning with Lynis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lynis commands work the same regardless of which operating system that you want
    to scan. The only difference is that if you're running it from the archive file
    that you downloaded from the website, you would `cd` into the `lynis` directory
    and precede the `lynis` commands with a `./`. (That's because, for security reasons,
    your own home directory isn't in the path setting that allows the shell to automatically
    find executable files.)
  prefs: []
  type: TYPE_NORMAL
- en: 'To scan your system that has Lynis installed, execute this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To scan a system that you just downloaded the archive file on, execute these
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Running Lynis from the shell script in your home directory presents you with
    this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This isn't hurting anything, so you can just hit Enter to continue. Or, if seeing
    this message really bothers you, you can change ownership of the Lynis files to
    the root user, as the message tells you. For now, I'll just press Enter.
  prefs: []
  type: TYPE_NORMAL
- en: Running a Lynis scan in this manner is similar to running an OpenSCAP scan against
    a generic security profile. The major difference is that OpenSCAP has an automatic
    remediation feature, while Lynis doesn't. Lynis tells you what it finds and suggests
    how to fix what it perceives to be a problem, but it doesn't fix anything for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Space doesn''t permit me to show the entire scan output, but I can show you
    a couple of example snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This warning message shows that I don't have password protection for my GRUB2
    bootloader. That may or may not be a big deal because the only way someone can
    exploit it is to gain physical access to the machine. If it's a server that's
    locked away in a room that only a few trusted individuals can access, then I'm
    not going to worry about it, unless rules from an applicable regulatory agency
    dictate that I do. If it's a desktop machine that's out in an open cubicle, then
    I would definitely fix that. (We'll look at GRUB password protection in *Chapter
    16*, *Security Tips and Tricks for the Busy Bee*.)
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **File systems** section, we can see some items with the **SUGGESTION**
    flag next to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Exactly what Lynis suggests comes near the end of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing we''ll look at is the scan details section at the end of the
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: For **Components**, there's a red **X** by **Malware Scanner**. That's because
    I don't have ClamAV or maldet installed on this machine, so Lynis couldn't do
    a virus scan.
  prefs: []
  type: TYPE_NORMAL
- en: For **Lynis Modules**, we see a question mark by **Compliance Status**. That's
    because this feature is reserved for the Enterprise version of Lynis, which requires
    a paid subscription. As we saw in the previous chapter, you have OpenSCAP profiles
    to make a system compliant with several different security standards, and it doesn't
    cost you anything. With Lynis, you have to pay for the compliance profiles, but
    you have a wider range to choose from. For example, Lynis Enterprise can scan
    for Sarbanes-Oxley compliance issues, while OpenSCAP can’t.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing I want to say about Lynis is in regard to the Enterprise version.
    In the following screenshot, which is from their website, you can see the current
    pricing and the differences between the different subscription plans:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.9: Pricing for Lynis Enterprise](img/file92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.9: Pricing for Lynis Enterprise'
  prefs: []
  type: TYPE_NORMAL
- en: As you see, you have choices.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll find information about pricing on the Cisofy website: [https://cisofy.com/pricing/](https://cisofy.com/pricing/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That pretty much wraps things up as regards our discussion of Lynis. Next, we'll
    look at an external vulnerability scanner.
  prefs: []
  type: TYPE_NORMAL
- en: Finding vulnerabilities with the Greenbone Security Assistant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous versions of this book, I told you about OpenVAS, which stands
    for Open Vulnerability Assessment Scanner. It’s still with us, but its publisher
    has changed the name to **Greenbone Security Assistant** (**GSA**). Although it’s
    a commercial product, Greenbone also offers a Free Open-source Community Edition
    that’s free-of-charge.
  prefs: []
  type: TYPE_NORMAL
- en: The Greenbone Security Assistant is something that you would use to perform
    remote vulnerability scans. You can use it to scan a variety of network devices.
  prefs: []
  type: TYPE_NORMAL
- en: The big three security distros are Kali Linux, Parrot Linux, and Black Arch.
    They're aimed at security researchers and penetration testers, but they contain
    tools that would also be good for just a normal security administrator of either
    the Linux or Windows variety. GSA is one such tool. All three of these security
    distros have their unique advantages and disadvantages. Since Kali is the most
    popular, we'll go with it for the demos.
  prefs: []
  type: TYPE_NORMAL
- en: You can download Kali Linux from [https://www.kali.org/get-kali/](https://www.kali.org/get-kali/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When you go to the Kali download page, you''ll see lots of choices. You can
    download a normal installer image for `x86`, `x86_64`, and Apple Silicon. Other
    options include:'
  prefs: []
  type: TYPE_NORMAL
- en: Images for ARM devices, such as the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-built virtual machine images for VMWare, VirtualBox, and QEMU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-built Docker containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images for mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Subsystem for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali is built from Debian Linux, so installing it and keeping it updated is
    pretty much the same as installing and updating Debian.
  prefs: []
  type: TYPE_NORMAL
- en: Greenbone Security Assistant is a rather memory-hungry program, so if you're
    installing Kali in a virtual machine, be sure to allocate at least 3 GB of memory.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The first thing you''ll want to do after installing Kali is to update it, which
    is done in the same way that you''d update any Debian/Ubuntu-type of distro. Then,
    install GSA, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `openvas` package is a **transitional package** that will automatically
    install all of the proper Greenbone packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the GSA installation completes, you''ll need to run a script that will
    create the security certificates and download the vulnerability database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This will take a long time, so you might as well go grab a sandwich and a coffee
    while it''s running. When it''s finally done, you''ll be presented with the password
    that you''ll use to log in to GSA. Write it down and keep it in a safe place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.10: Copy the password](img/file93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.10: Copy the password'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, start the Greenbone services by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure that everything works properly, you’ll need to manually sync the
    data feeds, and then restart the GVA services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait for 30 seconds, and then restart the services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Once the service startup has completed, open Firefox and navigate to [https://localhost:9392](https://localhost:9392).
    You'll get a security alert because GVA uses a self-signed security certificate,
    but that's okay. Just click on the **Advanced** button, and then click on **Add
    Exception**.
  prefs: []
  type: TYPE_NORMAL
- en: On the login page, enter `admin` as the user and then enter the password that
    was generated by the `gvm-setup` script.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.11: The GVA login screen](img/file94.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.11: The GVA login screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s all kinds of fancy stuff that you can do with GVA, but for now, we''ll
    just look at how to do a basic vulnerability scan. To begin, select **Tasks**
    from the **Scans** menu on the GVA dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12: Select Tasks](img/file95.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.12: Select Tasks'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the Tasks page comes up, look for the little magic wand at the upper left-hand
    corner. Roll your mouse cursor over this wand, and you’ll see the various choices
    for the Task Wizard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.13: Task Wizard choices](img/file96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.13: Task Wizard choices'
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we''ll just select the **Task Wizard** option, which will choose all
    of the default scan settings for us. The only thing you need to do here is enter
    the IP address of the machine that you want to scan, and then start the scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.14: Start a basic scan](img/file97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.14: Start a basic scan'
  prefs: []
  type: TYPE_NORMAL
- en: 'The scan will take some time, so you might as well go grab a drink:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.15: Performing a basic scan](img/file98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.15: Performing a basic scan'
  prefs: []
  type: TYPE_NORMAL
- en: 'The type of scan that you''re doing is named **Full and Fast**, which is the
    most comprehensive type of scan that’s now offered. To select another type of
    scan and to configure other scan options, use the **Advanced Task Wizard**, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.16: Selecting the scan options](img/file99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.16: Selecting the scan options'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the scan has completed, click on the **Scans/Results** menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.17: View the results](img/file100.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.17: View the results'
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of showing you some interesting stuff, I purposely chose a target
    machine that’s nearly 20 years old, with an outdated operating system and lots
    of vulnerabilities. Here, you see that the machine is using weak encryption algorithms
    for Secure Shell, which is classified as medium severity. Even worse is that it
    supports SSH version 1, which is classified as a high severity problem. Yikes!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.18: Scan results](img/file101.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.18: Scan results'
  prefs: []
  type: TYPE_NORMAL
- en: You also want to pay attention to the items that aren't flagged as vulnerabilities.
    For example, the **VNC security types** item shows that port `5900` is open. This
    means that the **Virtual Network Computing** (**VNC**) daemon is running, which
    allows users to remotely log in to this machine's desktop. If this machine were
    an Internet-facing machine, that would be a real problem because there's no real
    security with VNC like there is with Secure Shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking on a vulnerability item, I can see an explanation of the vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.19: An explanation of a vulnerability](img/file102.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.19: An explanation of a vulnerability'
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that the target machine, in this case, is a desktop machine. If
    it were a server, there's a good chance that we'd see even more problems.
  prefs: []
  type: TYPE_NORMAL
- en: And that pretty much wraps things up for the Greenbone Security Assistant. As
    I mentioned previously, there's a lot of awesome stuff that you can do with it.
    However, what I've shown you here should be enough to get you started. Play around
    with it and try out the different scan options to see the difference in results.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more about Kali Linux, you'll find a great selection
    of books about it on the Packt Publishing website.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Okay, you now know how to do a vulnerability scan with GSA. Now, let's look
    at a scanner that's specifically designed for web servers.
  prefs: []
  type: TYPE_NORMAL
- en: Web server scanning with Nikto
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Greenbone Security Assistant, which we just looked at, is a general-purpose
    vulnerability scanner. It can find vulnerabilities for most any kind of operating
    system or for most any server daemon. However, as we've just seen, a GSA scan
    can take a while to run, and it might be more than what you need.
  prefs: []
  type: TYPE_NORMAL
- en: Nikto is a special-purpose tool with only one purpose. That is, it's meant to
    scan web servers, and only web servers. It's easy to install, easy to use, and
    capable of doing a comprehensive scan of a web server fairly quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Nikto in Kali Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have Kali Linux, you''ll find that Nikto is already installed under
    the **Vulnerability Analysis** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.20: Nikto on the Kali Linux menu](img/file103.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.20: Nikto on the Kali Linux menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, your best bet is to ignore it, and instead use the more up-to-date
    version that you’ll download directly from GitHub. That’s because the Nikto signature
    database that’s installed on Kali hasn’t been updated since 2019, as you see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You used to be able to update the database with the `sudo nikto -update` command,
    but that no longer works because the author has deprecated the `-update` option.
    (I had hoped that doing a normal `sudo apt dist-upgrade` command would bring in
    some updates, but no such luck.) Now, the author recommends using the `git` commands
    to download and update Nikto. So, let’s look at how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab--Installing Nikto from Github
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make things easy, we’ll do this on Kali, because it already has all of the
    `perl` modules that Nikto needs to operate. If you do this on Debian or Ubuntu,
    it should work, but you’ll need to chase down the `perl` modules that it needs
    yourself. And, forget about doing this on AlmaLinux, because the necessary `perl`
    modules aren’t even in any of the AlmaLinux or EPEL repositories. (There’s an
    alternate way to install them, but that’s beyond the scope of this book.)
  prefs: []
  type: TYPE_NORMAL
- en: 'In your normal user home directory, clone the Nikto repository. Then, `cd`
    into the `nikto` directory, and checkout the current branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To run Nikto, cd into the program subdirectory, and invoke Nikto from there.
    For example, to see the Nikto help screen, do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Periodically, you’ll want to update the Nikto signature databases. Just `cd`
    into the `nikto` directory and do:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: End of lab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let’s do something useful with Nikto.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning a web server with Nikto
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To do a simple scan, use the `-h` option to specify the target host, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at some sample output. Here''s the top part:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: At the top, we can see that there's an `shtml.exe` file present, which is supposedly
    for the FrontPage web authoring program. I have no idea why it's there, considering
    that this is a Linux server and that that's a Windows executable. Nikto is telling
    me that by having that file there, someone could possibly do a **Denial of Service**
    (**DOS**) attack against this site.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can see that there are various scripts in the `/cgi-bin/` directory.
    You can see from the explanatory messages that that's not a good thing because
    it could allow attackers to execute commands on my server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the second part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see that there's an `author.exe` file in the `vti_bin` directory,
    which could theoretically allow someone to have authoring privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'And now, the final part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The final item of interest is the `passwd.txt` file that's in the `wwwboard`
    directory. Apparently, this password file is browsable, which is definitely not
    a good thing.
  prefs: []
  type: TYPE_NORMAL
- en: Now, before you accuse me of making these problems up, I will reveal that this
    is a scan of a real production website on a real hosting service. (And yes, I
    do have permission to scan it.) So, these problems are real and need to be fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a couple of other sample messages that I got from scanning a web server
    that''s running WordPress:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: To cut a long story short, both of these two problems could potentially allow
    an attacker to steal user credentials. The fix, in this case, would be to see
    whether the WordPress folk have issued any updates that would fix the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how can we protect a web server against these kinds of vulnerabilities?
    Let''s see:'
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in the first example, you want to ensure that you don't have any risky
    executable files on your web server. In this case, we found two `.exe` files that
    might not hurt anything on our Linux server, since Windows executable files don't
    run on Linux. On the other hand, it could be a Linux executable that's disguised
    as a Windows executable. We also found some `perl` scripts that definitely would
    run on Linux and that could pose a problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the event that someone were to plant some malicious script on your web server,
    you'll want to have some form of mandatory access control, such as SELinux or
    AppArmor, that would keep the malicious scripts from accessing things that they
    shouldn’t access. (See *Chapter 10*, *Implementing Mandatory Access Control with
    SELinux and AppArmor*, for details of that).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may also consider installing a web application firewall, such as ModSecurity.
    Space doesn't permit me to cover the details of ModSecurity, but you'll find a
    book that covers it on the Packt Publishing website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep your systems updated, especially if you're running a PHP-based content
    management system such as WordPress. If you keep up with the IT security news,
    you'll see stories about WordPress vulnerabilities more often than you'd like
    to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I can’t reveal the URL of the site that I scanned here, but you can download
    a vulnerable virtual machine from [https://www.vulnhub.com/](https://www.vulnhub.com/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Choose a virtual machine to download, and then import it into VirtualBox. To
    do that, choose **Import Appliance** under the **File** menu.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are other scan options that you can see by just typing `./nikto` at the
    command line. For now though, this is enough to get you started with basic web
    server scanning.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've reached yet another milestone in our journey, and we saw some cool stuff.
    We started with a discussion about the basics of setting up Snort as a NIDS. Then,
    I showed you how to seriously cheat by deploying a specialty Linux distro that
    already has a NIDS set up and ready to go. As a bonus, I showed you a quick and
    easy edge firewall appliance that comes with a built-in Network Intrusion Prevention
    System.
  prefs: []
  type: TYPE_NORMAL
- en: Next, I introduced you to Lynis and how you can use it to scan your system for
    various vulnerabilities and compliance issues. Finally, we wrapped things up with
    working demos of the Greenbone Security Assistant and Nikto.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at how to block certain applications from running.
    I'll see you there.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which of the following best describes IPFire?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A host-based firewall appliance with a built-in Network Intrusion Detection
    System
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An edge firewall appliance with a built-in Network Intrusion Detection System
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following utilities is best for scanning Sarbanes-Oxley compliance
    issues?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lynis
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Lynis Enterprise
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Greenbone Security Assistant
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenSCAP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following best represents what Snort is?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HIDS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: GIDS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NIDS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: FIDS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following would you use as a general-purpose, external vulnerability
    scanner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Greenbone Security Assistant
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Nikto
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenSCAP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Lynis
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of these problems would you be most likely to find with a Nikto scan?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That the Samba service is running, although it shouldn't be
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: That the root user account is exposed to the Internet via SSH
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: That potentially malicious scripts reside in a CGI directory
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: That the root user account is configured with a weak password
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a unique characteristic about Lynis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a proprietary, closed-source vulnerability scanner.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a shell script that can be used to scan any Linux, Unix, or Unix-like operating
    system for vulnerabilities.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's an external vulnerability scanner.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It can only be installed on a specialty security distro, such as Kali Linux.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of these problems would you most likely find with Snort?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A root user account with a weak password
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Servers without active firewalls
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Cryptocoin mining malware active on the network
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Root user accounts exposed to the Internet via SSH
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lynis home page: [https://cisofy.com/lynis/](https://cisofy.com/lynis/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How Lynis and auditd are different: [https://linux-audit.com/how-are-auditd-and-lynis-different/](https://linux-audit.com/how-are-auditd-and-lynis-different/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Greenbone home page: [https://securityonionsolutions.com/](https://securityonionsolutions.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Snort home page: [https://www.snort.org/](https://www.snort.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nikto home page: [https://cirt.net/nikto2](https://cirt.net/nikto2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Security Onion home page: [https://securityonionsolutions.com/](https://securityonionsolutions.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tutorial for installing Greenbone Security Manager: [https://youtu.be/OUiRTv4Q80c](https://youtu.be/OUiRTv4Q80c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

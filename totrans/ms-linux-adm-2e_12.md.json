["```\n    sudo apt update -y && sudo apt install ca-certificates curl gnupg\n    ```", "```\n    sudo install -m 0755 -d /etc/apt/keyrings\n    curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n    sudo chmod a+r /etc/apt/keyrings/docker.gpg\n    ```", "```\n    echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n    ```", "```\n    sudo apt update -y\n    ```", "```\n    sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n    ```", "```\n    apt-cache policy docker-ce\n    ```", "```\n    docker is created. In order to be able to use Docker, your user should be added to the docker group. The existing groups in Linux are inside the /etc/group file. You can list the last lines (new groups are appended at the end of the file) to see the docker group as the last one created:\n\n    ```", "```\n\n    You can either add your existing user or create a new one. We will add our already existing user. Add the user with the following command:\n\n    ```", "```\n\n    ```", "```\n    groups\n    ```", "```\n    sudo systemctl enable docker\n    ```", "```\nsudo docker run hello-world\n```", "```\ndocker search ubuntu\n```", "```\ndocker pull ubuntu\n```", "```\ndocker run -it ubuntu\n```", "```\ndocker start amazing_hopper\n```", "```\ndocker stop amazing_hopper\n```", "```\ndocker rm recursing_murdock\n```", "```\n    apt install python3\n    ```", "```\ndocker network ls\n```", "```\n    docker ps command) to the bridge network. This will be done with the following command:\n\n    ```", "```\n\n    ```", "```\n    apt update -y\n    ```", "```\n    bridge) and the containerâ€™s name. We used the -i option for interactive output, the -t option for opening a pseudo TTY, and the -d option for detaching the container and running in the background.\n    ```", "```\n    apt install python3\n    ```", "```\n    -m option to add a comment that details our commit process and the -a option to specify the account user and the ID of the base image we used, in our case, the ID of the running container. The following screenshot shows a series of commands to help you to understand the process better:\n    ```", "```\nINSTRUCTION arguments\n```", "```\n    mkdir ~/my_docker_images && cd ~/my_docker_images\n    ```", "```\n    docker search debian command, the second image name on the output list will be the official Debian Linux image, called debian. We will use that. The contents of the Dockerfile are shown in the following screenshot:\n    ```", "```\n    -f option to specify the Dockerfile name and the -t option to specify the name of the image we want to create, in our case pydeb. In the next screenshot, you will see the output of the docker build command, showing all the steps needed to build the image, as specified in the Dockerfile. The build was successful:\n    ```", "```\n    pydeb images we just created.\n    ```", "```\n    unzip command:\n\n    ```", "```\n    webapp_dockerfile inside our present working directory. The contents of the Dockerfile are as follows:\n    ```", "```\n\n    ```", "```\ndocker build ~/my_docker_images/docker_webapp/focus -f webapp_dockerfile -t webapp\n```", "```\n    docker run -it -d -p 8080:80 webapp\n    ```"]
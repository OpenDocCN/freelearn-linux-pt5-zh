- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Linux Software Management
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux软件管理
- en: '**Software management** is an important aspect of Linux system administration
    because, at some level, you will have to work with software packages as a system
    administrator. Knowing how to work with software packages is an asset that you
    will master after finishing this chapter.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件管理**是Linux系统管理中的一个重要方面，因为作为系统管理员，你在某个层面上必须与软件包打交道。掌握如何处理软件包是你完成本章节后的一项重要技能。'
- en: In this chapter, you will learn how to use specific software management commands,
    as well as learn how software packages work, depending on your distribution of
    choice. You will learn about the latest **Snap** and **Flatpak** package types
    and how to use them on modern Linux distributions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节中，你将学习如何使用特定的软件管理命令，并了解软件包的工作方式，这取决于你选择的发行版。你将学习如何在现代Linux发行版上使用最新的**Snap**和**Flatpak**包类型。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节中，我们将覆盖以下主要内容：
- en: Linux software package types
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux软件包类型
- en: Managing software packages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件包管理
- en: Installing new desktop environments in Linux
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux中安装新的桌面环境
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: No special technical requirements are needed for this chapter, just a working
    installation of Linux on your system. **Ubuntu**, **Fedora** (or **AlmaLinux**),
    or **openSUSE** are equally suitable for this chapter’s exercises as we will cover
    all types of package managers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节不需要特别的技术要求，只需在系统上安装一个正常工作的Linux。**Ubuntu**、**Fedora**（或**AlmaLinux**）以及**openSUSE**都适用于本章节的练习，因为我们将涵盖所有类型的包管理器。
- en: Linux software package types
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux软件包类型
- en: As you’ve already learned by now, a Linux distribution comes packed with a kernel
    and applications on top of it. Although plenty of applications are already installed
    by default, there will certainly be occasions when you will need to install some
    new ones or remove ones that you don’t need.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你目前已经学到的，Linux发行版包含一个内核和其上的应用程序。虽然默认情况下已经安装了许多应用程序，但确实会有需要安装新应用程序或删除不需要的应用程序的情况。
- en: In Linux, applications come bundled into **repositories**. A repository is a
    centrally managed location that consists of software packages maintained by developers.
    These could contain individual applications or operating system-related files.
    Each Linux distribution comes with several official repositories, but on top of
    those, you can add some new ones. The way to add them is specific to each distribution,
    and we will get into more details later in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，应用程序捆绑在**仓库**中。仓库是一个集中管理的地点，包含由开发者维护的软件包。这些包可能包含单独的应用程序或与操作系统相关的文件。每个Linux发行版都有几个官方仓库，但除了这些，你还可以添加一些新的仓库。添加仓库的方式特定于每个发行版，我们将在本章稍后的内容中详细介绍。
- en: Linux has several types of packages available. Ubuntu uses `deb` packages, as
    it is based on Debian, while Fedora (or Rocky Linux and AlmaLinux) uses `rpm`
    packages, as it is based on RHEL. There is also openSUSE, which uses `rpm` packages
    too, but it was based on Slackware at its inception. Besides those, two new package
    types have been recently introduced – the snap packages developed by Canonical,
    the company behind Ubuntu, and the flatpak packages, developed by a large community
    of developers and organizations, including GNOME, Red Hat, and Endless.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Linux有几种类型的包可用。Ubuntu使用`deb`包，因为它基于Debian，而Fedora（或Rocky Linux和AlmaLinux）使用`rpm`包，因为它基于RHEL。还有openSUSE，它也使用`rpm`包，但最初基于Slackware。除此之外，还有两种新型包类型最近被引入——由Canonical公司（Ubuntu背后的公司）开发的Snap包，以及由GNOME、Red
    Hat和Endless等多个开发者和组织开发的Flatpak包。
- en: The DEB and RPM package types
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DEB和RPM包类型
- en: DEB and RPM are the oldest types of packages and are used by Ubuntu and Fedora,
    respectively. They are still widely used, even though the two new types mentioned
    earlier (snaps and flatpaks) are starting to gain ground on Linux on desktops.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: DEB和RPM是最古老的包类型，分别用于Ubuntu和Fedora。即使是前面提到的两种新包类型（snap和flatpak）开始在Linux桌面上得到应用，它们依然被广泛使用。
- en: Both package types are compliant with the **Linux Standard Base** (**LSB**)
    specifications. The last iteration of LSB is version 5.0, released in 2015\. You
    can find more information about it at [https://refspecs.linuxfoundation.org/lsb.shtml#PACKAGEFMT](https://refspecs.linuxfoundation.org/lsb.shtml#PACKAGEFMT).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种包类型都符合**Linux标准基础**（**LSB**）规范。LSB的最后一个版本是5.0，于2015年发布。你可以在[https://refspecs.linuxfoundation.org/lsb.shtml#PACKAGEFMT](https://refspecs.linuxfoundation.org/lsb.shtml#PACKAGEFMT)找到更多信息。
- en: The DEB package’s anatomy
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DEB 包的结构
- en: DEB was introduced with the Debian distribution back in 1993 and has been in
    use ever since on every Debian and Ubuntu derivative. A `deb` package is a binary
    package. This means that it contains the files of the program itself, as well
    as its dependencies and meta-information files, all contained inside an archive.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DEB 包在 1993 年随 Debian 发行版首次推出，并自那时起一直在每个 Debian 和 Ubuntu 衍生版中使用。`deb`包是一个二进制包。这意味着它包含了程序本身的文件，以及其依赖项和元信息文件，所有内容都包含在一个归档文件中。
- en: 'To check the contents of a binary `deb` package, you can use the `ar` command.
    It is not installed by default in Ubuntu 22.04.2 LTS, so you will have to install
    it yourself using the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看二进制`deb`包的内容，你可以使用`ar`命令。它在 Ubuntu 22.04.2 LTS 中默认没有安装，因此你需要使用以下命令自行安装：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There you go – you have installed a package in Ubuntu! Now, once `ar` has been
    installed, you can check the contents of any `deb` package. For this exercise,
    we’ve downloaded the `deb` package of a password manager called **1password**
    and checked its contents. To query the package, perform the following steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 好了——你已经在 Ubuntu 上安装了一个软件包！现在，一旦`ar`被安装，你就可以查看任何`deb`包的内容。为了这个练习，我们已经下载了一个名为**1password**的密码管理器的`deb`包并查看了它的内容。要查询该包，执行以下步骤：
- en: 'Use the `wget` command; the file will be downloaded inside your current working
    directory:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`wget`命令；文件将被下载到当前工作目录：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Figure 3.1 – Using the ar command to view the contents of a deb file](img/Figure_03_01_B19682.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 使用 ar 命令查看 deb 文件的内容](img/Figure_03_01_B19682.jpg)'
- en: Figure 3.1 – Using the ar command to view the contents of a deb file
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 使用 ar 命令查看 deb 文件的内容
- en: As you can see, the output listed four files, from which two are archives. You
    can also investigate the package with the `ar` command.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，输出列出了四个文件，其中两个是归档文件。你也可以使用`ar`命令调查这个包。
- en: 'Use the `ar x 1password-latest.deb` command to extract the contents of the
    package to your present working directory:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ar x 1password-latest.deb`命令将包的内容提取到当前工作目录：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'control.tar.gz archive contains meta-information packages and scripts to be
    run during the installation or before and after, depending on the case. The data.tar.xz
    archive contains the executable files and libraries of the program that are going
    to be extracted during the installation. You can check the contents with the following
    command:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: control.tar.gz 存档包含元信息包和在安装过程中或之前和之后运行的脚本，具体取决于情况。data.tar.xz 存档包含将在安装过程中提取的程序可执行文件和库。你可以使用以下命令检查其内容：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Important note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A `gpg` file is a file that uses the GNU Privacy Guard encryption. It uses an
    encryption standard known as OpenGPG (defined by the RFC4880 standard). It is
    usually used to sign package files as it offers a safe way for developers to distribute
    software. For more information on this matter, you can read the official documentation
    at [https://www.openpgp.org/](https://www.openpgp.org/).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`gpg`文件是一个使用 GNU Privacy Guard 加密的文件。它使用一种称为 OpenGPG（由 RFC4880 标准定义）的加密标准。它通常用于签署软件包文件，因为它为开发者提供了一种安全的方式来分发软件。有关此问题的更多信息，请阅读官方文档：[https://www.openpgp.org/](https://www.openpgp.org/)。'
- en: 'The following screenshot shows the outputs of these commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了这些命令的输出：
- en: '![Figure 3.2 – The contents of a deb package](img/Figure_03_02_B19682.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – deb 包的内容](img/Figure_03_02_B19682.jpg)'
- en: Figure 3.2 – The contents of a deb package
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – deb 包的内容
- en: Meta-information for each package is a collection of files that are essential
    for the programs to run. They contain information about certain package prerequisites
    and all their dependencies, conflicts, and suggestions. Feel free to explore everything
    that a package is made of using just the packaging-related commands.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每个包的元信息是一组文件，对于程序的运行至关重要。它们包含关于某些包的先决条件、所有依赖项、冲突和建议的信息。你可以使用与包装相关的命令自由探索包的所有组成部分。
- en: Now that we know what a Debian-based package consists of, let’s look at the
    components of a Red Hat package.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了一个基于 Debian 的软件包由什么组成，接下来我们来看一下 Red Hat 软件包的组成部分。
- en: The RPM packages anatomy
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RPM 包的结构
- en: The **Red Hat Package Manager** (**RPM**) packages were developed by Red Hat
    and are used in Fedora, CentOS, RHEL, AlmaLinux, Rocky Linux, SUSE, and openSUSE.
    RPM binary packages are similar to DEB binary packages in that they are also packaged
    as an archive.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Red Hat 包管理器**（**RPM**）包是由 Red Hat 开发的，广泛应用于 Fedora、CentOS、RHEL、AlmaLinux、Rocky
    Linux、SUSE 和 openSUSE 等系统。RPM 二进制包类似于 DEB 二进制包，因为它们也以归档格式进行打包。'
- en: 'Let’s test the `rpm` package of `1password`, just as we did with the `deb`
    package in the previous section:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下 `1password` 的`rpm`包，就像我们在上一节中测试 `deb` 包一样：
- en: 'Download the `rpm` package using the following command:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令下载 `rpm` 包：
- en: '[PRE5]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you want to use the same `ar` command, you will see that in the case of `rpms`,
    the archiving tool will not recognize the file format. Nevertheless, there are
    other more powerful tools to use.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用相同的`ar`命令，你会发现对于 `rpm` 包，归档工具无法识别该文件格式。不过，还有其他更强大的工具可以使用。
- en: 'We will use the `rpm` command, the designated low-level package manager for
    rpms. We will use the `-q` (query), `-p` (package name), and `-l` (list) options:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`rpm`命令，它是指定的低级包管理器，专门用于 rpm 包。我们将使用`-q`（查询）、`-p`（包名）和`-l`（列表）选项：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The output, contrary to the `deb` package, will be a list of all the files related
    to the application, along with their installation locations for your system.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出与 `deb` 包相反，将是与应用程序相关的所有文件的列表，以及它们在你系统中的安装位置。
- en: 'To see the meta-information for the package, run the `rpm` command with the
    `-q`, `-p`, and `-i` (install) options. The following is a short excerpt from
    the command’s output:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看包的元信息，运行带有`-q`、`-p`和`-i`（安装）选项的`rpm`命令。以下是该命令输出的一个简短摘录：
- en: '![Figure 3.3 – Meta-information of the rpm package](img/Figure_03_03_B19682.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – rpm 包的元信息](img/Figure_03_03_B19682.jpg)'
- en: Figure 3.3 – Meta-information of the rpm package
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – rpm 包的元信息
- en: The output will contain information about the application’s name, version, release,
    architecture, installation date, group, size, license, signature, source RPM,
    build date and host, URL, relocation, and summary.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将包含应用程序的名称、版本、发行版、架构、安装日期、分组、大小、许可证、签名、源 RPM、构建日期和主机、URL、重定位和摘要等信息。
- en: 'To see which other dependencies the package will require at installation, you
    can run the same `rpm` command with the `-q`, `-p`, and `–``requires` options:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看该包在安装时需要哪些其他依赖项，可以运行相同的 `rpm` 命令，附加`-q`、`-p` 和 `--requires` 选项：
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示的截图：
- en: '![Figure 3.4 – Package requirements](img/Figure_03_04_B19682.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 包要求](img/Figure_03_04_B19682.jpg)'
- en: Figure 3.4 – Package requirements
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 包要求
- en: You now know what Debian and Red Hat packages are and what they contain. DEB
    and RPM packages are not the only types available on Linux. They are perhaps the
    most widely used and known, but there are also other types, depending on the distribution
    you choose. Also, as we stated earlier, there are new packages available for cross-platform
    Linux use. Those newer packages are called flatpaks and snaps, and we will detail
    them in the following section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 Debian 和 Red Hat 包的概念以及它们包含的内容。DEB 和 RPM 包并不是 Linux 上唯一的包类型。它们可能是最常用和最广为人知的，但根据你选择的发行版，还有其他类型的包可用。此外，正如我们之前所提到的，现在有新的包类型可用于跨平台的
    Linux 使用。这些新包被称为 flatpaks 和 snaps，我们将在接下来的章节中详细介绍它们。
- en: The snap and flatpak package types
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: snap 和 flatpak 包类型
- en: '**Snap** and **Flatpak** are relatively new package types, and they are considered
    to be the future of apps on Linux. They both build and run applications in isolated
    containers for more security and portability. Both have been created to overcome
    the need for desktop applications’ ease of installation and portability.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**Snap** 和 **Flatpak** 是相对较新的包类型，被认为是 Linux 上应用程序的未来。它们都在隔离的容器中构建和运行应用程序，以提高安全性和可移植性。两者都旨在克服桌面应用程序安装的便捷性和可移植性的需求。'
- en: Even though major Linux distributions have large application repositories, distributing
    software for so many types of Linux distributions, each with its own kind of package
    types, can become a serious issue for **independent software vendors** (**ISVs**)
    or community maintainers. This is where both snaps and flatpaks come to the rescue,
    aiming to reduce the weight of distributing software.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 即使主要的 Linux 发行版拥有庞大的应用程序库，分发适用于众多 Linux 发行版的软件（每个发行版都有自己的包类型）也可能成为**独立软件供应商**（**ISV**）或社区维护者的一个严重问题。在这种情况下，snap
    和 flatpak 便应运而生，旨在减轻软件分发的负担。
- en: Let’s consider that we are ISVs, aiming to develop our product on Linux. Once
    a new version of our software is available, we need to create at least two types
    of packages to be directly downloaded from our website – a `.deb` package for
    Debian/Ubuntu/Mint and other derivatives, and a `.rpm` package for Fedora/RHEL/SUSE
    and other derivatives.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们是独立软件开发商（ISV），目标是在 Linux 上开发我们的产品。一旦我们的软件有了新版本，我们需要至少创建两种类型的包，以便直接从我们的网站下载
    —— 一个用于 Debian/Ubuntu/Mint 及其他衍生版的 `.deb` 包，一个用于 Fedora/RHEL/SUSE 及其他衍生版的 `.rpm`
    包。
- en: But if we want to overcome this and make our app available cross-distribution
    for most of the existing Linux distributions, we can distribute it as a flatpak
    or snap. The flatpak package would be available through **Flathub**, the centralized
    flatpak repository, and the snap package would be available through the Snap Store,
    the centralized snap repository. Either one is equally suitable for our aim to
    distribute the app for all major Linux distributions with minimal resource consumption
    and centralized effort.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们想要克服这个问题，并使我们的应用程序能够跨多个 Linux 发行版使用，我们可以将其作为 flatpak 或 snap 进行分发。flatpak
    包将通过**Flathub**提供，这是一个集中式的 flatpak 仓库，而 snap 包将通过 Snap Store 提供，这是一个集中式的 snap
    仓库。无论哪种方式，都同样适用于我们的目标，即以最小的资源消耗和集中化的努力将应用程序分发到所有主要的 Linux 发行版上。
- en: Important note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Both package types are trying to overcome the overall fragmentation of the Linux
    ecosystem when it comes to packages. However, these two packages have different
    philosophies, even though they want to solve the same problem. Snaps emerged as
    a new type of package that would be available on the IoT and server versions of
    Canonical’s Ubuntu, while flatpaks emerged from the need to have a coherent package
    type for desktop applications in Linux. Thus, flatpaks are not available on server
    or IoT versions of Linux, only for desktop editions. As both packages evolve,
    more and more distributions are starting to provide them by default, with flatpak
    being the winner in terms of the number of distributions that are offering it
    by default. On the other hand, snaps are mostly available by default on official
    Ubuntu versions, starting with version 23.04\. Flatpaks are available by default
    in Fedora, openSUSE, Pop!_OS, Linux Mint, KDE neon, and other distributions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种包类型都在努力克服 Linux 生态系统中包管理的整体碎片化问题。然而，这两种包有着不同的哲学，尽管它们的目标是解决相同的问题。Snap 作为一种新型的包出现，旨在支持
    Canonical 的 Ubuntu 在物联网和服务器版本中的使用，而 flatpak 则源自于需要为 Linux 桌面应用程序提供一个统一的包类型。因此，flatpaks
    仅适用于 Linux 的桌面版本，而在服务器或物联网版本中并不提供。随着这两种包的发展，越来越多的发行版开始默认提供它们，其中 flatpak 在默认提供的发行版数量上领先。另一方面，snap
    主要在官方 Ubuntu 版本中默认提供，从 23.04 版本开始。flatpaks 在 Fedora、openSUSE、Pop!_OS、Linux Mint、KDE
    neon 和其他发行版中默认提供。
- en: The takeaway from this situation is that the effort to distribute software for
    Linux is higher than in the case of the same app packaged for Windows or macOS.
    Hopefully, in the future, there will be only one universal package for distributing
    software for Linux, and this will all be for the better for both users and developers
    alike.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从这种情况中我们可以得出的结论是，Linux 的软件分发工作量比 Windows 或 macOS 的相同应用程序的打包要大。希望未来会有一个通用的 Linux
    软件分发包，这样对用户和开发者来说都会更加有利。
- en: The snap package’s anatomy
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: snap 包的结构
- en: The snap file is a **SquashFS** file. This means that it has its own filesystem
    encapsulated in an immutable container. It has a very restrictive environment,
    with specific rules for isolation and confinement. Every snap file has a meta-information
    directory that stores files that control its behavior.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: snap 文件是一个**SquashFS**文件。这意味着它有自己的文件系统，封装在一个不可变的容器中。它有一个非常严格的环境，具有特定的隔离和限制规则。每个
    snap 文件都有一个元信息目录，存储控制其行为的文件。
- en: Snaps, as opposed to flatpaks, are used not only for desktop applications but
    also for a wider range of server and embedded apps. This is because Snap has its
    origins in the Ubuntu **Snappy** for IoT and phones, the distribution that emerged
    as the beacon of convergence effort from Canonical, Ubuntu’s developer.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与 flatpaks 不同，snaps 不仅用于桌面应用程序，还广泛用于服务器和嵌入式应用程序。这是因为 Snap 起源于用于物联网和手机的 Ubuntu
    **Snappy**，这是 Canonical（Ubuntu 开发商）所推出的一个汇聚性努力的分发版本。
- en: The flatpak package’s anatomy
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: flatpak 包的结构
- en: Flatpak is based on a technology called **OSTree**. The technology was started
    by developers from GNOME and Red Hat, and it is now heavily used in Fedora Silverblue
    in the form of **rpm-ostree**. It is a new upgrade system for Linux that is meant
    to work alongside existing package management systems. It was inspired by Git
    since it operates similarly. Consider it as a version control system at the OS
    level. It uses a content-addressed object store, allows you to share branches,
    and offers transactional upgrades, as well as rollback and snapshot options, for
    the OS.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Flatpak 基于一种名为 **OSTree** 的技术。该技术由 GNOME 和 Red Hat 的开发者启动，现在在 Fedora Silverblue
    中以 **rpm-ostree** 形式广泛使用。这是一个旨在与现有包管理系统并行工作的 Linux 升级系统。它的灵感来源于 Git，因为它的工作方式相似。可以将其视为操作系统级的版本控制系统。它使用内容寻址的对象存储，允许共享分支，并为操作系统提供事务性升级、回滚和快照选项。
- en: Currently, the project has changed its name to `btrfs` filesystems.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，该项目已经更名为 `btrfs` 文件系统。
- en: Flatpak uses libostree, which is similar to rpm-ostree, but it is solely used
    for desktop application containers, with no bootloader management. Flatpak uses
    sandboxing based on another project named **Bubblewrap**, which allows unprivileged
    users to access user namespaces and use container features.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Flatpak 使用 libostree，它类似于 rpm-ostree，但仅用于桌面应用程序容器，并不涉及引导加载器管理。Flatpak 使用基于另一个名为
    **Bubblewrap** 的项目的沙箱技术，允许非特权用户访问用户命名空间并使用容器功能。
- en: Both snaps and flatpaks have full support for graphical installations but also
    have commands for easier installations and setup from the shell. In the following
    sections, we will focus solely on command operations for all package types.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Snaps 和 flatpaks 都完全支持图形化安装，但也提供了通过命令行进行更简便的安装和设置命令。在接下来的章节中，我们将专注于所有包类型的命令操作。
- en: Managing software packages
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理软件包
- en: Each distribution has its own `rpm` command, while the high-level tools are
    the `yum` and `dnf` commands. For openSUSE, another major RPM-based distribution,
    the low-level tool is the same `rpm` command, but in terms of high-level tools,
    the `zypper` command is used. For DEB-based distributions, the low-level command
    is `dpkg` and the high-level command is `apt` (or the now deprecated `apt-get`).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每个发行版都有自己的 `rpm` 命令，而高级工具包括 `yum` 和 `dnf` 命令。对于 openSUSE，另一个主要的基于 RPM 的发行版，低级工具是相同的
    `rpm` 命令，但在高级工具方面，则使用 `zypper` 命令。对于基于 DEB 的发行版，低级命令是 `dpkg`，高级命令是 `apt`（或现在已弃用的
    `apt-get`）。
- en: What is the difference between low-level and high-level package managers in
    Linux? The low-level package managers are responsible for the backend of any package
    manipulation and are capable of unpacking packages, running scripts, and installing
    apps. The high-end managers are responsible for dependency resolution, installing
    and downloading packages (and groups of packages), and metadata searching.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 中低级包管理器和高级包管理器的区别是什么？低级包管理器负责处理任何包操作的后端，并能够解包包、运行脚本和安装应用。高级包管理器负责依赖关系解析、安装和下载包（及一组包）以及元数据搜索。
- en: Managing DEB packages
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理 DEB 包
- en: Usually, for any distribution, package management is handled by the administrator
    or by a user with root privileges (`sudo`). Package management implies any type
    of package manipulation, such as installation, search, download, and removal.
    For all these types of operations, there are specific Linux commands, and we will
    show you how to use them in the following sections.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，对于任何发行版，包管理由管理员或具有 root 权限的用户（`sudo`）来处理。包管理包括任何类型的包操作，例如安装、搜索、下载和删除。对于所有这些操作，都有特定的
    Linux 命令，我们将在接下来的章节中向你展示如何使用它们。
- en: The main repositories of Ubuntu and Debian
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ubuntu 和 Debian 的主要软件仓库
- en: 'Ubuntu’s official repositories consist of about 60,000 packages, which take
    the form of binary `.deb` packages or snap packages. The configuration of the
    system repositories is stored in one file, the `/etc/apt/sources.list` file. Ubuntu
    has four main repositories, also called package sources, and you will see them
    detailed inside the `sources.list` file. These repositories are as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 的官方软件仓库包含约 60,000 个软件包，形式为二进制 `.deb` 包或 snap 包。系统仓库的配置存储在一个文件中，即 `/etc/apt/sources.list`
    文件。Ubuntu 有四个主要的仓库，也称为包源，你可以在 `sources.list` 文件中看到它们的详细信息。这些仓库如下：
- en: '`Main`: Contains free and open source software supported by Canonical'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Main`：包含由 Canonical 支持的自由和开源软件'
- en: '`Universe`: Contains free and open source software supported by the community'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Universe`：包含由社区支持的自由和开源软件'
- en: '`Restricted`: Contains proprietary software'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Restricted`：包含专有软件'
- en: '`Multiverse`: Contains software restricted by copyright'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Multiverse`：包含受版权限制的软件'
- en: All the repositories are enabled by default in the `sources.list` file. If you
    would like to disable some of them, feel free to edit the file accordingly.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的仓库在`/etc/apt/sources.list`文件中默认启用。如果你想禁用其中的一些，可以根据需要编辑该文件。
- en: 'In Debian, the repository information is stored in the same `/etc/apt/sources.list`
    file. The only difference is that it uses different names for the main package
    sources, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Debian 中，仓库信息存储在相同的`/etc/apt/sources.list`文件中。唯一的区别是，它使用不同的名称来标识主软件包源，如下所示：
- en: '`main`: Contains software that is compliant with Debian’s free software guidelines'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`：包含符合 Debian 自由软件准则的软件'
- en: '`contrib`: Software that can, or not, be compliant with free software guidelines
    but is not part of the main distribution'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contrib`：可能符合或不符合自由软件准则，但不是主发行版的一部分的软件'
- en: '`non-free`: Software that is not open source and is not compliant with free
    software guidelines'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`non-free`：非开源软件且不符合自由软件准则的软件'
- en: Debian’s and Ubuntu’s source files are very similar as they have the same information
    structure inside. What is different is the parts that are specific to each distribution’s
    package source.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Debian 和 Ubuntu 的源文件非常相似，因为它们内部具有相同的信息结构。不同之处在于各自特定的包源部分。
- en: Both are based on Debian’s **advanced package tool** (**APT**), so we will detail
    it in the following section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都基于 Debian 的**高级包管理工具**（**APT**），因此我们将在接下来的章节中详细讲解。
- en: APT-related commands
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与 APT 相关的命令
- en: Until four years ago, packages in any Debian-based distribution were implemented
    using the `apt-get` command. Since then, a new and improved command called `apt`
    (derived from the abbreviation `apt-get`, thus offering a more integrated experience.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 直到四年前，任何基于 Debian 的发行版都使用`apt-get`命令来实现软件包管理。从那时起，一个新的改进版命令`apt`诞生了（源自`apt-get`的缩写，因此提供了更集成的体验）。
- en: 'Before doing any kind of work with the `apt` command, you should update the
    list of all available packages in your repositories. You can do this with the
    following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`apt`命令进行任何操作之前，你应该更新所有可用软件包的列表。你可以通过以下命令来完成此操作：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The output of the preceding command will show you if any updates are available.
    The number of packages that require updates will be shown, together with a command
    that you could run if you want more details about them.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出将显示是否有可用的更新。需要更新的软件包的数量会显示出来，并附有一个命令，若你想了解更多详情，可以执行该命令。
- en: 'Before going any further, we encourage you to use the `apt --help` command
    as this will show you the most commonly used APT-related commands. The output
    is shown in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们建议你使用`apt --help`命令，因为它会显示最常用的与 APT 相关的命令。输出如下截图所示：
- en: '![Figure 3.5 – The most commonly used apt commands](img/Figure_03_05_B19682.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – 最常用的 apt 命令](img/Figure_03_05_B19682.jpg)'
- en: Figure 3.5 – The most commonly used apt commands
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 最常用的 apt 命令
- en: Let’s dive into some of these in more detail.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地了解其中的一些内容。
- en: Installing and removing packages
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装和删除软件包
- en: Basic system administration tasks include installing and removing packages.
    In this section, we will show you how to install and remove packages using the
    `apt` command.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的系统管理任务包括安装和删除软件包。在本节中，我们将向你展示如何使用`apt`命令安装和删除软件包。
- en: 'To install a new package, you can use the `apt install` command. We used this
    command at the beginning of this chapter when we talked about the DEB package’s
    anatomy. Remember that we had to install the `ar` command as an alternative to
    inspect `.deb` packages. Back then, we used the following command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装一个新的软件包，你可以使用`apt install`命令。我们在本章开始时谈到 DEB 包的结构时使用了此命令。记得当时我们必须安装`ar`命令作为替代品来检查`.deb`包。那时我们使用的命令是：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This command installed several packages on the system and among them the one
    that we need to fulfill our action. The `apt` command automatically installs any
    requisite dependencies too.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令在系统上安装了几个软件包，其中包括我们需要的用于完成操作的那个。`apt`命令还会自动安装任何必需的依赖项。
- en: To remove a package, you can use the `apt remove` or `apt purge` command. The
    first one removes the installed packages and all their dependencies installed
    by the `apt install` command. The latter will uninstall the packages, just like
    `apt remove`, but also deletes any configuration files created by the applications.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一个包，你可以使用`apt remove`或`apt purge`命令。前者会删除已安装的软件包及所有由`apt install`命令安装的依赖项。后者将卸载软件包，就像`apt
    remove`一样，但也会删除所有由应用程序创建的配置文件。
- en: 'In the following example, we are removing the `binutils` applications we installed
    previously using the `apt` `remove` command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们正在移除之前通过`apt`的`remove`命令安装的`binutils`应用：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The output will show you a list of packages that are no longer needed and remove
    them from the system, asking for your confirmation to continue. This is a very
    good safety measure as it allows you to review the files that are going to be
    deleted. If you feel confident about the operation, you can add a `-y` parameter
    at the end of the command, which tells the shell that the answer to any question
    provided by the command will automatically be *Yes*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示不再需要的软件包列表，并将其从系统中删除，系统会要求你确认是否继续。这是一个非常好的安全措施，它允许你审查将要删除的文件。如果你确信操作无误，可以在命令末尾添加`-y`参数，这样系统会自动回答命令中的任何问题为*是*。
- en: 'However, using `apt remove` will not remove all the configuration files related
    to the removed application. To see which files are still on your system, you can
    use the `find` command. For example, to see the files related to the `binutils`
    package that were not removed, we can use the following command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用`apt remove`并不会移除所有与已删除应用相关的配置文件。为了查看系统上仍然存在的文件，你可以使用`find`命令。例如，要查看与`binutils`包相关但没有被删除的文件，可以使用以下命令：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The output will show the directories (hence the `-type d` option that was used
    with the command), where binutils-related files remain after the removal of the
    package.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示目录（因此命令中使用了`-type d`选项），这些目录中仍然包含在删除包后残留的与`binutils`相关的文件。
- en: 'Another tool that’s used to remove packages and all the configuration files
    associated with them is `apt purge`. If you want to use the `apt purge` command
    instead of `apt remove`, you can use it as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用于删除软件包及其所有相关配置文件的工具是`apt purge`。如果你想使用`apt purge`命令来代替`apt remove`，可以按如下方式使用它：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The output is similar to the `apt remove` command, showing you which packages
    will be removed and how much space will be freed on the disk, and asking for your
    confirmation to continue the operation.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 输出类似于`apt remove`命令，显示将被删除的软件包以及将释放多少磁盘空间，并要求你确认是否继续操作。
- en: Important note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you plan on using `apt purge` to remove the same package (in our case, `binutils`),
    you will have to install it again as it was removed using the `apt` `remove` command.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算使用`apt purge`来移除相同的包（在我们这个例子中是`binutils`），你将需要重新安装它，因为它是通过`apt`的`remove`命令被移除的。
- en: 'The `apt remove` command has a `purge` option too, which has the same outcome
    as the `apt purge` command. The syntax is as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`apt remove`命令也有一个`purge`选项，其效果与`apt purge`命令相同。语法如下：'
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As stated earlier, when using the `apt remove` command, some configuration files
    are left behind in case the operation was an accident and the user wants to revert
    to the previous configuration. The files that are not deleted by the `remove`
    command are small user configuration files that can easily be restored. If the
    operation was not an accident and you still want to get rid of all the files,
    you can still use the `apt purge` command to do that by using the same name as
    those of the already removed packages.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，使用`apt remove`命令时，一些配置文件会被保留下来，以防操作是意外的，用户想要恢复到之前的配置。没有被`remove`命令删除的文件是一些小的用户配置文件，可以轻松恢复。如果操作不是意外的，并且你仍然想删除所有文件，你仍然可以使用`apt
    purge`命令来完成这个任务，方法是使用与已删除软件包相同的名称。
- en: Upgrading the system
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 升级系统
- en: 'Now and then, you will need to perform a system upgrade to ensure that you
    have all the latest security updates and patches installed. In Ubuntu and Debian,
    you will always use two different commands to accomplish this. One is `apt update`,
    which will update the repository list and makes sure it has all the information
    concerning the updates that are available for the system. The other command is
    `apt upgrade`, which upgrades the packages. You can use them both in the same
    command using metacharacters:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 时不时地，你需要进行系统升级，以确保你安装了所有最新的安全更新和补丁。在 Ubuntu 和 Debian 中，你始终需要使用两个不同的命令来完成这项任务。一个是
    `apt update`，它将更新仓库列表，并确保获取所有可用的系统更新信息。另一个命令是 `apt upgrade`，它会升级包。你可以使用元字符将这两个命令一起执行：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `update` command will sometimes show you which packages are no longer required,
    with a message similar to the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`update` 命令有时会显示哪些包不再需要，并给出类似以下的消息：'
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can use the `sudo apt autoremove` command to remove the unneeded packages
    after you perform the upgrade. The `autoremove` command’s output will show you
    which packages will be removed and how much space will be freed on the disk and
    will ask for your approval to continue the operation.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 升级完成后，你可以使用 `sudo apt autoremove` 命令来删除不再需要的包。`autoremove` 命令的输出将显示哪些包将被删除，以及将释放多少磁盘空间，并会请求你批准继续操作。
- en: 'Let’s say that during our work with Ubuntu, a new distribution is released,
    and we would like to use that as it has newer packages of the software we use.
    Using the command line, we can make a full distribution upgrade. The command for
    this action is as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在我们使用 Ubuntu 的过程中，发布了一个新的发行版，我们希望使用它，因为它包含了我们使用的软件的更新版本。通过命令行，我们可以进行一次完整的发行版升级。执行此操作的命令如下：
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Similarly, we can also use the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以使用以下命令：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Upgrading to a newer distribution version should be a flawless process, but
    this is not always a guarantee. It all depends on your custom configurations.
    No matter the situation, we advise you to do a full system backup before upgrading
    to a new version.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 升级到较新版本的发行版应该是一个无故障的过程，但这并不是始终能保证的。一切取决于你的自定义配置。无论情况如何，我们建议你在升级到新版本之前，先进行完整的系统备份。
- en: Managing package information
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 管理包信息
- en: Working with packages sometimes implies the use of information-gathering tools.
    Simply installing and removing packages is not enough. You will need to search
    for certain packages to show details about them, create lists based on specific
    criteria, and so on.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 处理包时有时需要使用信息收集工具。仅仅安装和删除包是不够的。你需要搜索某些包以显示它们的详细信息，创建基于特定标准的列表，等等。
- en: 'To search for a specific package, you can use the `apt search` command. It
    will list all the packages that have the searched string in their name, as well
    as others that use the string in various ways. For example, let’s search for the
    `nmap` package:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要搜索特定的包，你可以使用 `apt search` 命令。它会列出所有包，这些包的名称中包含搜索的字符串，也包括其他以不同方式使用该字符串的包。例如，我们来搜索
    `nmap` 包：
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output will show a considerably long list of packages that use the `nmap`
    string in various ways. You will still have to scroll up and down the list to
    find the package you want. For better results, you can pipe the output to the
    `grep` command, but you will notice a warning, similar to the one shown in the
    following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示一个相当长的包列表，这些包以各种方式使用 `nmap` 字符串。你仍然需要上下滚动列表，找到你想要的包。为了获得更好的结果，你可以将输出通过管道传递给
    `grep` 命令，但你会注意到一个警告，类似于下面截图所示：
- en: '![Figure 3.6 – Output of the apt search command](img/Figure_03_06_B19682.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图3.6 – apt search 命令的输出](img/Figure_03_06_B19682.jpg)'
- en: Figure 3.6 – Output of the apt search command
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – apt search 命令的输出
- en: Following the warning, the output shows a short list of packages that contain
    the `nmap` string, and among them is the actual package we are looking for, as
    highlighted in *Figure 3**.5*.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在警告之后，输出将显示一个包含 `nmap` 字符串的短包列表，其中有我们正在寻找的实际包，如 *图3.5* 所示。
- en: 'To overcome that warning, you can use a legacy command called `apt-cache search`.
    By running it, you will get a list of packages as output, but it won’t be as detailed
    as the output of the `apt` `search` command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服那个警告，你可以使用一个旧的命令 `apt-cache search`。执行此命令后，你将得到一个包的列表，但它的输出不会像 `apt` `search`
    命令的输出那样详细：
- en: '![Figure 3.7 – The output of the apt-cache command](img/Figure_03_07_B19682.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图3.7 – apt-cache 命令的输出](img/Figure_03_07_B19682.jpg)'
- en: Figure 3.7 – The output of the apt-cache command
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – apt-cache命令的输出
- en: 'Now that we know that the `nmap` package exists in Ubuntu repositories, we
    can investigate it further by showing more details using the `apt` `show` command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道`nmap`包存在于Ubuntu的仓库中，我们可以通过使用`apt`的`show`命令显示更多详细信息，进一步研究它：
- en: '[PRE19]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The output will show a detailed description, including the package’s name, version,
    priority, origin and section, maintainer, size, dependencies, suggested extra
    packages, download size, APT sources, and description.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示详细的描述，包括包的名称、版本、优先级、来源和部分、维护者、大小、依赖关系、建议的额外包、下载大小、APT源和描述。
- en: '`apt` also has a useful `list` command, which can list packages based on certain
    criteria. For example, if we use the `apt list` command alone, it will list all
    the packages available. But if we use different options, the output will be personalized.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`apt`也有一个有用的`list`命令，可以根据某些条件列出包。例如，如果我们单独使用`apt list`命令，它将列出所有可用的包。但如果我们使用不同的选项，输出将是个性化的。'
- en: 'To show the installed packages, we can use the `--` `installed` option:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示已安装的包，我们可以使用`--` `installed`选项：
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To list all the packages, use the following command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有的包，请使用以下命令：
- en: '[PRE21]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For comparative reasons, we will redirect each output to a different file,
    and then compare the two files. This is an easier task to do to see the differences
    between the two outputs since the lists are reasonably large. We will now run
    the specific commands, as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较的目的，我们将把每个输出重定向到不同的文件中，然后比较这两个文件。由于列表相当大，这样做是更容易查看两个输出之间的差异。我们现在将运行以下特定命令：
- en: '[PRE22]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can compare the two resulting files by using the `ls -la` command and observe
    the difference in size. You will see that the `list` file will be significantly
    larger than the `list-installed` file.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`ls -la`命令比较两个结果文件，并观察大小的差异。你会看到`list`文件的大小明显大于`list-installed`文件。
- en: There are other ways in which to compare the two outputs, and we would like
    to let you discover them by yourself, as an exercise for this sub-section. Feel
    free to use any other APT-related commands you would like, and practice with them
    enough to get familiar with their use. APT is a powerful tool, and every system
    administrator needs to know how to use it to sustain a usable and well-maintained
    Linux system. Usability is closely related to the apps that are used and their
    system-wide optimization.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他方式可以比较这两个输出，我们希望你能通过自己探索来发现它们，作为本小节的练习。随时使用任何其他与APT相关的命令，并练习它们，直到熟悉它们的用法。APT是一个强大的工具，每个系统管理员都需要知道如何使用它来维持一个可用且维护良好的Linux系统。可用性与所使用的应用程序以及它们的系统级优化紧密相关。
- en: Managing RPM packages
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理RPM包
- en: RPM packages are the equivalent packages for Linux distributions such as Fedora,
    AlmaLinux, Rocky Linux, RHEL, and openSUSE/SLES. They have dedicated high-level
    tools, including `dnf`, `yum`, and `zypper`. The low-level tool is the `rpm` command.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: RPM包是Fedora、AlmaLinux、Rocky Linux、RHEL和openSUSE/SLES等Linux发行版的等效包。它们有专门的高级工具，包括`dnf`、`yum`和`zypper`。低级工具是`rpm`命令。
- en: In RHEL, the default package manager is **Yellow Dog Updater, Modified** (**YUM**)
    and it is based on **Dandified YUM** (**DNF**), the default package manager in
    Fedora. If you use both Fedora and RHEL, for ease of use, you can use only one
    of those as they are the same command. For consistency, we will use YUM for all
    the examples in this chapter.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在RHEL中，默认的包管理器是**Yellow Dog Updater, Modified**（**YUM**），它基于**Dandified YUM**（**DNF**），这是Fedora中的默认包管理器。如果你同时使用Fedora和RHEL，为了方便起见，你可以只使用其中一个，因为它们是相同的命令。为了保持一致性，我们将在本章的所有示例中使用YUM。
- en: YUM is the default high-level manager. It can install, remove, update, and package
    queries, as well as resolve dependencies. YUM can manage packages installed from
    repositories or local `.``rpm` packages.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: YUM是默认的高级管理工具。它可以安装、删除、更新、查询包，并解决依赖关系。YUM可以管理从仓库或本地`.rpm`包安装的包。
- en: The main repositories in Fedora/RHEL-based distributions
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fedora/RHEL基础发行版的主要仓库
- en: 'Repositories are all managed from the `/etc/yum.repos.d/` directory, with configuration
    available inside the `/etc/yum.conf` file. If you do a listing for the `repos`
    directory, the output will be similar to the following screenshot:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库都由`/etc/yum.repos.d/`目录管理，配置文件位于`/etc/yum.conf`文件中。如果你列出`repos`目录，输出将类似于以下截图：
- en: '![Figure 3.8 – RHEL derivative repositories](img/Figure_03_08_B19682.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – RHEL衍生仓库](img/Figure_03_08_B19682.jpg)'
- en: Figure 3.8 – RHEL derivative repositories
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 – RHEL衍生版仓库
- en: All these files listed contain vital information about the repository, such
    as its name, mirror list, the `gpg` key’s location, and enabled status. All the
    ones listed are official repositories.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 列出的所有这些文件包含关于仓库的关键信息，例如名称、镜像列表、`gpg`密钥的位置和启用状态。列出的所有都是官方仓库。
- en: YUM-related commands
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与YUM相关的命令
- en: YUM has many commands and options, but the most commonly used ones are related
    to package installation, removal, search, information query, system update, and
    repository listing.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: YUM有许多命令和选项，但最常用的命令与软件包的安装、删除、搜索、信息查询、系统更新和仓库列出相关。
- en: Installing and removing packages
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装和删除软件包
- en: 'To install a package from a repository in AlmaLinux/Rocky Linux (or Fedora),
    simply run the `yum install` command. In the following example, we will install
    the GIMP application from the command line:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要从AlmaLinux/Rocky Linux（或Fedora）的仓库中安装软件包，只需运行`yum install`命令。在以下示例中，我们将从命令行安装GIMP应用程序：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you already have a package downloaded and would like to install it, you
    can use the `yum localinstall` command. Here, we have downloaded the 1password
    `.``rpm` package:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经下载了一个软件包并希望安装它，可以使用`yum localinstall`命令。这里，我们已经下载了1password的`.rpm`包：
- en: '[PRE24]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, we installed it with the following command:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用以下命令安装它：
- en: '[PRE25]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `localinstall` command automatically resolves the dependencies needed and
    shows the source (repository) for each of them.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`localinstall`命令会自动解决所需的依赖关系，并显示每个依赖项的来源（仓库）。'
- en: This is a very powerful command that makes using the `rpm` command itself almost
    redundant in some cases. The main difference between the `yum install` and `yum
    localinstall` commands is that the latter is capable of solving dependencies for
    locally downloaded packages. While the former looks for packages inside the active
    repositories, the latter looks for packages to install in the current working
    directory.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常强大的命令，在某些情况下，使用`rpm`命令本身几乎变得多余。`yum install`和`yum localinstall`命令的主要区别在于后者能够解决本地下载包的依赖问题。前者会在活动的仓库中查找包，而后者则会在当前工作目录中查找要安装的包。
- en: 'To remove a package from the system, use the `yum remove` command. We will
    remove the newly installed 1password package:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要从系统中删除一个软件包，请使用`yum remove`命令。我们将删除刚刚安装的1password软件包：
- en: '[PRE26]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You will be asked if you want to remove all the packages that the application
    installed. Choose accordingly and proceed.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会询问你是否要删除应用程序安装的所有软件包。根据需要选择并继续。
- en: Important note
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: The default action for pressing the *Enter* or *Return* key while inside a command
    dialogue in Fedora or RHEL derivatives is *N* (for no, or negative), while in
    Ubuntu, the default action is set to *Y* (for yes). This is a precautionary safety
    measure, which requires your extra attention and intervention.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在Fedora或RHEL衍生版的命令对话框中，按下*Enter*或*Return*键的默认操作是*N*（即否），而在Ubuntu中，默认操作是设置为*Y*（即是）。这是一个预防性的安全措施，需要你额外的注意和干预。
- en: The output, very similar to the output of the installation command, will show
    you which packages and dependencies will be removed if you proceed with the command.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 输出与安装命令的输出非常相似，会显示如果你继续执行命令，将移除哪些软件包和依赖项。
- en: As you can see, all the dependencies installed with the package using the `yum
    localinstall` command will be removed using the `yum remove` command. If you’re
    asked to proceed, type `y` and continue with the operation.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，使用`yum localinstall`命令安装的所有依赖项将通过`yum remove`命令被移除。如果系统提示你继续，输入`y`并继续操作。
- en: Updating the system
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新系统
- en: 'To upgrade a Fedora/RHEL-based system, we can use the `yum upgrade` command.
    There is also a `yum update` command, which has the same effect by updating the
    installed packages:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要升级一个基于Fedora/RHEL的系统，可以使用`yum upgrade`命令。还有一个`yum update`命令，效果相同，通过更新已安装的软件包：
- en: '[PRE27]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You can use the `-y` option to automatically respond to the command’s questions.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`-y`选项自动回答命令的提问。
- en: There is also an `upgrade-minimal` command, which installs only the newest security
    updates for packages.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个`upgrade-minimal`命令，它仅安装软件包的最新安全更新。
- en: Managing package information
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 管理软件包信息
- en: Managing files with `yum` is very similar to managing files with `apt`. There
    are plenty of commands to use, and we will detail some of them – the ones we consider
    to be the most commonly used. To find out more about those commands and their
    use, run `yum --help`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `yum` 管理文件与使用 `apt` 管理文件非常相似。有很多命令可以使用，我们将详细介绍其中一些——我们认为最常用的那些命令。要了解更多这些命令及其用法，可以运行
    `yum --help`。
- en: 'To see an overview of the `yum` command history and which package was managed,
    use the following command:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 `yum` 命令历史和管理的包概览，请使用以下命令：
- en: '[PRE28]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This will give you an output that shows every `yum` command that was run, how
    many packages were altered, and the time and date when the actions were executed,
    as in the following example:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出每个运行的 `yum` 命令、修改的包的数量以及执行操作的时间和日期，如以下示例所示：
- en: '![Figure 3.9 – Using the yum history command](img/Figure_03_09_B19682.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 使用 yum history 命令](img/Figure_03_09_B19682.jpg)'
- en: Figure 3.9 – Using the yum history command
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 使用 yum history 命令
- en: 'To show details about a certain package, we have the `yum info` command. We
    will query the `nmap` package, similar to what we did in Ubuntu. In CentOS, the
    command will be as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示有关某个包的详细信息，我们有 `yum info` 命令。我们将查询 `nmap` 包，类似于我们在 Ubuntu 中所做的。在 CentOS 中，命令如下：
- en: '![Figure 3.10 – Using the yum info command](img/Figure_03_10_B19682.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – 使用 yum info 命令](img/Figure_03_10_B19682.jpg)'
- en: Figure 3.10 – Using the yum info command
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 使用 yum info 命令
- en: The output will show you the name, version, release, source, repository, and
    description, very similar to what we saw with the `.``deb` packages.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示包的名称、版本、发布、源、仓库和描述，与我们在 `.deb` 包中看到的非常相似。
- en: 'To list all the installed packages or all the packages for that matter, we
    can use the `yum` `list` command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有已安装的包或所有包，我们可以使用 `yum` 的 `list` 命令：
- en: '[PRE29]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To see only the installed packages, run the following command:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要只查看已安装的包，请运行以下命令：
- en: '[PRE30]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we redirect the output of each command to specific files and then compare
    the two files, we will see the differences between them, similar to what we did
    in Ubuntu. The output shows the name of the packages, followed by the version
    and release number, and the repository from which it was installed. Here is a
    short excerpt:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将每个命令的输出重定向到特定文件，然后比较这两个文件，我们将看到它们之间的差异，类似于我们在 Ubuntu 中所做的。输出显示包的名称，接着是版本和发布号，以及它被安装的仓库。以下是一个简短的摘录：
- en: '![Figure 3.11 – Excerpt of the yum list installed command](img/Figure_03_11_B19682.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.11 – yum list installed 命令摘录](img/Figure_03_11_B19682.jpg)'
- en: Figure 3.11 – Excerpt of the yum list installed command
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – yum list installed 命令摘录
- en: As we have covered the most commonly used commands for both DEB and RPM files,
    we did not cover a specific package manager for openSUSE and SUSE SLE called **Zypper**.
    We will quickly show you some commands to get you acquainted with Zypper and let
    you give openSUSE a try next.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经介绍了 DEB 和 RPM 文件中最常用的命令，我们并没有涵盖 openSUSE 和 SUSE SLE 中特定的包管理器 **Zypper**。我们将快速展示一些命令，让你熟悉
    Zypper，并尝试一下 openSUSE。
- en: Working with Zypper
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Zypper
- en: In the case of openSUSE, **Zypper** is the package manager, similar to APT and
    DNF from Debian/Ubuntu and Fedora/RHEL. The following sections cover some useful
    commands.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在 openSUSE 中，**Zypper** 是包管理器，类似于 Debian/Ubuntu 和 Fedora/RHEL 中的 APT 和 DNF。以下部分涵盖了一些有用的命令。
- en: Installing and removing packages
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装和删除包
- en: 'Similar to using APT and DNF, the Zypper package manager in openSUSE is used
    to install and remove packages using almost the same syntax. For example, we will
    install `nmap` using the `zypper` command. But first, let’s search for the name
    in the respective repositories to see if it exists. We will use the following
    command:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 APT 和 DNF 类似，openSUSE 中的 Zypper 包管理器使用几乎相同的语法来安装和删除包。例如，我们将使用 `zypper` 命令安装
    `nmap`。但首先，我们先在各自的仓库中搜索包名，看看它是否存在。我们将使用以下命令：
- en: '[PRE31]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output of this command is a list of packages containing the `nmap` string
    in their name, together with the type and a summary:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的输出是一个包含包名中有 `nmap` 字符串的包列表，后面跟着类型和摘要：
- en: '![Figure 3.12 – Using the zypper search command in openSUSE](img/Figure_03_12_B19682.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12 – 在 openSUSE 中使用 zypper search 命令](img/Figure_03_12_B19682.jpg)'
- en: Figure 3.12 – Using the zypper search command in openSUSE
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – 在 openSUSE 中使用 zypper search 命令
- en: You will notice `S` in the first column of the list. It consists of the status
    of the package, and the output will be different if the package was already installed.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在列表的第一列看到`S`。它表示包的状态，如果该包已经安装，输出会有所不同。
- en: From the search output, we can see that the name of the package for the Nmap
    application is `nmap` (it could have been a different name, hence why we used
    the `search` command in the first place), so we will proceed and install it on
    our system. We will use the `zypper install` command to do so.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 从搜索输出中，我们可以看到 Nmap 应用程序的包名是`nmap`（它可能有不同的名称，这也是我们最初使用`search`命令的原因），因此我们将继续在系统上安装它。我们将使用`zypper
    install`命令来完成安装。
- en: Important note
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In openSUSE, you can use short versions of the command. For example, instead
    of using `zypper install`, you can use `zypper in`, followed by the name of the
    package you want to install. The same goes for `zypper update`, which can be used
    as `zypper up`, and also for `dist-upgrade`, where you can use `dup`. Alternatively,
    you can use the `zypper remove` command as `zypper rm`. Check the manual pages
    for more information.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在 openSUSE 中，你可以使用命令的简短版本。例如，可以使用`zypper in`代替`zypper install`，并跟上你要安装的包名。同样，`zypper
    update`可以用`zypper up`，`dist-upgrade`可以用`dup`，还可以将`zypper remove`简写为`zypper rm`。更多信息请查看手册页。
- en: 'So, here is the command to install the `nmap` package:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是安装`nmap`包的命令：
- en: '[PRE32]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Alternatively, you can use the following command:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可以使用以下命令：
- en: '[PRE33]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can see the output in the following screenshot:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下屏幕截图中看到输出：
- en: '![Figure 3.13 – Using the zypper in command](img/Figure_03_13_B19682.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – 使用 zypper in 命令](img/Figure_03_13_B19682.jpg)'
- en: Figure 3.13 – Using the zypper in command
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 使用 zypper in 命令
- en: The output shows which packages will be installed. What is important to notice
    here is that Zypper is automatically dealing with dependencies, just like other
    package managers. Besides `nmap`, there are two more library packages ready to
    be installed. Type `y` to continue the installation and the packages will be installed.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了将要安装的包。这里需要注意的是，Zypper会自动处理依赖项，就像其他包管理器一样。除了`nmap`，还有两个库包准备安装。键入`y`继续安装，包将被安装。
- en: 'Now, let’s use the `zypper search nmap` command one more time to see how the
    list has changed when it comes to showing the package information about `nmap`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再一次使用`zypper search nmap`命令，看看列表中关于`nmap`包的信息发生了什么变化：
- en: '![Figure 3.14 – Checking the status of nmap with zypper search](img/Figure_03_14_B19682.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14 – 使用 zypper search 检查 nmap 的状态](img/Figure_03_14_B19682.jpg)'
- en: Figure 3.14 – Checking the status of nmap with zypper search
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 使用 zypper search 检查 nmap 的状态
- en: In the output, you will see that the first column of the list has `i+` in front
    of the `nmap` package we just installed. This means that the package and its dependencies
    are already installed. So, if you are searching for some package and it is already
    installed, you will know this by checking the first column of the list, which
    is the status column.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，你会看到列表的第一列在我们刚刚安装的`nmap`包前面有`i+`。这意味着该包及其依赖项已经安装。因此，如果你正在查找某个包并且它已经安装，你可以通过检查列表的第一列，也就是状态列，来判断。
- en: 'Now, let’s remove the same package we already installed. We will use the following
    command:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们移除我们已经安装过的相同包。我们将使用以下命令：
- en: '[PRE34]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Alternatively, we can use the following command:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以使用以下命令：
- en: '[PRE35]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output is shown in the following screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示在以下屏幕截图中：
- en: '![Figure 3.15 – Using the zypper remove command](img/Figure_03_15_B19682.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.15 – 使用 zypper remove 命令](img/Figure_03_15_B19682.jpg)'
- en: Figure 3.15 – Using the zypper remove command
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 使用 zypper remove 命令
- en: 'The output of this command shows which packages are going to be removed. As
    you can see, only the `nmap` package will be removed; the other dependencies installed
    that were alongside won’t be removed. To remove them together with the package,
    use the `--clean-deps` argument when using the command. Details are shown in the
    following screenshot:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的输出显示了将要被移除的包。如你所见，只有`nmap`包会被移除，其他一起安装的依赖包则不会被移除。要将它们与包一起移除，请在使用命令时加上`--clean-deps`参数。详情请参见下图：
- en: '![Figure 3.16 – Removing dependencies](img/Figure_03_16_B19682.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.16 – 移除依赖](img/Figure_03_16_B19682.jpg)'
- en: Figure 3.16 – Removing dependencies
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 移除依赖
- en: Now that you’ve learned how to use `zypper` to install and remove packages in
    openSUSE, let’s learn how to use it to update or upgrade the entire system.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何使用`zypper`在openSUSE中安装和删除软件包，接下来让我们学习如何使用它来更新或升级整个系统。
- en: Upgrading and updating the system
  id: totrans-241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 升级和更新系统
- en: 'Before updating a system, you might want to see which updates are available.
    For this, you can use the following command:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新系统之前，你可能想查看哪些更新是可用的。为此，你可以使用以下命令：
- en: '[PRE36]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output of this command will show all the updates available on your system.
    To install the updates, use the following command:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出将显示系统上所有可用的更新。要安装更新，请使用以下命令：
- en: '[PRE37]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'An alternative is the following command:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是以下命令：
- en: '[PRE38]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If you use these commands with no parameters, as we just showed, all the available
    updates will be installed. You can also update individual packages by including
    the package name as a parameter for the `update` command.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在没有参数的情况下使用这些命令，就像我们刚才展示的那样，所有可用的更新都会被安装。你也可以通过在`update`命令中包含软件包名称作为参数来更新单独的软件包。
- en: Some more useful commands in openSUSE are used for adding and managing locks
    to a package if we don’t want it to be updated or removed. Let’s learn how to
    do this using the same `nmap` package. If you removed it as we did in the previous
    section, please install it again. We will add a lock, check for that lock, and
    then remove the lock for the package.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在openSUSE中，一些有用的命令用于为软件包添加和管理锁定，以防我们不希望它被更新或删除。让我们使用相同的`nmap`软件包来学习如何操作。如果你像我们在上一节中所做的那样删除了它，请重新安装它。我们将添加一个锁，检查这个锁，然后移除这个锁。
- en: 'To add a lock to a package, use the `add-lock` or `zypper al` command. To see
    the locked packages on your system, you can use the `zypper ll` command (list
    locks); to remove a lock from a package, you can use the `zypper rl` command (remove
    locks):'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要为软件包添加锁定，请使用`add-lock`或`zypper al`命令。要查看系统中已锁定的软件包，可以使用`zypper ll`命令（列出锁定）；要从软件包中移除锁定，可以使用`zypper
    rl`命令（移除锁定）：
- en: '![Figure 3.17 – Adding and removing locks to and from packages with Zypper](img/Figure_03_17_B19682.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.17 – 使用Zypper为软件包添加和移除锁](img/Figure_03_17_B19682.jpg)'
- en: Figure 3.17 – Adding and removing locks to and from packages with Zypper
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – 使用Zypper为软件包添加和移除锁
- en: 'Now, let’s lock the `nmap` package again and try to remove it. You will see
    that the package will not be removed. First, you will be asked what to do to remove
    it. Details are shown in the following figure:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次锁定`nmap`软件包并尝试删除它。你会看到该软件包不会被删除。首先，会询问你应该如何操作才能删除它。详情请参见下图：
- en: '![Figure 3.18 – Trying to remove a locked package](img/Figure_03_18_B19682.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.18 – 尝试删除一个被锁定的包](img/Figure_03_18_B19682.jpg)'
- en: Figure 3.18 – Trying to remove a locked package
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – 尝试删除一个被锁定的包
- en: Updating is straightforward, and you also learned how to use the lock option
    in Zypper to protect different packages. Now that you know how to update your
    openSUSE system, we’ll learn how we can find information about certain packages
    in the following section.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 更新过程很简单，你还学会了如何在Zypper中使用锁定选项来保护不同的软件包。现在你知道如何更新你的openSUSE系统了，接下来我们将在下节中学习如何查找特定软件包的信息。
- en: Managing package information
  id: totrans-257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 管理软件包信息
- en: 'As shown when using the APT and DNF package managers in Ubuntu and Fedora,
    we can use Zypper in openSUSE to obtain information about packages. Let’s use
    the same `nmap` package as in the previous section and obtain more information
    about it. To do this, we will use the `zypper` `info` command:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如在使用Ubuntu和Fedora中的APT和DNF包管理器时所示，我们可以在openSUSE中使用Zypper获取软件包的信息。让我们使用与上一节相同的`nmap`软件包并获取更多关于它的信息。为此，我们将使用`zypper`
    `info`命令：
- en: '[PRE39]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As shown in *Figure 3**.19*, the information provided is similar to that in
    Ubuntu and RHEL-based distributions. As we uninstalled the `nmap` package, the
    information shown in the output will state that the package is not installed.
    There is also a longer description for the package, which we did not include in
    the following screenshot:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 3.19*所示，提供的信息与基于Ubuntu和RHEL的发行版类似。当我们卸载了`nmap`软件包时，输出中显示的信息会说明该软件包未安装。还有该软件包的更长描述，在下面的截图中没有包含：
- en: '![Figure 3.19 – Using the zypper info command](img/Figure_03_19_B19682.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.19 – 使用zypper info命令](img/Figure_03_19_B19682.jpg)'
- en: Figure 3.19 – Using the zypper info command
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19 – 使用zypper info命令
- en: Now, let’s learn how to manage flatpaks and snaps on a Linux machine.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何在Linux机器上管理flatpaks和snaps。
- en: Using the snap and flatpak packages
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用snap和flatpak软件包
- en: Snaps and flatpaks are relatively new package types that are used in various
    Linux distributions. In this section, we will show you how to manage those types
    of packages. For snaps, we will use Ubuntu as our test distribution, while for
    flatpaks, we will use Fedora, even though, with a little bit of work, both package
    types can work on either distribution.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Snap 和 flatpak 是相对较新的包类型，广泛应用于各种 Linux 发行版。在本节中，我们将向你展示如何管理这些类型的包。对于 snap，我们将使用
    Ubuntu 作为测试发行版，而对于 flatpak，我们将使用 Fedora，尽管只需做一点工作，这两种包类型也可以在任何一个发行版上运行。
- en: Managing snap packages on Ubuntu
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上管理 snap 包
- en: Snap is installed by default in Ubuntu 22.04.2 LTS. Therefore, you don’t have
    to do anything to install it. Simply start searching for the package you want
    and install it on your system. We will use the Slack application to show you how
    to work with snaps.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Snap 在 Ubuntu 22.04.2 LTS 中默认安装。因此，你无需做任何事情来安装它。只需开始搜索你想要的包，并将其安装到系统中。我们将使用
    Slack 应用程序来向你展示如何使用 snap 包。
- en: Searching for snaps
  id: totrans-268
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 搜索 snap 包
- en: 'Slack is available in the Snap Store, so you can install it. To make sure,
    you can search for it using the `snap find` command, as in the following example:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Slack 可以在 Snap Store 中找到，因此你可以安装它。为了确认，可以使用 `snap find` 命令进行搜索，如下例所示：
- en: '[PRE40]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the command’s output, you will see many more packages that contain the `slack`
    string or are related to the Slack application, but only the first on the list
    is the one we are looking for.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令输出中，你会看到许多包含 `slack` 字符串或与 Slack 应用相关的包，但列表中只有第一个是我们要寻找的。
- en: Important note
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In any Linux distribution, two apps originating from different packages and
    installed with different package managers can coexist. For example, Slack can
    be installed using the `deb` file provided by the website, as well as the one
    installed from the Snap Store.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何 Linux 发行版中，来自不同包的两个应用程序可以共存，且通过不同的包管理器进行安装。例如，Slack 可以通过网站提供的 `deb` 文件安装，也可以通过
    Snap Store 安装。
- en: If the output says that the package is available, we can proceed and install
    it on our system.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输出显示该包可用，我们可以继续在系统上安装它。
- en: Installing a snap package
  id: totrans-275
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 snap 包
- en: 'To install the `snap` package for Slack, we can use the `snap` `install` command:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Slack 的 `snap` 包，我们可以使用 `snap` `install` 命令：
- en: '![Figure 3.20 – Installing the Slack snap package](img/Figure_03_20_B19682.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.20 – 安装 Slack snap 包](img/Figure_03_20_B19682.jpg)'
- en: Figure 3.20 – Installing the Slack snap package
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20 – 安装 Slack snap 包
- en: Next, let’s see how we can find out more about the `snap` package we just installed.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何查看我们刚刚安装的 `snap` 包的更多信息。
- en: Snap package information
  id: totrans-280
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Snap 包信息
- en: 'If you want to find out more about the package, you can use the `snap` `info`
    command:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于该包的信息，可以使用 `snap` `info` 命令：
- en: '[PRE41]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The output will show you relevant information about the package, including
    its name, summary, publisher, description, and ID. The last piece of information
    that’s displayed will be about the available **channels**, which are as follows
    in the case of our Slack package:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示与该包相关的信息，包括其名称、摘要、发布者、描述和 ID。显示的最后一项信息将是关于可用的 **渠道**，在我们 Slack 包的情况下如下所示：
- en: '![Figure 3.21 – Snap channels shown for the Slack app](img/Figure_03_21_B19682.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.21 – 显示 Slack 应用的 Snap 渠道](img/Figure_03_21_B19682.jpg)'
- en: Figure 3.21 – Snap channels shown for the Slack app
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21 – 显示 Slack 应用的 Snap 渠道
- en: Each channel contains information about a specific version and it is important
    to know which one to choose. By default, the stable channel will be chosen by
    the `install` command, but if you would like a different version, you could use
    the `--channel` option during installation. In the preceding example, we used
    the default option.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 每个渠道包含有关特定版本的信息，知道选择哪个版本非常重要。默认情况下，`install` 命令会选择稳定版本，但如果你想选择不同的版本，可以在安装过程中使用
    `--channel` 选项。在前面的示例中，我们使用了默认选项。
- en: Displaying installed snap packages
  id: totrans-287
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示已安装的 snap 包
- en: 'If you want to see a list of the installed snaps on your system, you can use
    the `snap list` command. Even though we only installed Slack on the system, in
    the output, you will see that many more apps have been installed. Some, such as
    `core` and `snapd`, are installed by default from the distribution’s installation
    and are required by the system:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看系统上已安装的 snap 包列表，可以使用 `snap list` 命令。尽管我们只在系统上安装了 Slack，但在输出中，你会看到还有很多其他应用程序已经安装。其中一些，如
    `core` 和 `snapd`，是从发行版安装时默认安装的，是系统所需的：
- en: '![Figure 3.22 – Output of the snap list command](img/Figure_03_22_B19682.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.22 – `snap list` 命令的输出](img/Figure_03_22_B19682.jpg)'
- en: Figure 3.22 – Output of the snap list command
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22 – `snap list` 命令的输出
- en: Now, we’ll learn how to update a snap package.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何更新一个 snap 包。
- en: Updating a snap package
  id: totrans-292
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新一个 snap 包
- en: 'Snaps are automatically updated. Therefore, you won’t have to do anything yourself.
    The least you can do is check whether an update is available and speed up its
    installation using the `snap refresh` command, as follows:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Snaps 会自动更新。因此，你无需自己做任何事情。你能做的最少的就是检查是否有更新，并使用 `snap refresh` 命令加速安装，命令如下：
- en: '[PRE42]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Following an update, if you want to go back to a previously used version of
    the app, you can use the `snap revert` command, as in the following example:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后，如果你想回到之前使用的版本，可以使用 `snap revert` 命令，如以下示例所示：
- en: '[PRE43]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In the next section, we’ll learn how to enable and disable snap packages.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何启用和禁用 snap 包。
- en: Enabling or disabling snap packages
  id: totrans-298
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启用或禁用 snap 包
- en: 'If we decide to not use an application temporarily, we can disable that app
    using the `snap disable` command. If we decide to reuse the app, we can enable
    it again using the `snap` `enable` command:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定暂时不使用某个应用程序，可以使用 `snap disable` 命令禁用该应用。如果我们决定重新使用该应用，可以使用 `snap enable`
    命令再次启用它：
- en: '![Figure 3.23 – Enabling and disabling a snap app](img/Figure_03_23_B19682.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.23 – 启用和禁用 snap 应用程序](img/Figure_03_23_B19682.jpg)'
- en: Figure 3.23 – Enabling and disabling a snap app
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23 – 启用和禁用 snap 应用程序
- en: Remember to use `sudo` to enable and disable a snap application. If disabling
    is not what you are looking for, you can completely remove the snap.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 记得使用`sudo`来启用和禁用 snap 应用程序。如果禁用不是你想要的操作，你可以完全移除该 snap。
- en: Removing a snap package
  id: totrans-303
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 移除 snap 包
- en: 'When removing a snap application, the associated configuration files, users,
    and data are also removed. You can use the `snap remove` command to do this, as
    in the following example:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在移除 snap 应用程序时，相关的配置文件、用户和数据也会被删除。你可以使用 `snap remove` 命令来执行此操作，如以下示例所示：
- en: '[PRE44]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'After removal, an application’s internal user, configuration, and system data
    are saved and retained for 31 days. These files are called snapshots, they are
    archived and saved under `/var/lib/snapd/snapshots`, and they contain the following
    types of files: a `.json` file containing a description of the snapshot, a `.tgz`
    file containing system data, and specific `.tgz` files that contain each system’s
    user details. A short listing of the aforementioned directory will show the automatically
    created snapshot for Slack:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 移除后，应用程序的内部用户、配置和系统数据将保存并保留 31 天。这些文件被称为快照，它们被归档并保存在 `/var/lib/snapd/snapshots`
    目录下，包含以下类型的文件：一个 `.json` 文件，描述了该快照；一个 `.tgz` 文件，包含系统数据；以及特定的 `.tgz` 文件，包含每个系统的用户详细信息。以下是该目录的简短列出，展示了
    Slack 的自动创建快照：
- en: '![Figure 3.24 – Showing the existing snapshots after removal](img/Figure_03_24_B19682.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.24 – 显示移除后的现有快照](img/Figure_03_24_B19682.jpg)'
- en: Figure 3.24 – Showing the existing snapshots after removal
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.24 – 显示移除后的现有快照
- en: 'If you don’t want the snapshots to be created, you can use the `--purge` option
    for the `snap remove` command. For applications that use a large amount of data,
    those snapshots could have a significant size and impact the available disk space.
    To see the snapshots saved on your system, use the `snap` `saved` command:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想创建快照，可以在 `snap remove` 命令中使用 `--purge` 选项。对于使用大量数据的应用程序，这些快照可能会占用大量空间，并影响可用磁盘空间。要查看系统上保存的快照，可以使用
    `snap saved` 命令：
- en: '![Figure 3.25 – Showing the saved snapshots](img/Figure_03_25_B19682.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.25 – 显示已保存的快照](img/Figure_03_25_B19682.jpg)'
- en: Figure 3.25 – Showing the saved snapshots
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.25 – 显示已保存的快照
- en: 'The output shows that in the list, in our case, just one app has been removed,
    with the first column indicating the ID of the snapshot (`set`). If you would
    like to delete a snapshot, you can do so by using the `snap forget` command. In
    our case, to delete the Slack application’s snapshot, we can use the following
    command:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，在我们的案例中，列表中仅移除了一个应用程序，第一列显示的是快照的 ID (`set`)。如果你想删除一个快照，可以使用 `snap forget`
    命令。我们可以使用以下命令删除 Slack 应用程序的快照：
- en: '![Figure 3.26 – Using the snap forget command to delete a snapshot](img/Figure_03_26_B19682.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.26 – 使用 `snap forget` 命令删除快照](img/Figure_03_26_B19682.jpg)'
- en: Figure 3.26 – Using the snap forget command to delete a snapshot
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.26 – 使用 `snap forget` 命令删除快照
- en: To verify that the snapshot was removed, we used the `snap saved` command again,
    as shown in the preceding figure.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证快照是否已被移除，我们再次使用了 `snap saved` 命令，如前面的图示所示。
- en: Snaps are versatile packages and easy to use. This package type is the choice
    of Ubuntu developers, but they are not commonly used on other distributions. If
    you would like to install snaps on distributions other than Ubuntu, follow the
    instructions at [https://snapcraft.io/docs/installing-snapd](https://snapcraft.io/docs/installing-snapd)
    and test its full capabilities.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: Snaps 是多功能的包，使用起来非常方便。这种包类型是 Ubuntu 开发者的首选，但在其他发行版上并不常见。如果你想在 Ubuntu 以外的发行版上安装
    snaps，可以参考 [https://snapcraft.io/docs/installing-snapd](https://snapcraft.io/docs/installing-snapd)
    上的说明，测试它的全部功能。
- en: 'Now, we will test the other new kid on the block: flatpaks. Our test distribution
    will be Fedora, but keep in mind that flatpaks are also supported by Ubuntu-based
    distributions such as Linux Mint and elementary OS, and Debian-based distributions
    such as PureOS and Endless OS. A list of all the supported Linux distributions
    can be found at [flatpak.org](http://flatpak.org).'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将测试另一个新兴的包：flatpaks。我们的测试发行版将是 Fedora，但请记住，flatpaks 也被 Ubuntu 系统的发行版（如
    Linux Mint 和 elementary OS）以及基于 Debian 的发行版（如 PureOS 和 Endless OS）所支持。所有支持的 Linux
    发行版的列表可以在 [flatpak.org](http://flatpak.org) 找到。
- en: Managing flatpak packages on Fedora Linux
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Fedora Linux 上管理 flatpak 包
- en: As flatpaks are available only as desktop applications, we will use Fedora Linux
    Workstation as our use case. In this scenario, you could use RHEL/AlmaLinux/Rocky
    Linux on a server, but Fedora for your workstation.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 flatpak 仅作为桌面应用程序提供，我们将以 Fedora Linux Workstation 为使用案例。在这种情况下，你可以在服务器上使用
    RHEL/AlmaLinux/Rocky Linux，但在工作站上使用 Fedora。
- en: 'Similar to snaps, flatpaks are isolated applications that run inside sandboxes.
    Each flatpak contains the needed runtimes and libraries for the application. Flatpaks
    offer full support for graphical user interface management tools, together with
    a full set of commands that can be used from the `flatpak`, which has several
    other built-in commands to use for package management. To see all of them, use
    the following command:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 与 snaps 类似，flatpaks 是在沙盒中运行的独立应用程序。每个 flatpak 包含应用程序所需的运行时和库。flatpaks 完全支持图形用户界面管理工具，并提供一整套命令，可以通过
    `flatpak` 使用，这个命令本身还有其他一些内建命令用于包管理。要查看所有命令，可以使用以下命令：
- en: '[PRE45]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In the following sections, we will detail some of the widely used commands for
    flatpak package management. But before that, let’s say a few words about how flatpak
    apps are named and how they will appear on the command line so that there will
    be no confusion in this regard.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将详细介绍一些广泛使用的 flatpak 包管理命令。但在此之前，先简单说明一下 flatpak 应用程序的命名方式及它们在命令行中的显示方式，以避免在这方面产生混淆。
- en: Each app has an identifier in a form similar to `com.company.App`. Each part
    of this is meant to easily identify an app and its developer. The final part identifies
    the application’s name since the preceding one identifies the entity that developed
    the app. This is an easy way for developers to publish and deliver multiple apps.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都有一个类似于 `com.company.App` 的标识符。每一部分都旨在方便地识别应用程序及其开发者。最后一部分标识应用程序的名称，而前一部分标识开发该应用程序的实体。这是开发者发布和交付多个应用程序的一种简便方式。
- en: Adding flatpak repositories
  id: totrans-324
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加 flatpak 仓库
- en: Repositories must be set up if you wish to install applications. Flatpaks call
    repositories **remotes**, so this will be the term by which we will refer to them.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望安装应用程序，必须设置仓库。flatpak 将仓库称为**远程仓库**，因此我们将使用这一术语来指代它们。
- en: 'On our Fedora 37 machine, flatpak is already installed, but we will need to
    add the `flathub` repository. We will add it with the `flatpak remote-add` command,
    as shown in the following example:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Fedora 37 机器上，flatpak 已经安装，但我们需要添加 `flathub` 仓库。我们将通过 `flatpak remote-add`
    命令来添加它，如以下示例所示：
- en: '[PRE46]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Here, we used the `--if-not-exists` argument, which stops the command if the
    repository already exists, without showing any error. Once the repository has
    been added, we can start installing packages from it, but not before a mandatory
    system restart.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了 `--if-not-exists` 参数，如果仓库已存在，命令会停止执行，不会显示任何错误。仓库添加完成后，我们可以开始从中安装包，但必须先进行一次系统重启。
- en: In Fedora 37 and previous versions, not all the apps from the Flathub repository
    are available by default, but starting with version 38, developers are aiming
    to provide all the apps from Flathub out of the box by default. Let’s learn how
    to install an application from Flathub on our Fedora Workstation.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Fedora 37 及之前版本中，Flathub 仓库中的并非所有应用程序默认可用，但从版本 38 开始，开发者的目标是默认提供 Flathub 中的所有应用程序。让我们学习如何在
    Fedora Workstation 上从 Flathub 安装应用程序。
- en: Installing a flatpak application
  id: totrans-330
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 flatpak 应用程序
- en: 'To install a package, we need to know its name. We can go to [https://flathub.org/home](https://flathub.org/home)
    and search for apps there. We will search for a piece of software called **Open
    Broadcaster Software** (**OBS**) studio on the website and follow the instructions
    provided. We can either click on the **Install** button in the top right-hand
    corner or use the commands from the lower half of the web page. We will use the
    following command:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装一个包，我们需要知道它的名称。我们可以访问 [https://flathub.org/home](https://flathub.org/home)
    并在那里搜索应用程序。我们将在网站上搜索一款名为 **Open Broadcaster Software** (**OBS**) 的软件，并按照提供的说明操作。我们可以点击右上角的
    **Install** 按钮，也可以使用网页下半部分的命令。我们将使用以下命令：
- en: '[PRE47]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'On recent versions of flatpak (since version 1.2), installation can be performed
    with a much simpler command. In this case, you only need the name of the app,
    as follows:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在 flatpak 的最新版本（自版本 1.2 起）中，安装可以通过更简单的命令进行。在这种情况下，你只需要应用程序的名称，如下所示：
- en: '[PRE48]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The result is the same as using the first `install` command shown previously.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 结果与之前展示的第一个 `install` 命令相同。
- en: Managing flatpak applications
  id: totrans-336
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 管理 flatpak 应用程序
- en: 'After installing an application, you can run it using the command line with
    the following command:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 安装应用程序后，你可以通过以下命令在命令行中运行它：
- en: '[PRE49]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If you want to update all the applications and runtimes, you can use this command:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更新所有应用程序和运行时，可以使用以下命令：
- en: '[PRE50]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To remove a flatpak package, simply run the `flatpak` `uninstall` command:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 要卸载一个 flatpak 包，只需运行 `flatpak` `uninstall` 命令：
- en: '[PRE51]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'To list all the flatpak applications and runtimes installed, you can use the
    `flatpak` `list` command:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有已安装的 flatpak 应用程序和运行时，可以使用 `flatpak` `list` 命令：
- en: '![Figure 3.27 – The flatpak list command’s output](img/Figure_03_27_B19682.jpg)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.27 – flatpak list 命令的输出](img/Figure_03_27_B19682.jpg)'
- en: Figure 3.27 – The flatpak list command’s output
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.27 – flatpak list 命令的输出
- en: 'To see only the installed applications, you can use the `--``app` argument:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 要只查看已安装的应用程序，可以使用 `--``app` 参数：
- en: '[PRE52]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The commands shown here are the most commonly used for flatpak package management.
    Needless to say, there are many other commands that we will not cover here, but
    you are free to look them up and test them on your system. For a quick overview
    of the basic flatpak commands, you can refer to the following link: [https://docs.flatpak.org/en/latest/flatpak-command-reference.html](https://docs.flatpak.org/en/latest/flatpak-command-reference.html).'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的命令是 flatpak 包管理中最常用的命令。不用说，实际上还有许多其他命令，我们在这里不会一一覆盖，但你可以自由查阅并在系统上测试它们。要快速了解基本的
    flatpak 命令，你可以参考以下链接：[https://docs.flatpak.org/en/latest/flatpak-command-reference.html](https://docs.flatpak.org/en/latest/flatpak-command-reference.html)。
- en: Flatpaks are versatile and can provide access to newer app versions. Let’s say
    you want to use a solid base operating system, but the downside of that is that
    you will get old versions of base applications by default. Using flatpaks can
    overcome this and give you access to newer app versions. Feel free to browse the
    apps available on Flathub and test the ones you find interesting and useful.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: Flatpak 非常灵活，能够提供较新版本的应用程序。假设你想使用一个稳定的基础操作系统，但这样做的缺点是你默认获得的基础应用程序版本较旧。使用 flatpak
    可以解决这个问题，让你访问较新版本的应用程序。随时浏览 Flathub 上的应用程序，并测试你认为有趣和有用的应用。
- en: You now know how to install new applications on your operating system, using
    either the command line or the graphical user interface. Apart from that, you
    can also install new desktop environments. We will show you how in the following
    section.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何通过命令行或图形用户界面在操作系统上安装新应用程序。除此之外，你还可以安装新的桌面环境。我们将在接下来的章节中展示如何操作。
- en: Installing new desktop environments in Linux
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 中安装新的桌面环境
- en: We will continue to use Fedora as an example, but the commands shown here can
    also be used for any RHEL-based distribution, such as AlmaLinux or Rocky Linux.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续以 Fedora 为例，但这里展示的命令同样适用于任何基于 RHEL 的发行版，如 AlmaLinux 或 Rocky Linux。
- en: By default, Fedora Workstation uses GNOME as the desktop environment, but what
    if you would like to use another one, such as KDE? Before showing you how, we
    would like to give you some information about the graphical desktop environments
    available for Linux.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Fedora Workstation使用GNOME作为桌面环境，但如果你想使用另一个桌面环境，比如KDE，该怎么做呢？在展示如何操作之前，我们先为你提供一些关于Linux上可用的图形桌面环境的信息。
- en: 'Linux is all about choice, and this can’t be more true when it comes to **desktop
    environments** (**DEs**). There are dozens of DEs available, such as GNOME, KDE,
    Xfce, LXDE, LXQT, Pantheon, and others. The most widely used DEs on Linux are
    GNOME, KDE, and Xfce, and the first two have the largest communities. If you want
    to use the very best and latest of GNOME, for example, you can try distributions
    such as Fedora, openSUSE Tumbleweed with GNOME, or Arch Linux (or Manjaro). If
    you want to use the best of KDE, you can try KDE neon, openSUSE Tumbleweed with
    KDE, or Arch Linux with KDE (or Manjaro). For Xfce, you can try MX Linux (based
    on Debian), which defaults to Xfce, or openSUSE with Xfce. As a rule, the most
    widely used Linux distributions offer variants, also called *flavors* (in the
    case of Ubuntu) or *spins* (in the case of Fedora) with different desktop environments
    available. The RHEL and SUSE commercial versions come with GNOME only by default.
    For more information about the DEs described here, refer to the following websites:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: Linux的核心在于选择，而在**桌面环境**（**DEs**）方面这一点尤为真实。Linux上有许多种桌面环境可供选择，比如GNOME、KDE、Xfce、LXDE、LXQT、Pantheon等。最广泛使用的桌面环境是GNOME、KDE和Xfce，其中前两者拥有最大社区。如果你想使用最新的GNOME，你可以尝试像Fedora、带有GNOME的openSUSE
    Tumbleweed，或者Arch Linux（或Manjaro）这样的发行版。如果你想使用最佳的KDE，可以尝试KDE neon、带有KDE的openSUSE
    Tumbleweed，或带有KDE的Arch Linux（或Manjaro）。对于Xfce，你可以尝试MX Linux（基于Debian），它默认使用Xfce，或者使用带有Xfce的openSUSE。通常，最广泛使用的Linux发行版提供了不同桌面环境的变种，也叫做*flavors*（比如Ubuntu）或*spins*（比如Fedora）。RHEL和SUSE的商业版本默认仅提供GNOME。有关此处描述的桌面环境的更多信息，请参考以下网站：
- en: For KDE, visit [www.kde.org](http://www.kde.org)
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解KDE，请访问 [www.kde.org](http://www.kde.org)
- en: For GNOME, visit [www.gnome.org](http://www.gnome.org)
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解GNOME，请访问 [www.gnome.org](http://www.gnome.org)
- en: For Xfce, visit [www.xfce.org](http://www.xfce.org)
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解Xfce，请访问 [www.xfce.org](http://www.xfce.org)
- en: Now, let’s learn how to install a different DE on our default Fedora Workstation.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何在默认的Fedora Workstation上安装一个不同的桌面环境。
- en: Installing KDE Plasma on Fedora Linux
  id: totrans-359
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Fedora Linux上安装KDE Plasma
- en: In Fedora and derivative distributions (and also in openSUSE), there are application
    groups available that ease the process of installing larger apps and their dependencies.
    And this becomes extremely useful when you’re planning to install many apps as
    part of a larger *group*, just like a DE is.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在Fedora及其衍生发行版（以及openSUSE）中，有一些应用程序组，这些组简化了安装大型应用及其依赖项的过程。当你计划安装多个应用作为一个更大*组*（就像一个桌面环境一样）时，这将非常有用。
- en: To install a group, you can use the `dnf install` command and appeal the group
    using `@` and the name of the group. Alternatively, you can use the `dnf groupinstall`
    command while using the name of the group within quotes.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装一个组，可以使用`dnf install`命令，并通过`@`符号和组名来调用该组。或者，你可以使用`dnf groupinstall`命令，并在引号内使用组名。
- en: 'To check the groups that are available from the Fedora repositories, you can
    use the following command:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看Fedora仓库中可用的组，可以使用以下命令：
- en: '[PRE53]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The output will be a list of groups from Fedora repos, and somewhere in there,
    the **KDE Plasma Workspaces** will be available. To install it, you can use the
    following command:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是一个来自Fedora仓库的组列表，里面会包含**KDE Plasma工作区**。要安装它，可以使用以下命令：
- en: '[PRE54]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Alternatively, you can use the following command:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可以使用以下命令：
- en: '[PRE55]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This command will install the new KDE Plasma environment, as shown in the following
    figure:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将安装新的KDE Plasma环境，如下图所示：
- en: '![Figure 3.28 – Installing the KDE Plasma DE](img/Figure_03_28_B19682.jpg)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.28 – 安装KDE Plasma桌面环境](img/Figure_03_28_B19682.jpg)'
- en: Figure 3.28 – Installing the KDE Plasma DE
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.28 – 安装KDE Plasma桌面环境
- en: 'The installation might take a while, depending on your internet connection.
    To start using KDE Plasma as your DE, you will need to log out of the active session.
    On the login screen, select your user, and then, in the bottom-right corner, click
    on the wheel icon and select **Plasma** when the option becomes available. You
    will have two options, one for **Wayland** and the other for the **X11** display
    manager:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程可能会花费一些时间，具体取决于你的网络连接速度。要开始使用 KDE Plasma 作为你的桌面环境，你需要退出当前会话。在登录屏幕上，选择你的用户，然后在右下角点击齿轮图标，在选项出现时选择**Plasma**。你将有两个选项，一个是**Wayland**，另一个是**X11**显示管理器：
- en: '![Figure 3.29 – Selecting Plasma (Wayland) on the login screen](img/Figure_03_29_B19682.jpg)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.29 – 在登录屏幕上选择 Plasma（Wayland）](img/Figure_03_29_B19682.jpg)'
- en: Figure 3.29 – Selecting Plasma (Wayland) on the login screen
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.29 – 在登录屏幕上选择 Plasma（Wayland）
- en: Wayland is the newer option and might not have full support in KDE compared
    to the support it has in GNOME. Choose according to your preference.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: Wayland 是较新的选项，可能在 KDE 中的支持不如在 GNOME 中的支持。你可以根据自己的偏好来选择。
- en: 'Now, you can log into KDE Plasma on Fedora Workstation. The following screenshot
    shows the **Info Center** application inside KDE Plasma, with details about the
    installed version and hardware:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以登录到 Fedora Workstation 上的 KDE Plasma。以下截图显示了 KDE Plasma 中的**信息中心**应用程序，其中包含已安装版本和硬件的详细信息：
- en: '![Figure 3.30 – Info Center in KDE Plasma on Fedora 37](img/Figure_03_30_B19682.jpg)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.30 – Fedora 37 上 KDE Plasma 的信息中心](img/Figure_03_30_B19682.jpg)'
- en: Figure 3.30 – Info Center in KDE Plasma on Fedora 37
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.30 – Fedora 37 上 KDE Plasma 的信息中心
- en: With that, you have learned about working with packages in Linux, and even installing
    a new DE. This is sufficient for you to start fiddling around with your new OS.
    You can install new applications, configure them, and make your distribution the
    way you want it to be.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你已经了解了如何在 Linux 中使用包管理工具，甚至如何安装新的桌面环境（DE）。这些知识足以让你开始在新的操作系统中进行一些探索。你可以安装新的应用程序，配置它们，并将你的发行版设置成你想要的样子。
- en: Summary
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to work with packages in Ubuntu, Fedora/AlmaLinux,
    and openSUSE, and the skills you’ve learned will help you to manage packages in
    any Linux distribution. You learned how to work with both `.deb` and `.rpm` packages,
    and also the newer ones, such as flatpaks and snaps. You will use the skills you’ve
    learned here in every chapter of this book, as well as in your day-to-day job
    as a systems administrator – or even in your free time, enjoying your Linux operating
    system.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何在 Ubuntu、Fedora/AlmaLinux 和 openSUSE 中使用包管理工具，所学的技能将帮助你在任何 Linux
    发行版中管理包。你学会了如何处理 `.deb` 和 `.rpm` 包，还学习了新的包管理方式，如 flatpaks 和 snaps。你在这里学到的技能将在本书的每一章中帮助你，甚至在你作为系统管理员的日常工作中，或者在闲暇时间享受
    Linux 操作系统时，也会派上用场。
- en: In the next chapter, we will show you how to manage user accounts and permissions,
    where you will be introduced to general concepts and specific tools.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将向你展示如何管理用户账户和权限，在那里你将了解一般概念和具体工具。
- en: Questions
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Now that you have a clear idea of how to manage software packages, here are
    some exercises that will contribute further to your learning:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经清楚了如何管理软件包，下面是一些练习，帮助你进一步巩固所学知识：
- en: Make a list of all the packages installed on your system.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出你系统中安装的所有包。
- en: '`apt list --``installed` command.'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`apt list --installed` 命令。'
- en: Add support for flatpaks on your Ubuntu system.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Ubuntu 系统上添加对 flatpak 的支持。
- en: '**Hint**: Follow the documentation at [flatpak.org](http://flatpak.org).'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**：请参考 [flatpak.org](http://flatpak.org) 上的文档。'
- en: Test other distributions and use their package managers. We recommend that you
    try openSUSE and, if you feel confident, Arch Linux.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试其他发行版并使用它们的包管理工具。我们推荐你尝试 openSUSE，如果你感觉有信心，可以试试 Arch Linux。
- en: Further reading
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'For more information about what was covered in this chapter, please refer to
    the following resources:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本章内容的更多信息，请参考以下资源：
- en: '*Mastering Linux Administration – First Edition*, Alexandru Calcatinge, Julian
    Balog'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Linux 管理精通 – 第一版*，Alexandru Calcatinge，Julian Balog'
- en: 'Snapcraft.io official documentation: [https://snapcraft.io/docs](https://snapcraft.io/docs)'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Snapcraft.io 官方文档：[https://snapcraft.io/docs](https://snapcraft.io/docs)
- en: 'Flatpak documentation: [https://docs.flatpak.org/en/latest/](https://docs.flatpak.org/en/latest/)'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flatpak 文档：[https://docs.flatpak.org/en/latest/](https://docs.flatpak.org/en/latest/)
- en: 'openSUSE official documentation: [https://doc.opensuse.org/](https://doc.opensuse.org/)'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: openSUSE 官方文档：[https://doc.opensuse.org/](https://doc.opensuse.org/)

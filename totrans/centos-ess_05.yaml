- en: Chapter 5. Building a Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover how to set up a local CoreOS environment for
    development on a personal computer, and a test and staging environment cluster
    on the VM instances of Google Cloud''s Compute Engine. These are the topics we
    will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a local development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrapping a remote test/staging cluster on GCE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the local development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to learn how to set up a development environment on our personal
    computer with the help of VirtualBox and Vagrant, as we did in an earlier chapter.
    Building and testing `docker` images and coding locally makes you more productive,
    it saves time, and Docker repository can be pushed to the docker registry (private
    or not) when your docker images are ready. The same goes for the code; you just
    work on it and test it locally. When it is ready, you can merge it with the git
    test branch where your team/client can test it further.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development VM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous chapters, you learned how to install CoreOS via Vagrant on
    your PC. Here, we have prepared installation scripts for Linux and OS X to go
    straight to the point. You can download the latest *CoreOS Essentials* book example
    files from GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To install a local Vagrant-based development VM, type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see an output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the development VM](img/image00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Hang on! There's more!
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the development VM](img/image00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This will perform a VM installation similar to the installation that we did
    in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. CoreOS – Overview and Installation"),
    *CoreOS – Overview and Installation*, but in a more automated way this time.
  prefs: []
  type: TYPE_NORMAL
- en: What happened during the VM installation?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s check out what happened during the VM installation. To sum up:'
  prefs: []
  type: TYPE_NORMAL
- en: A new CoreOS VM (VirtualBox/Vagrant-based) was installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new folder called `coreos-dev-env` was created in your `Home` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, this is what we see:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Four folders, which consist of the following list:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin`: `docker`, `etcdctl` and `fleetctl` files'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fleet`: The `nginx.service fleet` unit is stored here'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`share`: This is shared folder between the host and VM'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vm`: Vagrantfile, `config.rb` and `user-data` files'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We also have three files:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vm_halt.sh`: This is used to shut down the CoreOS VM'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vm_ssh.sh`: This is used to `ssh` to the CoreOS VM'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vm_up.sh`: This is used to start the CoreOS VM, with the OS shell preset to
    the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have installed our CoreOS VM, let''s run `vm_up.sh`. We should
    see this output in the **Terminal** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What happened during the VM installation?](img/image00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, we do not have any errors. Only `fleetctl
    list-machines` shows our CoreOS VM machine, and we have no `docker` containers
    and `fleet` units running there yet.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the fleet units
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s deploy some fleet units to verify that our development environment works
    fine. Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It can take a bit of time for docker to download the `nginx` image.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check out the `nginx.service` unit''s status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the fleet units](img/image00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the `nginx fleet` unit is deployed, open in your browser `http://172.19.20.99`.
    You should see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the fleet units](img/image00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check out what happened there. We scheduled this `nginx.service` unit
    with `fleetctl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then, we used the official `nginx` image from the docker registry, and shared
    our local `~/coreos-dev-env/share` folder with `/home/core/share`, which was mounted
    afterwards as a docker volume `/home/core/share/nginx/html:/usr/share/nginx/html`.
  prefs: []
  type: TYPE_NORMAL
- en: So, whatever `html` files we put into our local `~/coreos-dev-env/share/nginx/html`
    folder will be picked up automatically by `nginx`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s overview what advantages such a setup gives us:'
  prefs: []
  type: TYPE_NORMAL
- en: We can build and test docker containers locally, and then push them to the docker
    registry (private or public).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test our code locally and push it to the git repository when we are done with
    it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By having a local development setup, productivity really increases, as everything
    is done much faster. We do not have build new docker containers upon every code
    change, push them to the remote docker registry, pull them at some remote test
    servers, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is very easy to clean up the setup and get it working from a clean start
    again, reusing the configured `fleet` units to start the all required docker containers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very good! So, now, we have a fully operational local development setup!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This setup is as per the CoreOS documentation at [https://coreos.com/docs/cluster-management/setup/cluster-architectures/](https://coreos.com/docs/cluster-management/setup/cluster-architectures/),
    in the *Docker Dev Environment on Laptop* section.
  prefs: []
  type: TYPE_NORMAL
- en: Go through the `coreos-dev-install.sh` bash script, which sets up your local
    development VM. It is a simple script and is well commented, so it should not
    be too hard to understand its logic.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a Mac user, you can download from [https://github.com/rimusz/coreos-osx-gui](https://github.com/rimusz/coreos-osx-gui)
    and use my Mac App **CoreOS-Vagrant GUI for Mac OS X**, which has a nice UI to
    manage CoreOS VM. It will automatically set up the CoreOS VM environment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the fleet units](img/image00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Bootstrapping a remote test/staging cluster on GCE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, we have successfully built our local development setup. Let's get to the
    next level, that is, building our test/staging environment on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use Google Cloud's Compute Engine, so you need a Google Cloud
    account for this. If you do not have it, for the purpose of running the examples
    in the book, you can open a trial account at [https://cloud.google.com/compute/](https://cloud.google.com/compute/).
    A trial account lasts for 60 days and has $300 as credits, enough to run all of
    this book's examples. When you are done with opening the account, Google Cloud
    SDK needs to be installed from [https://cloud.google.com/sdk/](https://cloud.google.com/sdk/).
  prefs: []
  type: TYPE_NORMAL
- en: In this topic, we will follow the recommendations on how to set up CoreOS cluster
    by referring to *Easy Development/Testing Cluster* from [https://coreos.com/docs/cluster-management/setup/cluster-architectures/](https://coreos.com/docs/cluster-management/setup/cluster-architectures/).
  prefs: []
  type: TYPE_NORMAL
- en: Test/staging cluster setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Okay, let''s get our cloud cluster installed, as you have already downloaded
    this book''s code examples. Carry out these steps in the shown order:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `settings` with your Google Cloud project ID and zone where you
    want the CoreOS instances to be deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s install our control server, which is our `etcd` cluster node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Test/staging cluster setup](img/image00136.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We just created our new cluster `etcd` control node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check out what we have in this script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It fetches the settings needed for Google Cloud from the `settings` file. With
    the help of `gcloud` utility from the Google Cloud SDK, it sets up the `tsld-control1`
    instance and assigns to it a static internal IP `10.200.1.1`. This IP will be
    used by workers to connect the `etcd` cluster, which will run on `tsc-control1`.
  prefs: []
  type: TYPE_NORMAL
- en: In the `cloud-config` folder, we have the `cloud-config` files needed to create
    CoreOS instances on GCE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `control1.yaml` and check out what is there in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As you see, we have `cloud-config` file for the control machine, which does
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It creates a node `etcd` cluster with a static IP of `10.200.1.1`, which will
    be used to connect to `etcd` cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It sets the `fleet` metadata to `role=services,cpeer=tsc-control1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Unit 00-ens4v1.network` assigns a static IP of `10.200.1.1`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `docker.service` drop-in `50-insecure-registry.conf` sets `--insecure-registry="0.0.0.0/0"`,
    which allows you to connect to any privately hosted docker registry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `write_files` part, we update `/etc/resolv.conf` with Google Cloud DNS
    servers, which sometimes do not get automatically put there if the static IP is
    assigned to the instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating our cluster workers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to create the cluster workers, the command to be used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating our cluster workers](img/image00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make a note of the workers' external IPs, as shown in the previous screenshot;
    we will need them later.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can always check them at the Google Developers Console too.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our cluster workers](img/image00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check out what we have inside the `test1.yaml` and `staging1.yaml` files
    in the cloud-`config` folder. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, we have `cloud-config` file for the `test1` machine:'
  prefs: []
  type: TYPE_NORMAL
- en: It connects to the `etcd` cluster machine `control1` and enables `etcd2` in
    proxy mode, which allows anything running on the host to access the `etcd` cluster
    via the `127.0.0.1` address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It sets the `fleet` metadata `role=services,cpeer=tsc-test1`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `docker.service` drop-in `50-insecure-registry.conf` sets `--insecure-registry="0.0.0.0/0"`,
    which will allow you to connect to any privately hosted docker registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: If you check out the `tsc-staging1.yaml` cloud-config file, you will see that
    it is almost identical to `test1.yaml`, except that the `fleet` metadata has `cpeer=tsc-staging1`
    in it. But we are not done yet!
  prefs: []
  type: TYPE_NORMAL
- en: Let's now install the OS X/Linux clients, which will allow us to manage the
    cloud development cluster from our local computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run this installation script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our cluster workers](img/image00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, what has the last script done?
  prefs: []
  type: TYPE_NORMAL
- en: 'In your home folder, it created a new folder called `~/coreos-tsc-gce`, which
    has two folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`etcdctl`: This is the shell script used to access the `etcdctl` client on
    a remote cluster `control1` node'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fleetctl`: The local `fleetctl` client is used to control the remote cluster'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`staging1.sh`: Make `ssh` connection to remote `staging1` worker'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test1.sh`: Make `ssh` connection to remote `test1` worker'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set_cluster_access.sh`: This sets up shell access to the remote cluster'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fleet`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test1_webserver.service`: Our `test1` server''s `fleet` unit'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`staging1_webserver.service`: Our `staging1` server''s `fleet` unit'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at `set_cluster_access.sh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This script is preset by `./install_fleetctl_and_scripts.sh` with the remote
    `control1` external IP, and allows us to issue remote `fleet` control commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating our cluster workers](img/image00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Very good! Our cluster is up and running, and the workers are connected to the
    `etcd` cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can run `fleetctl` commands on the remote cluster from our local computer.
  prefs: []
  type: TYPE_NORMAL
- en: Running fleetctl commands on the remote cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s now install the `nginx` fleet units we have in the `~/coreos-tsc-gce/fleet`
    folder. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s first submit the `fleet` units to the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s start them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running fleetctl commands on the remote cluster](img/image00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Give some time to docker to download the nginx image from the docker registry.
    We can then check the status of our newly deployed `fleet` units using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![Running fleetctl commands on the remote cluster](img/image00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![Running fleetctl commands on the remote cluster](img/image00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Perfect!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in your web browser, open the workers'' external IPs, and you should see
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running fleetctl commands on the remote cluster](img/image00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `nginx` servers are now working. The reason they are showing this error
    message is that we have not provided any `index.html` file yet. We will do that
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, before we finish this chapter, let''s check out our `test/staging nginx
    fleet` units:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few things to note here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Staging1` has an almost identical unit; instead of `test1`, it has `staging1`
    there. So, we reused the same fleet unit as we used for our local development
    machine, with a few changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At `ExecStart`, we used `test1-webserver` and `staging1-webserver`, so by using
    `fleetctl list-units`, we can see which one is which.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We added this bit:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will schedule the unit to the particular cluster worker.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a Mac user, you can download from [https://github.com/rimusz/coreos-osx-gui-cluster](https://github.com/rimusz/coreos-osx-gui-cluster)
    and use my Mac App **CoreOS-Vagrant Cluster GUI for Mac OS X**, which has a nice
    UI for managing CoreOS VMs on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running fleetctl commands on the remote cluster](img/image00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This app will set up a small `control+` two-node local cluster, which makes
    easier to test cluster things on local computer before pushing them to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can read more about the CoreOS cluster architectures that we used for the
    local and cloud test/staging setup at [https://coreos.com/docs/cluster-management/setup/cluster-architectures/](https://coreos.com/docs/cluster-management/setup/cluster-architectures/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to set up a CoreOS local development environment
    and a remote test/staging cluster on GCE. We scheduled fleet units based on different
    metadata tags.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to deploy code to our cloud servers.
  prefs: []
  type: TYPE_NORMAL

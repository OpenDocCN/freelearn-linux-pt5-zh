- en: Chapter 5. Building a Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 构建开发环境
- en: 'In this chapter, we will cover how to set up a local CoreOS environment for
    development on a personal computer, and a test and staging environment cluster
    on the VM instances of Google Cloud''s Compute Engine. These are the topics we
    will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何在个人电脑上为CoreOS设置本地开发环境，以及在Google Cloud的Compute Engine VM实例上设置测试和暂存环境集群。以下是我们将要涵盖的主题：
- en: Setting up a local development environment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置本地开发环境
- en: Bootstrapping a remote test/staging cluster on GCE
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Google Cloud的远程测试/暂存集群上引导
- en: Setting up the local development environment
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置本地开发环境
- en: We are going to learn how to set up a development environment on our personal
    computer with the help of VirtualBox and Vagrant, as we did in an earlier chapter.
    Building and testing `docker` images and coding locally makes you more productive,
    it saves time, and Docker repository can be pushed to the docker registry (private
    or not) when your docker images are ready. The same goes for the code; you just
    work on it and test it locally. When it is ready, you can merge it with the git
    test branch where your team/client can test it further.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何在个人电脑上设置开发环境，借助VirtualBox和Vagrant的帮助，就像我们在早期章节中所做的那样。构建和测试`docker`镜像以及在本地编码使您更加高效，节省时间，当您的docker镜像准备就绪时，可以将其推送到docker注册表（私有或公共）。对于代码也是一样；您只需在本地工作和测试。准备就绪后，可以将其与团队/客户测试分支合并。
- en: Setting up the development VM
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置开发虚拟机
- en: 'In the previous chapters, you learned how to install CoreOS via Vagrant on
    your PC. Here, we have prepared installation scripts for Linux and OS X to go
    straight to the point. You can download the latest *CoreOS Essentials* book example
    files from GitHub repository:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，您学习了如何通过Vagrant在您的个人电脑上安装CoreOS。在这里，我们已经准备了Linux和OS X的安装脚本，以便快速进行设置。您可以从GitHub仓库下载最新的*CoreOS
    Essentials*书籍示例文件：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install a local Vagrant-based development VM, type this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装基于Vagrant的本地开发虚拟机，请键入以下命令：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see an output similar to this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似于这样的输出：
- en: '![Setting up the development VM](img/image00130.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![设置开发虚拟机](img/image00130.jpeg)'
- en: Hang on! There's more!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 等等！还有更多内容！
- en: '![Setting up the development VM](img/image00131.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![设置开发虚拟机](img/image00131.jpeg)'
- en: This will perform a VM installation similar to the installation that we did
    in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. CoreOS – Overview and Installation"),
    *CoreOS – Overview and Installation*, but in a more automated way this time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行类似于我们在[第1章](part0014.xhtml#aid-DB7S1 "第1章. CoreOS – 概述和安装")中所做的安装，*CoreOS
    – 概述和安装*，但这次是更自动化的方式。
- en: What happened during the VM installation?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VM安装期间发生了什么？
- en: 'Let''s check out what happened during the VM installation. To sum up:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下VM安装期间发生了什么。总结一下：
- en: A new CoreOS VM (VirtualBox/Vagrant-based) was installed
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了一个新的CoreOS虚拟机（基于VirtualBox/Vagrant）
- en: A new folder called `coreos-dev-env` was created in your `Home` folder
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的`Home`文件夹中创建了一个名为`coreos-dev-env`的新文件夹
- en: 'Run the following commands:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As a result, this is what we see:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这就是我们看到的结果：
- en: 'Four folders, which consist of the following list:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括以下列表的四个文件夹：
- en: '`bin`: `docker`, `etcdctl` and `fleetctl` files'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`：`docker`、`etcdctl`和`fleetctl`文件'
- en: '`fleet`: The `nginx.service fleet` unit is stored here'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fleet`：`nginx.service fleet`单元存储在这里'
- en: '`share`: This is shared folder between the host and VM'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`share`：这是主机和VM之间共享的文件夹'
- en: '`vm`: Vagrantfile, `config.rb` and `user-data` files'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vm`：Vagrantfile、`config.rb`和`user-data`文件'
- en: 'We also have three files:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还有三个文件：
- en: '`vm_halt.sh`: This is used to shut down the CoreOS VM'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vm_halt.sh`: 用于关闭CoreOS虚拟机'
- en: '`vm_ssh.sh`: This is used to `ssh` to the CoreOS VM'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vm_ssh.sh`：用于`ssh`到CoreOS虚拟机'
- en: '`vm_up.sh`: This is used to start the CoreOS VM, with the OS shell preset to
    the following:'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vm_up.sh`: 用于启动CoreOS虚拟机，操作系统的shell预设如下：'
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that we have installed our CoreOS VM, let''s run `vm_up.sh`. We should
    see this output in the **Terminal** window:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了CoreOS虚拟机，让我们运行`vm_up.sh`。我们应该在**终端**窗口看到以下输出：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see output similar to this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似于这样的输出：
- en: '![What happened during the VM installation?](img/image00132.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![VM安装期间发生了什么？](img/image00132.jpeg)'
- en: As we can see in the preceding screenshot, we do not have any errors. Only `fleetctl
    list-machines` shows our CoreOS VM machine, and we have no `docker` containers
    and `fleet` units running there yet.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中看到的，我们没有任何错误。只有`fleetctl list-machines`显示我们的CoreOS虚拟机机器，并且那里没有`docker`容器和运行的`fleet`单元。
- en: Deploying the fleet units
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署舰队单元
- en: 'Let''s deploy some fleet units to verify that our development environment works
    fine. Run the following commands:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们部署一些fleet单元，验证我们的开发环境是否正常工作。运行以下命令：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It can take a bit of time for docker to download the `nginx` image.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Docker下载`nginx`镜像可能需要一些时间。
- en: 'You can check out the `nginx.service` unit''s status:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看`nginx.service`单元的状态：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see output similar to this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似于以下内容的输出：
- en: '![Deploying the fleet units](img/image00133.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![部署 fleet 单元](img/image00133.jpeg)'
- en: 'Once the `nginx fleet` unit is deployed, open in your browser `http://172.19.20.99`.
    You should see the following message:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`nginx fleet`单元部署完成，打开浏览器并访问`http://172.19.20.99`。你应该会看到以下信息：
- en: '![Deploying the fleet units](img/image00134.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![部署 fleet 单元](img/image00134.jpeg)'
- en: 'Let''s check out what happened there. We scheduled this `nginx.service` unit
    with `fleetctl`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看一下发生了什么。我们用`fleetctl`调度了这个`nginx.service`单元：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then, we used the official `nginx` image from the docker registry, and shared
    our local `~/coreos-dev-env/share` folder with `/home/core/share`, which was mounted
    afterwards as a docker volume `/home/core/share/nginx/html:/usr/share/nginx/html`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们从docker注册表使用了官方的`nginx`镜像，并将本地的`~/coreos-dev-env/share`文件夹与`/home/core/share`共享，之后该文件夹被挂载为docker卷`/home/core/share/nginx/html:/usr/share/nginx/html`。
- en: So, whatever `html` files we put into our local `~/coreos-dev-env/share/nginx/html`
    folder will be picked up automatically by `nginx`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，任何我们放入本地`~/coreos-dev-env/share/nginx/html`文件夹的`html`文件都会被`nginx`自动获取。
- en: 'Let''s overview what advantages such a setup gives us:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下这种环境给我们带来的优势：
- en: We can build and test docker containers locally, and then push them to the docker
    registry (private or public).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在本地构建和测试docker容器，然后将它们推送到docker注册表（无论是私有还是公共）。
- en: Test our code locally and push it to the git repository when we are done with
    it.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在完成本地代码测试后，将代码推送到git仓库。
- en: By having a local development setup, productivity really increases, as everything
    is done much faster. We do not have build new docker containers upon every code
    change, push them to the remote docker registry, pull them at some remote test
    servers, and so on.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过拥有本地开发环境，生产力显著提高，因为所有工作都能更快速地完成。我们不再需要在每次代码更改后构建新的docker容器、将其推送到远程docker注册表、在远程测试服务器上拉取它们，等等。
- en: It is very easy to clean up the setup and get it working from a clean start
    again, reusing the configured `fleet` units to start the all required docker containers.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理该环境并从一个干净的起点重新启动非常简单，能够重新使用配置好的`fleet`单元启动所有需要的docker容器。
- en: Very good! So, now, we have a fully operational local development setup!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！现在，我们已经拥有了一个完全可用的本地开发环境！
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This setup is as per the CoreOS documentation at [https://coreos.com/docs/cluster-management/setup/cluster-architectures/](https://coreos.com/docs/cluster-management/setup/cluster-architectures/),
    in the *Docker Dev Environment on Laptop* section.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该环境设置符合CoreOS文档中[https://coreos.com/docs/cluster-management/setup/cluster-architectures/](https://coreos.com/docs/cluster-management/setup/cluster-architectures/)的要求，在*笔记本上的Docker开发环境*部分。
- en: Go through the `coreos-dev-install.sh` bash script, which sets up your local
    development VM. It is a simple script and is well commented, so it should not
    be too hard to understand its logic.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`coreos-dev-install.sh` bash脚本，该脚本设置了你的本地开发虚拟机。这是一个简单的脚本，并且注释清晰，因此理解其逻辑不应太难。
- en: If you are a Mac user, you can download from [https://github.com/rimusz/coreos-osx-gui](https://github.com/rimusz/coreos-osx-gui)
    and use my Mac App **CoreOS-Vagrant GUI for Mac OS X**, which has a nice UI to
    manage CoreOS VM. It will automatically set up the CoreOS VM environment.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是Mac用户，你可以从[https://github.com/rimusz/coreos-osx-gui](https://github.com/rimusz/coreos-osx-gui)下载并使用我的Mac应用**CoreOS-Vagrant
    GUI for Mac OS X**，它有一个漂亮的UI来管理CoreOS虚拟机。它将自动设置CoreOS虚拟机环境。
- en: '![Deploying the fleet units](img/image00135.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![部署 fleet 单元](img/image00135.jpeg)'
- en: Bootstrapping a remote test/staging cluster on GCE
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GCE上引导一个远程的测试/预发布集群
- en: So, we have successfully built our local development setup. Let's get to the
    next level, that is, building our test/staging environment on the cloud.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们成功建立了本地开发环境。接下来，让我们迈向下一个阶段，也就是在云端构建我们的测试/预发布环境。
- en: We are going to use Google Cloud's Compute Engine, so you need a Google Cloud
    account for this. If you do not have it, for the purpose of running the examples
    in the book, you can open a trial account at [https://cloud.google.com/compute/](https://cloud.google.com/compute/).
    A trial account lasts for 60 days and has $300 as credits, enough to run all of
    this book's examples. When you are done with opening the account, Google Cloud
    SDK needs to be installed from [https://cloud.google.com/sdk/](https://cloud.google.com/sdk/).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Google Cloud的Compute Engine，所以你需要一个Google Cloud账号。如果没有，可以通过[https://cloud.google.com/compute/](https://cloud.google.com/compute/)注册一个试用账户。试用账户有效期为60天，且提供$300的信用额度，足够运行本书中的所有示例。当账户创建完成后，需要从[https://cloud.google.com/sdk/](https://cloud.google.com/sdk/)安装Google
    Cloud SDK。
- en: In this topic, we will follow the recommendations on how to set up CoreOS cluster
    by referring to *Easy Development/Testing Cluster* from [https://coreos.com/docs/cluster-management/setup/cluster-architectures/](https://coreos.com/docs/cluster-management/setup/cluster-architectures/).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本主题中，我们将参考[https://coreos.com/docs/cluster-management/setup/cluster-architectures/](https://coreos.com/docs/cluster-management/setup/cluster-architectures/)中的*Easy
    Development/Testing Cluster*，并遵循其设置CoreOS集群的建议。
- en: Test/staging cluster setup
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试/暂存集群设置
- en: 'Okay, let''s get our cloud cluster installed, as you have already downloaded
    this book''s code examples. Carry out these steps in the shown order:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们安装云集群，你已经下载了本书中的代码示例。请按照以下顺序执行这些步骤：
- en: 'Run the following commands:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE8]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Update the `settings` with your Google Cloud project ID and zone where you
    want the CoreOS instances to be deployed:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`settings`，填入你的Google Cloud项目ID和你希望CoreOS实例部署的区域：
- en: '[PRE9]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, let''s install our control server, which is our `etcd` cluster node:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们安装我们的控制服务器，即`etcd`集群节点：
- en: '[PRE10]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Test/staging cluster setup](img/image00136.jpeg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![测试/暂存集群设置](img/image00136.jpeg)'
- en: We just created our new cluster `etcd` control node.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了新的集群`etcd`控制节点。
- en: 'Let''s check out what we have in this script:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们来看一下这个脚本中包含的内容：
- en: '[PRE11]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It fetches the settings needed for Google Cloud from the `settings` file. With
    the help of `gcloud` utility from the Google Cloud SDK, it sets up the `tsld-control1`
    instance and assigns to it a static internal IP `10.200.1.1`. This IP will be
    used by workers to connect the `etcd` cluster, which will run on `tsc-control1`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 它从`settings`文件中获取所需的Google Cloud设置。借助Google Cloud SDK中的`gcloud`工具，它设置了`tsld-control1`实例并为其分配了静态内部IP`10.200.1.1`。这个IP将被工作节点用来连接运行在`tsc-control1`上的`etcd`集群。
- en: In the `cloud-config` folder, we have the `cloud-config` files needed to create
    CoreOS instances on GCE.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`cloud-config`文件夹中，我们有创建CoreOS实例所需的`cloud-config`文件，适用于GCE。
- en: 'Open `control1.yaml` and check out what is there in it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`control1.yaml`并检查其中的内容：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you see, we have `cloud-config` file for the control machine, which does
    the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们有一个`cloud-config`文件用于控制机，它完成以下任务：
- en: It creates a node `etcd` cluster with a static IP of `10.200.1.1`, which will
    be used to connect to `etcd` cluster.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它创建了一个静态IP为`10.200.1.1`的`etcd`集群节点，用于连接`etcd`集群。
- en: It sets the `fleet` metadata to `role=services,cpeer=tsc-control1`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将`fleet`元数据设置为`role=services,cpeer=tsc-control1`。
- en: '`Unit 00-ens4v1.network` assigns a static IP of `10.200.1.1`.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Unit 00-ens4v1.network`为`10.200.1.1`分配了一个静态IP。'
- en: The `docker.service` drop-in `50-insecure-registry.conf` sets `--insecure-registry="0.0.0.0/0"`,
    which allows you to connect to any privately hosted docker registry.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`docker.service`的drop-in文件`50-insecure-registry.conf`设置了`--insecure-registry="0.0.0.0/0"`，这允许你连接到任何私有托管的docker
    registry。'
- en: In the `write_files` part, we update `/etc/resolv.conf` with Google Cloud DNS
    servers, which sometimes do not get automatically put there if the static IP is
    assigned to the instance.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`write_files`部分，我们更新了`/etc/resolv.conf`，添加了Google Cloud的DNS服务器，因为如果给实例分配了静态IP，DNS服务器有时不会自动添加。
- en: Creating our cluster workers
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建我们的集群工作节点
- en: 'In order to create the cluster workers, the command to be used is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建集群工作节点，使用的命令如下：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Creating our cluster workers](img/image00137.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的集群工作节点](img/image00137.jpeg)'
- en: Make a note of the workers' external IPs, as shown in the previous screenshot;
    we will need them later.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 记下工作节点的外部IP，如前面截图所示；我们稍后会用到它们。
- en: Of course, you can always check them at the Google Developers Console too.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以随时在Google开发者控制台中查看它们。
- en: '![Creating our cluster workers](img/image00138.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的集群工作节点](img/image00138.jpeg)'
- en: 'Let''s check out what we have inside the `test1.yaml` and `staging1.yaml` files
    in the cloud-`config` folder. Run the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来查看 `cloud-config` 文件夹中的 `test1.yaml` 和 `staging1.yaml` 文件。运行以下命令：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As we can see, we have `cloud-config` file for the `test1` machine:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们有 `cloud-config` 文件用于 `test1` 机器：
- en: It connects to the `etcd` cluster machine `control1` and enables `etcd2` in
    proxy mode, which allows anything running on the host to access the `etcd` cluster
    via the `127.0.0.1` address
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它连接到 `etcd` 集群机器 `control1` 并启用 `etcd2` 的代理模式，这使得在主机上运行的任何内容都能通过 `127.0.0.1`
    地址访问 `etcd` 集群
- en: It sets the `fleet` metadata `role=services,cpeer=tsc-test1`
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它设置了 `fleet` 元数据 `role=services,cpeer=tsc-test1`
- en: The `docker.service` drop-in `50-insecure-registry.conf` sets `--insecure-registry="0.0.0.0/0"`,
    which will allow you to connect to any privately hosted docker registry
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker.service` 的 drop-in `50-insecure-registry.conf` 设置了 `--insecure-registry="0.0.0.0/0"`，这将允许你连接到任何私有托管的
    docker 注册表'
- en: That's it!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！
- en: If you check out the `tsc-staging1.yaml` cloud-config file, you will see that
    it is almost identical to `test1.yaml`, except that the `fleet` metadata has `cpeer=tsc-staging1`
    in it. But we are not done yet!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 `tsc-staging1.yaml` 云配置文件，你会发现它与 `test1.yaml` 几乎相同，唯一的区别是 `fleet` 元数据中有
    `cpeer=tsc-staging1`。但我们还没完成！
- en: Let's now install the OS X/Linux clients, which will allow us to manage the
    cloud development cluster from our local computer.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们安装 OS X/Linux 客户端，这将使我们能够从本地计算机管理云开发集群。
- en: 'Let''s run this installation script:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这个安装脚本：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should see the following output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到以下输出：
- en: '![Creating our cluster workers](img/image00139.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的集群工作节点](img/image00139.jpeg)'
- en: So, what has the last script done?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，最后一个脚本做了什么呢？
- en: 'In your home folder, it created a new folder called `~/coreos-tsc-gce`, which
    has two folders:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的主文件夹中，它创建了一个名为 `~/coreos-tsc-gce` 的新文件夹，其中包含两个子文件夹：
- en: '`bin`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`'
- en: '`etcdctl`: This is the shell script used to access the `etcdctl` client on
    a remote cluster `control1` node'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcdctl`：这是用于访问远程集群 `control1` 节点上 `etcdctl` 客户端的 shell 脚本'
- en: '`fleetctl`: The local `fleetctl` client is used to control the remote cluster'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fleetctl`：本地 `fleetctl` 客户端用于控制远程集群'
- en: '`staging1.sh`: Make `ssh` connection to remote `staging1` worker'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`staging1.sh`：建立与远程 `staging1` 工作者的 `ssh` 连接'
- en: '`test1.sh`: Make `ssh` connection to remote `test1` worker'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test1.sh`：建立与远程 `test1` 工作节点的 `ssh` 连接'
- en: '`set_cluster_access.sh`: This sets up shell access to the remote cluster'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_cluster_access.sh`：这设置了远程集群的 shell 访问'
- en: '`fleet`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fleet`'
- en: '`test1_webserver.service`: Our `test1` server''s `fleet` unit'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test1_webserver.service`：我们 `test1` 服务器的 `fleet` 单元'
- en: '`staging1_webserver.service`: Our `staging1` server''s `fleet` unit'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`staging1_webserver.service`：我们 `staging1` 服务器的 `fleet` 单元'
- en: 'Now, let''s take a look at `set_cluster_access.sh`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下 `set_cluster_access.sh`：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This script is preset by `./install_fleetctl_and_scripts.sh` with the remote
    `control1` external IP, and allows us to issue remote `fleet` control commands:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本由 `./install_fleetctl_and_scripts.sh` 预设，使用远程 `control1` 外部 IP 地址，并允许我们发出远程
    `fleet` 控制命令：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Creating our cluster workers](img/image00140.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的集群工作节点](img/image00140.jpeg)'
- en: Very good! Our cluster is up and running, and the workers are connected to the
    `etcd` cluster.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！我们的集群已启动并运行，工作节点已连接到 `etcd` 集群。
- en: Now we can run `fleetctl` commands on the remote cluster from our local computer.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在本地计算机上运行 `fleetctl` 命令来控制远程集群。
- en: Running fleetctl commands on the remote cluster
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在远程集群上运行 fleetctl 命令
- en: 'Let''s now install the `nginx` fleet units we have in the `~/coreos-tsc-gce/fleet`
    folder. Run the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们安装在 `~/coreos-tsc-gce/fleet` 文件夹中的 `nginx` fleet 单元。运行以下命令：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s first submit the `fleet` units to the cluster:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将 `fleet` 单元提交到集群：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let''s start them:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们启动它们：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should see something like what is shown in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似于以下截图的内容：
- en: '![Running fleetctl commands on the remote cluster](img/image00141.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![在远程集群上运行 fleetctl 命令](img/image00141.jpeg)'
- en: 'Give some time to docker to download the nginx image from the docker registry.
    We can then check the status of our newly deployed `fleet` units using the following
    command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 给 docker 一些时间从 docker 注册表下载 nginx 镜像。然后我们可以使用以下命令检查我们新部署的 `fleet` 单元的状态：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![Running fleetctl commands on the remote cluster](img/image00142.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![在远程集群上运行 fleetctl 命令](img/image00142.jpeg)'
- en: 'Then, run this command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行这个命令：
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![Running fleetctl commands on the remote cluster](img/image00143.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![在远程集群上运行 fleetctl 命令](img/image00143.jpeg)'
- en: Perfect!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！
- en: 'Now, in your web browser, open the workers'' external IPs, and you should see
    this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在你的网页浏览器中，打开工作节点的外部IP，你应该能看到以下内容：
- en: '![Running fleetctl commands on the remote cluster](img/image00144.jpeg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![在远程集群上运行fleetctl命令](img/image00144.jpeg)'
- en: The `nginx` servers are now working. The reason they are showing this error
    message is that we have not provided any `index.html` file yet. We will do that
    in the next chapter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx`服务器现在已正常工作。它们显示此错误信息的原因是我们尚未提供任何`index.html`文件。我们将在下一章进行此操作。'
- en: 'But, before we finish this chapter, let''s check out our `test/staging nginx
    fleet` units:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们结束本章之前，让我们检查一下我们的`test/staging nginx舰队`单元：
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see something like the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到如下代码：
- en: '[PRE24]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'There are a few things to note here:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几点需要注意：
- en: '`Staging1` has an almost identical unit; instead of `test1`, it has `staging1`
    there. So, we reused the same fleet unit as we used for our local development
    machine, with a few changes.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Staging1`有一个几乎相同的单元；它将`test1`替换为`staging1`。因此，我们重复使用了与本地开发机器相同的舰队单元，只进行了少许更改。'
- en: At `ExecStart`, we used `test1-webserver` and `staging1-webserver`, so by using
    `fleetctl list-units`, we can see which one is which.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`ExecStart`中，我们使用了`test1-webserver`和`staging1-webserver`，因此通过使用`fleetctl list-units`，我们可以看到哪个是哪个。
- en: 'We added this bit:'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们添加了这一部分：
- en: '[PRE25]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will schedule the unit to the particular cluster worker.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把该单元调度到特定的集群工作节点。
- en: If you are a Mac user, you can download from [https://github.com/rimusz/coreos-osx-gui-cluster](https://github.com/rimusz/coreos-osx-gui-cluster)
    and use my Mac App **CoreOS-Vagrant Cluster GUI for Mac OS X**, which has a nice
    UI for managing CoreOS VMs on your computer.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是Mac用户，可以从[https://github.com/rimusz/coreos-osx-gui-cluster](https://github.com/rimusz/coreos-osx-gui-cluster)下载并使用我的Mac应用**CoreOS-Vagrant
    Cluster GUI for Mac OS X**，它提供了一个便捷的UI来管理你计算机上的CoreOS虚拟机。
- en: '![Running fleetctl commands on the remote cluster](img/image00145.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![在远程集群上运行fleetctl命令](img/image00145.jpeg)'
- en: This app will set up a small `control+` two-node local cluster, which makes
    easier to test cluster things on local computer before pushing them to the cloud.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序将设置一个小型的`control+`双节点本地集群，这使得在将集群任务推送到云端之前，更容易在本地计算机上进行集群相关的测试。
- en: References
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: You can read more about the CoreOS cluster architectures that we used for the
    local and cloud test/staging setup at [https://coreos.com/docs/cluster-management/setup/cluster-architectures/](https://coreos.com/docs/cluster-management/setup/cluster-architectures/).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以阅读更多关于我们在本地和云端测试/预发布环境中使用的CoreOS集群架构的信息，访问[https://coreos.com/docs/cluster-management/setup/cluster-architectures/](https://coreos.com/docs/cluster-management/setup/cluster-architectures/)。
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to set up a CoreOS local development environment
    and a remote test/staging cluster on GCE. We scheduled fleet units based on different
    metadata tags.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何在CoreOS上设置本地开发环境，并在GCE上设置远程测试/预发布集群。我们根据不同的元数据标签调度了舰队单元。
- en: In the next chapter, we will see how to deploy code to our cloud servers.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何将代码部署到我们的云服务器。

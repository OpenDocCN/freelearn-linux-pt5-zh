- en: Chapter 10. Monitoring and Performance Tuning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, I''ll explore the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Tuning your system's performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up PCP – Performance Co-Pilot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring basic system performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring CPU performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring RAM performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring storage performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring network performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring your infrastructure is an important aspect of your environment as
    it teaches you much about its behavior. It will tell you where your bottlenecks
    are and where room for improvement is. In this chapter, we will monitor performance
    and not create triggers when certain metrics exceed specific values.
  prefs: []
  type: TYPE_NORMAL
- en: Tuning your system's performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Companies buy the best hardware their money can get, and they want to use everything
    optimally. However, it's not just the hardware that makes your applications run
    faster. Your OS will also behave differently under specific circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: Tuned is a set of tools and a daemon that tunes your system's settings automatically
    depending on its usage. It periodically collects data from its components through
    plugins, which it uses to change system settings according to the current usage.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll ask tuned which profile to use and apply it through
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, run the following command to install the required packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable and start tuned by executing the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Have tuned guess the profile to be used via the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, apply the recommended profile to tuned, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find the system's tuned profiles used in `/lib/tuned/`. When you create
    your own, create them in `/etc/tuned` in the same way as they are organized in
    `/lib/tuned`. I do not recommend creating new profiles in `/etc/tuned` with the
    same name as in `/lib/tuned`, but if you do, the one in the `/etc/tuned` directory
    will be used. It is better to create a new one with a different name, including
    the one you want to modify, and then make the necessary changes in your new profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every profile has a directory, which contains a set of files controlling the
    behavior of your system. If you explore the `tuned.conf` files in these directories,
    you will see that these files define the exact settings that other tools (such
    as **cpufreq**) need to be configured on and that some profiles include other
    profiles. For instance, if you create a profile for, say, a laptop that is a little
    better on the battery by applying the `powersave` CPU governor, you could create
    a new file located at `/etc/tuned/laptop/tuned.conf` containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When you know the bottlenecks of your systems, you can find out how to mitigate
    them by configuring your system in a specific way. Tuned can come in handy to
    create and apply profiles based on the performance monitoring of your components.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about tuning your system, refer to the Red Hat Performance
    Tuning guide at [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Performance_Tuning_Guide/index.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Performance_Tuning_Guide/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Check out the man pages of *tuned (8)*, *tuned-adm (8)*, *tuned-main.conf (5)*,
    and *tuned.conf (5)* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up PCP – Performance Co-Pilot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the years, a lot of tools have been created to troubleshoot performance
    issues on your systems, such as `top`, `sar`, `iotop`, `iostat`, `iftop`, `vmstat`,
    `dstat`, and others. However, none of these integrate with each other, some are
    extensions to others, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'PCP seems to have a couple of things right: it monitors just about every aspect
    of your system, it allows the centralized storage of (important) performance data,
    and it allows you to use not only live data, but also saved data among others.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we'll look at both the "default" setup and "collector" configuration,
    which allows you to pull in all the performance data you want.
  prefs: []
  type: TYPE_NORMAL
- en: The default installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the basic setup of PCP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install the necessary packages; run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, enable and start the necessary daemons, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to have the system monitored by a central collector, execute the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The central collector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each host that is to act as a collector requires additional configuration.
    Here''s how you can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a line per system to collect data from `/etc/pcp/pmlogger/control`, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, `<hostname>` is the FDQN to this host. Take a look at the following example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After adding a host in this way, you need to restart the `pmlogger` daemon.
    Execute the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, PCP logs information every 60 seconds. If you want to increase this
    and want to gather performance statistics every 30 seconds, you need to change
    the line starting with `LOCALHOSTNAME` and add `-t 30s` at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the statistics you gather is a bit more difficult. You can find the
    configuration for `pmlogger` in `/var/lib/pcp/config/pmlogconf/`. Every file in
    this directory contains information about which pointers to gather. The syntax
    is not very hard to understand, but it is complex to explain. The *pmlogconf (1)*
    man page contains everything you need to know.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to visualize the data on a host, you need to install `pcp-gui`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This package comes with a tool called `pmchart`, which allows you to create
    graphics with the data collected by PCP. The fonts are needed to properly display
    the characters.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about PCP and its components, refer to their online manuals,
    which you can find at [http://www.pcp.io/documentation.html](http://www.pcp.io/documentation.html).
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring basic system performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to keep an eye out on global system values. The ones that are particularly
    of interest are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kernel.all.pswitch`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel.all.nprocs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel.all.load`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I''ll show you a way to display both text-based and graphical output. Here
    are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display live data for the metrics with a 1-second interval for the `guest.example.com`
    host by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00070.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Create a configuration file for `pmchart` to display live data called `system.conf`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, use `pmchart` to plot a live chart for `guest.example.com` via the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00071.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding examples are based on "live" data; however, you're not limited
    to live data. You could increase the interval of `pmlogger` in order to get more
    data about a troublesome system and then take a look at the generated data afterwards.
    With other tools, you'd have to use additional tools through cronjob and so on,
    while PCP allows you to do both.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how you can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Show the the data of `guest.example.com` for November 1, 2015 between `15:30`
    and `16:30` with a 5-minute interval via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![There''s more…](img/00072.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'You can do the same with `pmchart`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![There''s more…](img/00073.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Monitoring CPU performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe will show you how to visualize using `pmchart` and command-line
    tools to monitor your CPU''s performance. We will have a look at the following
    metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kernel.all.cpu.wait.total`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel.all.cpu.irq.hard`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel.all.cpu.irq.soft`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel.all.cpu.steal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel.all.cpu.sys`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel.all.cpu.user`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel.all.cpu.nice`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel.all.cpu.idle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This will show you how to create the text and graphical representation of performance
    data. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display live data for the preceding metrics with a 1-second interval for the
    host, `localhost`. Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00074.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Create a configuration file for `pmchart` to display live data called `cpu_stack.conf`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will notice that I don't use all the metrics in the graph as some of the
    metrics are combined with one another.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use `pmchart` to plot a live chart for `guest.example.com`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00075.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Monitoring RAM performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To monitor RAM performance, I am only interested in a couple of metrics, not
    all the memory-related ones. Take a look at this list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mem.util.used`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mem.util.free`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mem.util.bufmem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mem.util.cached`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`swap.free`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`swap.used`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`swap.pagesin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`swap.pagesout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe will explain you how to create text-based and graphical outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, display live data for the preceding metrics through this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00076.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Create a configuration file for `pmchart` to display live data called `memory.conf`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, use `pmchart` to plot a live chart for `guest.example.com` by executing
    the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00077.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: I haven't included the buffer and cached memory in this graph as it's part of
    the memory-used metric.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring storage performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll look at the following metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '`disk.all.read`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disk.all.write`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disk.all.read_bytes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disk.all.write_bytes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a text and graphical representation of the performance data through
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display live data for the preceding metrics; you can use the following command
    for this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00078.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Next, create a configuration file for `pmchart` to display live data called
    `disk.conf` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, use `pmchart` to plot a live chart for `guest.example.com`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00079.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Monitoring network performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll look at the following network metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '`network.interface.collisions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network.interface.in.bytes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network.interface.in.packets`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network.interface.in.errors`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network.interface.in.drops`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network.interface.out.bytes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network.interface.out.packets`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network.interface.out.errors`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network.interface.out.drops`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, one last time, we''ll look at how we can create a text and graphical representation
    of data. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display live data for the preceding metrics; run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00080.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Create a configuration file for `pmchart` to display live data called `network.conf`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, use `pmchart` to plot a live chart for `guest.example.com` via this command
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00081.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG

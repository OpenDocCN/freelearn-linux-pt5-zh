- en: Chapter 4. Protecting GPG Keys with a Trusted Platform Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：使用受信平台模块保护 GPG 密钥
- en: After our investigation into BBB hardware security, we'll now use that technology
    to protect your personal encryption keys for the popular GPG software. GPG is
    a free implementation of the OpenPGP standard. This standard was developed based
    on the work of Philip Zimmerman and his **Pretty Good Privacy** (**PGP**) software.
    PGP has a complex socio-political backstory, which we'll briefly cover before
    getting into the project. For the project, we'll treat the BBB as a separate cryptographic
    co-processor and use the CryptoCape, with a keypad code entry device, to protect
    our GPG keys when they are not in use.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们对 BBB 硬件安全性进行调查后，我们将利用该技术来保护你在流行的 GPG 软件中的个人加密密钥。GPG 是 OpenPGP 标准的免费实现。这个标准是基于菲利普·齐默曼和他的**非常好的隐私**（**PGP**）软件的工作而开发的。PGP
    有一个复杂的社会政治背景，我们会在进入项目之前简要介绍。对于本项目，我们将把 BBB 视为一个独立的加密协处理器，并使用带有数字键盘输入设备的 CryptoCape
    来保护我们在不使用时的 GPG 密钥。
- en: 'Specifically, we will do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将执行以下操作：
- en: Tell you a little about the history and importance of the PGP software
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简要介绍 PGP 软件的历史和重要性
- en: Perform basic threat modeling to analyze your project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行基本的威胁建模来分析你的项目
- en: Create a strong PGP key using the free GPG software
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用免费的 GPG 软件创建一个强大的 PGP 密钥
- en: Teach you to use the TPM to protect encryption keys
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 教你如何使用 TPM 保护加密密钥
- en: History of PGP
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PGP 的历史
- en: 'The software used in this chapter would have once been considered a munition
    by the U.S. Government. Exporting it without a license from the government, would
    have violated the **International Traffic in Arms Regulations** (**ITAR**). As
    late as the early 1990s, cryptography was heavily controlled and restricted. While
    the early 90s are filled with numerous accounts by crypto-activists, all of which
    are well documented in Steven Levy''s *Crypto*, there is one man in particular
    who was the driving force behind the software in this project: Philip Zimmerman.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的软件曾经被美国政府视为军火。如果没有政府许可就出口它，将违反**国际武器贸易条例**（**ITAR**）。直到1990年代初，密码学仍受到严格控制和限制。虽然90年代初期充斥着密码活动家的诸多记载，这些都在史蒂文·莱维（Steven
    Levy）的《加密》（*Crypto*）一书中有详细记载，但有一个人尤其是本项目软件背后的推动力量：菲利普·齐默曼。
- en: Philip Zimmerman had a small pet project around the year 1990, which he called
    **Pretty Good Privacy**. Motivated by a strong childhood passion for codes and
    ciphers, combined with a sense of political activism against a government capable
    of strong electronic surveillance, he set out to create a strong encryption program
    for the people (Levy 2001).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 菲利普·齐默曼（Philip Zimmerman）在1990年左右有一个小型的个人项目，他称之为**非常好的隐私**（Pretty Good Privacy）。受到儿时对密码和密码学的强烈兴趣以及对能够进行强大电子监控的政府的政治反感的驱使，他着手为人民创建一个强加密程序（Levy
    2001）。
- en: 'One incident in particular helped to motivate Zimmerman to finish PGP and publish
    his work. This was the language that the then U.S. Senator Joseph Biden added
    to Senate Bill #266, which would mandate that:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个事件特别促使齐默曼完成 PGP 并发布了他的工作。那就是当时的美国参议员约瑟夫·拜登（Joseph Biden）在第266号参议院法案中添加的语言，该法案将要求：
- en: '*"Providers of electronic communication services and manufacturers of electronic
    communications service equipment shall ensure that communication systems permit
    the government to obtain the plaintext contents of voice, data, and other communications
    when appropriately authorized by law."*'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“电子通信服务提供商和电子通信服务设备制造商应确保通信系统允许政府在法律授权的情况下，获得语音、数据和其他通信的明文内容。”*'
- en: 'In 1991, in a rush to release PGP 1.0 before it was illegal, Zimmerman released
    his software as a freeware to the Internet. Subsequently, after PGP spread, the
    U.S. Government opened a criminal investigation on Zimmerman for the violation
    of the U.S. export laws. Zimmerman, in what is best described as a *legal hack*,
    published the entire source code of PGP, including instructions on how to scan
    it back into digital form, as a book. As Zimmerman describes:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 1991年，为了在 PGP 1.0 被宣布非法之前赶紧发布，齐默曼将他的软件作为免费软件发布到互联网。随后，随着 PGP 的传播，美国政府对齐默曼进行了刑事调查，指控他违反了美国的出口法。齐默曼通过一种可以称之为*法律破解*的方式，将
    PGP 的整个源代码，包括如何将其扫描回数字形式的说明，作为一本书发布。正如齐默曼所描述的：
- en: '|   | *"It would be politically difficult for the Government to prohibit the
    export of a book that anyone may find in a public library or a bookstore."* |
      |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   | *“政府要禁止出口任何人都可以在公共图书馆或书店找到的书籍，在政治上是很困难的。”* |   |'
- en: '|   | --*(Zimmerman, 1995)* |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | --*(Zimmerman, 1995)* |'
- en: A book published in the public domain would no longer fall under ITAR export
    controls. The genie was out of the bottle; the government dropped its case against
    Zimmerman in 1996.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一本公开领域出版的书籍将不再受到 ITAR 出口管制的限制。魔 genie 已经从瓶子里放了出来；政府在 1996 年放弃了对 Zimmerman 的指控。
- en: Reflecting on the Crypto Wars
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反思加密战争
- en: Zimmerman's battle is considered a resilient victory. Many other outspoken supporters
    of strong cryptography, known as **cypherpunks**, also won battles popularizing
    and spreading encryption technology. But if the Crypto Wars were won in the early
    nineties, why hasn't cryptography become ubiquitous? Well, to a degree, it has.
    When you make purchases online, it should be protected by strong cryptography.
    Almost nobody would insist that their bank or online store *not* use cryptography
    and most probably feel more secure that they do. But what about personal privacy
    protecting software? For these tools, habits must change as the normal e-mail,
    chat, and web browsing tools are insecure by default. This change causes tension
    and resistance towards adoption.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Zimmerman's 的斗争被认为是一次顽强的胜利。许多其他强烈支持强加密技术的人，也就是被称为 **密码朋克** 的人，也赢得了普及和传播加密技术的战斗。但是，如果加密战争在九十年代初就已胜利，为什么加密技术还没有变得无处不在呢？嗯，在某种程度上，它已经变得普及。当您在网上购物时，应该受到强加密技术的保护。几乎没有人会坚持要求他们的银行或在线商店
    *不* 使用加密技术，大多数人可能会觉得它们使用加密技术更安全。但个人隐私保护软件呢？对于这些工具，必须改变习惯，因为普通的电子邮件、聊天和网页浏览工具默认情况下是不安全的。这种变化引起了紧张情绪和对采用的抵制。
- en: Also, security tools are notoriously hard to use. In the seminal paper on security
    usability, researchers conclude that the then PGP version 5.0, complete with a
    **Graphical User Interface** (**GUI**), was not able to prevent users, who were
    inexperienced with cryptography but all of whom had at least some college education,
    from making catastrophic security errors (Whitten 1999). Glenn Greenwald delayed
    his initial contact with Edward Snowden for roughly two months because he thought
    GPG was *too complicated* to use (Greenwald, 2014). Snowden absolutely refused
    to share anything with Greenwald until he installed GPG.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，安全工具通常难以使用。在关于安全可用性的开创性论文中，研究人员得出结论，当时的 PGP 5.0 版本，尽管有 **图形用户界面** (**GUI**)，也未能防止那些对加密学没有经验但至少具有大学教育的用户犯下灾难性的安全错误（Whitten
    1999）。Glenn Greenwald 因为认为 GPG *太复杂*，所以推迟了大约两个月才与 Edward Snowden 取得初步联系（Greenwald，2014）。Snowden
    坚决拒绝与 Greenwald 分享任何信息，直到他安装了 GPG。
- en: GPG and PGP enable an individual to protect their own communications. Implicitly,
    you must also trust the receiving party not to forward your plaintext communication.
    GPG expects you to protect your private key and does not rely on a third party.
    While this adds some complexity and maintenance processes, trusting a third party
    with your private key can be disastrous. In August of 2013, Ladar Levison decided
    to shut down his own company, Lavabit, an e-mail provider, rather than turn over
    his users' data to the authorities. Levison courageously pulled the plug on his
    company rather then turn over the data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: GPG 和 PGP 使个人能够保护自己的通信。隐含地，您还必须信任接收方不会转发您的明文通信。GPG 期望您保护自己的私钥，并不依赖于第三方。虽然这增加了一些复杂性和维护过程，但信任第三方持有您的私钥可能是灾难性的。2013
    年 8 月，Ladar Levison 决定关闭他自己的公司 Lavabit（一家电子邮件提供商），而不是将用户的数据交给当局。Levison 勇敢地关闭了公司，而不是交出数据。
- en: The Lavabit service generated and stored your private key. While this key was
    encrypted to the user's password, it still enabled the server to have access to
    the raw key. Even though the Lavabit service alleviated users from managing their
    private key themselves, it enabled the awkward position for Levison. To use GPG
    properly, you should never turn over your private key. For a complete analysis
    of Lavabit, see Moxie Marlinspike's blog post at [http://www.thoughtcrime.org/blog/lavabit-critique/](http://www.thoughtcrime.org/blog/lavabit-critique/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Lavabit 服务生成并存储了您的私钥。尽管该密钥已加密为用户的密码，但它仍然使服务器能够访问原始密钥。尽管 Lavabit 服务减轻了用户自己管理私钥的负担，但却让
    Levison 处于尴尬的境地。要正确使用 GPG，您绝不应交出您的私钥。要了解 Lavabit 的完整分析，请参阅 Moxie Marlinspike 在
    [http://www.thoughtcrime.org/blog/lavabit-critique/](http://www.thoughtcrime.org/blog/lavabit-critique/)
    上的博客文章。
- en: 'Given the breadth and depth of state surveillance capabilities, there is a
    re-kindled interest in protecting one''s privacy. Researchers are now designing
    secure protocols, with these threats in mind (Borisov, 2014). Philip Zimmerman
    ended the chapter on *Why Do You Need PGP?* in the *Official PGP User''s Guide*
    with the following statement, which is as true today as it was when first inked:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于国家监控能力的广泛性和深度，保护个人隐私的兴趣重新升温。研究人员现在正在设计安全协议，考虑到这些威胁（Borisov, 2014）。Philip Zimmerman
    在《*为何需要 PGP？*》章节的*官方 PGP 用户指南*中以以下语句作结，这句话今天依然如当初写下时一样真实：
- en: '*"PGP empowers people to take their privacy into their own hands. There''s
    a growing social need for it."*'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“PGP 赋予人们掌控自己隐私的能力。社会对这种需求的关注日益增加。”*'
- en: Developing a threat model
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发威胁模型
- en: At the end of the previous chapter, we introduced the concept of a threat model.
    A **threat model** is an analysis of the security of the system that identifies
    assets, threats, vulnerabilities, and risks. Like any model, the depth of the
    analysis can vary. In the upcoming section, we'll present a cursory analysis so
    that you can start thinking about this process. This analysis will also help us
    understand the capabilities and limitations of our project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章结束时，我们介绍了威胁模型的概念。**威胁模型**是对系统安全性的一种分析，旨在识别资产、威胁、漏洞和风险。像任何模型一样，分析的深度可以有所不同。在接下来的章节中，我们将提供一个简要分析，帮助你开始思考这个过程。此分析还将帮助我们理解项目的能力和局限性。
- en: Outlining the key protection system
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述密钥保护系统
- en: The first step of our analysis is to clearly provide a description of the system
    we are trying to protect. In this project, we'll build a logical GPG co-processor
    using the BBB and the CryptoCape. We'll store the GPG keys on the BBB and then
    connect to the BBB over **Secure Shell** (**SSH**) to use the keys and to run
    GPG. The CryptoCape will be used to encrypt your GPG key when not in use, known
    as **at rest**. We'll add a keypad to collect a numeric code, which will be provided
    to the TPM. This will allow the TPM to unwrap your GPG key.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们分析的第一步是清楚地描述我们要保护的系统。在这个项目中，我们将使用 BBB 和 CryptoCape 构建一个逻辑 GPG 协处理器。我们将在 BBB
    上存储 GPG 密钥，然后通过**安全外壳**（**SSH**）连接到 BBB 使用密钥并运行 GPG。CryptoCape 将用于在不使用时加密你的 GPG
    密钥，称为**静态加密**（at rest）。我们将添加一个数字键盘，用于收集一个数字代码，该代码将传递给 TPM。这将允许 TPM 解包你的 GPG 密钥。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: The idea for this project was inspired by Peter Gutmann's work on open source
    cryptographic co-processors (Gutmann, 2000). The BBB, when acting as a co-processor
    to a host, is extremely flexible, and considering the power usage, relatively
    high in performance. By running sensitive code that will have access to cleartext
    encryption keys on a separate hardware, we gain an extra layer of protection (or
    at the minimum, a layer of indirection).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的想法来源于 Peter Gutmann 对开源加密协处理器的研究工作（Gutmann, 2000）。当 BBB 作为主机的协处理器时，具有极高的灵活性，考虑到功耗，性能也相对较高。通过将敏感代码运行在一个能够访问明文加密密钥的独立硬件上，我们获得了额外的保护层（或者至少是一层间接性保护）。
- en: Identifying the assets we need to protect
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 识别我们需要保护的资产
- en: Before we can protect anything, we must know what to protect. The most important
    assets are the GPG private keys. With these keys, an attacker can decrypt past
    encrypted messages, recover future messages, and use the keys to impersonate you.
    By protecting your private key, we are also protecting your reputation, which
    is another asset. Our decrypted messages are also an asset. An attacker may not
    care about your key if he/she can easily access your decrypted messages. The BBB
    itself is an asset that needs protecting. If the BBB is rendered inoperable, then
    an attacker has successfully prevented you from accessing your private keys, which
    is known as a **Denial-Of-Service** (**DOS**).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们保护任何东西之前，我们必须知道需要保护的是什么。最重要的资产是 GPG 私钥。拥有这些密钥，攻击者可以解密过去加密的消息、恢复未来的消息，并利用密钥冒充你。通过保护你的私钥，我们也在保护你的声誉，这是另一个资产。我们解密后的消息也是一种资产。如果攻击者能够轻松访问你解密的消息，他/她可能不会在乎你的密钥。BBB
    本身也是一个需要保护的资产。如果 BBB 变得无法使用，那么攻击者就成功阻止了你访问私钥，这种攻击被称为**拒绝服务**（**DOS**）。
- en: Threat identification
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 威胁识别
- en: 'To identify the threats against our system, we need to classify the capabilities
    of our adversaries. This is a highly personal analysis, but we can generalize
    our adversaries into three archetypes: a well funded state actor, a skilled cracker,
    and a jealous ex-lover. The state actor has nearly limitless resources both from
    a financial and personnel point of view. The cracker is a skilled operator, but
    lacks the funding and resources of the state actor. The jealous ex-lover is not
    a sophisticated computer attacker, but is very motivated to do you harm.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要识别针对我们系统的威胁，我们需要对敌人的能力进行分类。这是一个高度个人化的分析，但我们可以将敌人概括为三种原型：资金充足的国家行为者、技术高超的黑客和心怀嫉妒的前任。国家行为者拥有几乎无限的资源，无论是从财务还是人力资源角度来看。黑客是一个技术高超的操作者，但缺乏国家行为者的资金和资源。心怀嫉妒的前任不是一个复杂的计算机攻击者，但他非常有动机伤害你。
- en: Unfortunately, if you are the target of directed surveillance from a state actor,
    you probably have much bigger problems than your GPG keys. This actor can put
    your entire life under monitoring and why go through the trouble of stealing your
    GPG keys when the hidden video camera in the wall records everything on your screen.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，如果你成为国家行为者定向监视的目标，你可能面临比GPG密钥更严重的问题。这个行为者可以将你的一生都置于监控之下，为什么要费力去窃取你的GPG密钥呢？墙壁中的隐藏摄像头早已记录下你屏幕上的一切。
- en: Also, it's reasonable to assume that everyone you are communicating with is
    also under surveillance and it only takes one mistake from one person to reveal
    your plans for world domination.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，合理的假设是，你与之沟通的每个人也都在被监视，只需要一个人的一个小错误，就可能暴露你征服世界的计划。
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The adage by Benjamin Franklin is apropos here: *Three may keep a secret if
    two of them are dead*.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本杰明·富兰克林的格言在这里非常适用：*三个人能守住一个秘密，前提是其中两个已经死了*。
- en: However, properly using GPG will protect you from global passive surveillance.
    When used correctly, neither your Internet Service Provider, nor your e-mail provider,
    or any passive attacker would learn the contents of your messages. The passive
    adversary is not going to engage your system, but they could monitor a significant
    amount of Internet traffic in an attempt to *collect it all*. Therefore, the confidentiality
    of your message should remain protected.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正确使用GPG将保护你免受全球被动监控。当正确使用时，既不会你的互联网服务提供商，也不会你的电子邮件服务提供商或任何被动攻击者能够了解你消息的内容。被动攻击者不会直接攻击你的系统，但他们可能会监控大量的互联网流量，试图*收集所有信息*。因此，你消息的机密性应该得到保护。
- en: We'll assume the cracker trying to harm you is remote and does not have physical
    access to your BBB. We'll also assume the worst case that the cracker has compromised
    your host machine. In this scenario there is, unfortunately, a lot that the cracker
    can perform. He can install a key logger and capture everything, including the
    password that is typed on your computer. He will not be able to get the code that
    we'll enter on the BBB; however, he would be able to log in to the BBB when the
    key is available.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设试图伤害你的黑客是远程攻击，且没有物理访问你BBB的权限。我们还假设最坏的情况，即黑客已经攻破了你的主机。在这种情况下，不幸的是，黑客能够执行很多操作。他可以安装键盘记录器，捕捉到所有内容，包括你在电脑上输入的密码。虽然他无法获取我们将在BBB上输入的代码，但他可以在密钥可用时登录BBB。
- en: The jealous ex-lover doesn't understand computers very well, but he doesn't
    need to, because he knows how to use a golf club. He knows that this BBB connected
    to your computer is somehow important to you because you've talked his ear off
    about this really cool project that you read in a book. He physically can destroy
    the BBB and with it, your private key (and probably the relationship as well!).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 心怀嫉妒的前任并不太懂计算机，但他不需要懂，因为他知道如何使用高尔夫球棒。他知道，与你的计算机连接的这个BBB对你来说非常重要，因为你曾经滔滔不绝地向他讲述过一本书里那项非常酷的项目。他可以物理摧毁BBB，连同它里面的你的私钥（也许这段关系也会一起破裂！）。
- en: Identifying the risks
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 识别风险
- en: 'How likely are the previous risks? The risk of active government surveillance
    in most countries is fortunately low. However, the consequences of this attack
    are very damaging. The risk of being caught up in passive surveillance by a state
    actor, as we have learned from Edward Snowden, is very likely. However, by using
    GPG, we add protection against this threat. An active cracker seeking you harm
    is probably unlikely. Contracting keystroke-capturing malware, however, is probably
    not an unreasonable event. A 2013 study by Microsoft concluded that 8 out of every
    1,000 computers were infected with malware. You may be tempted to play these odds
    but let''s rephrase this statement: in a group of 125 computers, one is infected
    with malware. A school or university easily has more computers than this. Lastly,
    only you can assess the risk of a jealous ex-lover.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 前述风险的可能性有多大？幸运的是，在大多数国家，政府的主动监控风险较低。然而，这种攻击的后果非常严重。正如我们从爱德华·斯诺登事件中了解到的，被国家行为者卷入被动监控的风险是非常可能的。然而，通过使用GPG，我们能为此类威胁增加一层保护。一个主动的黑客试图伤害你是比较不太可能的。但感染键盘记录恶意软件的风险，可能并非不合理。微软在2013年的一项研究中得出结论，每1000台计算机中就有8台感染了恶意软件。你或许会尝试冒这些风险，但让我们换个说法：在一组125台计算机中，就有一台感染了恶意软件。一个学校或大学的计算机数目远远超过这个数字。最后，只有你自己可以评估被嫉妒的前任伤害的风险。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: For the full Microsoft report, refer to [http://blogs.technet.com/b/security/archive/2014/03/31/united-states-malware-infection-rate-more-than-doubles-in-the-first-half-of-2013.aspx](http://blogs.technet.com/b/security/archive/2014/03/31/united-states-malware-infection-rate-more-than-doubles-in-the-first-half-of-2013.aspx).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解完整的微软报告，请参考[http://blogs.technet.com/b/security/archive/2014/03/31/united-states-malware-infection-rate-more-than-doubles-in-the-first-half-of-2013.aspx](http://blogs.technet.com/b/security/archive/2014/03/31/united-states-malware-infection-rate-more-than-doubles-in-the-first-half-of-2013.aspx)。
- en: Mitigating the identified risks
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减轻已识别的风险
- en: If you find yourself the target of a state, this project alone is not going
    to help much. We can protect ourselves somewhat from the cracker with two strategies.
    The first is instead of connecting the BBB to your laptop or computer, you can
    use the BBB as a standalone machine and transfer files via a microSD card. This
    is known as an **air-gap**. With a dedicated monitor and keyboard, it is much
    less likely for software vulnerabilities to break the gap and infect the BBB.
    However, this comes as a high level of personal inconvenience, depending on how
    often you encrypt files. If you consider the risk of running the BBB attached
    to your computer too high, create an air-gapped BBB for maximum protection. If
    you deem the risk low, because you've hardened your computer and have other protection
    mechanism, then keep the BBB attached to the computer.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己成为国家的目标，这个项目单独并不能提供太大帮助。我们可以通过两种策略在一定程度上保护自己免受黑客攻击。第一种是，不将BBB连接到你的笔记本或计算机，而是将BBB作为独立机器使用，通过microSD卡传输文件。这被称为**空气隔离**。配备专用的显示器和键盘时，软件漏洞破坏隔离并感染BBB的可能性大大降低。然而，这会带来较高的个人不便，具体取决于你加密文件的频率。如果你认为将BBB连接到计算机的风险太高，可以创建一个空气隔离的BBB以获得最大保护。如果你认为风险较低，因为你已经加固了计算机并有其他保护机制，那么可以将BBB连接到计算机。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: An air-gapped computer can still be compromised. In 2010, a highly specialized
    worm known as Stuxnet was able to spread to networked isolated machines through
    USB flash drives.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 空气隔离的计算机仍然可能受到攻击。2010年，一种名为Stuxnet的高度专业化蠕虫能够通过USB闪存驱动器传播到网络隔离的计算机。
- en: The second strategy is to somehow enter the GPG passphrase directly into the
    BBB without using the host's keyboard. After we complete the project, we'll suggest
    a mechanism to do this, but it is slightly more complicated. This would eliminate
    the threat of the key logger since the pin is directly entered.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种策略是通过某种方式将GPG密码直接输入BBB，而不使用主机的键盘。完成项目后，我们将建议一种机制来实现这一点，但它稍微复杂一些。这将消除键盘记录器的威胁，因为密码直接输入。
- en: The mitigation against the ex-lover is to treat your BBB as you would your own
    wallet, and don't leave it out of your sight. It's slightly larger than you would
    want, but it's certainly small enough to fit in a small backpack or briefcase.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 针对前任的防护措施是像保护自己的钱包一样保护你的BBB，不要让它离开你的视线。它比你想象的稍大一些，但足够小，可以放进一个小背包或公文包里。
- en: Summarizing our threat model
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结我们的威胁模型
- en: Our threat model, while cursory, illustrates the thought process one should
    go through before using or developing security technologies. The term threat model
    is specific to the security industry, but it's really just proper planning. The
    purpose of this analysis is to find *logic bugs* and prevent you from spending
    thousands of dollars on high-tech locks for your front door when you keep your
    backdoor unlocked. Now that we understand what we are trying to protect and why
    it is important to use GPG, let's build the project.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的威胁模型虽然简略，但展示了在使用或开发安全技术之前应经过的思考过程。威胁模型这个术语是安全行业的专用词汇，但它其实就是合适的规划。这个分析的目的是发现*逻辑漏洞*，防止你花费数千美元为前门安装高科技锁，却忽视了后门的安全。现在我们明白了我们要保护什么以及为什么使用GPG很重要，接下来让我们构建项目。
- en: Generating GPG keys
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成GPG密钥
- en: 'First, we need to install GPG on the BBB. It is mostly likely already installed,
    but you can check and install it with the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在BBB上安装GPG。它很可能已经安装好了，但你可以通过以下命令检查并安装它：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we need to add a secret key. For those that already have a secret key,
    you can import your secret key ring, `secring.gpg`, to your `~/.gnupg` folder.
    For those that want to create a new key, on the BBB, proceed to the upcoming section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加一个密钥。对于已经拥有密钥的人，你可以将密钥环`secring.gpg`导入到你的`~/.gnupg`文件夹中。对于想要创建新密钥的人，在BBB上请继续执行接下来的步骤。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This project assumes some familiarity with GPG. If GPG is new to you, the Free
    Software Foundation maintains the **Email Self-Defense** guide which is a very
    approachable introduction to the software and can be found at [https://emailselfdefense.fsf.org/en/index.html](https://emailselfdefense.fsf.org/en/index.html).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目假设你对GPG有所了解。如果GPG对你来说是新鲜事物，Free Software Foundation维护了一份**电子邮件自我防护**指南，这是一个非常易于理解的GPG入门介绍，指南可以在[https://emailselfdefense.fsf.org/en/index.html](https://emailselfdefense.fsf.org/en/index.html)找到。
- en: Generating entropy
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成熵
- en: 'If you decided to create a new key on the BBB, there are a few technicalities
    we must consider. First of all, GPG will need a lot of random data to generate
    the keys. The amount of random data available in the kernel is proportional to
    the amount of entropy that is available. You can check the available entropy with
    the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定在BBB上创建新密钥，我们需要考虑一些技术细节。首先，GPG需要大量的随机数据来生成密钥。内核中可用的随机数据量与可用的熵量成正比。你可以使用以下命令检查可用的熵量：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If this command returns a relatively low number, under 200, then GPG will not
    have enough entropy to generate a key. On a PC, one can increase the amount of
    entropy by interacting with the computer such as typing on the keyboard or moving
    the mouse. However, such sources of entropy are difficult for embedded systems,
    and in our current setup, we don't have the luxury of moving a mouse.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个命令返回一个较低的数字，低于200，那么GPG将没有足够的熵来生成密钥。在PC上，人们可以通过与计算机交互来增加熵，例如敲击键盘或移动鼠标。然而，这种熵来源对于嵌入式系统来说比较困难，在我们当前的设置中，我们没有奢侈的条件去移动鼠标。
- en: 'Fortunately, there are a few tools to help us. If your BBB is running kernel
    version 3.13 or later, we can use the hardware random number generator on the
    AM3358 to help us out. You''ll need to install the `rng-tools` package. Once installed,
    you can edit `/etc/default/rng-tools` and add the following line to register the
    hardware random number generated for `rng-tools`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一些工具可以帮助我们。如果你的BBB运行的是3.13或更高版本的内核，我们可以利用AM3358上的硬件随机数生成器来帮助我们。你需要安装`rng-tools`包。安装完成后，你可以编辑`/etc/default/rng-tools`，并添加以下行来注册硬件随机数生成器以供`rng-tools`使用：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After this, you should start the `rng-tools` daemon with:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，你应该启动`rng-tools`守护进程，命令如下：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you don't have `/dev/hwrng`—and currently, the chips on the CryptoCape do
    not yet have character device support and aren't available to `/dev/hwrng`—then
    you can install `haveged`. This daemon implements the **Hardware Volatile Entropy
    Gathering and Expansion** (**HAVEGE**) algorithm, the details of which are available
    at [http://www.irisa.fr/caps/projects/hipsor/](http://www.irisa.fr/caps/projects/hipsor/).
    This daemon will ensure that the BBB maintains a pool of entropy, which will be
    sufficient for generating a GPG key on the BBB.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有`/dev/hwrng`——目前，CryptoCape上的芯片还不支持字符设备，也无法访问`/dev/hwrng`——那么你可以安装`haveged`。这个守护进程实现了**硬件易失性熵收集与扩展**（**HAVEGE**）算法，详细信息可以参考[http://www.irisa.fr/caps/projects/hipsor/](http://www.irisa.fr/caps/projects/hipsor/)。这个守护进程将确保BBB保持熵池，这对于在BBB上生成GPG密钥是足够的。
- en: Creating a good gpg.conf file
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个好的 gpg.conf 文件
- en: Before you generate your key, we need to establish some more secure defaults
    for GPG. As we discussed earlier, it is still not as easy as it should be to use
    e-mail encryption. [Riseup.net](http://Riseup.net), an e-mail provider with a
    strong social cause, maintains an OpenPGP best practices guide at [https://help.riseup.net/en/security/message-security/openpgp/best-practices](https://help.riseup.net/en/security/message-security/openpgp/best-practices).
    This guide details how to harden your GPG configuration and provides the motivation
    behind each option. It is well worth a read to understand the intricacies of GPG
    key management.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在你生成密钥之前，我们需要为GPG建立一些更安全的默认设置。正如我们之前讨论的，使用电子邮件加密仍然不像应该的那样简单。[Riseup.net](http://Riseup.net)
    是一家具有强烈社会责任感的电子邮件提供商，它在[https://help.riseup.net/en/security/message-security/openpgp/best-practices](https://help.riseup.net/en/security/message-security/openpgp/best-practices)上维护着一份OpenPGP最佳实践指南。该指南详细说明了如何加固你的GPG配置，并为每个选项提供了背后的动机。阅读这份指南非常值得，它可以帮助你理解GPG密钥管理的复杂性。
- en: Jacob Applebaum maintains an implementation of these best practices, which you
    should download from [https://github.com/ioerror/duraconf/raw/master/configs/gnupg/gpg.conf](https://github.com/ioerror/duraconf/raw/master/configs/gnupg/gpg.conf)
    and save as your `~/.gnupg/gpg.conf` file. The configuration is well commented
    and you can refer to the best practices guide available at [Riseup.net](http://Riseup.net)
    for more information. There are three entries, however, that you should modify.
    The first is `default-key`, which is the fingerprint of your primary GPG key.
    Later in this chapter, we'll show you how to retrieve that fingerprint. We can't
    perform this action now because we don't have a key yet. The second is `keyserver-options
    ca-cert-file`, which is the certificate authority for the **keyserver pool**.
    Keyservers host your public keys and a keyserver pool is a redundant collection
    of keyservers. The instructions on [Riseup.net](http://Riseup.net) gives the details
    on how to download and install that certificate. Lastly, you can use Tor to fetch
    updates on your keys.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Jacob Applebaum维护了这些最佳实践的实现，你可以从[https://github.com/ioerror/duraconf/raw/master/configs/gnupg/gpg.conf](https://github.com/ioerror/duraconf/raw/master/configs/gnupg/gpg.conf)下载并保存为你的`~/.gnupg/gpg.conf`文件。该配置文件有详细注释，你可以参考[Riseup.net](http://Riseup.net)提供的最佳实践指南以获取更多信息。然而，有三个条目需要你进行修改。第一个是`default-key`，它是你主GPG密钥的指纹。在本章稍后，我们将向你展示如何检索该指纹。现在我们无法执行此操作，因为我们还没有密钥。第二个是`keyserver-options
    ca-cert-file`，它是**密钥服务器池**的证书授权。密钥服务器托管你的公钥，密钥服务器池是多个冗余的密钥服务器集合。[Riseup.net](http://Riseup.net)上的说明提供了如何下载和安装该证书的详细信息。最后，你可以使用Tor来获取密钥更新。
- en: The act of you requesting a public key from a keyserver signals that you have
    a potential interest in communicating with the owner of that key. This metadata
    might be more interesting to a passive adversary than the contents of your message,
    since it reveals your social network. As we learned in [Chapter 2](part0019_split_000.html#page
    "Chapter 2. Circumventing Censorship with a Tor Bridge"), *Circumventing Censorship
    with a Tor Bridge*, Tor is apt at protecting traffic analysis. You probably don't
    want to store your GPG keys on the same BBB as your bridge, so a second BBB would
    help here. On your GPG BBB, you need to only run Tor as a client, which is its
    default configuration. Then you can update `keyserver-options http-proxy` to point
    to your Tor SOCKS proxy running on `localhost`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你向密钥服务器请求公钥的行为表明你可能有兴趣与该密钥的所有者进行通信。对于一个被动的对手而言，这些元数据可能比你的消息内容更有价值，因为它揭示了你的社交网络。正如我们在[第2章](part0019_split_000.html#page
    "第2章：使用Tor桥接绕过审查")中学到的，*使用Tor桥接绕过审查*，Tor在保护流量分析方面表现出色。你可能不希望将你的GPG密钥存储在与桥接相同的BBB上，因此第二个BBB会有所帮助。在你的GPG
    BBB上，你只需要将Tor作为客户端运行，这是其默认配置。然后，你可以更新`keyserver-options http-proxy`，指向你在`localhost`上运行的Tor
    SOCKS代理。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **Electronic Frontier Foundation** (**EFF**) provides some hypothetical
    examples on the telling nature of metadata, for example, *They (the government)
    know you called the suicide prevention hotline from the Golden Gate Bridge. But
    the topic of the call remains a secret*. Refer to the EFF blog post at [https://www.eff.org/deeplinks/2013/06/why-metadata-matters](https://www.eff.org/deeplinks/2013/06/why-metadata-matters)
    for more details.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**电子前沿基金会** (**EFF**) 提供了一些关于元数据揭示性质的假设性例子，例如，*他们（政府）知道你曾从金门大桥拨打自杀预防热线。但通话的内容依然是机密*。更多细节请参阅
    EFF 博客文章：[https://www.eff.org/deeplinks/2013/06/why-metadata-matters](https://www.eff.org/deeplinks/2013/06/why-metadata-matters)。'
- en: Generating the key
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成密钥
- en: 'Now you can generate your GPG key. Follow the on screen instructions and don''t
    include a comment. Depending on your entropy source, this could take a while.
    This example took 10 minutes using `haveged` as the entropy collector. There are
    various opinions on what to set as the expiration date. If this is your first
    GPG, try one year at first. You can always make a new key or extend the same one.
    If you set the key to never expire and you lose the key, by forgetting the passphrase,
    people will still think it''s valid unless you revoke it. Also, be sure to set
    the user ID to a name that matches some sort of identification, which will make
    it easier for people to verify that the holder of the private key is the same
    person as a certified piece of paper. The command to create a new key is `gpg
    –-gen-key`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以生成你的 GPG 密钥了。按照屏幕上的指示进行操作，不要包含评论。根据你的熵源，这可能需要一段时间。这个例子使用 `haveged` 作为熵收集器花费了
    10 分钟。关于设置过期日期存在不同意见。如果这是你第一次使用 GPG，先尝试设置一年。你随时可以创建一个新密钥或延长现有密钥的有效期。如果你将密钥设置为永不过期，而你又丢失了密钥（例如忘记了密码），别人仍然会认为它是有效的，除非你撤销它。此外，务必将用户
    ID 设置为与某种身份认证匹配的名字，这样更容易验证持有私钥的人与认证文件上的姓名一致。创建新密钥的命令是 `gpg --gen-key`：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'From this example, we know that our secret key is `0xABD9088171345468`. If
    you end up creating multiple keys, but use just one of them more regularly, you
    can edit your `gpg.conf` file and add the following line:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个例子中，我们知道我们的密钥是 `0xABD9088171345468`。如果你创建了多个密钥，但更常使用其中的一个，你可以编辑 `gpg.conf`
    文件并添加以下行：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Postgeneration maintenance
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成后维护
- en: 'In order for people to send you encrypted messages, they need to know your
    public key. Having your public key server can help distribute your public key.
    You can post your key as follows, and replace the fingerprint with your primary
    key ID:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让他人可以向你发送加密信息，他们需要知道你的公钥。设置公钥服务器有助于分发你的公钥。你可以按照以下方式发布你的公钥，并将指纹替换为你的主密钥 ID：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: GPG does not rely on third parties and expects you to perform key management.
    To ease this burden, the OpenPGP standards define the Web-of-Trust as a mechanism
    to verify other users' keys. Details on how to participate in the Web-of-Trust
    can be found in the GPG Privacy Handbook at [https://www.gnupg.org/gph/en/manual/x334.html](https://www.gnupg.org/gph/en/manual/x334.html).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: GPG 不依赖第三方，期望你自行管理密钥。为了简化这一工作，OpenPGP 标准定义了“信任网络”机制，用于验证其他用户的密钥。关于如何参与信任网络的详细信息可以在
    GPG 隐私手册中找到：[https://www.gnupg.org/gph/en/manual/x334.html](https://www.gnupg.org/gph/en/manual/x334.html)。
- en: 'You are also going to want to create a revocation certificate. A revocation
    certificate is needed when you want to revoke your key. You would do this when
    the key has been compromised, say if it was stolen. Or more likely, if the BBB
    fails and you can no longer access your key. Generate the certificate and follow
    the ensuing prompts replacing the ID with your key ID:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要创建一个撤销证书。撤销证书在你想撤销密钥时是必要的。比如说，如果密钥被盗，你需要撤销它。或者更可能的情况是，如果 BBB 发生故障，你无法再访问密钥。生成证书并按照提示操作，将
    ID 替换为你的密钥 ID：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Do take the advice and move this file off the BeagleBone. Printing it out and
    storing it somewhere safe is a good option, or burn it to a CD.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请听从建议，将此文件移出 BeagleBone。将其打印并存放在安全地方是一个不错的选择，或者将其刻录到 CD 上。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The lifespan of a CD or DVD may not be as long as you think. The United States
    National Archives Frequently Asked Questions (FAQ) page on optical storage media
    states that:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: CD 或 DVD 的使用寿命可能不像你想象的那么长。美国国家档案馆关于光学存储介质的常见问题页面指出：
- en: '*"CD/DVD experiential life expectancy is 2 to 5 years even though published
    life expectancies are often cited as 10 years, 25 years, or longer."*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*“CD/DVD 的实际使用寿命为 2 到 5 年，尽管发布的预期寿命通常标称为 10 年、25 年或更长。”*'
- en: Refer to their website [http://www.archives.gov/records-mgmt/initiatives/temp-opmedia-faq.html](http://www.archives.gov/records-mgmt/initiatives/temp-opmedia-faq.html)
    for more details.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 参考他们的网站[http://www.archives.gov/records-mgmt/initiatives/temp-opmedia-faq.html](http://www.archives.gov/records-mgmt/initiatives/temp-opmedia-faq.html)获取更多详细信息。
- en: Lastly, create an encrypted backup of your encryption key and consider storing
    that in a safe location on durable media.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建你的加密备份密钥，并考虑将其存储在耐用介质上的安全位置。
- en: Using GPG
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用GPG
- en: 'With your GPG private key created or imported, you can now use GPG on the BBB
    as you would on any other computer. In [Chapter 1](part0015_split_000.html#page
    "Chapter 1. Creating Your BeagleBone Black Development Environment"), *Creating
    Your BeagleBone Black Development Environment*, you installed Emacs on your host
    computer. If you follow the GNU/Linux instructions, you can also install Emacs
    on the BBB. If you do, you''ll enjoy automatic GPG encryption and decryption for
    files that end in the `.gpg` extension. For example, suppose you want to send
    a message to your good friend, Pirate Prentice, whose GPG key you already have.
    Compose your message in Emacs, and then save it with a `.gpg` extension. Emacs
    will prompt you to select the public keys for encryption and will automatically
    encrypt the buffer. If a GPG-encrypted message is encrypted to a public key, with
    which you have the corresponding private key, Emacs will automatically decrypt
    the message if it ends with `.gpg`. When using Emacs from the terminal, the prompt
    for encryption should look like the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有了你创建或导入的GPG私钥，你现在可以在BBB上像在任何其他计算机上一样使用GPG。在[第1章](part0015_split_000.html#page
    "Chapter 1. Creating Your BeagleBone Black Development Environment")中，*创建你的BeagleBone
    Black开发环境*，你在主机计算机上安装了Emacs。如果你按照GNU/Linux的指示操作，你也可以在BBB上安装Emacs。如果你这样做，你将享受自动的GPG文件加密和解密功能，用于以`.gpg`扩展名结尾的文件。例如，假设你想给你的好朋友Pirate
    Prentice发送一条消息，他的GPG密钥你已经有了。在Emacs中撰写你的消息，然后以`.gpg`扩展名保存。Emacs将提示你选择用于加密的公钥，并自动加密缓冲区。如果一个GPG加密消息是加密给你有相应私钥的公钥，当以`.gpg`结尾时，Emacs将自动解密消息。在从终端使用Emacs时，加密的提示应该看起来像以下截图：
- en: '![Using GPG](img/00017.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![使用GPG](img/00017.jpeg)'
- en: Protecting your GPG key with a TPM
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用TPM保护你的GPG密钥
- en: If you want, you could stop the project now and happily use GPG on your BBB.
    But if you do, you would miss out on adding some extra protection with the CryptoCape,
    specifically, the **Trusted Platform Module** (**TPM**). In the upcoming sections,
    we will use the TPM to protect our GPG private key.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你可以现在停止项目并愉快地在你的BBB上使用GPG。但是如果你这样做，你将错过使用CryptoCape提供的一些额外保护，特别是**可信平台模块**（**TPM**）。在接下来的部分中，我们将使用TPM来保护我们的GPG私钥。
- en: Introducing trusted computing
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍可信计算
- en: 'The TPM is a cryptographic co-processor. The TPM on the CryptoCape is Atmel''s
    embedded I2C version, which conforms to version 1.2 of the TPM spec published
    by the **Trusted Computing Grou**p (**TCG**). The TCG is an industry consortium
    that maintains and develops open specifications for trusted computing. *Trusted*
    in this sense is the definition from RFC 4949: *a system that operates as expected,
    according to design and policy*.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: TPM是一个密码协处理器。CryptoCape上的TPM是Atmel的嵌入式I2C版本，符合由**可信计算组**（**TCG**）发布的TPM规范1.2版。TCG是一个行业联盟，负责维护和开发可信计算的开放规范。在RFC
    4949中，*可信*的定义是：*按设计和政策预期运行的系统*。
- en: Cryptographically, TPM 1.2 is limited. It implements the RSA algorithm, SHA-1,
    has an internal random number generator, and some limited storage. It does not
    provide any symmetric ciphers. These limitations were a result of the design goal
    for a low cost embeddable module. Symmetric ciphers were eliminated, because with
    the TPM, one can protect the symmetric keys at rest and allow the much more powerful
    host computer to operate on them.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从密码学角度看，TPM 1.2存在一些限制。它实现了RSA算法，SHA-1，具有内部随机数生成器和一些有限的存储空间。它不提供任何对称加密算法。这些限制是为了设计成本低廉、可嵌入模块的设计目标。对称加密算法被排除在外，因为使用TPM，可以保护静态对称密钥，并允许更强大的主机计算机对其进行操作。
- en: 'The TPM 1.2 specification is, in total, over 700 pages. We will focus on a
    unique feature of the TPM that enables many of its security features: **Platform
    Control Registers** (**PCRs**). PCRs are TPM registers that can always be read
    but may only be written to with the **extend operation**. The extend operation
    takes the current value of the 20 byte PCR, combines it with a 20 byte input value,
    and sets the new PCR value to the SHA-1 result of the combination. The key point
    is that once a PCR is set, it can''t be reversed. It can only be continued to
    be combined in future extend operations.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: TPM 1.2 规范总共有700多页。我们将关注TPM的一个独特特性，这个特性使得它的许多安全功能成为可能：**平台控制寄存器** (**PCRs**)。PCRs是TPM寄存器，始终可以读取，但只能通过**扩展操作**写入。扩展操作获取当前的20字节PCR值，与一个20字节的输入值组合，并将新的PCR值设置为这个组合的SHA-1结果。关键点在于一旦PCR被设置，就无法逆转。它只能在未来的扩展操作中继续组合。
- en: At first, it may not be obvious how this feature helps. Let's consider an example.
    On boot, your computer's BIOS, prior to loading the bootloader, first sends a
    SHA-1 hash of the bootloader to the TPM to extend one of the PCRs. It then loads
    the bootloader. The bootloader performs the same operation on your kernel. The
    kernel then performs the same operation on various startup systems before finally
    allowing normal user operation. At the end of this process, the PCRs will be populated
    with a series of hash values.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，这个功能可能不明显有何帮助。让我们考虑一个例子。在启动时，您的计算机的BIOS在加载引导加载程序之前，首先将引导加载程序的SHA-1哈希发送到TPM以扩展一个PCR。然后加载引导加载程序。引导加载程序在您的内核上执行相同的操作。然后内核在各种启动系统上执行相同的操作，最后允许正常用户操作。在这个过程结束时，PCRs将填充一系列哈希值。
- en: The values of these registers represent a trusted measurement of your system.
    Now, say malware has infected your computer and has modified the boot process.
    On next boot, at least one of the PCRs will have a drastically different value
    than previously recorded. PCRs enable measurements of the boot process which provide
    assertions of the boot process.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些寄存器的值代表您系统的可信度量。现在，假设恶意软件已经感染了您的计算机并修改了启动过程。在下次启动时，至少一个PCR的值与之前记录的值有显著不同。PCRs使得可以对启动过程进行测量，从而提供关于启动过程的断言。
- en: There are several terms relating to the TPM-protected boot process. Secure boot
    will halt the boot processes if the PCR values do not match a known configuration.
    Authenticated boot simply measures the boot process and allows remote parties
    to make assertions on the pedigree of the boot process. Trusted boot refers to
    a system that uses both authenticated and secure boots.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个与TPM保护启动过程相关的术语。如果PCR值与已知配置不匹配，安全启动将停止启动过程。经过认证的启动只是测量启动过程，并允许远程方对启动过程的来源进行断言。受信启动指的是同时使用经过认证和安全启动的系统。
- en: Encrypting data to a PCR state
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密数据到一个PCR状态
- en: The TPM supports another feature that builds on the state of the PCRs. As previously
    mentioned, the TPM can perform RSA encryption. However, the TPM can also combine
    the state of the PCRs to the encryption in a process known as **sealing**. Once
    data is sealed to a PCR value, it can only be decrypted when the PCR matches the
    same value as when the encryption was performed.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: TPM支持另一个建立在PCR状态之上的功能。如前所述，TPM可以执行RSA加密。然而，TPM还可以将PCR状态与加密结合在一起，这个过程称为**封存**。一旦数据被封存到PCR值，只有当PCR与加密时相同的值匹配时，才能解密数据。
- en: How is this going to help us protect our GPG key? We will encrypt the GPG key
    to a known PCR state. We'll use the numeric code entered from the keypad connected
    to the CryptoCape as input into this PCR state. When the TPM decrypts the GPG
    private key, it will be available for use by GPG as usual. While GPG private keys
    are already protected with a passphrase, the TPM provides extra protection for
    the key at rest. The passphrase could still be captured with a keylogger, but
    our key won't be available until the BBB boots with the CryptoCape attached and
    the code entered directly into the BBB.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这将如何帮助我们保护GPG密钥？我们将GPG密钥加密到已知的PCR状态。我们将使用从连接到CryptoCape的键盘输入的数字代码作为这个PCR状态的输入。当TPM解密GPG私钥时，它将像通常一样可供GPG使用。虽然GPG私钥已经受到密码短语的保护，但TPM在静止时提供额外的密钥保护。密码短语仍然可能被键盘记录器捕获，但在BBB启动并连接CryptoCape并直接输入代码之前，我们的密钥将不可用。
- en: This system also helps in preventing offline attacks on the numeric code. The
    PCR value, once extended with the correct code, will allow unsealing of the data.
    But, if the wrong code is entered, the PCR value will be incorrect and the only
    way to reset the PCR, if that PCR is one of the *non-resettable* PCRs, is to reboot.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统还有助于防止对数字代码的离线攻击。一旦使用正确的代码扩展了PCR值，就可以解锁数据。但是，如果输入错误的代码，PCR值将不正确，若该PCR是*不可重置*的PCR之一，唯一的重置方法是重启。
- en: Adding the keypad
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加键盘
- en: 'We''re going to need a way to enter this code into the BBB. This code is used
    to populate one of the TPM''s PCRs that will be used to seal the GPG key. This
    keypad will be connected to the ATmega328p on the CryptoCape. While the BBB is
    more than capable of handling the I/O for the keypad, by using the ATmega328p,
    we take advantage of code reuse. For most hardware products in the SparkFun catalog,
    there exists at least an unofficial Arduino library. If the components aren''t
    available at SparkFun, then you should be able to find similar parts from the
    product descriptions. In the case of the keypad, there is an official library.
    The hardware for this project is listed in the following table:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方法将此代码输入到BBB中。此代码用于填充TPM的PCR之一，该PCR将用于密封GPG密钥。这个键盘将连接到CryptoCape上的ATmega328p。虽然BBB完全能够处理键盘的I/O，但通过使用ATmega328p，我们可以充分利用代码重用。对于SparkFun目录中的大多数硬件产品，至少有一个非官方的Arduino库。如果这些组件在SparkFun上没有，你应该能够从产品描述中找到类似的部件。就键盘而言，有一个官方库。该项目的硬件列在下表中：
- en: '| Device | SparkFun number |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 设备 | SparkFun编号 |'
- en: '| --- | --- |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| CryptoCape | DEV-12773 |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| CryptoCape | DEV-12773 |'
- en: '| Keypad | COM-08653 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 键盘 | COM-08653 |'
- en: '| F/F jumper wires | PRT-08430 |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| F/F跳线 | PRT-08430 |'
- en: '| Male breakaway headers | PRT-00116 |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 公头断开连接器 | PRT-00116 |'
- en: 'To build this Arduino library, you''ll first need to install the `Keypad` library
    from the Arduino playground site: [http://playground.arduino.cc/code/Keypad](http://playground.arduino.cc/code/Keypad).
    Then clone the following repository from GitHub:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建这个Arduino库，你首先需要从Arduino Playground网站安装`Keypad`库：[http://playground.arduino.cc/code/Keypad](http://playground.arduino.cc/code/Keypad)。然后从GitHub克隆以下仓库：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `ch4` code folder, you''ll find both the `keypad.ino` source and the
    compiled hex that is ready to be loaded onto the 328p. From [Chapter 3](part0031_split_000.html#page
    "Chapter 3. Adding Hardware Security with the CryptoCape"), *Adding Hardware Security
    with the CryptoCape*, remember that compiled sketches can be uploaded to the ATmega328p
    with the following command, just be sure to install the program jumpers:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ch4`代码文件夹中，你会找到`keypad.ino`源代码和已编译好的hex文件，准备加载到328p中。从[第3章](part0031_split_000.html#page
    "第3章：通过CryptoCape添加硬件安全")，*通过CryptoCape添加硬件安全*，记住可以通过以下命令将编译好的草图上传到ATmega328p，只要确保安装了程序跳线：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This program has the 328p joining the I2C bus at hex address 0x42\. It then
    waits to receive data from an I2C master device, the BBB, and then will collect
    your five-digit code from the keypad. You have ten seconds to enter a five-digit
    code and the timer starts once the CryptoCape LED is lit. Each time you press
    a key, the LED will momentarily flash. Once all five characters are collected,
    the LED will turn off.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序将328p连接到I2C总线的十六进制地址0x42。它会等待从I2C主设备——BBB接收数据，然后从键盘收集五位数字代码。你有十秒钟的时间输入五位数字代码，计时器一旦CryptoCape
    LED亮起就开始。每按下一次键，LED会瞬间闪烁。收集完五个字符后，LED会熄灭。
- en: 'To connect the keypad to the CryptoCape, you first need to solder 0.1" male
    pins to the keypad. Also, you''ll need to solder the 0.1" male header pins to
    the CryptoCape ATmega328p pads. Once the pins are installed, now you need to connect
    a jumper wire from the keypad to the CryptoCape. Note that the keypad has nine
    pins but only seven are used. Consider the first pin, closest to the `*` character
    as *pin 0*. Connect the jumpers per the following table:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要将键盘连接到CryptoCape，你首先需要将0.1"的公头引脚焊接到键盘上。同时，你还需要将0.1"的公头引脚焊接到CryptoCape ATmega328p的焊盘上。安装好引脚后，你需要使用跳线将键盘连接到CryptoCape。请注意，键盘有九个引脚，但只有七个会用到。将第一个引脚（最靠近`*`字符的引脚）视为*引脚0*。按以下表格连接跳线：
- en: '| Keypad pin | Arduino digital pin |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 键盘引脚 | Arduino数字引脚 |'
- en: '| --- | --- |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 3 | D2 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 3 | D2 |'
- en: '| 1 | D3 |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 1 | D3 |'
- en: '| 5 | D4 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 5 | D4 |'
- en: '| 2 | D5 |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 2 | D5 |'
- en: '| 7 | D6 |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 7 | D6 |'
- en: '| 6 | D7 |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 6 | D7 |'
- en: '| 4 | D8 |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 4 | D8 |'
- en: 'The keypad, when attached to the CryptoCape, should look like the following
    image:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将键盘连接到CryptoCape后，应该看起来如下图所示：
- en: '![Adding the keypad](img/00018.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![添加键盘](img/00018.jpeg)'
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The case shown in the image is logic supply''s plated steel chassis. It is
    available on their website: [http://www.logicsupply.com/components/beaglebone/boards-cases-kits/bb100-orange/](http://www.logicsupply.com/components/beaglebone/boards-cases-kits/bb100-orange/).'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图像中显示的情况是逻辑供应的镀钢机箱。您可以在他们的网站上找到这些信息：[http://www.logicsupply.com/components/beaglebone/boards-cases-kits/bb100-orange/](http://www.logicsupply.com/components/beaglebone/boards-cases-kits/bb100-orange/)。
- en: 'Now, we need some software that will initiate the code collection process on
    the ATmega328p. Remember that the software needs to collect the code and then
    extend the PCR. In the previously listed repository is a file, `keypad.c`, which
    does exactly this. To build this program, you''ll need the development package
    of the open source TCG software stack:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一些软件，它将启动ATmega328p上的代码收集过程。请记住，软件需要收集代码，然后扩展PCR。在前面列出的存储库中有一个文件，`keypad.c`，它正是这样做的。要构建此程序，您需要开源TCG软件堆栈的开发包：
- en: '[PRE10]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then you should be able to compile the program with:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您应该能够使用以下命令编译程序：
- en: '[PRE11]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Taking ownership of the TPM
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拥有TPM的所有权
- en: 'Before we use the TPM, we must first take ownership of it. Taking ownership
    establishes an owner password for maintenance operations and a password for one
    of the root keys inside the TPM, the **Storage Root Key** (**SRK**) (pronounced
    *shark*). You can set the administrator password to any password you want, but
    to work with legacy software, you''ll want to set the SRK to the *well-known password*
    of twenty zeros. You can set a unique SRK password if you want, but the TrouSerS
    software, the software used to control the TPM, includes a command-line parameter
    to set the password to its well-known value for a reason. First install `tpm-tools`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用TPM之前，我们必须首先拥有它。拥有TPM会为维护操作建立一个所有者密码和一个TPM内部的根密钥之一，即**存储根密钥**（**SRK**）（发音为*shark*）。您可以将管理员密码设置为任何密码，但是为了与传统软件一起使用，您会想将SRK设置为二十个零的*众所周知的密码*。如果您想要设置一个唯一的SRK密码，但是用于控制TPM的TrouSerS软件包括一个命令行参数，用于将密码设置为其众所周知的值。首先安装`tpm-tools`：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then you should restart your BBB with the CryptoCape attached. This will ensure
    that the TPM kernel driver and associate software load correctly. To check if
    everything is working properly issue the following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您应该重新启动带有CryptoCape连接的BBB。这将确保TPM内核驱动程序和相关软件正确加载。要检查一切是否正常工作，请发出以下命令：
- en: '[PRE13]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This should return:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 应返回：
- en: '[PRE14]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then check for the daemon by issuing:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过发出以下命令检查守护程序：
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This command should return something like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令应返回类似于以下内容：
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then you can take ownership of the TPM as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以按以下方式拥有TPM：
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You''ll be prompted to enter an owner password. The `-z` option sets the SRK
    to the well-known passphrase. The response should be:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被提示输入所有者密码。 `-z` 选项将SRK设置为众所周知的密码短语。回应应为：
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now you are ready to use the TPM.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好使用TPM。
- en: Note
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have the CryptoCape v02, then you will need to perform some additional
    steps. The version number is found on the bottom layer of the board, above the
    P8 header, near the open source hardware logo, which looks like a gear. The TPMs
    on this revision are shipped in compliance mode, which means the keys loaded on
    them are test keys. This helps test the TPM during manufacture, but the keys need
    to be changed by the end user. Refer to the page [http://cryptotronix.com/cryptocape-tpm/](http://cryptotronix.com/cryptocape-tpm/)
    for more details.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有CryptoCape v02，则需要执行一些额外步骤。版本号位于板的底层，在P8标头上方，靠近开源硬件标志的图标上方，看起来像一个齿轮。此修订版上的TPM以合规模式发货，这意味着加载在其上的密钥是测试密钥。这有助于在制造过程中测试TPM，但需要最终用户更改密钥。有关详细信息，请参阅页面[http://cryptotronix.com/cryptocape-tpm/](http://cryptotronix.com/cryptocape-tpm/)。
- en: Extending a PCR
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展PCR
- en: 'We''ll need to extend a PCR so that we can encrypt our GPG key. We''ll arbitrarily
    choose PCR number 9\. First let''s view the PCR status to be sure that it is blank:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要扩展一个PCR以便加密我们的GPG密钥。我们将随意选择PCR号码9。首先让我们查看PCR状态，以确保它是空白的：
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This should return the current state of the PCR, which without using secure
    boot is:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这应返回PCR的当前状态，在不使用安全启动的情况下是：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, run the `getgpgpin` program from the following section. You should see
    the LED turn green on the CryptoCape and you have 10 seconds to enter a five-digit
    pin. Each time you press a key, the LED should briefly flash and when five digits
    have been entered, the LED will turn off. After 10 seconds, the `getgpgpin` program
    will silently exit. If you compiled the program with `#define DEBUG` set to `1`,
    you should see something like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从以下部分运行`getgpgpin`程序。你应该会看到CryptoCape上的LED灯变为绿色，并且你有10秒钟的时间输入一个五位数字的PIN码。每次按下一个键时，LED灯应该会闪烁，当输入完五个数字时，LED灯会熄灭。10秒钟后，`getgpgpin`程序将悄无声息地退出。如果你在编译程序时启用了`#define
    DEBUG`并设置为`1`，你应该会看到如下信息：
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, check your PCR status again:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再次检查你的PCR状态：
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should now have a populated PCR9:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该有一个填充的PCR9：
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can only enter the code once. If you try it again, the program will extend
    PCR9 again using the now incorrect PCR state as input into the next. Now, let''s
    seal our GPG secret key ring:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你只能输入代码一次。如果你再次尝试，程序将使用现在错误的PCR状态作为输入，再次扩展PCR9。现在，让我们封存我们的GPG秘密密钥环：
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can remove `-l debug` if you wish and the command will silently complete.
    Let''s test decryption:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以删除`-l debug`，命令将悄无声息地完成。现在让我们测试解密：
- en: '[PRE25]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'It should silently complete on success. You can now delete the temporary file
    `deleteme` and the original `secring.gpg`. You did make an encrypted backup, right?
    You''ll probably want to delete the file in a more secure fashion. The secure
    remove tool `srm` does just that and overwrites the file numerous times before
    deleting. To install use the following command:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，它应该悄无声息地完成。你现在可以删除临时文件`deleteme`和原始的`secring.gpg`。你做了加密备份对吧？你可能想要以更安全的方式删除这个文件。安全删除工具`srm`可以做到这一点，它会在删除之前多次覆盖文件。要安装它，可以使用以下命令：
- en: '[PRE26]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Then use just as you would `rm`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然后像使用`rm`一样使用它。
- en: Note
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Bunnie Huang and Sean Cross (also known as *xobs*) presented a talk at the **30th
    Chaos Communication Congress** (**30C3**) on hacking SD cards. Your SD or eMMC
    includes a small microcontroller that manages the attached flash memory. This
    microcontroller is perfectly situated to act as a Man-in-the-Middle attacker and
    manipulate the data you store on the device. For example, the microcontroller
    could keep a backup copy of your data since it would report to your computer a
    storage capacity of 8GB, but actually it contains a 16 GB flash chip. More information
    can be found on Bunnie's blog at [http://www.bunniestudios.com/blog/?p=3554](http://www.bunniestudios.com/blog/?p=3554).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Bunnie Huang 和 Sean Cross（也被称为 *xobs*）在**第30届混沌通信大会**（**30C3**）上展示了一场关于破解SD卡的讲座。你的SD卡或eMMC包含一个小型微控制器，用于管理附加的闪存。这款微控制器非常适合充当中间人攻击者，并操控你存储在设备上的数据。例如，这个微控制器可能会保存你数据的备份，因为它向你的计算机报告的存储容量是8GB，但实际上它包含的是16GB的闪存芯片。更多信息可以在Bunnie的博客上找到，[http://www.bunniestudios.com/blog/?p=3554](http://www.bunniestudios.com/blog/?p=3554)。
- en: Unlocking your key at startup
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动时解锁你的密钥
- en: Finally, we need to automate this process. When the BBB boots, we want it to
    collect the code, extend the PCR, and unwrap the GPG keys so that they are ready
    to use. We'll make an `init.d` script that will handle this, but we still need
    to deal with the GPG key. We don't want an unwrapped GPG key lying around the
    disk, even if it is protected with a password. Instead, we'll keep the GPG keys
    on a `ramfs`, which will never touch persistent storage.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要自动化这个过程。当BBB启动时，我们希望它收集代码，扩展PCR，并解锁GPG密钥，以便它们可以准备使用。我们将制作一个`init.d`脚本来处理这个过程，但我们仍然需要处理GPG密钥。我们不希望解锁的GPG密钥留在磁盘上，即使它已通过密码保护。相反，我们将把GPG密钥保存在一个`ramfs`中，它永远不会触及持久存储。
- en: 'To create the `ramfs`, add the following to `/etc/fstab`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`ramfs`，请将以下内容添加到`/etc/fstab`：
- en: '[PRE27]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Be sure to replace your uid and gid with the appropriate values for your user.
    This can be obtained by running the `id` command. Either reboot or run `mount
    -a` to reload the `fstab`. Since GPG expects the `secring.gpg` to live in `~/.gnupg/secring.gpg`,
    we''ll create a link from there to the ramdisk. Create the following symlink:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将你的uid和gid替换为适合你用户的值。你可以通过运行`id`命令来获取这些值。可以选择重启或运行`mount -a`来重新加载`fstab`。由于GPG期望`secring.gpg`文件位于`~/.gnupg/secring.gpg`，我们将创建一个从该位置到ramdisk的链接。创建以下符号链接：
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, we want a script to run on boot. In the `beagle-bone-for-secret-agents/ch4`
    repository, there is a script, `tpm_gpg`, which you can copy to `/etc/init.d/`.
    This script expects `getgpgpin` to live in `/usr/local/bin` and that your `secring.gpg`
    is in the normal place. Edit as desired. To register this script, run as root:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个在启动时运行的脚本。在`beagle-bone-for-secret-agents/ch4`仓库中，有一个名为`tpm_gpg`的脚本，您可以将其复制到`/etc/init.d/`。此脚本期望`getgpgpin`位于`/usr/local/bin`，并且您的`secring.gpg`文件应该放在正常的位置。根据需要进行编辑。要注册此脚本，请以root身份运行：
- en: '[PRE29]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: With the script in place, the ramdisk set to mount at boot, the ATmega programmed
    to collect the code, and the hardware attached, reboot one more time. Watch for
    the CryptoCape LED to turn on, enter your pin, and then log back in to the BBB.
    If your GPG key is in `/mnt/ramdisk`, congratulations, you have just used your
    TPM to protect your GPG key! Because of the symlink, all GPG-related programs
    will use the keys just as usual. If not, recompile `keypad.c` with debug set to
    `1` to make sure everything is working.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本已经就绪、虚拟磁盘设置为启动时挂载、ATmega已编程以收集代码且硬件已连接的情况下，再次重启设备。注意观察CryptoCape LED灯是否亮起，输入您的PIN码，然后重新登录到BBB。如果您的GPG密钥位于`/mnt/ramdisk`，恭喜您，您刚刚使用TPM来保护您的GPG密钥！由于符号链接的存在，所有与GPG相关的程序将像往常一样使用这些密钥。如果没有，请重新编译`keypad.c`，将调试模式设置为`1`，确保一切正常运行。
- en: Note
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While the ramfs is meant to ensure that the GPG key, which is still protected
    by a password, is destroyed without power, researchers have recovered keys from
    RAM in the past. Refer to the URL [https://citp.princeton.edu/research/memory/](https://citp.princeton.edu/research/memory/)
    on cold boot attacks.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然ramfs旨在确保仍然通过密码保护的GPG密钥在断电后被销毁，但过去有研究人员从RAM中恢复了密钥。请参考[https://citp.princeton.edu/research/memory/](https://citp.princeton.edu/research/memory/)上的冷启动攻击。
- en: Iterating on the threat model
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 威胁模型的迭代
- en: Threat modeling and system design is an iterative process. The system we built
    in this chapter is a good start, but it can be improved. We identified a problem
    at the beginning of the chapter in that we still had to enter the GPG passphrase
    from a potentially compromised computer. The code entry on the keypad is currently
    only protecting the GPG key when the BBB is powered off. It also protects the
    key if an attacker who doesn't know the code boots the BBB, since the PCR will
    not have the correct value after the 10-second window has passed. To mitigate
    against the key logger attack, we would want to enter a passphrase directly into
    the BBB.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁建模和系统设计是一个迭代过程。本章中我们构建的系统是一个良好的起点，但它仍然可以改进。我们在本章开始时识别出一个问题，那就是我们仍然需要在可能已被攻破的计算机上输入GPG密码。键盘上的代码输入目前仅在BBB关闭电源时保护GPG密钥。如果一个不知情的攻击者启动BBB，它也可以保护密钥，因为在10秒的时间窗口后，PCR将不再具有正确的值。为了防止密钥记录攻击，我们希望能够直接在BBB上输入密码短语。
- en: There is a piece of software called **gpg-agent**, which manages your passphrase
    per login session. It can support different types of *pin entry* programs. For
    example, one pin entry program is X-Windows-based and another supports a command-line
    interface. You could certainly create your own pin entry program that supported
    your custom hardware. However, when you create this custom pin entry, you'd want
    to consider the effect of a potentially weaker passphrase, one composed of only
    numbers, for your GPG key. This demonstrates the importance of re-evaluating your
    threat model as new features are added to the design to ensure the correctness
    of the original assumptions.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 有一款名为**gpg-agent**的软件，它管理每个登录会话的密码短语。它可以支持不同类型的*PIN码输入*程序。例如，一个PIN码输入程序是基于X-Windows的，另一个则支持命令行接口。您当然可以创建一个支持自定义硬件的PIN码输入程序。然而，当您创建这个自定义PIN码输入程序时，您需要考虑密码短语的强度问题，如果仅由数字组成，可能会导致GPG密钥的安全性降低。这展示了随着新特性的加入，我们需要重新评估威胁模型，以确保最初的假设仍然有效。
- en: 'Also, you might want to consider adding an enclosure for your project. Your
    local hackerspace will be able to help you make a professionally looking enclosure.
    If you want something on the cheap, find a small translucent container and cut
    out room for the keypad and the connectors as shown in the following image:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可能还想考虑为您的项目添加一个外壳。您所在的黑客空间可以帮助您制作一个专业外观的外壳。如果您想要便宜一点的选择，可以找到一个小型半透明容器，并按以下图示切割出键盘和连接器的空间：
- en: '![Iterating on the threat model](img/00019.jpeg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![威胁模型的迭代](img/00019.jpeg)'
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how GPG can protect e-mail confidentiality. We
    created a threat model for our system and showed how this analysis can help us
    understand the capabilities and limitations of our design. At the end, we successfully
    built a BBB GPG co-processor that uses a TPM to help protect the GPG keys at rest
    and got more practice combining a microcontroller with an embedded Linux platform.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何通过 GPG 来保护电子邮件的机密性。我们为我们的系统创建了一个威胁模型，并展示了如何通过这个分析帮助我们理解设计的能力和局限性。最后，我们成功构建了一个
    BBB GPG 协处理器，使用 TPM 来帮助保护静态的 GPG 密钥，并获得了更多将微控制器与嵌入式 Linux 平台结合的实践。
- en: In the next chapter, we will investigate another major privacy enhancing technology
    that is used to protect real-time chat. You'll learn about the unique cryptographic
    properties of **Off-the-Record** (**OTR**) and how to use OTR over an Internet
    Relay Chat gateway that is hosted by your BBB.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究另一种用于保护实时聊天的主要隐私增强技术。你将了解 **Off-the-Record** (**OTR**) 的独特加密特性，以及如何在你的
    BBB 主机上托管的 Internet Relay Chat 网关上使用 OTR。

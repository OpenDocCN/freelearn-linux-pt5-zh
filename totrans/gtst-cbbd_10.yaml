- en: Appendix B. Basic Linux Commands Cheatsheet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Linux-based system contains many commands. Each installed application is,
    in fact, a command. This appendix will give an overview of the most basic commands
    that should, in theory, be available in every basic Linux installation. Most of
    these commands will be used throughout this book, some of which are considered
    as the bare basics. This appendix is by no means an authoritative reference, but
    it should get you well on your way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Requesting the manual
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Linux features an interesting command called `man`. It is special because,
    if installed, it opens a manual page about any command. Try it by requesting the
    manual page of `man`, as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Running `man` with the `man` parameter will open the manual page of `man`. With
    the *q* key, you can exit `man`, and with the arrow keys, you can navigate around.
    The *h* key opens a help screen where more keys are explained.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: If `man` or manual pages are not installed, the Internet can be used instead.
    There are many sites that have the most common manual pages available. The website
    [http://www.die.net](http://www.die.net) is very popular and can be used to query
    various manual pages.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Something to note is that there are several sections of manual pages available—nine
    to be exact. The man-manual page will explain each of them briefly. The first
    section relates to commands and these pages are queried by default.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a lot of commands often have a short help screen, which can be activated
    by appending `-h` or `--help` to a command.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Listing a directory
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ls` command, which stands for list, is the command used to list the contents
    of a directory. Without a parameter, it will list the current active directory,
    and if supplied with a parameter, it will try to list that file or directory,
    as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Changing through directories
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To change to a different directory, the `cd` command can be used. Without a
    parameter, `cd` will always change to the current user''s home directory; otherwise,
    the directory that is supplied via the first parameter is used, as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Getting the current working directory
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The current active directory or current working directory can be printed using
    the `pwd` command. This can be useful when one wants to know where one is located
    in the current filesystem and can be done using the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Getting the current user
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finding out which user is currently logged in can be useful, especially when
    swapping between several users. The `whoami` command will print the current active
    logged-in user, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Running commands as root
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Very often, when administering or setting up a system, certain commands need
    to be executed as root. The `sudo` command, when set up properly, can be used
    to allow certain users to execute certain commands as root. The *who* and *what*
    queries are controlled via the `sudoers` file at `/etc/sudoers` and should be
    edited with the `visudo` command. The `sudo` command is used as a prefix to the
    command to be executed as root, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统管理或设置过程中，常常需要以root用户身份执行某些命令。当`sudo`命令正确设置时，可以让某些用户以root身份执行特定的命令。*who*和*what*查询通过`/etc/sudoers`中的`sudoers`文件进行控制，并应使用`visudo`命令进行编辑。`sudo`命令作为前缀添加到需要以root身份执行的命令，如下所示：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It should be noted that while `sudo` is very often used to execute commands
    as root, it can also be used to have any user execute any command as any user.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然`sudo`常用于以root身份执行命令，它也可以让任何用户以任何身份执行任何命令。
- en: Changing the current user without logging out
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不退出登录的情况下切换当前用户
- en: 'To actually change to a different user as if one would log in with that user,
    the `su` command is used. With `su` followed by a different username, it is possible
    to change the identity of the said user. Unlike `sudo`, which requires the current
    user''s password, here, the user to whom access is being requested is required,
    as shown in the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正切换到另一个用户，就像用该用户登录一样，可以使用`su`命令。通过在`su`后面加上不同的用户名，可以切换到该用户的身份。与需要当前用户密码的`sudo`不同，这里需要的是请求访问的用户的密码，以下命令演示了这一点：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Logging out of a shell or from a different user, the following `exit` command
    is used. It takes no parameters. Alternatively, *Ctrl* + *d* can also be used
    to log out on nearly all shells.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出一个shell或其他用户，使用以下`exit`命令。该命令不需要任何参数。或者，几乎所有的shell都可以使用*Ctrl* + *d*来退出。
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Creating files or changing their dates
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文件或更改其日期
- en: 'To create a new empty file, the `touch` command can be used. Additionally,
    to modify an existing file''s access and modification date can be changed to reflect
    a new date and time, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的空文件，可以使用`touch`命令。此外，要修改已存在文件的访问和修改日期，可以将其更改为新的日期和时间，如下所示：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating directories
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建目录
- en: 'To create a new empty directory, the following `mkdir` command can be used:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的空目录，可以使用以下`mkdir`命令：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Removing files
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除文件
- en: To remove a file, the `rm` command can be used. The `rm` command removes the
    file that is passed along as a parameter. By default, `rm` will refuse to remove
    a directory; it only operates on files.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除文件，可以使用`rm`命令。`rm`命令会删除作为参数传递的文件。默认情况下，`rm`会拒绝删除目录；它只对文件有效。
- en: The two options that are very often passed to `rm` are `-r` and `-f`. First,
    a word of caution on the `-f` option, which stands for force; while the `rm` command
    should be used with extreme care, the `-f` option requires even more thought and
    attention. The `-f` option forces the removal of anything `rm` can delete, regardless
    of any permission.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 经常传递给`rm`的两个选项是`-r`和`-f`。首先，关于`-f`选项需要注意，它表示强制；虽然`rm`命令应该小心使用，但`-f`选项更需要谨慎考虑。`-f`选项会强制删除`rm`能够删除的任何东西，忽略任何权限设置。
- en: 'The `-r` option also needs to be used with care, as it stands for recursively
    delete. Ironically, the `-r` option takes a directory as a parameter, so it can
    recursively delete every file and directory under the passed location. Recursively
    deleting a file does not seem to make sense anyway. The following `rm` command
    shows an example to remove a file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`-r`选项也需要小心使用，因为它表示递归删除。具有讽刺意味的是，`-r`选项接受目录作为参数，因此它可以递归删除传入位置下的每个文件和目录。递归删除文件似乎没有什么意义。以下`rm`命令展示了删除文件的例子：'
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Removing a directory
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除目录
- en: 'Removing a directory is done via the `rmdir` command; it, however, will only
    operate on an empty directory, as shown in the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 删除目录通过`rmdir`命令完成；不过它仅能对空目录进行操作，如以下命令所示：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Copying files and directories
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制文件和目录
- en: 'To copy a file, the `cp` command can be used. Copying a file, you need to supply
    the source file and the destination file as parameters to `cp` in that order.
    Optionally, a directory can be supplied instead of a file to copy a directory.
    While `copy` takes many options, which the manual page explains in detail, the
    `-r` option can be important when dealing with directories, as it tells `copy`
    to recursively copy a directory and everything underneath it. The following command
    shows the use of the copy command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Moving files and directories
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To move a file, the `mv` command can be used. Supply the source file and destination
    file as parameters to `mv` in that order. Optionally, a directory can be supplied
    for the source and the destination or just the destination.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Renaming a file is actually nothing more than moving a file from one name to
    another. The following command is used to move a file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Changing file and directory access permissions
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To grant or restrict access to certain files and directories, the `chmod` command
    can be used. This command stands for *change mode* and requires at least two parameters:
    the mode that needs to be applied and the file or directory on which this needs
    to be applied.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Managing permissions properly can be quite complex, though the manual page
    does help quite a bit. The basics are as follows. Under Linux, there are three
    standard access levels: user, group, and others. A fourth virtual-access level
    exists to cover the three others, all. Let us take a look at each of these in
    detail:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '**User**: This access level relates to the user who owns a file or directory;
    usually, it refers to the user who created the file or directory'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group**: This access level grants all the users who are also members of this
    group access to this level'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Others**: This access level gives access to everybody else'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All**: This is the fourth virtual-access level that incorporates the preceding
    three levels'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The four access levels are often abbreviated with their first letters, `ugoa`.
    Next to the access levels, there are the access rights, and here, we will look
    at the three common ones. Technically, there are four, but more on that in a minute!
    The two primary access rights are read and write access to a file or directory,
    which are abbreviated with `r` and `w`. The third access right is execute, abbreviated
    with `x`, which grants execution permission on a file to a user, group, or anybody
    else. So, for example, `chmod` itself would require the execute access right to
    be set for anybody to actually execute that file. The fourth access right is `x`
    again, but this time it is applied to a directory. Since directories cannot be
    executed, the access right has a different meaning here and hence has four access
    rights. For directories, it allows users, groups, or anybody else to actually
    change into the directory and read the list of files in it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Constructing a mode is done as follows. Firstly, the shorthand letter is used
    to designate the user, group, or others followed by `+` or `–` to grant or revoke
    access rights supplied immediately after. Users, groups, and other designators
    can be combined if separated by a comma. Refer to the following example to see
    the constructing mode:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Very often, access permissions are applied by their numerical value, rather
    than through their letters. This has its roots mostly in history, where the actual
    mode bits were used. For more details on the numerical values, you can refer to
    the manual page.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Changing file and directory ownership
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To change the owner of a file or directory, the `chown` command can be used,
    which stands for change owner. For this, two parameters are required: the new
    owner and the file or directory that requires new ownership, as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To change the group membership of a file, a similar command to `chown`, called
    `chgroup`, which stands for change group, exists and works identically.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Changing passwords
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To change passwords, the `passwd` command can be used. When executed without
    a parameter, the current user''s password can be changed by supplying both the
    old and the new password. The root user can change any user''s password by supplying
    that as the first parameter to `passwd`, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Displaying the content of a text file
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many tools to output the content of a file; `less`, `more`, or `cat`,
    to name just a few. They all work similarly, pass a filename as their parameter,
    and they will start displaying the content. Both `less` and `more` allow search
    or scrolling through the file, with `less` being more advanced than `more`. The
    `cat` utility, which stands for concatenate, will just output whatever it finds
    in the file, be it text or not, as shown here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: One common operation used with `cat` is redirecting the output content of a
    file to somewhere else, be it a new file where its functions mimic the copying
    of a file or appending to another file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few programs that function in a manner that is very similar to
    `cat`, but operate on compressed files, decompressing them on the fly. Such commands
    are `zcat`, for **gzip** cat or `xzcat`, for the **xz** compression. A useful
    purpose lies herein that when redirecting the output, a file could be decompressed
    and the output can be written elsewhere. [Chapter 3](ch03.html "Chapter 3. Installing
    an Operating System"), *Installing an Operating System*, makes use of this by
    taking a compressed binary file and redirecting the output directly onto a flash
    disk, as shown here:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Modifying the partitions on a disk
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `fdisk` command, which stands for fixed disk, is a command that can create
    and modify partitions on a hard or flash disk. It requires a disk device node
    to be supplied as a parameter. While it is quite menu-driven, `fdisk` has a lot
    of commands. The most important ones are briefly summarized, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '`m`: This command shows a help menu'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p`: This command prints the current partition table'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`o`: This command wipes out the entire partition table and creates a new empty
    partition table'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n`: This command creates a new partition by answering a few questions that
    `fdisk` asks'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d`: This command deletes a partition'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`w`: This command writes the created partition table to the disk and exits'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always take great care when working with partitions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fdisk` command does not actually write the changes to the disk unless explicitly
    requested. If there are errors, the *Ctrl* + *c* key can be used to quit `fdisk`
    without writing changes to the disk.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Formatting partitions
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To format a partition, the various `mkfs` commands can be used. It depends on
    whether the supporting utilities are installed. When creating an `ext4` partition,
    `mkfs.ext4` is used. Likewise, to create a `fat` or `vfat` partition, `mkfs.vfat`
    is used. Each filesystem partitioning tool has different options and parameters,
    so the manual page for these commands should be checked for details. Generally
    speaking, when using the default settings, supplying the device-specific partition
    node, such as `/dev/sdb1`, for the first partition `(1)` on the second hard or
    flash disk `(b)` is passed as a parameter to the `mkfs` commands. Creating filesystems
    is a destructive operation. Use it with care!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, an `ext4` filesystem is created on a previously partitioned
    USB flash stick. Note that `sudo` was used here to obtain permission to write
    directly to the flash drive.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: A special variant of `mkfs` is `mkswap`, which creates a filesystem specifically
    geared to swap space.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Mounting partitions
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Attaching storage to a system is called mounting. While many graphical desktop
    environments seem to just work, behind the scenes, they still mount and unmount
    disks and partitions. The `mount` command, which makes this happen, requires two
    parameters: the device node and the mount location.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Either of the two parameters might be omitted if either of them has been defined
    in the `fstab` file at `/etc/fstab`. The `fstab` file is parsed by `mount` to
    see what needs to be mounted, where, and how. Usage of the `mount` command is
    shown here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Unmounting partitions
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To remove a partition from a running system, the `umount` command is used and
    stands for *unmount*. The *n* seems to be thought about as being redundant so
    the term has been abbreviated to `umount`. It is very important to know that `umount`
    requires no files or directories that are being accessed or in use when detaching
    a partition from the system. Either the device node or the mount point can be
    used to unmount a partition, as shown here:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Writing data
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A somewhat unusual name is used for the program described in this section, `dd`.
    It is unknown what `dd` stands for, but its purpose is to copy data. There are
    many possible arguments to `dd`, but the most important ones used in this book
    will be covered here. The `if` parameter specifies the input file where data is
    to be read from. The `of` parameter is the output file parameter where the data
    is to be written. With these two parameters, it is already possible to copy data
    from the source to the destination. What makes `dd` so versatile is the plethora
    of other parameters. The `seek` parameter allows you to change the start position
    where to start writing. The `skip` parameter allows you to change the start position
    from where data is read. The `bs` parameter, which stands for block-size, determines
    the size of the data blocks involved in the transaction, and in combination with
    the `count` parameter, determines how much data is to be copied. As `dd` allows
    you to very specifically control a copy operation, it is often used to write full
    images, bootloaders at specific locations, and much more, as shown in the following
    command. See the manual page for more information.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Changing to a special root directory
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Normally, the root directory is the main system directory and everything branches
    from there. Sometimes, we want to restrict access to only certain parts of the
    system or temporarily pretend a certain directory is this root. The `chroot` command,
    which stands for change root, ensures that the supplied directory is considered
    the new root until exited. As a second parameter, `chroot` can be told what command
    to run from within this restricted root. In the following example, the root directory
    is changed to `/tmp/testdir` and the requested command to be executed, `bash`,
    will reside at `/tmp/testdir/bin/bash`, as shown here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Forcing the system to write all content to disks
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modern systems buffer everything in memory and occasionally write that content
    to disk. The obvious reason for this is that the disks are very slow and the memory
    is fast. This does have a bad side effect, that is, sometimes the data that we
    expect to be on a disk is not actually written. The `sync` command causes all
    the data that is not yet written to disk to be synchronized to the disk, as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Adding new users
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To add a new user to the system, the `useradd` command can be used. While there
    are many options and parameters that can be supplied, as seen in [Chapter 4](ch04.html
    "Chapter 4. Manually Installing an Alternative Operating System"), *Manually Installing
    an Alternative Operating System*, the manual page does a great job of explaining
    all the options. However, just applying a new username is sufficient to create
    a bare user, as shown in the following command. Note that a new user does not
    have a password yet and needs one created via the previously mentioned `passwd`
    command.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Additional commands
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter contained a short list of the most basic commands. There are many
    more commands and even more guides on the Internet that go over a lot of commands.
    The website [http://www.reallylinux.com/](http://www.reallylinux.com/) has a nice
    section called *Essential Commands* where these and more are briefly covered,
    but any site that covers the basic Linux commands can be used to learn more about
    commands.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含了一份最基本命令的简短列表。互联网上有很多其他命令和更多的指南，详细讲解了许多命令。网站[http://www.reallylinux.com/](http://www.reallylinux.com/)有一个名为*Essential
    Commands*（基本命令）的栏目，简要介绍了这些命令及更多内容，但任何涵盖基本 Linux 命令的网站都可以用来深入了解命令。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This appendix covered the most basic Linux commands as well as the ones used
    throughout this book. The next appendix will give you an overview of the FEX configuration
    file.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录介绍了最基础的 Linux 命令，以及本书中使用的命令。下一个附录将概述 FEX 配置文件。

- en: Chapter 2. Deploying RHEL "En Masse"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes are provided:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a kickstart file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing your kickstart file using `httpd`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a system using `pxe`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a system using a custom boot ISO file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will find the answer to deploying multiple systems with
    the same basic setup. We will first look at creating an answer file, the kickstart
    file that will drive the unattended installation. Then, we'll take a look at a
    possible way to make this kickstart file accessible through the Apache web server.
    Finally, we'll discuss two common ways to install physical and virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter assumes that you have a working knowledge of system network configuration
    components, such as DNS, DNS search, IP addresses, and so on, and yum repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a kickstart file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A kickstart file is essentially a file containing all the necessary answers
    to questions that are asked during a typical install. It was created by Red Hat
    in response to the need for automated installs. Using kickstart, an admin can
    create one file or template containing all the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three ways to create a kickstart file:'
  prefs: []
  type: TYPE_NORMAL
- en: By hand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the GUI's `system-config-kickstart` tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the standard Red Hat installation program Anaconda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, I will cover a combination of the first two.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can get down to the nitty-gritty of generating our base kickstart
    file or template, we need to install `system-config-kickstart`. Run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s create a base template for our kickstart file(s) through the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, launch **Kickstart Configurator** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your system's basic configuration from the **Kickstart Configurator**
    GUI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the options you can set in the **Basic Configuration**
    view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00004.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, select the installation method from the **Kickstart Configurator** GUI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the options that you can set in the **Installation
    method** view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00005.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, substitute the values for **HTTP Server** and **HTTP Directory** with
    your own repositories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the correct settings are applied for **Boot Loader**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the options that you can set in the **Boot Loader
    options** view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00006.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Configure your disk and partition information. Simply create a `/boot` partition
    and be done with it! We'll edit the file manually for better customization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the options you can set in the **Partition Information**
    view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00007.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Configure your network. You need to know the name of your device if you want
    to correctly configure your network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Network Device** information that you
    can edit in the **Network Configuration** view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00008.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, disable **Installing a graphical environment**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We want as few packages as possible. The following screenshot shows the options
    that you can set in the **Display Configuration** view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00009.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, perform any preinstallation and/or postinstallation tasks you deem necessary.
    I always try to make root accessible through SSH and keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the options that you can set in the **Post-Installation
    Script** view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00010.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Save the kickstart file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the file using your favorite editor and add the following to your partition
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following script to your network line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following script before `%post`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a password hash for use in the next step, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the resulting file. You should have something similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `system-config-kickstart` is used to generate a minimal install as any addition
    would be more complex than the tool can handle and we need to be able to add them
    manually/dynamically afterwards. The fewer the number of packages the better as
    you'll need to apply bug and security fixes for every package installed.
  prefs: []
  type: TYPE_NORMAL
- en: Although the GUI allows us to configure the brunt of the options we need, I
    prefer tweaking some portions of them manually as they are not as straightforward
    through the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Step 9 adds the necessary information to use the rest of the disk as an LVM
    physical volume and partitions it so that *big* filesystems can easily be extended
    if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: The `--recommended` argument for the SWAP partition creates a swap partition
    as per the swap size recommendations set by Red Hat.
  prefs: []
  type: TYPE_NORMAL
- en: Step 10 adds a hostname for your host. If you do not specify this, the system
    will attempt to resolve the IP address and use this hostname. If it cannot determine
    any hostname, it will use `localhost.localdomain` as `fqdn`.
  prefs: []
  type: TYPE_NORMAL
- en: Step 11 ensures that only the core system is installed and nothing more, so
    you can build from here.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to know exactly which packages are installed in the core group,
    run the following command on an RHEL 7 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I didn't cover one option that I mentioned in the *Getting Ready* section as
    it is automatically generated when you install a system manually. The file can
    be found after installation at `/root/anaconda-ks.cfg`. Instead of using the `system-config-kickstart`
    tool to generate a kickstart file, you can use this file to get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with RHEL 7, kickstart deployments support add-ons. These add-ons
    can expand the standard kickstart installation in many ways. To use kickstart
    add-ons, just add the `%addon addon_name` option followed by `%end`, as with the
    `%pre` and `%post` sections. Anaconda comes with the `kdump` add-on, which you
    can use to install and configure `kdump` during the installation by providing
    the following section in your kickstart file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more detailed information about kickstart files, refer to the website [https://github.com/rhinstaller/pykickstart/blob/master/docs/kickstart-docs.rst](https://github.com/rhinstaller/pykickstart/blob/master/docs/kickstart-docs.rst).
  prefs: []
  type: TYPE_NORMAL
- en: For the consistent network device naming, refer to [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/ch-Consistent_Network_Device_Naming.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/ch-Consistent_Network_Device_Naming.html).
  prefs: []
  type: TYPE_NORMAL
- en: Publishing your kickstart file using httpd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can save your kickstart file to a USB stick (or any other medium), but this
    becomes a bit cumbersome if you need to install multiple systems in different
    locations.
  prefs: []
  type: TYPE_NORMAL
- en: Loading kickstart files over the network from the kernel line during an install
    only supports NFS, HTTP, and FTP.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, I choose HTTP as it is a common technology within companies
    and easy to secure.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by installing Apache `httpd`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Apache `httpd` through the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable and start the `httpd` daemon, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a directory to contain the kickstart file(s) by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy your kickstart file to this new location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In a browser, browse to the kickstart directory on your web server, as shown
    in the following screenshot:![How to do it…](img/00011.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this way, you can create multiple kickstart files, which will be available
    from anywhere in your network.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you could use CGI-BIN, PHP, or any other technology that has an
    Apache module to dynamically create kickstart files based on the arguments that
    you specify in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative to creating your own solution for dynamic kickstart files is
    Cobbler.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more info on Cobbler, go to [http://cobbler.github.io/](http://cobbler.github.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a system using PXE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PXE, or Preboot eXecution Environment, allows you to instruct computers to boot
    using network resources. This allows you to control a single source to install
    servers without the need to physically insert cumbersome DVDs or USB sticks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need a fully working RHEL 7 repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With this recipe, we''ll install and configure PXE boots from the RHEL 7 installation
    media, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the necessary packages using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the DNSMASQ server by editing `/etc/dnsmasq.conf`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable and start `dnsmasq` using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, enable and start the `xinet` daemon by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the `tftp` server''s `xinet` daemon, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the `syslinux` boot loaders to the `tftp` server''s boot directory by
    executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the PXE configuration directory using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the PXE configuration file, as follows: `/var/lib/tftpboot/pxelinux.cfg/default`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy `initrd` and `kernel` from the RHEL 7 installation media to `/var/lib/tftpboot/rhel7/`,
    and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the firewall on your server using these commands (however, this may not
    be necessary):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, launch your client, configure it to boot from the network, and select
    the first option shown in the following figure:![How to do it…](img/00012.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DNSMASQ takes care of pointing booting systems to the `tftp` server by providing
    the `enable-tftp` option in the `dnsmasq` configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Syslinux is needed to provide the necessary binaries to boot from the network.
  prefs: []
  type: TYPE_NORMAL
- en: The `tftp` server itself provides access to the `syslinux` files, RHEL 7 kernel,
    and `initrd` for the system to boot from.
  prefs: []
  type: TYPE_NORMAL
- en: The PXE configuration file provides the necessary configuration to boot a system,
    including a kickstart file that automatically installs your system.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe's base premise is that you do not have a DHCP server installed.
    In most companies, you already have DHCP services available.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have an ISC-DHCP server in place, this is what you need to add to the
    subnet definition(s) you want to allow in PXE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check out [Chapter 8](part0066_split_000.html#1UU541-501a83dd54944cb1bf060a2ce9fab11f
    "Chapter 8. Yum and Repositories"), *Yum and Repositories* to set up an RHEL 7
    repository from the installation media.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a system using a custom boot ISO file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PXE is a widely used way to deploy systems, and so are ISO's. PXE may not always
    be at hand because of security, hardware availability, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Many hardware manufacturers provide remote access to their systems without an
    OS installed. HP has iLO, while Dell has RIB. The advantage of these "remote"
    control solutions is that they also allow you to mount "virtual" media in the
    form of an ISO.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Red Hat provides boot media as ISO images, which you can use to boot your systems
    from. We will create a custom ISO image, which will allow us to boot a system
    in a similar way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an ISO that you can mount as virtual media, write a CD-ROM, or
    even use `dd` to write the contents on a USB stick/disk through the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the required packages to create ISO9660 images, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Mount the RHEL 7 DVD''s ISO image by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the required files for the custom ISO from the RHEL 7 media via the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, unmount the RHEL 7 DVD''s ISO image by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, remove the `isolinux.cfg` file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `isolinux.cfg` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the ISO by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: More information on the options used with the `mkisofs` command can be found
    in the man pages for *mkisofs(1)*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following image shows the progress on creating a custom ISO:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00013.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Then, use the ISO to install a guest on a KVM server, as shown in the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the console when booted with the custom ISO
    image:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00014.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the RHEL 7 installation media, we created a new boot ISO that allows us
    to install a new system. The ISO can be used to either burn a CD, with the `dd`
    tool to be copied on a USB stick, or to mount as virtual media. The way to mount
    this ISO as virtual media is different on each hardware platform, so this recipe
    shows you how to install it using KVM.
  prefs: []
  type: TYPE_NORMAL

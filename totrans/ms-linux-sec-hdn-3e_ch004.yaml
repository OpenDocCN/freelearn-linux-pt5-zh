- en: 3 Securing Normal User Accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Join our book community on Discord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file27.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing users is one of the more challenging aspects of IT administration.
    You need to make sure that users can always access their stuff and that they can
    perform the required tasks to do their jobs. You also need to ensure that users'
    stuff is always secure from unauthorized users. In this chapter, we'll look at
    how to lock down user accounts and user credentials to protect them from attackers
    and snoopers. We'll wrap up by taking a brief look at a few centralized user management
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Locking down users' home directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforcing strong password criteria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting and enforcing password and account expiration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing brute-force password attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locking user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up security banners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting compromised passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding central user management systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locking down users' home directories the Red Hat way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another area where different Linux distro families do business differently
    from each other. As we shall see, each distro family comes with different default
    security settings for users’ home directories. A security administrator who oversees
    a mixed environment of different Linux distros will need to take this into account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Traditionally, Red Hat Enterprise Linux and all of its offspring, such as CentOS
    and AlmaLinux, have had better out-of-the-box security than any other family of
    Linux distros. This makes it quicker and easier to harden Red Hat-type systems
    because much of the work has already been done. One thing that''s already been
    done for us is locking down users'' home directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the `useradd` utility on Red Hat-type systems creates user home
    directories with a permissions setting of `700`. This means that only the user
    who owns the home directory can access it. All other normal users are locked out.
    We can see why by looking at the `/etc/login.defs` file. On your CentOS 7 VM,
    scroll down toward the bottom of the file, and you''ll see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `login.defs` file of a RHEL 8 or RHEL 9-type distro, such as AlmaLinux,
    you’ll see that the `UMASK` is set for wide-open permissions, which seems a bit
    strange. Here’s what that looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'But, a few lines below that, you’ll see a brand-new directive that we never
    had before, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So, even though the `UMASK` is wide-open, new user home directories still get
    properly locked-down.
  prefs: []
  type: TYPE_NORMAL
- en: The `login.defs` file is one of two files where default settings for `useradd`
    are configured. Either the `UMASK` line or the `HOME_MODE` line is what determines
    the permissions values on home directories as they get created. Red Hat-type distros
    have it configured with the `077` value, which removes all permissions from the
    group and others. Either the `HOME_MODE` line or the `UMASK` line is in the `login.defs`
    file for all Linux distros, but until recently, Red Hat-type distros have been
    the only ones that have had them set to such a restrictive value by default. Most
    non-Red Hat distros usually have a `UMASK` value of `022`, which creates home
    directories with a permissions value of `755`. This allows everybody to enter
    everybody else's home directories and access each others' files.
  prefs: []
  type: TYPE_NORMAL
- en: Locking down users' home directories the Debian/Ubuntu way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Debian and its offspring, such as Ubuntu, have two user creation utilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useradd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adduser`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at both of them.
  prefs: []
  type: TYPE_NORMAL
- en: useradd on Debian/Ubuntu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `useradd` utility is there, but Debian and Ubuntu don''t come with handy
    preconfigured defaults as the Red Hat-type distros do. If you were to just do
    `sudo useradd frank` on a Debian/Ubuntu machine, Frank would have no home directory
    and would be assigned the wrong default shell. So, to create a user account with
    `useradd` on a Debian or Ubuntu system, the command would look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the breakdown of what all this means:'
  prefs: []
  type: TYPE_NORMAL
- en: '**-m** creates the home directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-d** specifies the home directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-s** specifies Frank''s default shell. (Without the `-s`, Debian/Ubuntu would
    assign to Frank the `/bin/sh` shell.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you look at the home directories on either a Debian or an Ubuntu 20.04
    machine, you''ll see that they''re wide open, with execute and read privileges
    for everybody:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, Frank and I can get into each other''s stuff. (And no, I don''t
    want Frank getting into my stuff.) Each user could change the permissions on his
    or her own directory, but how many of your users would know how to do that? So,
    let''s fix that ourselves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see what we have now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That looks much better.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the default permissions setting for home directories, open `/etc/login.defs`
    for editing. Look for this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, new users' home directories will get locked down on creation, just as they
    do with Red Hat and its offspring.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ubuntu 22.04, things are different. Ubuntu developers have finally realized
    that users’ home directories should be locked down by default. So, the `HOME_MODE`
    setting in an Ubuntu 22.04 `login.defs` file now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This includes access permissions for a user’s own personal group, but that’s
    okay. It still effectively means that only the respective owners of the various
    home directories can get into them.
  prefs: []
  type: TYPE_NORMAL
- en: adduser on Debian/Ubuntu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `adduser` utility is an interactive way to create user accounts and passwords
    with a single command, which is unique to the Debian family of Linux distros.
    Most of the default settings that are missing from the Debian implementation of
    `useradd` are already set for `adduser`. On Debian and Ubuntu 20.04, it creates
    user home directories with the wide-open `755` permissions value. Fortunately,
    that''s easy to change. (We''ll see how in just a bit.) On Ubuntu 22.04, it creates
    properly locked-down home directories with the restrictive `750` permissions value.
    You’ll see that setting in the `/etc/adduser.conf` file, in the vicinity of line
    56:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As I mentioned before, that will be set to a `755` value in Ubuntu 20.04\. Just
    change that value to `750` to lock down the new home directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although `adduser` is handy for just casual creation of user accounts, it doesn''t
    offer the flexibility of `useradd` and it isn''t suitable for use in shell scripting.
    One thing that `adduser` can do that `useradd` can’t is to automatically encrypt
    a user''s home directory as you create the account. To make it work, you''ll first
    have to install the `ecryptfs-utils` package. So, to create an account with an
    encrypted home directory for Cleopatra, you do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We'll look at the whole encryption thing in more detail when we get to the encryption
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab for creating an encrypted home directory with adduser
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For this lab, we'll be working with the `adduser` utility on an Ubuntu 22.04
    VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `ecryptfs-utils` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a user account with an encrypted home directory for Cleopatra and then
    view the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Log in as Cleopatra and run the `ecryptfs-unwrap-passphrase` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that some of the information that `adduser` asks for is optional, and you
    can just hit the *Enter* key for those items.
  prefs: []
  type: TYPE_NORMAL
- en: Enforcing strong password criteria
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You wouldn''t think that a benign-sounding topic such as strong password criteria
    would be so controversial, but it is. The conventional wisdom that you''ve undoubtedly
    heard for your entire computer career says:'
  prefs: []
  type: TYPE_NORMAL
- en: Make passwords of a certain minimum length.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make passwords that consist of a combination of uppercase letters, lowercase
    letters, numbers, and special characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that passwords don't contain any words that are found in the dictionary
    or that are based on the users' own personal data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Force users to change their passwords on a regular basis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But, using your favorite search engine, you'll see that different experts disagree
    on the details of these criteria. For example, you'll see disagreements about
    whether passwords should be changed every 30, 60, or 90 days, disagreements about
    whether all four types of characters need to be in a password, and even disagreements
    on what the minimum length of a password should be.
  prefs: []
  type: TYPE_NORMAL
- en: The most interesting controversy of all comes from—of all places—the guy who
    invented the preceding criteria to begin with. He now says that it's all bunk
    and regrets having come up with it. He now says that we should be using passphrases
    that are long, yet easy to remember. He also says that they should be changed
    only if they've been breached.
  prefs: []
  type: TYPE_NORMAL
- en: Bill Burr, the former National Institutes of Standards and Technology (NIST)
    engineer who created the strong password criteria that I outlined earlier, shares
    his thoughts about why he now disavows his own work. Refer to [https://www.pcmag.com/news/355496/you-might-not-need-complex-alphanumeric-passwords-after-all.](https://www.pcmag.com/news/355496/you-might-not-need-complex-alphanumeric-passwords-after-all.)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And, since the original edition of this book was published, NIST has come to
    agree with Bill Burr. They have now changed their password implementation criteria
    to match Mr. Burr's recommendations. You can read about that at
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://www.riskcontrolstrategies.com/2018/01/08/new-nist-guidelines-wrong/](https://www.riskcontrolstrategies.com/2018/01/08/new-nist-guidelines-wrong/).'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: However, having said all that, there is the reality that many organizations
    are still wedded to the idea of using complex passwords that regularly expire,
    and you'll have to abide by their rules if you can't convince them otherwise.
    And besides, if you are using traditional passwords, you do want them to be strong
    enough to resist any sort of password attack. So now, we'll take a look at the
    mechanics of enforcing strong password criteria on a Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tip:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I have to confess that I had never before thought to try creating a passphrase
    to use in place of a password on a Linux system. So, I just now tried it on my
    CentOS virtual machine to see if it would work.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I created an account for Maggie, my black-and-white tuxedo kitty. For her password,
    I entered the passphrase `I like other kitty cats`. You may think, "Oh, that's
    terrible. This doesn't meet any complexity criteria*,* and it uses dictionary
    words. How is that secure?" But the fact that it's a phrase with distinct words
    separated by blank spaces does make it secure and very difficult to brute-force.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, in real life, I would never create a passphrase that expresses my love
    for cats because it's not hard to find out that I really do love cats. Rather,
    I would choose a passphrase about some more obscure part of my life that nobody
    but me knows about. In any case, there are two advantages of passphrases over
    passwords. They're more difficult to crack than traditional passwords, yet they're
    easier for users to remember. For extra security though, don't create passphrases
    about a fact of your life that everybody knows about.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Installing and configuring pwquality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll be using the `pwquality` module for the **Pluggable Authentication Module**
    (**PAM**). This is a newer technology that has replaced the old `cracklib` module.
    On any Red Hat 7 or newer type of system, and on SUSE and OpenSUSE, `pwquality`
    is installed by default, even if you do a minimal installation. If you `cd` into
    the `/etc/pam.d/` directory, you can do a `grep` operation to see that the PAM
    configuration files are already set up. `retry=3` means that a user will only
    have three tries to get the password right when logging in to the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'On Debian and Ubuntu, you’ll need to install `pwquality` yourself, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the procedure is the same for all of our operating systems and consists
    of just editing the `/etc/security/pwquality.conf` file. When you open this file
    in your text editor, you'll see that everything is commented out, which means
    that no password complexity criteria are in effect. You'll also see that it's
    very well documented because every setting has its own explanatory comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set password complexity criteria however you want just by uncommenting
    the appropriate lines and setting the appropriate values. Let''s take a look at
    just one setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The minimum length setting works on a credit system. This means that for every
    different type of character class in the password, the minimum required password
    length will be reduced by one character. For example, let''s set `minlen` to a
    value of `19` and try to assign Katelyn the password `turkeylips`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the lowercase characters in `turkeylips` count as credit for one type
    of character class, we''re only required to have 18 characters instead of 19\.
    If we try this again with `TurkeyLips`, we''ll get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This time, the uppercase `T` and uppercase `L` count as a second character class,
    so we only need to have 17 characters in the password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just below the `minlen` line, you''ll see the credit lines. Let''s say that
    you don''t want lowercase letters to count toward your credits. You would find
    this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Uncomment it, and change the `1` to a `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, try assigning Katelyn `turkeylips` as a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This time, the `pwquality` really does want 19 characters. If we set a credit
    value to something higher than `1`, we would get credit for multiple characters
    of the same class type up to that value.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also set the credit values to negative numbers in order to require a
    certain number of characters types in a password. For example, we could have this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This would require at least three digits in a password. However, it''s a really
    bad idea to use this feature, because someone who''s doing a password attack would
    soon find the patterns that you require, which would help the attacker to more
    precisely direct the attack. If you need to require that a password has multiple
    character types, it would be better to use the `minclass` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It's already set to a value of `3`, which would require characters from three
    different classes. To use this value, all you have to do is to remove the comment
    symbol.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the parameters in `pwquality.conf` work pretty much the same way,
    and each one has a well-written comment to explain what it does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tip:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you use your `sudo` privilege to set someone else's password, the system
    will complain if you create a password that doesn't meet complexity criteria,
    but it will let you do it. If a normal user were to try to change his or her own
    password without `sudo` privileges, the system would not allow a password that
    doesn't meet complexity criteria.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hands-on lab for setting password complexity criteria
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For this lab, you can use either a CentOS, AlmaLinux, or Ubuntu virtual machine,
    as desired. The only difference is that you won't perform Step 1 for either CentOS
    or AlmaLinux.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Ubuntu only, install the `libpam-pwquality` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `/etc/security/pwquality.conf` file in your preferred text editor.
    Remove the comment symbol from in front of the `minlen` line and change the value
    to `19`. It should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and exit the editor.
  prefs: []
  type: TYPE_NORMAL
- en: Create a user account for Goldie and attempt to assign her the passwords `turkeylips`,
    `TurkeyLips`, and `Turkey93Lips`. Note the change in each warning message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `pwquality.conf` file, comment out the `minlen` line. Uncomment the
    `minclass` line and the `maxclassrepeat` line. Change the `maxclassrepeat` value
    to `5`. The lines should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and exit the text editor.
  prefs: []
  type: TYPE_NORMAL
- en: Try assigning various passwords that don't meet the complexity criteria that
    you've set to Goldie's account and view the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `/etc/login.defs` file on your CentOS 7 machine, you'll see the line
    `PASS_MIN_LEN 5`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Supposedly, this is to set the minimum password length, but in reality, `pwquality`
    overrides it. So, you could set this value to anything at all, and it would have
    no effect. (Note that the `PASS_MIN_LEN` parameter is no longer supported on RHEL
    8/9-type distros.)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Setting and enforcing password and account expiration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Something you never want is to have unused user accounts remain active. There
    have been incidents where an administrator set up user accounts for temporary
    usage, such as for a conference, and then just forgot about them after the accounts
    were no longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: Another example would be if your company were to hire contract workers whose
    contract expires on a specific date. Allowing those accounts to remain active
    and accessible after the temporary employees leave the company would be a huge
    security problem. In cases like these, you want a way to ensure that temporary
    user accounts aren't forgotten about when they're no longer needed. If your employer
    subscribes to the conventional wisdom that users should change their passwords
    on a regular basis, then you'll also want to ensure that it gets done.
  prefs: []
  type: TYPE_NORMAL
- en: Password expiration data and account expiration data are two different things.
    They can be set either separately or together. When someone's password expires,
    he or she can change it, and everything will be all good. If somebody's account
    expires, only someone with the proper admin privileges can unlock it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, take a look at the expiry data for your own account. Note that
    you won''t need `sudo` privileges to look at your own data, but you will still
    need to specify your own username:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see here that no expiration data have been set. Everything here is
    set according to the out-of-the-box system default values. Other than the obvious
    items, here''s a breakdown of what you see:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Password inactive**: If this were set to a positive number, I would have
    that many days to change an expired password before the system would lock out
    my account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum number of days between password change**: Because this is set to
    `0`, I can change my password as often as I like. If it were set to a positive
    number, I would have to wait that number of days after changing my password before
    I could change it again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum number of days between password change**: This is set to the default
    value of `99999`, meaning that my password will never expire.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of days of warning before password expires**: The default value is
    `7`, but that''s rather meaningless when the password is set to never expire.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the `chage` utility, you can either set password and account expiration
    data for other users or use the `-l` option to view expiration data. Any unprivileged
    user can use `chage -l` without `sudo` to view his or her own data. To either
    set data or view someone else's data, you need `sudo`. We'll take a closer look
    at `chage` a bit later.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Before we look at how to change expiration data, let''s first look at where
    the default settings are stored. We''ll first look at the `/etc/login.defs` file.
    Here are the three relevant lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You can edit these values to fit your organization's needs. For example, changing
    `PASS_MAX_DAYS` to a value of `30` would cause all new user passwords from that
    point on to have a 30-day expiration data. (By the way, setting the default password
    expiry data in `login.defs` works for all of the Linux distros that we’re using.)
  prefs: []
  type: TYPE_NORMAL
- en: Configuring default expiry data for useradd for Red Hat-type systems only
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `/etc/default/useradd` file has the rest of the default settings. In this
    case, we''ll look at the one from the AlmaLinux 9 machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu also has the `useradd` configuration file, but it doesn't work. No matter
    how you configure it, the Ubuntu version of `useradd` just won't read it. So,
    the write-up about this file only applies to Red Hat-type systems.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `EXPIRE=` line sets the default expiration date for new user accounts.
    By default, there is no default expiration date. `INACTIVE=-1` means that user
    accounts won''t be automatically locked out after the users'' passwords expire.
    If we set this to a positive number, then any new users will have that many days
    to change an expired password before the account gets locked. To change the defaults
    in the `useradd` file, you can either hand-edit the file or use `useradd -D` with
    the appropriate option switch for the item that you want to change. For example,
    to set a default expiration date of December 31, 2025, the command would be as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the new configuration, you can either open the `useradd` file or just
    do `sudo useradd -D`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ve now set it so that any new user accounts that get created will have
    the same expiration date. You can do the same thing with either the `INACTIVE`
    setting or the `SHELL` setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now, any new user accounts that get created will have the Zsh shell set as the
    default shell and will have to have expired passwords changed within five days
    to prevent having the account automatically locked out.
  prefs: []
  type: TYPE_NORMAL
- en: '`useradd` doesn''t do any safety checks to ensure that the default shell that
    you''ve assigned is installed on the system. In our case, Zsh isn''t installed,
    but `useradd` will still allow you to create accounts with Zsh as the default
    shell.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So, just how useful is this `useradd` configuration feature in real life? Probably
    not that much, unless you need to create a whole bunch of user accounts at once
    with the same settings. Even so, a savvy admin would just automate the process
    with a shell script, rather than messing around with this configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Setting expiry data on a per-account basis with useradd and usermod
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might find it useful to set the default password expiry data in `login.defs`,
    but you probably won't find it too useful to configure the `useradd` configuration
    file. Really, what are the chances that you'll want to create all user accounts
    with the same account expiration date? Setting password expiry data in `login.defs`
    is more useful because you'll just be saying that you want new passwords to expire
    within a certain number of days, rather than to have them all expire on a specific
    date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most likely, you''ll want to set account expiry data on a per-account basis,
    depending on whether you know that the accounts will no longer be needed as of
    a specific date. There are three ways that you can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `useradd` with the appropriate option switches to set expiry data as you
    create the accounts. (If you need to create a whole bunch of accounts at once
    with the same expiry data, you can automate the process with a shell script.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `usermod` to modify expiry data on existing accounts. (The beautiful thing
    about `usermod` is that it uses the same option switches as `useradd`.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `chage` to modify expiry data on existing accounts. (This one uses a whole
    different set of option switches.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use `useradd` and `usermod` to set account expiry data, but not to
    set password expiry data. The only two option switches that affect account expiry
    data are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-e`: Use this to set an expiration date for the account, in the form YYYY-MM-DD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-f`: Use this to set the number of days after the user''s password expires
    that you want for his or her account to get locked out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s say that you want to create an account for Charlie that will expire
    at the end of 2025\. On a Red Hat-type machine, you could enter this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'On a non-Red Hat-type machine, you''d have to add the option switches that
    create the home directory and assign the correct default shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `chage -l` to verify what you''ve entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s say that Charlie''s contract has been extended, and you need to
    change his account expiration to the end of January 2026\. You''ll use `usermod`
    the same way on any Linux distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, verify that everything is correct with `chage -l`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, you can set the number of days before an account with an expired
    password will get locked out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: But if you were to do that now, you wouldn't see any difference in the `chage
    -l` output because we still haven't set expiration data for Charlie's password.
  prefs: []
  type: TYPE_NORMAL
- en: Setting expiry data on a per-account basis with chage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You would only use `chage` to modify existing accounts, and you would use it
    for setting either an account expiration or a password expiration. Here are the
    relevant option switches:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| `-d` | If you use the `-d 0` option on someone''s account, you''ll force
    the user to change his or her password on their next login. |'
  prefs: []
  type: TYPE_TB
- en: '| `-E` | This is equivalent to the lowercase `-e` for `useradd` or `usermod`
    . It sets the expiration date for the user account. |'
  prefs: []
  type: TYPE_TB
- en: '| `-I` | This is equivalent to `-f` for `useradd` or `usermod` . It sets the
    number of days before an account with an expired password will be locked out.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-m` | This sets the minimum number of days between password changes. In
    other words, if Charlie changes his password today, the `-m 5` option will force
    him to wait five days before he can change his password again. |'
  prefs: []
  type: TYPE_TB
- en: '| `-M` | This sets the maximum number of days before a password expires. (Be
    aware, though, that if Charlie last set his password 89 days ago, using a `-M
    90` option on his account will cause his password to expire tomorrow, not 90 days
    from now.) |'
  prefs: []
  type: TYPE_TB
- en: '| `-W` | This will set the number of warning days for passwords that are about
    to expire. |'
  prefs: []
  type: TYPE_TB
- en: 'You can set just one of these data items at a time or you can set them all
    at once. In fact, to avoid frustrating you with a different demo for each individual
    item, let''s set them all at once, except for `-d 0`, and then we''ll see what
    we''ve got:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: All expiration data have now been set.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our final example, let''s say that you''ve just created a new account for
    Samson, and you want to force him to change his password the first time he logs
    in. There are two ways to do that. Either way, you would do it after you''ve set
    his password initially, using one of these two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will go through a hands-on lab.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab for setting account and password expiry data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this lab, you''ll create a couple of new user accounts, set expiration data,
    and view the results. You can do this lab on any of your virtual machines. The
    only difference will be with the `useradd` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On your CentOS or AlmaLinux VM, create a user account for Samson with the expiration
    date of June 30, 2025, and view the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'For Ubuntu, run these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `usermod` to change Samson''s account expiration date to July 31, 2025:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Assign a password to Samson''s account, then force him to change his password
    on his first login. Log in as Samson, change his password, then login to your
    own account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `chage` to set a five-day waiting period for changing passwords, a password
    expiration period of 90 days, an inactivity period of two days, and a warning
    period of five days:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Keep this account, because you'll be using it for the lab in the next section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let's see how to prevent brute-force attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing brute-force password attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazingly enough, this is another topic that engenders a bit of controversy.
    I mean, nobody denies the wisdom of automatically locking out user accounts that
    are under attack. The controversial part concerns the number of failed login attempts
    that we should allow before locking the account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the stone age of computing, so long ago that I still had a full head
    of hair, the early Unix operating systems only allowed users to create a password
    with a maximum of eight lowercase letters. So in those days, it was possible for
    early man to brute-force someone else''s password just by sitting down at the
    keyboard and typing in random passwords. That''s when the philosophy started of
    having user accounts get locked out after only three failed login attempts. Nowadays,
    with strong passwords, or better yet, a strong passphrase, setting a lockout value
    of three failed login attempts will do three things:'
  prefs: []
  type: TYPE_NORMAL
- en: It will unnecessarily frustrate users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will cause extra work for help desk personnel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an account really is under attack, it will lock the account before you've
    had a chance to gather information about the attacker.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the lockout value to something more realistic, such as 100 failed login
    attempts, will still provide good security, while still giving you enough time
    to gather information about the attackers. Just as importantly, you won't cause
    undue frustration to users and help desk personnel.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, regardless of how many failed login attempts your employer allows you
    to allow, you'll still need to know how to set it all up. On RHEL 7-type systems
    and Ubuntu 18.04, you’ll do this by configuring the `pam_tally2` **Pluggable Authentication
    Module** (**PAM**). On RHEL 8/9-type systems and Ubuntu 20.04/22.04, you’ll instead
    configure the `pam_faillock` PAM module. Let’s dig in and see how it’s done.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the pam_tally2 PAM module on CentOS 7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make this magic work, we''ll rely on our good friend, PAM. The `pam_tally2`
    module comes already installed on CentOS 7, but it isn''t configured. We''ll begin
    by editing the `/etc/pam.d/login` file. Figuring out how to configure it is easy
    because there''s an example at the bottom of the `pam_tally2` man page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Tip:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you’re working with a text-mode server, you’ll only need to configure the
    `/etc/pam.d/login` file. But, if you’re working with a machine that’s running
    a graphical desktop environment, you’ll also need to configure the `/etc/pam.d/password.auth`
    and the `/etc/pam.d/system.auth` files. You’ll see how to do that when you get
    to the hands-on lab.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In the second line of the example, we see that `pam_tally2` is set with the
    following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**deny=4**: This means that the user account under attack will get locked out
    after only four failed login attempts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**even_deny_root**: This means that even the root user account will get locked
    if it''s under attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**unlock_time=1200**: The account will get automatically unlocked after 1,200
    seconds, or 20 minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, if you look at the actual `login` file on your virtual machine, you'll
    see that it doesn’t look exactly like this example `login` file that's in the
    man page. That's okay, we'll still make it work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve configured the `login` file and have had a failed login, you''ll
    see a new file created in the `/var/log` directory. You''ll view information from
    that file with the `pam_tally2` utility. You can also use `pam_tally2` to manually
    unlock a locked account if you don''t want to wait for the timeout period:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note that, after I did the reset on Charlie's account, I received no output
    from doing another query.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab for configuring pam_tally2 on CentOS 7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Configuring `pam_tally2` is super easy because it only requires adding one
    line to the `/etc/pam.d/login`, `/etc/pam.d/password.auth`, and `/etc/pam.d/system.auth`
    files. To make things even easier, you can just copy and paste that line from
    the example in the `pam_tally2` man page. In spite of what I said earlier about
    bumping the number of failed logins up to 100, we''ll keep that number at 4 for
    now, because I know that you don''t want to have to do 100 failed logins in order
    to demo this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the CentOS 7 virtual machine, open the `/etc/pam.d/login` file for editing.
    Look for the line that invokes the `pam_securetty` module. (That should be around
    line 2.) Beneath that line, insert this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and exit the editor.
  prefs: []
  type: TYPE_NORMAL
- en: Place the same line at the top of the `/etc/pam.d/password.auth` and `/etc/pam.d/system.auth`
    files, just above the first `auth required` line. (The comment at the top of these
    files says to not hand-edit them, because running `authconfig` will destroy the
    edits. Unfortunately, you have to hand edit them, because `authconfig` won’t configure
    this for you.)
  prefs: []
  type: TYPE_NORMAL
- en: For this step, you'll need to log out of your own account, because `pam_tally2`
    doesn't work with `su`. So log out and, while purposely using the wrong password,
    attempt to log in to the `samson` account that you created in the previous lab.
    Keep doing that until you see the message that the account is locked. Note that
    when the `deny` value is set to `4`, it will actually take five failed login attempts
    to lock Samson out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log back in to your own user account. Run this command and note the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'For this step, you''ll simulate that you''re a help desk worker, and Samson
    has just called to request that you unlock his account. After verifying that you
    really are talking to the real Samson, enter the following two commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Now that you've seen how this works, open the `/etc/pam.d/login` file for editing.
    Change the `deny=` parameter from `4` to `100` and save the file. (This will make
    your configuration a bit more realistic in terms of modern security philosophy.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let’s look at configuring `pam_faillock` on our AlmaLinux machines.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring pam_faillock on AlmaLinux 8/9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `pam_faillock` module is already installed on any RHEL 8 or RHEL 9-type
    of Linux distro. Since the basic concepts of `pam_faillock` are pretty much the
    same as they are for `pam_tally2`, we’ll dispense with the preliminary explanations
    and jump right to the hands-on procedure.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab for configuring pam_faillock on AlmaLinux 8 or AlmaLinux 9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Although you can enable and configure `pam_faillock` by hand-editing the PAM
    configuration files, the RHEL distros provide an easier method, which is called
    **authselect**. (Note that this procedure works exactly the same for either a
    text-mode or a GUI-type machine.)
  prefs: []
  type: TYPE_NORMAL
- en: 'On either an AlmaLinux 8 or an AlmaLinux 9 VM, view the available authselect
    profiles by doing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, at least, we’re only dealing with local users. So, we’ll use the **minimal**
    profile. View the features of this profile like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Note that there are a lot of included features, but we’re only interested in
    the `with-faillock` feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the minimal profile, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'After enabling a profile, we can now enable the `pam_faillock` module, like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `/etc/security/` directory, open the `faillock.conf` file in your favorite
    text editor. Look for these four lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Remove the preceding comment symbols from all four lines, and save the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a user account for Vicky by doing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Open another terminal, and have Vicky deliberately make three failed login
    attempts. View the results in your own terminal, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Then, before the timer expires, have Vicky try to log in again with her own
    correct password.
  prefs: []
  type: TYPE_NORMAL
- en: After the ten-minute timer expires, have Vicky try to log in with the correct
    password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Have the user log out. Then, have the user again deliberately make three failed
    login attempts. This time, reset the user’s account before the timer expires,
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: That’s it for this lab.
  prefs: []
  type: TYPE_NORMAL
- en: Doing this on Ubuntu is a bit different, so let’s now look at that.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring pam_faillock on Ubuntu 20.04 and Ubuntu 22.04
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sadly, the `authselect` utility isn’t available for Ubuntu, so we’ll just have
    to hand-edit the PAM configuration files. Here’s the procedure.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab for configuring pam_faillock on Ubuntu 20.04 and Ubuntu 22.04
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Open the `/etc/pam.d/common-auth` file in your favorite text editor. At the
    top of the file, insert these two lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `/etc/pam.d/common-account` file in your text editor. At the bottom
    of the file, add this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Configure the `/etc/security/faillock.conf` file the same way that I showed
    you in Step 5 of the preceding lab for AlmaLinux.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the setup as outlined in Steps 6 through 8 of the preceding AlmaLinux lab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And, that’s all there is to it. Next, let’s look at how to manually lock a user’s
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locking user accounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Okay, you''ve just seen how to have Linux automatically lock user accounts
    that are under attack. There will also be times when you''ll want manually lock
    out user accounts. Let''s look at a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: When a user goes on vacation and you want to ensure that nobody monkeys around
    with that user's account while he or she is gone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a user is under investigation for questionable activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a user leaves the company
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With regard to the last point, you may be asking yourself, *Why can't we just
    delete the accounts of people who are no longer working here?* And, you certainly
    can, easily enough. However, before you do so, you'll need to check with your
    local laws to make sure that you don't get yourself into deep trouble. Here in
    the United States, for example, we have the **Sarbanes-Oxley** law, which restricts
    what files that publicly traded companies can delete from their computers. If
    you were to delete a user account, along with that user's home directory and mail
    spool, you just might be running afoul of Sarbanes-Oxley or whatever you may have
    as the equivalent law in your own home country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, there are two utilities that you can use to temporarily lock a user
    account:'
  prefs: []
  type: TYPE_NORMAL
- en: '**usermod**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**passwd**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In apparent contradiction to what I just said, at some point you will need to
    remove inactive user accounts. That's because malicious actors can use an inactive
    account to perform their dirty deeds, especially if that inactive account had
    any sort of administrative privileges. But when you do remove the accounts, make
    sure that you do so in accordance with local laws and with company policy. In
    fact, your best bet is to ensure that your organization has written guidelines
    for removing inactive user accounts in its change management procedures.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using usermod to lock a user account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s say that Katelyn has gone on maternity leave and will be gone for several
    weeks. We can lock her account by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'When you look at Katelyn''s entry in the `/etc/shadow` file, you''ll now see
    an exclamation point in front of her password hash, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: This exclamation point prevents the system from reading her password hash, which
    effectively locks her out of the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To unlock her account, just do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: You'll see that the exclamation point has been removed so that she can now log
    in to her account.
  prefs: []
  type: TYPE_NORMAL
- en: Using passwd to lock user accounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You could also lock Katelyn''s account like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'This does the same job as `usermod -L`, but in a slightly different manner.
    For one thing, `passwd -l` will give you some feedback about what''s going on,
    whereas `usermod -L` gives you no feedback at all. On Ubuntu, the feedback looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'On CentOS or AlmaLinux, the feedback looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Also, on a CentOS or AlmaLinux machine, you'll see that `passwd -l` places two
    exclamation points in front of the password hash, instead of just one. Either
    way, the effect is the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'To unlock Katelyn''s account, just do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: In versions of Red Hat or CentOS prior to version 7, `usermod -U` would remove
    only one of the exclamation points that `passwd -l` places in front of the `shadow`
    file password hash, thereby leaving the account still locked. No big deal, though,
    because running `usermod -U` again would remove the second exclamation point.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ever since the introduction of the RHEL 7-type distros, this has been fixed.
    The `passwd -l` command still places two exclamation points in the `shadow` file,
    but `usermod -U` now removes both of them. (That's a shame, really, because it
    ruined a perfectly good demo that I liked to do for my students.)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Locking the root user account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The cloud is big business nowadays, and it''s now quite common to rent a virtual
    private server from companies such as Rackspace, DigitalOcean, or Microsoft Azure.
    These can serve a variety of purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: You can run your own website, where you install your own server software instead
    of letting a hosting service do it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set up a web-based app for other people to access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recently, I saw a YouTube demo on a crypto-mining channel that showed how to
    set up a Proof of Stake master node on a rented virtual private server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One thing that most of these cloud services have in common is that when you
    first set up your account and the provider sets up a virtual machine for you,
    they'll have you log in to the root user account. (It even happens with Ubuntu,
    even though the root account is disabled on a local installation of Ubuntu.)
  prefs: []
  type: TYPE_NORMAL
- en: I know that there are some folk who just keep logging in to the root account
    of these cloud-based servers and think nothing of it, but that's really a horrible
    idea. There are botnets, such as the Hail Mary botnet, that continuously scan
    the Internet for servers that have their Secure Shell port exposed to the Internet.
    When the botnets find one, they'll do a brute-force password attack against the
    root user account of that server. And yes, the botnets sometimes are successful
    in breaking in, especially if the root account is set with a weak password.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the first thing that you want to do when you set up a cloud-based server
    is to create a normal user account for yourself and set it up with full `sudo`
    privileges. Then, log out of the root user account, log in to your new account,
    and do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: I mean, really, why take the chance of getting your root account compromised?
  prefs: []
  type: TYPE_NORMAL
- en: Setting up security banners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Something that you really, really don't want is to have a login banner that
    says something to the effect of *Welcome to our network*. I say that because,
    quite a few years ago, I attended a mentored SANS course on incident handling.
    Our instructor told us a story about how a company took a suspected network intruder
    to court, only to get the case thrown out. The reason? The alleged intruder said,
    "*Well, I saw the message that said Welcome to the network, so I thought that
    I really was welcome there."* Yeah, supposedly, that was enough to get the case
    thrown out.
  prefs: []
  type: TYPE_NORMAL
- en: A few years later, I related that story to the students in one of my Linux admin
    classes. One student said, "*That makes no sense.* *We all have welcome mats at
    our front doors, but that doesn't mean that burglars are welcome to come in.*"
    I have to confess that he had a good point, and I now have to wonder about the
    veracity of the story.
  prefs: []
  type: TYPE_NORMAL
- en: At any rate, just to be on the safe side, you do want to set up login messages
    that make clear that only authorized users are allowed to access the system.
  prefs: []
  type: TYPE_NORMAL
- en: Using the motd file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `/etc/motd` file will present a message banner to anyone who logs in to
    a system through Secure Shell. On your CentOS or AlmaLinux machine, an empty `motd`
    file is already there. On your Ubuntu machine, the `motd` file isn''t there, but
    it''s a simple matter to create one. Either way, open the file in your text editor
    and create your message. Save the file and test it by remotely logging in through
    Secure Shell. You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Ubuntu comes with a dynamic MOTD system that displays messages from Ubuntu''s
    parent company and messages about the operating system. When you create a new
    `motd` file in the `/etc` directory, whatever message you put in it will show
    up at the end of the dynamic output, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Using the issue file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `issue` file, also found in the `/etc` directory, shows a message on the
    local terminal, just above the login prompt. A default `issue` file would just
    contain macro code that would show information about the machine. Here''s an example
    from an Ubuntu machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'On a Red Hat-type machine, it would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'On an Ubuntu machine, the banner would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_03_01.png](img/file28.png)'
  prefs: []
  type: TYPE_IMG
- en: 19501_03_01.png
  prefs: []
  type: TYPE_NORMAL
- en: 'On a a Red Hat-type machine, it would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_03_02.png](img/file29.png)'
  prefs: []
  type: TYPE_IMG
- en: 19501_03_02.png
  prefs: []
  type: TYPE_NORMAL
- en: 'You could put a security message in the `issue` file, and it would show up
    after a reboot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_03_03.png](img/file30.png)'
  prefs: []
  type: TYPE_IMG
- en: 19501_03_03.png
  prefs: []
  type: TYPE_NORMAL
- en: In reality, is there really any point in placing a security message in the `issue`
    file? If your servers are properly locked away in a server room with controlled
    access, then probably not. For desktop machines that are out in the open, this
    would be more useful.
  prefs: []
  type: TYPE_NORMAL
- en: Using the issue.net file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just don't. It's for `telnet` logins, and anyone who has `telnet` enabled on
    their servers is seriously screwing up. However, for some strange reason, the
    `issue.net` file still hangs around in the `/etc` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting compromised passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yes, dear hearts, the bad guys do have extensive dictionaries of passwords
    that either are commonly used or have been compromised. One of the most effective
    ways of brute-forcing passwords is to use these dictionaries to perform a dictionary
    attack. This is when the password-cracking tool reads in passwords from a specified
    dictionary and tries each one until either the list has been exhausted, or until
    the attack is successful. So, how do you know if your password is on one of those
    lists? Easy. Just use one of the online services that will check your password
    for you. One popular site is *Have I Been Pwned?*, which you can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_03_04.png](img/file31.png)'
  prefs: []
  type: TYPE_IMG
- en: 19501_03_04.png
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get to *Have I Been Pwned?* here:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://haveibeenpwned.com](https://haveibeenpwned.com)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: All you really have to do is to type in your password, and the service will
    show if it's on any lists of compromised passwords. But think about it. Do you
    really want to send your production password to somebody's website? Yeah, I thought
    not. Instead, let's just send a hash value of the password. Better yet, let's
    just send enough of the hash to allow the site to find the password in its database,
    but not so much that they can figure out what your exact password is. We'll do
    that by using the *Have I Been Pwned?* **Application Programming Interface** (**API**).
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate the basic principle, let''s use `curl`, along with the API,
    to see a list of password hashes that have `21BD1` as part of their values. (You
    can do this on any of your virtual machines. I''ll just do it on the Fedora workstation
    that I''m currently using to type this.) Just run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'You''re going to get a lot of output like this, so I''ll just show the first
    few lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s pipe this into `wc -l`, a handy counting utility, to see how many matching
    results we''ve found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'According to this, we''ve found 526 matches. But that''s not very useful, so
    let''s fancy things up just a bit. We''ll do that by creating the `pwnedpasswords.sh`
    shell script, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, I can''t try to turn you into a shell scripting guru at the moment, but
    here''s the simplified explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**candidate_password=$1**: This requires you to enter the password that you
    want to check when you invoke the script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**full_hash=** , **prefix=**, **suffix=**: These lines calculate the SHA1 hash
    value of the password, and then extract just the portions of the hash that we
    want to send to the password-checking service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**if curl**: We wrap up with an `if..then..else` structure that sends the selected
    portions of the password hash to the checking service, and then tells us whether
    or not the password has been compromised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After saving the file, add the executable privilege for the user, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s see if `TurkeyLips`, my all-time favorite password, has been compromised:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Yeah, it's been compromised, all right. So, I reckon that I don't want to use
    that for a production password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try it again, except with a random two-digit number tacked on at
    the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Well, it says that this one is okay. Still though, you probably don't want to
    use such a simple permutation of a password that's known to have been compromised.
  prefs: []
  type: TYPE_NORMAL
- en: I'd like to take credit for the shell script that I've presented here, but I
    can't. That was a creation of my buddy, Leo Dorrendorf of the former VDOO Internet
    of Things security company, which has since been acquired by JFrog. (I've reproduced
    the script here with his kind permission.)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you''re interested in security solutions for your Internet of Things devices,
    you can check them out here:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://jfrog.com/security-and-compliance/?vr=1/](https://jfrog.com/security-and-compliance/?vr=1/)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Full disclosure: the VDOO/JFrog company has been one of my clients.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, having said all of this, I still need to remind you that a passphrase is
    still better than a password. Not only is a passphrase harder to crack, it's also
    much less likely to be on anyone's list of compromised credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab for detecting compromised passwords
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this lab, you''ll use the `pwnedpasswords` API in order to check your own
    passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `curl` to see how many passwords there are with the `21BD1` string in their
    password hashes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'In the home directory of any of your Linux virtual machines, create the `pwnpassword.sh`
    script with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the executable permission to the script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script, specifying `TurkeyLips` as a password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Repeat *Step 4* as many times as you like, using a different password each time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user management techniques that we've looked at so far work great on a small
    number of computers. But what if you're working in a large enterprise? We'll look
    at that next.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding centralized user management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In an enterprise setting, you'll often have hundreds or thousands of users and
    computers that you need to manage. So, logging in to each network server or each
    user's workstation to perform the procedures that we've just outlined would be
    quite unworkable. (But do bear in mind that you still need those skills.) What
    we need is a way to manage computers and users from one central location. Space
    doesn't permit me to give the complete details about the various methods for doing
    this. So for now, we'll just have to settle for a high-level overview.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Active Directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I'm not exactly a huge fan of either Windows or Microsoft. But when it comes
    to Active Directory, I'll have to give credit where it's due. It's a pretty slick
    product that vastly simplifies the management of very large enterprise networks.
    And yes, it is possible to add Unix/Linux computers and their users to an Active
    Directory domain.
  prefs: []
  type: TYPE_NORMAL
- en: I've been keeping a dark secret, and I hope that you won't hate me for it. Before
    I got into Linux, I obtained my MCSE certification for Windows Server 2003\. Mostly,
    my clients work with nothing but Linux computers, but I occasionally do need to
    use my MCSE skills. Several years ago, a former client needed me to set up a Linux-based
    Nagios server as part of a Windows Server 2008 domain, so that its users would
    be authenticated by Active Directory. It took me a while to get it figured out,
    but I finally did, and my client was happy.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unless you wear many hats, as I sometimes have to do, you—as a Linux administrator—probably
    won't need to learn how to use Active Directory. Most likely, you'll just tell
    the Windows Server administrators what you need, and let them take care of it.
  prefs: []
  type: TYPE_NORMAL
- en: I know, you've been chomping at the bit to see what we can do with a Linux server.
    So, here goes.
  prefs: []
  type: TYPE_NORMAL
- en: Samba on Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Samba is a Unix/Linux daemon that can serve three purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Its primary purpose is to share directories from a Unix/Linux server with Windows
    workstations. The directories show up in the Windows File Explorer as if they
    were being shared from other Windows machines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can also be set up as a network print server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can also be set up as a Windows domain controller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can install Samba version 3 on a Linux server, and set it up to act as an
    old-style Windows NT domain controller. It's a rather complex procedure, and it
    takes a while. Once it's done, you can join both Linux and Windows machines to
    the domain and use the normal Windows user management utilities to manage users
    and groups.
  prefs: []
  type: TYPE_NORMAL
- en: One of the Linux community's Holy Grails was to figure out how to emulate Active
    Directory on a Linux server. That became something of a reality just a few years
    ago, with the introduction of Samba version 4\. But setting it up is a very complex
    procedure, and isn't something that you'll likely enjoy doing. So, perhaps we
    should keep searching for something even better.
  prefs: []
  type: TYPE_NORMAL
- en: FreeIPA/Identity Management on RHEL-type distros
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Several years ago, the Red Hat company introduced FreeIPA as a set of packages
    for Fedora. Why Fedora? It''s because they wanted to give it a thorough test on
    Fedora before making it available for actual production networks. It''s now available
    for RHEL 7 through RHEL 9 and all of their offspring, including CentOS and AlmaLinux.
    This is what IPA stands for:'
  prefs: []
  type: TYPE_NORMAL
- en: Identity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s something of an answer to Microsoft''s Active Directory, but it still
    isn''t a complete one. It does some cool stuff, but it''s still very much a work
    in progress. The coolest part about it is how simple it is to install and set
    up. All it really takes is to install the packages from the normal repositories,
    open the proper firewall ports, and then run a setup script. Then, you''re all
    set to start adding users and computers to the new domain via FreeIPA''s web interface.
    Here, I''m adding Cleopatra, my gray-and-white tabby kitty:'
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_03_05.png](img/file32.png)'
  prefs: []
  type: TYPE_IMG
- en: 19501_03_05.png
  prefs: []
  type: TYPE_NORMAL
- en: Although you can add Windows machines to a FreeIPA domain, it's not recommended.
    But, starting with RHEL/CentOS 7.1, you can use FreeIPA to create cross-domain
    trusts with an Active Directory domain.
  prefs: []
  type: TYPE_NORMAL
- en: The official name of this program is FreeIPA. But, for some strange reason,
    the Red Hat folk refuse to mention that name in their documentation. They always
    just refer to it as either Identity Management or IdM.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That's pretty much it for the user management topic. Let's summarize, and then
    move on to the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to lock down users' home directories, how
    to enforce strong password policies, and how to enforce account and password expiration
    policies. Then, we talked about a way to prevent brute-force password attacks,
    how to manually lock out user accounts, how to set up security banners, and how
    to check for compromised passwords. We wrapped things up with a brief overview
    of central user management systems.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at how to work with various firewall utilities.
    I'll see you there.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In which file would you configure complex password criteria?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using the `useradd` utility on a RHEL 7-type machine, what should the `UMASK`
    setting be in the `/etc/login.defs` file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using the `adduser` utility on an Ubuntu 20.04 machine, how would you configure
    the `/etc/adduser.conf` file so that new users' home directories will prevent
    other users from accessing them?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What change did the National Institute for Standards and Technology recently
    make to their recommended password policy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which three of the following utilities can you use to set user account expiry
    data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`useradd`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adduser`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`usermod`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`chage`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Why might you want to lock out the user account of a former employee, rather
    than to delete it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's easier to lock an account than it is to delete it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It takes too long to delete an account.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's not possible to delete a user account.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting a user account, along with the users' files and mail spool, might get
    you into trouble with the law.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You've just created a user account for Samson, and you now want to force him
    to change his password the first time that he logs in. Which two of the following
    commands will do that?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo chage -d 0 samson`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo passwd -d 0 samson`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo chage -e samson`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo passwd -e samson`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following is an advantage that the `adduser` utility has over
    the traditional `useradd` utility?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adduser` can be used in shell scripts.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adduser` is available for all Linux distributions.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adduser` has an option that allows you to encrypt a user''s home directory
    as you create the user account.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adduser` is also available for Unix and BSD.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the newest Linux distributions, what is the name of the PAM module that you
    would use to enforce strong passwords?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: cracklib
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: passwords
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: secure
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: pwquality
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might not need complex, alphanumeric passwords after all: [https://www.pcmag.com/news/355496/you-might-not-need-complex-alphanumeric-passwords-after-all](https://www.pcmag.com/news/355496/you-might-not-need-complex-alphanumeric-passwords-after-all)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The new NIST Guidelines-We had it all wrong before: [https://www.riskcontrolstrategies.com/2018/01/08/new-nist-guidelines-wrong/](https://www.riskcontrolstrategies.com/2018/01/08/new-nist-guidelines-wrong/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux user management: [https://www.youtube.com/playlist?list=PL6IQ3nFZzWfpy2gISpCppFk3UQVGf_x7G](https://www.youtube.com/playlist?list=PL6IQ3nFZzWfpy2gISpCppFk3UQVGf_x7G)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The FreeIPA Project home page: [https://www.freeipa.org/page/Main_Page](https://www.freeipa.org/page/Main_Page)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RHEL 9 Documentation (Scroll down to the Identity Management section)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 8 Documentation (Scroll down to the Identity Management section) : [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 7 Documentation (Scroll down to the Identity Management section): [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pam_faillock: Lock user account after X failed attempts: [https://www.golinuxcloud.com/pam-faillock-lock-user-account-linux/](https://www.golinuxcloud.com/pam-faillock-lock-user-account-linux/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: /etc/security/pwquality.conf
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '077'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the DIR_MODE= value to DIR_MODE=750
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They abandoned their old philosophy about password complexity and password expirations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A, C, D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A, D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

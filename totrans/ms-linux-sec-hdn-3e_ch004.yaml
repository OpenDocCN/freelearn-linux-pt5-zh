- en: 3 Securing Normal User Accounts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 保护普通用户账户
- en: Join our book community on Discord
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 图书社区
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/file27.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file27.png)'
- en: Managing users is one of the more challenging aspects of IT administration.
    You need to make sure that users can always access their stuff and that they can
    perform the required tasks to do their jobs. You also need to ensure that users'
    stuff is always secure from unauthorized users. In this chapter, we'll look at
    how to lock down user accounts and user credentials to protect them from attackers
    and snoopers. We'll wrap up by taking a brief look at a few centralized user management
    systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 管理用户是 IT 管理中最具挑战性的方面之一。你需要确保用户始终可以访问他们的文件，并能够执行完成工作所需的任务。你还需要确保用户的文件始终对未经授权的用户保持安全。在本章中，我们将探讨如何锁定用户账户和用户凭证，以保护它们免受攻击者和窥探者的侵害。最后，我们将简要介绍一些集中式用户管理系统。
- en: Locking down users' home directories
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定用户的主目录
- en: Enforcing strong password criteria
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制执行强密码标准
- en: Setting and enforcing password and account expiration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置并强制执行密码和账户到期策略
- en: Preventing brute-force password attacks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止暴力破解密码攻击
- en: Locking user accounts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定用户账户
- en: Setting up security banners
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置安全横幅
- en: Detecting compromised passwords
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测被盗密码
- en: Understanding central user management systems
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解集中式用户管理系统
- en: Locking down users' home directories the Red Hat way
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按 Red Hat 方式锁定用户的主目录
- en: This is another area where different Linux distro families do business differently
    from each other. As we shall see, each distro family comes with different default
    security settings for users’ home directories. A security administrator who oversees
    a mixed environment of different Linux distros will need to take this into account.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个不同 Linux 发行版家族在操作上有差异的领域。正如我们所见，每个发行版家族在用户主目录的默认安全设置上有所不同。一个管理多种 Linux
    发行版混合环境的安全管理员需要考虑这一点。
- en: 'Traditionally, Red Hat Enterprise Linux and all of its offspring, such as CentOS
    and AlmaLinux, have had better out-of-the-box security than any other family of
    Linux distros. This makes it quicker and easier to harden Red Hat-type systems
    because much of the work has already been done. One thing that''s already been
    done for us is locking down users'' home directories:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，Red Hat 企业版 Linux 及其所有后代，如 CentOS 和 AlmaLinux，提供比其他任何 Linux 发行版家族更好的开箱即用安全性。这使得加固
    Red Hat 类型系统变得更快捷、更容易，因为很多工作已经完成。已经为我们做好的事情之一就是锁定用户的主目录：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By default, the `useradd` utility on Red Hat-type systems creates user home
    directories with a permissions setting of `700`. This means that only the user
    who owns the home directory can access it. All other normal users are locked out.
    We can see why by looking at the `/etc/login.defs` file. On your CentOS 7 VM,
    scroll down toward the bottom of the file, and you''ll see this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Red Hat 类型系统上的 `useradd` 工具会创建权限设置为 `700` 的用户主目录。这意味着只有拥有主目录的用户可以访问它，所有其他普通用户都被锁定在外。我们可以通过查看
    `/etc/login.defs` 文件来理解原因。在你的 CentOS 7 虚拟机上，向文件底部滚动，你会看到这样一行：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the `login.defs` file of a RHEL 8 or RHEL 9-type distro, such as AlmaLinux,
    you’ll see that the `UMASK` is set for wide-open permissions, which seems a bit
    strange. Here’s what that looks like:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 RHEL 8 或 RHEL 9 类型的发行版（如 AlmaLinux）的`login.defs`文件中，你会看到`UMASK`设置为宽松权限，这看起来有点奇怪。它长这样：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But, a few lines below that, you’ll see a brand-new directive that we never
    had before, which looks like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在其下方几行，你会看到一个我们以前从未见过的新指令，长这样：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So, even though the `UMASK` is wide-open, new user home directories still get
    properly locked-down.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，尽管 `UMASK` 权限设置较为宽松，新创建的用户主目录仍然会得到正确的锁定。
- en: The `login.defs` file is one of two files where default settings for `useradd`
    are configured. Either the `UMASK` line or the `HOME_MODE` line is what determines
    the permissions values on home directories as they get created. Red Hat-type distros
    have it configured with the `077` value, which removes all permissions from the
    group and others. Either the `HOME_MODE` line or the `UMASK` line is in the `login.defs`
    file for all Linux distros, but until recently, Red Hat-type distros have been
    the only ones that have had them set to such a restrictive value by default. Most
    non-Red Hat distros usually have a `UMASK` value of `022`, which creates home
    directories with a permissions value of `755`. This allows everybody to enter
    everybody else's home directories and access each others' files.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`login.defs` 文件是配置 `useradd` 默认设置的两个文件之一。`UMASK` 行或 `HOME_MODE` 行决定了主目录创建时的权限值。Red
    Hat 类型的发行版默认配置了 `077` 值，这会删除组和其他用户的所有权限。所有 Linux 发行版的 `login.defs` 文件中都有 `HOME_MODE`
    行或 `UMASK` 行，但直到最近，只有 Red Hat 类型的发行版才默认将它们设置为如此严格的值。大多数非 Red Hat 发行版通常将 `UMASK`
    值设置为 `022`，这会创建权限值为 `755` 的主目录。这样，所有人都可以进入其他用户的主目录并访问彼此的文件。'
- en: Locking down users' home directories the Debian/Ubuntu way
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以 Debian/Ubuntu 的方式锁定用户的主目录
- en: 'Debian and its offspring, such as Ubuntu, have two user creation utilities:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Debian 及其衍生版本，如 Ubuntu，提供了两个用户创建工具：
- en: '`useradd`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useradd`'
- en: '`adduser`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adduser`'
- en: Let's look at both of them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它们两个的情况。
- en: useradd on Debian/Ubuntu
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Debian/Ubuntu 上的 useradd
- en: 'The `useradd` utility is there, but Debian and Ubuntu don''t come with handy
    preconfigured defaults as the Red Hat-type distros do. If you were to just do
    `sudo useradd frank` on a Debian/Ubuntu machine, Frank would have no home directory
    and would be assigned the wrong default shell. So, to create a user account with
    `useradd` on a Debian or Ubuntu system, the command would look something like
    this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`useradd` 工具是可用的，但 Debian 和 Ubuntu 并不像 Red Hat 类型的发行版那样提供方便的预配置默认设置。如果你仅在 Debian/Ubuntu
    系统上执行 `sudo useradd frank`，Frank 将没有主目录，并且会被分配错误的默认 shell。所以，要在 Debian 或 Ubuntu
    系统上使用 `useradd` 创建用户帐户，命令应该像这样：'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here’s the breakdown of what all this means:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这些命令的详细说明：
- en: '**-m** creates the home directory.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-m** 创建主目录。'
- en: '**-d** specifies the home directory.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-d** 指定主目录。'
- en: '**-s** specifies Frank''s default shell. (Without the `-s`, Debian/Ubuntu would
    assign to Frank the `/bin/sh` shell.)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-s** 指定 Frank 的默认 shell。（如果没有 `-s`，Debian/Ubuntu 将为 Frank 分配 `/bin/sh` shell。）'
- en: 'When you look at the home directories on either a Debian or an Ubuntu 20.04
    machine, you''ll see that they''re wide open, with execute and read privileges
    for everybody:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看 Debian 或 Ubuntu 20.04 系统上的主目录时，你会发现它们完全开放，所有人都可以执行和读取：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, Frank and I can get into each other''s stuff. (And no, I don''t
    want Frank getting into my stuff.) Each user could change the permissions on his
    or her own directory, but how many of your users would know how to do that? So,
    let''s fix that ourselves:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，Frank 和我可以访问对方的文件。（不，我不希望 Frank 进入我的文件。）每个用户可以更改自己目录的权限，但你有多少用户知道怎么做呢？所以，让我们自己来修复这个问题：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s see what we have now:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看现在的情况：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That looks much better.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这样看起来好多了。
- en: 'To change the default permissions setting for home directories, open `/etc/login.defs`
    for editing. Look for this line:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改主目录的默认权限设置，请打开 `/etc/login.defs` 文件进行编辑。找到以下行：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Change it to this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为如下：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, new users' home directories will get locked down on creation, just as they
    do with Red Hat and its offspring.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，新的用户主目录在创建时会被锁定，就像 Red Hat 及其衍生版一样。
- en: 'On Ubuntu 22.04, things are different. Ubuntu developers have finally realized
    that users’ home directories should be locked down by default. So, the `HOME_MODE`
    setting in an Ubuntu 22.04 `login.defs` file now looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 22.04 上，情况有所不同。Ubuntu 开发者终于意识到，用户的主目录应该默认被锁定。因此，Ubuntu 22.04 中的 `login.defs`
    文件中的 `HOME_MODE` 设置现在是这样的：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This includes access permissions for a user’s own personal group, but that’s
    okay. It still effectively means that only the respective owners of the various
    home directories can get into them.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括用户自己个人组的访问权限，但这没关系。它仍然有效地意味着，只有各自的主目录所有者才能访问。
- en: adduser on Debian/Ubuntu
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Debian/Ubuntu 上的 adduser
- en: 'The `adduser` utility is an interactive way to create user accounts and passwords
    with a single command, which is unique to the Debian family of Linux distros.
    Most of the default settings that are missing from the Debian implementation of
    `useradd` are already set for `adduser`. On Debian and Ubuntu 20.04, it creates
    user home directories with the wide-open `755` permissions value. Fortunately,
    that''s easy to change. (We''ll see how in just a bit.) On Ubuntu 22.04, it creates
    properly locked-down home directories with the restrictive `750` permissions value.
    You’ll see that setting in the `/etc/adduser.conf` file, in the vicinity of line
    56:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`adduser`工具是一种交互式创建用户账户和密码的方式，这是Debian系列Linux发行版特有的。Debian实现的`useradd`缺失的大多数默认设置都已在`adduser`中设置好。在Debian和Ubuntu
    20.04中，它创建用户主目录时会赋予`755`的宽松权限值。幸运的是，这是可以轻松更改的。（我们稍后将展示如何更改。）在Ubuntu 22.04中，它创建了正确锁定的主目录，权限值为限制性`750`。你会在`/etc/adduser.conf`文件中看到这一设置，大约在第56行附近：'
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As I mentioned before, that will be set to a `755` value in Ubuntu 20.04\. Just
    change that value to `750` to lock down the new home directories.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，在Ubuntu 20.04中，这将设置为`755`权限值。只需将其更改为`750`即可锁定新创建的主目录。
- en: 'Although `adduser` is handy for just casual creation of user accounts, it doesn''t
    offer the flexibility of `useradd` and it isn''t suitable for use in shell scripting.
    One thing that `adduser` can do that `useradd` can’t is to automatically encrypt
    a user''s home directory as you create the account. To make it work, you''ll first
    have to install the `ecryptfs-utils` package. So, to create an account with an
    encrypted home directory for Cleopatra, you do the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`adduser`非常适合用于简单地创建用户账户，但它没有`useradd`那样的灵活性，也不适合在Shell脚本中使用。`adduser`能做的一件事是，`useradd`做不到的，那就是在创建账户时自动加密用户的主目录。要使其正常工作，首先需要安装`ecryptfs-utils`包。因此，要为Cleopatra创建一个带有加密主目录的账户，您需要执行以下操作：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We'll look at the whole encryption thing in more detail when we get to the encryption
    chapter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进入加密章节时，将更详细地讨论整个加密过程。
- en: Hands-on lab for creating an encrypted home directory with adduser
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`adduser`创建加密的主目录实验室
- en: For this lab, we'll be working with the `adduser` utility on an Ubuntu 22.04
    VM.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本实验中，我们将在Ubuntu 22.04虚拟机上使用`adduser`工具。
- en: 'Install the `ecryptfs-utils` package:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`ecryptfs-utils`包：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a user account with an encrypted home directory for Cleopatra and then
    view the results:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Cleopatra创建一个带有加密主目录的用户账户，然后查看结果：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Log in as Cleopatra and run the `ecryptfs-unwrap-passphrase` command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以Cleopatra身份登录并运行`ecryptfs-unwrap-passphrase`命令：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that some of the information that `adduser` asks for is optional, and you
    can just hit the *Enter* key for those items.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`adduser`要求的某些信息是可选的，你可以直接按*Enter*键跳过这些项目。
- en: Enforcing strong password criteria
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制实施强密码标准
- en: 'You wouldn''t think that a benign-sounding topic such as strong password criteria
    would be so controversial, but it is. The conventional wisdom that you''ve undoubtedly
    heard for your entire computer career says:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不会想到，看似无害的主题，如强密码标准，竟然会如此有争议，但事实的确如此。你在整个计算机生涯中无疑听过的传统观点是：
- en: Make passwords of a certain minimum length.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码需要达到一定的最小长度。
- en: Make passwords that consist of a combination of uppercase letters, lowercase
    letters, numbers, and special characters.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建由大写字母、小写字母、数字和特殊字符组合构成的密码。
- en: Ensure that passwords don't contain any words that are found in the dictionary
    or that are based on the users' own personal data.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保密码不包含词典中的任何单词，或不基于用户的个人数据。
- en: Force users to change their passwords on a regular basis.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制用户定期更改密码。
- en: But, using your favorite search engine, you'll see that different experts disagree
    on the details of these criteria. For example, you'll see disagreements about
    whether passwords should be changed every 30, 60, or 90 days, disagreements about
    whether all four types of characters need to be in a password, and even disagreements
    on what the minimum length of a password should be.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 但通过使用你最喜欢的搜索引擎，你会发现不同的专家在这些标准的细节上存在分歧。例如，你会看到关于密码是否应该每30、60或90天更改的分歧，关于密码中是否必须包含所有四种类型的字符的分歧，甚至对于密码的最小长度应该是多少也存在不同的看法。
- en: The most interesting controversy of all comes from—of all places—the guy who
    invented the preceding criteria to begin with. He now says that it's all bunk
    and regrets having come up with it. He now says that we should be using passphrases
    that are long, yet easy to remember. He also says that they should be changed
    only if they've been breached.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最有趣的争议来自——居然是——最初制定前述标准的那位人物。现在他说这一切都是废话，他后悔自己曾经提出这些标准。他现在表示，我们应该使用既长又容易记住的密码短语，而且只有在密码被泄露的情况下，才需要更改密码。
- en: Bill Burr, the former National Institutes of Standards and Technology (NIST)
    engineer who created the strong password criteria that I outlined earlier, shares
    his thoughts about why he now disavows his own work. Refer to [https://www.pcmag.com/news/355496/you-might-not-need-complex-alphanumeric-passwords-after-all.](https://www.pcmag.com/news/355496/you-might-not-need-complex-alphanumeric-passwords-after-all.)
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Bill Burr，这位曾在国家标准与技术研究院（NIST）工作的工程师，制定了我之前提到的强密码标准，现在分享了他为什么否定自己工作的原因。你可以参考[https://www.pcmag.com/news/355496/you-might-not-need-complex-alphanumeric-passwords-after-all.](https://www.pcmag.com/news/355496/you-might-not-need-complex-alphanumeric-passwords-after-all.)
- en: ''
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And, since the original edition of this book was published, NIST has come to
    agree with Bill Burr. They have now changed their password implementation criteria
    to match Mr. Burr's recommendations. You can read about that at
  id: totrans-78
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 而且，自从这本书的初版出版以来，NIST 已经同意了 Bill Burr 的观点。他们现在已经更改了密码实施标准，以符合 Burr 先生的建议。你可以在这里阅读相关内容：
- en: ''
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://www.riskcontrolstrategies.com/2018/01/08/new-nist-guidelines-wrong/](https://www.riskcontrolstrategies.com/2018/01/08/new-nist-guidelines-wrong/).'
  id: totrans-80
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://www.riskcontrolstrategies.com/2018/01/08/new-nist-guidelines-wrong/](https://www.riskcontrolstrategies.com/2018/01/08/new-nist-guidelines-wrong/)。'
- en: However, having said all that, there is the reality that many organizations
    are still wedded to the idea of using complex passwords that regularly expire,
    and you'll have to abide by their rules if you can't convince them otherwise.
    And besides, if you are using traditional passwords, you do want them to be strong
    enough to resist any sort of password attack. So now, we'll take a look at the
    mechanics of enforcing strong password criteria on a Linux system.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，话虽如此，现实情况是，许多组织仍然坚持使用复杂的密码，并且要求密码定期过期，如果你无法说服他们改变这一做法，你将不得不遵守他们的规则。而且，既然你使用的是传统密码，你当然希望它们足够强大，能够抵御任何形式的密码攻击。那么现在，让我们来看看如何在
    Linux 系统上强制执行强密码标准。
- en: 'Tip:'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提示：
- en: ''
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I have to confess that I had never before thought to try creating a passphrase
    to use in place of a password on a Linux system. So, I just now tried it on my
    CentOS virtual machine to see if it would work.
  id: totrans-84
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我必须承认，我之前从未想到过在 Linux 系统中使用密码短语代替密码。因此，我刚刚在我的 CentOS 虚拟机上尝试了一下，看看它是否有效。
- en: ''
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I created an account for Maggie, my black-and-white tuxedo kitty. For her password,
    I entered the passphrase `I like other kitty cats`. You may think, "Oh, that's
    terrible. This doesn't meet any complexity criteria*,* and it uses dictionary
    words. How is that secure?" But the fact that it's a phrase with distinct words
    separated by blank spaces does make it secure and very difficult to brute-force.
  id: totrans-86
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我为 Maggie， 我的黑白色燕尾服小猫，创建了一个账户。她的密码短语是 `I like other kitty cats`。你可能会想，“哦，这太糟糕了。这个不符合任何复杂性标准，而且使用了字典中的词汇。这怎么可能安全呢？”但是，正因为它是一个包含不同单词并由空格分开的短语，它的安全性确实很高，并且非常难以通过暴力破解来攻破。
- en: ''
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, in real life, I would never create a passphrase that expresses my love
    for cats because it's not hard to find out that I really do love cats. Rather,
    I would choose a passphrase about some more obscure part of my life that nobody
    but me knows about. In any case, there are two advantages of passphrases over
    passwords. They're more difficult to crack than traditional passwords, yet they're
    easier for users to remember. For extra security though, don't create passphrases
    about a fact of your life that everybody knows about.
  id: totrans-88
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在，在现实生活中，我绝不会创建一个表达我对猫咪的喜爱的密码短语，因为很容易发现我确实非常喜欢猫咪。相反，我会选择一个关于我生活中更为隐秘的部分的密码短语，只有我自己知道。无论如何，密码短语相比传统密码有两个优势。它们比传统密码更难破解，同时又更容易让用户记住。不过，为了额外的安全性，最好不要选择任何所有人都知道的生活事实来作为密码短语。
- en: Installing and configuring pwquality
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装和配置 pwquality
- en: 'We''ll be using the `pwquality` module for the **Pluggable Authentication Module**
    (**PAM**). This is a newer technology that has replaced the old `cracklib` module.
    On any Red Hat 7 or newer type of system, and on SUSE and OpenSUSE, `pwquality`
    is installed by default, even if you do a minimal installation. If you `cd` into
    the `/etc/pam.d/` directory, you can do a `grep` operation to see that the PAM
    configuration files are already set up. `retry=3` means that a user will only
    have three tries to get the password right when logging in to the system:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `pwquality` 模块来实现 **可插拔认证模块**（**PAM**）。这是一个较新的技术，已替代了旧的 `cracklib` 模块。在任何
    Red Hat 7 或更高版本的系统上，甚至在做最小化安装时，`pwquality` 都会默认安装。在 `/etc/pam.d/` 目录下，你可以通过 `grep`
    命令来查看 PAM 配置文件是否已设置好。`retry=3` 表示用户在登录系统时只能尝试三次输入正确密码：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'On Debian and Ubuntu, you’ll need to install `pwquality` yourself, like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Debian 和 Ubuntu 上，你需要自行安装 `pwquality`，可以像这样操作：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The rest of the procedure is the same for all of our operating systems and consists
    of just editing the `/etc/security/pwquality.conf` file. When you open this file
    in your text editor, you'll see that everything is commented out, which means
    that no password complexity criteria are in effect. You'll also see that it's
    very well documented because every setting has its own explanatory comment.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 其余过程对所有操作系统都是相同的，只需编辑 `/etc/security/pwquality.conf` 文件。当你在文本编辑器中打开该文件时，你会看到所有内容都被注释掉了，这意味着没有密码复杂性要求生效。你还会看到它有很好的文档说明，因为每个设置都有自己的注释。
- en: 'You can set password complexity criteria however you want just by uncommenting
    the appropriate lines and setting the appropriate values. Let''s take a look at
    just one setting:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过取消注释相应的行并设置适当的值来按需设置密码复杂性标准。让我们看一个设置：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The minimum length setting works on a credit system. This means that for every
    different type of character class in the password, the minimum required password
    length will be reduced by one character. For example, let''s set `minlen` to a
    value of `19` and try to assign Katelyn the password `turkeylips`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最小长度设置是基于信用系统的。这意味着对于密码中的每种不同类型的字符类，最小要求的密码长度将减少一个字符。例如，假设我们将 `minlen` 设置为 `19`，并尝试为
    Katelyn 设置密码 `turkeylips`：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Because the lowercase characters in `turkeylips` count as credit for one type
    of character class, we''re only required to have 18 characters instead of 19\.
    If we try this again with `TurkeyLips`, we''ll get:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `turkeylips` 中的小写字符算作一种字符类的信用，所以我们只需要 18 个字符，而不是 19 个。如果我们使用 `TurkeyLips`
    再试一次，结果会是：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This time, the uppercase `T` and uppercase `L` count as a second character class,
    so we only need to have 17 characters in the password.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，大写字母 `T` 和 `L` 计为第二种字符类，因此密码只需要包含 17 个字符。
- en: 'Just below the `minlen` line, you''ll see the credit lines. Let''s say that
    you don''t want lowercase letters to count toward your credits. You would find
    this line:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `minlen` 行下面，你会看到信用行。假设你不希望小写字母计入信用，你会看到这一行：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Uncomment it, and change the `1` to a `0`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 取消注释，并将 `1` 改为 `0`：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, try assigning Katelyn `turkeylips` as a password:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，尝试为 Katelyn 分配 `turkeylips` 作为密码：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This time, the `pwquality` really does want 19 characters. If we set a credit
    value to something higher than `1`, we would get credit for multiple characters
    of the same class type up to that value.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，`pwquality` 确实要求 19 个字符。如果我们将信用值设置为大于 `1`，我们将为相同字符类的多个字符获得信用，直到达到该值。
- en: 'We can also set the credit values to negative numbers in order to require a
    certain number of characters types in a password. For example, we could have this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将信用值设置为负数，以便要求密码中包含一定数量的字符类型。例如，我们可以这样设置：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This would require at least three digits in a password. However, it''s a really
    bad idea to use this feature, because someone who''s doing a password attack would
    soon find the patterns that you require, which would help the attacker to more
    precisely direct the attack. If you need to require that a password has multiple
    character types, it would be better to use the `minclass` parameter:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要密码至少包含三位数字。然而，使用此功能是一个非常糟糕的主意，因为进行密码攻击的人很快就能发现你所要求的模式，这将帮助攻击者更精确地进行攻击。如果你需要要求密码包含多种字符类型，最好使用`minclass`参数：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It's already set to a value of `3`, which would require characters from three
    different classes. To use this value, all you have to do is to remove the comment
    symbol.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 它已经设置为 `3` 的值，这要求字符来自三个不同的类别。要使用这个值，你只需去掉注释符号即可。
- en: The rest of the parameters in `pwquality.conf` work pretty much the same way,
    and each one has a well-written comment to explain what it does.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`pwquality.conf` 中的其他参数几乎以相同的方式工作，每个参数都有详细的注释来解释它的作用。'
- en: 'Tip:'
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提示：
- en: ''
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you use your `sudo` privilege to set someone else's password, the system
    will complain if you create a password that doesn't meet complexity criteria,
    but it will let you do it. If a normal user were to try to change his or her own
    password without `sudo` privileges, the system would not allow a password that
    doesn't meet complexity criteria.
  id: totrans-117
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你使用 `sudo` 权限为其他人设置密码，如果创建的密码不符合复杂度要求，系统会提示警告，但你仍然可以设置。如果普通用户尝试在没有 `sudo`
    权限的情况下更改自己的密码，系统将不允许设置不符合复杂度要求的密码。
- en: Hands-on lab for setting password complexity criteria
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置密码复杂度标准的实践实验
- en: For this lab, you can use either a CentOS, AlmaLinux, or Ubuntu virtual machine,
    as desired. The only difference is that you won't perform Step 1 for either CentOS
    or AlmaLinux.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此实验，你可以根据需要使用 CentOS、AlmaLinux 或 Ubuntu 虚拟机。唯一的区别是，对于 CentOS 或 AlmaLinux，你不会执行步骤
    1。
- en: 'For Ubuntu only, install the `libpam-pwquality` package:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅适用于 Ubuntu，安装 `libpam-pwquality` 包：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open the `/etc/security/pwquality.conf` file in your preferred text editor.
    Remove the comment symbol from in front of the `minlen` line and change the value
    to `19`. It should now look like this:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `/etc/security/pwquality.conf` 文件，使用你喜欢的文本编辑器。去掉 `minlen` 行前面的注释符号，并将其值更改为
    `19`。它现在应该是这样的：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Save the file and exit the editor.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并退出编辑器。
- en: Create a user account for Goldie and attempt to assign her the passwords `turkeylips`,
    `TurkeyLips`, and `Turkey93Lips`. Note the change in each warning message.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 Goldie 创建一个用户账户，并尝试为她设置密码 `turkeylips`、`TurkeyLips` 和 `Turkey93Lips`。注意每个警告消息中的变化。
- en: 'In the `pwquality.conf` file, comment out the `minlen` line. Uncomment the
    `minclass` line and the `maxclassrepeat` line. Change the `maxclassrepeat` value
    to `5`. The lines should now look like this:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pwquality.conf` 文件中，注释掉 `minlen` 行。取消注释 `minclass` 行和 `maxclassrepeat` 行。将
    `maxclassrepeat` 的值更改为 `5`。这些行现在应该是这样的：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Save the file and exit the text editor.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并退出文本编辑器。
- en: Try assigning various passwords that don't meet the complexity criteria that
    you've set to Goldie's account and view the results.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试为 Goldie 的账户分配一些不符合你设置的复杂度标准的密码，并查看结果。
- en: In the `/etc/login.defs` file on your CentOS 7 machine, you'll see the line
    `PASS_MIN_LEN 5`.
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 CentOS 7 机器上的 `/etc/login.defs` 文件中，你会看到这一行 `PASS_MIN_LEN 5`。
- en: ''
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Supposedly, this is to set the minimum password length, but in reality, `pwquality`
    overrides it. So, you could set this value to anything at all, and it would have
    no effect. (Note that the `PASS_MIN_LEN` parameter is no longer supported on RHEL
    8/9-type distros.)
  id: totrans-132
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这应该是用来设置密码的最小长度，但实际上，`pwquality` 会覆盖它。因此，你可以将此值设置为任何内容，它将不会产生任何效果。（注意，`PASS_MIN_LEN`
    参数在 RHEL 8/9 类型的发行版中不再支持。）
- en: Setting and enforcing password and account expiration
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置并强制执行密码和账户过期
- en: Something you never want is to have unused user accounts remain active. There
    have been incidents where an administrator set up user accounts for temporary
    usage, such as for a conference, and then just forgot about them after the accounts
    were no longer needed.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你绝对不希望的是未使用的用户账户保持活跃。曾经有过这样的事件，管理员为临时使用设置了用户账户，比如为一个会议设置账户，结果在账户不再需要后忘记了它们。
- en: Another example would be if your company were to hire contract workers whose
    contract expires on a specific date. Allowing those accounts to remain active
    and accessible after the temporary employees leave the company would be a huge
    security problem. In cases like these, you want a way to ensure that temporary
    user accounts aren't forgotten about when they're no longer needed. If your employer
    subscribes to the conventional wisdom that users should change their passwords
    on a regular basis, then you'll also want to ensure that it gets done.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是，如果你的公司雇佣了合同工，且合同在某个特定日期到期。允许这些账户在临时员工离开公司后仍然保持活跃和可访问，将会是一个巨大的安全问题。在这种情况下，你需要一种方法来确保在不再需要这些临时账户时，不会忘记它们。如果你的公司遵循常规的安全做法，要求用户定期更改密码，那么你还需要确保它能够得到执行。
- en: Password expiration data and account expiration data are two different things.
    They can be set either separately or together. When someone's password expires,
    he or she can change it, and everything will be all good. If somebody's account
    expires, only someone with the proper admin privileges can unlock it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 密码过期数据和账户过期数据是两种不同的东西。它们可以分别或一起设置。当某人的密码过期时，他或她可以更改密码，一切都能恢复正常。如果某人的账户过期，只有具有适当管理员权限的人才能解锁账户。
- en: 'To get started, take a look at the expiry data for your own account. Note that
    you won''t need `sudo` privileges to look at your own data, but you will still
    need to specify your own username:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，先查看一下自己账户的过期数据。请注意，你无需 `sudo` 权限就能查看自己的数据，但仍然需要指定自己的用户名：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can see here that no expiration data have been set. Everything here is
    set according to the out-of-the-box system default values. Other than the obvious
    items, here''s a breakdown of what you see:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这里没有设置任何过期数据。一切都根据系统的默认设置进行配置。除了显而易见的内容外，这里是你看到的详细内容：
- en: '**Password inactive**: If this were set to a positive number, I would have
    that many days to change an expired password before the system would lock out
    my account.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码非活动期**：如果设置为正数，我将在密码过期后有这么多天的时间来更改密码，否则系统将锁定我的账户。'
- en: '**Minimum number of days between password change**: Because this is set to
    `0`, I can change my password as often as I like. If it were set to a positive
    number, I would have to wait that number of days after changing my password before
    I could change it again.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码更改的最小天数**：因为它被设置为 `0`，所以我可以随时更改我的密码。如果设置为正数，那么在更改密码后，我必须等待设定的天数才能再次更改密码。'
- en: '**Maximum number of days between password change**: This is set to the default
    value of `99999`, meaning that my password will never expire.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码更改的最大天数**：默认为 `99999`，意味着我的密码永远不会过期。'
- en: '**Number of days of warning before password expires**: The default value is
    `7`, but that''s rather meaningless when the password is set to never expire.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码过期前的警告天数**：默认值为 `7`，但当密码设置为永不过期时，这个值就没有太大意义。'
- en: With the `chage` utility, you can either set password and account expiration
    data for other users or use the `-l` option to view expiration data. Any unprivileged
    user can use `chage -l` without `sudo` to view his or her own data. To either
    set data or view someone else's data, you need `sudo`. We'll take a closer look
    at `chage` a bit later.
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用 `chage` 工具，你可以为其他用户设置密码和账户的过期数据，或者使用 `-l` 选项查看过期数据。任何非特权用户都可以使用 `chage -l`
    在不使用 `sudo` 的情况下查看自己的数据。要设置数据或查看其他人的数据，你需要 `sudo` 权限。稍后我们将更详细地了解 `chage`。
- en: 'Before we look at how to change expiration data, let''s first look at where
    the default settings are stored. We''ll first look at the `/etc/login.defs` file.
    Here are the three relevant lines:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论如何更改过期数据之前，首先来看一下默认设置存储的位置。我们将首先查看 `/etc/login.defs` 文件。以下是三行相关的内容：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You can edit these values to fit your organization's needs. For example, changing
    `PASS_MAX_DAYS` to a value of `30` would cause all new user passwords from that
    point on to have a 30-day expiration data. (By the way, setting the default password
    expiry data in `login.defs` works for all of the Linux distros that we’re using.)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据组织的需要编辑这些值。例如，将 `PASS_MAX_DAYS` 更改为 `30`，那么从那时起所有新用户的密码将具有 30 天的过期日期。（顺便说一下，在
    `login.defs` 中设置默认的密码过期数据适用于我们使用的所有 Linux 发行版。）
- en: Configuring default expiry data for useradd for Red Hat-type systems only
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅适用于 Red Hat 类型系统的 useradd 默认过期数据配置
- en: 'The `/etc/default/useradd` file has the rest of the default settings. In this
    case, we''ll look at the one from the AlmaLinux 9 machine:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/default/useradd` 文件包含了其余的默认设置。在这种情况下，我们将查看来自 AlmaLinux 9 机器的文件：'
- en: Ubuntu also has the `useradd` configuration file, but it doesn't work. No matter
    how you configure it, the Ubuntu version of `useradd` just won't read it. So,
    the write-up about this file only applies to Red Hat-type systems.
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Ubuntu 也有 `useradd` 配置文件，但它不起作用。无论如何配置，Ubuntu 版本的 `useradd` 就无法读取它。所以，关于该文件的说明仅适用于
    Red Hat 类型的系统。
- en: '[PRE31]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `EXPIRE=` line sets the default expiration date for new user accounts.
    By default, there is no default expiration date. `INACTIVE=-1` means that user
    accounts won''t be automatically locked out after the users'' passwords expire.
    If we set this to a positive number, then any new users will have that many days
    to change an expired password before the account gets locked. To change the defaults
    in the `useradd` file, you can either hand-edit the file or use `useradd -D` with
    the appropriate option switch for the item that you want to change. For example,
    to set a default expiration date of December 31, 2025, the command would be as
    follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXPIRE=` 行设置新用户账户的默认过期日期。默认情况下，没有默认过期日期。`INACTIVE=-1` 表示用户密码过期后，用户账户不会自动被锁定。如果我们将其设置为正数，则任何新用户必须在账户被锁定之前的规定天数内更改过期的密码。要更改
    `useradd` 文件中的默认值，可以手动编辑文件，或者使用 `useradd -D` 并搭配相应的选项切换来更改你想修改的项目。例如，要设置默认过期日期为
    2025 年 12 月 31 日，可以使用如下命令：'
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To see the new configuration, you can either open the `useradd` file or just
    do `sudo useradd -D`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看新配置，可以打开 `useradd` 文件，或者直接运行 `sudo useradd -D`：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You''ve now set it so that any new user accounts that get created will have
    the same expiration date. You can do the same thing with either the `INACTIVE`
    setting or the `SHELL` setting:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已设置所有新创建的用户账户将具有相同的过期日期。你可以使用相同的方法设置 `INACTIVE` 或 `SHELL` 配置：
- en: '[PRE34]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, any new user accounts that get created will have the Zsh shell set as the
    default shell and will have to have expired passwords changed within five days
    to prevent having the account automatically locked out.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，任何新创建的用户账户将默认使用 Zsh 作为默认 shell，并且必须在五天内更改过期密码，否则账户将被自动锁定。
- en: '`useradd` doesn''t do any safety checks to ensure that the default shell that
    you''ve assigned is installed on the system. In our case, Zsh isn''t installed,
    but `useradd` will still allow you to create accounts with Zsh as the default
    shell.'
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`useradd` 不进行任何安全检查，确保你指定的默认 shell 已安装在系统上。在我们的例子中，Zsh 没有安装，但 `useradd` 仍然允许你将
    Zsh 设置为默认 shell 创建账户。'
- en: So, just how useful is this `useradd` configuration feature in real life? Probably
    not that much, unless you need to create a whole bunch of user accounts at once
    with the same settings. Even so, a savvy admin would just automate the process
    with a shell script, rather than messing around with this configuration file.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，`useradd` 配置功能在实际生活中有多有用呢？可能不太有用，除非你需要一次性创建大量相同设置的用户账户。即便如此，聪明的管理员会选择通过 shell
    脚本自动化这一过程，而不是手动调整配置文件。
- en: Setting expiry data on a per-account basis with useradd and usermod
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `useradd` 和 `usermod` 设置每个账户的过期数据。
- en: You might find it useful to set the default password expiry data in `login.defs`,
    but you probably won't find it too useful to configure the `useradd` configuration
    file. Really, what are the chances that you'll want to create all user accounts
    with the same account expiration date? Setting password expiry data in `login.defs`
    is more useful because you'll just be saying that you want new passwords to expire
    within a certain number of days, rather than to have them all expire on a specific
    date.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现设置 `login.defs` 中的默认密码过期日期非常有用，但配置 `useradd` 配置文件可能用处不大。实际上，创建所有用户账户都使用相同的过期日期的可能性并不大吧？在
    `login.defs` 中设置密码过期日期更有用，因为你只是简单地指定新密码会在一定天数内过期，而不是所有密码都在一个特定日期过期。
- en: 'Most likely, you''ll want to set account expiry data on a per-account basis,
    depending on whether you know that the accounts will no longer be needed as of
    a specific date. There are three ways that you can do this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，你会想在每个账户的基础上设置账户过期数据，具体取决于你是否知道某个账户将在特定日期后不再需要。有三种方法可以做到这一点：
- en: Use `useradd` with the appropriate option switches to set expiry data as you
    create the accounts. (If you need to create a whole bunch of accounts at once
    with the same expiry data, you can automate the process with a shell script.)
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `useradd` 并搭配适当的选项切换在创建账户时设置过期数据。（如果你需要一次性创建多个账户，并且希望它们有相同的过期数据，可以使用 shell
    脚本自动化该过程。）
- en: Use `usermod` to modify expiry data on existing accounts. (The beautiful thing
    about `usermod` is that it uses the same option switches as `useradd`.)
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `usermod` 修改现有账户的过期数据。（`usermod` 的优点是它使用与 `useradd` 相同的选项开关。）
- en: Use `chage` to modify expiry data on existing accounts. (This one uses a whole
    different set of option switches.)
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `chage` 修改现有账户的过期数据。（这使用了一整套不同的选项开关。）
- en: 'You can use `useradd` and `usermod` to set account expiry data, but not to
    set password expiry data. The only two option switches that affect account expiry
    data are as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`useradd`和`usermod`来设置账户过期数据，但不能用来设置密码过期数据。影响账户过期数据的仅有两个选项开关如下：
- en: '`-e`: Use this to set an expiration date for the account, in the form YYYY-MM-DD.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-e`：使用此选项为账户设置一个过期日期，格式为YYYY-MM-DD。'
- en: '`-f`: Use this to set the number of days after the user''s password expires
    that you want for his or her account to get locked out.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f`：使用此选项设置密码过期后，账户锁定之前的天数。'
- en: 'Let''s say that you want to create an account for Charlie that will expire
    at the end of 2025\. On a Red Hat-type machine, you could enter this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想为Charlie创建一个将在2025年底过期的账户。在Red Hat类型的机器上，您可以输入以下命令：
- en: '[PRE35]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'On a non-Red Hat-type machine, you''d have to add the option switches that
    create the home directory and assign the correct default shell:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在非Red Hat类型的机器上，您需要添加创建主目录并分配正确默认shell的选项开关：
- en: '[PRE36]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Use `chage -l` to verify what you''ve entered:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`chage -l`验证您所输入的信息：
- en: '[PRE37]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, let''s say that Charlie''s contract has been extended, and you need to
    change his account expiration to the end of January 2026\. You''ll use `usermod`
    the same way on any Linux distro:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设Charlie的合同已被延长，您需要将他的账户过期日期更改为2026年1月末。您可以像在任何Linux发行版上一样使用`usermod`：
- en: '[PRE38]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Again, verify that everything is correct with `chage -l`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 再次通过`chage -l`验证所有信息是否正确：
- en: '[PRE39]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Optionally, you can set the number of days before an account with an expired
    password will get locked out:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，您可以设置密码过期后账户被锁定前的天数：
- en: '[PRE40]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: But if you were to do that now, you wouldn't see any difference in the `chage
    -l` output because we still haven't set expiration data for Charlie's password.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果您现在执行此操作，您在`chage -l`输出中不会看到任何变化，因为我们还没有为Charlie的密码设置过期数据。
- en: Setting expiry data on a per-account basis with chage
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用chage按账户单独设置过期日期
- en: 'You would only use `chage` to modify existing accounts, and you would use it
    for setting either an account expiration or a password expiration. Here are the
    relevant option switches:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您只能使用`chage`修改现有账户，并且可以用它来设置账户过期或密码过期。以下是相关的选项开关：
- en: '| **Option** | **Explanation** |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| **选项** | **说明** |'
- en: '| `-d` | If you use the `-d 0` option on someone''s account, you''ll force
    the user to change his or her password on their next login. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `-d` | 如果在某个账户上使用`-d 0`选项，将强制用户在下次登录时更改密码。 |'
- en: '| `-E` | This is equivalent to the lowercase `-e` for `useradd` or `usermod`
    . It sets the expiration date for the user account. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `-E` | 这相当于`useradd`或`usermod`中的小写`-e`选项。它设置用户账户的过期日期。 |'
- en: '| `-I` | This is equivalent to `-f` for `useradd` or `usermod` . It sets the
    number of days before an account with an expired password will be locked out.
    |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `-I` | 这相当于`useradd`或`usermod`的`-f`选项。它设置了密码过期后，账户将被锁定之前的天数。 |'
- en: '| `-m` | This sets the minimum number of days between password changes. In
    other words, if Charlie changes his password today, the `-m 5` option will force
    him to wait five days before he can change his password again. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `-m` | 设置密码更改之间的最小天数。换句话说，如果Charlie今天更改了密码，`-m 5`选项将强制他等待五天才能再次更改密码。 |'
- en: '| `-M` | This sets the maximum number of days before a password expires. (Be
    aware, though, that if Charlie last set his password 89 days ago, using a `-M
    90` option on his account will cause his password to expire tomorrow, not 90 days
    from now.) |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `-M` | 该选项设置密码过期之前的最大天数。（但请注意，如果Charlie上次更改密码已经是89天前，使用`-M 90`选项将导致他的密码在明天过期，而不是90天后。）
    |'
- en: '| `-W` | This will set the number of warning days for passwords that are about
    to expire. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `-W` | 该选项设置密码即将过期时的警告天数。 |'
- en: 'You can set just one of these data items at a time or you can set them all
    at once. In fact, to avoid frustrating you with a different demo for each individual
    item, let''s set them all at once, except for `-d 0`, and then we''ll see what
    we''ve got:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以一次只设置其中一个数据项，也可以一次性设置所有数据项。事实上，为了避免每个单独项目演示给您带来的困扰，我们将一次性设置所有数据项，除了`-d 0`，然后查看结果：
- en: '[PRE41]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: All expiration data have now been set.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 所有过期数据现在已设置完成。
- en: 'For our final example, let''s say that you''ve just created a new account for
    Samson, and you want to force him to change his password the first time he logs
    in. There are two ways to do that. Either way, you would do it after you''ve set
    his password initially, using one of these two commands:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Next, we will go through a hands-on lab.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab for setting account and password expiry data
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this lab, you''ll create a couple of new user accounts, set expiration data,
    and view the results. You can do this lab on any of your virtual machines. The
    only difference will be with the `useradd` commands:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'On your CentOS or AlmaLinux VM, create a user account for Samson with the expiration
    date of June 30, 2025, and view the results:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'For Ubuntu, run these commands:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Use `usermod` to change Samson''s account expiration date to July 31, 2025:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Assign a password to Samson''s account, then force him to change his password
    on his first login. Log in as Samson, change his password, then login to your
    own account:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Use `chage` to set a five-day waiting period for changing passwords, a password
    expiration period of 90 days, an inactivity period of two days, and a warning
    period of five days:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Keep this account, because you'll be using it for the lab in the next section.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let's see how to prevent brute-force attacks.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Preventing brute-force password attacks
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazingly enough, this is another topic that engenders a bit of controversy.
    I mean, nobody denies the wisdom of automatically locking out user accounts that
    are under attack. The controversial part concerns the number of failed login attempts
    that we should allow before locking the account.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the stone age of computing, so long ago that I still had a full head
    of hair, the early Unix operating systems only allowed users to create a password
    with a maximum of eight lowercase letters. So in those days, it was possible for
    early man to brute-force someone else''s password just by sitting down at the
    keyboard and typing in random passwords. That''s when the philosophy started of
    having user accounts get locked out after only three failed login attempts. Nowadays,
    with strong passwords, or better yet, a strong passphrase, setting a lockout value
    of three failed login attempts will do three things:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: It will unnecessarily frustrate users.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will cause extra work for help desk personnel.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an account really is under attack, it will lock the account before you've
    had a chance to gather information about the attacker.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the lockout value to something more realistic, such as 100 failed login
    attempts, will still provide good security, while still giving you enough time
    to gather information about the attackers. Just as importantly, you won't cause
    undue frustration to users and help desk personnel.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, regardless of how many failed login attempts your employer allows you
    to allow, you'll still need to know how to set it all up. On RHEL 7-type systems
    and Ubuntu 18.04, you’ll do this by configuring the `pam_tally2` **Pluggable Authentication
    Module** (**PAM**). On RHEL 8/9-type systems and Ubuntu 20.04/22.04, you’ll instead
    configure the `pam_faillock` PAM module. Let’s dig in and see how it’s done.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the pam_tally2 PAM module on CentOS 7
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make this magic work, we''ll rely on our good friend, PAM. The `pam_tally2`
    module comes already installed on CentOS 7, but it isn''t configured. We''ll begin
    by editing the `/etc/pam.d/login` file. Figuring out how to configure it is easy
    because there''s an example at the bottom of the `pam_tally2` man page:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Tip:'
  id: totrans-223
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-224
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you’re working with a text-mode server, you’ll only need to configure the
    `/etc/pam.d/login` file. But, if you’re working with a machine that’s running
    a graphical desktop environment, you’ll also need to configure the `/etc/pam.d/password.auth`
    and the `/etc/pam.d/system.auth` files. You’ll see how to do that when you get
    to the hands-on lab.
  id: totrans-225
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In the second line of the example, we see that `pam_tally2` is set with the
    following parameters:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '**deny=4**: This means that the user account under attack will get locked out
    after only four failed login attempts.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**even_deny_root**: This means that even the root user account will get locked
    if it''s under attack.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**unlock_time=1200**: The account will get automatically unlocked after 1,200
    seconds, or 20 minutes.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, if you look at the actual `login` file on your virtual machine, you'll
    see that it doesn’t look exactly like this example `login` file that's in the
    man page. That's okay, we'll still make it work.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve configured the `login` file and have had a failed login, you''ll
    see a new file created in the `/var/log` directory. You''ll view information from
    that file with the `pam_tally2` utility. You can also use `pam_tally2` to manually
    unlock a locked account if you don''t want to wait for the timeout period:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note that, after I did the reset on Charlie's account, I received no output
    from doing another query.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab for configuring pam_tally2 on CentOS 7
  id: totrans-234
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Configuring `pam_tally2` is super easy because it only requires adding one
    line to the `/etc/pam.d/login`, `/etc/pam.d/password.auth`, and `/etc/pam.d/system.auth`
    files. To make things even easier, you can just copy and paste that line from
    the example in the `pam_tally2` man page. In spite of what I said earlier about
    bumping the number of failed logins up to 100, we''ll keep that number at 4 for
    now, because I know that you don''t want to have to do 100 failed logins in order
    to demo this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'On the CentOS 7 virtual machine, open the `/etc/pam.d/login` file for editing.
    Look for the line that invokes the `pam_securetty` module. (That should be around
    line 2.) Beneath that line, insert this line:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Save the file and exit the editor.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Place the same line at the top of the `/etc/pam.d/password.auth` and `/etc/pam.d/system.auth`
    files, just above the first `auth required` line. (The comment at the top of these
    files says to not hand-edit them, because running `authconfig` will destroy the
    edits. Unfortunately, you have to hand edit them, because `authconfig` won’t configure
    this for you.)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: For this step, you'll need to log out of your own account, because `pam_tally2`
    doesn't work with `su`. So log out and, while purposely using the wrong password,
    attempt to log in to the `samson` account that you created in the previous lab.
    Keep doing that until you see the message that the account is locked. Note that
    when the `deny` value is set to `4`, it will actually take five failed login attempts
    to lock Samson out.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log back in to your own user account. Run this command and note the output:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'For this step, you''ll simulate that you''re a help desk worker, and Samson
    has just called to request that you unlock his account. After verifying that you
    really are talking to the real Samson, enter the following two commands:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Now that you've seen how this works, open the `/etc/pam.d/login` file for editing.
    Change the `deny=` parameter from `4` to `100` and save the file. (This will make
    your configuration a bit more realistic in terms of modern security philosophy.)
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let’s look at configuring `pam_faillock` on our AlmaLinux machines.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Configuring pam_faillock on AlmaLinux 8/9
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `pam_faillock` module is already installed on any RHEL 8 or RHEL 9-type
    of Linux distro. Since the basic concepts of `pam_faillock` are pretty much the
    same as they are for `pam_tally2`, we’ll dispense with the preliminary explanations
    and jump right to the hands-on procedure.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab for configuring pam_faillock on AlmaLinux 8 or AlmaLinux 9
  id: totrans-249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Although you can enable and configure `pam_faillock` by hand-editing the PAM
    configuration files, the RHEL distros provide an easier method, which is called
    **authselect**. (Note that this procedure works exactly the same for either a
    text-mode or a GUI-type machine.)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'On either an AlmaLinux 8 or an AlmaLinux 9 VM, view the available authselect
    profiles by doing:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'For now, at least, we’re only dealing with local users. So, we’ll use the **minimal**
    profile. View the features of this profile like this:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Note that there are a lot of included features, but we’re only interested in
    the `with-faillock` feature.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the minimal profile, like this:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'After enabling a profile, we can now enable the `pam_faillock` module, like
    this:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In the `/etc/security/` directory, open the `faillock.conf` file in your favorite
    text editor. Look for these four lines:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Remove the preceding comment symbols from all four lines, and save the file.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a user account for Vicky by doing:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Open another terminal, and have Vicky deliberately make three failed login
    attempts. View the results in your own terminal, like this:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Then, before the timer expires, have Vicky try to log in again with her own
    correct password.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: After the ten-minute timer expires, have Vicky try to log in with the correct
    password.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Have the user log out. Then, have the user again deliberately make three failed
    login attempts. This time, reset the user’s account before the timer expires,
    like this:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: That’s it for this lab.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Doing this on Ubuntu is a bit different, so let’s now look at that.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Configuring pam_faillock on Ubuntu 20.04 and Ubuntu 22.04
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sadly, the `authselect` utility isn’t available for Ubuntu, so we’ll just have
    to hand-edit the PAM configuration files. Here’s the procedure.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab for configuring pam_faillock on Ubuntu 20.04 and Ubuntu 22.04
  id: totrans-275
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Open the `/etc/pam.d/common-auth` file in your favorite text editor. At the
    top of the file, insert these two lines:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Open the `/etc/pam.d/common-account` file in your text editor. At the bottom
    of the file, add this line:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Configure the `/etc/security/faillock.conf` file the same way that I showed
    you in Step 5 of the preceding lab for AlmaLinux.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the setup as outlined in Steps 6 through 8 of the preceding AlmaLinux lab.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And, that’s all there is to it. Next, let’s look at how to manually lock a user’s
    account.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locking user accounts
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Okay, you''ve just seen how to have Linux automatically lock user accounts
    that are under attack. There will also be times when you''ll want manually lock
    out user accounts. Let''s look at a few examples:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: When a user goes on vacation and you want to ensure that nobody monkeys around
    with that user's account while he or she is gone
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a user is under investigation for questionable activities
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a user leaves the company
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With regard to the last point, you may be asking yourself, *Why can't we just
    delete the accounts of people who are no longer working here?* And, you certainly
    can, easily enough. However, before you do so, you'll need to check with your
    local laws to make sure that you don't get yourself into deep trouble. Here in
    the United States, for example, we have the **Sarbanes-Oxley** law, which restricts
    what files that publicly traded companies can delete from their computers. If
    you were to delete a user account, along with that user's home directory and mail
    spool, you just might be running afoul of Sarbanes-Oxley or whatever you may have
    as the equivalent law in your own home country.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, there are two utilities that you can use to temporarily lock a user
    account:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '**usermod**'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**passwd**'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In apparent contradiction to what I just said, at some point you will need to
    remove inactive user accounts. That's because malicious actors can use an inactive
    account to perform their dirty deeds, especially if that inactive account had
    any sort of administrative privileges. But when you do remove the accounts, make
    sure that you do so in accordance with local laws and with company policy. In
    fact, your best bet is to ensure that your organization has written guidelines
    for removing inactive user accounts in its change management procedures.
  id: totrans-292
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using usermod to lock a user account
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s say that Katelyn has gone on maternity leave and will be gone for several
    weeks. We can lock her account by doing:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'When you look at Katelyn''s entry in the `/etc/shadow` file, you''ll now see
    an exclamation point in front of her password hash, like this:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: This exclamation point prevents the system from reading her password hash, which
    effectively locks her out of the system.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: 'To unlock her account, just do this:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: You'll see that the exclamation point has been removed so that she can now log
    in to her account.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Using passwd to lock user accounts
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You could also lock Katelyn''s account like this:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This does the same job as `usermod -L`, but in a slightly different manner.
    For one thing, `passwd -l` will give you some feedback about what''s going on,
    whereas `usermod -L` gives you no feedback at all. On Ubuntu, the feedback looks
    like this:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'On CentOS or AlmaLinux, the feedback looks like this:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Also, on a CentOS or AlmaLinux machine, you'll see that `passwd -l` places two
    exclamation points in front of the password hash, instead of just one. Either
    way, the effect is the same.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: 'To unlock Katelyn''s account, just do this:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: In versions of Red Hat or CentOS prior to version 7, `usermod -U` would remove
    only one of the exclamation points that `passwd -l` places in front of the `shadow`
    file password hash, thereby leaving the account still locked. No big deal, though,
    because running `usermod -U` again would remove the second exclamation point.
  id: totrans-312
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-313
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ever since the introduction of the RHEL 7-type distros, this has been fixed.
    The `passwd -l` command still places two exclamation points in the `shadow` file,
    but `usermod -U` now removes both of them. (That's a shame, really, because it
    ruined a perfectly good demo that I liked to do for my students.)
  id: totrans-314
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Locking the root user account
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The cloud is big business nowadays, and it''s now quite common to rent a virtual
    private server from companies such as Rackspace, DigitalOcean, or Microsoft Azure.
    These can serve a variety of purposes:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: You can run your own website, where you install your own server software instead
    of letting a hosting service do it.
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set up a web-based app for other people to access.
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recently, I saw a YouTube demo on a crypto-mining channel that showed how to
    set up a Proof of Stake master node on a rented virtual private server.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One thing that most of these cloud services have in common is that when you
    first set up your account and the provider sets up a virtual machine for you,
    they'll have you log in to the root user account. (It even happens with Ubuntu,
    even though the root account is disabled on a local installation of Ubuntu.)
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: I know that there are some folk who just keep logging in to the root account
    of these cloud-based servers and think nothing of it, but that's really a horrible
    idea. There are botnets, such as the Hail Mary botnet, that continuously scan
    the Internet for servers that have their Secure Shell port exposed to the Internet.
    When the botnets find one, they'll do a brute-force password attack against the
    root user account of that server. And yes, the botnets sometimes are successful
    in breaking in, especially if the root account is set with a weak password.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the first thing that you want to do when you set up a cloud-based server
    is to create a normal user account for yourself and set it up with full `sudo`
    privileges. Then, log out of the root user account, log in to your new account,
    and do this:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: I mean, really, why take the chance of getting your root account compromised?
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: Setting up security banners
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Something that you really, really don't want is to have a login banner that
    says something to the effect of *Welcome to our network*. I say that because,
    quite a few years ago, I attended a mentored SANS course on incident handling.
    Our instructor told us a story about how a company took a suspected network intruder
    to court, only to get the case thrown out. The reason? The alleged intruder said,
    "*Well, I saw the message that said Welcome to the network, so I thought that
    I really was welcome there."* Yeah, supposedly, that was enough to get the case
    thrown out.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: A few years later, I related that story to the students in one of my Linux admin
    classes. One student said, "*That makes no sense.* *We all have welcome mats at
    our front doors, but that doesn't mean that burglars are welcome to come in.*"
    I have to confess that he had a good point, and I now have to wonder about the
    veracity of the story.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: At any rate, just to be on the safe side, you do want to set up login messages
    that make clear that only authorized users are allowed to access the system.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: Using the motd file
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `/etc/motd` file will present a message banner to anyone who logs in to
    a system through Secure Shell. On your CentOS or AlmaLinux machine, an empty `motd`
    file is already there. On your Ubuntu machine, the `motd` file isn''t there, but
    it''s a simple matter to create one. Either way, open the file in your text editor
    and create your message. Save the file and test it by remotely logging in through
    Secure Shell. You should see something like this:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Ubuntu comes with a dynamic MOTD system that displays messages from Ubuntu''s
    parent company and messages about the operating system. When you create a new
    `motd` file in the `/etc` directory, whatever message you put in it will show
    up at the end of the dynamic output, like so:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Using the issue file
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `issue` file, also found in the `/etc` directory, shows a message on the
    local terminal, just above the login prompt. A default `issue` file would just
    contain macro code that would show information about the machine. Here''s an example
    from an Ubuntu machine:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'On a Red Hat-type machine, it would look like this:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'On an Ubuntu machine, the banner would look something like this:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_03_01.png](img/file28.png)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
- en: 19501_03_01.png
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'On a a Red Hat-type machine, it would look something like this:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_03_02.png](img/file29.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
- en: 19501_03_02.png
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: 'You could put a security message in the `issue` file, and it would show up
    after a reboot:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_03_03.png](img/file30.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
- en: 19501_03_03.png
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: In reality, is there really any point in placing a security message in the `issue`
    file? If your servers are properly locked away in a server room with controlled
    access, then probably not. For desktop machines that are out in the open, this
    would be more useful.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: Using the issue.net file
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just don't. It's for `telnet` logins, and anyone who has `telnet` enabled on
    their servers is seriously screwing up. However, for some strange reason, the
    `issue.net` file still hangs around in the `/etc` directory.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: Detecting compromised passwords
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yes, dear hearts, the bad guys do have extensive dictionaries of passwords
    that either are commonly used or have been compromised. One of the most effective
    ways of brute-forcing passwords is to use these dictionaries to perform a dictionary
    attack. This is when the password-cracking tool reads in passwords from a specified
    dictionary and tries each one until either the list has been exhausted, or until
    the attack is successful. So, how do you know if your password is on one of those
    lists? Easy. Just use one of the online services that will check your password
    for you. One popular site is *Have I Been Pwned?*, which you can see here:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_03_04.png](img/file31.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
- en: 19501_03_04.png
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get to *Have I Been Pwned?* here:'
  id: totrans-355
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-356
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://haveibeenpwned.com](https://haveibeenpwned.com)'
  id: totrans-357
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: All you really have to do is to type in your password, and the service will
    show if it's on any lists of compromised passwords. But think about it. Do you
    really want to send your production password to somebody's website? Yeah, I thought
    not. Instead, let's just send a hash value of the password. Better yet, let's
    just send enough of the hash to allow the site to find the password in its database,
    but not so much that they can figure out what your exact password is. We'll do
    that by using the *Have I Been Pwned?* **Application Programming Interface** (**API**).
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate the basic principle, let''s use `curl`, along with the API,
    to see a list of password hashes that have `21BD1` as part of their values. (You
    can do this on any of your virtual machines. I''ll just do it on the Fedora workstation
    that I''m currently using to type this.) Just run this:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'You''re going to get a lot of output like this, so I''ll just show the first
    few lines:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Let''s pipe this into `wc -l`, a handy counting utility, to see how many matching
    results we''ve found:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'According to this, we''ve found 526 matches. But that''s not very useful, so
    let''s fancy things up just a bit. We''ll do that by creating the `pwnedpasswords.sh`
    shell script, which looks like this:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Okay, I can''t try to turn you into a shell scripting guru at the moment, but
    here''s the simplified explanation:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '**candidate_password=$1**: This requires you to enter the password that you
    want to check when you invoke the script.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**full_hash=** , **prefix=**, **suffix=**: These lines calculate the SHA1 hash
    value of the password, and then extract just the portions of the hash that we
    want to send to the password-checking service.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**if curl**: We wrap up with an `if..then..else` structure that sends the selected
    portions of the password hash to the checking service, and then tells us whether
    or not the password has been compromised.'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After saving the file, add the executable privilege for the user, like so:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now, let''s see if `TurkeyLips`, my all-time favorite password, has been compromised:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Yeah, it's been compromised, all right. So, I reckon that I don't want to use
    that for a production password.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try it again, except with a random two-digit number tacked on at
    the end:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Well, it says that this one is okay. Still though, you probably don't want to
    use such a simple permutation of a password that's known to have been compromised.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: I'd like to take credit for the shell script that I've presented here, but I
    can't. That was a creation of my buddy, Leo Dorrendorf of the former VDOO Internet
    of Things security company, which has since been acquired by JFrog. (I've reproduced
    the script here with his kind permission.)
  id: totrans-379
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-380
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you''re interested in security solutions for your Internet of Things devices,
    you can check them out here:'
  id: totrans-381
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-382
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://jfrog.com/security-and-compliance/?vr=1/](https://jfrog.com/security-and-compliance/?vr=1/)'
  id: totrans-383
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-384
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Full disclosure: the VDOO/JFrog company has been one of my clients.'
  id: totrans-385
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, having said all of this, I still need to remind you that a passphrase is
    still better than a password. Not only is a passphrase harder to crack, it's also
    much less likely to be on anyone's list of compromised credentials.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab for detecting compromised passwords
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this lab, you''ll use the `pwnedpasswords` API in order to check your own
    passwords:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `curl` to see how many passwords there are with the `21BD1` string in their
    password hashes:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'In the home directory of any of your Linux virtual machines, create the `pwnpassword.sh`
    script with the following content:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Add the executable permission to the script:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Run the script, specifying `TurkeyLips` as a password:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Repeat *Step 4* as many times as you like, using a different password each time.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user management techniques that we've looked at so far work great on a small
    number of computers. But what if you're working in a large enterprise? We'll look
    at that next.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: Understanding centralized user management
  id: totrans-399
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In an enterprise setting, you'll often have hundreds or thousands of users and
    computers that you need to manage. So, logging in to each network server or each
    user's workstation to perform the procedures that we've just outlined would be
    quite unworkable. (But do bear in mind that you still need those skills.) What
    we need is a way to manage computers and users from one central location. Space
    doesn't permit me to give the complete details about the various methods for doing
    this. So for now, we'll just have to settle for a high-level overview.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Active Directory
  id: totrans-401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I'm not exactly a huge fan of either Windows or Microsoft. But when it comes
    to Active Directory, I'll have to give credit where it's due. It's a pretty slick
    product that vastly simplifies the management of very large enterprise networks.
    And yes, it is possible to add Unix/Linux computers and their users to an Active
    Directory domain.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: I've been keeping a dark secret, and I hope that you won't hate me for it. Before
    I got into Linux, I obtained my MCSE certification for Windows Server 2003\. Mostly,
    my clients work with nothing but Linux computers, but I occasionally do need to
    use my MCSE skills. Several years ago, a former client needed me to set up a Linux-based
    Nagios server as part of a Windows Server 2008 domain, so that its users would
    be authenticated by Active Directory. It took me a while to get it figured out,
    but I finally did, and my client was happy.
  id: totrans-403
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unless you wear many hats, as I sometimes have to do, you—as a Linux administrator—probably
    won't need to learn how to use Active Directory. Most likely, you'll just tell
    the Windows Server administrators what you need, and let them take care of it.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: I know, you've been chomping at the bit to see what we can do with a Linux server.
    So, here goes.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: Samba on Linux
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Samba is a Unix/Linux daemon that can serve three purposes:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: Its primary purpose is to share directories from a Unix/Linux server with Windows
    workstations. The directories show up in the Windows File Explorer as if they
    were being shared from other Windows machines.
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can also be set up as a network print server.
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can also be set up as a Windows domain controller.
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can install Samba version 3 on a Linux server, and set it up to act as an
    old-style Windows NT domain controller. It's a rather complex procedure, and it
    takes a while. Once it's done, you can join both Linux and Windows machines to
    the domain and use the normal Windows user management utilities to manage users
    and groups.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: One of the Linux community's Holy Grails was to figure out how to emulate Active
    Directory on a Linux server. That became something of a reality just a few years
    ago, with the introduction of Samba version 4\. But setting it up is a very complex
    procedure, and isn't something that you'll likely enjoy doing. So, perhaps we
    should keep searching for something even better.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: FreeIPA/Identity Management on RHEL-type distros
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Several years ago, the Red Hat company introduced FreeIPA as a set of packages
    for Fedora. Why Fedora? It''s because they wanted to give it a thorough test on
    Fedora before making it available for actual production networks. It''s now available
    for RHEL 7 through RHEL 9 and all of their offspring, including CentOS and AlmaLinux.
    This is what IPA stands for:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Identity
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Policy
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s something of an answer to Microsoft''s Active Directory, but it still
    isn''t a complete one. It does some cool stuff, but it''s still very much a work
    in progress. The coolest part about it is how simple it is to install and set
    up. All it really takes is to install the packages from the normal repositories,
    open the proper firewall ports, and then run a setup script. Then, you''re all
    set to start adding users and computers to the new domain via FreeIPA''s web interface.
    Here, I''m adding Cleopatra, my gray-and-white tabby kitty:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_03_05.png](img/file32.png)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
- en: 19501_03_05.png
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: Although you can add Windows machines to a FreeIPA domain, it's not recommended.
    But, starting with RHEL/CentOS 7.1, you can use FreeIPA to create cross-domain
    trusts with an Active Directory domain.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: The official name of this program is FreeIPA. But, for some strange reason,
    the Red Hat folk refuse to mention that name in their documentation. They always
    just refer to it as either Identity Management or IdM.
  id: totrans-422
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That's pretty much it for the user management topic. Let's summarize, and then
    move on to the next chapter.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to lock down users' home directories, how
    to enforce strong password policies, and how to enforce account and password expiration
    policies. Then, we talked about a way to prevent brute-force password attacks,
    how to manually lock out user accounts, how to set up security banners, and how
    to check for compromised passwords. We wrapped things up with a brief overview
    of central user management systems.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at how to work with various firewall utilities.
    I'll see you there.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-427
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In which file would you configure complex password criteria?
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using the `useradd` utility on a RHEL 7-type machine, what should the `UMASK`
    setting be in the `/etc/login.defs` file?
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using the `adduser` utility on an Ubuntu 20.04 machine, how would you configure
    the `/etc/adduser.conf` file so that new users' home directories will prevent
    other users from accessing them?
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What change did the National Institute for Standards and Technology recently
    make to their recommended password policy?
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which three of the following utilities can you use to set user account expiry
    data?
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`useradd`'
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adduser`'
  id: totrans-434
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`usermod`'
  id: totrans-435
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`chage`'
  id: totrans-436
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Why might you want to lock out the user account of a former employee, rather
    than to delete it?
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's easier to lock an account than it is to delete it.
  id: totrans-438
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It takes too long to delete an account.
  id: totrans-439
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's not possible to delete a user account.
  id: totrans-440
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting a user account, along with the users' files and mail spool, might get
    you into trouble with the law.
  id: totrans-441
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You've just created a user account for Samson, and you now want to force him
    to change his password the first time that he logs in. Which two of the following
    commands will do that?
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo chage -d 0 samson`'
  id: totrans-443
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo passwd -d 0 samson`'
  id: totrans-444
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo chage -e samson`'
  id: totrans-445
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo passwd -e samson`'
  id: totrans-446
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following is an advantage that the `adduser` utility has over
    the traditional `useradd` utility?
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adduser` can be used in shell scripts.'
  id: totrans-448
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adduser` is available for all Linux distributions.'
  id: totrans-449
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adduser` has an option that allows you to encrypt a user''s home directory
    as you create the user account.'
  id: totrans-450
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adduser` is also available for Unix and BSD.'
  id: totrans-451
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the newest Linux distributions, what is the name of the PAM module that you
    would use to enforce strong passwords?
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: cracklib
  id: totrans-453
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: passwords
  id: totrans-454
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: secure
  id: totrans-455
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: pwquality
  id: totrans-456
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Reading
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might not need complex, alphanumeric passwords after all: [https://www.pcmag.com/news/355496/you-might-not-need-complex-alphanumeric-passwords-after-all](https://www.pcmag.com/news/355496/you-might-not-need-complex-alphanumeric-passwords-after-all)'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The new NIST Guidelines-We had it all wrong before: [https://www.riskcontrolstrategies.com/2018/01/08/new-nist-guidelines-wrong/](https://www.riskcontrolstrategies.com/2018/01/08/new-nist-guidelines-wrong/)'
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux user management: [https://www.youtube.com/playlist?list=PL6IQ3nFZzWfpy2gISpCppFk3UQVGf_x7G](https://www.youtube.com/playlist?list=PL6IQ3nFZzWfpy2gISpCppFk3UQVGf_x7G)'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The FreeIPA Project home page: [https://www.freeipa.org/page/Main_Page](https://www.freeipa.org/page/Main_Page)'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RHEL 9 Documentation (Scroll down to the Identity Management section)
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9)'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 8 Documentation (Scroll down to the Identity Management section) : [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/)'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 7 Documentation (Scroll down to the Identity Management section): [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/)'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pam_faillock: Lock user account after X failed attempts: [https://www.golinuxcloud.com/pam-faillock-lock-user-account-linux/](https://www.golinuxcloud.com/pam-faillock-lock-user-account-linux/)'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers
  id: totrans-467
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: /etc/security/pwquality.conf
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '077'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the DIR_MODE= value to DIR_MODE=750
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They abandoned their old philosophy about password complexity and password expirations.
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A, C, D
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A, D
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

- en: Chapter 3. Package Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've installed a basic system, now it's time to install additional software.
    Or, if you've selected some tasks during installation, you want to see what's
    installed and maybe remove some you won't use. Maybe your boss has asked for a
    report on what's installed. Or what about security updates?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: All of these, and more, are the province of the Debian package management system.
    In this chapter, we'll cover package managers, software selection and maintenance,
    how to update your system, and how to set up automatic updating.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A note for beginners**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: This section assumes that you are familiar with using the root account. Information
    on accessing root account functions is available at [https://wiki.debian.org/Root](https://wiki.debian.org/Root),
    and in the Debian reference manual at [http://www.debian.org/doc/manuals/debian-reference/](http://www.debian.org/doc/manuals/debian-reference/).
    Quick help for commands mentioned in this chapter (as well as most Linux commands)
    can be obtained by executing `man <command name>` or `info <command name>` from
    the command line, or using the help button available in most graphical applications.
    The Debian reference manual also contains more detailed information on using the
    package manager commands in this chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Package managers
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Debian package manager started out as a simple, command line utility, **dpkg**,
    with an additional utility called **dselect** that allowed more complex package
    selection and dependency resolution via a menu-based, curses interface. Eventually,
    additional utilities were developed to provide a better interface, better automatic
    dependency resolution, or both. The current standard package manager is Synaptic,
    a full-blown GUI application that runs in a graphical window manager, and provides
    extensive selection and reporting features.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: We'll start at the beginning.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: dpkg and dselect
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These were the first package management tools for Debian. The `dpkg` command
    still does all of the work, since all the newer tools use it as a backend. As
    such, it has all the functions required to install, remove, configure, and report
    on packages. It is a command line tool.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: One of the limitations of dpkg is that it does very little in the way of dependency
    checking, other than to offer an error message when there is a dependency problem.
    It requires the user to examine the dependency report and include the necessary
    packages during installation. Another limitation is that dpkg only works on packages
    that have already been downloaded. However, both of these limitations are addressed
    by the dselect utility.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The `dselect` command is a menu-driven utility that provides access to information
    on packages in the Debian repositories, and also checks and helps resolve software
    dependencies. This greatly simplifies package selection and installation. Once
    packages are selected and all dependencies satisfied, either automatically or
    with user assistance, `dpkg` is run automatically to perform the actual installation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Package Tool
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Advanced Package Tool** (**APT**) was developed to provide a better command
    line tool, that provides the download and dependency resolution of dselect without
    requiring a separate utility for installation. Think of it as an all-in-one command
    line tool that can select and install or remove packages, and automatically resolve
    dependencies.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: APT is actually a set of utilities that include apt-get, the basic package installation
    tool, plus several other command line tools with an `apt` prefix that provide
    additional functions, such as reporting on available software, and other basic
    local repository maintenance functions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `man apt` command is a good starting point, as it references other man pages
    for the additional commands. The Debian reference manual also has a lot of information
    on these and other package management commands
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: This tool is fast and, except in unusual circumstances, handles dependencies
    without requiring user intervention. It is the basic tool used for automatic,
    unattended software installation and updating.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: aptitude
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: aptitude is a frontend for the APT suite of tools, with added functions that
    make it a little more like dselect, where it offers finer-grained dependency checking,
    and resolves dependencies with user assistance rather than autonomously. As such,
    it is sometimes more successful than dselect or apt-get in resolving dependencies
    in ways that require fewer major software changes. Like dselect, it is menu-driven
    (using the curses interface), with command line functions as well. Due to the
    user assistance sometimes required for dependency resolution, it is less suited
    to unattended or automatic software updating. However, it will frequently find
    simpler solutions, involving fewer changes, when compared to APT.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Synaptic
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Synaptic is a package manager with a complete GUI interface and no command line
    capability. It offers most of the capabilities of aptitude along with many of
    the repository handling features of dselect. Like the menu-based dselect and aptitude
    utilities, it provides a software list divided into sections of interest, such
    as databases, development, editors, and many more, which allow an administrator
    to browse available software more effectively. It also has search functions which
    allow easy discovery of packages for specific purposes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Best practices are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: For general use – Synaptic
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For automated installation – APT
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For dependency resolution in difficult cases – aptitude
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package selection and maintenance
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debian software is grouped together in a release. All of the software in a release
    is available as a set of purchased or downloaded media (CDs, DVDs, or new with
    Debian 7, Blue-ray Discs), or as individual packages grouped in an online repository.
    While dpkg works only on packages already downloaded (or on media mounted locally),
    the other package management utilities understand offline media, and local and
    remote repositories, which must be configured.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Configuring media or repositories
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All of the configuration for media or repositories resides in `/etc/apt`, in
    a file called `sources.list` and any files in `/etc/apt/sources.list.d` with a
    `.list` extension. These files can be modified manually using your preferred editor,
    manipulated by various APT utilities such as `apt-add-repository` or `apt-spy`,
    or via a menu item in the Synaptic GUI. Details on how each method works are available
    in various man pages, such as those for `sources.list`, `apt-add-repository` and
    `apt-spy`, and so on, or in the help files for Synaptic. However, since they all
    depend on the same configuration files and format, the required entries are all
    similar.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Each line includes an indicator of whether the repository contains binary packages
    or source packages (from which binary packages can be built), the location of
    the repository, the identity of the release, and the sections from which software
    may be selected. Generally, an entry for the media from which you installed Debian
    has already been made during the installation process, along with an entry for
    the online repositories if they were used during installation as well.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: All package sources are identified by a URI, described in the `sources.list`
    man page. The release is identified by its release name (such as **squeeze** for
    Debian 6, or **wheezy** for Debian 7) or by a generic term such as stable, which
    refers to whatever the current stable release is.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The current Debian stable release is Debian 7, code named wheezy, released on
    4 May, 2013\. At the time of writing, stable is a synonym for wheezy. Debian releases
    are named in order to make the mirroring of various distributions easier. The
    code names to date are all taken from the movie *Toy Story*. This tradition apparently
    began in 1996 when Bruce Perens, who worked for Pixar at that time, took command
    of the Debian Project.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking all these together, a set of repositories as they might appear in `/etc/apt/sources.list`
    would look like the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Beginner''s note**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Some of the lines in the example are too long for the page and are split into
    two lines, using the common convention of adding a backslash (\) at the end of
    the first line to indicate it is continued. In reality, these lines should not
    be split in the APT sources configuration files.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Let's take the lines one at a time.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: The first line begins with a `#`, meaning this entry is disabled. This entry
    was made by a network installation, wherein a minimal CD is mounted, and basic
    software is installed to allow the remainder of the software to be installed from
    online repositories as listed in the later lines. Only the main section is required,
    as shown at the end of the line.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The next two lines are for binaries (`deb`) and source packages (`deb-src`),
    to be obtained from an HTTP server ([http://ftp.us.debian.org/debian](http://ftp.us.debian.org/debian)).
    The release is wheezy, and all three sections—main, contrib, and non-free—will
    be available. Following the main repository lines are two lines for binary and
    source package updates. This is where security updates to the stable release are
    available.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even if you prefer to use media for the release, rather than online repositories,
    you should include the update repositories, as this is the only way to obtain
    security fixes that are released as necessary.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there is a comment, and two lines for what used to be called the 'volatile'
    repository, and is now just referred to by the release code name followed by `-updates`.
    This repository contains packages that are routinely updated throughout the life
    of the release, much more often than the security update repository. Packages
    that include virus definitions are examples of software included in this repository.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: While the various methods of configuring the repositories have slight differences,
    the same basic information will be required, no matter which method you use. Also,
    since all of the utilities use the same configuration files and format, information
    entered, deleted, or modified by one method will be immediately visible to all
    of the utilities.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: All of the previous lines were pre-configured by the installation procedure,
    and did not need to be modified. However, there are often reasons to modify or
    add repositories. You may want to add repositories for software that isn't available
    directly from Debian, or modify the URL to use a different, better performing
    server, or different access method.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For example, HTTP is more resistant to network delays or error, while FTP is
    somewhat faster. Also, not all mirrors support both methods, so if you change
    servers, you may need to change the access method as well.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of non-Debian repositories that contain software that is
    not included in the standard Debian release. Usually, this is due to licensing
    issues, or because development takes place outside of the Debian Project policies
    and there is no sponsor to integrate it into Debian. Some of the more useful ones
    are as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '**Deb Multimedia**: As it says, this is primarily a multimedia package that
    can''t be included in the normal distribution'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Webmin**: This is a web-based system administration software'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Oracle**: This provides Oracle Express software'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Skype**: This provides the Skype software'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MongoDB**: This is a software from the NoSQL MongoDB project'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As an example, the following is a `/etc/apt/sources.list.d/webmin.list` file
    for the Webmin archive just mentioned:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Generally, sites that offer such repositories will include instructions for
    configuring the sources list file for their repository.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The significance of the release name
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the more subtle changes often made, other than adding non-Debian repositories,
    has very important implications. Note that the release name in most of the lines
    from the previous Debian release `sources.list` is wheezy. This means that the
    packages available through the package managers will always be from the Debian
    7 release. Some administrators change the release name to stable. This has both
    advantages and disadvantages.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: One advantage is that, when a new major version is released, your package managers
    will immediately recognize this and update package lists and dependencies accordingly.
    The disadvantage related is that major releases involve major changes in package
    dependencies. While package managers can handle this, such major changes usually
    result in many new packages being installed to satisfy new dependencies, many
    old ones being deleted due to changing dependencies or obsolescence, and major
    version changes that often change the way the software behaves. These changes
    can be quite disruptive to server operation, or to developers' or users' habits.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Best practice to ensure stability is to leave the official release name in place
    until you are ready to upgrade to the next release. Then change the name in the
    package manager configuration, and perform a manual upgrade.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Selecting packages
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have the repositories that you want configured, you need to retrieve
    information about what is in the repositories. This includes not only package
    lists, but package descriptions, contents, and dependencies. This is done by updating
    your package cache, after which you can browse, select, install, upgrade, and
    delete packages.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Updating your package cache
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The package information is updated simply by the refresh menu entry in Synaptic,
    or the aptitude or apt-get `update` command to update the package information
    cache. This should be done regularly to ensure that the information you have on
    available packages is current. Once you have the repositories configured and have
    updated the package information cache, you can select and install software from
    any or all of them as desired. There are two basic methods for selecting packages.
    command line and selection lists.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Command-line selection
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the simplest and fastest method to install one or a few packages and
    their dependencies, but it requires that you know what packages you want to install.
    There are several utilities that can be used to search package names and descriptions,
    which will provide you with the means to find the proper package names. The most
    common of these is `apt-cache`. Once you know what package or packages you want
    to install, you can use apt-get or the command line format of aptitude or dselect
    to quickly download and install the packages.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Selection lists
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both aptitude and dselect provide a basic, interactive interface as well. You
    can navigate through a list of available packages, classified according to sections,
    or you can search for packages using a number of criteria. The interface is based
    on the simple curses library, and can seem cumbersome at times, although it is
    an improvement over the command line utilities mentioned previously. One advantage
    of these interfaces (as well as the command line utilities) is that they can be
    used in a terminal environment and do not require a graphic desktop environment
    be installed. They are frequently used on high-performance servers where a graphic
    desktop environment is not installed for security or performance reasons.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, Synaptic provides a full GUI interface for browsing, searching,
    and selecting packages, as well as configuring repositories, selecting installation
    options, and providing information on available and installed packages. It requires
    a graphic desktop environment, such as GNOME or KDE, in order to operate.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Synaptic can be run remotely, over a Secure Shell connection, from a system
    that does have a graphic window manager installed. Some administrators install
    Synaptic on servers without graphical desktops and use it in this manner to avoid
    security or performance issues of graphic environments on the server itself.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Meta packages
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most useful package types is called **meta packages**. These are
    packages that contain no software themselves, but that require other packages
    to be installed, and thus provide a unified set of software for a particular purpose.
    This works because, although no actual software is in the meta package, the package
    manager will select and install all of the required dependent packages, providing
    a complete set of features in a single, easy installation step.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Frequently, there are multiple packages with slightly different names that
    install a slightly different set of dependencies. A good example is GNOME. You
    can install the GNOME meta package, which will provide a complete GNOME installation,
    including many extras. Or, you can elect to install `gnome-core`, which provides
    only the basic desktop environment, and select from any of the additional packages
    that provide additional features and functions, such as:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: evolution (e-mail software, similar to Outlook)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gnome-documents (document management features)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gnome-games
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gnome-media (multimedia applications)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gnome-media（多媒体应用）
- en: libreoffice-gnome (office suite) and others
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: libreoffice-gnome（办公套件）和其他
- en: One minor problem with meta packages is that there is no easy way to search
    for them. Many do have 'meta' in their descriptions, which can facilitate some
    searches, but this is not universally true. The GNOME packages mentioned previously
    do not follow this convention as of Debian 7\. Nevertheless, they are often fairly
    obvious, and not too difficult to find.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 元软件包的一个小问题是，找不到它们的简便方法。许多元软件包在其描述中确实包含“meta”字样，这可以帮助某些搜索，但这并不总是适用。前面提到的GNOME软件包在Debian
    7中就没有遵循这一惯例。不过，它们通常还是比较明显，且不难找到。
- en: A word about dependency resolution
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于依赖项解决
- en: dselect, APT, aptitude, and Synaptic, all provide some form of automatic dependency
    resolution. In rare cases, a dependency can't be resolved automatically, and user
    intervention is required. aptitude will calculate alternatives and ask the user
    to select from them. APT and Synaptic generally require the user to add packages
    to the command line or selection list manually.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: dselect、APT、aptitude和Synaptic都提供某种形式的自动依赖解决。在少数情况下，依赖无法自动解决，需要用户干预。aptitude会计算出替代方案并要求用户选择。APT和Synaptic通常需要用户手动将软件包添加到命令行或选择列表中。
- en: Such problems generally only occur in the testing and unstable releases, where
    software dependencies are constantly updated and some may not completely resolve
    until all of the software involved has been updated and placed in the release.
    However, one common source of this problem occurs in the stable release as well,
    and is due to a dependency on a **virtual package**.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这种问题通常只出现在测试版和不稳定版本中，软件依赖项会不断更新，某些问题可能直到所有相关软件都已更新并放入发布版后才会完全解决。然而，这个问题也常见于稳定版，原因是依赖于**虚拟软件包**。
- en: A virtual package is not the name of an actual package, but the name of a library
    or function that any one of a number of packages can provide. Since there are
    usually multiple packages that can satisfy the dependency, the user must choose
    one to manually install, after which the remainder of the original dependencies
    can be satisfied automatically. This rarely occurs during a standard upgrade,
    and almost never during a distribution upgrade, where such virtual packages are
    selected automatically.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟软件包并不是实际软件包的名称，而是一个库或功能的名称，多个软件包都可以提供这个功能。由于通常有多个软件包可以满足该依赖项，用户必须手动选择一个进行安装，之后其余的原始依赖项可以自动解决。这种情况在标准升级过程中很少发生，在发行版升级过程中几乎从不发生，因为这些虚拟软件包会自动选择。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In general, you will only see this problem, and then rarely, when installing
    single packages manually.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你只会在手动安装单个软件包时，且很少发生此问题。
- en: Removing packages
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除软件包
- en: Removing packages is also handled by any of the package managers. Something
    to be aware of, however, is that apt-get and Synaptic do not automatically remove
    dependencies after the package that depends on them is removed. The command `apt-get
    autoremove` should be used to do this, no matter which package manager was used
    for installation and removal. aptitude does this automatically.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 删除软件包也可以通过任何软件包管理工具来处理。然而需要注意的是，apt-get和Synaptic在删除依赖它们的软件包后，不会自动移除这些依赖项。应使用命令`apt-get
    autoremove`来执行此操作，无论是通过哪个包管理器安装和删除软件包。aptitude会自动完成这一操作。
- en: Keeping current
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持最新
- en: After installing the software you need for your system, it is good practice
    to check for updates at regular intervals. In particular, security updates are
    released as soon as possible after a security flaw in any Debian software is identified.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装完系统所需的软件后，定期检查更新是一种良好的做法。特别是，安全更新会在发现Debian软件的安全漏洞后尽快发布。
- en: It is easy to update a Debian system. After updating the package cache (see
    the previous section on *Updating your package cache*) so that it holds current
    information on all software in the repositories, the Synaptic mark all upgrades
    menu item, or the apt-get or aptitude `upgrade` command will update all software
    with any newer versions available.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 更新Debian系统很简单。在更新软件包缓存（参见前一节关于*更新你的软件包缓存*）以便它包含仓库中所有软件的最新信息后，可以通过Synaptic中的“标记所有升级”菜单项，或使用apt-get或aptitude的`upgrade`命令来更新所有有新版本的软件。
- en: Automatic updates
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动更新
- en: It is possible to perform automatic, unattended updates to a system, but there
    are some potential problems. Setting it up is quite simple. Just install the unattended-upgrades
    package. If you aren't asked during installation if you want to enable automatic
    security upgrades, run the command `dpkg-reconfigure -plow unattended-upgrades`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 可以执行自动、无人值守的系统更新，但也存在一些潜在的问题。设置过程非常简单，只需安装`unattended-upgrades`软件包。如果在安装过程中没有询问是否启用自动安全升级，可以运行命令`dpkg-reconfigure
    -plow unattended-upgrades`。
- en: Generally, only security upgrades will be automatically installed, which will
    minimize potential problems, which include modified dependencies and changes that
    modify how the software is configured or how it operates. It is possible to allow
    other upgrades by modifying the configuration file in `/etc/apt/apt.conf.d/50unattended-upgrades`.
    The file is commented to help identify the modifications desired, generally just
    removing the `//` in front of the lines you want to enable. Note that enabling
    anything other than security updates can result in errors (when dependency issues
    are encountered) or system disruption (when the upgrade modifies software behavior
    or configuration). This is especially true if the stable release name is used,
    which can result in very major changes when a new stable version is released.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，只有安全升级会被自动安装，这将最大限度地减少潜在问题，包括修改过的依赖项和修改软件配置或操作方式的变化。可以通过修改`/etc/apt/apt.conf.d/50unattended-upgrades`中的配置文件来允许其他升级。该文件中有注释，帮助识别所需的修改，通常只需要去掉希望启用的行前面的`//`。请注意，启用安全更新以外的任何内容可能会导致错误（当遇到依赖问题时）或系统中断（当升级修改软件行为或配置时）。特别是使用稳定版名称时，当发布新稳定版时，可能会带来非常大的变化。
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Best practice is to allow automatic installation of security upgrades only (use
    the default configuration). The package information cache for all packages will
    be updated in any case, so you can manually upgrade the rest of the packages periodically,
    allowing you to address any unusual upgrade issues as they arise.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是只允许自动安装安全升级（使用默认配置）。所有软件包的信息缓存无论如何都会更新，因此你可以定期手动升级其他软件包，以便在出现任何异常升级问题时进行处理。
- en: Foreign packages
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部软件包
- en: What do you do when a package doesn't exist in Debian? There are several options.
    One mentioned previously is to add non-Debian repositories to the repository configuration.
    After a Synaptic refresh, apt-get, or aptitude `update`, all of the package information
    in the repository will be available to the Debian package managers.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 Debian 中没有某个软件包，应该怎么办？有几个选项。之前提到的一个方法是将非 Debian 仓库添加到仓库配置中。在进行 Synaptic
    刷新、apt-get 或 aptitude `update` 后，仓库中的所有软件包信息将可以被 Debian 包管理器访问。
- en: If, however, the software isn't included in any repository, there are a couple
    of options available.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果该软件不包含在任何仓库中，仍然有几种可用的选项。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There is actually one additional option: just install such software from its
    original source. This technique is not recommended because it places the software
    completely outside of the package management system. Future system upgrades that
    involve required libraries can cause the software to behave strangely or even
    break completely, and finding the reason can be quite frustrating. This technique
    should be used as a last resort only.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 其实还有一个额外的选项：直接从原始来源安装该软件。这种方法不推荐使用，因为它将软件完全置于包管理系统之外。涉及必需库的未来系统升级可能会导致软件出现异常行为，甚至完全损坏，且查找原因可能非常令人沮丧。此方法应仅作为最后手段使用。
- en: Alien
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Alien
- en: If the package exists in some other Linux distribution, it can often be converted
    to a Debian package. This is done using a package called **alien**. Alien provides
    commands to convert between a number of package formats (including Red Hat RPM,
    Stampede SLP, Slackware TGZ, Solaris PKG, and Debian DEB).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个软件包存在于其他 Linux 发行版中，通常可以将其转换为 Debian 包。这可以通过一个名为**alien**的软件包来完成。Alien 提供了命令来转换多种包格式（包括
    Red Hat RPM、Stampede SLP、Slackware TGZ、Solaris PKG 和 Debian DEB）。
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Before using alien, note the warnings in the man page.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 alien 之前，请注意查看手册页中的警告。
- en: In general, the conversion itself is fairly straightforward. Although the results
    cannot be guaranteed, the converted package often will install okay under Debian.
    Any problems that do occur are most likely to be caused by different library dependency
    names, or even differences in software level identification.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: All is not lost when this happens, however. Alien can perform a partial conversion,
    essentially stopping at the point where it has created the temporary directory
    from which it normally builds the Debian package. You can then go into the directory
    and make the necessary modifications, and then complete the build manually.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Manual builds
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is also possible to build Debian packages yourself, either from a partial
    alien conversion (as previously discussed), or from scratch using the original
    software. The procedure can vary from simple to complex, depending on what the
    package is to provide, and is well covered in the Debian maintainer's guide and
    the Debian policy manual, both available online or as installable packages in
    Debian, and in many other online resources. A good online starting place is the
    Debian packaging Wiki page at [https://wiki.debian.org/HowToPackageForDebian](https://wiki.debian.org/HowToPackageForDebian).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Manual builds, either from scratch or from a partial alien conversion, are the
    recommended way to handle software that cannot be obtained in standard Debian
    format.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Details vary greatly, depending on the actual software involved. Generally,
    a package is built from source code, but it is also possible to build a package
    from a binary only software release as well. The general procedure for this is
    as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Obtain the source (or binary files) and place in an appropriate package building
    directory.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the necessary Debian packaging files, which include additional documentation
    as necessary, optional script files specific to Debian packages, files to control
    the package building process, and files required by Debian package managers.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the build. If necessary, add patches to correct any problems in packaging,
    or that are required for the software to compile or run properly in a Debian environment.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 2 and 3 until the final product installs and runs on your distribution.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The packages available to Debian developers are included in the distribution
    for anyone to use. The primary ones used in building your own packages are:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: build-essential (packages essential for building Debian packages)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dpkg-dev (package development tools)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fakeroot (allows users to build as if they were the root user)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dh-make (tools to create files in the debian package build directory)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: debhelper (helper programs for the debian/rules file)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cdbs (optional, additional helper programs for the debian/rules file)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: quilt (debian package patch management)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is all but impossible to give any general example, as every package will
    differ in all but the first step. However, there are many good examples and tutorials
    available online, and the full package source of all Debian packages included
    in the distribution is available for anyone to examine and learn from.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading your system
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, it is simple to update your system. The commands (or
    menu items) for upgrading your system to the next official release are different
    from the standard updating commands. The apt-get command `dist-upgrade` or the
    aptitude `full-upgrade` will perform the necessary special calculations to upgrade
    to the next major distribution release after the package information cache has
    been updated (either using the normal `update` command if you have configured
    the release name as stable, or after changing to the new release name and executing
    the `update` command). The reason for the special commands is that there are major
    changes in package dependencies between official releases, and the way some software
    is configured, as well as the removal of obsolete packages, all of which require
    special calculations not involved in a normal package upgrade.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Synaptic can also handle a full distribution upgrade, but instead of a different
    command, it handles such upgrades when 'smart upgrade' is set in Preferences instead
    of 'default upgrade'.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Prior to the upgrade
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Read the release notes!** This can''t be emphasized enough. The Debian developers
    are careful to include all the important details on what has changed between releases,
    and any special steps required prior to and after the upgrade process.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to handle a major upgrade: all-at-once, and a little at
    a time (which we''ll refer to as a partial upgrade). The all-at-once upgrade basically
    involves a single command that updates all packages. The partial upgrade method
    involves selecting a group of packages and updating them and their dependencies.
    This reduces the dependency calculations to a more easily handled subset. Generally,
    one selects one of the meta packages, such as GNOME or Apache2, or a selected
    set of packages to update, and uses the `install` command in either apt-get or
    aptitude, or selects the packages in dselect, aptitude, or Synaptic. After they
    are upgraded, the next set is chosen and updated, until all packages have been
    updated, along with any new dependencies or removals required. At some point,
    after the majority of software has been upgraded, the remainder of the upgrade
    can be handled all at once.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a subset of packages is fairly simple. The apt-get `dist-upgrade` command
    and aptitude `full-upgrade` command will provide information on what will be added,
    upgraded, and removed and ask you to confirm the selection. At this point, you
    can tell them not to perform the upgrade, then review the packages proposed for
    upgrading, and select one or a few to use with the apt-get or aptitude command
    line `install` command (which upgrades already installed packages). A similar
    procedure works with Synaptic.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One way to ease the upgrade process is to perform a standard package upgrade
    first. This will perform the simpler, standard package upgrades that don't require
    major changes in dependencies. Once this is done, the full distribution upgrade
    will involve fewer packages
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: During the upgrade
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've selected the packages to upgrade (or are performing an all at once upgrade),
    and started the process. The first thing to note is what packages are going to
    be removed. If one or more of them appear to be packages you need, cross-check
    them with the packages being installed to see if they are being replaced by a
    new package with similar functions. If they are not, make a note to follow the
    upgrade with a separate installation of whatever packages are required.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: During a distribution upgrade, the system can generally remain in operation,
    although there will be slight disruptions when a package requires certain services
    to be restarted or libraries to be loaded.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These disruptions are more severe than a normal upgrade, particularly in cases
    where a package is removed and replaced with a different one to fulfill the same
    function, or removed because it is obsolete. Therefore, you may want to inform
    users prior to the upgrade, and keep system activity to a minimum.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: The next thing to watch for is the upgrade notes. Major changes are in how some
    software works are displayed (and e-mailed to the root account for later checking
    as well) in order to notify the installer of necessary post-installation steps
    to be taken.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when the administrator has made changes to the configuration of a package,
    the upgrade process will notify him/her of the non-default configuration and ask
    for help in resolving the differences. This involves leaving the current local
    version in place, replacing it with the developers' version, or pausing the installation
    so the differences can be examined and resolved manually.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Often there are new options or defaults that should be added to the old configuration.
    Best practice is to either resolve the changes immediately, or keep the old configuration
    and cross-check it later with the new default configuration (which is placed in
    the same directory with a modified name to keep it inactive but available for
    just this reason).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: After the upgrade
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the distribution upgrade is complete, there are still a few steps that
    should be taken. First, if the configuration file issues weren't resolved during
    installation, now is the time to do this. The new file is in the same place as
    the old one, with an added `dpkg-new` extension. If the installer selected the
    developers' version, the old configuration is there with a `dpkg-old` extension.
    Either way, the administrator can check them for differences and make the necessary
    changes.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Next, if there are major changes in software operation, any applications that
    use the software should be modified, or the configuration updated to recreate
    the old behavior if possible. A good example of this issue is major changes to
    how PHP works, which often necessitates re-coding web pages that used the changed
    features or modifying the configuration when it supports operation in a legacy
    mode. Other major changes may affect users, such as the change from GNOME 2 to
    GNOME 3, which involves a major change in the user experience. Also, any post-installation
    steps noted in the release notes should be taken.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The package managers in Debian make it easy to upgrade software packages, and
    even upgrade to a new, major release level. Upgrades don't require major server
    downtime, although if they involve major software changes that modify how the
    software is configured or behaves, additional work may be required after the upgrade
    to return service to normal. Non-Debian repositories can be added so that the
    package managers can update non-Debian software just as easily as official Debian
    packages. If software isn't available in Debian format, it can be packaged using
    the same tools Debian developers use, so that Debian package managers will handle
    it as well.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Usually after an installation or upgrade, there are additional steps that must
    be taken. The major one is package configuration, which we will cover in the next
    chapter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL

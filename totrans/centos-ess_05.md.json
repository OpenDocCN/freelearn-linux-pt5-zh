["```\n$ git clone https://github.com/rimusz/coreos-essentials-book/\n\n```", "```\n$ cd coreos-essentials-book/chapter5/Local_Development_VM\n$ ./install_local_dev.sh\n\n```", "```\n$ cd ~/coreos-dev-env\n$ ls\nbin \nfleet \nshare \nvm \nvm_halt.sh \nvm_ssh.sh \nvm_up.sh\n\n```", "```\n        # Set the environment variable for the docker daemon\n        export DOCKER_HOST=tcp://127.0.0.1:2375\n        # path to the bin folder where we store our binary files\n        export PATH=${HOME}/coreos-dev-env/bin:$PATH\n        # set etcd endpoint\n        export ETCDCTL_PEERS=http://172.19.20.99:2379\n        # set fleetctl endpoint\n        export FLEETCTL_ENDPOINT=http://172.19.20.99:2379\n        export FLEETCTL_DRIVER=etcd\n        export FLEETCTL_STRICT_HOST_KEY_CHECKING=false\n        ```", "```\n$ cd ~/coreos-dev-env\n$ ./vm_up.sh\n\n```", "```\n$ cd fleet\n$ fleetctl start nginx.service\n\n```", "```\n$ fleetctl status nginx.service\n\n```", "```\n$ cat ~/coreos-dev-env/fleet/nginx.service\n\n[Unit]\nDescription=nginx\n\n[Service]\nUser=core\nTimeoutStartSec=0\nEnvironmentFile=/etc/environment\nExecStartPre=-/usr/bin/docker rm nginx\nExecStart=/usr/bin/docker run --rm --name nginx -p 80:80 \\\n -v /home/core/share/nginx/html:/usr/share/nginx/html \\\n nginx:latest\n#\nExecStop=/usr/bin/docker stop nginx\nExecStopPost=-/usr/bin/docker rm nginx\n\nRestart=always\nRestartSec=10s\n\n[X-Fleet]\n```", "```\n    $ cd coreos-essentials-book/chapter5/Test_Staging_Cluster\n    $ ls\n    cloud-config\n    create_cluster_control.sh\n    create_cluster_workers.sh\n    files\n    fleet\n    install_fleetctl_and_scripts.sh\n    settings\n\n    Let's check \"settings\" file first:\n    $ cat settings\n    ### CoreOS Test/Staging Cluster on GCE settings\n\n    ## change Google Cloud settings as per your requirements\n    # GC settings\n\n    # CoreOS RELEASE CHANNEL\n    channel=beta\n\n    # SET YOUR PROJECT AND ZONE !!!\n    project=my-cloud-project\n    zone=europe-west1-d\n\n    # ETCD CONTROL AND NODES MACHINES TYPE\n    #\n    control_machine_type=g1-small\n    #\n    worker_machine_type=n1-standard-1\n    ##\n\n    ###\n    ```", "```\n    # SET YOUR PROJECT AND ZONE !!!\n    project=my-cloud-project\n    zone=europe-west1-d\n    ```", "```\n    $ ./create_cluster_control.sh\n\n    ```", "```\n    #!/bin/bash\n    # Create TS cluster control\n\n    # Update required settings in \"settings\" file before running this script\n\n    function pause(){\n    read -p \"$*\"\n    }\n\n    ## Fetch GC settings\n    # project and zone\n    project=$(cat settings | grep project= | head -1 | cut -f2 -d\"=\")\n    zone=$(cat settings | grep zone= | head -1 | cut -f2 -d\"=\")\n    # CoreOS release channel\n    channel=$(cat settings | grep channel= | head -1 | cut -f2 -d\"=\")\n    # control instance type\n    control_machine_type=$(cat settings | grep control_machine_type= | head -1 | cut -f2 -d\"=\")\n    # get the latest full image name\n    image=$(gcloud compute images list --project=$project | grep -v grep | grep coreos-$channel | awk {'print $1'})\n    ##\n\n    # create an instance\n    gcloud compute instances create tsc-control1 --project=$project --image=$image --image-project=coreos-cloud \\\n     --boot-disk-size=10 --zone=$zone --machine-type=$control_machine_type \\\n     --metadata-from-file user-data=cloud-config/control1.yaml --can-ip-forward --tags tsc-control1 tsc\n\n    # create a static IP for the new instance\n    gcloud compute routes create ip-10-200-1-1-tsc-control1 --project=$project \\\n     --next-hop-instance tsc-control1 \\\n     --next-hop-instance-zone $zone \\\n     --destination-range 10.200.1.1/32\n\n    echo \" \"\n    echo \"Setup has finished !!!\"\n    pause 'Press [Enter] key to continue...'\n    # end of bash script\n\n    ```", "```\n$ cat control1.yaml\n#cloud-config\n\ncoreos:\n\netcd2:\n name: control1\n initial-advertise-peer-urls: http://10.200.1.1:2380\n initial-cluster-token: control_etcd\n initial-cluster: control1=http://10.200.1.1:2380\n initial-cluster-state: new\n listen-peer-urls: http://10.200.1.1:2380,http://10.200.1.1:7001\n listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n advertise-client-urls: http://10.200.1.1:2379,http://10.200.1.1:4001\n fleet:\n metadata: \"role=services,cpeer=tsc-control1\"\n units:\n - name: 00-ens4v1.network\n runtime: true\n content: |\n [Match]\n Name=ens4v1\n\n [Network]\n Address=10.200.1.1/24\n - name: etcd2.service\n command: start\n - name: fleet.service\n command: start\n - name: docker.service\n command: start\n drop-ins:\n - name: 50-insecure-registry.conf\n content: |\n [Unit]\n [Service]\n Environment=DOCKER_OPTS='--insecure-registry=\"0.0.0.0/0\"'\nwrite_files:\n - path: /etc/resolv.conf\n permissions: 0644\n owner: root\n content: |\n nameserver 169.254.169.254\n nameserver 10.240.0.1\n#end of cloud-config\n\n```", "```\n$ ./create_cluster_workers.sh\n\n```", "```\n$ cat test1.yaml\n#cloud-config\n\ncoreos:\n etcd2:\n listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n initial-cluster: control1=http://10.200.1.1:2380\n proxy: on\n fleet:\n public-ip: $public_ipv4\n metadata: \"role=worker,cpeer=tsc-test1\"\n units:\n - name: etcd2.service\n command: start\n - name: fleet.service\n command: start\n - name: docker.service\n command: start\n drop-ins:\n - name: 50-insecure-registry.conf\n content: |\n [Unit]\n [Service]\n Environment=DOCKER_OPTS='--insecure-registry=\"0.0.0.0/0\"'\n# end of cloud-config\n\n```", "```\n$ ./install_fleetctl_and_scripts.sh\n\n```", "```\n$ cd ~/coreos-tsc-gce/bin\n$ cat set_cluster_access.sh\n#!/bin/bash\n\n# Setup Client SSH Tunnels\nssh-add ~/.ssh/google_compute_engine &>/dev/null\n\n# SET\n# path to the cluster folder where we store our binary files\nexport PATH=${HOME}/coreos-tsc-gce/bin:$PATH\n# fleet tunnel\nexport FLEETCTL_TUNNEL=104.155.61.42 # our control1 external IP\nexport FLEETCTL_STRICT_HOST_KEY_CHECKING=false\n\necho \"etcd cluster:\"\netcdctl --no-sync ls /\n\necho \"list fleet units:\"\nfleetctl list-units\n\n/bin/bash\n\n```", "```\n$ ./set_cluster_access.sh\n\n```", "```\n$ cd ~/coreos-tsc-gce/fleet\n\n```", "```\n$ fleetctl submit *.service\n\n```", "```\n$ fleetctl start *.service\n\n```", "```\n$ fleetctl status *.service\n\n```", "```\n$ fleetctl list-units\n\n```", "```\n$ cd ~/coreos-tsc-gce/fleet\n$ cat test1_webserver.service\n\n```", "```\n[Unit]\nDescription=nginx\n\n[Service]\nUser=core\nTimeoutStartSec=0â€©\nEnvironmentFile=/etc/environment\nExecStartPre=-/usr/bin/docker rm nginx\nExecStart=/usr/bin/docker run --rm --name test1-webserver -p 80:80 \\\n-v /home/core/share/nginx/html:/usr/share/nginx/html \\\nnginx:latest\n#\nExecStop=/usr/bin/docker stop nginx\nExecStopPost=-/usr/bin/docker rm nginx\n\nRestart=always\nRestartSec=10s\n[X-Fleet]\nMachineMetadata=cpeer=tsc-test1 # this where our fleet unit gets scheduled\n\n```", "```\n    [X-Fleet]\n    MachineMetadata=cpeer=tsc-test1\n\n    ```"]
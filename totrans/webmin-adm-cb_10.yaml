- en: Chapter 10. Running a PostgreSQL Database Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the PostgreSQL database server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locating the PostgreSQL server configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing access to PostgreSQL over the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the PostgreSQL server over an SSH tunnel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating users and granting permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a backup of your database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing custom SQL commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restoring a database from backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the structure of your database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing records in a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing phpPgAdmin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PostgreSQL is a powerful open source relational **database management system**
    (**DBMS**). It features a powerful type system and advanced programming functions.
    This allows it to store and perform calculations on complex values, such as geographic
    coordinates, JSON objects, and arrays.
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL uses a distributed client-server architecture, which means that the
    database server and client applications can run on separate machines. If the client
    and server are running on the same system, they can communicate using Unix sockets;
    otherwise, they communicate over the network by using TCP sockets. The Postgres
    server uses port number 5432 by default, but this setting can be changed if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unix domain sockets are channels used for inter-process communication. Different
    programs running on the same machine can read and write information to a socket,
    enabling communication between the programs. Unix sockets are represented as nodes
    of the filesystem, so you can find a socket by listing the contents of a directory
    in which it was created.
  prefs: []
  type: TYPE_NORMAL
- en: The PostgreSQL DBMS is very popular and most operating system distributions
    provide packages for its easy installation. Each Postgres server hosts a database
    **cluster** that consists of a collection of databases, associated configuration
    files, and running processes. On some systems, the cluster must be initiated after
    package installation. Initiation creates the directory structure of the cluster
    and fills it with standard databases. The standard database, `template1`, plays
    a special role, because all new databases are created as its copies by default.
  prefs: []
  type: TYPE_NORMAL
- en: Installation of the Postgres system involves the creation of a special user,
    usually named `postgres`. This user has complete administrative control over your
    databases, and Webmin will run most database commands and scripts as this user.
  prefs: []
  type: TYPE_NORMAL
- en: Webmin allows you to perform many tasks related to the running of the Postgres
    database server. In this chapter, we will demonstrate how Webmin can help you
    install PostgreSQL, set up access to the server over a network, manage user accounts,
    create databases, and edit their structure and data. We'll also demonstrate how
    to automatically back up databases and restore backup files. If you find that
    you need an even more advanced web-based management tool, we will demonstrate
    how to set up phpPgAdmin on your server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the PostgreSQL database server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most operating systems that come with a package management solution for open
    source software make PostgreSQL packages available for installation. In this recipe,
    we will install PostgreSQL from a package and set it up on your system. Installing
    the server package automatically installs the PostgreSQL command-line client package,
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to install the PostgreSQL database server:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the steps described in the *Installing software packages* recipe in [Chapter
    1](ch01.html "Chapter 1. Setting Up Your System"), *Setting Up Your System*, to
    find and install the PostgreSQL database server package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In most package repositories, the PostgreSQL server package is simply named
    `postgresql-server`. If your distribution allows you to select among different
    versions of PostgreSQL, the package names will contain version numbers such as
    `postgresql-9.1` or `postgresql93-server`. Pick the package with the latest version
    unless you have reasons to stick with an older one.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Refresh Modules** link at the bottom of Webmin's main menu and reload
    the browser to update the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**. You should see a screen
    that lists installed databases. It should include the default databases such as
    `postgresql` and `template1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you do not see the list of databases, but instead a message which indicates
    that the database system has not yet been initialized, click the **Initialize
    Database** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the bottom of the screen, if you see the message, **Warning: The Perl modules
    DBI and DBD::Pg are not installed on your system**, click the link and follow
    Webmin''s instructions to install the missing Perl modules.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to **System** | **Bootup and Shutdown** and verify that the init script,
    `postgresql`, is set to start at boot. If it isn't, select its checkbox and click
    the **Start Now and On Boot** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin helps you find and install the `postgresql-server` package from your
    distribution's repositories. The package installs the database server, client,
    and an init script that starts the server during system boot.
  prefs: []
  type: TYPE_NORMAL
- en: Before Postgres can be used to manage databases, a new cluster must be created.
    A PostgreSQL cluster is a collection of databases managed by a single server.
    Creating the cluster involves the creation of a directory in which the database
    files will be stored, and filling it with a few standard databases. The standard
    database named `template1` plays a special role, because all new databases in
    the cluster will be made by copying this template.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your package installation script does not initialize a database cluster
    for you, you can ask Webmin to do it by clicking the **Initialize Database** button.
    This runs the following subcommand of the init script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to allow other computers to access your databases, take a look at
    the recipe, *Allowing access to PostgreSQL over the network*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locating the PostgreSQL server configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main configuration file of the PostgreSQL server is usually named `postgresql.conf`,
    and is stored in the database cluster data directory by default. Various system
    distributions move this configuration outside of the data directory and place
    it in a different location, for example, in the `/etc/` directory. In this recipe,
    we will demonstrate how to find the `postgresql.conf` and change it to modify
    the server's configuration. Webmin does not assist you in the modification of
    the basic settings of PostgreSQL, so you will need to edit the configuration file
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that the PostgreSQL server is installed and running, and that you
    are able to connect to it via Webmin before starting. The recipe, *Installing
    the PostgreSQL database server*, provides more information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to locate PostgreSQL''s main configuration file on your
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon of the default database, `postgres`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Execute SQL** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following SQL command in the provided text area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Execute** button and you will see the output of the SQL command,
    which provides the full path to the main server configuration file, as shown in
    the following screenshot:![How to do it...](img/5849OS_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When an init script starts the PostgreSQL server, it may specify the location
    of the database cluster's data directory or the location of the server's main
    configuration file (customarily called `postgresql.conf`). By default, the main
    configuration file is stored inside of the data directory, but package maintainers
    often move it to a different location (such as `/etc/`) to keep system configuration
    files in order. The SQL command, `SHOW config_file;`, can be used to check where
    the main configuration file is located.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The location of other configuration files and the values of other settings can
    also be displayed using the SQL `SHOW` command.
  prefs: []
  type: TYPE_NORMAL
- en: Determining location of other configuration files and data files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the following commands to check where other configuration files are located:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Setting | Command |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Main configuration file (`postgresql.conf`) | `SHOW config_file;` |'
  prefs: []
  type: TYPE_TB
- en: '| Data directory | `SHOW data_directory;` |'
  prefs: []
  type: TYPE_TB
- en: '| Host-based access configuration file (`pg_hba.conf`) | `SHOW hba_file;` |'
  prefs: []
  type: TYPE_TB
- en: '| Identity mapping file (`pg_ident.conf`) | `SHOW ident_file;` |'
  prefs: []
  type: TYPE_TB
- en: '| Directory where the Unix-domain socket will be created | `SHOW unix_socket_directory;`
    |'
  prefs: []
  type: TYPE_TB
- en: Checking values of other settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also reveal the values of all settings by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Allowing access to PostgreSQL over the network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Programs that access PostgreSQL databases, which are called clients, may be
    running on the same machine as the server. In this case, the client and server
    will communicate most efficiently using a Unix-domain socket, a channel of inter-process
    communication accessed through the filesystem such as a file or directory. Access
    to a socket is controlled by filesystem permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Other client programs may be able to communicate only over TCP network sockets.
    These clients may connect to the local server using the loopback interface and
    IP address of `127.0.0.1`.
  prefs: []
  type: TYPE_NORMAL
- en: However, if a client program is located on a machine other than the server,
    then communication between them must take place over the network using the TCP
    protocol. There are a number of ways to set up network connections for PostgreSQL.
    The most efficient but least secure method is to use a direct unencrypted connection
    between the client and server. This method has the drawback that unencrypted information
    could potentially be eavesdropped upon or even modified in transit over the network.
    Because database systems are usually designed to be as efficient as possible,
    this type of communication is used often, but should only be deployed inside of
    a secure network. We will describe how to enable this type of communication in
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to make network access to your PostgreSQL server more secure, you can
    choose to encrypt the transferred information using SSL. This prevents eavesdropping
    and man-in-the-middle attacks, but leaves the PostgreSQL server's network port
    exposed and potentially vulnerable to brute-force password guessing and other
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you really need security, for instance, to access your database server over
    the Internet, you should probably choose a third option: send the PostgreSQL traffic
    over an encrypted SSH tunnel. This is the least efficient of the described transmission
    methods, but it generates the fewest security concerns. For more information,
    take a look at the recipe, *Accessing the PostgreSQL server over an SSH tunnel*.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will prepare your PostgreSQL server to accept incoming network
    connections. In order to test the connection, we will need access to two computers
    attached to the same network: the server and a client machine. Make note of the
    server and client''s IP or domain name before starting.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps in this recipe will be divided into five sections:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll instruct PostgreSQL to listen for incoming network connections
    on the standard port (`5432`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we'll create a database user named `dbuser`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we will create a database named `testtdb`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will allow remote access to the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And finally, we will test the setup by connecting to our server from a secondary
    client machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Perform the following steps to instruct the PostgreSQL server to listen for
    network connections:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow steps described in the recipe, *Allowing access to a service through
    the firewall*in [Chapter 3](ch03.html "Chapter 3. Securing Your System"), *Securing
    Your System*, to allow incoming TCP traffic to port 5432 through your firewall.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the location of the PostgreSQL main server configuration file (`postgresql.conf`).
    Refer to the recipe, *Locating the PostgreSQL server configuration files*, for
    detailed instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the `postgresql.conf` file, find the line with the `listen_addresses`
    directive. This line may be commented out (start with the `#` character). Change
    the line to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The most effective way to edit files on your server is to use an editor such
    as Vim or Nano in a terminal session (for example, over SSH). But to make a small
    change in a configuration file, you do not need to leave Webmin. Take a look at
    the *Editing a file on the server* section of the *Managing files and directories
    on the server* recipe from [Chapter 6](ch06.html "Chapter 6. Managing Files on
    Your System"), *Managing Files on Your System*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We must restart the server after making configuration changes. Navigate to **Servers**
    | **PostgreSQL Database Server**, click the **Stop PostgreSQL Server** button,
    and then click the **Start PostgreSQL Server** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your PostgreSQL server will now listen for incoming network connections on port
    5432.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a new user:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server** | **PostgreSQL Users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create new user** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Username** to `dbuser` and assign a strong password in the **Password**
    field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **No** to the **Can create databases?** and **Can create users?** questions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Valid until** to **Forever**:![How to do it...](img/5849OS_10_01a.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a database:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new database** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Database name** to `testdb`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Owned by user** to `dbuser`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Template database** to `template1`:![How to do it...](img/5849OS_10_01b.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to grant a user remote access to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Allowed Hosts** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new allowed host** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Host address** to **Single host** and enter the IP address of the client
    computer (for example, `10.10.10.100`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the client can connect from more then one IP, you can specify a subnet by
    providing a network and netmask or CIDR length. For instance, to grant access
    to all computers in the `10.10.10.*` subnet, you could specify the network as
    `10.10.10.0` and either the netmask as `255.255.255.0` or the CIDR length as `24`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set **SSL connection required?** to **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can shave off a little performance overhead by not using SSL, but you should
    only do that on entirely trusted networks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set **Database** to `testdb`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Users** to **Listed users** and enter `dbuser`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Authentication mode** to **MD5 encrypted password**:![How to do it...](img/5849OS_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll need to restart the server one more time to load the new access configuration.
    Navigate to **Servers** | **PostgreSQL Database Server**, click the **Stop PostgreSQL
    Server** button, and then click the **Start PostgreSQL Server** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On a busy production system it would be a bad idea to restart the database
    server unnecessarily, although that is the sure way of reloading all settings.
    After changing access settings, you don''t really need to restart the server.
    You could send it a `SIGHUP` signal instead. This signal instructs Postgres to
    reload its configuration. On systems equipped with the `pg_ctl` program, this
    can be achieved by issuing the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On systems with the `pg_ctlcluster` command, you will need to specify the server
    version and cluster name, for example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For testing the connection, try to connect to your database server from the
    client machine that uses the IP we specified. If your other machine has the PostgreSQL
    command-line client installed, you can test the connection by typing in this command
    at the terminal. However, substitute `postgresql-host` with the IP or domain name
    of your Postgres server as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If the connection is successful, you should arrive at the PostgreSQL prompt
    (`testdb=#`). Type `\q` and press *Enter* to exit.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to enable network access to the PostgreSQL database server, we needed
    to modify two configuration files. We edited the main configuration file (`postgresql.conf`)
    manually to instruct the server to listen for incoming network connections on
    all network interfaces. The second file, which was edited through Webmin's interface,
    is the host-based authentication configuration (`pg_hba.conf`). This file instructs
    the server which users should be allowed to connect from which network hosts and
    how they should be required to authenticate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Webmin added the following line to `pg_hba.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line instructs the server to accept SSL connections to the `testdb`
    database by the `dbuser` user if the connection originated from the IP address
    `10.10.10.100`. The user should be asked to provide an MD5-encrypted password
    for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another line in `pg_hba.conf` can look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This line instructs the server to accept connections made locally over the Unix
    socket. These connections use the `peer` authentication method, which checks the
    username of the system account running the connecting client program. If the system
    username matches a Postgres account name, then the connection is considered authenticated.
    Password checking is not performed in `peer` authentication. The preceding line
    of code will allow the system account `postgres` to access `all` databases.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to make remote access and management of your PostgreSQL databases more
    secure, you can tunnel your connection over SSH. Take a look at the recipe, *Accessing
    the PostgreSQL server over an SSH tunnel*, for instructions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the PostgreSQL server over an SSH tunnel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your server is hosting a website on the Internet and running a database system
    on the same machine, it is safer to disable remote network access to the database.
    On the other hand, you may still want to manage your databases remotely. You can
    do so by tunneling PostgreSQL traffic over an SSH connection.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most important aspects of a database system is the speed with which
    it can find and return the data that you ask for. Tunneling traffic over SSH will
    add significant overhead to this communication. This solution is great for intermittent
    management tasks, but not suitable as a replacement for a direct connection to
    your database system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you can access the PostgreSQL server through an SSH tunnel, you will
    need to make sure that an allowed hosts entry exists in the `pg_hba.conf` file.
    This entry should allow users from the loopback IP `127.0.0.1` to authenticate
    using MD5-encrypted passwords. Take a look at the recipe, *Allowing access to
    PostgreSQL over the network*, for more information. This is what the appropriate
    line in `pg_hba.conf` would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The server you want to connect to must run both the PostgreSQL server and an
    SSH server. The remote client machine must have an SSH client and PostgreSQL client
    software installed. Make a note of the IP address or domain name of the server
    (`postgresql-host`), the SSH username (`ssh-user`), the PostgreSQL user (`postgresql-user`),
    and the database name (`database-name`). Substitute them in the following recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to create an SSH tunnel for PostgreSQL, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Issue the following command on your client machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a tunnel between port `15000` on your client machine and port `5432`
    of the server. You can now access the remote database by making a PostgreSQL connection
    to your client computer's local port `15000`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Issue the following command on the client system to test the connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The SSH client acts as an intermediary in the communication between the PostgreSQL
    client running on your machine and the remote server. It opens port `15000` on
    the client machine and listens for incoming connections. All packets arriving
    at port `15000` are encrypted and forwarded over SSH to the server. On the server
    side, SSH receives the packets, decrypts them, and sends them to port `5432`.
    Answers are sent back in the opposite direction over the same channel.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many tools that allow you to connect to and control your PostgreSQL
    databases. Webmin provides a wide range of tools to perform most common tasks,
    and these are described in recipes in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An even more powerful web-based solution dedicated to PostgreSQL is phpPgAdmin.
    It is discussed in the recipe, *Installing phpPgAdmin*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about SSH tunnels is provided in the recipe, *Connecting to
    Webmin securely over an SSH tunnel*,in [Chapter 3](ch03.html "Chapter 3. Securing
    Your System"), *Securing Your System*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a new PostgreSQL database through Webmin's interface is very quick
    and simple.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a database:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new database** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a **Database name**, for instance, `new_db`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the user who will have administrative rights to the database from the
    **Owned by user** dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave **Character set encoding** and **Database file path** set to **Default**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Template database** to `template1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin takes the information you provide and creates a new database by connecting
    to the PostgreSQL server and executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Postgres creates the new database by making a copy of a selected template. The
    database, `template1`, is installed by default to serve as a source of default
    settings for newly created databases. If you want new databases to have different
    settings, for instance, character set and collation, you can introduce these changes
    to your template database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to create a database is to execute the `createdb` command as the
    user, `postgres`, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have an initial database structure or contents, you can upload them to
    the server using an SQL commands file. Take a look at the recipe, *Executing custom
    SQL commands*, for more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating users and granting permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating PostgreSQL users through Webmin is very simple. Users can be designated
    as owners of newly created databases and will have complete access and administrative
    rights to the databases they own. Users may also be granted limited privileges
    on specific database tables.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create a new user called `dbuser` and grant selected
    privileges on a table named `dbtable` in a database called `testdb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a user:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server** | **PostgreSQL Users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create new user** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Username** to `dbuser` and set a strong password in the **Password** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **No** to the **Can create databases?** and **Can create users?** questions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Valid** **until** to **Forever**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to grant user privileges on a database table:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Granted Privileges** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the name of the database object for which you want to modify permissions
    (for instance, the table name, `dbtable`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the user, `dbuser`, from the **User** dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark the checkboxes next to the privileges you would like to grant:![How to
    do it...](img/5849OS_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin creates a new database user by connecting to the PostgreSQL server and
    executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to create a database user is to execute the `createuser` command
    as the user `postgres`, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Privileges are assigned to users through the `GRANT` command, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The PostgreSQL manual provides the following definitions of privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Privilege | Definition |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `SELECT` | This allows `SELECT` from any column of the specified table. |'
  prefs: []
  type: TYPE_TB
- en: '| `UPDATE` | This allows `UPDATE` of any column of the specified table. |'
  prefs: []
  type: TYPE_TB
- en: '| `INSERT` | This allows `INSERT` of a new row into the specified table. |'
  prefs: []
  type: TYPE_TB
- en: '| `DELETE` | This allows `DELETE` of a row from the specified table. |'
  prefs: []
  type: TYPE_TB
- en: '| `RULE` | This allows the creation of a rule on the table. |'
  prefs: []
  type: TYPE_TB
- en: '| `REFERENCES` | To create a foreign key constraint, it is necessary to have
    this privilege on both the referencing and referenced tables. |'
  prefs: []
  type: TYPE_TB
- en: '| `TRIGGER` | This allows the creation of a trigger on the specified table.
    |'
  prefs: []
  type: TYPE_TB
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PostgreSQL does not make it easy to grant privileges to an entire database.
    In order to grant the user named `dbuser` access to all the tables defined in
    the `public` schema, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Postgres databases may be subdivided into **schemas**. Each schema contains
    its own set of tables independent of other schemas and may use different user
    privileges. By default, each database contains only one schema called `public`,
    and all tables are assigned to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inserting new objects also requires access to sequence objects, which may be
    granted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, when you add new tables to the database or add another schema,
    you will have to execute the commands again. Another option is to set default
    permissions for the objects by using the `ALTER DEFAULT PRIVILEGES` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the recipe, *Executing custom SQL commands*, for information about
    executing commands.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find more information about granting privileges in the PostgreSQL manual:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.postgresql.org/docs/9.3/static/sql-grant.html](http://www.postgresql.org/docs/9.3/static/sql-grant.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.postgresql.org/docs/9.3/static/sql-alterdefaultprivileges.html](http://www.postgresql.org/docs/9.3/static/sql-alterdefaultprivileges.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a backup of your database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webmin can help you make backups of your PostgreSQL databases. With just a few
    clicks, you can make a backup of any database. Webmin can also help you set cron
    jobs to create backups automatically on a regular schedule.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting, create a directory to store local backup files. You can keep
    these files in `/backups` in the root directory, `/root/backups`, or in any location
    you find convenient.
  prefs: []
  type: TYPE_NORMAL
- en: The backup directory should be owned by and be accessible only to the `postgres`
    user. Take a look at the recipe, *Changing file ownership and permissions,* in
    [Chapter 6](ch06.html "Chapter 6. Managing Files on Your System"), *Managing Files
    on Your System*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: To get general background information about backups, refer to [Chapter 7](ch07.html
    "Chapter 7. Backing Up Your System"), *Backing Up Your System* .
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a backup of a database:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the database you would like to back up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Backup** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Backup file path** to `/backups/database-name.sql`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Backup file format** to **Plain SQL Text**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The backup will be stored as a series of SQL statements in plain text. If you
    are exporting a large database, use the compressed **Custom archive** format.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set **Tables to backup** to **All tables**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Backup Now** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin executes the `pg_dump` command to output a series of SQL commands that
    would be needed to recreate the entire database. The command is run as a user
    who has administrative access to the database. On most systems, the user is called
    `postgres`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The database dump is saved to the specified output file. If you wanted to do
    the same kind of backup in the terminal, you could run a command similar to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin is quite a capable tool to create backups. Here are a few other easily
    accessible functions.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up all databases automatically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Webmin can help you make an automated backup of some or all databases hosted
    by your server. These backups will be executed on a regular schedule by cron.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Backup Databases** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Backup to directory** to the location of your backup directory, for instance,
    `/backups`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Backup file format** to **Custom archive**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The custom archive format is compressed to save the disk space. It's also very
    flexible and allows manual selection of archived items during the restore phase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the **Backup schedule** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Scheduled backup enabled?** to **Yes, at times chosen below**; set **Simple
    schedule** and select **Daily (at midnight)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that many things may be scheduled to start at midnight on your system,
    so you can choose another time if your system resources are limited. Choose a
    more complex schedule by marking the minutes, hours, and days of the month at
    which the job is to be performed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exporting a database table to CSV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Webmin can export a single table of your database into a CSV file that can
    be opened by spreadsheet programs such as Excel, Calc, or Gnumeric:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon of the database, and then click the icon of the table you would
    like to export.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Export as CSV** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **File format** to **CSV with quotes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Include column names in CSV?** to **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Export destination** to **Display in browser**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Export Now** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can easily perform backups to a remote host using a network file sharing
    protocol such as NFS or CIFS. You start by creating a network volume on the remote
    server and then mount the volume on your server. You can then back up to directories
    on the remote system just as easily as if they were stored locally. Take a look
    at [Chapter 6](ch06.html "Chapter 6. Managing Files on Your System"), *Managing
    Files on Your System*, for instructions to set up network file sharing using NFS
    or CIFS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another way to store spare copies of your databases remotely is to send your
    backup directory to a remote server using the SSH protocol. Take a look at recipe,
    *Backing up to a remote host*, in [Chapter 7](ch07.html "Chapter 7. Backing Up
    Your System"), *Backing Up Your System*, for more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing custom SQL commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webmin provides a simple interface to your Postgres database server, which allows
    you to execute arbitrary SQL commands. This can be a useful feature when you want
    to quickly find something in a database or perform a bulk update of multiple rows
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to execute custom SQL commands:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the database you would like to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Execute SQL** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter SQL commands in the text area, for instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/5849OS_10_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with a sortable display of data returned by the `SELECT`
    command. The presented data will come from a temporary `films` table created by
    the first command. Temporary tables are not stored when the client who created
    them disconnects, so you will not see this table in your database later.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin simply passes the SQL commands to the database server. If the command
    returns an error, it will be displayed on screen. If the command returns rows
    of data, Webmin will convert them into an HTML page and display them on screen.
    Please note that Webmin is running as the administrative user (`postgres`), so
    caution should be used when executing commands.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin also allows you to execute the SQL scripts saved in files. These can
    be used to restore databases from plain SQL text backups.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a SQL script from a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to execute a SQL script from a file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the database you would like to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Execute SQL** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Run SQL from file** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you uploaded the file onto the server, select **From local file** and enter
    the file's location in the text box. Otherwise, select **From uploaded file**
    and choose a file from your disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can save the commands that you execute often in an easy-to-use control panel
    in Webmin. Take a look at the recipe, *Creating a panel with the database commands
    that you execute often*, in [Chapter 4](ch04.html "Chapter 4. Controlling Your
    System"), *Controlling Your System*, for more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you find that you need a more full-fledged, web-based PostgreSQL management
    tool, consider installing phpPgAdmin. This is described in the *Install phpPgAdmin*
    recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restoring a database from backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backups of Postgres databases are created using the `pg_dump` command that can
    output a variety of formats. By default, backups are created as plain text SQL
    scripts, but a compressed custom PostgreSQL format is more efficient. Webmin helps
    you to create backups in both of these formats as well as in the `TAR` format.
  prefs: []
  type: TYPE_NORMAL
- en: The method of restoring your database will depend on the file format chosen
    during backup. If you chose the plain SQL text format, then simply running your
    backup script will restore the database. Take a look at the recipe, *Execute custom
    SQL commands,* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: If you chose the custom archive or `TAR` file format, you should use the procedure
    described in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to restore a database from backup:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the database you would like to restore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Restore** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Restore from Uploaded file**, click **Browse**, and choose the file
    from your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the backup file is larger then a few MB, it will be safer to upload the file
    to the server first, before running the restore. Take a look at the recipe, *Uploading
    files to the server*, in [Chapter 6](ch06.html "Chapter 6. Managing Files on Your
    System"), *Managing Files on Your System*, for more information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set **Only restore data, not tables?** to **No**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Delete tables before restoring?** to **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Tables to restore** to **All in backup file**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Restore** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin uploads your file onto your server and then executes the `pg_restore`
    command to load contents of the backup into a database. If you wanted to restore
    a backup in the terminal, you could run a command similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Command-line options are as specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-c`: This option drops database objects before recreating them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d`: This option specifies the database you want to restore'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin can import data into a table of your database from a CSV file that can
    be created by spreadsheet programs such as Excel, Calc, or Gnumeric.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to restore a database table from a properly formatted CSV
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the database to which you would like to import
    data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Execute SQL** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Import text file** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you uploaded the file onto the server, select **From local file** and enter
    the file's location in the text box. Otherwise, select **From uploaded file**
    and choose a file from your disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a table from the **Table to import data into** dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Delete data in table first** to **No**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Ignore duplicate rows** to **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **File format** to **CVS with quotes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will have to select the same format when exporting data from your spreadsheet
    program. Experiment with the other formats if you run into problems.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with an information screen that describes how many rows
    were successfully imported or what errors were encountered.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the structure of your database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Webmin allows you to quickly modify the structure of tables in your PostgreSQL
    database through an easy-to-use interface. In this recipe, we will demonstrate
    how to perform the following list of tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a table in a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a field to a database table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete an index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a table from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For demonstration purposes, we will be using a database called `testdb`. You
    can create a database with this name through Webmin by following steps described
    in the recipe, *Creating a new database*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `testdb` database, we'll create a table called `people` and add a field
    called `name` to the table. We'll then change the name of the field, add a unique
    index, and finally delete the index, field, and table from the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a table in a database:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create Table** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify `people` as the **Table name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide the definition of the field that will be the primary key for this table.
    Fill in the following field definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `id` in **Field name**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Type `serial` in **Data type**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the boxes **Primary key** and **Unique**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Uncheck the boxes **Array** and **Allow nulls**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5849OS_10_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to add a field to a database table:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon representing the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **varchar** from the types dropdown and click the **Add field of type**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the following field definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Field name**: `name`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type width**: `80`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Array field**: `No`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to create an index:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create Index** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Index name** to `unique_name`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the field `name`, in the **Fields in index** list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Index type** to **Unique**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to delete an index:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `unique_name` index.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Delete** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to delete a field:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark the checkbox next to the `name` field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Delete Selected Fields** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to delete a table from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Drop Table** button and confirm on the screen that follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin prepares syntax for the appropriate `CREATE`, `DROP`, and `ALTER TABLE`
    SQL commands to perform all of the preceding actions and executes those commands
    on your PostgreSQL server as the `postgres` user.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you find that you need a more full-fledged, web-based PostgreSQL management
    tool, consider installing phpPgAdmin. This is described in the *Installing phpPgAdmin*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing records in a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webmin allows you to quickly edit data in your PostgreSQL database through a
    simple interface. In this recipe, we will demonstrate how to add, edit, and delete
    records in a database table.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use examples based on the `testdb` database and `people`
    table created in the recipe, *Editing the structure of your database*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll add a record to the `people` table of the `testdb` database; we'll edit
    the same record, and finally delete it to show how to perform these actions in
    Webmin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to add a row to a database table:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **View Data** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add row** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in a numeric `id` and type in a `name` in the text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to edit a row:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **View Data** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark the checkbox next to the record you would like to edit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Edit selected rows** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `name` value in the text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to delete a row:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **PostgreSQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **View Data** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark the checkbox next to the record you would like to edit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Delete selected rows** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin prepares syntax for the appropriate `INSERT`, `UPDATE`, and `DELETE`
    SQL commands to perform the preceding actions and executes those commands on your
    PostgreSQL server as the `postgres` user.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you find that you need a more full-fledged, web-based PostgreSQL management
    tool, consider installing phpPgAdmin. This is described in the *Installing phpPgAdmin*
    recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing phpPgAdmin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: phpPgAdmin is a database administration tool for PostgreSQL. It is a web-based
    application, like Webmin itself, but dedicated to all tasks related to the administration
    of a PostgreSQL server. It's easy to use and can be a helpful tool for your database
    users and administrators.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: System packages are configured to run phpPgAdmin on Apache. The Apache web server
    and PHP are installed as package dependencies. If you're not already using Apache
    and PHP, this exposes a potential attack vector on your database server. Consider
    the security implications of installing phpPgAdmin and keeping it up to date.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to install phpPgAdmin:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the package named `phpPgAdmin` (or `phppgadmin` depending on your system).
    Refer to the recipe, *Installing software packages*,in [Chapter 1](ch01.html "Chapter 1. Setting
    Up Your System"), *Setting Up Your System* for more information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: On some systems, you may need to add an additional repository to install the
    package. For instance, if you're running a Linux distribution from the RedHat
    family (RHEL, CentOS, Fedora, and so on), you should add the **Extra Packages
    for Enterprise Linux** (**EPEL**) repository. Information about setting up EPEL
    can be found in the recipe, *Giving users access to your server via FTP,* in [Chapter
    6](ch06.html "Chapter 6. Managing Files on Your System"), *Managing Files on Your
    System*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since phpPgAdmin runs on top of Apache, you should make sure that this server
    is installed on your system and accessible to a browser. Follow the steps in the
    recipe, *Installing Apache on your system*, from [Chapter 8](ch08.html "Chapter 8. Running
    an Apache Web Server"), *Running an Apache Web Server*, to get Apache up and running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the following URL, but substitute `webmin-host` for the IP or domain
    name of your server: `http://webmin-host/phppgadmin` or `http://webmin-host/phpPgAdmin`
    (depending on distribution).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: On some systems, phpPgAdmin is configured to be accessible to connections originating
    from the local host only. If you wish to change this behavior, go to **Servers**
    | **Apache Webserver** | **Default Server**, select the **Per-Directory Options**
    for phpPgAdmin's directory, and change its **Access Control** settings. More information
    is provided in the recipe, *Setting options for directories, files, and locations*,
    in [Chapter 8](ch08.html "Chapter 8. Running an Apache Web Server"), *Running
    an Apache Web Server*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Information about additional steps that may be necessary to set up phpPgAdmin
    in your system distribution can be found in package documentation files. Refer
    to the recipe, *Reading documentation of installed software* in [Chapter 1](ch01.html
    "Chapter 1. Setting Up Your System"), *Setting Up Your System*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now log in using the username and password of a PostgreSQL account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Depending on the how phpPgAdmin''s configuration is defined, it will connect
    to your Postgres server over a Unix socket or TCP network socket. The following
    line in `config.inc.php` decides how connections are established:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If the host value for a server is set to `'localhost'`, connections are made
    over a network socket. If the value is set as an empty string `''`, then connections
    are made over a Unix socket.
  prefs: []
  type: TYPE_NORMAL
- en: Your Postgres server must be set up to handle the chosen type of connection
    and allow users to authenticate using a password. Take a look at the recipe, *Allowing
    access to PostgreSQL over the network*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are running a RedHat-based system with **Security Enhanced Linux** (**SELinux**),
    you may have to allow Apache to connect to databases by setting the following
    flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: phpPgAdmin is an application written in PHP. The main configuration file of
    phpPgAdmin is named `config.inc.php`, and is usually installed inside the `/etc/`
    directory. Example locations for different distributions are listed in the following
    table. The code of the application itself is stored in the form of PHP script
    files in a directory named `phpPgAdmin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because phpPgAdmin is served by Apache, the installation package includes an
    application-specific configuration file that will be loaded by the web server.
    This file informs Apache where phpPgAdmin is stored on disk and which of its directories
    should be made available on the Web:'
  prefs: []
  type: TYPE_NORMAL
- en: '| File | OS / distro | Location |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| phpPgAdmin configuration | Debian | `/etc/phppgadmin/config.inc.php` |'
  prefs: []
  type: TYPE_TB
- en: '| CentOS | `/etc/phpPgAdmin/config.inc.php` |'
  prefs: []
  type: TYPE_TB
- en: '| OpenSUSE | `/etc/phpPgAdmin/config.inc.php` |'
  prefs: []
  type: TYPE_TB
- en: '| phpPgAdmin files | Debian | `/usr/share/phppgadmin` |'
  prefs: []
  type: TYPE_TB
- en: '| CentOS | `/usr/share/phpPgAdmin` |'
  prefs: []
  type: TYPE_TB
- en: '| OpenSUSE | `/srv/www/htdocs/phpPgAdmin` |'
  prefs: []
  type: TYPE_TB
- en: '| Apache configuration file for phpPgAdmin | Debian | `/etc/apache2/conf.d/phppgadmin`
    |'
  prefs: []
  type: TYPE_TB
- en: '| CentOS | `/etc/httpd/conf.d/phpPgAdmin.conf` |'
  prefs: []
  type: TYPE_TB
- en: '| OpenSUSE | `/etc/apache2/conf.d/phpPgAdmin.conf` |'
  prefs: []
  type: TYPE_TB
- en: Regardless of how the package maintainers decided to prepare it, you can tweak
    the Apache configuration for phpPgAdmin by going to **Servers** | **Apache Webserver**
    | **Default Server** and selecting the **Per-Directory Options** for the phpPgAdmin
    directory.
  prefs: []
  type: TYPE_NORMAL

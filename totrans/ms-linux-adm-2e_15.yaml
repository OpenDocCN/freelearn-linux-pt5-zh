- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying to the Cloud with AWS and Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recent years have seen a significant shift from on-premises computing platforms
    to private and public clouds. In an ever-changing and accelerating world, deploying
    and running applications in a highly scalable, efficient, and secure infrastructure
    is critical for businesses and organizations everywhere. On the other hand, the
    cost and expertise required to maintain the equivalent level of security and performance
    with on-premises computing resources become barely justifiable compared to current
    public cloud offerings. Businesses and teams, small and large, adopt public cloud
    services in increasing numbers, albeit large enterprises are relatively slow to
    make a move.
  prefs: []
  type: TYPE_NORMAL
- en: One of the best metaphors for cloud computing is application services *on tap*.
    Do you need more resources for your apps? Just *turn on the tap* and provision
    the virtual machines or instances in any number you require (scale horizontally).
    Or perhaps, for some instances, you require more CPUs or memory (scale vertically).
    When you no longer need resources, just *turn off* *the tap*.
  prefs: []
  type: TYPE_NORMAL
- en: Public cloud services provide all these functions at relatively low rates, taking
    away the operations overhead that you might otherwise have with maintaining the
    on-premises infrastructure accommodating such features.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will introduce you to **Amazon Web Service** (**AWS**) and **Microsoft
    Azure** – two major public cloud providers – and offer some practical guidance
    for deploying your applications in the cloud. In particular, we’ll focus on typical
    cloud management workloads, using both the web administration console and the
    command-line interface.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll know how to use the AWS web console and the
    AWS CLI, as well as the Azure web portal and the Azure CLI, to manage your cloud
    resources with the two most popular cloud providers of our time. You’ll also learn
    how to make a prudent decision about creating and launching your resources in
    the cloud, striking a sensible balance between performance and cost.
  prefs: []
  type: TYPE_NORMAL
- en: We hope that Linux administrators – novice and experienced alike – will find
    the content in this chapter relevant and refreshing. Our focus is purely practical
    as we explore the AWS and Azure cloud workloads. We will refrain from comparing
    the two since such an endeavor would go beyond this chapter’s scope. To make the
    journey less boring, we’ll also steer away from keeping a perfect symmetry between
    describing AWS and Azure management tasks. We all know AWS blazed the trail into
    the public cloud realm first. Other major cloud providers followed, adopted, and
    occasionally improved the underlying paradigms and workflows. Since we’ll be introducing
    AWS first, we’ll cover more ground on some cloud provisioning concepts (such as
    Regions and **Availability Zones** (**AZs**)), which in many ways are very similar
    to what’s available in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we’ll leave the ultimate choice between using AWS or Azure up to you.
    We’re giving you the map. The road is yours to take.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the key topics you’ll learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with AWS EC2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Microsoft Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the tasks in this chapter, you will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS and Azure accounts if you want to follow along with the practical examples.
    Both cloud providers provide free subscriptions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AWS free tier: [https://aws.amazon.com/free](https://aws.amazon.com/free)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Microsoft Azure free account: [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A local machine with a Linux distribution of your choice to install and experiment
    with the AWS CLI and Azure CLI utilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A modern web browser (such as Google Chrome or Mozilla Firefox) for the web-console-driven
    management tasks for both AWS and Azure. You can access the related portals on
    any platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Linux command-line terminal and intermediate-level proficiency using the shell
    to run the AWS and Azure CLI commands.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As you proceed, please make sure to shut down your EC2 instances or Azure virtual
    machines after you finish experimenting with them. Failure to do so may result
    in relatively high bills being generated for you.
  prefs: []
  type: TYPE_NORMAL
- en: With this, let’s start with our first contender, AWS EC2.
  prefs: []
  type: TYPE_NORMAL
- en: Working with AWS EC2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS **Elastic Compute Cloud** (**EC2**) is a scalable computing infrastructure
    that allows users to lease virtual computing platforms and services to run their
    cloud applications. AWS EC2 has gained extreme popularity in recent years due
    to its outstanding performance and scalability combined with relatively cost-effective
    service plans. This section provides some basic functional knowledge to get you
    started with deploying and managing AWS EC2 instances running your applications.
    In particular, we’ll introduce you to EC2 instance types, particularly how you
    can differentiate between various provisioning and related pricing tiers, how
    to use SSH to connect and SCP to transfer files to and from your EC2 instances,
    and how to work with the AWS CLI.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this section, you’ll have a basic understanding of AWS EC2 and
    how to choose, deploy, and manage your EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing and creating AWS EC2 instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS EC2 provides various instance types, each with its provisioning, capacity,
    pricing, and use case models. Choosing between different EC2 instance types is
    not always trivial. This section will briefly describe each EC2 instance type,
    some pros and cons of using them, and how to choose the most cost-effective solution.
    With each instance type, we’ll show you how to launch one using the AWS console.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can look at EC2 instance types from two perspectives. When you decide on
    an EC2 instance, you’ll have to consider both these factors. Let’s look at each
    of these options briefly:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Provisioning**: The capacity and computing power of your EC2 instance. The
    main differentiating feature of each EC2 instance provisioning type is the computing
    power, which is expressed by vCPU (or CPU), memory (RAM), and storage (disk capacity).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some EC2 instance types also provide **graphical processing unit** (**GPU**)
    or **field programmable gate array** (**FPGA**) computing capabilities. A detailed
    view of EC2 instance provisioning types is beyond the scope of this chapter. You
    can explore the related information at [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
    or [https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`type` and `region`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spot instances**: These EC2 instances are available for reuse at a lower
    price than on-demand instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dedicated instances**: These EC2 instances run in a **virtual private cloud**
    (**VPC**) assigned to a single-payer account'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll cover each of these EC2 instance types in the following sections. For
    each of these types, we’ll show an example of how to launch a corresponding instance.
  prefs: []
  type: TYPE_NORMAL
- en: However, before creating an instance, we’ll look at another key concept regarding
    EC2 instances – **AZs**.
  prefs: []
  type: TYPE_NORMAL
- en: EC2 AZs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The AWS EC2 service is available in multiple locations around the globe, known
    as **Regions**. Here are some examples of Regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`us-west-2`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ap-south-1`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EC2 defines multiple AZs in a Region, which are essentially one or more data
    centers. Regions are entirely isolated from each other in terms of the underlying
    infrastructure to provide fault tolerance and high availability. If a Region becomes
    unavailable, only the EC2 instances within the affected Region are unreachable.
    Other Regions with their EC2 instances will continue to work uninterrupted.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, AZs are connected while providing highly available and fault-tolerant
    EC2 services within a Region. Launching an EC2 instance creates it in the current
    Region selected in the AWS console. An AWS EC2 administrator may switch between
    different Regions when managing EC2 instances. Only instances within the selected
    Region are visible in the EC2 administration console. An EC2 administrator will
    usually choose a Region based on the geographical location of the users accessing
    the EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have preliminary knowledge of various EC2 instance types, let’s
    look at on-demand instances.
  prefs: []
  type: TYPE_NORMAL
- en: EC2 on-demand instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AWS EC2 **on-demand instances** use a *pay-as-you-go* pricing model for resource
    usage per second, without a long-time contract. On-demand instances are best suited
    for experimenting with uncertain workloads where the resource usage is not fully
    known (such as during development). The flexibility of these on-demand instances
    comes with a higher price than reserved instances, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s launch an on-demand instance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must log into our AWS account console at [https://console.aws.amazon.com](https://console.aws.amazon.com).
    The following screenshot shows the default console view, where you will have information
    about the user (**1**), the Region (**2**), and the available – or recently visited
    – services (**3**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.1 – The AWS management console](img/B19682_15_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – The AWS management console
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we must select the EC2 service from the list on the left-hand side, as
    shown in the preceding screenshot. This will lead us to the EC2 dashboard interface,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.2 – The EC2 dashboard](img/B19682_15_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – The EC2 dashboard
  prefs: []
  type: TYPE_NORMAL
- en: The **Launch instance** button, as shown in the preceding screenshot, will begin
    the step-by-step process of creating our on-demand instance. This will lead us
    to a new interface where we can provide the main configuration options on our
    new instance, such as its name, operating system to use, instance type, login
    key pair, network, and storage settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to choose a name and a tag. First, we will choose a name for
    our instance. In our case, we set the name to `aws_packt_testing_1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Giving a name to the new EC2 instance](img/B19682_15_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – Giving a name to the new EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we can add a new tag. To do this, we must click `env` and a
    value of `packt`. We can add multiple tags (key-value pairs) to a given instance
    if we need to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Adding tags to an EC2 instance](img/B19682_15_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Adding tags to an EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we must choose an operating system. We’ll select Ubuntu 22.04 LTS as
    our Linux distribution for the new EC2 instance, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Choosing the operating system for the EC2 instance](img/B19682_15_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 – Choosing the operating system for the EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: There are other operating systems to choose from, including macOS, Microsoft
    Windows, and Linux distributions such as Red Hat Enterprise Linux, SUSE Linux
    Enterprise, or Debian Linux, alongside Amazon Linux and Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can choose an instance type. Here, we’ll select the instance type based
    on our provisioning needs. In our case, we will select the **t2.micro** type,
    with 1 vCPU and 1 GB of memory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.6 – Choosing an instance type – the t2.micro](img/B19682_15_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – Choosing an instance type – the t2.micro
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **Network settings**, we will leave the default settings unchanged for
    now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.7 – Setting up the network for the new EC2 instance](img/B19682_15_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.7 – Setting up the network for the new EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to configure storage. By default, the EC2 instance provides
    an 8 GB SSD volume, but you can set it up to 30 GB while using the free tier.
    We will use it with the default 8 GB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.8 – Setting up storage for the EC2 instance](img/B19682_15_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.8 – Setting up storage for the EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step before launching the new EC2 instance is to review the detailed
    summary provided and decide if there are any other changes to be made. Once the
    new instance has been tailored to our needs, we can create it by clicking on the
    **Launch instance** button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.9 – Summary of the new EC2 instance and the Launch instance button](img/B19682_15_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.9 – Summary of the new EC2 instance and the Launch instance button
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we are ready to launch our instance by pressing the **Launch
    instance** button. Alternatively, we could follow further configuration steps
    by revisiting the previous steps; otherwise, EC2 will assign some default values.
  prefs: []
  type: TYPE_NORMAL
- en: 'When launching the EC2 instance, we will be asked to create or select a certificate
    key pair for remote SSH access into our instance. This will highlight the key
    pair section on the screen, where we can click on the `packt_aws_key`, select
    the **RSA** type and the **.pem** file format, and then click on the **Create
    key pair** button in the lower right corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.10 – Selecting or creating a certificate key pair for SSH access](img/B19682_15_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.10 – Selecting or creating a certificate key pair for SSH access
  prefs: []
  type: TYPE_NORMAL
- en: You will be automatically asked to download the new `.pem` file to a location
    on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the related file (`packt-ec2.pem`) to a secure location on your local
    machine, where you can use it with the `ssh` command to access your EC2 instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 15.11 – An EC2 instance in the running state](img/B19682_15_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.11 – An EC2 instance in the running state
  prefs: []
  type: TYPE_NORMAL
- en: For more information about on-demand instances, please visit [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned the basics of launching an on-demand instance, let’s
    look at reserved instances.
  prefs: []
  type: TYPE_NORMAL
- en: EC2 reserved instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With **reserved instances**, we lease the EC2 computing capacity of a specific
    type for a specific amount of time. This length of time is called a **term** and
    can either be a 1-year or a 3-year commitment. Here are the main characteristics
    that need to be set upfront when purchasing reserved instances, as shown in *Figure
    15**.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform**: An example of this is **Linux**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tenancy**: Running on **Default** (shared) or **Dedicated** hardware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Offering Class**: These are the types of reserved instances that are available.
    The options are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard**: A plain reserved instance with a well-defined set of options'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Convertible**: It allows specific changes, such as modifying the instance
    type (for example, from **t2.large** to **t2.xlarge**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instance Type**: An example of this is **t2.large**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Term**: For example, **1 year.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payment option**: **All upfront**, **Partial upfront**, **No upfront**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With each of these options and the different tiers within, your costs depend
    on the cloud computing resources involved and the duration of the service. For
    example, if you choose to pay all upfront, you’ll get a better discount than otherwise.
    Choosing from among the options previously mentioned is ultimately an exercise
    in cost-saving and flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: A close analogy to purchasing reserved instances is a *mobile telephone plan*
    – you decide on all the options you want, and then you commit a certain amount
    of time. With reserved instances, you get less flexibility in terms of making
    changes, but with significant savings in cost – sometimes up to 75%, compared
    to on-demand instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch a reserved instance, go to your EC2 dashboard in the AWS console
    and choose **Reserved Instances** under **Instances** in the left panel, then
    click on the **Purchase Reserved Instances** button. Here is an example of purchasing
    a reserved EC2 instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.12 – Purchasing a reserved EC2 instance](img/B19682_15_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.12 – Purchasing a reserved EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: For more information about EC2 reserved instances, please visit [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-reserved-instances.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-reserved-instances.html).
  prefs: []
  type: TYPE_NORMAL
- en: We have learned that reserved instances are a cost-effective alternative to
    on-demand EC2 instances. Now, let’s take our journey further and look at yet another
    way to reduce the costs by using spot instances.
  prefs: []
  type: TYPE_NORMAL
- en: EC2 spot instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A **spot instance** is an unused instance waiting to be leased. The amount of
    time a spot instance is vacant and at your disposal depends on the general availability
    of the requested capacity in EC2, given that the associated costs are not higher
    than the amount you are willing to pay for your spot instance. AWS advertises
    spot instances with an up to 90% discount compared to on-demand EC2 pricing.
  prefs: []
  type: TYPE_NORMAL
- en: The major caveat of using spot instances is the potential *no-vacancy* situation
    when the required capacity is no longer available at the initially agreed-upon
    rate. In such circumstances, the spot instance will shut down (and perhaps be
    leased elsewhere). AWS EC2 is kind enough to give a 2-minute warning before stopping
    the spot instance. This time should be used to properly tear down the application
    workflows running within the instance.
  prefs: []
  type: TYPE_NORMAL
- en: Spot instances are best suited for non-critical tasks, where application processing
    could be inadvertently interrupted at any moment and resumed later, without considerable
    damage or data loss. Such jobs may include data analysis, batch processing, and
    optional tasks.
  prefs: []
  type: TYPE_NORMAL
- en: To launch a spot instance, go to your **EC2** dashboard and choose **Spot Requests**
    in the left-hand menu. Under **Instances**, click on **Request Spot Instances**
    and follow the steps described in the *EC2 on-demand* *instances* section.
  prefs: []
  type: TYPE_NORMAL
- en: A detailed explanation of launching a spot instance is beyond the scope of this
    chapter. The AWS EC2 console does a great job of describing and assisting with
    the related options. For more information about spot instances, please visit [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html).
  prefs: []
  type: TYPE_NORMAL
- en: We know that by default, EC2 instances run on shared hardware, meaning that
    instances owned by multiple AWS customers share the same machine (or virtual machine).
    But what if you wanted to have a dedicated platform to run your EC2 instances?
    We’ll look at dedicated instances next.
  prefs: []
  type: TYPE_NORMAL
- en: EC2 dedicated instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Specific businesses require applications to run on dedicated hardware without
    them sharing the platform with anyone. AWS EC2 provides **dedicated hosts** and
    **dedicated instances** to accommodate this use case. As you may expect, dedicated
    instances would cost more than other instance types. So, why should we care about
    leasing such instances?
  prefs: []
  type: TYPE_NORMAL
- en: There are businesses – especially among financial, health, and governmental
    institutions – required by law to meet strict regulatory requirements for processing
    sensitive data or to acquire hardware-based licenses for running their applications.
  prefs: []
  type: TYPE_NORMAL
- en: With dedicated instances *without* a dedicated host, EC2 would guarantee that
    your applications run on a hypervisor exclusively dedicated to you, yet it would
    not enforce a fixed set of machines or hardware. In other words, some of your
    instances may run on different physical hosts. Choosing a dedicated host in addition
    to dedicated instances would always warrant a fully dedicated environment – hypervisors
    and hosts – for running your applications exclusively, without sharing the underlying
    platforms with other AWS customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch a dedicated instance, you can follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with the same steps that you performed for launching an on-demand EC2
    instance that were described earlier in this chapter, in the *EC2 on-demand* *instances*
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can add another step to the launching process. To do this, you must open
    the **Advanced details** drop-down section and scroll to the **Tenancy** option,
    where you must choose **Dedicated – run a dedicated instance**, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.13 – Launching a dedicated EC2 instance](img/B19682_15_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.13 – Launching a dedicated EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to run your dedicated instance on a dedicated host, you must create
    a dedicated host first. To do this, on the **EC2** dashboard, navigate to **Instances**
    | **Dedicated Hosts**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.14 – Creating a dedicated EC2 host](img/B19682_15_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.14 – Creating a dedicated EC2 host
  prefs: []
  type: TYPE_NORMAL
- en: Follow the EC2 wizard to allocate your dedicated host according to your preferences.
    After creating your host, you may launch your dedicated instance as described
    previously and choose the **Dedicated host – launch this instance on a dedicated
    Host** option for **Tenancy**, as shown in *step 2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more information on dedicated hosts, please visit [https://aws.amazon.com/ec2/dedicated-hosts/](https://aws.amazon.com/ec2/dedicated-hosts/).
    For dedicated instances, see [https://aws.amazon.com/ec2/pricing/dedicated-instances/](https://aws.amazon.com/ec2/pricing/dedicated-instances/).
  prefs: []
  type: TYPE_NORMAL
- en: We’ll conclude our journey through AWS EC2 instance types here. For more information,
    please visit [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Instances.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Instances.html).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll look at one of the two essential EC2 deployment features that allow
    you to be proficient and resourceful when deploying and scaling your EC2 instances
    – **Amazon Machine Images** (**AMIs**) and **placement groups**. We will only
    discuss placement groups in this chapter. For more information about AMIs, please
    visit [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html).
    Placement groups control how your instances are spread across the EC2 infrastructure
    for high availability and optimized workloads. We’ll discuss this next.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing AWS EC2 placement groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Placement groups** allow you to specify how your EC2 instances are placed
    across the underlying EC2 hardware or hypervisors, providing strategies to group
    or separate instances depending on your requirements. Placement groups are offered
    free of charge.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of placement groups to choose from. Let’s quickly go
    through each of these types and look at their use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cluster placement groups**: With cluster placement groups, instances are
    placed within a single AZ (data center). They are best suited for low-latency,
    high-throughput communication between instances, but not with the outside world.
    Applications with high-performance computing or data replication would greatly
    benefit from cluster placement, but web servers, for example, not so much.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spread placement groups**: When you launch multiple EC2 instances, there’s
    always a possibility that they may end up running on the same physical machine
    or hypervisor. This may not be desirable when a single point of failure (such
    as hardware) would be critical for your applications. Spread placement groups
    provide hardware isolation between instances. In other words, if you launch multiple
    instances in a spread placement group, there’s a guarantee that they will run
    on separate physical machines. In the rare case of an EC2 hardware failure, only
    one of your instances would be affected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partition placement groups**: Partition placement groups will group your
    instances in logical formations (partitions) with hardware isolation between the
    partitions, but not at the instance level. We can view this model as a hybrid
    between the cluster and spread placement groups. When you launch multiple instances
    within a partition placement group, EC2 will do its best to distribute the instances
    between partitions evenly. For example, if you had four partitions and 12 instances,
    EC2 would place three instances in each node (partition). We can look at a partition
    as a computing unit made of multiple instances. In the case of a hardware failure,
    the isolated partition instances can still communicate with each other but not
    across partitions. Partition placement groups support up to seven instances in
    a single logical partition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a placement group, navigate to **Network & Security** | **Placement
    Groups** in your **EC2** dashboard’s left menu and click on the **Create Placement
    Group** button. On the next screen, you must specify a name for the **Placement
    Group** option, as well as a **Placement Strategy** value. Optionally, you can
    add tags (key-value pairs) for organizing or identifying your placement group.
    When you’re done, click the **Create** **group** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.15 – Creating a placement group](img/B19682_15_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.15 – Creating a placement group
  prefs: []
  type: TYPE_NORMAL
- en: For more information on EC2 placement groups, please visit [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are familiar with various EC2 instance types, let’s look at how
    to use our instances.
  prefs: []
  type: TYPE_NORMAL
- en: Using AWS EC2 instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we’ll briefly go through some essential operations and management
    concepts regarding your instances. First, we’ll look at the life cycle of an EC2
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: The life cycle of an EC2 instance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When using or managing EC2 instances, it is important to understand the transitional
    stages, from launch to running to hibernation, shutdown, or termination. Each
    of these states affects billing and the way we access our instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.16 – The life cycle of an EC2 instance](img/B19682_15_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.16 – The life cycle of an EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: The **PENDING** state corresponds to the boot-up and initialization phase of
    our instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transitioning from **PENDING** to **RUNNING** is not always immediate, and it
    may take a while for the applications running within the instance to become responsive.
    EC2 starts billing our instance in the **RUNNING** state until transitioning to
    the **STOPPED** state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **RUNNING** state, we can reboot our instance if needed. During the **REBOOTING**
    state, EC2 always brings back our instance on the same host, whereas stopping
    and restarting doesn’t always guarantee the same host for the instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **STOPPED** state, we’ll no longer be charged for the instance, but there
    will be costs related to any additional storage (other than the root volume) attached
    to the instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the instance is no longer required, we may choose between the **STOPPING**
    or **HIBERNATING** states. With **HIBERNATING**, we avoid the **PENDING** state’s
    potential latency upon startup. If we no longer use the instance, we may decide
    to terminate it. Upon termination, there are no more charges related to the instance.
    When terminating an instance, it may still show up for a little while in the EC2
    dashboard before it gets permanently removed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can connect to an EC2 instance in a running state using SSH. In the next
    section, we’ll show you how.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to AWS EC2 instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'EC2 instances, in general, serve the purpose of running a specific application
    or a group of applications. The related platform’s administration and maintenance
    usually require terminal access. The way to access these instances (or any other
    service) is determined by how AWS differentiates the available services into two
    different concepts, similar to the ones used in networking – control plane and
    data plane. These are concepts that represent how EC2 instances can be accessed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Control plane (or management plane) access**: Using the AWS EC2 console and
    the SSH terminal, we perform administrative tasks on EC2 instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data plane access**: Applications running on EC2 instances may also expose
    their specific endpoints (ports) for communicating with the outside world. EC2
    uses security groups to control the related network traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we’ll briefly look at both control plane and data plane access.
    In particular, we’ll discuss how to connect to an EC2 instance using SSH and how
    to use SCP for file transfer with EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting via SSH to an EC2 instance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In control plane access mode, using SSH with our EC2 instance allows us to
    manage it like any on-premises machine on a network. The related SSH command is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this down to understand it better:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SSH_KEY` represents the private key file on our local system that we created
    and downloaded when launching our instance. See the *EC2 on-demand instances*
    section for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ec2-user` is the default user assigned by EC2 to our AMI Linux instance. Different
    AMIs may have different usernames to connect with. You should check with the AMI
    vendor of your choice about the default username to use with SSH. For example,
    when using `ec2-user`, when using `ubuntu`, and when using `admin`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EC2_INSTANCE` represents the public IP address or DNS name of our EC2 instance.
    You can find this in the EC2 dashboard for your instance:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 15.17 – The public IP address and DNS name of an EC2 instance](img/B19682_15_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.17 – The public IP address and DNS name of an EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, the SSH command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'However, before we connect, we need to set the right permissions for our `private
    key` file so that it’s not publicly viewable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Failing to do this results in an unprotected key file error while attempting
    to connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'A successful SSH connection to our EC2 instance yields the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.18 – Connecting with SSH to an EC2 instance](img/B19682_15_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.18 – Connecting with SSH to an EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we can interact with our EC2 instance as if it were a standard
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s look at how to transfer files from an EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Using SCP for file transfer
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To transfer files to and from an EC2 instance in data plane access mode, we
    must use the `scp` utility. `scp` uses the **Secure Copy Protocol** (**SCP**)
    to securely transfer files between network hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command copies a local file (`README.md`) to our remote EC2 instance
    (so it must be run from our machine, not the EC2 instance):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The file is copied to the `ubuntu` user’s home folder (`/home/ubuntu`) on the
    EC2 instance. The reverse operation of transferring the `README.md` file from
    the remote instance to our local directory is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `scp` command’s invocation is similar to `ssh`, where we specify
    the private key file (`aws/packt-ec2.pem`) via the `-i` (identity file) parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll look at yet another critical aspect of managing and scaling EC2
    instances – storage volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Using EC2 storage volumes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Storage volumes** are device mounts within an EC2 instance that provide additional
    disk capacity (at extra cost). You may need additional storage for large file
    caches or extensive logging, for example, or you may choose to mount network-attached
    storage for critical data shared between your EC2 instances. You can think of
    EC2 storage volumes as *modular hard drives*. You mount or unmount them based
    on your needs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Two types of storage volumes are provided by EC2:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Instance store**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elastic Block** **Store** (**EBS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing how to use storage volumes allows you to make better decisions when
    scaling your applications as they grow. Let’s look at instance store volumes first.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing instance store volumes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Instance store volumes are disks that are directly (physically) attached to
    your EC2 instance. Consequently, the maximum size and number of instance store
    volumes you can connect to your instance are limited by the instance type. For
    example, a storage-optimized *i3* instance can have up to 8 x 1.9 TB SSD disks
    attached, while a general-purpose *m5d* instance may only grow up to four drives
    of 900 GB each. See [https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/)
    for more information on instance capacity.
  prefs: []
  type: TYPE_NORMAL
- en: An instance store volume comes at no additional cost if it’s the root volume
    – the volume with the operating system platform booting the instance.
  prefs: []
  type: TYPE_NORMAL
- en: Not all EC2 instance types support instance store volumes. For example, the
    general-purpose *t2* instance types only support EBS storage volumes. On the other
    hand, if you want to grow your storage beyond the maximum capacity allowed by
    the instance store, you’ll have to use EBS volumes. We’ll look at EBS volumes
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing EBS volumes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The data on instance store volumes only persists with your EC2 instance. If
    your instance stops or terminates, or there is a failure with it, all of your
    data is lost. To store and persist critical data with your EC2 instances, you’ll
    have to choose EBS.
  prefs: []
  type: TYPE_NORMAL
- en: EBS volumes are flexible and high-performing network-attached storage devices
    that serve both the root volume system and additional volume mounts on your EC2
    instance. An EBS root volume can only be attached to a single EC2 instance at
    a time while an EC2 instance can have multiple EBS volumes attached at any time.
    An EBS volume can also be attached to multiple EC2 instances at a time via *multi-attach*.
    For more information on EBS multi-attach, see [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html).
  prefs: []
  type: TYPE_NORMAL
- en: When you create an EBS volume, it will be automatically replicated within the
    AZ of your instance to minimize latency and data loss. With EBS, you get live
    monitoring of drive health and stats via Amazon CloudWatch free of charge. EBS
    also supports encrypted data storage to meet the latest regulatory standards for
    data encryption.
  prefs: []
  type: TYPE_NORMAL
- en: EC2 storage volumes are backed by Amazon’s **Simple Storage Service** (**S3**)
    or **Elastic File System** (**EFS**) infrastructure. For more information on the
    different EC2 storage types, please visit [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s create and configure an EBS storage volume and attach it to our EC2
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an EBS storage volume
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here are the steps we’ll follow, starting with creating the EBS volume:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **EC2** dashboard, go to **Volumes** under **Elastic Block Store** in
    the left navigation pane, and click on the **Create Volume** button at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.19 – Creating an EBS volume](img/B19682_15_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.19 – Creating an EBS volume
  prefs: []
  type: TYPE_NORMAL
- en: Enter the values of your choice for **Volume Type**, **Size**, and **Availability
    Zone**. Make sure you choose the AZ where your EC2 instances are. You could also
    include a **Snapshot ID** value if you want to restore the volume from a previous
    EC2 instance backup (snapshot). We’ll look at backup/restore using EBS snapshots
    later in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the **Create Volume** button when you’re done. You’ll get a **Volume created
    successfully** message that specifies your new EBS volume ID if all goes well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Volume ID** or select the volume from the left navigation pane,
    under **Elastic Block Store** and **Volumes**. Click on the **Actions** button
    and choose **Attach Volume**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.20 – Attaching the EBS volume to an EC2 instance](img/B19682_15_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.20 – Attaching the EBS volume to an EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next screen, enter your EC2 instance ID (or name tag to search for it)
    in the **Instance** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.21 – Entering the EC2 instance ID to attach the volume](img/B19682_15_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.21 – Entering the EC2 instance ID to attach the volume
  prefs: []
  type: TYPE_NORMAL
- en: Press the **Attach volume** button when you’re done. After a few moments, EC2
    will initialize your EBS volume, and **State** will change to **in-use**. The
    volume device is now ready, but we need to format it with a filesystem so that
    it can be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s SSH into the EC2 instance where we attached the volume:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: lsblk
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 15.22 – The local volumes in our EC2 instance](img/B19682_15_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.22 – The local volumes in our EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the size of the volumes, we can immediately tell the one we just
    added – `xvdf` with `1G`. The other volume (`xvda`) is the original root volume
    of our `t3.micro` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s check if our new EBS volume (`xvdf`) has a filesystem on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s build a filesystem on our volume using the `mkfs` (*make filesystem*)
    command-line utility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we check the filesystem using the following command, we should see the filesystem
    details displayed instead of empty data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of all the commands used to check and create a new filesystem is
    shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.23 – Creating a new filesystem](img/B19682_15_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.23 – Creating a new filesystem
  prefs: []
  type: TYPE_NORMAL
- en: The volume drive is now formatted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s make it accessible to our local filesystem. We’ll name our mount
    point `packt_drive` and create it in the root directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 15.24 – Accessing the EBS volume](img/B19682_15_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.24 – Accessing the EBS volume
  prefs: []
  type: TYPE_NORMAL
- en: Working with EBS volumes is similar to working with any volumes on Linux, so
    all the knowledge you’ve received from this chapter will be very useful when you’re
    working with Amazon EC2 instances. Now, let’s look at how to detach an EBS volume.
  prefs: []
  type: TYPE_NORMAL
- en: Detaching an EBS volume
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Before detaching any EBS volume, you need to unmount it. In our case, as we
    are already in the terminal and using the volume, we will type the following command
    to unmount the volume we use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now that the volume has been unmounted, we can head to the EC2 dashboard and
    go to **Volumes**, select the corresponding **in-use** volume we want to detach,
    go to **Actions** in the top-right corner, and choose **Detach Volume**. Acknowledge
    the operation and wait for the volume to be detached.
  prefs: []
  type: TYPE_NORMAL
- en: We’re now at the final step of our backup-restore procedure – that is, attaching
    the new volume containing the snapshot to our EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll conclude our exploration of the AWS EC2 console and related management
    operations here. For a comprehensive reference on EC2, please refer to the Amazon
    EC2 documentation at [https://docs.aws.amazon.com/ec2](https://docs.aws.amazon.com/ec2).
  prefs: []
  type: TYPE_NORMAL
- en: The EC2 management tasks we’ve presented so far exclusively used the AWS web
    console. If you’re looking to automate your EC2 workloads, you may want to adopt
    the AWS CLI, which we’ll check out next.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the AWS CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The AWS CLI is a unified tool for managing AWS resources. This tool was created
    so that we can manage all the AWS services from a terminal session on our local
    machine. Compared to the AWS web console, which offers visual tools through the
    web browser, the AWS CLI (as its name states) offers all the functionalities inside
    your terminal program on your machine. The AWS CLI is available for all major
    operating systems, such as Linux, macOS, and Windows. In the next section, we
    will show you how to install it on your Linux local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the AWS CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To install the AWS CLI, please visit [https://aws.amazon.com/cli/](https://aws.amazon.com/cli/).
    At the time of writing, the latest release of the AWS CLI is version 2\. For the
    examples in this chapter, we’ll be using a Debian machine to install the AWS CLI
    while following the instructions at [https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html#cliv2-linux-install](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html#cliv2-linux-install).
    This resource link offers instructions for installing the AWS CLI on all major
    operating systems, not only Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to install the AWS CLI on Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start by downloading the AWS CLI v2 package (`awscliv2.zip`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we’ll unzip and install the AWS CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'help:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To manage your AWS EC2 resources using the `aws` utility, first, you need to
    configure your local environment to establish the required trust with the AWS
    endpoint. We’ll do that next.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the AWS CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To configure the local AWS environment on your local machine, you will have
    to set up your AWS access key. If you already have it, you can skip this part:'
  prefs: []
  type: TYPE_NORMAL
- en: The AWS CLI configuration asks for your **AWS Access Key ID** and **AWS Secret
    Access Key** values. You can generate or retrieve these keys by logging into your
    AWS account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the dropdown next to your account name in the top-right corner of the
    AWS web console and choose **Security Credentials**. If you haven’t generated
    your access key yet, go to the **Access keys** tab and click on the **Create access
    key** button. You’ll have to store your AWS key ID and secret in a safe place
    for later reuse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that you have those keys, you can proceed to setting up AWS on your local
    machine. To configure the AWS environment, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding command will prompt you for a few pieces of information, as suggested
    by the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.25 – Configuring the local AWS CLI environment](img/B19682_15_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.25 – Configuring the local AWS CLI environment
  prefs: []
  type: TYPE_NORMAL
- en: In the AWS CLI configuration wizard, set `eu-central-1` (Frankfurt, in our case).
    You may want to enter the region of your choice or leave it as the default (`None`).
    If you don’t have a default Region specified, you’ll have to enter it every time
    you invoke the `aws` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we’re ready to use the AWS CLI. Let’s start by listing our EC2
    instances.
  prefs: []
  type: TYPE_NORMAL
- en: Querying EC2 instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following command provides detailed information about EC2 instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command provides sizeable JSON output (too long to present in
    a screenshot), with the details of all the EC2 instances we own in our default
    Region (`eu-central-1`). Alternatively, we can specify the Region with the `--``region`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can get more creative and list only the EC2 instances matching a specific
    key-value tag, such as `env: packt`, that we previously tagged our instances with,
    using the `--``filters` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The first `--filters` parameter specifies the key (`tag-key=env`), while the
    second points to the value (`tag-value=packt`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Combining the `aws` and `jq` (*JSON query*) commands, we can extract the JSON
    fields we want. For example, the following command lists the `InstanceId`, `ImageId`,
    and `BlockDeviceMappings` fields of the EC2 instances tagged with `env:packt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `jq` utility is not present on your Linux machine, install it with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding `aws` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.26 – Querying EC2 instances](img/B19682_15_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.26 – Querying EC2 instances
  prefs: []
  type: TYPE_NORMAL
- en: Note the `DeviceName` properties in the output JSON, which reflect only one
    block device (this is `/dev/sdf` since we deleted the EBS volume we attached earlier).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can filter the output of the `aws ec2 describe-instances` command by any
    property. For example, the following command filters our EC2 instances by the
    `image-id` AMI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: aws ec2 describe-instances \
  prefs: []
  type: TYPE_NORMAL
- en: --filters "Name=instance-id,Values=i-0f8fe6aced634e71c" \
  prefs: []
  type: TYPE_NORMAL
- en: --query "Reservations[].Instances[].SecurityGroups[]"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: aws ec2 describe-instances \
  prefs: []
  type: TYPE_NORMAL
- en: --filters "Name=instance-id,Values=i-0f8fe6aced634e71c" \
  prefs: []
  type: TYPE_NORMAL
- en: --query "Reservations[].Instances[].SecurityGroups[].GroupId"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Reservations[].Instances[].SecurityGroups[].GroupId
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: aws ec2 run-instances --image-id ami-0faab6bdbac9486fb --count 1 --instance-type
    t3.micro --key-name packt_aws_key --security-group-ids sg-0aa7c8ef75503a9aa –placement
    AvailabilityZone=eu-central-1b
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: aws ec2 create-tags --resources i-091e2f515d15c3b0b --tags Key=Name,Value=aws_packt_testing_2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: aws ec2 create-tags \
  prefs: []
  type: TYPE_NORMAL
- en: --resources i-0e1692c9dfdf07a8d \
  prefs: []
  type: TYPE_NORMAL
- en: --tags Key=env,Value=packt
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: aws ec2 describe-instances \
  prefs: []
  type: TYPE_NORMAL
- en: --filters "Name=tag-key,Values=env" \
  prefs: []
  type: TYPE_NORMAL
- en: --filters "Name=tag-value,Values=packt" \
  prefs: []
  type: TYPE_NORMAL
- en: --query "Reservations[].Instances[].InstanceId"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'aws ec2 terminate-instances --instance-ids shutting-down (from a previously
    running state):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.31 – Terminating an instance](img/B19682_15_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.31 – Terminating an instance
  prefs: []
  type: TYPE_NORMAL
- en: 'The instance will eventually transition to the `terminated` state and will
    no longer be visible in the AWS EC2 console. The AWS CLI will still list it among
    the instances until EC2 finally disposes of it. According to AWS, terminated instances
    can still be visible up to an hour after termination. It’s always a good practice
    to discard the instances in the `terminated` or `shutting-down` state when performing
    queries and management operations via the AWS CLI. The following screenshot of
    the EC2 console shows that the second EC2 instance is in a `terminated` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.32 – Showing the terminated instance in the EC2 console](img/B19682_15_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.32 – Showing the terminated instance in the EC2 console
  prefs: []
  type: TYPE_NORMAL
- en: This is where we’ll wrap up our journey regarding AWS EC2\. Note that we’ve
    only scratched the surface of cloud management workloads in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: The topics that were covered in this section provide a basic understanding of
    AWS EC2 cloud resources and help system administrators make better decisions when
    managing the related workloads. Power users may find the AWS CLI examples a good
    starting point for automating their cloud management workflows in EC2.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s turn our focus to our next public cloud services contender, Microsoft
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Microsoft Azure
  prefs: []
  type: TYPE_NORMAL
- en: '**Microsoft Azure**, also known as **Azure**, is a public cloud service by
    Microsoft for building and deploying application services in the cloud. Azure
    provides a full offering of a highly scalable **Infrastructure-as-a-Service**
    (**IaaS**) at relatively low costs, accommodating a wide range of users and business
    requirements, from small teams to large commercial enterprises, including financial,
    health, and governmental institutions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we’ll explore some very basic deployment workflows using Azure,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Linux virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing virtual machine sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding additional storage to a virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the Azure CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you’ve created your free Azure account, go to [https://portal.azure.com](https://portal.azure.com)
    to access the Azure portal. You may want to enable the docked view of the portal
    navigation menu on the left for quick and easy access to your resources. Throughout
    this chapter, we’ll use the docked view for our screen captures. Go to the **Portal
    settings** cog in the top-right corner and choose **Docked** for the default mode
    of the portal menu.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s create our first resource in Azure – an Ubuntu virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and deploying a virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: We’ll follow a step-by-step procedure, guided by the resource wizard in the
    Azure portal. Let’s start with the first step, which is creating a compute resource
    for the virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a compute resource**: Start by clicking on the **Create a resource**
    option in the left navigation menu or under **Azure services** in the main window.
    This will take us to the Azure Marketplace. Here, we can search for our resource
    of choice. You can either search for a relevant keyword or narrow down your selection
    based on the resource type you’re looking for. Let’s narrow down our selection
    by choosing **Compute**, then selecting **Ubuntu Server 22.04 LTS** from the available
    **Popular Marketplace products** options. You may click on **Learn more** for
    a detailed description of the image or click **Create**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we select **Ubuntu Server 22.04 LTS**, we’ll be guided through the process
    of configuring and creating our new virtual machine. The setup page looks like
    this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.33 – Creating a virtual machine in Azure](img/B19682_15_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.33 – Creating a virtual machine in Azure
  prefs: []
  type: TYPE_NORMAL
- en: In the **Basics** tab, information such as the subscription type, resource group,
    region, image, and architecture is provided. The other tabs include **Disks**,
    **Networking**, **Management**, **Monitoring**, **Advanced**, and **Tags**.
  prefs: []
  type: TYPE_NORMAL
- en: '`packt-demo`. If we had a previously created resource group, we could specify
    it here.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`packt-ubuntu-demo` and place it in the `(Europe) France Central` Region, the
    closest to the geographical location where our instance will operate. The size
    of our machine will directly impact the associated costs. The following screenshot
    shows the details that have been specified so far regarding the **Resource group**
    set up, **Virtual machine name**, **Region**, **Availability options**, **Security
    type**, **Image**, **VM architecture**, and **Size**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.34 – Setting up the Azure virtual machine](img/B19682_15_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.34 – Setting up the Azure virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we could browse different options for **Image** and **Size**
    by choosing **See all images** or **See all sizes**, respectively. Azure also
    provides a *pricing calculator* online tool for various resources at [https://azure.microsoft.com/en-us/pricing/calculator/](https://azure.microsoft.com/en-us/pricing/calculator/).
  prefs: []
  type: TYPE_NORMAL
- en: '`packt` and `packt-ubuntu-demo_key`. Next, we must set **Inbound port rules**
    for our instance to allow SSH access. If, for example, our machine will run a
    web server application, we can also enable HTTP and HTTPS access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.35 – Enabling SSH authentication and access to the virtual machine](img/B19682_15_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.35 – Enabling SSH authentication and access to the virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we are ready to create our virtual machine. The wizard can take
    us further to the additional steps of specifying the *disks* and *networking*
    configuration associated with our instance. For now, we’ll leave them as-is.
  prefs: []
  type: TYPE_NORMAL
- en: '**Validating and deploying the virtual machine**: We can click the **Review
    + create** button to initiate the validation process. Next, the deployment wizard
    will validate our virtual machine configuration. In a few moments, if everything
    goes well, we’ll get a **Validation passed** message specifying the product details
    and our instance’s hourly rate. By clicking **Create**, we agree to the relevant
    terms of use, and our virtual machine will be deployed shortly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.36 – Creating the virtual machine](img/B19682_15_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.36 – Creating the virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: 'In the process, we’ll be prompted to download the SSH private key for accessing
    our instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.37 – Downloading the SSH private key for accessing the virtual
    machine](img/B19682_15_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.37 – Downloading the SSH private key for accessing the virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: '**Deployment completion**: If the deployment completes successfully, we’ll
    get a brief pop-up message stating **Deployment succeeded** and a **Go to resource**
    button that will take us to our new virtual machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.38 – Successfully deploying a virtual machine](img/B19682_15_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.38 – Successfully deploying a virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll also get a brief report about the deployment details if we click on the
    relevant drop-down button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.39 – Deployment details](img/B19682_15_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.39 – Deployment details
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a quick look at each of the resources that were created with our
    virtual machine deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '`packt-ubuntu-demo`: The virtual machine host'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packt-ubuntu-demo348`: The network interface (or network interface card) of
    the virtual machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packt-ubuntu-demo-ip`: The IP address of the virtual machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packt-ubuntu-demo-vnet`: The virtual network associated with the resource
    group (`packt-demo`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packt-ubuntu-demo-nsg`: The **Network Security Group** (**NSG**) controlling
    inbound and outbound access to and from our instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure will create a new set of the resource types mentioned previously with
    every virtual machine, except the virtual network corresponding to the resource
    group, when the instance is placed in an existing resource group. Don’t forget
    that we also created a new resource group (`packt-demo`), which is not shown in
    the deployment report.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try to connect to our newly created instance (`packt-ubuntu-demo`). Go
    to `packt-ubuntu-demo`). In the `20.19.173.232`).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve deployed our virtual machine, we want to make sure we can access
    it via SSH. We’ll do that next.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting with SSH to a virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we connect to our virtual machine via SSH, we need to set the permissions
    to our SSH private key file so that it’s not publicly viewable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we must connect to our Azure Ubuntu instance with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We must use the SSH key (`packt-ubuntu-demo_key.pem`) and administrator account
    (`packt`) that were specified when we created the instance. Alternatively, you
    can click on the **Connect** button in the virtual machine’s **Overview** tab
    and then click **SSH**. This action will bring up a view where you can see the
    preceding commands and copy and paste them into your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'A successful connection to our Ubuntu instance should yield the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.40 – Connecting to the Azure virtual machine](img/B19682_15_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.40 – Connecting to the Azure virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve created our first virtual machine in Azure, let’s look at some
    of the most common management operations that are performed during a virtual machine’s
    lifetime.
  prefs: []
  type: TYPE_NORMAL
- en: Managing virtual machines
  prefs: []
  type: TYPE_NORMAL
- en: As our applications evolve, so does the computing power and capacity required
    by the virtual machines hosting the applications. As system administrators, we
    should know how cloud resources are being utilized. Azure provides the necessary
    tools for monitoring the health and performance of virtual machines. These tools
    are available on the **Monitoring** tab of the virtual machine’s management page.
  prefs: []
  type: TYPE_NORMAL
- en: A small virtual machine with a relatively low number of virtual CPUs and reduced
    memory may negatively impact application performance. On the other hand, an oversized
    instance would yield unnecessary costs. Resizing a virtual machine is a common
    operation in Azure. Let’s see how we can do it.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the size of a virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure makes it relatively easy to resize virtual machines. In the portal, go
    to **Virtual Machines**, select your instance, and click **Size** under **Availability
    +** **Scale**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.41 – Changing the size of a virtual machine](img/B19682_15_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.41 – Changing the size of a virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: Our virtual machine (`packt-ubuntu-demo`) is of *B1s* size (1 vCPUs, 1 GB RAM).
    We can choose to size it up or down. For demo purposes, we could resize to the
    lower *B1ls* capacity (1 vCPU, 0.5 GB RAM). We could select the **B1ls** (1 vCPU,
    0.5 GB RAM) option and click the **Resize** button. Lowering the size of our instance
    will also result in cost savings. Azure will stop and restart our virtual machine
    while resizing. It’s always good to stop the machine before changing the size
    to avoid possible data inconsistencies within the instance.
  prefs: []
  type: TYPE_NORMAL
- en: One of the remarkable features of virtualized workloads in Azure is the ability
    to scale – including the storage capacity – by adding additional data disks to
    virtual machines. We can add existing data disks or create new ones.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at how to add a secondary data disk to our virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Adding additional storage
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure can add disks to our instance on the fly, without stopping the machine.
    We can add two types of disks to a virtual machine: **data disks** and **managed
    disks**. In this chapter, we will only provide information on how to add data
    disks. For more information on disk types on Azure, please visit [https://docs.microsoft.com/en-us/azure/virtual-machines/disks-types](https://docs.microsoft.com/en-us/azure/virtual-machines/disks-types).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s learn how to add a data disk:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Virtual machines** in the left navigation menu and select your
    instance, click **Disks** under **Settings**, and then click on **Create and attach
    a** **new disk**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the disk properties, leave the `packt-disk`), **Storage Type**, and **Size**
    (such as **4 GB**) values. Click **Apply** when you’re done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.42 – Adding a new data disk](img/B19682_15_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.42 – Adding a new data disk
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the new disk is attached to our virtual machine, but the disk
    hasn’t been initialized with a filesystem yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to our virtual machine via SSH:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '2.  List the current block devices:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 15.43 – Identifying the block device for the new data disk](img/B19682_15_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.43 – Identifying the block device for the new data disk
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the block device is empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '2.  Next, initialize the volume with an XFS filesystem:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: sudo mkdir /packt
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sudo mount /dev/sdc /packt
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we can use the new data disk for regular file storage.
  prefs: []
  type: TYPE_NORMAL
- en: Note that data disks will only be persisted during the lifetime of the virtual
    machine. When the virtual machine is paused, stopped, or terminated, the data
    disk becomes unavailable. When the machine is terminated, the data disk is permanently
    lost. For persistent storage, we need to use *managed disks*, similar in behavior
    to network-attached storage. See the link at the beginning of this section for
    more details.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have performed all these management operations in the Azure portal.
    But what if you want to automate your workloads in the cloud using scripting?
    This can be done using Azure CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the Azure CLI
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure CLI is a specialized command-line interface for managing your resources
    in the cloud. First, let’s install the Azure CLI on our platform of choice. Follow
    the instructions at [https://docs.microsoft.com/en-us/cli/azure/install-azure-cli](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli).
    We’ll choose the Azure CLI for Linux and, for demo purposes, install it on a Debian
    machine. The related instructions can be found at [https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux).
    From the multiple installation options available, we’ll use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation is complete, we can invoke the Azure CLI with the `az`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command displays detailed help information about using the `az`
    utility. However, before performing any management operations, we need to authenticate
    the CLI with our Azure credentials. The following command will set up the local
    Azure CLI environment accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll be prompted with a message containing an authentication code and the
    URL ([https://microsoft.com/devicelogin](https://microsoft.com/devicelogin)) to
    visit and enter the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.44 – Initializing the Azure CLI environment](img/B19682_15_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.44 – Initializing the Azure CLI environment
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we are ready to use the Azure CLI for management operations.
    Let’s create a new resource group called `packt-dev` in the `West` `US` Region:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command yields the following output upon successfully creating
    the resource group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.45 – Creating a new resource group](img/B19682_15_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.45 – Creating a new resource group
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we must launch an Ubuntu virtual machine named `packt-ubuntu-dev` in
    the Region we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s quickly go through each of the preceding command-line options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`resource-group`: The name of the resource group (`packt-dev`) where we create
    our virtual machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The name of the virtual machine (`packt-ubuntu-dev`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image`: The Linux distribution to use (`Ubuntu2204`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin-username`: The username of the machine’s administrator account (`packt`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate-ssh-keys`: This generates a new SSH key pair to access our virtual
    machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding code produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.46 – Creating a new virtual machine](img/B19682_15_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.46 – Creating a new virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: 'As the output suggests, the SSH key files have been automatically generated
    and placed in the local machine’s `~/.ssh` directory to allow SSH access to the
    newly created virtual machine. The JSON output also provides the public IP address
    of the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command lists all virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also check the Azure portal in your browser to see all your virtual
    machines, including the newly created one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.47 – Viewing the virtual machines in the Azure portal](img/B19682_15_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.47 – Viewing the virtual machines in the Azure portal
  prefs: []
  type: TYPE_NORMAL
- en: 'To get information about a specific virtual machine (`packt-ubuntu-dev`), run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: az vm redeploy \
  prefs: []
  type: TYPE_NORMAL
- en: --resource-group packt-dev \
  prefs: []
  type: TYPE_NORMAL
- en: '--name packt-ubuntu-dev):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE

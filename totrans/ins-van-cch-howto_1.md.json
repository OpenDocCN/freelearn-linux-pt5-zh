["```\n    # sudo rpm --nosignature -i http://repo.varnish-cache.org/redhat/varnish-3.0/el5/noarch/varnish-release-3.0-1.noarch.rpm\n\n    ```", "```\n    # sudo yum install varnish\n\n    ```", "```\n    # sudo service varnish start\n\n    ```", "```\n# sudo chkconfig --list varnish\n\n```", "```\nvarnish0:off 1:off 2:on 3:on 4:on 5:on 6:off\n\n```", "```\n# sudo chkconfig varnish on\n\n```", "```\n# sudo service varnish restart\n\n```", "```\n    # sudo vim /etc/sysconfig/varnish\n\n    ```", "```\n    VARNISH_STORAGE=\"malloc,${VARNISH_STORAGE_SIZE}\"\n\n    ```", "```\n    VARNISH_STORAGE_SIZE=14G\n\n    ```", "```\n    # sudo vim /etc/varnish/default.vcl\n\n    ```", "```\n    backend server01 {\n      .host = \"localhost\";\n      .port = \"8080\";\n    }\n    ```", "```\n    # sudo service varnish reload\n\n    ```", "```\n    backend website {\n      .host = \"localhost\";\n      .port = \"8080\";\n      .probe = {\n        .url = \"/favicon.ico\";\n        .timeout = 60ms;\n        .interval = 2s;\n        .window = 5;\n        .threshold = 3;\n      }\n    }\n    ```", "```\n    backend api {\n      .host = \"localhost\";\n      .port = \"8080\";\n      .probe = {\n        .request = \n        \"GET /status HTTP/1.1\"\n        \"Host: www.yourhostname.com\"\n        \"Connection: close\"\n        \"X-API-Key: e4d909c290d0fb1ca068ffaddf22cbd0\"\n        \"Accept: application/json\"\n        .timeout = 60ms;\n        .interval = 2s;\n        .window = 5;\n        .threshold = 3;\n      }\n    }\n    ```", "```\n    vcl_recv {\n      if ( req.url ~ \"/api/\") {\n        set req.backend = api;\n      } else {\n        Set req.backend = website;\n      }\n    }\n    ```", "```\nprobe favicon {\n  .url = \"/favicon.ico\";\n  .timeout = 60ms;\n  .interval = 2s;\n  .window = 5;\n  .threshold = 3;\n}\n\nprobe robots {\n  .url = \"/robots.txt\";\n  .timeout = 60ms;\n  .interval = 2s;\n  .window = 5;\n  .threshold = 3;\n}\n\nbackend server01 {\n  .host = \"localhost\";\n  .port = \"8080\";\n  .probe = favicon;\n}\n\nbackend server02 {\n  .host = \"localhost\";\n  .port = \"8080\";\n  .probe = robots;\n}\n```", "```\n    director dr1 round-robin {\n      { .backend = server01 }\n      { .backend = server02 }\n      { .backend = server03 }\n      { .backend = server04 }\n    }\n    ```", "```\n    director dr1 client {\n      { .backend = server01 }\n      { .backend = server02 }\n      { .backend = server03 }\n      { .backend = server04 }\n    }\n    ```", "```\n    sub vcl_recv {\n      set client.identity = req.http.X-Forwarded-For;\n    }\n    ```", "```\ndirector dr1 client {\n  { .backend = server01 ; .weight=2; }\n  { .backend = server02 ; .weight=2; }\n  { .backend = server03 ; .weight=2; }\n  { .backend = server04 ; .weight=1; }\n}\n```", "```\n    // commented line\n    # commented line\n    ```", "```\n    set client.identity = req.http.x-forwarded-for;\n    ```", "```\n    if (req.restarts == 0)\n    if (req.request != \"GET\")\n    ```", "```\n    if (req.request != \"GET\"&&req.request != \"HEAD\")\n    ```", "```\n    if (req.url !~ \"^/images/\")\n    if (req.url ~ \"\\.(jpg|jpeg|png|gif)$\")\n    ```", "```\n        regsub(req.url, \"\\?.*\", \"\");\n        ```", "```\n        ban_url(\"\\.xml$\") \n        ban(\"req.http.host ~ \" + yourdomain.com )\n        ```", "```\n        return(restart)\n        return(lookup)\n        return(pipe)\n        return(pass)\n        ```", "```\n        if (!client.ip ~ purge) {\n          error 405 \"Not allowed.\";\n        }\n        ```", "```\nMessage from VCC-compiler:\nExpected ';' got '}'\n(program line 174), at\n('input' Line 93 Pos 9)\n}\n--------#\nRunning VCC-compiler failed, exit 1\nVCL compilation failed\n\n```", "```\n# varnishd -C -f /etc/varnish/default.vcl\n\n```", "```\nif (req.restarts == 0) {\n  if (req.http.x-forwarded-for) {\n    set req.http.X-Forwarded-For =\n    req.http.X-Forwarded-For + \", \" + client.ip;\n  } else {\n    set req.http.X-Forwarded-For = client.ip;\n  }\n}\n```", "```\n  if (req.request != \"GET\"&&\n    req.request != \"HEAD\"&&\n    req.request != \"PUT\"&&\n    req.request != \"POST\"&&\n    req.request != \"TRACE\"&&\n    req.request != \"OPTIONS\"&&\n    req.request != \"DELETE\") {\n    /* Non-RFC2616 or CONNECT which is weird. */\n    return (pipe);\n  }\n```", "```\nif (req.request != \"GET\"&&req.request != \"HEAD\") {\n  /* We only deal with GET and HEAD by default */\n  return (pass);\n}\n```", "```\nif (req.http.Authorization || req.http.Cookie) {\n  /* Not cacheable by default */\n  return (pass);\n}\n```", "```\nreturn (lookup);\n```", "```\n    if (req.url ~ \"\\.(png|gif|jpeg|jpg|ico|swf|css|js|txt|xml)\"\n    || req.url ~ \"/static/\"\n    || req.url ~ \"/images/\") {\n      unset req.http.cookie;\n    }\n    ```", "```\n    if(req.url ~ \"/java/\"\n      set req.backend = java;\n    } else {\n      set req.backend = php;\n    }\n    ```", "```\n    if (req.url ~ \"\\.(conf|log|old|properties|tar|war)$\") {\n      error 403 \"Forbidden\";\n    }\n    ```", "```\nsub vcl_hash {\n  hash_data(req.url);\n  if (req.http.host) {\n    hash_data(req.http.host);\n  } else {\n    hash_data(server.ip);\n  }\n  return (hash);\n}\n```", "```\n    sub vcl_hash {\n      hash_data(req.url);\n      if (req.http.host) {\n        set req.http.host = regsub(req.http.host,\"^www\\.yourdomain\\.com$\", \"yourdomain.com\");\n        hash_data(req.http.host);\n      } else {\n        hash_data(server.ip);\n      }\n      return (hash);\n    }\n    ```", "```\n    if (req.url ~ \"\\.(png|gif|jpeg|jpg|ico|swf|css|js|txt|xml)\"{\n      set req.http.X-HASH = regsub(req.url,\".*\\.yourdomain\\.[a-zA-Z]{2,3}\\.[a-zA-Z]{2}\", \"\");\n    }\n    hash_data(req.http.X-HASH);\n    ```", "```\n    if (req.url ~ \"\\.(html|htm)(\\?[a-z0-9=]+)?$\" {\n      set req.http.X-HASH = regsub(req.http.X-HASH, \"^/.*__\", \"/__\");\n    }\n    hash_data(req.http.X-HASH);\n    ```", "```\nsub vcl_pipe {\n      # Note that only the first request to the backend will have\n      # X-Forwarded-For set.  If you use X-Forwarded-For and want to\n      # have it set for all requests, make sure to have:\n      # set bereq.http.connection = \"close\";\n      # here. It is not set by default as it might \n  # break some broken web applications, like IIS with NTLM    \n  # authentication.\n      return (pipe);\n}\n```", "```\nsub vcl_pass {\n      return (pass);\n}\n```", "```\nsub vcl_pipe {\n      set bereq.http.connection = \"close\";\n      return (pipe);\n}\n```", "```\nsub vcl_fetch {\n      if (beresp.ttl <= 0s ||\n          beresp.http.Set-Cookie ||\n          beresp.http.Vary == \"*\") {\n                    /*\n                     * Mark as \"Hit-For-Pass\" for the next 2 minutes\n                     */\n                    set beresp.ttl = 120 s;\n                    return (hit_for_pass);\n      }\n      return (deliver);\n}\n```", "```\n    if ( req.url ~ \"\\.(png|gif|jpeg|jpg|ico|css|js|txt|xml)(\\?[a-z0-9=]+)?$\"){\n      set beresp.ttl = 1d;\n    }\n    ```", "```\n    if ( req.url ~ \"/static/\") {\n      set beresp.ttl = 30m;\n      unset beresp.http.set-cookie;\n    }\n    ```", "```\n    if ( beresp.status>= 500 &&req.request != \"POST\") {\n      return(restart);\n    }\n    ```", "```\n    sub vcl_recv {\n      if (req.restarts == 0) {\n        # Try the director first.\n        set req.backend = director1;\n      } else if (req.restarts == 1) {\n        # Director has failed and we will try the backend 1.\n        set req.backend = b1;\n      } else if (req.restarts == 2) {\n        # Backend 1 has failed. Try backend 2.\n        set req.backend = b2;\n      } else {\n        # All backend servers have failed. Go to error page.\n        error 503 \"Service unavailable\";\n      }\n    }\n    ```", "```\n    sub vcl_fetch {\n      if (beresp.ttl<= 0s) {\n        # Cannot cache. Backend provided an expired TTL\n        set beresp.http.X-Cacheable = \"NO:ExpiredTTL\";\n      } elsif (req.http.Cookie) {\n        # Presence of cookies.\n        set beresp.http.X-Cacheable = \"NO:Cookies\";\n      } elsif (beresp.http.Cache-Control ~ \"private\") {\n        # Cache-control is private\n        set beresp.http.X-Cacheable = \"NO:Cache-Control=private\";\n      } else {\n        set beresp.http.X-Cacheable = \"YES\";\n      }\n      return(deliver);\n    }\n    ```", "```\nsub vcl_deliver {\n  return (deliver);\n}\n```", "```\n    sub vcl_deliver {\n      unset resp.http.Server;\n      return (deliver);\n    }\n    ```", "```\n    sub vcl_deliver {\n      unset resp.http.Server;\n      unset resp.http.Via;\n      unset resp.http.Age;\n      unset resp.http.X-Varnish;\n      return (deliver);\n    }\n    ```", "```\n    sub vcl_deliver {\n      if (obj.hits> 0) {\n        set resp.http.X-Cache = \"HIT\";\n      } else {\n        set resp.http.X-Cache = \"MISS\";\n      }\n      unset resp.http.Via;\n      unset resp.http.Age;\n      unset resp.http.X-Varnish;\n      unset resp.http.Server;\n      return (deliver);\n    }\n    ```", "```\nsub vcl_error {\n      set obj.http.Content-Type = \"text/html; charset=utf-8\";\n      set obj.http.Retry-After = \"5\";\n      synthetic {\"\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n     \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n    <html>\n        <head>\n          <title>\"} + obj.status + \" \" + obj.response + {\"</title>\n        </head>\n        <body>\n          <h1>Error \"} + obj.status + \" \" + obj.response + {\"</h1>\n          <p>\"} + obj.response + {\"</p>\n          <h3>Guru Meditation:</h3>\n          <p>XID: \"} + req.xid + {\"</p>\n          <hr>\n          <p>Varnish cache server</p>\n        </body>\n    </html>\n  \"};\n      return (deliver);\n}\n```", "```\n    sub vcl_recv {\n      error 503 \"Service unavailable\";\n    }\n    sub vcl_error{\n      if ( obj.status == 503 ) {\n        set obj.http.Content-Type = \"text/html; charset=utf-8\";\n        set obj.http.Retry-After = \"5\";\n        synthetic {\"\n          ### Insert here the HTML for the maintenance page ###\n        \"}\n      }\n    }\n    ```", "```\n    sub vcl_error {\n      if (obj.status>= 500) {\n        set obj.http.location = \"http://www.yourwebsite.com\";\n        set obj.status = 302;\n        return (deliver);\n      }\n    }\n    ```", "```\n    sub vcl_fetch {\n      if ( req.url ~ \" \\.(png|jpg|gif)$\") {\n        set beresp.ttl = 1w;\n        unset beresp.http.Set-Cookie;\n      }\n      if ( req.url ~ \" \\.(css|js)$\") {\n        set beresp.ttl = 1h;\n        unset beresp.http.Set-Cookie;\n      }\n      if ( req.url ~ \" \\.(html)$\") {\n        set beresp.ttl = 15m;\n        unset beresp.http.Set-Cookie;\n      }\n    }\n    ```", "```\n    sub vcl_fecth {\n      if ( req.url ~ \"/donotcache\\.html\") {\n        set beresp.ttl = 0s;\n      }\n    }\n    ```", "```\n    sub vcl_recv {\n      if (req.http.Authorization || req.http.Cookie) {\n        return (pass);\n      }\n    }\n    ```", "```\n    sub vcl_recv {\n      if (req.http.Cookie) {\n        return (lookup);\n      }\n    }\n    sub vcl_hash {\n      hash_data(req.url);\n      if ( req.http.Cookie ~ \"cookie_set_for_unique_users\" ) {\n        hash_data(req.http.cookie);\n      }\n    }\n    ```", "```\nExpires: Fri, 30 Oct 1998 14:19:41 GMT\nCache-Control: max-age=3600\n\n```", "```\n    acl purge {\n      \"localhost\";\n      \"10.1.0.0\"/24;\n      \"172.16.11.0\"/23;\n    }\n    ```", "```\n    sub vcl_hit {\n      if (req.request == \"PURGE\") {\n        if (!client.ip ~ purge) {\n          error 405 \"Not allowed.\";\n        } else {\n          purge;\n          error 200 \"Purged.\";\n        }\n      }\n      return (deliver);\n    }\n\n    sub vcl_miss {\n      if (req.request == \"PURGE\") {\n        if (!client.ip ~ purge) {\n          error 405 \"Not allowed.\";\n        } else {\n          purge;\n          error 200 \"Not in cache.\";\n        }\n      }\n      return (fetch);\n    }\n    ```", "```\n    sub vcl_recv {\n      if (req.request == \"BAN\") {\n        if (!client.ip ~ purge) {\n          error 405 \"Not allowed.\";\n        }\n        ban(\"req.http.host == \" + req.http.host + \"&&req.url == \" + req.url);\n        error 200 \"Banned\";\n      }\n    }\n    ```", "```\n    ban req.url ~ \"\\.jpg$\"\n    ```", "```\n    sub vcl_fetch {\n      if (beresp.http.content-type ~ \"text\") {\n        set beresp.do_gzip = true;\n      }\n    }\n    ```", "```\n    sub vcl_fetch {\n      if ( req.url ~ \"\\.(html|htm|css|js|txt|xml)(\\?[a-z0-9=]+)?$\" ) {\n        set beresp.do_gzip = true;\n      }\n    }\n    ```", "```\n    # varnishstat\n\n    ```"]
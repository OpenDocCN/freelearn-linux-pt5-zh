- en: Vulnerability Scanning and Intrusion Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Network security monitoring using Security Onion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding vulnerabilities with OpenVAS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Nikto for web server scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardening using Lynis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network security monitoring using Security Onion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Security Onion** is a Linux-based distribution built for the purpose of network
    security monitoring. Monitoring the network for security-related events can be
    proactive, if used to identify vulnerabilities, or it can be reactive, in cases
    such as incident response.'
  prefs: []
  type: TYPE_NORMAL
- en: Security Onion helps by providing insight into the network traffic and context
    around alerts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed the process of installing and configuring Security Onion on a system
    in previous chapters. Having followed those steps, we have an up-and-running system
    with Security Onion installed on it.
  prefs: []
  type: TYPE_NORMAL
- en: No other prerequisites are needed for using Security Onion.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will walk through a few tools included in Security Onion
    that can help in security monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we are done with the setup of the security tools included in Security
    Onion, we have to create a user account to use these tools. Open the Terminal
    and run the following command to create a user for the tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4114c9cf-5ebc-4407-b666-d6119547be1d.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding step, we have created a user named `pentest1` and then configured
    the password for them.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have created the user account, we can start using the tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the desktop, we can find the icon for the SGUIL tool. Double-click on the
    icon to run the tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A login screen will open, as shown here. Enter the user details configured
    in the previous step and click on **OK**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f901923a-7121-46d6-a247-f54b7432c48a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the user details are validated, the next window will ask to select the
    network to monitor. Select the interface from the options available and click
    on **Start SGUIL** to proceed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3295d476-5e84-449c-a3bc-9aae527aeddc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We get the window shown next. This is the main screen of the SGUIL tool. Here,
    we can monitor the real-time events happening on the network selected in the previous
    step, along with the session data and raw packet captures:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9166f8e1-adda-4255-b751-7e4f238bc89e.png)'
  prefs: []
  type: TYPE_IMG
- en: More information about using the tool can be found at [http://bammv.github.io/sguil/index.html](http://bammv.github.io/sguil/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other tools also included in Security Onion, such as Kibana. To access
    this tool, we can find the shortcut on the desktop. Once we double-click on the
    shortcut, it will open the browser pointing at the URL: `https://localhost/app/kibana`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The browser will give a warning regarding **Insecure connection/Connection
    is not private** as a self-signed SSL certificate is being used. Ignore the error,
    shown as follows, click on Advanced, and proceed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/70450764-83f3-4bcd-a6b7-8cc8435f3729.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, Kibana will ask for user details to log in. Use the user details configured
    in the first step. Once successfully logged in, we get the following window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f362b4f4-1528-4f51-8c08-0cfb93a65da4.png)'
  prefs: []
  type: TYPE_IMG
- en: Kibana helps in visualizing Elasticsearch data and also navigating the Elastic
    stack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security Onion includes other tools that can be used to monitor various activities
    in the network. Explore the tools to get more insight into them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security Onion is an open source Linux distribution used for enterprise security
    monitoring, intrusion detection, and log management. To help administrators perform
    security monitoring, it includes various security tools, such as Sguil, Kibana,
    Suricata, Snort, OSSEC, Squert, NetworkMiner, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: Finding vulnerabilities with OpenVAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a Linux administrator, we would like to keep track of vulnerabilities that
    may exist in the system. Finding these vulnerabilities in good time would also
    help in fixing them before any attack exploits them.
  prefs: []
  type: TYPE_NORMAL
- en: To find the vulnerabilities, we can use a vulnerability scanning tool such as
    **OpenVAS**. It is one of the most advanced open source vulnerability scanning
    tools around.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use OpenVAS, we have to first install and configure it on our system. For
    more information about the installation and configuration process, we can refer
    to the official website of OpenVAS: [http://www.openvas.org/](http://www.openvas.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we are done with the installation and initial configuration of OpenVAS,
    we can use it to scan the servers in our network. In this section, we will see
    how to configure and run a scan:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access OpenVAS, access this URL in the browser: `https://127.0.0.1:9392`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will get a login screen as shown here. Enter the user details configured
    during the installation of OpenVAS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b56dc8b6-41b3-4611-94b6-cb0ef56b4f38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After being logged in, we get the following window. In the top menu, we can
    find different options to use, such as **Scan**, **Assets**, and **Configuration**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c57e29b4-00c6-4fdf-bc79-b738de331549.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To scan a server, we will first add it as a target to scan. To do this, click
    on **Configuration** and then click on **Target**, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9ede5d0b-097a-40d9-8570-510ea57899d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will get the following window. In the top left, we can see a star icon.
    Once we click on this icon, it will open a new window to add the target server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3e23ccac-d6a5-4282-8ba6-542930db8aab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the new window, enter the details of the target server. Give it a name to
    identify the target easily, and then enter the IP address as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bda48ed9-6c41-40fa-a3c8-ad703021907f.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the details have been entered, click on Create to save the target in the
    target list.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see out target server under the target list here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f377cd8a-a48a-46f0-891e-e6eede3d067d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we click on the **Scan** menu and then click on **Tasks** to start creating
    a scan task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/572b6133-22a7-47c7-b55e-0fefbcb5fd37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next window, click on the blue star icon and then click on **New Task**
    to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5f60e844-bd44-4104-9fc5-c0598a7dd771.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will give a name to the scan we are creating and then select our target
    server using the list under the **Scan Targets** menu, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22b4a528-84c2-452c-b031-6793ece28e07.png)'
  prefs: []
  type: TYPE_IMG
- en: For the schedule option, check the Once box to run the scan only once. We can
    schedule the scan to be run multiple times, as per requirements. Next, click on
    Create.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we click on Create, our scan task has been created and can be seen in
    the task list, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9dba7d9-d952-47e8-9f20-9cd3d25ba542.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Toward the extreme right of the scan that we have created, we can see some
    buttons in the **Actions** column, shown as follows. Here, we can start or pause
    a scan task created earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7e4035d8-2f45-47c4-a089-22a6731ff03e.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we click on the start or play button shown in the preceding screenshot,
    our scan will start running. Depending on the network speed and other resources,
    the time to complete the scan may vary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the scan completes, it can be seen in the **Scan Task** list, shown as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81886fc4-915d-4335-96e0-4ea3bbec7598.png)'
  prefs: []
  type: TYPE_IMG
- en: The **Severity** column shows the summary of the scan. It shows the count of
    issues found based on their severity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/47ea5c8f-0314-4b7b-9269-2d366e5a2717.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To check the complete list of the vulnerabilities found by the scanner, we
    can click on the **Scan name** and we will see the list of the vulnerabilities
    found by OpenVAS, as seen here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca91cbb7-be48-40b4-a95a-410ba9b4c3ff.png)'
  prefs: []
  type: TYPE_IMG
- en: List of the vulnerabilities found by OpenVAS
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVAS lets us add the servers we wish to scan using the **Target** option.
    Once the server has been added, we create a **Scan task** by using the **Scan
    menu**. In the **Scan task**, we select the target created earlier, on which the
    scan needs to be performed.
  prefs: []
  type: TYPE_NORMAL
- en: When the **Scan task** is successfully configured, we run the scan. At completion,
    we can see the list of vulnerabilities found by OpenVAS.
  prefs: []
  type: TYPE_NORMAL
- en: Using Nikto for web server scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If our Linux server is configured to run as a web server, there is a chance
    that the web server and the web application hosted on the web server may have
    vulnerabilities. In such a cases, we can use a web application scanning tool to
    identify these vulnerabilities, and Nikto is one such open source web scanner.
  prefs: []
  type: TYPE_NORMAL
- en: It can be used with any web server and can scan for a large number of items
    to detect vulnerabilities, misconfigurations, risky files, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use Nikto to scan our web server, we have to first install it on our system,
    from where the scan will be done. If we are using Kali Linux, Nikto comes preinstalled
    in it. For other Linux distributions, we can install the tool using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37b42b26-9804-4fd3-a878-bb3fbf41118c.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to use Nikto to examine the web server and
    report potential vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see more details about the options supported by Nikto, we run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c6497e1a-b9ed-473e-aef6-b8a9bb665725.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Nikto supports various plugins for finding different vulnerabilities. If we
    want to see the list of plugins, we can use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1039d1f8-2a41-4dc9-9cea-3cec8033424e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s use Nikto to run the scan on our web server with the IP address
    `192.168.43.100`. We start the scan using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9def49f5-9347-44fd-bace-2a8484ff0c68.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we run the command, the scan will start running. Depending on the network
    speed and the number of vulnerabilities that may exist, the time to complete the
    scan may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see in the following screenshot that a few vulnerabilities have been
    identified by Nikto in our web server. It also tells us that the web server is
    running Apache 2.2.8, as seen before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02b46aef-864e-49c7-b307-d7c0ddbfe08e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nikto comes with over 6,700 plugins, using which it can test for possible security
    issues in a web server.
  prefs: []
  type: TYPE_NORMAL
- en: Once we run the scan, Nikto uses these plugins, checks for all the vulnerabilities,
    and reports them if found.
  prefs: []
  type: TYPE_NORMAL
- en: Hardening using Lynis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Lynis** is a open source security tool that helps in auditing Unix-like systems.
    It performs an extensive scan of the system and, based on the results, provides
    guidance for system hardening and compliance testing.'
  prefs: []
  type: TYPE_NORMAL
- en: Lynis can be used for various purposes, including vulnerability detection, penetration
    testing, security auditing, compliance testing, and system hardening.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lynis is supported on almost all Unix-based operating systems and versions.
    We can obtain a copy of Lynis from its official website by visiting the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cisofy.com/documentation/lynis/get-started/](https://cisofy.com/documentation/lynis/get-started/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For our example, we are using an Ubuntu system to install Lynis. We run the
    following command to install the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a2be2190-7ca2-459a-bcfa-7deab04599b2.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to use Lynis to perform a detailed audit of
    the system security aspects and configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Lynis is installed on our system, we can run the `lynis` command, as follows,
    to check out more information about the options supported by the tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e85df688-59d9-4e35-a24e-36a1ada8e583.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can check whether this version of Lynis is the latest by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e554274f-623e-4f58-b9fe-bb5de9f8d555.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see in the output that the current version is `211` and the latest version
    available is `266`. If we wish to update the version, we can continue with the
    steps shown in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will start the scan to audit our system and identify the gaps by running
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e9aa972-be84-4c61-8025-85d4272f452c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As the scan progresses, we can see the findings of the scan in the output shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7cb8b158-8f54-4e9b-b2b3-48cd9ee3aae8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following output, we can see that Lynis has identified missing modules
    on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4c0d88a-5457-4809-9aa8-016b595ae441.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the scan completes, we can see the summary of the scan, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0484510-62df-482b-b81b-4a96dcf9f1bb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we use Lynis to audit the system, it first initializes and performs basic
    checks to determine the operating system and tools. Lynis will then run the enabled
    plugins and security tests, as per the categories defined
  prefs: []
  type: TYPE_NORMAL
- en: Lynis performs hundreds of tests, which will help in determining the security
    state of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Once the scan completes, Lynis will report the status of the scan.
  prefs: []
  type: TYPE_NORMAL

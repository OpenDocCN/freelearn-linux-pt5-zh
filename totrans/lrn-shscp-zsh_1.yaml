- en: Chapter 1. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 入门
- en: So, what's the deal with Z shell? You probably have a solid notion of what to
    expect from a modern shell, so things such as command history, completion, and
    autocorrection will not wow you as much as someone who just discovered Bash. However,
    unlike some of the other available shells out there, Z shell (zsh) boasts of a
    really powerful scripting language and an incredible completion system. Actually,
    incredible doesn't even begin to describe it. Swift and effortless sounds a bit
    more appropriate. Zsh also incorporates—and arguably, improves on—many of the
    useful features of Bash, ksh, and csh, even going so far as to allow you to emulate
    these shells in your scripts for an extra layer of compatibility.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Z shell 到底有什么特别之处呢？你大概已经对现代 shell 有了一个清晰的概念，因此像命令历史、补全和自动修正这样的功能可能不会像那些刚刚发现
    Bash 的人那样让你惊讶。然而，与其他可用的 shell 相比，Z shell（zsh）拥有一个非常强大的脚本语言和令人惊叹的补全系统。其实，用“惊叹”都无法形容它的强大，“快速而轻松”可能更为贴切。zsh
    还融合了 Bash、ksh 和 csh 中的许多有用功能，甚至可以在脚本中模拟这些 shell，以增加额外的兼容性。
- en: Once you discover things such as multiline editing or start relying on automatic
    spell correction though, I promise you will look back at your old days of keyboard
    mashing buttons and wonder why you didn't make the switch sooner. So let's get
    started with it, shall we?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你发现了多行编辑或开始依赖自动拼写修正，我保证你会回头看看自己以前用键盘乱按按钮的日子，想知道为什么没有早点切换到 zsh。所以，让我们开始吧，好吗？
- en: In this chapter, we will start by getting to know zsh, with a quick glimpse
    at some of the features that make it unique. Before we embark on our adventure
    though, we will need to install and configure our new shell, so we can ensure
    everything is up and running smoothly. We then move on to the configuration—what
    are the startup files, and how to use the different styles, escape sequences,
    and conditional expressions in order to customize the prompt.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将从了解 zsh 开始，我们会快速浏览一些使其与众不同的功能。不过，在我们开始冒险之前，我们需要安装并配置新的 shell，确保一切顺利运行。接下来，我们将进入配置部分——启动文件是什么，如何使用不同的样式、转义序列和条件表达式来自定义提示符。
- en: Installing zsh
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 zsh
- en: Like most things on your system, zsh needs to be installed and maintained; so,
    in this section we will learn how to do that. Note though, in order to avoid introducing
    inconsistencies and/or incompatibilities into your operating system, the recommended
    way of installing zsh is straight from your package maintainer's available sources.
    Either refer to your system's documentation or head to zsh's home page ([http://zsh.sourceforge.net](http://zsh.sourceforge.net))
    to learn more about the whole installation procedure.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 和你系统中的大多数东西一样，zsh 也需要安装和维护；因此，在本节中，我们将学习如何进行安装。不过需要注意，为了避免引入不一致性或不兼容问题，安装 zsh
    的推荐方式是直接从你的软件包维护者提供的源进行安装。可以参考系统文档，或者访问 zsh 的主页（[http://zsh.sourceforge.net](http://zsh.sourceforge.net)）了解整个安装过程。
- en: 'Before getting started, it would be a good idea to check whether you will need
    to install or update your current installation of zsh, as the package could already
    be installed on some Unix systems. So, open up your favorite terminal emulator
    and type in the following command:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，最好检查一下是否需要安装或更新当前的 zsh 安装，因为某些 Unix 系统可能已经安装了该软件包。打开你喜欢的终端模拟器，并输入以下命令：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should print out something like `/bin/sh` or `/bin/bash` on most systems,
    and this means that your current login shell is something other than zsh. If you
    see `zsh` in the result though, go ahead and call the following commands:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会在大多数系统上输出类似`/bin/sh`或`/bin/bash`的内容，这意味着你当前的登录 shell 不是 zsh。如果结果中显示的是`zsh`，那么可以继续执行以下命令：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With some luck (and a healthy regime of system updates on your side, of course),
    you should see zsh's version, something that pretty much resembles the previous
    snippet. If that's the case, you can go ahead and skip this section. Should your
    operating system greet you with a polite **zsh not found** message. That's ok
    though, otherwise you wouldn't be reading these lines. Let's get into the installation
    part of the deal, shall we?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运气好（当然，你的系统更新工作也得做好），你应该会看到 zsh 的版本信息，类似于之前的代码片段。如果是这种情况，你可以跳过本节内容。如果你的操作系统提示你**未找到
    zsh**，也没关系，这样的话你才会看到这些内容。让我们进入安装部分吧，好吗？
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We'll use the latest stable release—version 5.0.2 as at the time of writing
    this book—as a reference in this book. So it is advisable to try and update your
    current installation if you are running a previous release. Refer to your package
    manager's documentation in order to update zsh.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中将以最新的稳定版——截至本书写作时为版本 5.0.2——作为参考。因此，如果你运行的是早期版本，建议尝试更新你的现有安装。请参阅你的包管理器文档以更新
    zsh。
- en: Installing on Linux
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Linux 上安装
- en: Depending on which distribution of Linux your PC is currently sporting, zsh
    might (or might not) be in its repositories or, better yet, already installed
    on your OS. You should always refer to your OS's package listing in the rare event
    that zsh is unavailable.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你当前使用的 Linux 发行版，zsh 可能（或可能不会）在其软件仓库中，或者更好的是，已经安装在你的操作系统中。在极少数情况下，如果 zsh 不可用，你应始终查阅操作系统的包列表。
- en: 'On Debian and its multitude of derived distributions—such as Ubuntu and Linux
    Mint—you could get the whole installation process completed by simply opening
    a terminal and running the following commands:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Debian 及其众多衍生发行版（如 Ubuntu 和 Linux Mint）上，你可以通过打开终端并运行以下命令来完成整个安装过程：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Depending on your flavor of Debian and its repositories, you could get any version
    of zsh ranging from 4.3.x to 5.0.0 and upwards (if using any current release,
    at least). Again, try to stick to the latest and greatest whenever possible.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的 Debian 版本及其软件仓库，你可以获得从 4.3.x 到 5.0.0 及更高版本的 zsh（至少在使用当前发行版时是如此）。再次强调，尽可能使用最新版本。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can always check the version of zsh by running `zsh --version` in the terminal.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在终端中运行 `zsh --version` 来检查 zsh 的版本。
- en: 'Red Hat-based distributions such as Fedora will need you to input the following
    commands:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Red Hat 的发行版，如 Fedora，你需要输入以下命令：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, there are the openSuSE users:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是 openSuSE 用户：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And let''s not forget the Arch users:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也不要忘记 Arch 用户：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Wait for the download and installation scripts/triggers to complete, go ahead,
    and skip to the next section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 等待下载和安装脚本/触发器完成后，可以跳到下一节。
- en: Installing on OS X
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 OS X 上安装
- en: 'Arguably, the easiest way to get your hands on zsh in OS X is either via Homebrew
    ([http://www.brew.sh](http://www.brew.sh)) or MacPorts ([http://www.macports.org](http://www.macports.org)),
    package managers that aim to extend the default options available to OS X users.
    Unfortunately, neither of these options come bundled with OS X. You will need
    to install either of the solutions before you can go ahead and make do with the
    latest version of zsh (which remains 5.0.2 at the time of writing this book).
    So, open your terminal emulator of preference, and either type:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，在 OS X 上获取 zsh 的最简单方法是通过 Homebrew ([http://www.brew.sh](http://www.brew.sh))
    或 MacPorts ([http://www.macports.org](http://www.macports.org))，这两款包管理器旨在扩展 OS
    X 用户可用的默认选项。不幸的是，这两个选项都没有捆绑在 OS X 中。你需要先安装其中一个解决方案，然后才能使用最新版本的 zsh（截至本书写作时仍为 5.0.2）。所以，打开你喜欢的终端模拟器，输入以下命令：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: or
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Wait for the download and installation scripts to finish, and then go ahead
    and jump straight into the next section. Also, refer to the documentation of each
    application in order to troubleshoot any kind of problems that could come up during
    the installation of the package.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 等待下载和安装脚本完成后，直接跳到下一节。同时，请参阅每个应用程序的文档，以排查安装过程中可能出现的任何问题。
- en: Compiling from source
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源代码编译
- en: 'The official home for zsh is located at [zsh.sourceforge.net](http://zsh.sourceforge.net),
    and this is where you should point your browser in order to get started with your
    building adventure. Keep in mind, though, that the recommended way of obtaining
    a zsh binary for your system is via the compiled binaries packages. If for some
    reason, however, you just want to get the latest and greatest and don''t mind
    dealing with more bugs than those of a stable release, you most likely will need
    to clone the repo using the Git version control software:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: zsh 的官方网站位于[zsh.sourceforge.net](http://zsh.sourceforge.net)，你应该在浏览器中访问该网址，开始你的构建之旅。不过请记住，获取系统
    zsh 二进制文件的推荐方法是通过已编译的二进制包。如果因为某些原因你想要获得最新的版本，并且不介意处理比稳定版本更多的 bug，你很可能需要使用 Git
    版本控制软件克隆仓库：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Make sure you check-out and track the master branch, which is where the latest
    goodies have been committed. Also, keep in mind that there are some dependencies
    that need to be met before you can build your fresh local copy of zsh. These are
    all well-documented in the many configuration files that have been cloned into
    your disk, so take a long, hard look at the `README` file before you attempt things
    such as building the configure script.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你检出了并跟踪了 master 分支，因为最新的更改都已经提交到该分支。还要记住，在你构建本地的 zsh 副本之前，有一些依赖项需要满足。这些依赖项都在已克隆到你磁盘上的多个配置文件中有详细文档说明，因此在尝试构建配置脚本等操作之前，最好仔细查看
    `README` 文件。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Installing Git on your platform of choice goes beyond the scope of this book,
    but be rest assured that you won't have trouble following the instructions at
    [http://www.git-scm.com](http://www.git-scm.com).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的平台上安装 Git 超出了本书的范围，但请放心，你按照[http://www.git-scm.com](http://www.git-scm.com)上的说明操作时不会遇到任何问题。
- en: First run
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首次运行
- en: 'Now that zsh is on your system, how about we take it for a spin? Go ahead and
    open your terminal emulator of choice and call the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 zsh 已经安装在你的系统上了，我们来试试它怎么样？打开你喜欢的终端模拟器，输入以下命令：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Like many other applications these days, zsh has a first-run wizard (bear with
    me, it almost resembles one). This is one of those magic creatures whose sole
    purpose is to help us configure our tools on a swift swoop of questions and decision
    making. We'll skip the new user configuration this time, but feel free to choose
    whatever method works best for you, taking the question-by-question approach or
    just pressing *Q* on your keyboard to abort the operation. Just remember that
    the `newuser` module is called from `<zshInstallFolder>/Functions/Newuser/zsh-newuser-install`
    or `<zshInstallFolder>/functions/zsh-newuser-install` in OS X—should you require
    its services in the future.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 和许多其他应用程序一样，zsh 也有一个首次运行向导（请耐心点，它几乎像是一个向导）。它是一种神奇的工具，唯一的目的就是帮助我们通过一连串的问题和决策快速配置我们的工具。我们这次跳过新用户配置，但你可以根据自己的需要选择适合你的方法，要么一项一项地回答问题，要么直接按
    *Q* 来中止操作。只需记住，`newuser` 模块在 `<zshInstallFolder>/Functions/Newuser/zsh-newuser-install`
    或 `<zshInstallFolder>/functions/zsh-newuser-install` 中可以找到——如果将来需要它的帮助，随时可以使用。
- en: 'In order to avoid having to skip the configuration options on each subsequent
    run, you can go ahead and create what is known as a *startup file*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免每次运行时都跳过配置选项，你可以创建一个所谓的 *启动文件*：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We just created our main preferences file; the problem is, it stands empty as
    it is. Let's go ahead and add some preferences, shall we?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了主偏好文件；问题是，它目前是空的。我们接下来加一些偏好设置，好吗？
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There will be plenty of references to zsh's options—the various settings that
    alter the shell's behavior—thus, now is as good a time as any to establish a couple
    of conventions. Firstly, the naming scheme is somewhat too forgiving—it is case-insensitive
    and ignores underscores and ignores underscores. As such, both the following option
    names mean the same.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在文中会多次提到 zsh 的选项——这些设置会改变 shell 的行为——因此，现在是时候为它们制定一些约定了。首先，命名规则有些过于宽松——它是区分大小写的，并且忽略下划线。所以，以下两个选项名称是等同的。
- en: '`SOME_OPTION` and `SOMEOPTION`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`SOME_OPTION` 和 `SOMEOPTION`'
- en: Secondly, try to think of options as *switches*. As the name implies, they can
    either be turned *on* or *off*. Of the many ways that zsh provides to toggle its
    options, it is arguably easier to remember the `setopt`/`unsetopt` combo.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，试着将选项看作是 *开关*。顾名思义，它们可以被 *开启* 或 *关闭*。在 zsh 提供的众多切换选项的方式中，最容易记住的可能就是 `setopt`/`unsetopt`
    组合。
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Conversely, you can negate the behavior of an option by prepending `NO` to its
    name, thus making `unsetopt SOME_OPTION` mean the same as `setopt NO_SOME_OPTION`
    or, keeping in mind that underscores are only there for human readability, the
    same as `setopt NOSOMEOPTION`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你可以通过在选项名前加上 `NO` 来否定该选项的行为，从而使 `unsetopt SOME_OPTION` 与 `setopt NO_SOME_OPTION`
    或者考虑到下划线仅仅是为了便于人类阅读，等同于 `setopt NOSOMEOPTION`。
- en: Just for sanity's sake and because I do love me some standards, we'll use `ALL_CAPS_SNAKE_CASE`
    for the options in this book.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免混乱，并且因为我喜欢标准化，我们将在本书中使用 `ALL_CAPS_SNAKE_CASE` 来表示选项。
- en: 'Open `~/.zshrc` with your favorite editor; you can use editors such as vim,
    Emacs, nano, or whatever kids find cool these days, and add the following line:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用你喜欢的编辑器打开 `~/.zshrc`；你可以使用 vim、Emacs、nano 或者现在孩子们喜欢的任何编辑器，添加以下一行：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s go over what we just typed: the first line of the code is our way to
    tell the shell to start its `promptinit` module—a series of functions that deal
    with handling the shell''s various prompts and functionality. What you see right
    after the hash sign is just a comment to remind you of what the command is doing
    and why it is there. Finally, the last line is the one that actually calls and
    initializes the prompt module. It might not seem much, but it will come in handy
    when dealing with prompts, I promise.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下刚才输入的内容：代码的第一行是我们告诉 shell 启动其 `promptinit` 模块的方式——这是一系列处理 shell 各种提示符和功能的函数。井号后面的内容仅是一个注释，用来提醒你该命令的作用和它为什么在这里。最后一行才是实际调用和初始化提示符模块的代码。看起来可能不算什么，但当你处理提示符时，它会派上用场，我保证。
- en: Feel free to omit the comments and make sure you save your changes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 随时可以省略注释，并确保保存更改。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Zsh will ignore each line that starts with a hash (`#`)—or pound—sign. This
    is really helpful for debugging preferences and, better yet, documenting your
    functionality. Consider the next example, with comments in bold:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Zsh 会忽略每一行以井号（`#`）——或称为磅符——开头的内容。这对于调试首选项非常有用，更好的是，它可以帮助你记录功能。请看下一个例子，其中的注释以粗体显示：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Making zsh your login shell
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 zsh 设置为登录 shell
- en: If there's something that shells take seriously, is their role. See, the thing
    with shells is that they like to hang out in very specific categories—they are
    either interactive or non-interactive, and then there are login shells.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一件事 shell 会认真对待，那就是它们的角色。你看，shell 的问题是它们喜欢被分为非常特定的类别——它们要么是交互式的，要么是非交互式的，然后还有登录
    shell。
- en: As you might have guessed from their name, *interactive shells* allow you to
    interact with them; that is, they display a prompt, you enter a command, and they
    get back to you with an answer and a prompt that is ready for new input. On the
    other hand, Apply interactive shells get called to execute a script and go off
    their own merry way when the job is done.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从它们的名字中可能猜到的，*交互式 shell* 允许你与它们进行交互；也就是说，它们会显示一个提示符，你输入一个命令，然后它们会返回一个答案，并准备好接受新的输入。另一方面，应用交互式
    shell 会在执行脚本时被调用，并在完成任务后自行退出。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Put simply, a prompt usually is the blinking cursor that tells you a shell is
    ready for you.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，提示符通常是闪烁的光标，告诉你 shell 已准备好接受输入。
- en: What about login shells then? Well, unlike interactive shells, *login shells*
    are usually called when the user performs a login—be it either on the local machine
    or when using tools such as SSH, for example—and takes the trouble to go through
    your startup files and configuration bits and pieces of the shell. More importantly,
    your login shell doesn't necessarily need to be interactive.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，登录 shell 怎么样呢？好吧，不像交互式 shell，*登录 shell* 通常在用户登录时被调用——无论是在本地计算机上，还是使用像 SSH
    这样的工具——并且会仔细读取你的启动文件和配置项。更重要的是，登录 shell 不一定需要是交互式的。
- en: In the previous section, we used a direct call to the binary `zsh` to start
    zsh. As you can imagine, this is but a temporary workaround, as typing the name
    of the shell every single time we want to use it seems a bit impractical, to say
    the least. Even worse is the thought of having your previous shell lurking beneath
    and ready to jump back at you as soon as you're done with zsh. If you don't trust
    me, go ahead and type `exit`; I'll wait. See that thing that's on your screen?
    That's your former command-line companion right there. Say your goodbyes and hop
    back into zsh by typing `zsh` and pressing *return*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用了直接调用二进制文件 `zsh` 来启动 zsh。正如你可以想象的那样，这只是一个临时的解决方法，因为每次我们想使用它时都输入 shell
    的名字，显得有点不切实际。更糟糕的是，你会想到前一个 shell 可能还在后台等待，一旦你结束使用 zsh，它就会准备好重新跳出来。如果你不相信我，可以输入
    `exit`；我等着你。看到屏幕上显示的那个吗？那就是你以前的命令行伴侣。和它说再见后，输入 `zsh` 并按 *回车* 重新进入 zsh。
- en: So what comes next is—you guessed it—getting rid of that old shell of yours
    and saving yourself the trouble of remembering to call `zsh` each time you want
    to use it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所以接下来要做的就是——你猜对了——摆脱你那个旧的 shell，省去每次想用 zsh 时都要记得调用它的麻烦。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can always trick zsh, and many other shells, into thinking it is a login
    shell by starting it with either the `-l` or `--login` flag. Open your terminal
    and type either of the following commands:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在启动 zsh 时使用 `-l` 或 `--login` 标志，欺骗 zsh 和许多其他 shell，使它认为自己是一个登录 shell。打开终端并输入以下命令之一：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: or
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Voilà! A shell with a login complex.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Voilà！一个带有登录功能的 shell。
- en: 'Luckily for us, the Unix `chsh` command seems to be just what the doctor recommended,
    so go ahead and type the following in your terminal:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Unix 的 `chsh` 命令似乎正是医生推荐的那个，所以请在终端中键入以下命令：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the previous snippet, we're telling the system to change the shell for the
    current user. The option `-s` is used here to specify the location of the shell
    binary. That fancy `$()` construct you see there is our way of telling the shell
    to expand the result of the command within the parentheses, which is the result
    of the command `which zsh`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一段代码中，我们告诉系统为当前用户更改 shell。这里使用的 `-s` 选项是用来指定 shell 二进制文件的位置的。你看到的那个复杂的 `$()`
    构造是我们告诉 shell 展开括号内命令的结果，这个命令就是 `which zsh`。
- en: You might recall `which` from the previous section, when we required its services
    to figure out the location of our existing zsh installation. The job of `which`
    consists of shouting out loud the location of any program file in the user's `$PATH`
    environment variable. Thus, we can safely assume that if `zsh` is not there, something
    has taken a wrong turn somewhere and, perhaps, it's advisable to retrace our steps.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得上一节中提到的 `which`，我们用它来找出现有 zsh 安装的位置。`which` 的作用是大声宣布用户 `$PATH` 环境变量中任何程序文件的位置。因此，我们可以安全地假设，如果
    `zsh` 不在其中，说明某个地方出了问题，或许我们应该回头再检查一下。
- en: It's more than likely that changing your login shell will require it to run
    with elevated privileges, so make sure you are using an account with the appropriate
    permissions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，更改登录 shell 会要求以提升的权限运行该命令，因此确保你使用的是具有适当权限的账户。
- en: From now on, you'll be greeted by zsh by default on your system and every time
    you start your terminal emulator of choice. And likely so, you have installed
    and made zsh your login shell. Next up is tweaking it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，每次启动你选择的终端模拟器时，系统都会默认启动 zsh。很可能，你已经安装并将 zsh 设置为登录 shell。接下来就是对其进行调整。
- en: Shell options
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Shell 选项
- en: Besides tricking zsh into thinking it's a login shell with the `-l` flag, there
    are many other helpful options you can set when invoking it. Namely, `zsh -v`
    will switch on the verbose mode, which will make the shell print out any line
    before it gets executed. Then, there's `zsh -x`—for `xtrace`—which can prove invaluable
    when debugging your scripts, or `zsh -f` that will start a clean instance of zsh
    using the default settings.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过 `-l` 标志欺骗 zsh 使其认为它是一个登录 shell 外，还有许多其他有用的选项可以在启动时设置。例如，`zsh -v` 将开启详细模式，这会让
    shell 在执行任何命令前先打印出该命令的内容。然后，还有 `zsh -x` —— 即 `xtrace` —— 在调试脚本时非常有用，或者 `zsh -f`
    会使用默认设置启动一个干净的 zsh 实例。
- en: 'Any of these options can also be set after the shell has been started; you
    simply have to call the desired option flag via the `set` command. The following
    example triggers the verbose mode on a running session:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项中的任何一个也可以在 shell 启动后设置；你只需要通过 `set` 命令调用所需的选项标志。下面的示例在一个正在运行的会话中启用详细模式：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 [http://www.packtpub.com](http://www.packtpub.com) 下载所有你购买的 Packt 书籍的示例代码文件。如果你是在其他地方购买的这本书，可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册，以便直接通过电子邮件接收文件。
- en: 'And, you can disable any option with the same `set` command and replacing the
    dash/minus sign with a plus sign as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以使用相同的 `set` 命令禁用任何选项，只需将减号/负号替换为加号，如下所示：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: More info regarding the various shell options and their usage can be found in
    the `zshoptions(1)` manpage (`man zshoptions`).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有关各种 shell 选项及其使用方式的更多信息，请参阅 `zshoptions(1)` 手册页（`man zshoptions`）。
- en: The startup files
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动文件
- en: Like most login shells, zsh relies on a series of configuration files known
    as *startup* files, which contain the commands and preferences to be executed
    and set during the shell startup routine. We used the `.zshrc` file in the previous
    sections to avoid being bothered by the `newuser` function, but now that we have
    made zsh our login shell, it's time we take a closer look at what we can do with
    them.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 和大多数登录 shell 一样，zsh 依赖一系列配置文件，称为 *启动* 文件，这些文件包含了在 shell 启动过程中需要执行和设置的命令和偏好设置。我们在前面章节使用了
    `.zshrc` 文件，以避免被 `newuser` 函数打扰，但既然现在我们已经把 zsh 设置为登录 shell，是时候仔细看看我们可以用这些文件做些什么了。
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'By default, zsh looks for startup files in the user''s home directory, `$HOME`
    (or its alias, the more popular tilde, `~`. We''ll alternate their use in this
    text as the path to the current user''s home folder on the system), environment
    variable. You can tell zsh to look for your configuration files in another folder
    by setting the parameter `ZDOTDIR` to a directory of your choice in your `.zshenv`
    file under `$HOME`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，zsh会在用户的主目录（`$HOME`，或其别名，更常见的是波浪号`~`，在本文本中我们交替使用它们作为当前用户主文件夹的路径）下查找启动文件。你可以通过在`$HOME`下的`.zshenv`文件中设置参数`ZDOTDIR`来告诉zsh去另一个目录查找配置文件：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'During startup, zsh looks for, or *sources*, a very specific system and user
    set of filenames under `/etc/`. Right after this, each of these files have a user-editable
    doppelganger, typically located in `$HOME`, which gets read. There are some rules,
    however, that might make zsh skip some of these files altogether. The ordering
    of these files is really important, as setting an option in the wrong file can
    result in commands getting executed at the wrong time and some really funky behavior.
    Thus, try to keep in mind the following order when setting preferences on your
    files:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动过程中，zsh会在`/etc/`下查找，或称为*源文件*，一组特定的系统和用户文件名。紧接着，每个文件都有一个用户可编辑的副本，通常位于`$HOME`下，会被读取。然而，有一些规则可能会让zsh完全跳过这些文件。文件的顺序非常重要，因为在错误的文件中设置选项可能导致命令在错误的时间执行，产生一些奇怪的行为。因此，在设置文件偏好时，请记住以下顺序：
- en: '`zshenv`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zshenv`'
- en: '`zprofile`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zprofile`'
- en: '`zshrc`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zshrc`'
- en: '`zlogin`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zlogin`'
- en: If zsh is not called as an interactive shell, `zprofile` and `zshrc` together
    with their counterparts in `$HOME` (`~/.zprofile` and `~/.zshrc`) will not be
    sourced. In addition, if zsh is not called as a login shell, `zlogin` and `$HOME/.zlogin`
    will also be skipped.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果zsh没有作为交互式shell调用，`zprofile`和`zshrc`以及它们在`$HOME`中的对应文件（`~/.zprofile`和`~/.zshrc`）将不会被源文件。除此之外，如果zsh没有作为登录shell调用，`zlogin`和`$HOME/.zlogin`也会被跳过。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Depending on how you installed zsh, another directory besides `/etc/` can be
    used when looking for the global files.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你安装zsh的方式，在查找全局文件时，除了`/etc/`目录外，可能还会使用其他目录。
- en: 'Typically, you''d only like to mess with your own user''s preferences, so we''ll
    focus on the startup files that reside under `$HOME`, those are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你只希望修改自己用户的偏好设置，所以我们将重点关注位于`$HOME`下的启动文件，具体如下：
- en: '`~/.zshenv`: This will be called immediately after `/etc/zshenv`. You should
    only add things such as the `PATH` settings and stuff you want to make available
    to any type of shell, whether it''s interactive or not.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/.zshenv`：这将在`/etc/zshenv`之后立即被调用。你应该仅添加诸如`PATH`设置和任何你希望对任何类型的shell（无论是交互式的还是非交互式的）都可用的内容。'
- en: '`~/.zprofile`: This is the companion to `/etc/zprofile` and kind of the boring
    guy out of the startup files bunch. You should put here any scripts you want executed
    before `~/.zshrc`.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/.zprofile`：这是`/etc/zprofile`的配套文件，是启动文件组中比较“无聊”的一个。你应该在这里放置任何希望在`~/.zshrc`之前执行的脚本。'
- en: '`~/.zshrc`: This is your workhorse. Most of your user settings and shell preferences
    end up here. Keep in mind it''ll only be taken into account for interactive shells.
    As we''ll see later on, you can declutter and expand its reach by sourcing multiple
    files.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/.zshrc`：这是你的“主力军”。大部分的用户设置和shell偏好会放在这里。请记住，它只会在交互式shell中生效。正如我们稍后所看到的，你可以通过调用多个文件来简化并扩展它的作用。'
- en: '`~/.zlogin`: This will be executed right after `~/.zshrc` and works pretty
    much like `~/.zprofile`, so you should put the scripts that you want called after
    your main startup file here.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/.zlogin`：这将在`~/.zshrc`之后执行，基本上与`~/.zprofile`类似，所以你应该把希望在主启动文件后调用的脚本放在这里。'
- en: On the opposite corner of the startup files, there are the *shutdown* files.
    As you can imagine, this relatively smaller set of files gets called not only
    in a specific order but also during the logout sequence of the login shell. The
    shutdown files can be considered a subset of the startup files, so there's no
    need to lose sleep over them. The important thing to remember is that when you
    type `logout` in the command line, the settings stored in the user configurable
    `~/.zlogout` file are read, followed by the installation file `/etc/zlogout`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动文件的对立面，还有*关闭*文件。正如你所想的，这组相对较小的文件不仅按照特定的顺序调用，而且会在登录shell的注销序列中调用。关闭文件可以视为启动文件的子集，所以不必为此失眠。需要记住的重要一点是，当你在命令行输入`logout`时，用户可配置的`~/.zlogout`文件中的设置会被读取，然后是安装文件`/etc/zlogout`。
- en: 'You can use the options `RCS` and `GLOBAL_RCS` to disable the loading mechanism
    of the startup files. This preference has to be unset on the system file `/etc/zshenv`
    as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `RCS` 和 `GLOBAL_RCS` 选项来禁用启动文件的加载机制。这个偏好必须在系统文件 `/etc/zshenv` 中取消设置，如下所示：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For instance, if the `RCS` option is unset in `zshenv` (the first file that
    is read), `~/.zshenv` and all the remaining files will be skipped. Keep in mind
    though, that both of these options can be turned on again by any subsequent file
    that you load.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果 `zshenv` 中取消设置了 `RCS` 选项（这是第一个被读取的文件），`~/.zshenv` 和所有其他文件将被跳过。但请记住，这两个选项可以被你加载的任何后续文件重新启用。
- en: 'For example, if you have the following in `/etc/shenv`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在 `/etc/shenv` 中有以下内容：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And then in `my_options_file.zsh` add:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 `my_options_file.zsh` 中添加：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Then, the shell will proceed and load `.zshenv` as if nothing happened. So,
    be careful!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，shell 会继续加载 `.zshenv` 文件，仿佛什么都没发生过。所以，务必小心！
- en: We have taken a look at the startup files and their somewhat strict ordering;
    now, it's time we get up close and personal with the prompt.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经查看了启动文件及其严格的加载顺序；现在，到了深入了解提示符的时刻。
- en: The shell prompt
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: shell 提示符
- en: Give anyone enough time with a shell and, inevitably, the question of "how do
    I add colors to it?" is bound to come up. Luckily though, zsh boasts a truckload
    of configuration options and escape sequences that will let you do just that and
    even more. In this section, we'll delve into the nuts and bolts of options at
    your disposal to customize the prompt.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 给任何人足够的时间使用 shell，"如何给它添加颜色？"这个问题迟早会出现。幸运的是，zsh 提供了大量的配置选项和转义序列，让你能够实现这一目标，甚至更多。在本节中，我们将深入探讨你可以用来定制提示符的选项。
- en: The prompt command
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示符命令
- en: 'Zsh comes with a wide array of predefined prompt configurations that can be
    used as building blocks for something that more adequately meets your needs. Among
    other things, the utility `prompt` allows you to select your preferred theme.
    On a default installation, the various themes and user contributions are located
    under `<zshFolder>/Functions/Prompts` (or `<zshFolder>/functions` in OS X) and
    follow the naming scheme `prompt_<theme>_setup`. To have a look at what''s included
    in the stock package, just type the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Zsh 提供了丰富的预定义提示符配置，可以作为构建更符合你需求的主题的基础。除了其他内容，`prompt` 工具允许你选择你喜欢的主题。在默认安装中，各种主题和用户贡献位于
    `<zshFolder>/Functions/Prompts`（或在 OS X 中的 `<zshFolder>/functions`）目录下，并遵循命名规则
    `prompt_<theme>_setup`。要查看默认包中包含的内容，只需输入以下命令：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And you should see a list of all the available prompt themes included with
    zsh. You can use the `-p` option together with a theme name to take a closer look
    at any of the themes:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将看到一个包含所有 zsh 提供的可用提示符主题的列表。你可以使用 `-p` 选项和主题名称一起，仔细查看任何主题：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In order to use the `prompt` function, you will need to set up the `promptinit`
    module on your shell. The easiest way to do this is to add it to your `.zshrc`
    file. Take a look at the section *First run* if you haven't done so yet.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 `prompt` 函数，你需要在 shell 中设置 `promptinit` 模块。最简单的方式是将其添加到 `.zshrc` 文件中。如果你还没有设置，请查看
    *第一次运行* 部分。
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can refer to the *PROMPT THEMES* section under the `zshcontrib(1)` manpage
    in order to get more in-depth information regarding prompts on zsh. Just type
    `man zshcontrib` in your terminal to get started.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考 `zshcontrib(1)` 手册页中的 *PROMPT THEMES* 部分，获取关于 zsh 提示符的更多详细信息。在终端中输入 `man
    zshcontrib` 来开始。
- en: 'You can test drive any theme you like, applying it temporarily to your current
    shell by typing:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以试用任何你喜欢的主题，通过输入以下命令将其暂时应用到当前的 shell 中：
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Some themes, such as `adam1`, can even accept some extra configuration parameters
    like the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一些主题，如 `adam1`，甚至可以接受一些额外的配置参数，如下所示：
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'By default, zsh won''t be too fond of comments typed in the command line. Luckily,
    you can alter this behavior by setting the following option in your `.zshrc` file:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，zsh 不太喜欢在命令行中输入注释。幸运的是，你可以通过在 `.zshrc` 文件中设置以下选项来改变这一行为：
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the previous snippet, we are passing a list of options to the theme, namely
    the colors `red`, `yellow`, and `magenta`. You can get a more thorough description
    of what''s allowed for each prompt theme by calling the built-in help on any given
    theme:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码段中，我们向主题传递了一系列选项，特别是颜色 `red`、`yellow` 和 `magenta`。你可以通过调用任何给定主题的内置帮助，获得对每个提示符主题的更详细描述：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Try this on your favorite themes and see what else can be tweaked out of them.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在你喜欢的主题上使用这些设置，看看能调整出什么其他效果。
- en: 'Once you have found a combination that suits you, you can go ahead and commit
    to those changes. Just open your `.zshrc` file with your editor and add the following
    line:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你找到一个适合你的组合，你就可以保存这些更改。只需用编辑器打开 `.zshrc` 文件，并添加以下行：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We took our previous preferences file and sparkled some color in the default
    prompt `adam1`. So, how about we tweak it to make it feel more like home?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拿到了之前的偏好设置文件，并在默认提示符`adam1`中加入了一些颜色。那么，如何调整它，让它更像家一样呢？
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have invested a fair amount of time on customizing your prompt in your
    previous shell, it can be quite a headache trying to figure out the different
    rules set, so it can be ported to zsh. Luckily, zsh provides a series of tools
    for making the switch a more or less smooth experience. Located under `<zshFolder>/Misc`,
    you can use the `bash2zshprompt` or `c2z` scripts to migrate your Bash or csh
    preferences respectively. Note, however, that some distributions might be missing
    this, in which case you should head straight to the official repo and get your
    hands on a local copy. See the *Compiling from source* section for more information
    on how to get the zsh source code.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在之前的 shell 中已经投入了大量时间来定制你的提示符，那么在将其迁移到 zsh 时，弄清楚不同的规则集可能会让你感到头痛。幸运的是，zsh
    提供了一系列工具，使得这个转换过程更为顺利。你可以在 `<zshFolder>/Misc` 文件夹下找到 `bash2zshprompt` 或 `c2z`
    脚本，分别用于迁移 Bash 或 csh 的偏好设置。不过需要注意的是，一些发行版可能没有包含这些脚本，在这种情况下，你可以直接前往官方仓库，获取本地副本。关于如何获取
    zsh 源代码，请查看*从源代码编译*部分的详细信息。
- en: Customizing the prompt
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义提示符
- en: Zsh boasts five different prompts you can tweak, each with its specific purpose.
    Although you probably won't have to worry about dealing with them in most usage
    scenarios, it is, nevertheless, important that we get to know their role. For
    a more detailed description of each of them, I suggest you take a look at `man
    zshmisc`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Zsh 提供了五种不同的提示符，你可以根据需要进行调整，每种都有其特定的用途。虽然在大多数使用场景下你可能不需要担心这些提示符，但了解它们的作用仍然是很重要的。关于每个提示符的详细描述，我建议你查看
    `man zshmisc`。
- en: Zsh likes to refer to its main prompt variable as `$PS1` or its alias, `$PROMPT`
    (also `$prompt`). Rest assured though, both (actually the three of them, that
    is) are the same beast and are treated equally by zsh. Then there's `$RPS1` that
    prints a prompt at the right-hand side of the screen. Unlike other prompts though,
    it automatically disappears whenever line width is needed.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Zsh 喜欢将其主要提示符变量称为 `$PS1` 或其别名 `$PROMPT`（也可以是 `$prompt`）。不过可以放心，这三者实际上是一样的，zsh
    对它们的处理是相同的。然后还有 `$RPS1`，它会在屏幕右侧打印提示符。与其他提示符不同的是，它会在需要行宽时自动消失。
- en: '`$PS2` gets displayed whenever the shell is waiting for more input, such as
    at the start of some unfinished syntactic structure or when you add inline comments
    to the command line. `$PS3` is used for making choices within a `select` loop
    control mechanism. Last but not the least, `$PS4` really comes in handy for debugging
    scripts.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`$PS2` 会在 shell 等待更多输入时显示，例如在某些未完成的语法结构开始时，或者在命令行中添加内联注释时。`$PS3` 用于在 `select`
    循环控制机制中进行选择。最后但同样重要的是，`$PS4` 在调试脚本时非常有用。'
- en: Overall, these are the set of tools we will be working with, extending their
    functionality beyond the basics with a nifty set of tools known as escape sequences.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这些就是我们将要使用的工具集，通过一组巧妙的工具——转义序列，扩展其功能，超越基本设置。
- en: Tip
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can use the `source` command to reload your zsh configuration files at
    any time. Just save your changes and call the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时使用 `source` 命令重新加载你的 zsh 配置文件。只需保存更改并运行以下命令：
- en: '[PRE30]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Remember to use double quotes if your file path includes spaces.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的文件路径中包含空格，记得使用双引号。
- en: '[PRE31]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Using escape sequences
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用转义序列
- en: Escape sequences are a set of predefined information shortcuts that can be added
    to zsh's prompt settings. They can show information such as the name of the machine
    to which you are logged on, the current date and time of the system, and even
    the current working directory. Most escape sequences are defined with a modulo
    or percent (`%`) operator, and some of them even take optional parameters to extend
    their functionality further.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 转义序列是一组预定义的信息快捷方式，可以添加到 zsh 的提示符设置中。它们可以显示信息，例如你登录的机器名称、系统的当前日期和时间，甚至是当前工作目录。大多数转义序列是通过模组或百分号（`%`）操作符来定义的，有些甚至接受可选参数，进一步扩展其功能。
- en: 'For the magic to happen, however, we first need to add a new setting to our
    preferences file. Open `.zshrc` and add the following line:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要使魔法生效，我们首先需要在配置文件中添加一个新设置。打开`.zshrc`并添加以下行：
- en: '[PRE32]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: By doing this, we're enabling the `PROMPT_SUBST` option. This will make zsh
    treat `$PROMPT` just as if it were a vanilla shell variable, and it will be checked
    against for command substitution, parameter and arithmetic expansion.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们启用了`PROMPT_SUBST`选项。这样，zsh 会将`$PROMPT`视为普通的 shell 变量，并在命令替换、参数和算术扩展时进行检查。
- en: Next, we'll go through many of the available escape sequences and their meanings.
    Keep in mind that this is by no means a complete list of all the available options;
    as such, you can always refer to the `zshmisc(1)` manpage—particularly, the section
    titled *Prompt Expansion*—should you need a more comprehensive listing of the
    available options.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍许多可用的转义序列及其含义。请记住，这绝不是所有可用选项的完整列表；因此，如果您需要更全面的可用选项列表，随时可以查阅`zshmisc(1)`手册页，特别是标题为*Prompt
    Expansion*的部分。
- en: Shell state options
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Shell 状态选项
- en: 'The following options serve as indicators for some aspects of the current state
    of the shell:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项作为当前 shell 状态的一些指示符：
- en: '`%#`: This displays `#` if the shell is running with elevated privileges and
    displays `%` otherwise'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%#`：如果 shell 正在以提升权限运行，则显示`#`，否则显示`%`。'
- en: '`%?`: This shows the exit status code of the last command executed'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%?`：显示最后执行的命令的退出状态代码。'
- en: '`%h` or `%!`: This shows the current history event number'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%h` 或 `%!`：显示当前历史事件编号。'
- en: '`%L`: This displays the current value of the `$SHLVL` variable'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%L`：显示当前`$SHLVL`变量的值。'
- en: '`%j`: This prints the number of jobs being executed'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%j`：显示当前正在执行的作业数量。'
- en: Login information options
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 登录信息选项
- en: 'The following options display more useful information about the host and machine
    on which the shell is currently running:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项显示有关当前 shell 正在运行的主机和机器的更多有用信息：
- en: '`%M`: This shows the machine''s *hostname*.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%M`：显示机器的*主机名*。'
- en: '`%m`: Same as the previous. Hostname is printed up to the first dot (`.`) separator.
    It takes an optional integer after `%` for the number of components to be displayed.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%m`：与前者相同。主机名会显示到第一个点（`.`）分隔符为止。它接受一个可选的整数，表示要显示的组件数量。'
- en: '`%n`: This will have the same effect as printing environment variable `$USERNAME`.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%n`：与打印环境变量`$USERNAME`的效果相同。'
- en: Directory options
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目录选项
- en: 'The following options provide information regarding the path of the current
    working directory (`$PWD`) and filesystem directories:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项提供关于当前工作目录（`$PWD`）和文件系统目录的信息：
- en: '`%d` or `%/`: This shows the current directory. Works just as printing the
    `$PWD` environment variable.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%d` 或 `%/`：显示当前目录。与打印`$PWD`环境变量一样。'
- en: '`%~`: Same as the previous, but if the current directory is `$HOME`, `~` is
    displayed instead.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%~`：与前者相同，但如果当前目录是`$HOME`，则显示`~`。'
- en: '`%c` or `%.`: This lists the amount of directories trailing `$PWD`. It takes
    an integer as the parameter after `%`. Thus, `%2c` would show the two preceding
    directories to `$PWD`.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%c` 或 `%.`：列出与`$PWD`相对的目录数量。它接受一个整数作为参数。因此，`%2c`会显示`$PWD`前面的两个目录。'
- en: '`%C`: Same as the previous, but directory names are not replaced with any symbols.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%C`：与前者相同，但目录名不会被任何符号替代。'
- en: Date and time options
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日期和时间选项
- en: 'The following options provide miscellaneous date and time information:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项提供杂项的日期和时间信息：
- en: '`%D`: This prints the current system date in the `yy-mm-dd` format.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%D`：以`yy-mm-dd`格式打印当前系统日期。'
- en: '`%W`: Same as the previous but in `mm/dd/yy` format.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%W`：与前者相同，但以`mm/dd/yy`格式显示。'
- en: '`%w`: This shows the date in `day-dd` format.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%w`：显示`day-dd`格式的日期。'
- en: '`%T`: This displays the current time of the day, 24-hour format.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%T`：显示当前时间，24小时格式。'
- en: '`%t` or `%@`: Same as the previous, uses a 12-hour, am/pm format.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%t` 或 `%@`：与前者相同，使用12小时制，am/pm格式。'
- en: '`%*`: Same as the previous, also displays seconds.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%*`：与前者相同，也显示秒数。'
- en: Text formatting options
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本格式选项
- en: 'Unlike the previous escape sequences, these need to be opened and closed around
    the desired part of the prompt. That is, in order to underline `word`, you need
    to type it as `%Uword%u`. Pay special attention to the difference in the case
    of the opening (UPPERCASE) and closing (lowercase) escape sequences, as shown
    in the following points:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的转义序列不同，这些需要围绕提示符的目标部分打开和关闭。也就是说，为了给`word`加下划线，你需要输入`%Uword%u`。特别注意开头（大写字母）和结尾（小写字母）转义序列的大小写差异，如下所示：
- en: '`%U %u`: This enables underline mode.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%U %u`：这启用下划线模式。'
- en: '`%B %b`: This enables boldface mode.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%B %b`：这启用粗体模式。'
- en: '`%K %k`: This sets the background color. Use it as `%K{red}%k`.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%K %k`：这设置背景颜色。使用方式如`%K{red}%k`。'
- en: '`%F %f`: Like the the previous, but applies to the *foreground* color.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%F %f`：与前面的相似，但应用于*前景*颜色。'
- en: '`%S %s`: This enables *standout* (highlight) mode.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%S %s`：这启用*突出显示*（高亮）模式。'
- en: When dealing with escape sequences, both `%` and `)` are somewhat special as
    far as zsh is concerned; thus, remember to type `%%` if you need to display a
    literal `%` on your prompt. Likewise, a literal `)` should be typed as `%)`. This
    technique is commonly referred to as *escaping characters*.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 处理转义序列时，`%`和`)`在zsh中都是有些特殊的；因此，如果你需要在提示符中显示字面上的`%`，记得输入`%%`。同样，字面上的`)`应该输入`%)`。这种技术通常被称为*转义字符*。
- en: Note
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can enable the `PROMPT_BANG` option on your zsh configuration to use a bang
    (`!`) in your prompt in order to display the current history event number instead
    of having to escape it (`%!`). Just remember to type `!!`, should you require
    a literal `!`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在zsh配置中启用`PROMPT_BANG`选项，以便在提示符中使用感叹号（`!`），从而显示当前的历史事件编号，而无需转义（`%!`）。只要记住，当你需要一个字面上的`!`时，输入`!!`。
- en: '[PRE33]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Conditional expressions
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件表达式
- en: 'We will conclude our trip of the escape sequences by taking a look at the escape
    sequences available for conditional expansion. Luckily though, most of it can
    be summed up as the following ternary expression:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过查看可用于条件扩展的转义序列来结束我们的转义序列之旅。不过幸运的是，大部分内容可以总结为以下的三元表达式：
- en: '[PRE34]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Basically, what this means is that if the condition `X` is true, do whatever
    is in `true-text`, otherwise do whatever is in `false-text`. The important thing
    to remember is that you should wrap your expression with `%()`, and that the dots
    (`.`) you see there are completely arbitrary, meaning you can replace both of
    them with whatever character you like.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这意味着如果条件`X`为真，执行`true-text`中的内容，否则执行`false-text`中的内容。需要记住的重要一点是，你应该用`%()`包裹你的表达式，而且你看到的点（`.`）是完全随意的，意味着你可以将它们替换成任何字符。
- en: 'Regarding the `true-text`/`false-text` expressions, the manpage (as when you
    visit `man zshmisc`) tells us that they can be replaced with the likes of `!`.
    This will evaluate to true if the shell is running with privileges or `?`, which
    in turn can be preceded by an integer *n* and will evaluate to `true` only if
    the exit status of the last command matches. Thus, in order to display `#` as
    your main prompt to signal whether you are running on elevated privileges, with
    a bit of imagination, you can come up with things like the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`true-text`/`false-text`表达式，手册页（例如当你访问`man zshmisc`时）告诉我们，它们可以替换为类似`!`的符号。如果shell在有权限的情况下运行，那么它将评估为true，或者是`?`，而`?`前可以跟一个整数*n*，只有在最后一个命令的退出状态匹配时才会评估为`true`。因此，为了将`#`作为你的主提示符，显示是否正在以提升的权限运行，你可以发挥想象，得到如下内容：
- en: '[PRE35]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Likewise, you could use the following line to wrap the exit status of the last
    command that was run, if it was other than `0`, that is:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以使用以下行来包装最后运行命令的退出状态，如果它不等于`0`，也就是说：
- en: '[PRE36]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Putting it all together
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 把所有内容组合起来
- en: As you are more than aware by now, zsh has many great features built in its
    prompt themes. So many in fact, that most of the time our custom solutions might
    feel like reinventing the wheel. We still need to take a shot at building our
    own prompt though; so, how about using one of the included themes as a starting
    point?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在已经非常清楚的，zsh的提示主题内置了许多强大的功能。实际上，它们如此之多，以至于大多数情况下我们自己定制的解决方案可能会让人觉得是在重新发明轮子。不过，我们仍然需要尝试自己构建一个提示符；那么，如何利用其中一个现有的主题作为起点呢？
- en: Navigate to your zsh installation folder or repository clone, and navigate to
    the Prompts folder under `Functions`. As we saw earlier, all prompts come with
    a setup function that follows the `prompt_<theme_name>_setup` naming pattern.
    Look for the setup file for the SuSE theme and open it. It will most likely be
    under `prompt_suse_setup`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到你的 zsh 安装文件夹或仓库克隆，进入 `Functions` 下的 Prompts 文件夹。正如我们之前所看到的，所有提示符都附带一个名为 `prompt_<theme_name>_setup`
    的设置函数。找到 SuSE 主题的设置文件并打开它，它很可能位于 `prompt_suse_setup` 下。
- en: 'What you see there is a shell function that goes by the same name as the file.
    A single call to this `prompt_suse_setup` function, with no parameters passed,
    is all that it takes to make two assignments—one for the `PS1` prompt and the
    other for `PS2`. Have a look at the following code, which has been formatted for
    this example:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到的其实是一个与文件同名的 shell 函数。只需调用一次这个 `prompt_suse_setup` 函数，并且不传递任何参数，就能完成两个赋值操作——一个是为
    `PS1` 提示符赋值，另一个是为 `PS2` 提示符赋值。请查看下面这个为示例格式化的代码：
- en: '[PRE37]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'So let''s get started with hacking that prompt to pieces, shall we? Open your
    `.zshrc` file, and remember you will be adding the following line after the call
    to `promptinit`. We can start by highlighting the username, just like in the `adam1`
    prompt:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们开始动手修改这个提示符吧！打开你的 `.zshrc` 文件，并记住，你将在 `promptinit` 调用后添加以下这一行。我们可以从突出显示用户名开始，就像在
    `adam1` 提示符中一样：
- en: '[PRE38]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If you recall from the previous section, the `%K%k` escape sequence defines
    the background color. Highlighted in the code, we wrap the escape sequence, `%n`,
    to add some background color to the current session, `$USERNAME`. On the right-hand
    side of the `@` symbol remains the short version of the machine name and some
    fancy line indicators, of course.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得前一部分，`%K%k` 转义序列定义了背景色。代码中高亮显示的部分，我们将转义序列 `%n` 包装起来，给当前会话 `$USERNAME`
    添加背景色。在 `@` 符号右侧仍然是机器名称的简短版本，当然，还有一些炫酷的行指示符。
- en: 'Let''s add an error flag to the right-hand side, so we can check immediately
    for an abnormal command exit code:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来为右侧添加一个错误标志，这样就可以立即检查是否有异常的命令退出码：
- en: '[PRE39]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'If you feel like it, you can test our brand-new right-hand prompt by calling
    a program in a way that will end abnormally. Remember, an exit status of 0 is
    ok; everything else will trigger our prompt. Something such as `ls some_nonexistent_folder`
    should be enough:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意的话，可以通过调用一个会异常退出的程序来测试我们全新的右侧提示符。记住，退出状态为 0 是可以的；其他任何状态都会触发我们的提示符。像 `ls
    some_nonexistent_folder` 这样的命令应该就足够了：
- en: '[PRE40]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You can sparkle some color into our right-hand prompt like we did for `PS1`.
    When you are done with your tweaking, try to leave `.zshrc` resembling the following
    code as much as possible:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像我们为 `PS1` 所做的那样，在右侧提示符中添加一些颜色。当你完成调整后，尝试使 `.zshrc` 文件尽可能与以下代码相似：
- en: '[PRE41]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We left the `autoload -U promtpinit` and `promptinit` calls in the previous
    example, so the prompt module would be loaded and ready for use, should you eventually
    require its services. Note, however, that you do not require both these calls
    unless you are planning on using the `prompt` module.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们保留了 `autoload -U promptinit` 和 `promptinit` 调用，因此当你最终需要使用它时，提示符模块会被加载并准备好。需要注意的是，除非你打算使用
    `prompt` 模块，否则不需要同时调用这两个命令。
- en: 'Save your file and let''s reload zsh configuration. We do this by sourcing
    the `.zshrc` file one more time. Be careful though as this could take a while
    depending on the links to other files you might have added:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并重新加载 zsh 配置。我们通过再次加载 `.zshrc` 文件来完成此操作。不过要小心，这可能需要一些时间，具体取决于你可能添加的其他文件链接：
- en: '[PRE42]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Tip
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '`source` has a leaner and meaner brother: the dot (`.)` alias. Now that you''ve
    met him, feel free to do things such as the following:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`source` 有一个更加简洁的兄弟：点（`.`）别名。现在你已经认识了他，可以自由地执行类似以下操作：'
- en: '[PRE43]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: How about we take advantage of the whole width of the terminal emulator's window?
    You know, because widescreen.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不妨利用终端模拟器窗口的整个宽度？你知道的，因为是宽屏显示。
- en: A particularly useful on-screen help is the current directory shortcut, which
    if you recall can be either `%~` or `%d`. So, how about we add a bit more context
    information to that lazy right-hand side prompt?
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特别有用的屏幕帮助是当前目录快捷方式，回想一下，它可以是 `%~` 或 `%d`。那么，如何在懒惰的右侧提示符中添加更多上下文信息呢？
- en: '[PRE44]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Come on, I know you didn''t just think it was going to be that easy, right?
    We are adding functionality here, so it''s not just about ditching our exit status
    indicator. Think about it; we need to add the current working directory to that
    right-hand prompt. Your first guess might be along the lines of the following
    command:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 来吧，我知道你不会以为它就这么简单吧？我们在这里添加了功能，所以不只是简单地丢掉退出状态指示符。想一想，我们还需要将当前工作目录添加到右侧的提示符中。你最初的猜测可能是类似以下命令：
- en: '[PRE45]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This is almost perfect, save for the fact that it won't work straightaway.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎是完美的，除了它不会立刻生效。
- en: '[PRE46]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Bummer! However, the slight detail that''s missing is the usage of double quotes.
    That''s right, we can sneak those spaces through the shell''s string processing
    and come out with no errors just by using double quotes, as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 真糟糕！不过，有个小细节缺失了，那就是双引号的使用。没错，我们可以通过 shell 的字符串处理，巧妙地让空格通过，而不报错，只需要使用双引号，像这样：
- en: '[PRE47]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This will tell the prompt function to take the `RPS1` variable as it is and
    to not worry about parsing multiple parameters.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉提示符函数直接使用 `RPS1` 变量，而不必担心解析多个参数。
- en: And, that's it. You have your own version of the prompt on your brand-new installation
    of zsh. Although, you might be wondering what's the deal with the second prompt
    that we left there. I'll leave it for you to decide its fate, as I really like
    the current old-school `>` indicator.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，你已经在全新的 zsh 安装中拥有了自己的提示符版本。不过，你可能会想知道我们留在那里的第二个提示符是怎么回事。我会留给你自己决定它的命运，因为我真的很喜欢现在这个老派的
    `>` 指示符。
- en: Before we are done with this chapter however, I'd like to point you towards
    the *PROMPT THEMES* section in the `zshcontrib(1)` manpage. Go ahead and type
    `man zshcontrib` on the terminal emulator of your choice for more detailed information
    when creating your own prompt themes.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们完成这一章之前，我想指引你查看 `zshcontrib(1)` 手册页中的 *PROMPT THEMES* 部分。若想获取更多关于创建自定义提示符主题的详细信息，可以在你喜欢的终端模拟器中输入
    `man zshcontrib`。
- en: Summary
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we took a head-first dive into zsh by learning the essentials
    regarding its features and replacing your previous login shell. We even went that
    extra mile and added a touch of homemade goodness by customizing the prompt with
    the various escape sequences and configuration options available. Just because
    my memory is really awful, here''s a list of what''s been covered so far:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们深入了解了 zsh，学习了它的基础特性，并将你的前一个登录 shell 替换成了新的 zsh 安装。我们甚至还更进一步，通过使用各种转义序列和配置选项定制了提示符，加入了一点自家风味。由于我的记性真的很差，这里列出了到目前为止涵盖的内容：
- en: We learned how to configure and set up zsh, so we could ditch your current shell
    and replace it with your brand-new installation of zsh
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们学习了如何配置和设置 zsh，因此可以抛弃当前的 shell，用全新的 zsh 安装替换它。
- en: We met the startup files, and now we have a clear understanding of what goes
    on behind the curtains moments before your terminal emulator window pops up on
    screen
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们了解了启动文件，现在我们清楚了在终端模拟器窗口出现在屏幕上之前幕后发生的事情。
- en: We got acquainted with the shell prompt, and discovered that zsh offers much
    more than meets the eye
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们熟悉了 shell 提示符，发现 zsh 提供了远超表面功能的内容。
- en: We went one step further and customized the prompt after learning about escape
    sequences and conditional expressions
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们更进一步，学习了转义序列和条件表达式后，定制了提示符。
- en: Now, your system should be all set and ready for what's left of this adventure.
    We still have plenty of ground to cover though, so we better get started with
    the next chapter, *Alias and History*, where we'll learn about the `alias` mechanism,
    how to create your own shortcuts for functions, and we'll start working with the
    shell's history log.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的系统应该已经完全准备好迎接接下来的冒险了。不过，我们还有很多内容要覆盖，所以最好开始下一章 *别名与历史记录*，在这一章中，我们将学习 `alias`
    机制，如何为功能创建自己的快捷方式，还会开始使用 shell 的历史记录日志。

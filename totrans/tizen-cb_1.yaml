- en: Part I. Getting Started with Tizen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*The Tizen SDK*](ch01.html "Chapter 1. The Tizen SDK")'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Introduction to the Tizen Ecosystem*](ch02.html "Chapter 2. Introduction
    to the Tizen Ecosystem")'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1. The Tizen SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Tizen SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Tizen SDK on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Tizen SDK on Mac OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Tizen SDK on Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing extension packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the Tizen IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the Active Secure profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen Web Simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen Emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Smart Development Bridge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Smart Development Bridge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter offers an introduction to the tools required for the development
    of Tizen applications. Detailed descriptions of the steps required for the installation
    of the SDK on three supported operating systems (GNU/Linux, Windows, and Mac OS)
    are provided. Furthermore, this chapter contains an overview of the development
    environment, the Web Simulator, the device Emulator, and the user manual for **Smart
    Development Bridge** (**SDB**).
  prefs: []
  type: TYPE_NORMAL
- en: Those of you who are eager to start coding might be slightly disappointed to
    find out that this chapter does not contain any code snippets. Nevertheless, please
    keep calm and carefully explore all the recipes because they will help you understand
    how the tools work. After you have done that, you will be able to develop Tizen
    applications more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Tizen SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step of starting Tizen application development is to download the
    Tizen SDK and install it. The installation is similar on all supported operating
    systems. This recipe explains the basics of the installation process of Tizen
    SDK 2.2.1\. Details and notes of each of the supported operating systems are discussed
    in the subsequent recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The SDK contains all the tools required for the development of both native
    and web Tizen applications. It consists of an IDE based on Eclipse, Emulator,
    Simulator for web applications, a tool chain, several sample applications, and
    full documentation. The Tizen SDK is compatible with the following platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu (32-and 64-bit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 7 (32-and 64-bit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mac OS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The minimum hardware requirements of the development systems are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Dual-core CPU at 2 GHz
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At least 2 GB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At least 6 GB spare disk space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Tizen SDK can be downloaded for free from the Tizen Project website at [https://developer.tizen.org/downloads/tizen-sdk](https://developer.tizen.org/downloads/tizen-sdk).
  prefs: []
  type: TYPE_NORMAL
- en: More details about the hardware requirements for the Tizen SDK are available
    at [https://developer.tizen.org/downloads/sdk/installing-sdk/prerequisites-tizen-sdk](https://developer.tizen.org/downloads/sdk/installing-sdk/prerequisites-tizen-sdk).
  prefs: []
  type: TYPE_NORMAL
- en: Although officially Ubuntu is the only supported Linux distribution, some people
    have managed to make it work on other distributions such as Fedora and Arch Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Several Tizen SDK installation options are available. You can choose between
    network, image, or a command-line installation without GUI.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For network installation, please perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Begin by downloading the **Tizen SDK Install Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the downloaded file and then click on **Next** on the first screen, as
    shown in the following screenshot:![How to do it...](img/1908OS_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Tizen SDK Install Manager screen
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the second screen, accept the terms and conditions and again click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the components you want to install and click on **Next**. Finally, specify
    the directory where the SDK will be installed and click on the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: During the installation process, you might be asked to provide administrative
    privileges. The Install Manager will download approximately 1.5 GB.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you prefer offline installation, then please follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the SDK Install Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the download finishes, launch the downloaded file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Advanced**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Advanced Configuration** window. Click on the corresponding radio
    button for **SDK Image**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the SDK image file, click on **OK**, and after that, click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, the terms and conditions will be displayed. Click on **Next**
    after accepting them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the components you want to install and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, choose the directory where the SDK will be stored and hit the **Install**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Tizen IDE is based on Eclipse. Most of the source code of Eclipse is written
    using the Java programming language. In general, the main advantage of applications
    created with Java is that they are compatible with different platforms, and this
    is the main reason why the Tizen IDE and SDK work fine on several desktop operating
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For details about the installation on Windows, Mac OS, and Ubuntu, please refer
    to the subsequent recipes of this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Tizen SDK on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen applications can be developed on Microsoft Windows even though Tizen is
    a Linux-based operating system. This recipe will reveal details of the installation
    process of the SDK on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is recommended to ensure that your development system matches the requirements
    of the Tizen SDK before proceeding with the installation. The Tizen SDK is compatible
    with the 32-bit and 64-bit versions of Windows 7, as well as with the 32-bit version
    of Windows XP. Although Windows 8 is not officially listed among the supported
    platforms, the version for Windows 7 should be compatible with it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that the 64-bit version of Windows requires the 64-bit JRE even
    if the 32-bit version has already been installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The installation of the Tizen SDK on Windows is straightforward. The simplest
    way to complete it successfully is to rely on the network installation procedure
    described in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the installation, it might be convenient to register the Tizen SDK installation
    directory in the environmental path of Windows so that you will be able to directly
    run SDB from any location. Please refer to the recipes related to SDB for instructions
    on how to do this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Tizen SDK on Mac OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the reasons a lot of mobile application developers use Mac OS is that
    it is required for the development of iOS applications. Unlike iOS, the development
    tools for Tizen do not have such limitations, and they can be installed on Mac
    OS as well as other popular desktop operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The network installation manager of the Tizen SDK for Mac OS is distributed
    as a standard disk image with the `dmg` extension.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the `.dmg` file and launch it by following the provided instructions
    in the recipe *Installing the Tizen SDK*.
  prefs: []
  type: TYPE_NORMAL
- en: If you plan to develop native Tizen applications on Mac OS X, install command-line
    tools following the Apple guidelines for the version of Mac OS X that you are
    using ([https://developer.apple.com/library/ios/technotes/tn2339/_index.html](https://developer.apple.com/library/ios/technotes/tn2339/_index.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'On Mac OS X 10.7.5 (also known as Mac OS X Lion) or later, the Install Manager
    might fail due to the security settings of the operating system. These settings
    have to be modified to temporarily prevent the Mac OS X Gatekeeper from blocking
    the Install Manager and to allow you to proceed with the Tizen SDK installation.
    Please perform the following steps to configure Gatekeeper on Mac OS X and to
    solve the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Apple Menu** button in the upper-left corner of the main screen
    of the Mac OS X interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **System Preferences.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Security & Privacy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **General** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To configure the settings, click on the locker icon in the lower-right corner,
    enter the administrative user's password, and click on **Unlock**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Allow apps download from** to **Anywhere** and confirm the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the **Tizen Install Manager** again and complete the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After successful installation, the security settings can be reverted to their
    previous configuration. Alternatively, you can exempt the installer as a single
    application from Gatekeeper. For more details, please visit Apple's support page
    at [http://support.apple.com/kb/HT5290](http://support.apple.com/kb/HT5290).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are interested in adding SDB to the environment path after successful
    installation of the Tizen SDK, refer to the recipes related to SDB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Tizen SDK on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ubuntu is the only Linux distribution that is recommended and fully supported
    by the Tizen SDK. Additional software has to be installed prior to launching the
    Tizen SDK Install Manager on Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe contains four major steps to install all the required software components
    and successfully complete the SDK installation on Ubuntu. Before you start, make
    sure that at least 6 GB free space is present on the computer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Officially, Tizen SDK 2.2.1 is compatible only with two versions of Ubuntu:
    12.04 and 12.10\. Despite this, it is absolutely possible to install and run the
    SDK on newer versions too. This is applicable to the following versions of Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: 12.10 32-bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.04 32-bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13.10 64-bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although Ubuntu 13.10 is not officially supported, the Tizen SDK can be installed
    successfully on it as well, but a workaround related to `libudev.so.1` should
    be applied to run SDB. Please check the troubleshooting section of the recipe
    for more information about fixing SDB on Ubuntu 13.10.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The full installation process can be divided into four milestones:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Tizen SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Oracle Java Runtime Environment (JRE).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the Tizen SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit [tizen.org](http://tizen.org) to get the Tizen SDK or just execute the
    following commands to download Tizen SDK 2.2.1 using your web browser or command-line
    tool such as `wget`. For example, if you have a 32-bit version of Ubuntu, then
    you can run the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The URL of the installation file for the 64-bit version is slightly different,
    so it can be downloaded by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any of these URLs might change over time. To download another version of the
    SDK, please check the available links at the download page at [https://developer.tizen.org/downloads/tizen-sdk](https://developer.tizen.org/downloads/tizen-sdk).
  prefs: []
  type: TYPE_NORMAL
- en: 'Oracle JRE must be installed before launching the Tizen SDK. Make sure that
    OpenJDK is not supported. Please follow these steps if you do not have Oracle
    JRE installed:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the Oracle website and, depending on the version of Ubuntu that you are
    using, download the 32-bit or 64-bit JRE 7 for Linux as a `tar` archive available
    at [http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1880261.html](http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1880261.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decompress all files from the downloaded `archive.tar -xzf jre-*.tar.gz` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a directory for the JRE files. After that, move the extracted files
    into the directory by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The names of the JRE files and directories may be different depending on the
    version that you have downloaded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If Java is not present, please install it. Otherwise, it is recommended that
    you update it by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Furthermore, Java can be enabled for the Mozilla Firefox web browser that is
    shipped as the default web browser for Ubuntu. A couple of additional steps must
    be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory to store the Mozilla plugin for the current user by executing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a symbolic link of Java that points to the directory that was made in
    the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a symbolic link of the plugin to `/usr/lib/firefox/plugins/`, or `/usr/lib/firefox/browser/plugins/`
    for Ubuntu 13.10 to enable it for all users of the system. The web browser must
    be restarted after enabling Java.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We are almost ready to launch the Tizen SDK installer, but before that, some
    dependencies must be installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the following packages are installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gtk2-engines-pixbuf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libgnome2-0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qemu-user-static`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gettext`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-init-tools`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gksudo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libwebkitgtk-1.0-0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are wondering whether a package has already been installed on your development
    platform, please check it by executing the command `dpkg -s` followed by the package''s
    name or the list of packages. To install any of the packages from the preceding
    list, open a terminal and execute `sudo apt-get install` followed by the name
    of the package, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Users of Ubuntu 12.10 or any older version should install the package `gksudo`
    as well by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Please note that if you are using Ubuntu 13.04 or a newer version, you will
    not be able to install this package as it is not available any more. Instead,
    you should install package `gksu` by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, it is time to proceed with the installation of the Tizen SDK. Make
    sure that the binary file of the Install Manager has executable permissions and
    launch it. Please note that `<version>` and `<bits>` must be replaced with values
    that match the file downloaded at the beginning of the tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When the Install Manager launches, follow the instructions from the *Installing
    the Tizen SDK* recipe to complete the installation.
  prefs: []
  type: TYPE_NORMAL
- en: If you are unsure which install type is appropriate for your needs, it is recommended
    that you select **Typical**.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you will learn how to troubleshoot your GNU/Linux installation
    of Tizen.
  prefs: []
  type: TYPE_NORMAL
- en: Unable to launch the Tizen IDE due to missing or incompatible version of JRE
    (**SDK runs on Eclipse, which requires JRE, JRE 6, or a newer package is required**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you encounter such a problem, please make sure that an appropriate JRE version
    has been installed on the development system before launching the installer of
    the Tizen SDK.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Unable to run the installation due to missing packages (**Missing "expect" "gtk2-engines-pixbuf"
    "libgnome2-0" "qemu-user-static" "libwebkitgtk-1.0-0" package(s)**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you encounter such a problem, please install the missing packages using the
    shell command `apt-get`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Problem with installing Oracle Java on an Ubuntu machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you encounter such a problem, install `java-package`. Then, convert the downloaded
    Oracle JDK/JRE archive into a `.deb` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Exception when Eclipse is launched (**Exception in thread "main" org.eclipse.swt.SWTError:
    No more handles [Unknown Mozilla path (MOZILLA_FIVE_HOME not set)] error pops
    up**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you encounter such a problem, please install the `libwebkitgtk-1.0-0` package
    using `apt-get`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Tizen IDE does not display the **Event Injector**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you encounter such a problem, make sure that the **Ajax Tool Framework**
    plugin for Eclipse is installed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Vertical scroll bars are not shown properly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To disable the overlay scrollbar in the latest versions of Ubuntu, execute
    the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'SDB not working on Ubuntu 13.10 64-bit (**sdb: error while loading shared libraries:
    libudev.so.0: cannot open shared object file: No such file or directory**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you encounter such a problem, apply the following workaround for Ubuntu
    13.10 64-bit *at your own risk* to temporarily solve the issue until an update
    of the SDK is available:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that `libudev.so.1` is essential for Ubuntu 13.10, and if you accidentally
    delete it or mess with its file permissions, the operating system will not be
    able to start properly after reboot!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the *Getting started with Smart Development Bridge* recipe about
    SDB if you are interested in registering SDB as a global command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For up-to-date information, please refer to the Tizen wiki article *Install
    Tizen SDK on Ubuntu*, which has been maintained by the author of this book since
    March 26, 2013 at [https://wiki.tizen.org/wiki/Install_Tizen_SDK_on_Ubuntu](https://wiki.tizen.org/wiki/Install_Tizen_SDK_on_Ubuntu).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing extension packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen is an open source software platform and it is very flexible. Third-party
    individual developers or companies can develop extension packages for the Tizen
    SDK. Other developers can use and abuse third-party packages in their applications
    using specific repositories. Some extensions for the Tizen SDK are available at
    [https://developer.tizen.org/downloads/add-on-sdks](https://developer.tizen.org/downloads/add-on-sdks).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please perform the following steps to add extra repositories and install additional
    packages:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen SDK Install Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next** to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Extra Repository** to open a dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set an external server as well as the name of a repository and click on **OK**.
    The repository information will be displayed in the previous window. Click on
    **OK** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the required packages and click on **Install**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following actions to remove an extra repository and all packages
    installed from it:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen SDK Install Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Install or update Tizen SDK** and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Extra Repository**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the repository that you want to delete and after that click on **Remove**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each repository contains additional packages that are optional and can be added
    or deleted by the developer at any time. A repository is specified by a URL, so
    it is mandatory to have a network connection to the repository's server to download
    any of its packages. If you are experiencing issues connecting to a repository
    using **HTTP Secure** (**HTTPS**), you can try using the same URL with HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: A proxy has to be used if you want to access repositories from a computer behind
    a firewall. To configure a proxy, launch Install Manager and click on the **Proxy
    settings** button.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the Tizen IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default and recommended IDE that is included in the Tizen SDK is based on
    Eclipse. Eclipse is an open source software, and through the years it has become
    a de facto standard for the development of applications for mobile platforms.
    Developers with experience in Android, Bada, Symbian, and BlackBerry 10 are already
    familiar with Eclipse as it, or IDEs based on it, is used for application development
    for these platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android developers should note that there is a difference in the way Eclipse
    is provided for Tizen compared to Android. **Android Development Tools** (**ADT**)
    is a plugin for Eclipse that can be downloaded and installed. Unlike ADT, the
    Tizen IDE is provided in the Tizen SDK bundle, and at the moment, a separate plugin
    is not available.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step of the journey into application development for Tizen starts
    with the launch of the Tizen IDE. It is based on Eclipse, so it is not a surprise
    that the Tizen IDE also asks you to select a workspace. If you do not want to
    be asked to select the workspace every time you start the IDE, just check the
    option **Use this as default and do not ask again**. To change the workspace when
    the Tizen IDE is running, just navigate to **File** | **Switch Workspace**.
  prefs: []
  type: TYPE_NORMAL
- en: A welcome screen will be displayed on the first start screen of the Tizen IDE.
    Click on **Workbench** to open the Tizen Web perspective and start developing
    applications. If you want to have a look at the documentation, select any of the
    other three options. You can get back to the home screen at any time by navigating
    to **Help** | **Welcome**. If you are searching for Tizen's official development
    documentation, just navigate to **Help** | **Help Contents**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a lot of developers, the look and feel of their IDE is a key factor for
    their productivity. Tizen IDE supports all customization options provided by Eclipse.
    This recipe contains only a few hints for customization of the background and
    text colors. For more information, please have a look at Tizen IDE and Eclipse
    documentation or just delve into the preferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following actions to change the background color of the text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Windows** | **Preferences** and a dialog box will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **General** | **Editors** | **Text Editors**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the background color from the list of **Appearance color** options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the text colors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Text colors depend on the syntax coloring of the programming languages. Tizen
    web applications are developed using HTML, CSS, and JavaScript, while the development
    of native mobile applications relies on C++. Follow these simple steps to change
    the syntax coloring:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Windows** | **Preferences** and a dialog box will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the desired programming language and navigate to **Editor** | **Syntax
    Coloring**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the colors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps if you want to change the fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Windows** | **Preferences** and a dialog box will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **General** | **Appearance** | **Colors and Fonts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a programming language from the list and click on **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These are the most popular and important views in the Tizen IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project Explorer View**: This view shows all resources in the current workspace.
    From the **Project Explorer View**, you can manage projects, open and edit files,
    and execute operations such as building packaging and signing and validating widgets
    or applications. Right-click inside this view to open a context menu with all
    options. If the **Project Explorer View** is missing from the current perspective
    of the Tizen IDE, you can add it by selecting **Window** | **Show View** | **Other...**
    | **General** | **Project Explorer**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Properties View**: This view shows the name and the basic properties of a
    selected resource. To view more details about a resource, right-click on it and
    select **Properties**. To add it to the current perspective of the Tizen IDE,
    navigate to **Window** | **Show View** | **Other…** | **General** | **Properties**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log View**: This is a vital tool to track bugs and investigate the behavior
    of applications running on the Tizen Emulator or a device connected to the development
    system. Log messages are displayed within **Log View** while an application is
    running. The following message types are supported: `verbose`, `debug`, `info`,
    `warning`, `error`, and`fatal`. The log output can be configured to filter only
    specific message types using the *V*, *D*, *Z*, *I*, *W*, *E*, and *F* software
    buttons. Next to them are situated the buttons for additional tabs for logging
    with more filtering options that can be added, edited, and removed. An option
    to export logs is also available. If **Log View** is not visible, enable it by
    activating the following option, **Window** | **Show View** | **Log**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Console View**: This view offers several types of consoles that are useful
    during the deployment and debugging of Tizen applications. If the console is not
    visible, navigate to **Window** | **Show View** | **Console** to add it to the
    current perspective of the Tizen IDE. To change the settings of the console, go
    to **Window** | **Preferences** | **Run/Debug** | **Console**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connection Explorer View**: The list of connected devices and emulators is
    displayed at this view. It provides options for exploring their filesystems and
    transferring files. Select an item from the list and right-click on the item to
    see a menu with all available actions. To add the Connection Explorer to the current
    perspective of the Tizen IDE, navigate to **Window** | **Show View** | **Other...**
    | **Tizen**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the Active Secure profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is mandatory to create and set a **secure profile** in order to successfully
    deploy and debug applications on a Tizen device. My personal observation is that
    a lot of developers experience issues due to the secure profile when they are
    deploying an application on a device for the first time. This recipe explains
    a couple of ways to generate a certificate and set it on the Tizen IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If an Active Secure profile is not set, the following error message will be
    displayed on the screen when you try to run an application on a device or emulator
    from the Tizen IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/1908OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Signing issue due to missing Active Secure profile
  prefs: []
  type: TYPE_NORMAL
- en: Please set up a secure profile before launching any applications from the Tizen
    IDE to avoid this annoying warning.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Active Secure profile can be created manually through the command line or
    using the integrated graphical user interface from the Tizen IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'The recommended way is to generate a certificate through the Tizen IDE. The
    steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Window** | **Preferences**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Tizen SDK** | **Security Profiles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Generate** button to fill the author's details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to save the profile settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An alternative approach is to create a certificate using the command line and
    set it as **secure profile** on the Tizen IDE. Perform the following steps if
    you prefer to use a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch a terminal and navigate to the directory `<Tizen SDK install directory>/tools/certificate-generator`/.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are working on a Unix-like operating system, such as Mac OS or Linux,
    execute `certificate-generator.sh`. If you are using Windows, you should run `certificate-generator.bat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted to type the information about the certificate. After filling
    in all details, the certificate will be generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the Tizen IDE because the generated certificate has to be set in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Window** | **Preferences**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Tizen SDK** | **Security Profiles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the path to the certificate's file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **OK** button to save all settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The creation process of the certificate is similar no matter which approach
    or operating system you prefer to use. Both the batch file for Windows and the
    bash script for Linux and Mac OS run `CertificateGenerator.jar` through the `java
    -jar` command. This tool is written in Java and its file format is **Java archive**
    (**JAR**). The advantage of using Java for these kinds of applications is the
    multiplatform compatibility of Java, as the same code works on any of the operating
    systems supported by the Tizen SDK: Linux, Mac OS, and Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: Tizen Web Simulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Tizen Web Simulator** is a simplified tool to test and debug web applications.
    It is included in the Tizen SDK. Web Simulator is available under Apache Software
    License v.2.0 because it is based on the **Ripple-UI Framework**, which was initially
    developed by BlackBerry (known in the past as *research in motion*) to test BB10
    HTML5 WebWorks applications. Web Simulator offers the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Guest modifications that provide a JavaScript backend that simulates Tizen Web
    APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration panes to emit events and messages related to the geolocation,
    sensors, acceleration, and messaging capabilities of the Tizen software platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customization of the behavior of the simulator via a variety of preferences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Google Chrome web browser must be installed because it powers the Tizen
    Web Simulator. This actually means that HTML5 applications that run on Google
    Chrome will also be running on Tizen. Another benefit is that all development
    features of the Google Chrome browser are available in the simulator, including
    the Remote Inspector tool that can be accessed by pressing *F12*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is mandatory to download and install Google Chrome on the development system
    if you intend to test applications on Tizen Web Simulator. The installation path
    of the Google Chrome browser can be specified in the **Preferences** of the simulator.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Three options are available to launch an application inside the Web Simulator:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Run** on the toolbar of the Tizen IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Run** | **Run Configurations** from the menu of the Tizen IDE
    and click on **Tizen Web Simulator Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a project at the **Project Explorer View** and right-click on it. After
    that, navigate to **Run As** | **Tizen** **Web Simulator Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google Chrome will be started automatically with the Web Simulator. Adjust the
    orientation and zooming of the simulator by editing the configurations from the
    panel on the left-hand side of the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the Web Simulator is compatible only with HTML5 web applications
    and it is useless for native applications. The simulator loads the HTML file specified
    at `config.xml` when the web application is launched. By default, the name of
    the file is `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the recipes in [Chapter 11](ch11.html "Chapter 11. Debugging
    Apps in Tizen"), *Debugging Apps in Tizen*, to learn how to simulate events and
    debug applications using the Web Simulator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen Emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although it is highly recommended to deploy and debug applications directly
    on a real Tizen device, it is not mandatory to have a Tizen device in order to
    develop applications. A virtual device Emulator is delivered along with the other
    tools of the Tizen SDK. Developers can create virtual machines with custom hardware
    specifications that match their requirements for testing.
  prefs: []
  type: TYPE_NORMAL
- en: The device Emulator is a virtual machine based on the open source project **Quick
    Emulator** (**QEMU**). It provides full stacks of the Tizen platform. **Emulator
    Manager** and **Event Injector** are also provided among the Emulator tools of
    the SDK. Unlike the simulator, the emulator provides strict implementation of
    the device specifications and there are no guest modifications. Please note that
    Tizen SDK 2.2.1 supports only the x86 machine architecture for guests.
  prefs: []
  type: TYPE_NORMAL
- en: QEMU, the engine behind the Tizen Emulator, is an open source project for a
    visualization machine that allows you to run a separate operating system as just
    another task on the desktop of your development machine. The Android emulator
    is also based on QEMU. For more information about QEMU and details regarding its
    licenses, please visit [http://wiki.qemu.org/](http://wiki.qemu.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Tizen Emulator supports a variety of features, and the most important features
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Full system emulation, including CPU, RAM, and peripheral devices such as the
    camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event Injector for simulation of events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animation and OpenGL ES for hardware-accelerated 3D rendering support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telephony
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Of course, the emulator has some limitations compared to a real Tizen device.
    The differences impact the behavior of features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input system**: The emulator provides a virtual touchscreen and its drivers
    are different from the ones for the physical devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual sensor**: Values related to acceleration, light, gyroscope, proximity,
    motion, location, and battery are received through the Event Injector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Telephony**: Voice calls, call waiting, outgoing call barring, and messaging
    are supported through the Event Injector. Video calls, call forwarding, incoming
    call barring, emulator-to-emulator calls, and SMS are not supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Power management**: The emulator offers internal implementation to turn on
    and off the display.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supported media formats and codes**: Encoding of H.264 and decoding of AAC+,
    enhanced AAC+, and FLAC are not supported on the emulator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please ensure that you are running the Tizen Emulator on a computer with a minimum
    screen resolution of 1280 x 1024 pixels and the latest version of graphical drivers
    with OpenGL support. It is recommended to use an Intel CPU with **Virtualization
    Technology** (**VTx**). The performance of the emulator depends on the hardware
    of the computer and it might work slowly on low resource machines. Details about
    the requirements for the Tizen Emulator are available at [https://developer.tizen.org/downloads/sdk/installing-sdk/prerequisites-tizen-sdk](https://developer.tizen.org/downloads/sdk/installing-sdk/prerequisites-tizen-sdk).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create new instances of the Tizen Emulator, launch the Emulator Manager and
    click on the button with the label **Create New VM**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the name of the emulator, display resolution, density, skin, and size
    of RAM. Then, enable or disable the GPU and the hardware visualization of the
    CPU. When all configurations are set, click on **Confirm**, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1908OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Tizen Emulator
  prefs: []
  type: TYPE_NORMAL
- en: The emulator will appear within the window of the Emulator Manager. Hit the
    play button to launch it. The loading of Tizen on the virtual machine may vary
    depending on the hardware of the development system. Wait until Tizen is completely
    loaded and then use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an alternative, advanced users may launch the emulator from a terminal through
    a command with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Both skin options such as the height and width of the resolution as well as
    various QEMU options can be specified as arguments of the command. For details
    of the supported options, please check the user manual in the official Tizen SDK
    2.2.1 development documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.gettingstarted/html/dev_env/emulator_startup_options.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.gettingstarted/html/dev_env/emulator_startup_options.htm)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can communicate with the running Tizen emulator using Smart Development
    Bridge (SDB). For more information and details, please check the next recipe.
    Descriptions and examples of deploying and running applications on the emulator
    as well as simulating events with the Event Injector are available in [Chapter
    11](ch11.html "Chapter 11. Debugging Apps in Tizen"), *Debugging Apps in Tizen*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Smart Development Bridge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Smart Development Bridge (SDB) is a command-line tool for communication with
    the Tizen emulator or connected Tizen devices. Its role in Tizen is the same as
    the role of **Android Debug Bridge** (**ADB**) in Android. SDB is an essential
    part of the Tizen SDK and it is installed with it. SDB manages multiple device
    connections and provides basic commands for application development and debugging.
    The main features of SDB are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Manage connections to devices and/or the emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File transfer between development systems and the connected Tizen Emulator/device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote shell to execute commands on the Tizen Emulator/device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port forwarding from the host to the Tizen Emulator/device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SDB works as a typical client-server application and it consists of three main
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: A client that runs on the development system and can be invoked from the command
    line using the SDB command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A server that manages the connection and the communication with the Tizen Emulator
    and devices. It runs as a background process on the development system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A daemon that runs on each Tizen Emulator or device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although not mandatory, it is convenient to add SDB to the environmental path.
    To do it, follow the steps given in this recipe, depending on the operating system
    of your development machine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SDB is also provided as a standard package for Linux distributions. If you are
    interested in installing only SDB, please download the appropriate package for
    your Linux distribution from [http://download.tizen.org/tools/](http://download.tizen.org/tools/).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After successful installation of the Tizen SDK, SDB is located under `tizen_sdk/SDK/sdb`.
    To use the client, an SDB command must be executed within its directory unless
    the `sdb` location has been added to the environmental path variable.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add SDB to the environmental path of Windows 7, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the **Computer** icon located on the desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Advanced System** settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Environmental Variables** button on the **Advanced** tab of **System
    Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Carefully append the location of SDB to the `Path` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using Windows XP, the following steps will be helpful if you want
    to add SDB to the environmental path:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the **Computer** icon located on the desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Advanced** tab of **System Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Environmental Variables** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Carefully append the location of SDB to the `Path` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: On Windows, the changes will take effect only after reboot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To add SDB to the environmental path for all users on Ubuntu, append the SDB
    directory to the path that is defined at file `/etc/environment`. Log out and
    log in again or just reboot to apply the changes.
  prefs: []
  type: TYPE_NORMAL
- en: To add SDB to the environmental path for all users on Mac OS X Leopard and above,
    create a text file at the directory `/etc/paths.d/` and set the location of SDB
    within it using root privileges, for example, `sudo -s 'echo "<tizen_sdk>/sdb"
    > /etc/paths.d/sdb'`.
  prefs: []
  type: TYPE_NORMAL
- en: A quick and easy alternative approach to achieve a similar result on UNIX-like
    operating systems, such as Linux and Mac OS, without modifying `/etc/environment`
    or creating a file at `/etc/paths.d` is to create a symbolic link to SDB in the
    `bin` directory using root privileges, for example, `sudo ln –s <tizen_sdk>/sdb
    /bin/sdb`.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that `<tizen_sdk>` in both examples must be replaced with the actual
    path, depending on the installation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please have a look at the next recipe to learn how to use the full capabilities
    of SDB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Smart Development Bridge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SDB is a powerful tool with a lot of capabilities and features. Although you
    can successfully develop applications using the Tizen IDE without even knowing
    what SDB is, it is recommended to explore the options of the tool. SDB is a developer's
    best friend when it comes to management of a connected device, transferring files,
    and debugging applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to enable and use SDB:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the date and time on your devices is correct.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the developer mode and USB debugging on a Tizen device by navigating
    to **Settings** | **Developer options** | **USB debugging**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the Tizen device to a computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the SDB command in a console using the following syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'According to the Tizen 2.2.1 official development guide, the values provided
    for `option` in the preceding command can be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-d`: This stands for select device. This sends the specified command to a
    connected USB device. Please note that this option will fail if multiple Tizen
    devices are attached over USB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-e`: This option is used to control an emulator. The error handling is similar
    to that of the option `-d`. If multiple emulators are running, this command will
    fail and an error will be returned. Direct the command to the only running emulator
    and return an error if more than one emulators are present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s <serial number>`: Tizen devices or emulators that are attached to a developer''s
    computer are identified by their serial number. The `-s` option should be followed
    by the serial number of the device and SDB will take care to target the command
    only to the specified device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a list of all the supported SDB commands with some brief information
    about them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Details |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `devices` | This provides a list of connected devices. |'
  prefs: []
  type: TYPE_TB
- en: '| `connect <host>[:<port>]` | This connects to a device through TCP/IP. |'
  prefs: []
  type: TYPE_TB
- en: '| `disconnect <host>[:<port>]` | This disconnects a device. The host and port
    parameters are optional. If they are not specified, all devices will be disconnected.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `push <local> <remote> [-with-utf8]` | This transfers a file from the development
    system to the connected Tizen device. |'
  prefs: []
  type: TYPE_TB
- en: '| `pull <remote> [<local>]` | This transfers a file from the connected Tizen
    device to the development system. |'
  prefs: []
  type: TYPE_TB
- en: '| `shell` | This accesses a remote shell of the connected Tizen device or emulator.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `shell <command>` | This remotely runs a single shell command to a connected
    Tizen device or emulator. Execution of the following commands is allowed: `ls`,
    `rm`, `mv`, `cd`, `mkdir`, `cp`, `touch`, `echo`, `tar`, `grep`, `cat`, `chmod`,
    `rpm`, `find`, `uname`, `netstat`, and `killall`. |'
  prefs: []
  type: TYPE_TB
- en: '| `dlog [option] [<filter-spec>]` | This prints the current log out of the
    buffers of a connected device or emulator. |'
  prefs: []
  type: TYPE_TB
- en: '| `install <path_to_tpk>` | This installs a `tpk` package. |'
  prefs: []
  type: TYPE_TB
- en: '| `uninstall <appid>` | This uninstalls an application using its ID. |'
  prefs: []
  type: TYPE_TB
- en: '| `forward <local> <remote>` | This specifies the `local` and `remote` socket
    to configure port forwarding. |'
  prefs: []
  type: TYPE_TB
- en: '| `help` | This displays SDB help information and usage guides. |'
  prefs: []
  type: TYPE_TB
- en: '| `version` | This prints the SDB version number. |'
  prefs: []
  type: TYPE_TB
- en: '| `start-server` | This launches the SDB server if it is not already running.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `kill-server` | This terminates the SDB server if it is running. |'
  prefs: []
  type: TYPE_TB
- en: '| `get-state` | This displays the status of the connection to devices. |'
  prefs: []
  type: TYPE_TB
- en: '| `get-serialno` | This displays the serial number of a connected Tizen device.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `status-window` | This displays the status of a connected device until the
    developer manually terminates the command. |'
  prefs: []
  type: TYPE_TB
- en: '| `root <on&#124;off>` | This enables or disables the root account mode. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If several Tizen Emulators and/or devices are running and connected at the same
    time, you have to specify the desired target at the SDB command. Otherwise, the
    execution of the command will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Android developers will be happy to find out a lot of similarities between Tizen
    Smart Development Bridge and Android Debug Bridge. Similar names of both tools
    is not a coincidence. Both tools have common purposes. Most of the commands are
    executed using the same keywords on both platforms and have similar behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are several use cases of SDB commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List attached devices:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the shell of a specific device:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running a single shell command on a Tizen device:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The information provided by the log buffers of a device might be valuable during
    the debugging of Tizen applications. More details and advanced usage examples
    of `sdb dlog` are available in [Chapter 11](ch11.html "Chapter 11. Debugging Apps
    in Tizen"), *Debugging Apps in Tizen*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full list of SDB supported commands as of Tizen SDK 2.2.1 is available at
    [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.gettingstarted/html/dev_env/commands.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.gettingstarted/html/dev_env/commands.htm).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 2. Introduction to the Tizen Ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: The Tizen app life cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen web app programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen web APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Localizing Tizen web apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging Tizen web apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen native app programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging Tizen native apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Becoming a Tizen Store seller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing apps to Tizen Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ecosystem and communities are essential for every open source project, and
    Tizen is no exception. Tizen is the OS of everything. It targets different devices,
    form factors, and CPU architectures, so it is a flexible software platform that
    can be used for multiple purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Tizen can run on devices with ARM- or i586-compatible processors. The first
    commercially available Tizen device is the Samsung camera NX300\. In 2014, Samsung
    also launched several smart watches with Tizen, and Intel manufactured the mini
    PC NUC. Please explore the last chapter of the book if you are interested in booting
    Tizen on various hardware devices or even building your own device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Three types of installable applications are supported by Tizen:'
  prefs: []
  type: TYPE_NORMAL
- en: Web applications are developed using HTML5, JavaScript, and CSS. This is the
    recommended type, because these applications are supported by all Tizen profiles
    (IVI, mobile, wearable, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native applications are developed using C++ and Tizen native APIs. They are
    faster but more complex and difficult to port.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hybrid applications combine web and native applications. A hybrid application
    contains a single web application with a user interface and one or more native
    service applications that communicate with each other.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter contains information about the life cycle of Tizen applications,
    an overview of the development tools, and technologies as well as guides to publishing
    and selling applications through Tizen Store. It is an excellent getting started
    guide to publishing your first Tizen application.
  prefs: []
  type: TYPE_NORMAL
- en: The Tizen app life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tizen SDK provides tools to turn good ideas into excellent applications
    and to publish them to Tizen Store. The life cycle of Tizen applications is similar
    to the life cycle of mobile applications for Android and iOS, and it includes
    the steps described in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The life cycle of an application for Tizen can be divided into six major steps
    as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/1908OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tizen application life cycle
  prefs: []
  type: TYPE_NORMAL
- en: The development of an application is a continuous process. You have to provide
    regular updates with new features and enhancements. Arm yourself with patience.
    Some steps might require more time than expected. Sometimes, you may even need
    to go back to a previous step, for example, if the QA of Tizen Store rejects the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start, make sure that you have successfully installed the Tizen developer
    environment. A Tizen device or emulator is required to debug applications. If
    you do not have a device, just create an emulator using Tizen **Emulator Manager**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Come up with a good idea.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A good idea lies behind each great mobile application. All you need is inspiration,
    but unfortunately, as far as I know, there are no strict rules, standards, or
    algorithms, so you have to think out of the box.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Design the application user interface (UI) and implement the backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user interface and the user experience are the key factors that convert
    a good idea into an exceptional application with a lot of downloads. Plan the
    development road map of the application carefully, and select the best approach
    for implementation. If your application communicates with a web service, wisely
    distribute the load between the mobile application and the server to achieve optimal
    performance. UML diagrams might help you to prepare well before you start coding.
    Always remember that a good plan can save you a lot of time during development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build a Tizen application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Tizen IDE provides the tools required for easy building of a Tizen application
    with a single click. Before you start the build, you have to configure its settings.
    Navigate to **Project** | **Build Configuration** to manage the available build
    settings. After that, you can build the application at any appropriate time by
    hitting *F10* or navigating to **Project** | **Build Project**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Debug the Tizen application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try out the application on a Tizen device and emulator to verify that it is
    working as expected. Testing is very important, because even a minor bug can irritate
    users, and they might stop using your application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Package the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All files of the application have to be bundled into a package that can be installed
    on Tizen devices. The file extension of the package is `.tpk` for native applications
    and `.wgt` for web applications.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Certify the application and publish it to Tizen Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final step is to release your app to the market. The easiest way to reach
    millions of users from around the world is to distribute your application through
    application stores, such as the official Tizen Store.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tizen is open, and so is its ecosystem. Tizen Store is the official store that
    is maintained by Samsung, but you can publish your applications to other stores
    too. If you wish, you can even create your own store.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tutorials and examples about web applications for Tizen are available in the
    second part of this book. Check [Chapter 11](ch11.html "Chapter 11. Debugging
    Apps in Tizen"), *Debugging Apps in Tizen*, for details about debugging apps in
    Tizen. More information about packaging, certification, and publishing to Tizen
    Store is available in other recipes of this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen web app programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web application development has been part of the Tizen project since its initial
    release. It is the recommended approach for application development on the platform.
    Millions of developers are already familiar with the basics of web development,
    so they can easily start developing applications for Tizen.
  prefs: []
  type: TYPE_NORMAL
- en: Tizen SDK provides all the tools necessary for development of Tizen web and
    hybrid applications. A web application contains HTML, CSS, and JavaScript files
    that are combined in a package with the extension `.wgt`. A hybrid application
    combines a web application with one or more native service applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web applications are installed and executed as standalone applications on Tizen,
    thanks to the**Web Runtime** (**WRT**) engine. All standard HTML5 APIs are supported.
    There are certain features that are not covered by these APIs, so Tizen web runtime
    fills the gap by providing additional JavaScript functions.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates WRT in action by creating a simple Hello World web
    application and running it on a Tizen device or an emulator.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch the Tizen IDE, and if asked, choose a workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **File** | **New** | **Tizen Web Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A wizard to create the project of the Tizen web application will appear. From
    **Template** select **Tizen Web UI Framework** and **Single Page Application**.
    Enter a project name, for example, `hello`. When you are ready, click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `config.xml` from **Project Explorer**, and open it using **Widget
    Configuration Editor**. By default, a double-click should open the file in **Widget
    Configuration Editor**. If not, place the mouse over the file, click on the right
    button, and select this option from **Open with**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Overview** tab, and change the name to `HelloWorld`. This way, the
    name of the application will be different from the name of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From **Project Explorer**, open `index.html`, replace its content with the
    following source code, and save the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save all files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that a Tizen device with the developer mode enabled is connected or
    Emulator is running. If you are unsure how to enable the developer mode, have
    a look at the recipe *Using Smart Development Bridge* from the previous chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the project of the application from **Project View**, right-click on
    it, and from the menu that appears, navigate to **Run as** | **Tizen Web Application**.
    As an alternative, you can just hit the run button to deploy and launch the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Upon creating a new project, the Tizen IDE automatically generates the directory
    structure and creates files if a template is selected.
  prefs: []
  type: TYPE_NORMAL
- en: All configurations and permissions of the application are set at the XML file
    `config.xml`. The Tizen IDE provides means to simplify the editing process of
    the file. The name, the identifier, the version, the icon file, as well as the
    entry file, which is `index.html` by default, are among the configurations stored
    in `config.xml`. Access to sensitive APIs should also be set by describing privileges
    at this file if the application uses such sensitive APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several JavaScripts and CSSes are included using the following HTML code to
    make sure that the application is compatible with Tizen WRT and use the standard
    Tizen look and feel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The file `js/main.js` will be generated by the IDE, and it will contain the
    JavaScript source code for initialization of the application and for the handling
    of the back hardware button. Pay attention to the fact that jQuery is also included
    because the Tizen Web UI framework is based on jQuery Mobile.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any trouble creating a Hello World application from scratch, use
    the example provided with the book.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More examples and advanced tutorials related to web applications for Tizen are
    available in the chapters from the second part of the book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen web APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen provides a collection of APIs following the specification of W3C/HTML5
    and the nonprofit industry consortium to create the open standards Khronos. A
    set of additional APIs that provide access to specific hardware and software capabilities
    of the devices are also provided. These APIs are based on JavaScript, and this
    programming language must be used to take advantage of the APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe provides just a brief overview of Tizen APIs. For more information
    and details, please check the documentation provided with the SDK Help at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/api_reference/api_reference.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/api_reference/api_reference.htm).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Tizen platform provides the following JavaScript-based APIs for development
    of web applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alarm**: This API adds or removes date and time events through the methods
    provided by this API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application**: This manages installed and running applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Control**: This API helps in accessing and controlling the available
    shared data of other applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packages**: This API helps in installing and uninstalling packages or retrieving
    details about installed packages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bluetooth**: This API provides control over the short distance communication
    protocol, Bluetooth'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Messaging**: This API provides messaging capabilities through different popular
    communication channels: SMS, MMS, and e-mail'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network Bearer Selection**: This API controls and selects the network bearer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NFC**: This provides connection to other devices in close range using NFC'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Push**: This API helps in receiving and handling push notifications from
    the izen remote server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure Element**: This API accesses data on the secure smart card chip'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content**: This API discovers and explores multimedia content, such as video
    or music'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download**: This API provides methods to download files over HTTP/HTTPS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filesystem**: This API provides methods to access the filesystem, create,
    read, and write files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message port**: This API provides capabilities for communication between
    different applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bookmark**: This API accesses and manages bookmarks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Calendar**: This API accesses and manages the calendar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Call History**: This API provides information about incoming and outgoing
    calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contact**: This API manages the address book'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Synchronization**: This API provides interfaces for device data synchronization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Power**: This API is used for power management'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System information**: This API provides information about the battery, CPU,
    storage, WiFi, cellular network, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System setting**: This API provides access to various settings of the platform'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time**: This API retrieves information about date and time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web setting**: This API control setting is specific to the web view of Tizen
    web applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notification**: This API notifies the user about events related to the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and create a new project for Tizen web application, and
    append the privileges required for the API that you plan to use for `config.xml`,
    for example, [http://tizen.org/privilege/alarm](http://tizen.org/privilege/alarm).
  prefs: []
  type: TYPE_NORMAL
- en: 'Take, for instance, the following JavaScript code, which demonstrates the simple
    usage of the Alarm and Application APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All additional device APIs that are used in web applications for Tizen are accessed
    through the `tizen` JavaScript object. A set of generic functions, including error
    handling and filters, is also provided with the `tizen` object.
  prefs: []
  type: TYPE_NORMAL
- en: The Application API is used to retrieve the ID of the current application, and
    it is assigned to the JavaScript variable `sAppId`. After that, a relative alarm
    that will occur after a couple of hours is created and assigned to the variable
    `myAlarm` using the Alarm API. Finally, on the last line of the code snippet,
    the alarm is added to the alarm storage of the current application.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, both APIs used in the code snippet are accessed through the
    `tizen` JavaScript object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter contains only a brief overview of the available APIs. Tutorials
    and examples for most of them are available in the chapters from the second part
    of the book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Localizing Tizen web apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Internationalization and localization of your applications to different languages
    is a key factor for success. Localized content attracts the attention of a larger
    audience, which leads to more downloads, and, of course, better revenues.
  prefs: []
  type: TYPE_NORMAL
- en: Internationalization is the process of designing the application in such a way
    that various languages are supported. Localization is another process of adding
    specific local resources to the application, such as text translated to different
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to a support multiple languages inside the
    Tizen web application using a folder-based technique for localization.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to localize a Tizen application:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the application's project, and select its root folder at **Project View**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the main menu of the Tizen IDE, navigate to **Project** | **Localization**
    | **Localization Wizard...** as shown in the following screenshot:![How to do
    it...](img/1908OS_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launching Localization Wizard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the first screen of **Localization Wizard**, choose the files that will be
    localized, and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select locales from the list of **Available locales**, and include them in the
    **Selected locales** list. After that, click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the files that have to be translated to the chosen locales by checking
    their filenames, and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To change the global language on a Tizen device or Emulator during testing of
    application localization, navigate to **Settings** | **Language and keyboard**
    | **Display language**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Localization Wizard** creates a folder called `locales` at the root level
    of the application package and creates separate folders in it for each selected
    locale. All files that have been chosen for localization of the selected locale
    will be included in its folder. For example, if we decide to create the French
    localization of `index.html`, then the folder `/locales/fr` will be created and
    the file will be copied in it.'
  prefs: []
  type: TYPE_NORMAL
- en: If a file is not selected for localization, it will not appear in the `locales`
    folder, and its original version from the root level of the package will be automatically
    loaded.
  prefs: []
  type: TYPE_NORMAL
- en: When a web application is launched, Tizen will try to load the content using
    the current locale, which is configured by the user at the platform settings.
    If such a locale is not present, then the application will be loaded using its
    default localization.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Tizen web applications, dynamic string localization using JavaScript is
    also possible, thanks to the open source library, `Globalize`. Perform the following
    steps to enable and use this library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define translation tables for each supported language. For example, the following
    code snippet defines the default language (English) and French:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use a translation string with automatic or manual language selection as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pay attention to the fact that the messages are case sensitive. The output
    on the Tizen device or Emulator on which the display language has been set to
    English will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: For more information about the open source library, `Globalize`, visit [https://github.com/jquery/globalize](https://github.com/jquery/globalize).
  prefs: []
  type: TYPE_NORMAL
- en: Packaging Tizen web apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the successful development and testing of a web application, all of its
    files must be bundled together into a single file called `package` that has the
    extension `.wgt`. The package contains all the HTML, CSS, JavaScript, and any
    other resource files of the application. The `.wgt` file is used to install web
    applications on Tizen devices and should be uploaded to Tizen Store when the application
    is published.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tools to build Tizen applications are integrated with the Tizen IDE. The
    building process is simple and it is fully automated. Please ensure that the Tizen
    SDK and IDE are properly installed before you proceed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that an active secure profile has been set before you start the packaging
    of the web application. For more information, please read the recipe *Setting
    the Active Secure Profile* from [Chapter 1](ch01.html "Chapter 1. The Tizen SDK"),
    *The Tizen SDK*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the described actions to build a Tizen web application from the Tizen
    IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE, and navigate to the **Project Explorer** view. Select
    the project of the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the project, and navigate to **Project** | **Build Package**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure that the package has been created successfully by checking the content
    of the project folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The package produced by the Tizen IDE is created according to W3C recommendations
    for web applications. For more information, visit [http://www.w3.org/TR/widgets/](http://www.w3.org/TR/widgets/).
  prefs: []
  type: TYPE_NORMAL
- en: The content of the package is compressed using the ZIP archive algorithms and
    its file must have the extension `.wgt`. Its MIME type is `application/widget`.
  prefs: []
  type: TYPE_NORMAL
- en: Several files and folders with reserved names shown in the following table have
    to be included inside the package of the Tizen web application. After successful
    installation, a directory, whose name matches the package ID, is created at `/opt/usr/apps`.
    The directory hierarchy also includes folders `bin` (for the application's binary
    files), `data`, and `res`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `config.xml` | Web widget''s configurations. |'
  prefs: []
  type: TYPE_TB
- en: '| `icon.gif` | Several file types for `icon` are supported. |'
  prefs: []
  type: TYPE_TB
- en: '| `icon.ico` |'
  prefs: []
  type: TYPE_TB
- en: '| `icon.jpg` |'
  prefs: []
  type: TYPE_TB
- en: '| `icon``.``png` |'
  prefs: []
  type: TYPE_TB
- en: '| `icon.svg` |'
  prefs: []
  type: TYPE_TB
- en: '| `index.html` | Several file types are supported for main entry page. By default
    the name is `index`. |'
  prefs: []
  type: TYPE_TB
- en: '| `index.htm` |'
  prefs: []
  type: TYPE_TB
- en: '| `index.svg` |'
  prefs: []
  type: TYPE_TB
- en: '| `index.xhtml` |'
  prefs: []
  type: TYPE_TB
- en: '| `index.htt` |'
  prefs: []
  type: TYPE_TB
- en: '| `locales` | Directory that contains localization data. |'
  prefs: []
  type: TYPE_TB
- en: Reserve directory and filenames for web applications
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Web applications can be installed through SDB through the Tizen IDE or the command-line
    interface if the developer mode is enabled. Users can download the application
    from **Tizen Store** or other stores once it is published.
  prefs: []
  type: TYPE_NORMAL
- en: The package manager of the operating system on the device is responsible for
    the installation and the management of installed applications. To see the list
    of all installed applications, launch **Settings** and select **Manage Applications**.
    Click on the application to remove it or to stop it if it is running.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check the recipe *Tizen native app programming* to learn how to create multiproject
    applications and how to bundle hybrid applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen native app programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since Tizen 2.0, it is possible to develop mobile applications using C/C++ programming
    languages. Although in most of the cases, web applications should be preferred
    and recommended, native programming is useful for faster performance, low-level
    access to device capabilities, compatibility with existing Bada applications,
    as well as third-party libraries and frameworks, such as Qt for Tizen. Native
    programming for Tizen supports both service applications and applications with
    GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The native development framework for Tizen is quite complex. The most significant
    differences from the standard C++ are the exception handling mechanism and the
    two-phase constructors. Although Tizen does not use C++ exceptions, you can use
    try-catch statements for your own application's C++ exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: Tizen native applications for mobile devices are based on the graphics stack
    of Bada, which is known as a native framework or **OSP** (Open Service Platform).
    During the port of existing Bada C++ applications, the `OSP` namespace should
    be renamed to `Tizen`. This porting process can easily be done through the Tizen
    IDE. The full list of available namespaces in the Tizen native framework is available
    at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.apireference/namespaces.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.apireference/namespaces.html).
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, Tizen native frameworks contain hidden gems, such as the specific
    life cycle of native applications and the macros used for logging.
  prefs: []
  type: TYPE_NORMAL
- en: Please explore in detail the native development documentation if you plan to
    develop sophisticated Tizen native mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these guidelines to create a simple Tizen native application:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Tizen IDE and, if asked, choose a workspace. It is highly recommended
    to switch the IDE to native perspective.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **File** | **New** | **Project...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A wizard to create a project will appear. From the list of different project
    types, select **Tizen** | **Native Tizen Project**, and after that, click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Template**, select **Tizen Form-based Application** and **Without SceneManager**.
    Enter a project name, for example, `helloWorldNative`. After that, click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the project from the **Project View**, and right-click to open the context
    menu with additional options. Choose **Run Native UI Builder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait until Tizen **Native UI Builder** is completely loaded. Select `Header`
    of `IDL_FORM` from the **Outline** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Properties** view of the **Native UI Builder**, and expand all properties.
    Change **Title Text** to `Hello World`.![How to do it...](img/1908OS_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing Title Text from Tizen Native UI Builder
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save changes and close the Native UI Builder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `manifest.xml` using the **Tizen Manifest Editor**, and select the **Features**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add**, select [http://tizen.org/feature/screen.size.all](http://tizen.org/feature/screen.size.all)
    to support all screen sizes, and confirm your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that a Tizen device with enabled developer mode is connected or the
    emulator is running. Again, select the application's project in **Project View**
    of the Tizen IDE, and right-click to open the context menu. Navigate to **Run
    as** | **Tizen Native Application.** The alternative is just to hit the **Run**
    button to deploy and launch the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Steps 9 and 10 are optional, but they are highly recommended, because Tizen
    Store may reject the application if the screen size feature is not specified,
    and a warning will be displayed during packaging.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Following this procedure, the Tizen IDE will automatically create the filesystem
    of the project as well as C++ and resource files.
  prefs: []
  type: TYPE_NORMAL
- en: The main class of a native Tizen mobile application must inherit the class `Tizen::App::UiApp`
    or the class `Tizen::App::ServiceApp`. Our example inherits `Tizen::App::UiApp`
    and overloads several methods including `OnAppInitializing()` and `OnAppInitialized()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the launch of a native application, `OnAppInitializing()` is the first
    method that is called. After that method, `OnAppInitialized()` is also called,
    and it creates the frame of our example application using the method `AddFrame()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each Tizen native application with a GUI must have at least one frame.
  prefs: []
  type: TYPE_NORMAL
- en: The `nothrow` statement is used as an argument of the new operator when `helloWorldFrame`
    is created to guarantee that an exception will not be thrown. Also note the `L`
    prefix of the hardcoded string of the name. It indicates that the text is a Unicode
    string.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the application is running, each frame can be in one of the following
    three states: activated, deactivated, or minimized. Upon termination of the application,
    the method `OnAppTerminating()` gets called, and all resources must be released.'
  prefs: []
  type: TYPE_NORMAL
- en: The modification of the header that had been done through Tizen Native UI Builder
    was saved as the XML file `IDL_FORM.xml`. The Native UI Builder simplifies the
    process, but the same effect will be achieved if the XML file is edited manually.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To find out details about native application development and C++ API references,
    please have a look at the sample native applications provided with the SDK, and
    visit the official Tizen documentation at [https://developer.tizen.org/documentation/dev-guide/2.2.1](https://developer.tizen.org/documentation/dev-guide/2.2.1).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging Tizen native apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the successful development and testing of a native application, all of
    its files must be bundled together into a single installation file, whose extension
    is `.tpk`. This file is called `package`. It sounds similar to the **Android application
    package** file (**APK**), and it has the same purpose. The `.tpk` file is used
    to install native applications on Tizen devices and should be uploaded to Tizen
    Store when the application is published.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Native mobile applications that consist of several projects are also supported
    by Tizen. This type of application combines a GUI project with one or more projects
    of service applications that do not have a GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that an active secure profile has been set before you start the packaging
    of the native application. For details, please refer to the recipe *Setting Active
    Secure Profile* from [Chapter 1](ch01.html "Chapter 1. The Tizen SDK"), *The Tizen
    SDK*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Perform the following steps to create a package of a Tizen native mobile application
    from a single project.
  prefs: []
  type: TYPE_NORMAL
- en: Locate the project of the application at the **Project Explorer** of Tizen IDE,
    and select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the project, and from the context menu, choose **Project > Build Package
    > TPK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure that the package has been created successfully by checking the content
    of the project folder.
  prefs: []
  type: TYPE_NORMAL
- en: Perform the following steps to create a package of a Tizen native mobile application
    that consists of more than one project.
  prefs: []
  type: TYPE_NORMAL
- en: Open all projects that should be included in the package in the **Project Explorer**
    view of the Tizen IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the project with GUI in **Project Explorer**, and right-click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Properties** | **Project References**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the project of the service applications related to the GUI project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**, and proceed with the packaging of the GUI project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The package of an application created from multiple projects contains binaries,
    resources, and data files of all related projects. The application has a single
    `manifest.xml` file, and it merges the configurations of all projects.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Both the packages, Tizen native mobile and Tizen web applications, are compressed
    with the ZIP algorithms. Unlike the web application, the extension of the native
    mobile application is `.tpk`. The MIME type of the package is `application/x-tizen.package-archive`.
    The content of the package is spread among the following directories, whose names
    are reserved:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Directory Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `bin` | Application''s binaries |'
  prefs: []
  type: TYPE_TB
- en: '| `data` | Private data |'
  prefs: []
  type: TYPE_TB
- en: '| `info` | Metadata (including `manifest.xml`) |'
  prefs: []
  type: TYPE_TB
- en: '| `lib` | Libraries |'
  prefs: []
  type: TYPE_TB
- en: '| `res` | Resources |'
  prefs: []
  type: TYPE_TB
- en: '| `settings` | Settings |'
  prefs: []
  type: TYPE_TB
- en: '| `shared` | Shared resources |'
  prefs: []
  type: TYPE_TB
- en: Reserved directories of a native mobile application
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Tizen package manager is responsible for installing, updating, and uninstalling
    the packages of both native and web applications. After successful installation,
    the package is extracted in a separate directory again at `/opt/usr/apps`, but
    the directory structure is slightly different from that of a web application.
  prefs: []
  type: TYPE_NORMAL
- en: To view all installed applications on a Tizen device or Emulator, launch **Settings**,
    and go to **Manage Applications**. To remove an application, select it from the
    list, click on **Uninstall**, and confirm the uninstallation. Applications can
    be also removed using **SDB** if the developer mode is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Becoming a Tizen Store seller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tizen Store is the official and the first application marketplace for the Tizen
    platform. You can register and publish your applications at Tizen Store to reach
    users and increase your review.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As an open source platform, Tizen allows installation of applications from other
    stores as well. Unlike iOS, there is place for more than one store in the Tizen
    ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Registering with Tizen Store is free, and no special preparation is needed.
    Please prepare a scanned copy of your business registration certificate and your
    bank account details if you plan to request commercial status and publish paid
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To register as a Tizen Store seller, you should perform the following simple
    actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch your favorite web browser, and go to [http://seller.tizenstore.com](http://seller.tizenstore.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Sign Up Now**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are an independent developer, select **Register as a Private Seller**.
    If you are representing a company, select **Register as a Corporate Seller**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the onscreen instructions (four steps), and provide the required information
    to complete the registration successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To publish paid applications, you should obtain commercial status. Click on
    the **Request Commercial Seller Status** button on the last step of the registration,
    or log in and go to your profile page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Tizen Store is operated by Samsung. The registration is free. After registration,
    the seller must request commercial status to be able to offer paid applications.
  prefs: []
  type: TYPE_NORMAL
- en: The revenue from paid applications is split as 30 percent for Samsung and 70
    percent for the seller. By the way, this is an industry-standard revenue split,
    because the same shares are reserved for the publishers at many application stores
    for other operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Payments to the sellers are made monthly if the due amount is at least $150\.
    The supported options for payment to the publishers are via wire transfer to a
    registered bank account or through PayPal.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Refer to the next recipe to learn how to publish applications to Tizen Store.
    Check the Tizen Store terms and conditions for more details at [http://seller.tizenstore.com/help/termsAndConditions.as](http://seller.tizenstore.com/help/termsAndConditions.as).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing apps to Tizen Store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After development, testing, and packaging of an application, it is time to launch
    it on the market. Register to Tizen Store, and publish your web or native application
    as free or paid content.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before you start, it is highly recommended that you check the Tizen Store **Validation
    Guide**, which is available under the **Guides** section of the seller's website.
  prefs: []
  type: TYPE_NORMAL
- en: The application validation process is very strict. The quality assurance team
    of Tizen Store inspects each submission and ensures that it is properly working.
    Rejection of applications causes delays and losses for the developer, so it is
    better to get to know the validation criteria even before starting the development.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Upload and publish your Tizen application to Tizen Store in five simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch your favorite web browser, and go to [http://seller.tizenstore.com](http://seller.tizenstore.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add New App**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the basic information, upload the application's package, and after that,
    click on **Next** to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Display Information** screen, fill the description, add tags, and so
    on. When you are ready, click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the information that you have entered on the **Final Review** screen,
    and if everything is OK, click on **Confirm**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have any questions, and you want to directly contact a representative
    of Tizen Store, navigate to **Support** | **My Q&A**, and click on **Write** to
    start a new discussion.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The application uploaded is validated by the QA team, and if it is approved,
    it will become available for download from Tizen Store. The validation process
    takes approximately three days, and it is divided into two phases: **Initial Inspection**
    and **Dynamic Analysis**, and **Review and Final Confirmation**. The first phase
    checks for API privileges, security issues, malware, and so on. It is done automatically.
    The second phase is performed manually. If the application successfully passes
    both phases, its status will be changed to **Ready for Sale**. Otherwise, if the
    application fails to pass validation, a report with details will be provided to
    the seller.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For details regarding the application submission process, please log in to the
    website for Tizen Store sellers, and access the user's manuals by clicking on
    the **Guides** button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

- en: Part II. Creating Tizen Web Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Building a UI*](ch03.html "Chapter 3. Building a UI")'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Storing Data*](ch04.html "Chapter 4. Storing Data")'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Creating Multimedia Apps*](ch05.html "Chapter 5. Creating Multimedia Apps")'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Developing Social Networking Apps*](ch06.html "Chapter 6. Developing Social
    Networking Apps")'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Managing the Address Book and Calendar*](ch07.html "Chapter 7. Managing the
    Address Book and Calendar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Communication*](ch08.html "Chapter 8. Communication")'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Using Sensors*](ch09.html "Chapter 9. Using Sensors")'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3. Building a UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating list views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing pop ups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Tizen Notification API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the look and feel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing and writing text on a canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating 3D objects with WebGL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter of the book is dedicated to graphical user interfaces. It includes
    tutorials for creating buttons, lists, pop ups, and notifications with Tizen Web
    UI Framework and jQuery Mobile. We'll also cover hints to make user-friendly mobile
    applications as well as easier customization of the application design are shared.
    Furthermore, reference guides for drawing 2D and 3D objects on an HTML5 canvas
    are also included.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tizen Web UI Framework is based on several open source JavaScript libraries
    and frameworks: jQuery, jQuery Mobile, and Globalize.'
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, jQuery Mobile is among the most popular frameworks to build web applications
    optimized for mobile devices, and it is not a surprise that Tizen relies on it.
    The framework is based on the popular JavaScript library, jQuery. jQuery Mobile
    is an open source project of jQuery foundation, and it is available under MIT
    license.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The page structure of a Tizen web application built with Tizen Web UI Framework
    is similar to jQuery Mobile. A typical page contains:'
  prefs: []
  type: TYPE_NORMAL
- en: A header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A footer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the widgets provided by Tizen UI Framework are based on jQuery Mobile.
    Several new widgets designed in a way that they match the Tizen native UI are
    also available.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists in alphabetical order all widgets provided by Tizen
    UI Framework as of the Tizen SDK 2.2.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Widget | Brief description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Autodividers | Automatically adds dividers between the items of a list. A
    similar option is available for jQuery Mobile lists. |'
  prefs: []
  type: TYPE_TB
- en: '| Button | A basic push button inherited from jQuery Mobile. |'
  prefs: []
  type: TYPE_TB
- en: '| Checkbox | Displays a standard checkbox. The user can choose whether to select
    it. Often, several checkboxes are grouped together, and the user can simultaneously
    select more than one option. This component also comes from jQuery Mobile. |'
  prefs: []
  type: TYPE_TB
- en: '| Date, Time, or Date time picker | Widgets that simplify the input of date
    and/or time. |'
  prefs: []
  type: TYPE_TB
- en: '| Extendable list | Provides a list view that can be extended. |'
  prefs: []
  type: TYPE_TB
- en: '| Fast scroll | Simplifies scrolling and makes it faster. |'
  prefs: []
  type: TYPE_TB
- en: '| Flip toggle | This is similar to a radio button as it displays a switch with
    two options. For example, on/off. The same widget exists in jQuery Mobile. |'
  prefs: []
  type: TYPE_TB
- en: '| Footer | An essential widget inherited from jQuery Mobile. It is placed at
    the bottom of a page. |'
  prefs: []
  type: TYPE_TB
- en: '| Gallery | A widget for displaying images. |'
  prefs: []
  type: TYPE_TB
- en: '| Gallery 3D | A widget that allows 3D arrangement for the displayed images.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Handler | Scrollbar optimized for touchscreen devices. |'
  prefs: []
  type: TYPE_TB
- en: '| Header | Another essential widget from jQuery Mobile. It is placed at the
    top of a page. |'
  prefs: []
  type: TYPE_TB
- en: '| HTML block | A widget that contains custom HTML code. |'
  prefs: []
  type: TYPE_TB
- en: '| List | List view with multiple items, the appearance of which can be customized.
    This widget is the same as the one in jQuery Mobile. |'
  prefs: []
  type: TYPE_TB
- en: '| List divider | A special item of a list that acts a separator. It is convenient
    for grouping items, and it also comes from jQuery Mobile. |'
  prefs: []
  type: TYPE_TB
- en: '| Multimedia view | A widget that provides audio and video player. |'
  prefs: []
  type: TYPE_TB
- en: '| Notification | An information widget that is displayed when events occur.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Pop up | A customizable widget to show information in a separate window.
    It has the same methods and events as the jQuery Mobile widget with the same name.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Progress | Indicates that there is an operation in progress. |'
  prefs: []
  type: TYPE_TB
- en: '| Progress bar | Indicates the progress of an ongoing operation using percentages.
    This widget is taken from jQuery UI. |'
  prefs: []
  type: TYPE_TB
- en: '| Search filter bar | A filter that simplifies searching in large text data.
    The same widgets exist in jQuery Mobile. |'
  prefs: []
  type: TYPE_TB
- en: '| Slider | Another widget from jQuery Mobile. It collects a value picked by
    the user in a range defined by the developer. |'
  prefs: []
  type: TYPE_TB
- en: '| Split view | Splits the content into several different views on the screen.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Swipe | An advanced list widget whose items can be swiped and buttons can
    appear in the place of each item. |'
  prefs: []
  type: TYPE_TB
- en: '| Tab bar | Bundles buttons into a group. It is recommended to be located within
    the header or the footer of a page. |'
  prefs: []
  type: TYPE_TB
- en: '| Token text area | A sophisticated widget that converts text entered by the
    user into a button. |'
  prefs: []
  type: TYPE_TB
- en: '| Virtual grid | A widget optimized for loading and representing large data
    in a table. |'
  prefs: []
  type: TYPE_TB
- en: '| Virtual list | A widget optimized to load and represent large data in a list.
    |'
  prefs: []
  type: TYPE_TB
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following HTML5 source code to create a page that contains a header
    with a title and a button, content with a list, and a footer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML5 code snippet demonstrates the usage of Tizen UI Web Framework based
    on jQuery Mobile.
  prefs: []
  type: TYPE_NORMAL
- en: A page is created using a `div` tag with the attribute `data-role` and value
    page. In HTML, tags with the `div` keyword are used to define a section of the
    document. The header and the footer are created in a similar way. The header contains
    a heading marked with `h1` and a button whose icon is set at the attribute `data-icon`.
    The value of `data-icon` should match an option from the available icon set provided
    by jQuery Mobile. The example uses `plus`.
  prefs: []
  type: TYPE_NORMAL
- en: The main components of the page are situated in a `div` element between the
    header and the footer, and this section is marked as `data-role="content"`. The
    examples in the previous section of this recipe show the usage of the list and
    list divider widgets.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the recipe *Tizen web app programming* from [Chapter 2](ch02.html
    "Chapter 2. Introduction to the Tizen Ecosystem"), *Introduction to the Tizen
    Ecosystem*, to create a web application. Replace the body of `index.html` with
    the preceding example to try it out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about the widgets in Tizen UI Framework is available in the
    official documentation at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_reference.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_reference.htm).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe demonstrates how to create a Tizen web application with buttons
    and how to handle an event if the user clicks on any of these buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Buttons in the Tizen UI Web Framework can be created using any of the following
    three options:'
  prefs: []
  type: TYPE_NORMAL
- en: Using HTML5 elements, such as `anchor` or `div`, with the attribute `data-role="button"`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `button` element of HTML5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `input` element of HTML5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tizen UI Web Framework is based on jQuery Mobile, and similar rules are applied
    for buttons. For details visit [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_button.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_button.htm).
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to create a button with the approach that suits you best depending
    on the situation.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to create buttons, so let's proceed with the development of
    a whole application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch the Tizen IDE, and start a new Tizen web project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a single-page application using Tizen Web UI Framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `index.html`, and replace the content of the `body` element with the following
    source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `js/main.js`, and append the following source code to the JavaScript anonymous
    (lambda) function, which is assigned to the variable `init`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes and run the application on a real device, emulator, or simulator.
    If everything works correctly when you click a button, the text of the paragraph
    with the `id` label will be changed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML5 source code that was inserted in `index.html` creates a page with
    header, footer, single paragraph with `id` label, and three buttons with the IDs
    `btn1`, `btn2`, and `bnt3`. Each button is created using one of these different
    options provided by the framework, but visually all of them look the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code inserted in the JavaScript file is based on the jQuery library.
    The first line binds the click event of the button with the ID `btn1` to a function
    that handles it. Have a look at the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The dollar sign is an alias of `jQuery()`. This function returns a collection
    of elements from the DOM of the HTML based on the provided selector as an argument.
    The code snippet from this recipe uses ID selectors. jQuery is famous for its
    powerful tools to access DOM elements. The full list of supported selectors is
    available at [http://api.jquery.com/category/selectors/](http://api.jquery.com/category/selectors/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next line changes the text of the paragraph label using the method `text()`,
    which is provided by jQuery. Have a look at the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to note that according to the documentation of jQuery Mobile
    1.3.2, which is included in Tizen SDK 2.2.1, `$(document).bind('pageinit')` must
    be used instead of `$(document).ready()`. Please note that the event `pageinit`
    has been replaced with `pagecreate` in jQuery Mobile 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the handlers are not bound to the buttons at an appropriate place, most
    probably they will not work. Pay attention to the fact that they must be implemented
    as anonymous functions that are assigned to the variable `init`. After that, `init`
    is bound to the `pageinit` event, so the anonymous function is executed on page
    initialization. Have a look at the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Anonymous functions are first-class citizens of JavaScript. They are most commonly
    used as callbacks—functions that are executed asynchronously when an event occurs
    or at a later time. Although this usage of anonymous functions is often very convenient,
    you should pay attention to it; otherwise, you may end up at the so-called callback
    hell. Good suggestions on how to write and maintain easy-to-read JavaScript code
    with callbacks can be found at [http://callbackhell.com/](http://callbackhell.com/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The project of the example application in this recipe is provided is present
    in the source code of the book. Please explore its source code if you have any
    trouble implementing the example on your own.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating list views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An old joke popular among developers says that there is no good mobile application
    without a list. This widget is very convenient for storing large amount of data,
    especially on devices with relatively small screens, such as smartphones or smart
    watches.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to create a multipage application with a list view
    that includes several items, an item divider, and a search filter.
  prefs: []
  type: TYPE_NORMAL
- en: Although multipage application might sound fancy, in fact, it is just an application
    that contains two or more Tizen UI Web Framework pages, and it is very easy to
    create such an application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lists in Tizen UI Web Framework are created using HTML5 elements for ordered
    and unordered lists, `ol` and `ul`, combined with `data-role="listview"`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project that uses the **Multi Page Application** template of **Tizen
    Web UI Framework**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder, `images`, from the **Project Explorer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a simple icon using your drawing application, and save it as `smile``.``png`
    inside the `images` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `index.html` in the Tizen IDE, and replace the content of the `body` element
    with the following source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes, and run the application on an emulator or a device. The application
    should look like the following:![How to do it...](img/1908OS_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List views
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source code of the body element in the preceding example application contains
    only HTML5 and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Two pages are created in two different `div` elements, and each of them contains
    `data-role="page"`. Both pages contain a header, footer, and list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `id` label of the first page is `pageMain`. Each item of the list is created
    using the `li` element. The list contains the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list divider created with the value `list-divider` of the attribute `data-role`.
    Have a look at the following line of code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A simple item. Have a look at the following line of code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An item with a button on the right-hand side of the text. The button is created
    using a `span` element. It has a default style and a right arrow for an icon set
    through the attribute `data-icon`. Have a look at the following code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A two-line item with an image (`img`) on the left-hand side and a button on
    the right-hand side. The style of the button is `circle`, and its icon is `info`.
    The CSS class `ui-li-as-multiline` is used to enable multiple lines, and the class
    `ui-li-text-sub` marks its second line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second page displays a simple read-only list. It has `id` `pageInfo`. The
    back button that is displayed at the footer is actually set at the `div` element
    of the page using `data-add-back-btn="true"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please check the Tizen documentation to see the full list of supported styles
    for list widgets at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_list.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_list.htm).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing pop ups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do you remember the ugly JavaScript built-in functions `alert()` and `confirm()`?
    Both are useful, but their design is stuck in the 1990s, and alternatives are
    needed for modern mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: Tizen Web UI Framework offers pop ups with a much better look and a customizable
    design that can fit the needs of your application. In this recipe, we will create
    a single-page application with a button that opens a pop up.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch the Tizen IDE, and create a new Tizen Web Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a single-page application using Tizen Web UI Framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `index.html`, and replace the content of the `body` element with the following
    source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `js/main.js`, and insert the following source code into the anonymous
    JavaScript function, which is assigned to variable `init`. Have a look at the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the application, and have fun with the old but gold binary joke.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTML5 that was appended in the third step to the `body` element of `index.html`
    contains a page and a pop up with two buttons. The pop up is represented by a
    `div` element with `id popupConfirm` and `data-role="popup"`. The CSS class `center_title_2btn`
    defines its type. The other available types are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`center_info`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_title`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_basic_1btn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_title_1btn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_title_2btn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_title_3btn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_button_vertical`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_checkbox`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_liststyle_1btn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_liststyle_2btn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_liststyle_3btn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The buttons are arranged horizontally next to each other for all types with
    more than one button, except for `center_button_vertical`.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript appended to `main.js` binds handlers to the buttons of the pop
    up. The text content of the paragraph with the `id` label is changed depending
    on the user's choice.
  prefs: []
  type: TYPE_NORMAL
- en: Tizen Web UI Framework and jQuery Mobile do not support the chaining of pop
    ups. This means that it is not possible to invoke a pop up from another pop up.
    From a designer's point of view, it is also not recommended to use the chaining
    of pop ups, as it has negative impact on the user experience. Anyway, if you insist
    on it, a workaround is available; open a pop up with a minimal timeout after closing
    the first pop up by implementing `setTimeout()` after the `popupafterclose` event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the Tizen Web UI and jQuery Mobile documentation for a full
    list of all events and methods as well as details about the pop up types at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_popup.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_popup.htm).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Tizen Notification API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Notification API allows developers to display messages to users outside
    their applications. Notifications are useful when the user has to be informed
    about events or the status of an ongoing process. They are displayed in one place,
    which is shared between notifications from each application and the system.
  prefs: []
  type: TYPE_NORMAL
- en: Follow the tutorial in this recipe to learn how to use the Tizen Notification
    API to display `SIMPLE` and `PROGRESS` notifications in Tizen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Several different types of notifications exist in Tizen:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SIMPLE`: This is a `basic text` notification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THUMBNAIL`: This notification includes both text and thumbnails'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ONGOING`: This is a notification that informs the user whether the application
    is running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PROGRESS`: This provides information about the current status of a job and
    its progress'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two types of notifications can be removed by the user. The other types
    cannot be removed by the user, and the application should take care of their removal.
    The notification API is quite flexible, and as a developer, you can choose the
    types that exactly match the needs of your application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch Tizen IDE, and start a new Tizen Web Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a single-page application using Tizen Web UI Framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following HTML code that creates two buttons inside the body of
    `index.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Paste the following JavaScript function inside `main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function as well as the other functions in this recipe use the try-catch
    block to handle exceptions, such as `WebAPIException`. They are thrown by the
    methods of the Notification API if an error occurs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `try` statement defines a block in which the source code should be tested
    for any errors. The keyword `throw` must be used to raise an exception. The exception
    terminates the execution of the source code at the `try` block, and the control
    is passed to the `catch` block. Rules and commands for handling intercepted exceptions
    are defined in it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second argument of the function `setTimeout()` is the delay in milliseconds.
    Six thousand (6,000) milliseconds is equal to 6 seconds and 10,000 milliseconds
    is equal to 10 seconds. Have a look at the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Bind the click events of both buttons to the JavaScript functions from the
    previous step by inserting the following code snippet into the anonymous JavaScript
    function that is assigned to variable `init`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add notification privileges to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all modified files, and run the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The application contains a single application and two buttons. The click event
    of the button with ID `btnSimpleNotification` is bound to JavaScript function
    `postSimpleNotification()`. When this function is executed, a simple notification
    with the title **Notification** and text **Hello World** is displayed on the screen
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/1908OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Simple notification
  prefs: []
  type: TYPE_NORMAL
- en: 'A click on the button with the ID `btnProgressNotification` leads to the execution
    of the function `runProgressDemo()`. A progress notification with the title **Progress**
    and text **Please wait...** is posted. After 6 seconds, it is updated, and the
    text is changed to **Almost done!** The notification is removed 10 seconds after
    its occurrence. The function `updateProgressNotification()` is responsible for
    the update, and the function `removeProgressNotification()` removes the notification.
    The delay of the execution of both functions is achieved using the JavaScript
    built-in function `setTimeout()`. You can explore the implementation of all functions
    added to `main.js` to understand how the Notification API is used. Have a look
    at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/1908OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Progress notification before and after the update
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Optionally, an icon and/or a sound can be added by specifying the path to the
    image and/or a sound file in the JavaScript object that is created for the notification.
  prefs: []
  type: TYPE_NORMAL
- en: It is mandatory to add privileges as described in step 6; otherwise, the application
    will not work properly, because it will not be able to post any notifications.
    Use a device or Emulator to test and debug applications which post notifications.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are interested in posting push notifications to the Tizen device from
    a server, please take a look at the recipe *Receiving push notifications* in [Chapter
    8](ch08.html "Chapter 8. Communication"), *Communication*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To explore the full capabilities of the Notification API, please visit [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/notification.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/notification.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the look and feel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever been in a situation when the customer changes the requirements
    in the middle of a project, and you have to modify the whole design of the application?
    Or have you been in a situation when you have to deliver the same application
    to different customers with different themes and images?
  prefs: []
  type: TYPE_NORMAL
- en: CSS is the language used to describe the look and format of web applications.
    Every web developer should be familiar with it. Unfortunately the maintenance
    and the modification of complex CSS files might be difficult. You can always use
    CSS in Tizen web applications, but in the case described, the most painless solution
    is to rely on a CSS preprocessor, such as **LESS** or **Sass**.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates the basic usage of LESS for a Tizen web application.
    I hope that based on the experienced gained here, you should be able to generate
    complex CSS through LESS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LESS is an open source dynamic language, which brings variables, mixins, operations,
    and functions to CSS. LESS can be executed on the client side through JavaScript
    or on a server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Valid CSS code is valid LESS code as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to generate CSS from LESS online. This simple example
    changes the fonts and the colors of text headings:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the website [http://less2css.org/](http://less2css.org/) using your favorite
    web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the LESS source code that customizes the colors and the fonts of the
    headings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Please feel free to change the colors by modifying the values of the LESS variables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Copy the generated CSS to the clipboard. The CSS should be similar to the following
    example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Select a project in the **Project Explorer** view of the Tizen IDE, right-click
    on it, and navigate to **New** | **CSS File**. Follow the onscreen instructions
    to complete the creation of the file with the name `myHeadings.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the copied content into the newly created CSS file, and save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML line to `index.html` to load the CSS file as an external
    style sheet into the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The advantage in this example is that only the value of the variable should
    be modified to change the color of all headings. The real power of LESS can be
    seen in large projects that consist of a large number of style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LESS is compiled to CSS through an online tool powered by the open source project
    less-preview. The source code of the project is available at GitHub under MIT
    license, and its maintainer is Brian Frichette. For details, please visit [https://github.com/brian-frichette/less-preview/](https://github.com/brian-frichette/less-preview/).
  prefs: []
  type: TYPE_NORMAL
- en: The LESS code snippet in the preceding example is very simple. On the first
    three lines are declared and initialized LESS variables. According to the rules,
    a variable starts with the prefix `@` followed by its name. A colon is used to
    initialize its value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The font family is set at the LESS variable `@font`, and its value is set at
    the CSS grouping for `h1`, `h2`, and `h3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The other LESS variables `@color1` and `@color2` are used to set the font and
    the background colors of the headings.
  prefs: []
  type: TYPE_NORMAL
- en: The output of the successful execution of the LESS source code is valid CSS.
    When the CSS is ready, it must be loaded in the Tizen web application as described
    in steps 3 through 6.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are curious to learn more about CSS preprocessors, you can extend your
    knowledge with a couple of books written by Alex Libby: *Instant SASS CSS How-to*
    and *Instant LESS CSS Preprocessor How-to*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing and writing text on a canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main advantages of HTML5 is that it can be used as a replacement
    of Adobe Flash for drawing. The HTML5 canvas element opens new horizons to create
    cutting-edge animations inside web and mobile applications or games.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates drawing and writing text on the HTML5 canvas with JavaScript
    in a Tizen web application. Follow the steps given in this recipe to create a
    single page Tizen web application with two buttons. The first button writes the
    text **Hello Tizen** and draws a blue square and an orange circle. The second
    button clears the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing and writing text on a canvas](img/1908OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drawing on a canvas in the Tizen web application
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Canvas is a new element that was introduced in HTML5\. The attributes `id`,
    `width`, and `height` of the canvas can be specified. By default, the canvas is
    empty and JavaScript should be used to create and control its content.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch the Tizen IDE, and start a new **Tizen Web Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Single Page Application** using Tizen Web UI Framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the project in the Project Explorer view, and select **New**
    | **Other** | **JavaScript** | **JavaScript Source File** to create the file `draw.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the following JavaScript code to draw on a canvas to `draw.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `font` property in the HTML5 canvas supports the same syntax as the CSS
    fonts. Tizen offers a dedicated font family, which is called TizenSans, but in
    this application, the popular Arial font is used. For more information about the
    typography guidelines in Tizen, please visit [https://developer.tizen.org/documentation/ux-guide/visual-style/typography](https://developer.tizen.org/documentation/ux-guide/visual-style/typography).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include the new JavaScript file before loading `main.js` in `index.html`. Have
    a look at the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the following HTML inside the body of `index.html` to create a canvas
    and a couple of buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Handle button clicks by adding the following source code to the anonymous JavaScript
    function, which is assigned to the variable `init` in `main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all files, and run the application on a device or Emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A canvas with the ID `pic` and width and height equal to 200 px is created
    in `index.html` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The click events of buttons with IDs `btnDraw` and `bntClear` invoke the JavaScript
    functions `draw()` and `clear()`. Both functions are implemented in the file `draw.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the `head` of the `index.html` file, `draw.js` must be loaded before the
    file `main.js`; otherwise, the application will not work properly.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript function `draw()` writes text on the screen using `fillText()`
    on the canvas object. After that, it invokes the canvas object's function `fillRect()`
    and draws a blue square whose sides are 25 px. Finally, the functions `arc()`
    and `fill()` are executed to draw an orange circle with radius 25 px.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The coordinates (0, 0) correspond to the upper-left corner of the drawing area.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All tricks to draw on the HTML5 canvas should be valid for a Tizen web application.
    More HTML5 examples about drawings and animations can be found in Eric Rowell's
    book *HTML5 Canvas Cookbook*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating 3D objects with WebGL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Twenty years ago, 3D graphics and OpenGL were restricted primarily to CAD software
    and games. Back then, websites were very, very simple. The times have changed
    and Web technologies have evolved dramatically. Nowadays, thanks to WebGL, it
    is possible to create sophisticated 3D cross-platform animations and games directly
    inside the HTML5 canvas through JavaScript APIs.
  prefs: []
  type: TYPE_NORMAL
- en: The story of WebGL started in 2006, but it was officially released for the first
    time in 2011\. Today, a nonprofit organization called Khronos Group takes care
    of the standard. WebGL is based on OpenGL ES. OpenGL is a high-performance 2D
    and 3D graphics API, and ES is its flavor for embedded devices. WebGL is maintained
    by a working group started by Khronos Group. Employees of Apple, Google, Mozilla,
    and other leading vendors are among its members.
  prefs: []
  type: TYPE_NORMAL
- en: 'This advanced recipe demonstrates how to create a 3D animation by drawing a
    cube that swivels clockwise inside a Tizen web application. After launching the
    application, the user must press the **Play** button to start the animation as
    displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating 3D objects with WebGL](img/1908OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WebGL demo on Tizen
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This application is based on the spinning WebGL box example that is available
    on the public GitHub repository of Khronos Group. Several external JavaScript
    files that are copyrighted by Apple, Google, and Khronos Group are used in this
    example according to their copyright notices. For details regarding their licenses
    and the terms of use, please read the comments at the beginning of each file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch the Tizen IDE, and start a new Tizen Web Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a single-page application using the Tizen Web UI Framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit the GitHub repository of WebGL by Khronos Group at [https://github.com/KhronosGroup/WebGL](https://github.com/KhronosGroup/WebGL)
    to locate, download, and save the following files to the `js` directory of the
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`webgl-utils.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webgl-debug.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`J3DI.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`J3DIMath.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Right-click on the project in the **Project Explorer** view, navigate to **New**
    | **Other** | **JavaScript** | **JavaScript Source File**, and create the file
    `draw.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following JavaScript source code into the newly created file `draw.js`.
    Have a look at the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code snippet declares several global variables and initializes
    them with default values. It also includes a function `setupColors()`, which sets
    the colors of each side of the cube. The following source code implements the
    function `init()`, which prepares the drawing area, and it has to be inserted
    in the same file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following line sets a uniform variable for the shaders, who take the shape
    data and transform it into pixels on the screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Several 4 x 4 matrices will be created from the class `J3DIMatrix4`. They will
    be used for vector transformations at the function `draw()`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next function sets the viewport. Initially, the object is represented with
    modeling coordinates, which, after that, are transformed to world, view and finally
    to viewport coordinates. As a result, the 3D scene is transformed into a 2D projection,
    which is displayed on the screen of the device:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now is the time to implement the most important function of these examples,
    `draw()`. It is responsible for drawing each frame of the animation. Please append
    the following source code inside the file `draw.js` too:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure that the canvas is clean before drawing anything. Have a look at
    the following code snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `index.html`, and replace its code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the following couple of scripts inside the HTML `head` to implement
    a vertex shader that takes care of each corner of each rendered triangle:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following source code implements a fragment shader. It applies the texture
    and the lighting on each pixel of each transformed triangle:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Continue by appending the source code of the HTML `body` as follows. This creates
    a user interface with a couple of buttons through which the user controls the
    animation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `main.js` and register the function `run()` as a handler of the button
    **Play** as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes, and run the application on a Tizen device or Emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The full source code of this project is provided with the book. The application
    has been successfully tested on a device with Tizen 2.2.1.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All external JavaScript files are loaded at the head of `index.html`. The files
    downloaded in step 3 of the preceding tutorial provide basic functions to simplify
    the common usage of WebGL. Scripts for the vertex and fragment shaders are also
    included in `index.html` with IDs `vshareds` and `fshaders`.
  prefs: []
  type: TYPE_NORMAL
- en: A button with the ID `btnPlay` and a canvas with the ID `screen` are situated
    on the `div` element with the main content of the page. The canvas is used as
    a drawing area, and both its width and height are 200 px.
  prefs: []
  type: TYPE_NORMAL
- en: The animation starts on the click event of the button `btnPlay`, and the button
    becomes disabled. The entry point of the animation is the JavaScript function
    `run()`, which is implemented in the file `draw.js`. It initializes the WebGL
    context through the function `init()`, which is also implemented in the same file.
    Furthermore, the functions `pause()` and `resume()` are bound to the canvas events
    `webglcontextlost` and `webglcontextrestored`.
  prefs: []
  type: TYPE_NORMAL
- en: The current state of the rotation is stored in the global JavaScript variable,
    `g_nCurrentRotation`, and its initial value is 360\. The rotation per single step
    of the animation is defined in another global JavaScript variable with the name
    `g_nRotationAngle`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Increase the value of `g_nRotationAngle` to speed up the rotation and decrease
    the value to slow it down.
  prefs: []
  type: TYPE_NORMAL
- en: The cube is created via the function `makeBox()`, and it is drawn on the screen
    using the JavaScript function `draw()`. It rotates clockwise, so on each execution
    of `draw()` , the angle is subtracted from the current state. When `g_nCurrentRotation`
    reaches a value below 0, it is set back to 360, and the animation starts all over
    again. The canvas is cleared at the beginning of `draw()` through the function
    `clear()`, and the cube is displayed via the function `drawElements()`.
  prefs: []
  type: TYPE_NORMAL
- en: The colors of the cube's sides are set at the function `setupColors()`. Edit
    the values of the array `colors` if you want to change the colors. The preceding
    example uses solid colors, but if you want, you can also set a different gradient
    for each side. The background color is white. It is set as a style of the page
    content's HTML `div` element and as an argument to the function `simpleSetup()`,
    which is called by the function `init()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The demo repository of Khronos Group's contains a long list of different WebGL
    applications. Feel free to try them with Tizen at [http://www.khronos.org/webgl/wiki/Demo_Repository](http://www.khronos.org/webgl/wiki/Demo_Repository).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 4. Storing Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple text editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using web storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Web SQL Database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing queries in Web SQL Database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data from Web SQL Database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using IndexedDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data management is becoming more and more important in the modern world. Billions
    of Internet-connected mobile and wearable devices already exist on the market.
    Now, the next big challenge is to improve communication and data synchronization
    between these devices as well as to provide better user experience. Each new mobile
    device model has a larger internal memory, and at the same time, the popularity
    of cloud services is constantly increasing. Nowadays, storing and managing information
    is more important than ever.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter offers technical details about storing and accessing data on Tizen
    devices. It contains articles about file management, web storage, and Web SQL
    Database APIs as well as a tutorial about downloading files over the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Writing files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Files on a Tizen device can be accessed through the **Filesystem API**. The
    filesystem of the platform is divided into several virtual roots:'
  prefs: []
  type: TYPE_NORMAL
- en: '`documents`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`images`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`videos`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`music`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ringtones`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wgt-package`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wgt-private`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wgt-private-tmp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files located outside of any of the virtual paths from the preceding list can
    still be accessed from the actual root through their URI. For example, the URI
    of the directory `/etc/` is `file:///etc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API supports four modes to open a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`r`: This mode opens a file only for reading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rw`: This mode opens a file for both reading and writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`w`: This mode opens a file only for writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: This mode opens a file for writing and places the cursor at its end. The
    new data will be appended to the existing content of the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code snippets in this recipe demonstrate how to create a text file and save
    data to it. Since the content of the file will not be read in these particular
    cases, only modes `w` and `a` are appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A privilege is required to save data to a file using the Filesystem API. Before
    you start, make sure that the following privilege has been added to the `config.xml`
    file of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/filesystem.write](http://tizen.org/privilege/filesystem.write)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to save text to a file using the Tizen Filesystem
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following code snippet to prepare for file operations by obtaining
    an object associated with the virtual path for `documents`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the function `createFile()` to make an empty file. The name of the
    file must be passed as an argument to the function, for example, `foo.txt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a callback function that will write the text `bar` to a stream associated
    with the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the file created in the second step to write and save data in it using
    the callback function implemented in the previous step, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Tizen Filesystem API works asynchronously, and because of this, a lot of
    functions are executed through callbacks. The successful cases as well as the
    error cases are processed using callbacks. Do not assume that everything will
    work as expected, and carefully handle errors.
  prefs: []
  type: TYPE_NORMAL
- en: A global JavaScript object, `documentsDir`, is initialized at the callback function
    `onResolveSuccess()`. After that, the rest of the file operations are done by
    calling functions associated with this object. The functions `createFile()`, `resolve()`,
    and `openStream()` throw exceptions if any error occurs during their execution.
    It is important to add try-catch blocks and to handle potential exceptions properly.
    Please note that in this recipe, any exceptions that might occur are logged in
    the console. In real applications, you should integrate the error reporting with
    the user interface and make it user friendly.
  prefs: []
  type: TYPE_NORMAL
- en: The function `write()` saves data to a file stream and then closes it. The function
    works asynchronously, and it is invoked as a callback upon the successful execution
    of `openStream()`.
  prefs: []
  type: TYPE_NORMAL
- en: Reading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tizen Filesystem API provides a couple of different ways to read a file.
    The primary option is using a file stream, and the alternative is to get the whole
    content of the file as a string through the function `readAsText()`. Both approaches
    work asynchronously and require a callback function for successful completion
    and another function for handling potential errors.
  prefs: []
  type: TYPE_NORMAL
- en: Please keep in mind that the Filesystem API is specific to Tizen, and its features
    must be accessed through the JavaScript object `tizen.filesystem`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you start coding, make sure that a privilege to read files has been
    added to the `config.xml` file of your project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/filesystem.read](http://tizen.org/privilege/filesystem.read)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these two steps to read text from a file using a stream:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepare an object that represents the `documents` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following code snippet to read the content of a file using a stream.
    This approach allows us to read the file chunk by chunk, and it consumes less
    memory than reading the whole file at once:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you prefer to read the whole content of a text file without a stream, you
    should use the function `readAsText()` as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have already noted that the first step for both operations, writing
    and reading files, is to create an object that represents the working directory.
    In this example, the virtual root of the used directory is `documents`.
  prefs: []
  type: TYPE_NORMAL
- en: The first approach to reading files relies on streams. Tizen provides an interface
    called `FileStream` that is used for both reading and writing operations.
  prefs: []
  type: TYPE_NORMAL
- en: The most important function is `openStream()`. A couple of callback functions
    have to be passed as its arguments. The first function will be invoked if the
    file content has been read successfully. In the previous example, the name of
    this function was `readFile()`. The second argument is a function that is invoked
    on an error.
  prefs: []
  type: TYPE_NORMAL
- en: The function `readFile()` receives the file stream as an argument, tries to
    understand the size of the available data, and then tries to read it using the
    function `read()` of the `FileStream` interface.
  prefs: []
  type: TYPE_NORMAL
- en: The alternative approach does not rely on streams, but it still uses callback
    functions that are passed as arguments to `readAsText()`. Upon successful execution,
    the whole data is passed to a callback function, which, in our example, is called
    `showFileContent()`.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to implement anonymous JavaScript functions for the callbacks if you
    prefer to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Both the code snippets to read files with and without a stream call the same
    function `onError()` upon failure. In this recipe, the implementation of this
    callback function is very simple, as it just prints the error message to the web
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No matter which approach to reading files you prefer, it is mandatory to include
    privileges to read files.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next recipe contains a tutorial on how to create a simple text editor, and
    it will guide you step by step in the implementation of both reading and writing
    text files with streams in an application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple text editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe offers a tutorial on how to create a simple text editor based on
    the knowledge of writing and reading files from the previous recipes. The source
    code of the example application is simple and easy to understand.
  prefs: []
  type: TYPE_NORMAL
- en: The content of a text file is loaded inside `textarea` at the application's
    startup. The user can modify the text and, after that, save it to the same file
    by clicking on the **Save** button at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a simple text editor for Tizen:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and start a new Tizen Web Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a single-page application using **Tizen Web UI Framework**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the file `config.xml` using Widget Configuration Editor and select the
    tab **Privileges**. Click on the **Add** button and select the following internal
    privileges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/filesystem.read](http://tizen.org/privilege/filesystem.read)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/filesystem.write](http://tizen.org/privilege/filesystem.write)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the content of `index.html` to match the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click on the project in the **Project Explorer** view, navigate to **New**
    | **Other** | **JavaScript** | **JavaScript Source File**, and create the file
    `file.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `file.js` and insert the following source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement JavaScript functions to read and write data using file streams in
    the same source file. Have a look at the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a function, `loadFile()`, that loads the content of the file inside
    a text area if the file exists, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the JavaScript functions, `createFile()` and `saveFile()`, through which
    content is saved into the text file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the following code snippet to the initialization function in the file
    `main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes, build the application, and run it on the Tizen Emulator or
    device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example uses `console.log()` to print errors that may occur during the
    execution of the application. These messages are outputted on the console only
    to simplify debugging. Please note that it is not recommended to leave `console.log()`
    in production code. It is used as a simple error handling technique only for this
    example. You can display error messages in pop ups or notifications instead.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The example relies on the Tizen Filesystem API to create, read, and write a
    file. The privileges set in the third step are mandatory. Without them, the exception
    `WebAPIException` with the error type `SecurityError` will be thrown, and the
    application will not work as expected.
  prefs: []
  type: TYPE_NORMAL
- en: The user interface of the simple text editor has a single button and an input
    field. The function `loadFile()` is called at the launch of the application if
    the documents directory is successfully resolved. It opens `simpleTextFile.txt`
    as read only, asynchronously gets its content, and loads it into the text area.
  prefs: []
  type: TYPE_NORMAL
- en: The function `saveFile()` is called each time the **Save** button is clicked.
    It opens `simpleTextFile.txt` to write and replaces its data with the content
    of the HTML5 `textarea` with ID `textbox`. If the file does not exist, then `saveFile()`
    tries to create it by executing the function `createFile()`.
  prefs: []
  type: TYPE_NORMAL
- en: Both reading and writing of the file are achieved asynchronously through file
    streams and callback functions. After successful completion of the operations,
    the file streams are closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The name of the text file is stored in the global variable `sTxtFile`, which
    is used by all functions. The file is located in the virtual root for documents.
    Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1908OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A simple text editor for Tizen
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the official documentation to find more detailed information
    about the Tizen Filesystem API at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/filesystem.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/filesystem.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tizen provides a **Download API**, which is dedicated only to asynchronous
    transfer of data from the URL of a remote server to the storage of the device.
    This API is very flexible, but it is still easy to use. For example, the developer
    has the option to specify explicitly whether a cellular or a Wi-Fi connection
    should be used for a specific download. During the download process, the file
    has one of the following states: `QUEUED`, `DOWNLOADING`, `PAUSED`, `CANCELED`,
    `COMPLETED`, and `FAILED`.'
  prefs: []
  type: TYPE_NORMAL
- en: The usage of this API will be demonstrated with an example application that
    downloads PNG and JPEG images and saves them to the filesystem location defined
    for images.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The privilege [http://tizen.org/privilege/download](http://tizen.org/privilege/download)
    must be granted in Tizen applications in order to use the Download API. An exception
    will be thrown when the function `start()` of the interface `DownloadManager`
    is executed if an application does not have the required privilege.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a Tizen web application to download images by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and create a new Tizen Web Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Tizen Web UI Framework** and **Single Page Application** from the available
    options of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the file `config.xml` using the Widget Configuration Editor, select the
    tab **Privileges**, and click on the **Add** button. Insert the following internal
    privilege:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/download](http://tizen.org/privilege/download)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace the content of `index.html` with the following source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the context menu of the **Project Explorer** view by right-clicking on
    it, navigate to **New** | **Other** | **JavaScript** | **JavaScript Source File**,
    and create the file `download.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `download.js` and append the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a listener to handle download events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the following code snippet to the initialization function in the file
    `main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes. Build and run the application on the Tizen Emulator or device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the application is launched, the user must enter the URL to an image and
    click on the **Download** button. The file extensions allowed are `png`, `jpg`,
    and `jpeg`. Other extensions are not allowed to start the download. The user can
    pause and resume the download by clicking on the **Download** button during the
    download process.
  prefs: []
  type: TYPE_NORMAL
- en: Successfully downloaded images are stored at the images virtual root, and they
    can be accessed directly from the Tizen default **Gallery** application.
  prefs: []
  type: TYPE_NORMAL
- en: The ID of the only button in this simple example is `btnDownload`. In the file
    `main.js`, its click event is associated with an anonymous function that calls
    `handleButton()`. The called function is implemented in the file `download.js`,
    and it has a different behavior depending on the state of the application.
  prefs: []
  type: TYPE_NORMAL
- en: The global variable `nDownloadImageId` stores the ID of the ongoing download.
    If there is no download in progress, its value is zero. The global Boolean variable
    `bIsPause` indicates whether the current download has been paused.
  prefs: []
  type: TYPE_NORMAL
- en: 'The download starts with the following two lines of code in the function `handleButton()`,
    and its identifier is stored as `nDownloadImageId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The `start()` function accepts arguments as an object with details regarding
    the download request as well as the download callback, which is optional. The
    only mandatory argument of the constructor of the interface `DownloadRequest`
    is the URL; optionally, other parameters, such as the destination, the name of
    the saved file, and the type of the network connection, can be set. The download
    callback handles events for `onprogress()`, `onpaused()`, `oncanceled()`, `oncompleted()`,
    and `onfailed()`. For more details, please refer to the documentation of the interface
    `DownloadCallback` at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/download.html#::Download::DownloadCallback](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/download.html#::Download::DownloadCallback).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please look at the documentation of the Filesystem API to find out the most
    appropriate virtual paths to store the downloaded files. Storing files in suitable
    locations enhances the user experience, because the files will be easily located
    and accessed through system applications too. For example, applications for photo
    sharing or editing graphics look for files at the directory for images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information and details about the Download API in Tizen SDK 2.2.1 are available
    at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/download.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/download.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using web storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tizen web applications can take full advantage of HTML5 web storage. The data
    saved in `localStorage` is stored permanently in the memory of the device, while
    the data stored in `sessionStorage` is kept temporarily as long as the application
    is running. On Tizen, the size of the session storage is unlimited, and you may
    store up to 5 MB of data at the local storage. Both storage types implement the
    interface storage, so the same methods for data manipulations are available, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`key(n)`: This returns the name of the element with a position in the list
    of stored data that matches the number provided as an argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getItem(key)`: This returns the value that corresponds to the key passed as
    an argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setItem(key, value)`: This saves a key-value pair into the storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`removeItem(key)`: This finds and removes an element from the storage with
    the key provided as an argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clear()`:This removes all key-value pairs from the storage object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that web storage is a standard API in HTML5, so no privileges are
    required to use it in a Tizen application.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to create an application that stores a text note permanently
    using `localStorage` and how to provide an undo option using `sessionStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow this guide to create a Tizen web application that uses web storage:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and start a new Tizen Web Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the wizard of the new project, first choose **Tizen Web UI Framework**
    and then choose **Single Page Application.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `index.html` and replace its source code with the following HTML5 code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a new JavaScript file with the name `storage.js` by right-clicking on the
    **Project Explorer** view, and navigate to **New** | **Other** | **JavaScript**
    | **JavaScript Source File** from the menu that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following JavaScript functions into `storage.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `main.js` and append the following code to the initialization function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all modified files, build the application, and run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application stores data for a single note using `localStorage`. At startup
    of the application function, `load()` retrieves data for the key note from the
    persistent web storage and sets it as content of `textarea` with the ID `textbox`.
  prefs: []
  type: TYPE_NORMAL
- en: The function `save()` is executed each time the user changes the content of
    `textarea`. It saves the previous version of the text in `sessionStorage` with
    the key `undo` and the current version to `localStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user clicks on the button **Undo**, the value corresponding to the
    key `undo` at `sessionStorage` is loaded by the function `undo()`. The application
    supports only a single previous state, so the **Undo** button can be clicked just
    once. This button is hidden at application startup, and it is shown only when
    the option to go back is available. Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1908OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A Tizen web application to save notes using web storage
  prefs: []
  type: TYPE_NORMAL
- en: Creating Web SQL Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have discussed storing data in text files and web
    storage. Now it is time to focus on relational databases. Tizen web applications
    support **Web SQL Database**. The underlying implementation of the Web SQL Database
    API in HTML5 relies on the **SQLite** database.
  prefs: []
  type: TYPE_NORMAL
- en: SQLite is written in C, and its source code is in the public domain. According
    to its creators, SQLite is probably the most popular SQL database in the world,
    as it is shipped with the majority of modern smartphones and web browsers, and
    it is also built in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: It should be mentioned that development of the Web SQL Database API by W3C working
    groups stopped in 2010, because all parties involved were using SQLite and the
    underlying engine of the API. Since then, W3C working groups have focused on the
    standardization of alternative APIs, such as web storage and **Indexed Database**.
    In my opinion, this should not worry you too much because Tizen supports the Web
    SQL Database API, and, as a matter of fact, it is very convenient.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Web SQL Database API supports both asynchronous and synchronous operations.
    Please note that all examples in this recipe, and the subsequent two recipes,
    are related to the same API and contain asynchronous operations only.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code snippet establishes the connection with the database `simpleTextEditor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function `openDatabaseSync()` should be used to create a new database or
    open an existing database synchronously. It expects the same arguments as those
    for `openDatabase()`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding code snippet tries to open a database asynchronously using the
    function `openDatabase()`. If the database does not exist, the function tries
    to create it. The mandatory arguments for `openDatabase()` are name, version,
    full display name (description), as well as the estimated database's size in bytes.
    An empty string can be passed as an argument for the version, and, in this case,
    the database will be opened no matter what its version is.
  prefs: []
  type: TYPE_NORMAL
- en: A callback function can be specified as an optional last argument. It will be
    invoked if the database is opened successfully. In the preceding example, an anonymous
    function that logs a message to the console has been implemented.
  prefs: []
  type: TYPE_NORMAL
- en: An exception might be thrown in the event of an error, such as a database version
    mismatch or security issue.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please find tutorials and examples of how to execute SQL statements and how
    to handle the data retrieved using the Web SQL Database API in the subsequent
    two recipes. If you are interested in more information about the W3C specification,
    please visit [http://www.w3.org/TR/webdatabase/](http://www.w3.org/TR/webdatabase/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing queries in Web SQL Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most important operations related to any database, including Web SQL Database,
    are executing SQL queries. The most frequently used SQL statements are `CREATE
    TABLE`, `INSERT`, `UPDATE`, and `SELECT`. Of course, SQLite, the engine behind
    Web SQL Database, supports a variety of other SQL statements. It should be possible
    to use each one of them in Tizen web applications. The full list of supported
    statements and syntax details about each of them can be found in the documentation
    available at [http://sqlite.org/lang.html](http://sqlite.org/lang.html).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to execute SQL queries using the Web SQL Database API
    in HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following examples demonstrate how to execute SQL statements to create
    a new table and how to insert data into it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the source code in the following sample to execute a single SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following source code to execute a sequence of several SQL statements
    with dynamically passed values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Queries can be executed using a database object and the functions `transaction()`,
    `readTransaction()`, and `changeVersion()`. All of them invoke a callback function
    in which database operations are performed through the function `executeSql()`.
    The function accepts up to four arguments, but only the first with the SQL statement
    is mandatory. The optional arguments are an array with values for the SQL statement,
    a callback function to handle the result of the query, and a callback function
    to handle errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pay attention to the question marks in the SQL statements, such as in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: They will be automatically replaced by the values passed as an array. The special
    symbols at each value will also be automatically escaped. This is a convenient
    and safe approach that can prevent SQL errors and injections.
  prefs: []
  type: TYPE_NORMAL
- en: Exceptions are thrown in the event of database errors, which means that the
    functions `createTable()` and `insertData()` from the previous examples must be
    called within try-catch blocks.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instructions on how to create an application that creates a Web SQL Database
    API and how to execute SQL queries is included in the next recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data from Web SQL Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's develop an application that puts together everything related to the Web
    SQL Database API from the previous recipe and additionally demonstrates how to
    retrieve data.
  prefs: []
  type: TYPE_NORMAL
- en: The application is based on the simple text editor explored in a previous recipe.
    It has the same user interfaces, but instead of reading and writing files, its
    backend uses Web SQL Database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow this tutorial to create a Tizen web application powered by Web SQL Database:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and start a new Tizen Web Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the wizard meant to create a new project, select **Tizen Web UI Framework**
    and **Single Page Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the content of `index.html` to match the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to the **Project Explorer** view, select the project, and right-click on
    it to open a context menu. Navigate to **New** | **Other** | **JavaScript** |
    **JavaScript Source File** to add a new file `db.js` to the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, open the file `db.js` and insert the following JavaScript code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The implementation of the functions `load()` and `save()` should also be placed
    in the same file as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the following source code into the initialization function in the file
    `main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes, build the application, and run it on the Tizen Emulator or
    device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application has exactly the same user interface and user experience as the
    application developed in the recipe *Creating a simple text editor*. The only
    difference is that the text is loaded and saved in the table `tizenSimpleTextEditor`
    of Web SQL Database's `simpleTextEditor`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The database table has two columns: `id` and `content`. The type of column
    `id` is `INT`, and it is the primary key. The type of the other column is `TEXT`.
    Please note that the full list of data types in SQLite is available at [http://www.sqlite.org/datatype3.html](http://www.sqlite.org/datatype3.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The function `load()` is called immediately after the application's launch by
    the initialization function at the file `main.js`. It tries to open a database
    and to retrieve the value of the saved text by executing the functions `openDb()`
    and `retrieveData()`. If the database does not exist, it will be created by the
    function `openDb()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function `retrieveData()` creates a table `tizenSimpleTextEditor` if it
    does not exist, retrieves data by executing a `SELECT` statement, and handles
    its result in an anonymous callback function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The variable `sqlResult` is an object that contains information about the last
    inserted row (if any) in the property `insertId`, the number of affected rows
    in the property `rowsAffected`, and an array of `rows` of all returned rows. In
    this case, there are no inserted or affected rows because an SQL `SELECT` statement
    was executed. The structure of the table `tizenSimpleTextEditor` allows only a
    single row or no rows to be returned. If the result contains a single row, the
    value of its property content is shown at the HTML5 `textarea` with the ID `textbox`.
    A loop should be used to iterate over the returned array in other cases where
    the `SELECT` statement may return more than one row.
  prefs: []
  type: TYPE_NORMAL
- en: The function `save()` performs a transaction that executes a SQL `REPLACE` query
    to store the value of `textbox` into the database table `simpleTextEditor` with
    the ID `1`. Please note that this table has a single row, because this is just
    a sample application. In real applications, you should use a database only if
    you have numerous records in its tables.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the documentation of SQLite about the syntax of the supported SQL commands
    at [http://sqlite.org/docs.html](http://sqlite.org/docs.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details regarding the Web SQL Database API can be found in the latest versions
    of the specifications for the standard by the W3C working group from November
    18, 2010 at [http://www.w3.org/TR/webdatabase/](http://www.w3.org/TR/webdatabase/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using IndexedDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last recipe of the chapter is dedicated to IndexedDB. These databases are
    integrated naturally in JavaScript, and their specifications are standardized
    by W3C. This implies that source code for IndexedDB will work on other web browsers
    and platforms with HTML5 support.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code snippets demonstrate how to store and manipulate the top
    goal scorers from the 2014 FIFA World Cup in an indexed database using JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create and open a database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert initial data into the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that inserts an object into the database:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that removes an object from the database:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that reads all objects stored in an indexed database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IndexedDB stores objects. The code snippets in this recipe insert, delete, and
    read objects that represent the top goal scorers from the 2014 FIFA World Cup.
  prefs: []
  type: TYPE_NORMAL
- en: The data is manipulated through the JavaScript object `db`. The database is
    opened using `window.indexedDB.open()`. This function will create the database
    if it does not exist before opening it. The first argument is the name of the
    database. The second argument is optional. If provided, it must be an integer
    value that matches the version of the database. For example, in the code snippet
    from the first step, the database version is set to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: The event `onupgradeneeded` is triggered if a database is created or updated.
    According to the code snippet implemented in the second step, the first two top
    goal scorers will be inserted in the database immediately after its creation.
  prefs: []
  type: TYPE_NORMAL
- en: The functions `addGoalscorer()` and `removeGoalScorer()` perform transactions
    in the `readwrite` mode to modify the stored data. The mode of the transaction
    in the function `readGoalscorers()` is not explicitly specified, and the default
    value `readonly` is assigned to it. This function only retrieves data without
    making any modifications to the database, so the default mode is sufficient for
    it.
  prefs: []
  type: TYPE_NORMAL
- en: The code snippets in this recipe print all retrieved data of eventual errors
    that might occur in the console. Please note that this is a simple example to
    demonstrate the usage of IndexedDB. In real applications, this source code should
    be integrated with the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that any of the functions implemented in the last three steps must
    be executed only after successful initialization of the `db` object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the W3C specification to learn more about the full features of IndexedDB
    at [http://www.w3.org/TR/IndexedDB/](http://www.w3.org/TR/IndexedDB/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 5. Creating Multimedia Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Playing local audio files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing local video files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching video in an external player
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a photo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating linear barcodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning linear barcodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating QR codes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning QR codes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multimedia capabilities are always among the most important and easily distinguishable
    features of smart devices. No matter what the form factor or the purpose of a
    Tizen device is, it will run multimedia applications if it has a graphical user
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the most common multimedia tasks: playing audio and
    video files, online video streaming, working with cameras, and processing barcodes.'
  prefs: []
  type: TYPE_NORMAL
- en: Playing local audio files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Several years ago, it was a real challenge to play a sound or a video on different
    browsers and platforms. Today, HTML5 offers us standard means for playing both
    audio and video files and makes the life of developers so much better.
  prefs: []
  type: TYPE_NORMAL
- en: In the first recipe of this chapter, a Tizen web application that plays an audio
    file will be developed using only HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you start, ensure that MP3 files are present on the Tizen device and
    emulator. Use the `sdb push` command to transfer a MP3 file from your development
    computer to the Tizen device or emulator, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a Tizen web application that plays the
    file that has been copied to the Tizen device or emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and create the Tizen Web project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Tizen Web UI Framework** and then **Single Page Application** from
    the wizard to create the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the content of `index.html` with the following source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Please note that the URI of the audio file should be changed to match the sound
    file on your Tizen device or emulator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the application and after that run it on a Tizen emulator or device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The standard W3C HTML5 `audio` element is responsible for playing the MP3 file.
    A URI according to the Tizen file system rules is set as a value of the `src`
    attribute. The attribute `controls` adds buttons for controlling the process of
    sound reproduction. The last attribute `autoplay` is used to play the sound with
    the launch of the application.
  prefs: []
  type: TYPE_NORMAL
- en: The other available attributes that can be used with the `audio` tag are `loop`,
    `muted`, and `preload`. The supported audio formats are MP3, Ogg Vorbis, and WAV.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Tizen web application used to play a local audio file
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Details regarding the standard HTML5 audio element are available at [http://www.w3.org/TR/html5/embedded-content-0.html#the-audio-element](http://www.w3.org/TR/html5/embedded-content-0.html#the-audio-element).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also possible to launch audio files in an external player from the Tizen
    web application. Have a look at the *Launching video in an external player* recipe
    and try to load an audio instead of video file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing local video files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen provides an API for retrieving multimedia files on the local storage of
    the device. In this example, an application that retrieves video files using the
    Content API and playing them with the HTML5 element `video` will be created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Content` API is responsible for the discovery of media files such as videos,
    audio files, photos, and other images. The following video formats are supported
    in Tizen web applications: 3GP, AVI, ASF, OGV, MP4, MKV, and WMV.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start, ensure that video files are present on the device. The easiest
    way is to copy several videos from your computer to the Tizen device or emulator
    using SDB and its command `push`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following command transfers the file `happy.mp4` from the
    current directory of the computer to the directory `/opt/usr/media/Videos/` of
    the attached Tizen device or emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Please note that new videos uploaded to the device with SDB may not appear in
    the content database unless you reboot the device or use the Content API to create
    them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a Tizen web application that retrieves
    and plays video files:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Tizen Web project for **Multi Page Application** using **Tizen
    Web UI Framework**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `config.xml` file using the Widget Configuration Editor and go to the
    **Privileges** tab. Click on the **Add** button and select **http://tizen.org/privilege/content.read**
    to use this privilege.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the content of `index.html` with the following source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Continue by appending the following source code for the first page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the second page in the same file, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new JavaScript file `videoManager.js` in the `js` directory and place
    the following source code below it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `main.js` and replace the automatically generated code for handling the
    hardware back button in the initialization function with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes, build, and run the application on a Tizen emulator or device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application contains two pages. A list of all video files available on the
    local storage is shown on the first page. The user can click on each video and
    be transferred to the second page where the video is loaded and can be played.
    If no videos are found, the message **No data** is displayed on the first page.
  prefs: []
  type: TYPE_NORMAL
- en: The `find()` function from the Tizen Content API is used by the `loadVideos()`function
    to discover the available video files. On success, the `mediaItems()` function
    creates a list and loads the titles of all retrieved videos. When an item of the
    list is clicked, the `selectVideo()` function transfers the user to the second
    page and loads the video.
  prefs: []
  type: TYPE_NORMAL
- en: Please pay attention to the handling of the hardware back button in the penultimate
    step of this recipe. A menu and back hardware buttons should be present on each
    Tizen mobile device. The strings `back` and `menu` have to be used to identify
    which hardware button has been clicked.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same approach can be used to retrieve audio files. The HTML5 audio element
    should be used as explained in the previous recipe if an audio file should be
    played. Please explore the next recipe if you are interested in programmatically
    launching an external application for playing videos.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details regarding the standard HTML5 video tag can be found at [http://www.w3.org/TR/html5/embedded-content-0.html#the-video-element](http://www.w3.org/TR/html5/embedded-content-0.html#the-video-element).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about Tizen Content API is available at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/content.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/content.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching video in an external player
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn another approach for playing video files. This
    time instead of playing the video inside the current application, it will be loaded
    in an external player, which will be launched using the Tizen Application API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As in the previous recipes, a video file has to be present on the Tizen device
    or emulator used for testing. Ensure that a file exists by copying a video using
    SDB. For example, the following command transfers the `happy.mp4` file from the
    computer to the targeted Tizen device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create an application that plays a video file
    in an external application:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and start a new Tizen Web project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the wizard to create a new project, select **Tizen Web UI Framework** and
    then **Single Page Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `config.xml` file using the Widget Configuration Editor and go to the
    tab **Privileges**. Click on the **Add** button and select **http://tizen.org/privilege/application.launch**
    to use this privilege.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the content of `index.html` with the following source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the right mouse button over **Project Explorer** and select **New**, then
    select **Other**, then **JavaScript**, and then **JavaScript Source File** to
    add a new JavaScript file with the name `videoManager.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following JavaScript functions into `videoManager.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the following source code to the initialization function at `main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes. Build the application and after that, launch the application
    on a Tizen emulator or device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example uses the Application API. The `launchVideoPlayer()` function
    launches an external application to play a video file specified by URI. Please
    note that the filename should match the name of a video file present on your device
    or emulator.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The example in this recipe opens a video player using the operation ID `http://tizen.org/appcontrol/operation/view`.
    The other available options for operation ID are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/call` operation makes a phone call
    to a number specified with the `tel` scheme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/dial` operation launches the dial
    pad with the entered phone number specified with the `tel` scheme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/create_content` operation creates
    content as a photo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/compose` operation composes a message,
    for example, SMS or e-mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/pick` displays a list of items that
    return the item selected by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/share` operation shares data with
    other applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/multi_share` operation shares multiple
    items with other applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the official documentation of the Tizen Application API for
    more details at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/application.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/application.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a photo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All modern mobile devices are equipped with high-quality cameras with great
    capabilities for recording videos and capturing photos. In this recipe, you will
    learn how to create a Tizen web application for capturing and displaying images
    using the device's camera.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a new project and to build a Tizen Web
    application capable of taking photos:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and create a new Tizen Web project for **Single Page Application**
    using **Tizen Web UI Framework**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `config.xml` file with the Widget Configuration editor and select the
    **Privileges** tab. Click on the **Add** button and insert the **http://tizen.org/privilege/content.read**
    privilege.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `index.html` by replacing its content with the following HTML5:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following HTML creates a single page with an element for capturing a photo
    and an image placeholder for displaying it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to **Project Explorer**, click the right button of the mouse and select **New,**
    then **Other**, then **JavaScript**, and then **JavaScript Source File**. Create
    a new file with the name `photographer.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following JavaScript source code into `photographer.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all files, build, and run the application on a Tizen emulator or device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Tizen emulator will try to capture images using a web camera on the development
    computer, if one is available.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The camera is activated when the user clicks on the **Take a photo** label.
    After that, if the user decides to click on the back button without taking a photo,
    nothing will happen, but if he shoots a photo, the content of the hidden input
    field will be changed and the `findImages()` function will be triggered. The purpose
    of this function is to retrieve all images and to sort them by their modification
    date in descending order. The first image in the provided result set is the latest
    photo taken by the user. The `loadImage()` function processes the result and loads
    these images in the HTML5 image element with the `photoFrame` ID.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript in the `photographer.js` file uses a Tizen Content API to retrieve
    the latest image, and the privilege `content.read` must be set or `WebAPIException`
    with the type `SecurityError` will be thrown.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Video and audio files can be recorded in a Tizen web application in a similar
    way. The attribute `accept` of the HTML5 input element should be set to `video/*`
    to record videos. For capturing sounds, its value should be `audio/*`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value of the attribute `capture` in the `<input>` tag should match one
    of the following options: `camera`, `camcorder`, `microphone`, and `filesystem`.
    Please note that its default value is `filesystem` and in this mode, the user
    is asked to select a file from the local storage.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the `SelfCamera` sample application shipped with the Tizen SDK to learn
    how to create more advanced web applications capable of displaying video stream
    from the front camera and capturing a photo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating linear barcodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The rest of the recipes in this chapter are dedicated to barcodes. There are
    two major groups of barcodes; they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**One-dimensional** (**1D**) barcodes, which contain only lines with the same
    height and a different width. The common 1D barcode types are Code 39, Code 128,
    Code 25 Interleaved 2 of 5, UPS, EAN-8, and EAN-13.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Two-dimensional** (**2D**) barcodes, which depending on their type can contain
    different geometric figures and patterns. The most popular 2D barcode types are
    QR Code, DataMatrix, and Aztec Code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generation and scanning are complex and specific operations depending on the
    type of barcode. The recommended and easiest way for implementation is to use
    proven third-party open source libraries.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to generate one-dimensional Code 39 and Code
    25 Interleaved 2 of 5 barcodes using JavaScript in Tizen web applications. The
    open source project, jquery-barcode, will be used because it can be easily integrated
    in applications created with the Tizen UI framework, which is based on jQuery
    Mobile and jQuery. The project is available under MIT license and can be downloaded
    from [https://code.google.com/p/jquery-barcode/](https://code.google.com/p/jquery-barcode/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a Tizen web application capable of generating
    linear barcodes:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and start a new Tizen Web project for **Single Page Application**
    using **Tizen Web UI Framework**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Append the following CSS class to the `styles.css` file, which is located in
    the `css` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the `jquery-barcode` library and save it at the `js` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the content of `index.html` with the following source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes and run the application on a Tizen emulator or device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application contains two buttons. Barcodes are generated upon click and
    the clicked button disappears. The height, the width, and the border of the barcodes
    are set in the `barcodeImg` CSS class.
  prefs: []
  type: TYPE_NORMAL
- en: The library jquery-barcode takes the HTML content of an element, creates a barcode
    based on it, and replaces it with the generated image of the barcode. Both buttons
    of the sample application developed in this recipe generate barcodes from the
    `1234` input data. In real-world applications, it is recommended to display a
    loading label while the barcode is being generated.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another useful open source JavaScript library for generation of Code 39 barcodes
    is called `barcode-39.js`. It is available under MIT license and it is developed
    by Erik Zettersten. The source code is available on GitHub at [https://github.com/erik5388/barcode-39.js](https://github.com/erik5388/barcode-39.js).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check out the next recipe to learn how to read linear barcodes and retrieve
    data from them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning linear barcodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to read linear Code 39 barcodes in Tizen web applications.
    The most popular open source JavaScript library available at GitHub (at the time
    of the writing of this book) called `BarcodeReader` will be used. It was developed
    by Eddie Larsson and it supports recognition of Code 39 as well as Code 128, Code
    93, and EAN-13 barcodes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Insert an image with appropriate barcode at the root directory of the project.
    For example, the image can be generated using the examples in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Download `BarcodeReader` from GitHub and insert its files into the `js` directory
    of your projects. For more information about BarcodeReader, refer to [https://github.com/EddieLa/BarcodeReader](https://github.com/EddieLa/BarcodeReader).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following three easy steps to implement a linear barcode scanning
    feature based on BarcodeReader in a Tizen web application that uses the Tizen
    Web UI framework:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the HTML for a barcode image (for example, with the name `code39``.``png`)
    as well as a paragraph and a button, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place the following code before the `initialization` function of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the following source code to the initialization function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The barcode is read from image with the ID `imgBarcode` when the user clicks
    on the button with the ID `btnScan`. The image processing is started by the `scanBarcode`
    function and the result of the job is done by the JavaScript object, `barcodeScanner`
    and the `BarcodeReader` library. A web worker is used to run the script `js/DecoderWorker.js`
    in the background without affecting the overall performance of the application.
    The final result is shown in the HTML `p` tag with the ID `labelResult`. If the
    barcode cannot be recognized, the displayed value with `labelResult` will be **Error**.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A sample Tizen web application for scanning linear barcodes
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more details, please explore the source code of the application, which is
    provided with other example applications of this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating QR codes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Quick Response** (**QR**) is the most popular type of barcode nowadays and
    is classified as a 2D barcode.'
  prefs: []
  type: TYPE_NORMAL
- en: QR codes were invented by the Japanese corporation **DENSO**, which is part
    of the Toyota Group. They were first used for tracking parts in automotive manufacturing.
    The usage of QR codes quickly expanded to other industries because of the excellent
    capabilities for storing data of the format. The popularity of QR codes increased
    even more with the rise of smartphones with high resolution cameras.
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we'll discuss QR code generation in Tizen web applications
    using third party open source JavaScript libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A third-party open source JavaScript library that is part of the project qrcode-generator
    will be used in this recipe. The source code is available on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Add the `qrcode.js` file to the `js` directory of your Tizen web application's
    project. This file is available at [https://github.com/kazuhikoarase/qrcode-generator/tree/master/js](https://github.com/kazuhikoarase/qrcode-generator/tree/master/js).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to generate QR codes in your Tizen web application
    with JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the JavaScript file at the head of the HTML file, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a user interface with HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a JavaScript function that generates QR code from the text entered
    by the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a button handler that executes the JavaScript function. The recommended
    location of this code is inside the initialization function at `main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `generateQrCode()` function takes the user input from `inputText`, creates
    a QR code, and places it at `div` with the `barcode` ID. Please note that a regular
    expression has been used to remove invalid characters. According to the documentation
    of the third party library, the type of the QR code may vary between 1 and 10\.
    The mask pattern and the BCH code (class of cyclic redundancy check) depends on
    the specified type. The permitted values for the error correction level are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Low (L): Up to 7 percent of the encoded data can be restored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Medium (M): Up to 15 percent of the encoded data can be restored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Quartile (Q): Up to 25 percent of the encoded data can be restored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'High (H): Up to 30 percent of the encoded data can be restored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The purpose of the error correction level is to define how much backup data
    should be added to the barcode. Medium error correction has been used for the
    previous example.
  prefs: []
  type: TYPE_NORMAL
- en: The barcode image is created and displayed using the `createImgTag()` function.
    Optionally, the size of the cell and the margin can be passed as its arguments.
    The default value of the size is two and the default margin is four times bigger.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A Tizen Web application showing the generation QR codes
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The format of the data encoded as a QR code depends on its purpose. The previous
    example encodes just plain text. If you want to serialize a website, the prefix
    `URL` should be added. For storing a phone number inside a barcode, add the prefix
    `TEL`. If you want to create a QR code that stores contact information, it is
    highly recommended to stick to the `vcard` format.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A sample Tizen web application for QR code creation based on the previous tutorial
    is provided with this book. Please use this as a reference if you have any issues
    with the implementation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning QR codes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The library `ZXing` (pronounced *Zebra Crossing*) is so popular for Android
    applications that it has become a de facto standard for scanning barcodes. It
    is created using Java and it has been ported to several other languages and platforms.
    A JavaScript port of ZXing by Lazar Laszlo has been published at GitHub under
    the name `jsqrcode`. The source code of both the main project and the JavaScript
    port are available under Apache License Version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Obtain the source code of `jsqrcode` and copy all JavaScript files into the
    `js` directory of your project. Download `jsqrcode` from [https://github.com/LazarSoft/jsqrcode](https://github.com/LazarSoft/jsqrcode).
  prefs: []
  type: TYPE_NORMAL
- en: The next example decodes the QR code from the image with the filename `qr``.``png`.
    Either ensure that this image is bundled at the root directory of the project
    or set another location at HTML attribute `src` of the image.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate QR code scanning in a Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the JavaScript files of `jsqrcode` in the following order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a simple user interface using HTML, for example, the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a button handler in the initialization function. By default this function
    is situated in the `main.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that while writing this recipe, the latest version of `jsqrcode`
    had several minor JavaScript errors. The same errors appear when the example application
    for scanning QR codes provided with the book was built. Despite the issues, proceed
    with the packaging and testing the application because the errors do not affect
    QR code scanning.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The usage of `jsqrcode` for scanning QR codes from images is very simple. The
    user interface of the tutorial in this recipe contains three components as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: An image in which the barcode that will be scanned is loaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A label where the data read from the QR code will be displayed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A button that starts the scanning procedure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An anonymous function for processing the read data is set as a callback to the
    JavaScript object `qrcode`. The `decode()` method of the same object is called
    to scan the image. The file path and name of the barcode are taken from the `src`
    attribute of image with the ID `imgBarcode` and are provided as an argument to
    `decode()`.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A Tizen web application for scanning QR code from an image
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can create a Tizen web application that scans QR codes captured from the
    camera by combining the source code from this recipe with a feature for taking
    photos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 6. Developing Social Networking Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Developing Facebook apps in Tizen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching a Facebook news feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining Facebook friends list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing Facebook profile information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading Facebook messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving Facebook notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a Facebook status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering a Tizen news feed from Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a LinkedIn app in Tizen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving LinkedIn updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In less than a decade, social networks have become an essential part of modern
    life. Most people love social networks although it must be said that there are
    people who hate them. Nowadays, social networks are so popular that whether you
    like them or not, sooner or later, you will have to develop a social Tizen application.
  prefs: []
  type: TYPE_NORMAL
- en: 'New social networks evolve every day but this chapter will focus only on the
    most popular ones: Facebook, Twitter, and LinkedIn. At the same time, although
    we will not discuss it in detail, it is worth mentioning the open source social
    engine, [pump.io](http://pump.io), which powers [Identi.ca](http://Identi.ca).'
  prefs: []
  type: TYPE_NORMAL
- en: While you are developing a Tizen application, please remember that different
    parts of the world are dominated by different social networks. A lot of networks
    with regional impact such as the **Russian VK (Вконтакте)** exist and integration
    with them should be carefully considered for applications targeting the population
    of specific countries. It is also important to keep in mind that some social networks
    are not available in certain regions. For example, in China, Facebook has not
    been available since 2008 and access to Twitter was blocked a year later.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter are based on the public APIs provided directly by
    the social networks. If you are interested in a simpler solution for authentication,
    you may try out third-party services such as [https://oauth.io/](https://oauth.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Developing Facebook apps in Tizen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Facebook provides a powerful API for browsing and managing data. The authorization
    is based on OAuth 2.0\. The developer must create a Facebook application and obtain
    an access token from the user before they can access and use their sensitive information.
    Each API function requires specific permissions; the Facebook user must grant
    privileges to the application when they start using it. Otherwise, the API will
    not work.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to create a Facebook application and to obtain
    an access token using the easiest authorization grant with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Facebook developers' portal requires you to log in with existing Facebook
    user credentials. It is not possible to develop a Facebook application without
    being registered to the social network. Before you proceed, please ensure that
    you have a Facebook account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a new Facebook application:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://developers.facebook.com/](https://developers.facebook.com/) and
    log in using your Facebook credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Apps** and then select **Create a new app**, as shown in the following
    screenshot:![How to do it...](img/1908OS_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Facebook application
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter **Display Name** and **Namespace**. After that, select a category and
    click on **Create App**, as shown in the following screenshot:![How to do it...](img/1908OS_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter details regarding your Facebook application
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go to **Settings** and to set **App Domains**, select a contact e-mail and select
    a platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are ready to publish your Facebook application to the general public,
    go to **Status & Review**, select the **On** button and confirm your choice, as
    shown in the following screenshot:![How to do it...](img/1908OS_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Releasing Facebook application to everyone
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is to obtain an access token from the user, which will be used
    in the Tizen web application. The simplest way to obtain an access token through
    JavaScript placed on the domain configured at the Facebook application settings
    requires only three steps, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an HTML file with the following source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Provide the [https://graph.facebook.com/oauth/authorize?type=user_agent&client_id=<Facebook
    app ID>&redirect_uri=<Web site>&scope=<Facebook application permissions>](https://graph.facebook.com/oauth/authorize?type=user_agent&client_id=<Facebook%20app%20ID>&redirect_uri=<Web%20site>&scope=<Facebook%20application%20permissions>)
    URL to a Facebook user, which will redirect them to your web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace `<Facebook app ID>`, `<Web site>`, and `<Facebook application permissions>`
    with appropriate values depending on the settings and the needs of your application.
    All permissions required by the APIs used by the application should be listed
    as a value of the `scope` parameter. For example, `scope=read_stream,read_mailbox`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OAuth 2.0 is an leading industry standard authorization framework. After years
    of hard work and a lot of discussions, the final version of the specifications
    was published in October 2012 at [http://tools.ietf.org/html/rfc6749](http://tools.ietf.org/html/rfc6749).
  prefs: []
  type: TYPE_NORMAL
- en: OAuth enables third-party applications such as Tizen web applications to access
    limited resources on behalf of their owners through a web service. The Facebook
    Graph API implements the OAuth 2.0 standard and using it, for example, a Tizen
    web application can post a status update on behalf of a Facebook user. However,
    to do this, the Tizen web application must be registered as a Facebook application
    and it must have an access token, with adequate permissions, granted by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Facebook still does not provide an SDK, especially for Tizen. So, the login
    flow demonstrated in this recipe has been built manually. Strictly following OAuth
    2.0, the Facebook Graph API provides a couple of different ways to create authorization
    grants appropriate for Tizen web applications as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authorization code**: In this scenario, the Facebook application receives
    a code and after that, exchanges it for an access token. Details regarding this
    type of authorization grant are available in section 1.3.1 of OAuth 2.0 specifications
    and example implementations using the Facebook Graph API, provided at [https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/](https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implicit**: The implicit authorization flow is simpler but it is also less
    secure. An access token is directly issued and provided to the Facebook application
    through an HTTP redirection. This approach is specially designed for JavaScript
    and similar scripting languages because the Facebook application does not have
    to share its secret. For more information, please refer to section 1.3.2 of the
    OAuth 2.0 specifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The example in this recipe relies on the implicit authorization grant as it
    is implemented with JavaScript. Only the client ID, the redirect URL, and a list
    of required permissions are provided to the Facebook Graph API. Upon success,
    the API redirects the user agent back to the configured destination and the JavaScript
    parses the granted access token from the URL. Upon success, the access token is
    printed on the screen. If an error occurs, the **Facebook access token: unknown**
    message is displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: The example in this recipe assumes that the JavaScript will be placed on a website.
    However, it is worth mentioning that Facebook offers an alternative. Desktop applications
    are allowed to set the [https://www.facebook.com/connect/login_success.html](https://www.facebook.com/connect/login_success.html)
    redirect URL so that it is possible to implement a solution for obtaining access
    tokens directly in a Tizen application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After obtaining an access token, please refer to the subsequent recipes to learn
    how to use the most common features of the Graph API in the Tizen web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need more information about the Facebook login flow, please do not hesitate
    to read the documents on the developers' portal at [https://developers.facebook.com/docs/facebook-login](https://developers.facebook.com/docs/facebook-login)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of available scopes and details regarding Facebook permissions are
    available at [https://developers.facebook.com/docs/facebook-login/permissions/](https://developers.facebook.com/docs/facebook-login/permissions/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching a Facebook news feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most famous and easily recognizable feature of Facebook is its news feeds.
    Every user of the social network is familiar with the Facebook news feed as it
    contains up-to-date information from their friends, pages, and groups.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to retrieve and display the news feed in
    a Tizen web application using the Graph API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start, make sure that you have a valid Facebook access token. The
    user must have granted the `read_stream` permission to the application in this
    example.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate a Facebook news feed into a Tizen
    web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Initialize the JavaScript variable, `sAccessToken`, with the Facebook access
    token, which should be obtained as explained in the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert an unordered list with the ID `listFb` in the HTML of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the following JavaScript function that executes an AJAX request to
    the Facebook Graph API:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application obtains the Facebook feed using the Graph API and shows only
    the news with text messages. The profile image and the name of the user, page,
    or the group is displayed next to their status.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A Tizen application retrieving a Facebook news feed
  prefs: []
  type: TYPE_NORMAL
- en: If there is an issue with the access token text, **Access denied** will be displayed
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The URL request is sent to the Facebook servers asynchronously using the jQuery
    function `$.ajax()`. If the news feed is retrieved successfully, a JSON is received
    and it is handled by the function associated with `success`. An item of the unordered
    list, `listFb`, is created for each page with a text message. Image, title marked
    with tag `h2` as well as the plain text of the messages are added as a paragraph
    to the list item. The Facebook profile image of the author of the status is retrieved
    based on their unique ID.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the Facebook Graph API documentation to learn more about all the data
    provided with the news feed per user at [https://developers.facebook.com/docs/graph-api/reference/user/home/](https://developers.facebook.com/docs/graph-api/reference/user/home/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining Facebook friends list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Friendship is the greatest treasure, especially on Facebook. In this recipe,
    you will learn how to obtain a user's list of friends using an asynchronous HTTP
    request to Facebook Graph API. The total number of friends, the profile image,
    and the full name of each user will be displayed in the frontend of the sample
    Tizen application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Obtain a valid Facebook access token before proceeding to the next example.
    The permission `user_friends` is required to perform a request to the Graph API
    regarding the user's friends.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate the algorithm for obtaining a list
    of Facebook friends in a Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable access to websites by appending the following line to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Declare the JavaScript variable `sAccessToken` and initialize it with the Facebook
    access token granted to the application by the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an HTML5 document using a Tizen Web UI Framework that includes the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following JavaScript functions to obtain and sort all friends of
    the current user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Execute `getFacebookFriends()` to request the list of friends.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application retrieves a person's friends and shows them in an alphabetical
    order. The `getFacebookFriends()` function performs an AJAX request using jQuery
    to `/me/friends` of the Facebook Graph API. Only the `name` and `picture` fields
    per user are requested.
  prefs: []
  type: TYPE_NORMAL
- en: If the AJAX request is completed without any issues, the result is handled at
    the method `success`. Friends are sorted alphabetically by the JavaScript function
    `sort()` and the function `compareName()` that acts as comparator. A row with
    the profile image and the name of each user is added to the HTML5 list with the
    ID `listFbFriends`. Finally, the total number of friends are added to a span with
    the ID `labelFbFriendsCount` at the header of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that if the asynchronous request to Facebook Graph API fails, the
    **Error** message will be displayed on the screen. The request may fail due to
    different issues, for example, invalid access token or lack of `user_friends`
    permissions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For details regarding the API for obtaining Facebook friends, please have a
    look at the Graph API documentation at [https://developers.facebook.com/docs/graph-api/reference/user/friends/](https://developers.facebook.com/docs/graph-api/reference/user/friends/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visit [https://developers.facebook.com/docs/graph-api/reference/user/friends/](https://developers.facebook.com/docs/graph-api/reference/user/friends/)
    to see the full list of fields available per user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing Facebook profile information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create an example application that reads the public
    information of the Linux Foundation from their pages. The information is retrieved
    using the Facebook Graph API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to retrieve profile information using the Facebook
    Graph API and to display it in a Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a HTML `div` element with the ID `info`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a JavaScript function that executes the request to Facebook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the function at an appropriate place inside your source code with the
    ID of a page or Facebook user. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application performs an asynchronous request using the Facebook user ID.
    The request retrieves only the name, basic information, and the photo of the selected
    user. These fields are public and they do not require any permission. If a problem
    occurs, a label with the **Error** text is shown on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The previous example source code retrieves information about the Facebook page
    of the Linux Foundation through its ID `41911143546`. To find the ID of another
    page or profile, extract its name from its URL, append it to the end of [http://graph.facebook.com/](http://graph.facebook.com/),
    and retrieve the ID from the returned JSON. For example, the Facebook page of
    the Linux Foundation is [https://www.facebook.com/TheLinuxFoundation](https://www.facebook.com/TheLinuxFoundation);
    so, its name is `TheLinuxFoundation` and in this case, the URL to the Graph API
    should be [http://graph.facebook.com/TheLinuxFoundation](http://graph.facebook.com/TheLinuxFoundation).
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer to retrieve information about the current user, use `me` instead
    of the user ID in the URL and provide an access token. For example, the [https://graph.facebook.com/me?fields=name&access_token=](https://graph.facebook.com/me?fields=name&access_token=)
    URL finds the full name of the user identified by an access token, which should
    be appended to its end.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Information about the Facebook page of the Linux Foundation
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please read the documentation provided by Facebook to learn details about the
    permissions and the other available fields for profiles at [https://developers.facebook.com/docs/graph-api/reference/user/](https://developers.facebook.com/docs/graph-api/reference/user/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading Facebook messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Messages are another key Facebook feature that quickly become popular to all
    users around the world. In this recipe, we will create a sample Tizen application
    for browsing conversations using the Facebook Graph API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start with the development of the following example, please make
    sure that you have a valid access token granted by a Facebook user. The permission
    `read_mailbox` is required to perform the actions in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following instructions to create a simple Tizen web application
    to browse Facebook messages:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and start a new Tizen Web Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Tizen Web UI Framework** and **Single Page Application** from the available
    options of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Append the following line to `config.xml` in order to allow access to Internet
    sites:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the content of `index.html` with the following source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include an external JavaScript file with functions related to the Facebook
    Graph API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert a list view and a button inside the content of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new file with the name `facebook.js` in the `js` directory and save
    the following code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the value of the `sAccessToken` variable with an access token granted
    by a Facebook user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Proceed with the implementation of a JavaScript function, which makes an asynchronous
    request to Facebook servers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the following code snippet to an initialization function in the `main.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes and run the application on a Tizen emulator or device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application executes an asynchronous HTTP request to Facebook servers using
    `jQuery.ajax()`. Because of this, a rule for accessing website should be added
    to the configuration file of the application as shown in step 3.
  prefs: []
  type: TYPE_NORMAL
- en: The user interface of the application consists of a list and a back button,
    which are created using HTML5 in `index.html`. Initially, the list is empty and
    the back button is hidden.
  prefs: []
  type: TYPE_NORMAL
- en: The `getFacebookMessages()` function is executed with the launch of the application.
    It performs the HTTP request to the Facebook servers and on success, stores the
    received data in variable messages. After that, it calls the `showMessages()`
    function, which displays the list of people with whom the user has communicated.
    The `bindListItem()` function associates a click with any of these people with
    the `showThread()` function. Facebook conversations are organized into threads;
    so, the purpose of the `showThread()` function is to display all messages for
    the selected thread in the list.
  prefs: []
  type: TYPE_NORMAL
- en: The back button has the ID `btnBack` and it is displayed after the last message.
    Please note that the button is shown only if the user has selected a message thread.
    Upon clicking on it, the function `showMessages()` is called to hide the back
    button and to show again the list of contacted people.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have a look at the official documentation for details regarding accessing a
    person's inbox using the Facebook Graph API at [https://developers.facebook.com/docs/graph-api/reference/user/inbox/](https://developers.facebook.com/docs/graph-api/reference/user/inbox/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are interested in the integration of chat capabilities inside your application,
    please refer to the documentation of Facebook Chat API at [https://developers.facebook.com/docs/chat/](https://developers.facebook.com/docs/chat/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving Facebook notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Facebook Graph API also provides an interface for managing notifications
    through HTTP requests. In this recipe, you will learn how to retrieve and handle
    Facebook notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source code in this recipe requires the `manage_notifications` permission.
    Please obtain an access token from the Facebook user, which grants this permission
    to your application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate the Graph API for notifications in
    a Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that access to websites is permitted by adding the following line
    to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Initialize the JavaScript variable `sAccessToken` with a valid Facebook access
    token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an unordered HTML5 list with the ID `listNotifications`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function that sends an asynchronous HTTP request to Facebook
    servers to retrieve notifications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Call the `getFacebookNotifications()` function when you want to retrieve notifications
    and load them into the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTTP request for retrieving notifications and the response of the Facebook
    Graph API is similar to the API for the news feed. You will notice that the source
    code in this recipe is almost the same as for the *Fetching Facebook news feed*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The `getFacebookNotifications()` function makes an asynchronous HTTP request
    using `jQuery.ajax()`. On success, the result is loaded into an HTML list with
    ID. If an error occurs, the **Error** text is displayed in the same list.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the Facebook Graph API documentation for more details related to notifications
    at [https://developers.facebook.com/docs/graph-api/reference/user/notifications/](https://developers.facebook.com/docs/graph-api/reference/user/notifications/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a Facebook status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have discussed how to get a news feed, list of friends,
    profile information, messages, and notifications. Now, it is time to do something
    more interesting. Let's post a Facebook status.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A valid access token is required to publish content on behalf of the user through
    the Facebook Graph API. According to the Facebook developer's documentation, the
    permission `publish_stream` has to be used when posting a message to a Facebook
    page. To post on the timeline of a user, the permission `publish_actions` must
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a JavaScript function to update a Facebook
    status in the Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable access to websites by inserting the following line into `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Declare a JavaScript variable, `sAccessToken`, with global scope and initialize
    it with a valid access token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a JavaScript function that executes the request to Facebook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is just a sample. If you plan to use the `updateFacebookStatus()` function
    in production code, please replace all `console.log()` executions with appropriate
    handlers.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `updateFacebookStatus()` function performs an asynchronous HTTP POST request
    to publish a Facebook status on behalf of the user through the Graph API. The
    text of the status is provided as an argument to the function. For example, the
    following line will try to post the message Tizen to the timeline of the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: The sample implementation in this recipe is connected to a GUI; so, operation
    statuses are printed directly onto the console. On success, the **Status updated**
    message will appear in the log.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about publishing using the Facebook Graph API, please visit
    [https://developers.facebook.com/docs/graph-api/using-graph-api/#publishing](https://developers.facebook.com/docs/graph-api/using-graph-api/#publishing)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering a Tizen news feed from Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will conquer another popular social network. Twitter was
    launched in 2006 as a microblogging platform and it is famous for the limitation
    of 140 characters per message. The restriction of the message length has been
    set for compatibility with SMS.
  prefs: []
  type: TYPE_NORMAL
- en: Due to security issues, the usage of the Twitter API of custom web and mobile
    applications has recently become a bit harder. In this recipe, we will authenticate
    the user from a server-side script and the retrieved data will be passed to a
    Tizen web application, which will process the data using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need a Twitter account to create an application. Please make sure that you
    are signed up to Twitter before you proceed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a Twitter application in less than five
    minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the website [https://dev.twitter.com/apps/](https://dev.twitter.com/apps/)
    and log in with your Twitter credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create New App**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Application details**, agree the developer rules, and click on **Create
    your Twitter application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that the callback URL can be left blank in our case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **API Keys** tab of your application and click on **Create my access
    token**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you have successfully created a Twitter application, you can proceed
    with the development of a server-side application that will transfer Twitter data
    to a Tizen application on a mobile device. Perform the following steps to create
    a very simple PHP script that filters the 10 most recent tweets about #tizen:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the open source library `TwitterOAuth` from GitHub and place it on
    the server at [https://github.com/abraham/twitteroauth](https://github.com/abraham/twitteroauth).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a PHP script and insert the following source code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Include TwitterOAuth using the PHP built-in function `require_once()`. Please
    change the path if you have installed the library on a different location.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Assign the API key and secret key, as well as the access token and its secret
    key to the PHP variable on the first lines of the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, it is time to develop a Tizen application that will read Twitter data
    from the PHP script and will display it to the user. Launch the Tizen IDE and
    create or update a new or new an existing Tizen web application by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable access to your server by inserting the following line into `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an HTML5 unordered list for displaying the tweets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function that retrieves data from the sever:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the value of `url` with the URL of your Twitter application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the JavaScript function to populate the HTML5 list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The PHP script deployed on the server retrieves tweets about #tizen using Twitter
    REST API v1.1 and the open source PHP library `TwitterOAuth`. The Tizen web applications
    receive the data from the PHP script and display it in a list as shown in the
    following screenshot. If this fails, an **Error** message is displayed to the
    user.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A Tizen web application showing the latest tweets about #tizen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Version 1.1 of the Twitter REST API provides a variety of methods for Twitter
    data management. In this recipe, `search/tweets` was used to return a collection
    of ten recent tweets about #tizen. According to the documentation of the API,
    the number of returned tweets and the hash tag are defined in GET parameters count
    and `q` of the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: The Tizen web application grabs data using `jQuery.ajax()`, iterates over the
    collection of tweets, and displays the text messages as well as the username and
    the profile picture of the author of each tweet.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the official documentation to use the full capabilities of Twitter RESP
    API v1.1 at [https://dev.twitter.com/docs/api/1.1](https://dev.twitter.com/docs/api/1.1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details about searching tweets using the API are also available at [https://dev.twitter.com/docs/using-search](https://dev.twitter.com/docs/using-search)
    and [https://dev.twitter.com/docs/api/1.1/get/search/tweets](https://dev.twitter.com/docs/api/1.1/get/search/tweets)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a LinkedIn app in Tizen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LinkedIn is the most popular professional social network. It is an excellent
    tool for maintaining professional contacts. Although people rarely spend as much
    time on LinkedIn as on Facebook or Twitter, it is still very useful.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe contains a tutorial on how to create a LinkedIn application, how
    to use the REST API, and how to develop a server-side script for management of
    access tokens.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The authentication of the LinkedIn API is based on OAuth 2.0 and it has a lot
    of similarities with Facebook. The only requirement to create a LinkedIn application
    is to have a LinkedIn account; so, before proceeding, please ensure that you are
    signed up for the professional social network.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please create a LinkedIn application by performing the following easy steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://www.linkedin.com/secure/developer](https://www.linkedin.com/secure/developer).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add New Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the company information and application details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the OAuth permissions and set a redirect URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a website for retrieving access tokens. Although this can be achieved
    with JavaScript due to security reasons, it is recommended to rely on server-side
    scripting languages because the API secret must be included at the source code.
    The following tutorial shows a simple implementation approach with PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a PHP script that corresponds to the location pointed as a redirect
    URL and place in it the following source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the values of the previous four PHP variables with the API key and
    secret key, a long unique string for state, and the configured redirect URI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide the following URL to the user to authenticate them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.linkedin.com/uas/oauth2/authorization?response_type=code&client_id=<API
    key>&scope=<application''s permissions>&state=<state>&redirect_uri=<redirect URI>](https://www.linkedin.com/uas/oauth2/authorization?response_type=code&client_id=<API%20key>&scope=<application''s%20permissions>&state=<state>&redirect_uri=<redirect%20URI>)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace `<API key>` and `<redirect URI>` with the generated key, set the redirect
    URI, and set a unique long string for `<state>`. Provide a list of permissions
    required by the application as a value of `<application permission>`. The permissions
    are divided by commas, for example, `scope=r_basicprofile,rw_nus`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LinkedIn authentication is based on OAuth 2.0; so, the flow for the generation
    of an access token contains two steps. In the first step, the PHP script obtains
    an authorization code. After that, during the second step, the authorization code
    is exchanged for an access token.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that a similar authentication flow is also supported by Facebook,
    although we used a simpler but less secure solution known as an implicit authorization
    grant in the *Developing a Facebook app in Tizen* recipe. It is possible to apply
    authentication with exchange of code for an access token for Facebook as well.
  prefs: []
  type: TYPE_NORMAL
- en: The implicit approach is less secure because an access token is directly issued
    to the client. This solution is optimized for clients implemented in web browsers
    with JavaScript or other scripting languages. For more information about the authorization
    grant, please explore the following section of the proposed OAuth 2.0 standard
    at [http://tools.ietf.org/html/rfc6749#section-1.3](http://tools.ietf.org/html/rfc6749#section-1.3).
  prefs: []
  type: TYPE_NORMAL
- en: The example relies on PHP only because of the personal preferences of the author.
    Feel free to implement similar solutions with any other server-side programming
    language if you want. Please review the code in this example as a proof of concept
    and improve it if you plan to use it in production.
  prefs: []
  type: TYPE_NORMAL
- en: The OAuth 2.0 redirects the URL saved in application settings, which must match
    the location of the server-side script. The state parameter of the initial URL
    is mandatory. It acts as a protection mechanism from cross-site request forgery.
    Its value should be a long string of text that is hard to be guessed. If there
    is a mismatch of the state value, the PHP script will exit with the **Cross-site
    request forgery detected** message.
  prefs: []
  type: TYPE_NORMAL
- en: On success, the PHP scripts print the retrieved access token on the screen.
    In case of error, the **Unable to retrieve access token** message is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, the user must grant privileges to the
    LinkedIn application when they start using it. The user is informed about all
    permissions required by the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dialog granting access to a LinkedIn application
  prefs: []
  type: TYPE_NORMAL
- en: Permissions depend on the API that will be used by the application. The full
    list of available programming interfaces and the permissions that they require
    can be viewed at [https://developer.linkedin.com/apis](https://developer.linkedin.com/apis).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LinkedIn provides a very good guide and a lot of examples about authentication
    to their API using OAuth 2.0\. It is highly recommend that you extend the knowledge
    gained from this recipe by exploring the [https://developer.linkedin.com/documents/authentication](https://developer.linkedin.com/documents/authentication)
    document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving LinkedIn updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe contains an example usage of the LinkedIn REST API for retrieving
    shared content by the connections of the user. Instructions on how to integrate
    the API in a Tizen web application and to get the twenty most recent updates with
    shared information are included.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A LinkedIn application has to be created and an access token has to be obtained
    before proceeding with this recipe. If you have not yet created a LinkedIn application,
    please read the previous recipe to prepare.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The LinkedIn API can be integrated into a Tizen web application. For example,
    the following tutorial explains how to show a list of shared LinkedIn updates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow access to websites by inserting the following line in `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place an unordered list to display LinkedIn updates in the HTML5 content of
    the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement JavaScript that retrieves data using the LinkedIn API, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the value of the previous JavaScript variable with the access token
    of the user:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An asynchronous HTTPS request to the LinkedIn servers is performed using `jQuery.ajax()`.
    The URL is formatted according to the LinkedIn API documentation for share and
    network updates. The access token is appended to the end of the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '''[https://api.linkedin.com/v1/people/~/network/updates?type=SHAR&count=20&oauth2_access_token=](https://api.linkedin.com/v1/people/~/network/updates?type=SHAR&count=20&oauth2_access_token=)'''
  prefs: []
  type: TYPE_NORMAL
- en: The number of returned results is set as a value of the `count` parameter. The
    parameter type defines a filter of the updates. In this case, only sharing updates
    are selected. The full list of supported types is available at [https://developer.linkedin.com/documents/network-update-types](https://developer.linkedin.com/documents/network-update-types).
  prefs: []
  type: TYPE_NORMAL
- en: The `x-li-format` header is added to the HTTPS request to set JSON as the desired
    format of the response. If data is successfully retrieved, it is loaded in the
    unordered HTML5 list with ID `listUpdates`. The title, description, and the short
    URL of each shared item is displayed. The names of the author of the update as
    well as their profile image are also displayed. Otherwise, an error message is
    shown on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For all details regarding the full capabilities of the LinkedIn API for network
    updates and statistics, please check the official documentation at [https://developer.linkedin.com/documents/get-network-updates-and-statistics-api](https://developer.linkedin.com/documents/get-network-updates-and-statistics-api)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 7. Managing the Address Book and Calendar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving all contacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new contact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a contact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a contact to vCard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving all tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting an event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving all events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting an alarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The address book and the calendar are well-known applications on both feature
    phones and smartphones. Of course, Tizen is not an exception and these features
    and applications are built into the platform. Tizen web applications have full
    access to the data of these vital applications though a couple of APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Tizen SDK brings Contacts and Calendar APIs to control the content of the address
    book and the calendar using JavaScript. Both APIs are capable of creating, updating,
    deleting, and reading items. Despite the powerful capabilities of the interfaces
    and their methods, the usage remains simple and it will be explained with a lot
    of examples in the following 11 recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving all contacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe offers a tutorial on how to retrieve and display a list of contacts
    and their phone numbers using the Tizen Contacts API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate the Contacts API in a Tizen web application
    and to load all contacts and their phone numbers inside an HTML5 list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following privilege to the `config.xml` file to allow the usage of
    the Contacts API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**http://tizen.org/privilege/contact.read**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modify an appropriate HTML file of the application, for example, `index.html`,
    and add to it the content and an unordered list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place the following source code into an existing file or create a new JavaScript
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place a call to the JavaScript function to initialize the list with data at
    an appropriate state of the application, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JavaScript function `retrieveContacts()` invokes the `find()` method of
    the Tizen Contacts API and passes to it callback functions, which are triggered
    upon success or upon failure. The `contact.read` permission is required because
    without it, the operation will not be completed successfully. If a problem occurs,
    the previous sample implementation will display an error message in the HTML5
    element with the ID `listContacts`.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: List all contacts from the address book
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the subsequent recipes to learn how to add, update, delete,
    and export contacts from the address book. A project with the source code of a
    Tizen web application for the management of the contacts from the address book
    is provided with this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please read the documentation for more details regarding the Contacts API at
    [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/contact.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/contact.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new contact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tizen Contacts API offers a couple of different approaches for adding a
    new contact to the address book as well as for updating an existing contact. This
    recipe walks you through how to collect user details and to save them as a new
    contact. HTML5 is used to create a simple interface and JavaScript is used to
    validate user input and store the data in the address book.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure that the following privilege has been added to `config.xml` of the
    Tizen web application before starting the tutorial for adding new content to the
    address book:'
  prefs: []
  type: TYPE_NORMAL
- en: '**http://tizen.org/privilege/contact.write**'
  prefs: []
  type: TYPE_NORMAL
- en: This privilege is required by the `add()` method of the `AddressBook` interface,
    which saves contacts to the address book.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a user interface for collecting contact
    details using HTML5 and to save them using JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a page using the Tizen Web UI Framework by inserting the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a dialog that will be displayed if any errors occur:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a function that displays the dialog with some appropriate text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function that saves the name and the phone number of a
    new contact:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the function for initialization of the application, append the following
    source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The page that was created in this recipe can be easily integrated in a Tizen
    web application that also contains a page with the list of all contacts. Take
    a look at the source code of the sample contacts application provided with this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The user interface implementation contains two components that are created
    in the first step of the tutorial: a page and a pop-up dialog. Input boxes for
    the first and the last name as well as for a phone number of the new contact are
    included on the page. The type of the input box for the phone number is set to
    `tel` so that a convenient keypad will be provided when the user enters information
    in this field. Take a look at the following screenshot. It is a screenshot that
    has been taken from the sample application source code, which is provided with
    the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The user interface for adding a new contact to the Tizen address book
  prefs: []
  type: TYPE_NORMAL
- en: 'The `saveContact()` function creates a JavaScript object from the `Contact`
    interface and saves it to the address book through the `add()` method of the `AddressBook`
    interface. In the last step of the tutorial, a code for handling buttons and initialization
    of the dialog is implemented. A function that validates the data and invokes `saveContact()`
    is bound to the button with the text `Save`. The same function catches all exceptions
    that may occur and displays their error messages to the user in a dialog. Upon
    success, the following code snippet transfers the user to the `#list` page, which
    has been created in the previous recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'As a consequence, the jQuery Mobile event `show` will be generated for the
    `#list` page. It is recommend to bind this event at the initialization of the
    application to a function that reloads the list of contacts, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: There's more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An alternative way to add a new contact is to create a JavaScript object from
    the `Contact` interface by specifying the contact details using the vCard format.
    For example, the following code snippet creates an object for a person with the
    name `Indiana Jones` and phone number `12345678` from data provided as vCard Version
    3.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: If you want to modify the contact details of a person from an address book,
    please use the `update()` function from the `AddressBook` interface. The usage
    is the same as for the `add()` function, and the JavaScript object from the `Contact`
    interface must be provided as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The example in this recipe saves only the name and a single phone number of
    a contact but the Tizen Contact API is not restricted only to this information.
    Refer to the following documentation to explore all available attributes of the
    Contact interface that can be saved into the address book: [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/contact.html#::Contact::Contact](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/contact.html#::Contact::Contact).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a contact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A good application has to be prepared for any apocalypse that may occur. Keep
    in mind that anything can happen and for example, the user might decide to delete
    the contact details of his ex-wife. Luckily, the Tizen Contact API is easy to
    use. This recipe explains how to remove a single contact or even a whole batch
    of contacts. It also includes a tutorial for the integration of a contact removal
    feature into the application developed following the instructions from the first
    recipe of this chapter, *Retrieving all contacts*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tizen web applications that have a feature for removing contacts from the address
    book must have the following privilege set in their `config.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**http://tizen.org/privilege/contact.write**'
  prefs: []
  type: TYPE_NORMAL
- en: The same privilege is required by the functions `remove()`, which deletes a
    single contact, and `removeBatch()`, which deletes several contacts at the same
    time.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to improve the sample application from the previous
    recipe about retrieving all contacts and to delete the whole contact information
    of a person with a single click:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch a Tizen IDE and load the Tizen Web application to retrieve all contacts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `config.xml` and append the required privileges for contact removal. The
    following line should exist in the source of this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function that deletes a contact from the address book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a JavaScript function that handles user selection and invokes the
    function created on the previous step with the ID of the selected contact:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `retrieveContacts()` function and bind the click events of the list
    items to the handlers to delete a contact:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `bindClick()` function binds the click events to an anonymous function that
    tries to delete a person and all their contacts from the address book based on
    their ID. Upon success, the `retrieveContacts()` function is called to reload
    the list of all contacts. If an exception is caught, the error message will be
    displayed in a pop up.
  prefs: []
  type: TYPE_NORMAL
- en: 'To include the removal feature in the user interface of the application, you
    have to edit the `retrieveContacts()` function as described in the fifth step
    of the recipe. The `bindClick()` function expects two arguments: the object that
    represents the list item and the contact ID. It has to be invoked right after
    the creation of the list item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: The Tizen Contact API provides the `remove()` function from the `AddressBook`
    interface for contact removal. The identifier of the contact is the only argument
    of this function. If the contact is not found or any other error is there, the
    function throws `WebAPIException`. Remember to add the exception handler anytime
    you use `remove()`, as shown in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is also possible to delete several contacts at the same time. Combining
    the functions `find()` and `removeBatch()` allows you to remove all contacts based
    on a specific filter. The following code snippet demonstrates how to delete all
    contacts with a specified first name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example executes the function and deletes all the contacts of
    people with the first name `John`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: The `contactsRemoved()` function is executed successfully. All errors that might
    occur are processed by the `printError()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The applied instance of `AttributeFilter` is used with the matching flag `CONTAINS`,
    which ensures a case insensitive string comparison of the first name. The filter
    will select all contacts with the first name `John` as well all other names that
    contain John such as, Johnny. You can learn more about the filter and the other
    available matching flags from the official documentation at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/tizen.html#::Tizen::FilterMatchFlag](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/tizen.html#::Tizen::FilterMatchFlag).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The example in this recipe depends on the source code from the previous recipes
    *Retrieving all contacts* and *Adding a new contact*. The source code of a sample
    application that combines the three recipes is provided with this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a contact to vCard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you transferred contacts to another device? Have you synchronized contacts
    from a mobile device with a computer or a cloud? Have you sent a contact to someone
    else as an e-mail or MMS? All these operations are basic for all smartphones and
    they require an export from the address book.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will guide you on how to serialize and export data from the address
    book using the Contact API for Tizen web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The key word of this recipe is vCard. This is a standard file format for storing
    business card information. It appeared in the mid 90s and initially was used primarily
    in e-mails. Today, vCards are also used for contact data serialization on mobile
    devices and barcodes. Several versions of the format have been standardized: 2.1,
    3.0, and 4.0.'
  prefs: []
  type: TYPE_NORMAL
- en: Each vCard has a prefix of `BEGIN:VCARD` and suffix of `END:VCARD`. The version
    of the vCard should also be specified at the beginning of the vCard's text. The
    standards determine a set of predefined types such as `FN`, `TITLE`, `ADR`, and
    `TEL` and many more that are used to describe the full contact information. The
    most commonly known file extension for vCard is `.vcf`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Retrieve a contact from the address book of Tizen and use the `convertToString()`
    function to export it, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Please note that it in this case, `console.log` has been used only as a simple
    example. In a real application, you can do multiple things with a vCard. For example,
    you can share it with another application using the Tizen operation ID [http://tizen.org/appcontrol/operation/share](http://tizen.org/appcontrol/operation/share).
    The usage of this operation is similar to the one in the *Launching video in external
    player* recipe in [Chapter 5](ch05.html "Chapter 5. Creating Multimedia Apps"),
    *Creating Multimedia Apps*.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `convertToString()` method of the `Contact` interface has a single argument,
    which specifies the desired export format. It is optional. As of Tizen 2.2.1 SDK,
    the only supported format for export by Tizen Contacts API is vCard version 3.0
    and it can be set using a string `VCARD_30`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample output of an exported contact from **John Smith** with the phone number
    **12345678** is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that the `convertToString()` function was not supported by the Tizen
    emulator provided with the SDK for older versions of the platforms such as Tizen
    2.0 Magnolia. If you are targeting older Tizen releases, please test your application
    on a real device.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are interested in more information regarding the standard vCard format,
    you can explore the documents provided by the Internet Engineering Task Force
    (IETF) at [http://tools.ietf.org/html/rfc6868](http://tools.ietf.org/html/rfc6868)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving all tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tizen calendar is capable of storing both tasks and events. This recipe
    as well as the subsequent two recipes are dedicated to tasks. The result of the
    combination of the three tutorials about finding all tasks, adding, and deleting
    a task is a Tizen web application for a `TO-DO` list for which source code is
    provided with the book.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Tizen SDK provides a Tizen Calendar API for management of the tasks and
    events. Both of them are calendar items and share many properties. This recipe
    will not modify any data, so the only required privilege is `calendar.read`. The
    `calendar.write` privilege has to be added to applications that add, change, or
    remove tasks and/or events.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate the Calendar API into your Tizen web
    application and to show a list of all tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the **http://tizen.org/privilege/calendar.read** privilege to read calendar
    items to the `config.xml` file of your Tizen web application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an HTML list to display the tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the following JavaScript function to retrieve and show all tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Call the `retrieveTasks()` function to load the to-do list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `retrieveTasks()` function gets an aggregation of all calendars through
    the `getUnifiedCalendar()` function of the Calendar API on the operating system,
    which guarantees access to all available tasks. After that, `retrieveTasks()`
    calls the `find()` function and provides the functions `showTasks()` and `error()`
    as callbacks. Upon success, `showTasks()` iterates over an array of retrieved
    tasks and represents them graphically in an HTML unordered list with the ID `listTasks`,
    which was created in step 2\. The Tizen web application created the file which
    includes the source code from this recipe should look just like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Show all tasks
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A lot of different features related to the calendar can be integrated in a Tizen
    web application. Study the documentation of the `Calendar` interface and its `find()`
    method to see all available options to define custom filters using an instance
    of `AbstractFilter` or to set ordering rules using an instance of `SortMode` at
    [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#findidp349704](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#findidp349704).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tutorial provided in this part of the chapter describes how to add a new
    task to a calendar. A simple user interface will be created using the Tizen Web
    UI framework and its purpose will be to prompt for task details. The source code
    in this recipe uses the Calendar API to access a calendar and store data in it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a user interface to collect details and
    create a new task:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a privilege for editing calendar events and tasks to `config.xml` of the
    application **http://tizen.org/privilege/calendar.write**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Develop a user interface using HTML5 that will gather the information about
    the task. The following source code represents a single page created with the
    widgets provided by the Tizen Web UI Framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a JavaScript function for storing tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the following source code to the initialization function of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The user interfaces created in step 2 should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new task to the Tizen calendar
  prefs: []
  type: TYPE_NORMAL
- en: The click event of the **Save** button is handled by a JavaScript anonymous
    function, which is implemented in the last step of the tutorial. This function
    gathers the values of entered information about a task summary, description, and
    date. The collected data is being validated and a `TZDate` object is constructed
    based on the value of the date. If the summary or the description is empty, a
    dialog with the error message **Please set task details** is displayed to the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: The `saveTask()` function is called to create the new task. It obtains a JavaScript
    object for an aggregation of all calendars and passes an object of the type `CalendarTask`
    to its method `add()`.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that according to the documentation, the `add()` method expects
    as an argument an instance of `CalendarItem`. Both interfaces `CalendarTask` and
    `CalendarEvent` implement `CalendarItem` so that their instances can be passed
    to `add()` as demonstrated in the code snippet of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The type of the task item in the Tizen calendar is defined by the `VTODO` format.
    It is also possible to create an object that represents a task using a string
    formatted following the rules of `VTODO`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to change the details of an existing task, use the `update()` method
    of the `Calendar` interface and provide as an argument the object of the task
    that has to be modified. Other useful functions for creating or editing multiple
    calendar items at the same time are `addBatch()` and `updateBatch()`. Please check
    the documentation for details regarding any of these functions at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::Calendar](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::Calendar).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The third and final recipe about calendar tasks in this chapter reveals how
    to remove an existing task.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to implement the removal of a task upon click to
    the application developed following the instructions in the *Retrieving all tasks*
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `config.xml` of your Tizen web application and add the **http://tizen.org/privilege/calendar.write**
    privilege, which allows the modification of calendar events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement the JavaScript function that removes a task based on its name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Connect click event upon a task with the `delete` function by appending the
    following line right after creation of list item in the `showTasks()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `remove()` function of the `Calendar` interface from the Calendar API is
    used to completely remove a task or an event from the calendar. As shown in the
    code snippet, the `deleteTask()` function is an aggregate instance of all available
    calendars on the devices are retrieved and after that the `remove()` function
    is executed. The ID of the task is specified as its argument.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, the `bindClick()` function is utilized to connect a click event
    on any of the items of the list with the `deleteTask()` function through the `.bind()`
    method that is provided by jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JavaScript source code for deleting a task using Calendar API in the previous
    example is integrated with the user interface created in the *Retrieving all tasks*
    recipe. Familiarize yourself with the other recipes related to the management
    of a calendar's tasks as well as with the official documentation of the `CalendarTask`
    interface at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::CalendarTask](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::CalendarTask).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A couple of code snippets for adding a new event using the Tizen Calendar API
    are provided in this recipe. Events are described by the `CalendarEvent` interface.
    The interface has all the attributes of the `CalendarItem` interface as well as
    the additional attributes `endDate`, `availability`, and `recurrenceRule`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same functions of the Calendar API are used to add or update events and
    tasks. As expected, the same privilege has to be appended to the `config.xml`
    file of the Tizen web application, whether the application modifies events or
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Tizen Calendar API provides two options to add a new event. The first approach
    is to set the event details using JSON, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'The second approach relies on the `VEVENT` format. Implement and run the following
    source code to create an event from the string formatted following the rules of
    `VEVENT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Creating a new task* recipe for more information and example usage
    of the functions `add()` and `update()` of the `Calendar` interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting an event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to use the `remove()` method provided with the Calendar
    API to remove an event.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The function used for removing events from the Tizen calendar requires the
    following privilege:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/calendar.write](http://tizen.org/privilege/calendar.write)'
  prefs: []
  type: TYPE_NORMAL
- en: Please ensure that this privilege has been added to the configuration file of
    your application if it is supposed to delete events.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following example implementation of the `deleteEvent()` function demonstrates
    how to remove an event for the unified calendar of Tizen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The usage of the `remove()` function for events is the same as for tasks. According
    to the documentation, the function expects an argument of the type `CalendarItemId`,
    which can be either `CalendarEventId` or `CalendarTaskId`. In this particular
    case, it must be `CalendarEventId` because the `deleteEvent()` function removes
    events. The `remove()` function may fail due to the wrong type of the argument,
    invalid identifier, security issue, missing event, or other unknown error. For
    each of these errors, an exception will be thrown and in the attached code snippet
    it will be caught and printed on the console.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take another look at the *Deleting a task* recipe to see how the `remove()`
    function can be integrated into the user interface of a Tizen web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving all events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe provides instructions on how to find all events in your Tizen web
    application using the Calendar API. The provided sample code snippet is similar
    to the one in the recipe for retrieving all tasks. It shows how to list all events
    ordered alphabetically by their summary.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to find all available events inside a Tizen web
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the application has the permission to read calendar events by
    adding the **http://tizen.org/privilege/calendar.read** privilege to its configuration
    file `config.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert an unordered list in the HTML5 content of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement JavaScript functions for retrieving and displaying basic information
    about events, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the function at an appropriate moment, for example, at application
    startup using the following single line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The behavior of the Calendar API for retrieving events is almost the same as
    for tasks. As you can see, the names of the functions and variables in this recipe
    are similar to the ones from the *Retrieving all tasks* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The `retrieveEvents()` function gets a unified calendar and sorts events by
    their summary in ascending order. The callback functions `showEvents()` and `error()`
    are passed as the first and the second argument to the `find()` function. The
    other two arguments are optional. Null is passed as the third argument because
    all events should be retrieved. If you want to retrieve a subset of events based
    on any kind of criteria, please provide an instance of the `AbstractFilter` interface
    instead of `null`. Additionally, an object constructed from the `SortMode` interface
    defines the sorting properties.
  prefs: []
  type: TYPE_NORMAL
- en: Upon success, an array of the retrieved calendar events is passed to the `showEvents()`
    function, which loads their description and summary into the HTML5 unordered list
    with the ID `listEvents`. If a problem occurs, details about it are displayed
    in the same list by the `error()` function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have a look at the official documentation to study all the available attributes
    of each event that are specified by the `CalendarEvent` interface and the interface
    that it inherits `CalendarItem` at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting an alarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tizen Calendar API allows developers to assign alarms to tasks and events.
    In this recipe, you will learn how to construct objects of the `CalendarAlarm`
    interface and how
  prefs: []
  type: TYPE_NORMAL
- en: to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tizen web applications that set an alarm should have the `calendar.write` privilege.
    If the application has to find an existing calendar item and update its alarm,
    then the `calendar.read` privilege is also required. In this case, edit `config.xml`
    and add both the following privileges to ensure the application works properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/calendar.read](http://tizen.org/privilege/calendar.read)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/calendar.write](http://tizen.org/privilege/calendar.write)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following code snippet to create an alarm using an absolute date and
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can create an alarm using a relative time duration before
    the occurrence of an event or the due date of a task, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'The alarm has to be attached to the attribute of an event or tasks. For example,
    an instance of `CalendarAlarm` named `alarm` can be assigned to an instance of
    `CalendarEvent` named `event`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As shown in this recipe, the Calendar API offers two different ways to create
    an instance of the interface `CalendarAlarm`. In the first example, an absolute
    value for date and time is provided as the `TZDate` object to the constructor
    of the `alarmDate` object. The second example defines a time duration before the
    event using an instance of the `TimeDuration` interface when a reminder should
    be triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The notification method must also be explicitly specified as an argument of
    the constructor of `CalendarAlarm`. The available options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SOUND`: The user is notified with a sound alarm'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DISPLAY`: This shows a message on the screen of the device without playing
    any sound'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string with a description can be provided as an optional argument upon the
    creation of an alarm.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is recommended that you have a look at the *Creating a new task* and *Creating
    a new event* recipes in this chapter. A good idea for a practical exercise is
    to develop Tizen web applications, which sets an alarm along with the creation
    of a calendar item.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For full specifications of the interface `CalendarAlarm`, have a look at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::CalendarAlarm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::CalendarAlarm).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 8. Communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Sending SMS messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending e-mail messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving and displaying e-mail messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsing call history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bluetooth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NFC and detecting other devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending NDEF messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving NDEF messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern telecommunication technologies offer a rich set of wireless standards
    for data exchange. The recipes in this chapter will guide you on how to utilize
    Tizen APIs to create Tizen web applications that communicate over different channels
    using a variety of network bearers.
  prefs: []
  type: TYPE_NORMAL
- en: Each recipe provides simple examples. No source code for fancy user interfaces
    is included in any of the recipes, and the emphasis is on the usage of the APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Sending SMS messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first SMS was sent in England on 3rd December 1992 by the software programmer
    Neil Papworth. Since then, the SMS has become the most popular text messaging
    service, and, nowadays, it is available for both feature and smartphones.
  prefs: []
  type: TYPE_NORMAL
- en: Due to historical reasons, I believe that SMS deserves the honor of being the
    first discussed communicational channel in this chapter of the book. In this recipe,
    you will learn how to use the Messaging API in Tizen web applications to send
    SMS messages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Messaging API provides tools to manage e-mails as well as messages transferred
    through telecommunication protocols, such as SMS and MMS. Tizen web applications
    that utilize it require additional privileges depending on the methods used. Two
    types of privileges have been defined based on the operations performed by the
    methods of the API, [http://tizen.org/privilege/messaging.read](http://tizen.org/privilege/messaging.read)
    to find messages and conversations as well as for listener settings related to
    messaging and [http://tizen.org/privilege/messaging.write](http://tizen.org/privilege/messaging.write)
    for any other operations, such as synchronization, sending and removing messages,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to implement a JavaScript function to send SMS
    messages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config.xml` file, and append the following privilege:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/messaging.write](http://tizen.org/privilege/messaging.write)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a global JavaScript object to store message details as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following callback functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the function to send a text message to a single phone number as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the function `sendSMS()` when you want to send a text message to a
    single recipient by specifying their phone number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The function `sendSMS()` gets as arguments a text message and a phone number
    and stores it in the global JavaScript object `message`. The text of the message
    is set in the attribute `plainBody` of the object `message`, and the phone number
    is saved as the first element of the attribute to which it is an array. After
    that, `sendSMS()` invokes the method `getMessageServices()` of the Messaging API
    and sets the functions, `retrieveServices()` and `logError()`, to be called on
    success or failure of the operations.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add more phone numbers to the attribute if you want to send the same message
    to multiple recipients.
  prefs: []
  type: TYPE_NORMAL
- en: More details about all attributes of a message are available in the documentation
    of the `MessageInit` interface at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/messaging.html#::Messaging::MessageInit](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/messaging.html#::Messaging::MessageInit).
  prefs: []
  type: TYPE_NORMAL
- en: The function `retrieveServices()` composes SMS messages and sends them using
    the method `sendMessage()`. This method requires the privilege [http://tizen.org/privilege/messaging.write](http://tizen.org/privilege/messaging.write)
    that has been set at the first step of the tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Any issues that may occur during the execution of the error code are handled
    by the function `logError()`, which prints **Error** in the console followed by
    details about the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that standard text messaging charges, depending on your subscription
    plan, will be applied by the mobile network operator for each SMS sent. You will
    not be able to send SMS messages successfully if there is no network coverage
    or if the flight mode of the device is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the next recipe to learn how to use the same methods of the Messaging
    API to send e-mails.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending e-mail messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The usage of the Messaging API to send e-mails is similar to the way SMSes are
    sent. This recipe will demonstrate how to send an e-mail and will discuss the
    differences between sending SMS messages and e-mails.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of Tizen Version 2.2.1, the Messaging API is capable of sending SMS, MMS,
    and e-mail. These three options are defined at the enumerated type `MessageServiceTag`,
    which is defined by the API. Just as with the SMS method, `sendMessage()` has
    to be used to send an e-mail, and it also requires the [http://tizen.org/privilege/messaging.write](http://tizen.org/privilege/messaging.write)
    privilege.
  prefs: []
  type: TYPE_NORMAL
- en: Before you proceed, please ensure that an Internet connection is available and
    an e-mail account has been set up on the Tizen device and emulator.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up an e-mail, please launch the **Email** application that is present
    on the main screen of the device, or navigate to **Settings** | **Accounts** |
    **Add** | **Email**, and follow the onscreen instructions. Have a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/1908OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up an e-mail on a Tizen device
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to send an e-mail from the Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config.xml` file, and append the following privilege:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/messaging.write](http://tizen.org/privilege/messaging.write)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a global JavaScript object capable of storing all the information in
    the message as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement callback functions, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function to send an e-mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify the arguments required and invoke the function `sendEmail()` at an
    appropriate place on the application, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example sends an e-mail with the subject **Hello** and content
    **Hello World** to `<[foo@example.com](mailto:foo@example.com)>` and a carbon
    copy to `<[bar@example.com](mailto:bar@example.com)>`. As you can see, the source
    code is very similar to the previous recipe for sending SMS messages. The major
    differences are in the attributes of the JavaScript object, `msgEmail`, the value
    of the first argument of the method `getMessageServices()`, and the constructor
    of `Message`, which has been set to `message.email`.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the object `msgEmail` follows the attributes described by the
    interface `MessageInit`. It is also possible to specify blind carbon copy e-mails
    using the attribute `bcc` or set HTML content for the e-mail using the attribute
    `htmlBody`. All of the attributes, to, cc, and bcc, are arrays, and any one of
    them can store multiple e-mails.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API also allows attachments. All attached files must be provided to the
    attribute `attachments` of the instances of the interface `Message`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: An instance of `MessageAttachment` is created for each attachment. The files
    are described by their filenames and MIME types.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the documentation of the Messaging API to find out more details about
    all interfaces, their attributes, and methods at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/messaging.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/messaging.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving and displaying e-mail messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to monitor and detect changes of messages, conversations, and
    message folders in the Tizen web application through the capabilities of the Messaging
    API. In this recipe, you will find guidelines on how to create an application
    to detect new e-mails.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An Internet connection should be available, and an e-mail account must be configured
    on the Tizen device to try out and verify the successful functioning of the application
    created in this recipe. If you have not set up an e-mail yet, please do it following
    the instructions from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the steps provided in the following tutorial to implement a listener
    for new e-mails in a Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config.xml` file of the application, and add the following privilege
    to read messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/messaging.read](http://tizen.org/privilege/messaging.read)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Declare the following global JavaScript variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create JavaScript functions to show retrieved e-mails or an error that has
    occurred as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement JavaScript functions that initialize the e-mail service and listen
    for messages as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a function that unregisters the e-mail listener:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start listening for e-mails at an appropriate place in the source code of the
    application as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code snippets provided are simple examples, and they are not related to
    any graphical user interface. The information about e-mail received or any errors
    is printed on the console.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Three phases are required to monitor e-mails, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To obtain an e-mail messaging service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To listen for message changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To display messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first phase is performed by the function `initEmailService()`. If it is
    successful, the next step of the algorithm is to execute the function `registerEmailListener()`.
    The final phase is performed by the function `displayMessages()`, which is called
    as a callback by the method `addMessagesChangeListener()` of the interface `MessageStorage`.
    Please note that the code snippet from step four of the tutorial displays only
    messages that have been added to `MessageStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tizen's Messaging API provides methods to listen for changes related to conversations
    and message folders as well. Please note that conversations can represent e-mail
    correspondence or chat. They are grouped by the subject for e-mails and by the
    sender and recipient for chats.
  prefs: []
  type: TYPE_NORMAL
- en: The methods `addConversationsChangeListener()` and `addFoldersChangeListener()`
    of the interface `MessageStorage` should be utilized to detect changes related
    to conversations and folders. Their usage is similar to that of the method `addMessagesChangeListener()`,
    which was used in the code snippets of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A sample Tizen web application based on the tutorial is provided alongside the
    book. It has a simple user interface that shows the sender and the subject of
    e-mails received as shown in the following screenshot. Explore the source code
    of the application for more details.![See also](img/1908OS_08_03.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sample application that displays a received e-mail
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Browsing call history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use Tizen's Call History API to access
    and browse your call history. A sample application to retrieve the list of recently
    made outgoing calls is provided with the book.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to implement the CallHistory API in the Tizen web
    application and to retrieve dialed phone numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following privilege to read the call log to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/callhistory.read](http://tizen.org/privilege/callhistory.read)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Implement JavaScript functions to show call history and handle errors as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the function that retrieves outgoing calls as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the function `getOutgoingCalls()` at the launch of the application or
    any other appropriate place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The function `getOutgoingCalls()` uses the method `find` of the interface `CallHistory`
    to retrieve the preceding ten outgoing calls. The results are ordered in descending
    order by their date and time. An instance of `AttributeFilter` is created to select
    only the `DIALED` numbers. The other options allowed for attribute direction are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`RECEIVED`: This is used for incoming calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MISSEDNEW`: This is for not-yet-seen missed calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MISSED`: This is for all missed calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BLOCKED`: This is for calls that have been blocked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`REJECTED`: This is for calls that have been rejected by the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous example, the function `showCalls()` is executed as a callback
    on success. Otherwise, on failure, the issue is handled by the function `showError()`.
  prefs: []
  type: TYPE_NORMAL
- en: A sample Tizen web application based on this recipe is provided with the book.
    It is integrated with the HTML5 user interface. The following screenshot is from
    this application. You may improve the sample application by combining it with
    the Contacts API that was analyzed in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1908OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A list of the most recently dialed phone numbers
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some Tizen web applications may need a capability to monitor calls. In these
    cases, you can use the methods `addChangeListener()` and `removeChangeListener()`
    of the interface `CallHistory`. An observer must be provided to the function `addChangeListener()`.
    On success, this function returns an identifier that is required for an argument
    of the function `removeChangeListener()` when the listener has to be removed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more details and information about all related interfaces, please refer
    to the documentation of the CallHistory API at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/callhistory.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/callhistory.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bluetooth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bluetooth is a popular wireless standard for data transfer between devices at
    close range. The name of the standard comes from the nickname of the king of Denmark
    and Norway from the middle ages, Harald "Bluetooth" Gormsson.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe provides details about the Bluetooth API for Tizen web applications
    and explains how to use it in the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: To discover Bluetooth devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To connect to another Bluetooth device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To connect and transfer data over Bluetooth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The methods of the Bluetooth API used in this recipe require the following
    privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/bluetooth.admin](http://tizen.org/privilege/bluetooth.admin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/bluetooth.gap](http://tizen.org/privilege/bluetooth.gap)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/bluetooth.spp](http://tizen.org/privilege/bluetooth.spp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please append all privileges to the `config.xml` file of your Tizen web application
    before proceeding to the next section of the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to discover, connect, and exchange data over Bluetooth
    in the Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare and initialize global JavaScript variables as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The variable `bIsServer` is used only to determine whether the application
    is running as a server or as a client. Have a look at the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Bluetooth **Service Discovery Protocol** (**SDP**) defines a range of available
    UUIDs. Tizen developers working on computers with GNU/Linux or OS X can execute
    the command `uuidgen` in a console to generate **Universally Unique Identifier**
    (**UUID**).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your application should connect and communicate to a Bluetooth serial board,
    you can try using the base UUID defined by SDP, `00000000-0000-1000-8000-00805F9B34FB`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a simple function to log errors as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Turn on Bluetooth and retrieve a Bluetooth device as shown in the following
    sample code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, the JavaScript function `run()` will be invoked. Its implementation
    is provided in the next steps of the recipe:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also create a function that turns off Bluetooth. An example of the
    implementation of such a function is shown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create JavaScript data that reads data received from the Bluetooth socket.
    It will be used by both the server and client modes of the application. Have a
    look at the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement JavaScript functions that register a service, establish a connection
    with a client, and receive data if the application is running in server mode,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement JavaScript functions that scan and pair devices. These functions
    will be used when the application is running as a client. Have a look at the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Please note that an exception will be thrown if the device found does not provide
    a service with the expected UUID. If everything is working as expected, the function
    `onSocketConnected()` will be invoked as a callback, as shown in the following
    code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following function tries to create a bond between two devices and, on success,
    invokes the function `paired()` as a callback:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a callback function that sends data from the client to the server as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a function that runs the application as a server or as a client depending
    on the preferences set by the user as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run the application on two different Tizen devices. Launch it in the
    server mode on the first device and in the client mode on the second device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Tizen web application that uses the Bluetooth API, which can operate as the
    server and as the client, can be created following the instructions provided in
    this recipe. The following screenshot is taken from the sample application provided
    with the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1908OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Simple Bluetooth application for Tizen
  prefs: []
  type: TYPE_NORMAL
- en: In the server mode, the application registers a service with a unique UUID through
    the function `startService()`, receives text messages from the client, and displays
    them on the screen using the function `readMessage()`, which is executed as a
    callback.
  prefs: []
  type: TYPE_NORMAL
- en: When the application is running in client mode, it starts searching for any
    nearby Bluetooth devices using the method `discoverDevices()` of the interface
    `BluetoothAdapter`. The same interface also provides the method `getKnownDevices()`,
    which is capable of retrieving the list of known devices.
  prefs: []
  type: TYPE_NORMAL
- en: The function `paired()` bonds the two devices and establishes a connection only
    if the devices found offer services with the UUID that was configured in the first
    step of the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The methods `readData()` and `writeData()` of the interface `BluetoothSocket`
    are used to send and receive data over an opened Bluetooth socket. Text messages
    must be converted into arrays of bytes before sending, as shown in the function
    `onSocketConnected()`. The opposite operation is required when a message is received.
    For example, the code snippet in the function `readMessage()` transforms a byte
    array into a string.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the client sends just a single message, and its content is
    hardcoded as `Hello World`.
  prefs: []
  type: TYPE_NORMAL
- en: The code snippets from this recipe can be easily improved and adjusted to other
    use cases, such as chat over Bluetooth. Please note that the source code of the
    sample application is not production ready. Its main purpose is to demonstrate
    an easy way to use the Bluetooth API.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have a look at the sample Bluetooth application that is provided with the book,
    and explore the documentation of the Bluetooth API for more details at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/bluetooth.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/bluetooth.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bluetooth specifications and a variety of other documents about the standard
    are available at [https://www.bluetooth.org/en-us/specification](https://www.bluetooth.org/en-us/specification)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more technical information about the Bluetooth support in Tizen, please
    also explore the following page at the Tizen wiki at [https://wiki.tizen.org/wiki/Bluetooth](https://wiki.tizen.org/wiki/Bluetooth)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NFC and detecting other devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Near Field Communication** (**NFC**) is a short-range wireless communication
    standard based on **radio-frequency identification** (**RFID**). NFC has several
    unique advantages compared to other communication technologies, such as Bluetooth.
    NFC does not require any setup to connect devices. The only requirement to establish
    a connection is a close proximity of about 4 cm (or less). Another valuable advantage
    of NFC is the lack of any requirements for power supply for passive tags.'
  prefs: []
  type: TYPE_NORMAL
- en: NFC tags are also known as smart or info tags. They store data that can be easily
    read by users. In many cases, their usage is similar to QR codes and other types
    of barcodes. Anyone can buy an empty NFC tag and save customized information on
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the standard, the usage of NFC can be grouped into three major
    categories depending on the modes, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Reader/writer mode, which is appropriate to exchange data with passive, NFC-compatible
    tags. For example, QR codes on posters, stickers, and other promotional merchandise
    can be replaced by passive NFC tags.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peer-to-peer mode, which allows data exchange between devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Card emulation mode, which allows the NFC device to be used as a card and accessed
    by external readers. For example, this feature might be convenient for contactless
    payments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to power on NFC devices and how to search
    for other devices in close range. The subsequent two recipes are dedicated to
    sending and receiving data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tizen web applications that use the NFC capabilities shown in this recipe must
    have the following privileges in their `config.xml` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/nfc.common](http://tizen.org/privilege/nfc.common)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/nfc.admin](http://tizen.org/privilege/nfc.admin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following privilege is also required for applications that work in peer-to-peer
    mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/nfc.p2p](http://tizen.org/privilege/nfc.p2p)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Applications that use the reader/writer mode should also include the following
    privilege:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/nfc.tag](http://tizen.org/privilege/nfc.tag)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to establish peer-to-peer connection between two
    NFC-enabled devices in the Tizen web application using the NFC API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare and initialize the global JavaScript variable for the NFC adapter and
    the NFC device that will be retrieved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an instance of the interface `NFCPeerDetectCallback`, which implements
    the methods `onattach()` and `ondetach()`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Develop the JavaScript function to handle errors, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create JavaScript functions that turn on the NFC device and search for other
    nearby NFC devices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke the following function to start the procedure to establish an NFC connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The easiest way to debug a Tizen application that takes advantage of the NFC
    API is using **Event Injector**. Enable it by navigating to **Window** | **Show
    View** | **Event Injector** of the Tizen IDE and selecting the tab **Nfc**.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The algorithm implemented in this recipe obtains an instance of the interface
    `NFCAdapter`, searches for other NFC devices using the method `setPeerListener()`,
    and establishes a connection with the detected device through the callback functions
    implemented in `peerFound`.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, this JavaScript object is of the interface `NFCPeerDetectCallback`.
    The method `onattach()` is invoked when another NFC device is detected, and it
    receives as an argument an instance of the interface `NFCPeer`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tizen web applications that have to connect to an NFC tag must use a similar
    approach. The only difference is that the method `setTagListener()` should be
    used instead of `setPeerListener()`, and the success callback is described by
    the interface `NFCTagDetectCallback`. Please note that the names of the methods
    of this interface match `NFCPeerDetectCallback`. In this case, however, the argument
    of `onattach()` is an instance of the interface `NFCTag`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please have a look at the upcoming recipes to understand how to send and receive
    NDEF messages. Please also do not forget to explore the documentation of the NFC
    API for more details at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending NDEF messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **NFC Data Exchange Format** (**NDEF**) is a binary format for the serialization
    of data transferred over NFC. This recipe demonstrates how to create an NDEF message,
    share it with another NFC device in peer-to-peer mode, or write it to a passive
    NFC tag.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please include the privilege [http://tizen.org/privilege/nfc.p2p](http://tizen.org/privilege/nfc.p2p)
    if you plan to communicate in peer-to-peer mode and the privilege [http://tizen.org/privilege/nfc.tag](http://tizen.org/privilege/nfc.tag)
    if you plan to write an NFC tag.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to send an NDEF message:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an NDEF message. For example, the following function creates a text
    NDEF message with UTF-16 character encoding using instances of the interfaces
    `NDEFMessage` and `NDEFRecordText`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The Tizen NFC API supports three different types of NDEF records; text, URI,
    and MIME. A separate interface is provided for each supported type. The interfaces
    `NDEFRecordText`, `NDEFRecordURI`, and `NDEFRecordMedia` implement the basic interface
    `NDEFRecord`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Write or send the message. Use the method `writeNDEF()` of the interface to
    store information on an NFC tag as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the method `sendNDEF()` of the interface to transfer information to another
    device in peer-to-peer mode. Take a look at the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Please note that callback functions that will be invoked on success or failure
    can be optionally specified as arguments of both `writeNDEF()` and `sendNDEF()`.
    Both methods throw an exception upon error, so the try/catch block must be added
    when they are invoked.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more details regarding the attributes of the interfaces `NDEFRecordText`
    and `NDEFMessage`, please refer to the following links:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFRecordText](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFRecordText)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFMessage](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFMessage)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: NDEF technical specifications as well as other documents related to NFC are
    available for download at the NFC Forum at [http://members.nfc-forum.org/specs/spec_list/](http://members.nfc-forum.org/specs/spec_list/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving NDEF messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous two recipes demonstrated how to establish a connection with NFC
    and to write/send data. The next logical step is to explore the capabilities of
    the Tizen NFC API to read/receive data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The privilege [http://tizen.org/privilege/nfc.p2p](http://tizen.org/privilege/nfc.p2p)
    is required when an NDEF message is received in NFC's peer-to-peer mode. If you
    plan to implement a feature to read data from passive NFC tags, you have to include
    the privilege [http://tizen.org/privilege/nfc.tag](http://tizen.org/privilege/nfc.tag)
    in the `config.xml` file. Please note that as described in the previous recipe,
    the same privileges are required to send messages and to write information to
    a tag.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please use the method `readNDEF()` provided by the interface `NFCTag` to read
    data from passive NFC tags as demonstrated in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a function that will be invoked as a callback if a supported NDEF is
    found as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a function to handle any errors that may occur as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read the content of the tag using the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In Tizen web applications that communicate in the NFC peer-to-peer mode, it
    is possible to listen for incoming NDEF messages. For example, the following code
    snippet extends the source code from the second step of the *Using NFC and detecting
    other devices* recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: The new lines of code that have been appended are shown in bold. The method
    `setReceiveNDEFListener()` is used to listen to incoming NDEF messages. An anonymous
    JavaScript function, which receives an instance of the interface `NDEFMessage`
    as an argument, is assigned to the `onsuccess` method.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second argument of `readNDEF()` is optional but is recommended to handle
    errors that might occur during its execution. It is also recommend that you surround
    the method with try/catch blocks, as it may throw an exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example to read a passive NFC tag, an instance of `NDEFMessage` will
    be provided as an argument of the function `readMessage()`. An instance of the
    same class is provided to the function, which is invoked on success in peer-to-peer
    mode. The attribute records of `NDEFMessage` contain an array with instances of
    `NDEFRecord`. The specified type of each record can be checked through the attribute
    `tnf` , which stores the 3-bit value for **Type Name Field** (**TNF**). According
    to the documentation, at least the following values are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_EMPTY`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_WELL_KNOWN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_MIME_MEDIA`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_URI`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_EXTERNAL_RTD`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_UNKNOWN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_UNCHANGED`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please explore the information available at the following link for more information
    about the interface `NDEFRecord` at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFRecord](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFRecord)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving push notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen provides a mechanism to trigger events from an application server and
    the delivery of these events on Tizen devices. Tizen web applications that have
    to receive notifications for these events must utilize and take advantage of the
    Push API.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to send a notification from your website to your Tizen
    web application, which is running on the user's device, you have to send the notification
    to a push service, which will forward it to the Tizen device. Once the notification
    is received on the device, your Tizen application should handle the message.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The push service in Tizen is provided by Samsung. You have to request access
    to the service before you start with the application development.
  prefs: []
  type: TYPE_NORMAL
- en: According to the procedure for *Push Service Request*, the developer must send
    an e-mail to `<[push.tizen@samsung.com](mailto:push.tizen@samsung.com)>`. The
    request should contain developer and application information. Please read the
    up-to-date information and details about the request form for Tizen web applications
    in the documentation at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_service_request.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_service_request.htm).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate the Push API into a Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the privilege [http://tizen.org/privilege/push to config.xml](http://tizen.org/privilege/push%20to%20config.xml),
    and allow access from the domain of the Push server as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Replace `{region}` and set a value that corresponds to the location of the used
    server depending on the first two digits of `regID`. Please read the official
    documentation for more details at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_server_api.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_server_api.htm).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a JavaScript function to handle errors and exceptions as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function to handle successful registration of the push
    service as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register for the service using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function to handle incoming notifications as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Connect to the push service and receive messages as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The notification received will be handled immediately if it is received while
    the application is running. If the application is not running or if it is running
    in the background, a ticker message will be displayed, and a badge with the number
    of unread notifications will appear next to the application's icon.
  prefs: []
  type: TYPE_NORMAL
- en: To take advantage of the Push API and receive push notifications, you must first
    register the push service on the devices in the Tizen web application using the
    method `registerService()` of the interface `PushManager`.
  prefs: []
  type: TYPE_NORMAL
- en: After that, the application must be connected to the service using the method
    `connectService()` of the same interface. In the previous code snippet, an instance
    of `PushMessage` is passed to the function `notificationReceived()` for each message
    received. The function `notificationReceived()` is invoked as a callback by `connectService().connectiService()`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To send a notification for a website or service to the server of the Push API,
    execute the HTTPS POST request to `https://{region}.push.samsungosp.com:8088/spp/pns/api/push`.
    Please replace `{region}` following the guide provided in the first step of the
    recipe. The header of the request should include information about the ID (`appID`)
    and the secret (`appSecret`) of the application. The body must contain `regID`,
    `requestID`, `message`, and `appData`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code snippet demonstrates how to send a HTTPS POST
    request to the push server using JavaScript and jQuery:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: The notification is sent to the Tizen server in the EU West region, and it includes
    the text **Bar** and the ticker message **Foo**. The value of the application's
    ID and secret is provided through the JavaScript variables `sAppId` and `sAppSecret`.
    The variable `sRegId` stores the registration identification of the application.
  prefs: []
  type: TYPE_NORMAL
- en: For more details regarding the integration of websites and services with the
    push server, please visit [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_server_api.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_server_api.htm).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By the way, the Tizen Push API uses the same servers as the push messaging service
    in Bada. This coincidence is not a surprise, because in 2013, Samsung merged its
    Bada OS into the second major version of the open source platform Tizen.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please explore the Push API documentation for more details about the interfaces
    provided, their methods, and attributes at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/push.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/push.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 9. Using Sensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using location-based services to display current location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting directions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocoding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reverse geocoding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating distance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting device motion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting device orientation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Vibration API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data provided by the hardware sensors of Tizen devices can be useful for
    many mobile applications. In this chapter, you will learn how to retrieve the
    geographic location of Tizen devices using the assisted GPS, to detect changes
    of the device orientation and motion as well as how to integrate map services
    into Tizen web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the examples related to maps and navigation use Google APIs. Other service
    providers such as **Nokia HERE**, **OpenStreetMap**, and **Yandex** also offer
    APIs with similar capabilities and can be used as an alternative to Google in
    Tizen web applications.
  prefs: []
  type: TYPE_NORMAL
- en: It was announced that Nokia HERE joined the Tizen association at the time of
    writing this book. Some Tizen devices will be shipped with built-in navigation
    applications powered by Nokia HERE. The smart watch Gear S is the first Tizen
    wearable device from Samsung that comes of the box with an application called
    Navigator, which is developed with Nokia HERE. Explore the full capabilities of
    Nokia HERE JavaScript APIs if you are interested in their integration in your
    Tizen web application at [https://developer.here.com/javascript-apis](https://developer.here.com/javascript-apis).
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenStreetMap also deserves special attention because it is a high quality
    platform and very successful community-driven project. The main advantage of OpenStreetMap
    is that its usage is completely free. The recipe about Reverse geocoding in this
    chapter demonstrates address lookup using two different approaches: through Google
    and through OpenStreetMap API.'
  prefs: []
  type: TYPE_NORMAL
- en: Using location-based services to display current location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By following the provided example in this recipe, you will master the HTML5
    Geolocation API and learn how to retrieve the coordinates of the current location
    of a device in a Tizen web application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ensure that the positioning capabilities are turned on. On a Tizen device or
    Emulator, open **Settings**, select **Locations**, and turn on both **GPS** (if
    it is available) and **Network position** as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/1908OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enabling GPS and network position from Tizen Settings
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to retrieve the location in a Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement JavaScript for handling errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement JavaScript for processing the retrieved location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a JavaScript function that searches for the current position using
    the HTML5 Geolocation API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At an appropriate place in the source code of the application, invoke the function
    created in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `getCurrentPosition()` method of the HTML5 Geolocation API is used in the
    `retrieveLocation()` function to retrieve the coordinates of the current position
    of the device. The functions `showLocation()` and `showError()` are provided as
    callbacks, which are invoked on success or failure. An instance of the `Position`
    interface is provided as an argument to `showLocation()`. This interface has two
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`coords`: This specifies an object that defines the retrieved position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestamp`: This specifies the date and time when the position has been retrieved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getCurrentPosition()` method accepts an instance of the `PositionOptions`
    interface as a third optional argument. This argument should be used for setting
    specific options such as `enableHighAccuracy`, `timeout`, and `maximumAge`. Explore
    the Geolocation API specification if you are interested in more details regarding
    the attributes of the discussed interface at [http://www.w3.org/TR/geolocation-API/#position-options](http://www.w3.org/TR/geolocation-API/#position-options).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no need to add any specific permissions explicitly in `config.xml`.
    When an application that implements the code from this recipe is launched for
    the first time, it will ask for permission to access the location, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A request to access location in Tizen web application
  prefs: []
  type: TYPE_NORMAL
- en: If you are developing a location-based application and want to debug it using
    the Tizen Emulator, use the Event Injector to set the position.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A map view provided by Google Maps JavaScript API v3 can be easily embedded
    into a Tizen web application. An Internet connection is required to use the API,
    but there is no need to install an additional SDK or tools from Google. Follow
    these instructions to display a map and a marker:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that the application can access the Google API. For example, you
    can enable access to any website by adding the following line to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit [https://code.google.com/apis/console](https://code.google.com/apis/console)
    to get the API keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Services** and activate **Google Maps API v3**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, click on **API** and copy **Key for browser apps**. Its value will
    be used in the source code of the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement the following source code to show a map inside `div` with the ID
    `map-canvas`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the HTML of the application, create the following `div` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide latitude and longitude to the function and execute it at an appropriate
    location. For example, these are the coordinates of a location in Westminster,
    London:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot demonstrates a Tizen web application that has been
    created by following the preceding guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1908OS_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Google Maps in a Tizen web application
  prefs: []
  type: TYPE_NORMAL
- en: Combine the tutorial from the *How to do it* section of the recipe with these
    instructions to display a map with the current location.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source code of a simple Tizen web application is provided alongside the
    book following the tutorial from this recipe. Feel free to use it as you wish.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More details are available in the W3C specification of the HTML5 Geolocation
    API at [http://www.w3.org/TR/geolocation-API/](http://www.w3.org/TR/geolocation-API/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more details and to explore the full capabilities of the Google Maps
    JavaScript API v3, please visit [https://developers.google.com/maps/documentation/javascript/tutorial](https://developers.google.com/maps/documentation/javascript/tutorial).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting directions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigation is another common task for mobile applications. The Google Directions
    API allows web and mobile developers to retrieve a route between locations by
    sending an HTTP request. It is mandatory to specify an origin and a destination,
    but it is also possible to set way points. All locations can be provided either
    by exact coordinates or by address. An example for getting directions and to reach
    a destination on foot is demonstrated in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you start with the development, register an application and obtain API
    keys:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Google Developers Console at [https://code.google.com/apis/console](https://code.google.com/apis/console).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Services** and turn on **Directions API**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **API Access** and get the value of **Key for server apps**, which
    should be used in all requests from your Tizen web application to the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more information about the API keys for the Directions API, please visit
    [https://developers.google.com/maps/documentation/directions/#api_key](https://developers.google.com/maps/documentation/directions/#api_key).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following source code to retrieve and display step-by-step instructions
    on how to walk from one location to another using the Google Directions API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an HTML unordered list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create some JavaScript that will load retrieved directions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function that sends an asynchronous HTTP (**AJAX**) request
    to the Google Maps API to retrieve directions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Do not forget to replace `<API key>` with the **Key for server apps** value
    provided by Google for the Directions API. Please note that a similar key has
    to be set to the source code in the subsequent recipes that utilize Google APIs
    too:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide start and end locations as arguments and execute the `retrieveDirection()`
    function. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first mandatory step is to allow access to the Tizen web application to
    Google servers. After that, an HTML unordered list with ID directions is constructed.
    An origin and destination is provided to the JavaScript function `retrieveDirections()`.
    On success, the `showDirections()` function is invoked as a callback and it loads
    step-by-step instructions on how to move from the origin to the destination. The
    following screenshot displays a Tizen web application with guidance on how to
    walk from Times Square in New York to the Empire State Building:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Directions API is quite flexible. The mandatory parameters are `origin`,
    `destination`, and `sensor`. Numerous other options can be configured at the HTTP
    request using different parameters. To set the desired transport, use the parameter
    `mode`, which has the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`driving`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`walking`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bicycling`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transit` (for getting directions using public transport)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, if the mode is not specified, its value will be set to `driving`.
  prefs: []
  type: TYPE_NORMAL
- en: The unit system can be configured through the parameter `unit`. The options
    `metric` and `imperial` are available. The developer can also define restrictions
    using the parameter `avoid` and the addresses of one or more directions points
    at the `waypoints` parameter. A pipe (`|`) is used as a symbol for separation
    if more than one address is provided.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An application with similar features for getting directions can also be created
    using services from Nokia HERE. The REST API can be used in the same way as Google
    Maps API. Start by acquiring the credentials at [http://developer.here.com/get-started](http://developer.here.com/get-started).
  prefs: []
  type: TYPE_NORMAL
- en: An asynchronous HTTP request should be sent to retrieve directions. Instructions
    on how to construct the request to the REST API are provided in its documentation
    at [https://developer.here.com/rest-apis/documentation/routing/topics/request-constructing.html](https://developer.here.com/rest-apis/documentation/routing/topics/request-constructing.html).
  prefs: []
  type: TYPE_NORMAL
- en: The Nokia HERE JavaScript API is another excellent solution for routing. Make
    instances of classes `Display` and `Manager` provided by the API to create a map
    and a routing manager. After that, create a list of way points whose coordinates
    are defined by an instance of the `Coordinate` class. Refer to the following example
    provided by the user's guide of the API to learn details at [https://developer.here.com/javascript-apis/documentation/maps/topics/routing.html](https://developer.here.com/javascript-apis/documentation/maps/topics/routing.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The full specifications about classes `Display`, `Manager`, and `Coordinate`
    are available at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.map.Display.html](https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.map.Display.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.routing.Manager.html](https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.routing.Manager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.geo.Coordinate.html](https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.geo.Coordinate.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All details, options, and returned results by the Google Directions API are
    available at [https://developers.google.com/maps/documentation/directions/](https://developers.google.com/maps/documentation/directions/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Geocoding** is the process of retrieving geographical coordinates associated
    with an address. It is often used in mobile applications that use maps and provide
    navigation. In this recipe, you will learn how to convert an address to longitude
    and latitude using JavaScript and AJAX requests to the Google Geocoding API.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You must obtain keys before you can use the Geocoding API in a Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit Google Developers Console at [https://code.google.com/apis/console](https://code.google.com/apis/console).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Services** and turn on **Geocoding API**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **API Access** and get the value of **Key for server apps.** Use it
    in all requests from your Tizen web application to the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more details regarding the API keys for the Geocoding API, visit [https://developers.google.com/maps/documentation/geocoding/#api_key](https://developers.google.com/maps/documentation/geocoding/#api_key).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to retrieve geographic coordinates of an address
    in a Tizen web application using the Google Geocoding API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function to handle results provided by the API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function that sends a request to the API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As in the previous recipes, you should again replace `<API key>` with the **Key
    for server apps** value provided by Google for the Geocoding API.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide the address as an argument to the `geocoding()` function and invoke
    it. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The address is passed as an argument to the `geocoding()` function, which sends
    a request to the URL of Google Geocoding API. The URL specifies that the returned
    result should be serialized as JSON. The parameters of the URL contain information
    about the address and the API key. Additionally, there is a parameter that indicates
    whether the device has a sensor. In general, Tizen mobile devices are equipped
    with GPS so the parameter sensor is set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A successful response from the API is handled by the `retrieveCoordinates()`
    function, which is executed as a callback. After processing the data, the code
    snippet in this recipe prints the retrieved coordinates at the console. For example,
    if we provide the address of the Empire State Building to the `geocoding()` function
    on success, the following text will be printed: **latitude: 40.7481829 longitude:
    -73.9850635**.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the Google Geocoding API documentation to learn more details regarding
    the usage of the API and all of its parameters at [https://developers.google.com/maps/documentation/geocoding/#GeocodingRequests](https://developers.google.com/maps/documentation/geocoding/#GeocodingRequests).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nokia HERE provides similar features. Refer to the documentation of its Geocoder
    API to learn how to create the URL of a request to it at [https://developer.here.com/rest-apis/documentation/geocoder/topics/request-constructing.html](https://developer.here.com/rest-apis/documentation/geocoder/topics/request-constructing.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reverse geocoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reverse geocoding, also known as address lookup, is the process of retrieving
    an address that corresponds to a location described with geographic coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Geocoding API provides methods for both geocoding as well as reverse
    geocoding. In this recipe, you will learn how to find the address of a location
    based on its coordinates using the Google API as well as an API provided by OpenStreetMap.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The same keys are required for geocoding and reverse geocoding. If you have
    already obtained a key for the previous recipe, you can directly use it here again.
    Otherwise, you can perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit Google Developers Console at [https://code.google.com/apis/console](https://code.google.com/apis/console).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Services** and turn on **Geocoding API**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **API Access**, locate the value of **Key for server apps**, and use
    it in all requests from the Tizen web application to the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need more information about the Geocoding API keys, visit [https://developers.google.com/maps/documentation/geocoding/#api_key](https://developers.google.com/maps/documentation/geocoding/#api_key).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the described algorithm to retrieve an address based on geographic coordinates
    using the Google Maps Geocoding API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function to handle the data provided for a retrieved address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a function that performs a request to Google servers to retrieve
    an address based on latitude and longitude:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pay attention that `<API key>` has to be replaced with the **Key for server
    apps** value provided by Google for the Geocoding API:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide coordinates as arguments of function and execute it, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If an application developed using the preceding source code invokes the `reverseGeocoding()`
    function with latitude 40.748183 and longitude -73.985064, the printed result
    at the console will be **350 5th Avenue, New York, NY 10118, USA**. By the way,
    as in the previous recipe, the address corresponds to the location of the Empire
    State Building in New York.
  prefs: []
  type: TYPE_NORMAL
- en: The `reverseGeocoding()` function sends an AJAX request to the API. The parameters
    at the URL specify that the response must be formatted as JSON. The longitude
    and latitude of the location are divided by commas and set as a value of the `latlng`
    parameter in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OpenStreetMap also provides a reverse geocoding service. For example, the following
    URL will return a JSON result of a location with the latitude 40.7481829 and longitude
    -73.9850635:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://nominatim.openstreetmap.org/reverse?format=json&lat=40.7481829&lon=-73.9850635](http://nominatim.openstreetmap.org/reverse?format=json&lat=40.7481829&lon=-73.9850635)'
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of OpenStreetMap is that it is an open project with a great
    community. Its API for reverse geocoding does not require any keys and it can
    be used for free.
  prefs: []
  type: TYPE_NORMAL
- en: Leaflet is a popular open source JavaScript library based on OpenStreetMap optimized
    for mobile devices. It is well supported and easy to use, so you may consider
    integrating it in your Tizen web applications. Explore its features at [http://leafletjs.com/features.html](http://leafletjs.com/features.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All details regarding the Google Geocoding API are available at [https://developers.google.com/maps/documentation/geocoding/#ReverseGeocoding](https://developers.google.com/maps/documentation/geocoding/#ReverseGeocoding)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you prefer to user the API provided by OpenStreetMap, take a look at [http://wiki.openstreetmap.org/wiki/Nominatim#Reverse_Geocoding_.2F_Address_lookup](http://wiki.openstreetmap.org/wiki/Nominatim#Reverse_Geocoding_.2F_Address_lookup)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating distance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is dedicated to a method for calculating the distance between two
    locations. The Google Directions API will be used again. Unlike the *Getting directions*
    recipe, this time only the information about the distance will be processed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like the other recipe related to the Google API, in this case, the developer
    must obtain the API keys before the start of the development. Please follow these
    instructions to register and get an appropriate API key:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit Google Developers Console at [https://code.google.com/apis/console](https://code.google.com/apis/console).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Services** and turn on **Geocoding API**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **API Access** and save the value of **Key for server apps.** Use it
    in all requests from your Tizen web application to the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need more information about the API keys for Directions API, visit [https://developers.google.com/maps/documentation/directions/#api_key](https://developers.google.com/maps/documentation/directions/#api_key).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to calculate the distance between two locations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a JavaScript function that will process the retrieved data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function that will request directions using the Google
    Maps API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remember to replace `<API key>` with the **Key for server apps** value provided
    by Google for the Direction API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `checkDistance()` function and provide the origin and the destination
    as arguments, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Geographical coordinates can also be provided as arguments to the function
    `checkDistance()`. For example, let''s calculate the same distances but this time
    by providing the latitude and longitude of locations in the Bulgarian cities Plovdiv
    and Burgas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `checkDistance()` function sends data to the Google Directions API. It sets
    the origin, the destination, the sensor, the unit system, and the API key as parameters
    of the URL. The result returned by the API is provided as JSON, which is handled
    in the `retrieveDistance()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output in the console of the preceding example, which retrieves the distance
    between the Bulgarian cities Plovdiv and Burgas, is `The distance between Plovdiv,
    Bulgaria and Burgas, Bulgaria is: 253 km.`'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For all details about the Directions API as well as a full description of the
    returned response, visit [https://developers.google.com/maps/documentation/directions/](https://developers.google.com/maps/documentation/directions/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting device motion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe offers a tutorial on how to detect and handle device motion in Tizen
    web applications. No specific Tizen APIs will be used. The source code in this
    recipe relies on the standard W3C `DeviceMotionEvent`, which is supported by Tizen
    web applications as well as any modern web browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please follow these steps to detect device motion and display its acceleration
    in a Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create some HTML components to show device acceleration, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function to handle errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function that handles motion events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function that starts a listener for motion events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke a function at an appropriate location of the source code of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `deviceMotion()` function registers an event listener that invokes the
    `motionDetected()` function as a callback when device motion event is detected.
    All errors, including an error if `DeviceMotionEvent` is not supported, are handled
    in the `showError()` function. As shown in the following screenshot, the `motionDetected()`
    function loads the data of the properties of `DeviceMotionEvent` into the HTML5
    labels that were created in the first step. The results are displayed using standard
    units for acceleration according to the international system of units (**SI**)—metres
    per second squared (m/s2). The JavaScript method `toFixed()` is invoked to convert
    the result to a string with two decimals:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A Tizen web application that detects device motion
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notice that the device motion event specification is part of the `DeviceOrientationEvent`
    specification. Both are still in draft. The latest published version is available
    at [http://www.w3.org/TR/orientation-event/](http://www.w3.org/TR/orientation-event/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code of a sample Tizen web application that detects device motion
    is provided along with this book. You can import the project of the application
    into the Tizen IDE and explore it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting device orientation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to monitor changes of device orientation
    using the HTML5 `DeviceOrientation` event as well as get the device orientation
    using the Tizen SystemInfo API. Both methods for retrieving device orientation
    have advantages and work in Tizen web applications. It is up to the developer
    to decide which approach is more suitable for their application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to register a listener and handle device orientation
    events in your Tizen web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a JavaScript function to handle errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function that handles changes of the orientation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript function that adds a listener for the device orientation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the JavaScript function to start listening for device orientation events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If `DeviceOrientationEvent` is supported, the `deviceOrientation()` function
    binds the event to the `orientationDetected()` function, which is invoked as a
    callback only on success. The `showError()` function will be executed only if
    a problem occurs.
  prefs: []
  type: TYPE_NORMAL
- en: An instance of the `DeviceOrientationEvent` interface is provided as an argument
    of the `orientationDetected()` function. In the preceding code snippet, the values
    of its four read-only properties `absolute` (a Boolean value, `true` if the device
    provides orientation data absolutely), `alpha` (motion around the *z* axis), `beta`
    (motion around the *x* axis), and `gamma` (motion around the *y* axis) are printed
    in the console.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is an easier way to determine whether a Tizen device is in landscape or
    portrait mode. In a Tizen web application, in this case, it is recommended to
    use the SystemInfo API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet retrieves the device orientation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: 'The status of the orientation can be one of the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PORTRAIT_PRIMARY`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PORTRAIT_SECONDARY`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LANDSCAPE_PRIMARY`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LANDSCAPE_SECONDARY`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DeviceOrientationEvent` specification is still a draft. The latest published
    version is available at [http://www.w3.org/TR/orientation-event/](http://www.w3.org/TR/orientation-event/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the Tizen SystemInfo API, visit [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/systeminfo.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/systeminfo.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Vibration API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen is famous for its excellent support of HTML5 and W3C APIs. The standard
    Vibration API is also supported and it can be used in Tizen web applications.
    This recipe offers code snippets on how to activate vibration on a Tizen device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following code snippet to activate the vibration of the device for
    three seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To cancel an ongoing vibration, just call the `vibrate()` method again with
    zero as a value of its argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, the vibration can be canceled by passing an empty array to the
    same method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The W3C Vibration API is used through the JavaScript object, `navigator`. Its
    `vibrate()` method expects either a single value or an array of values. All values
    must be specified in milliseconds. The value provided to the `vibrate()` method
    in the preceding example is `3000` because 3 seconds is equal to 3000 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The W3C Vibration API allows advanced tuning of the device vibration. A list
    of time intervals (with values in milliseconds), during which the device will
    vibrate, can be specified as an argument of the `vibrate()` method. For example,
    the following code snippet will make the device vibrate for 100 ms, stand still
    for 3 seconds, and then again vibrate, but this time just for 50 ms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on the vibration capabilities and the API usage, visit
    [http://www.w3.org/TR/vibration/](http://www.w3.org/TR/vibration/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen native applications for the mobile profile have exposure to additional
    APIs written in C++ for light and proximity sensors. Explore the source code of
    the sample native application SensorApp which is provided with the Tizen SDK to
    learn how to use these sensors. More information about them is available at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/uix/light_sensor.htm](http://ttps://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/uix/light_sensor.htm)
    and [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/uix/proximity_sensor.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/uix/proximity_sensor.htm).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

- en: Part II. Creating Tizen Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：创建Tizen Web应用程序
- en: '[*Building a UI*](ch03.html "Chapter 3. Building a UI")'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[*构建用户界面*](ch03.html "第3章. 构建用户界面")'
- en: '[*Storing Data*](ch04.html "Chapter 4. Storing Data")'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[*存储数据*](ch04.html "第4章. 存储数据")'
- en: '[*Creating Multimedia Apps*](ch05.html "Chapter 5. Creating Multimedia Apps")'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[*创建多媒体应用*](ch05.html "第5章. 创建多媒体应用")'
- en: '[*Developing Social Networking Apps*](ch06.html "Chapter 6. Developing Social
    Networking Apps")'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[*开发社交网络应用*](ch06.html "第6章. 开发社交网络应用")'
- en: '[*Managing the Address Book and Calendar*](ch07.html "Chapter 7. Managing the
    Address Book and Calendar")'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[*管理通讯录和日历*](ch07.html "第7章. 管理通讯录和日历")'
- en: '[*Communication*](ch08.html "Chapter 8. Communication")'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[*通信*](ch08.html "第8章. 通信")'
- en: '[*Using Sensors*](ch09.html "Chapter 9. Using Sensors")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[*使用传感器*](ch09.html "第9章. 使用传感器")'
- en: Chapter 3. Building a UI
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 构建用户界面
- en: 'In this chapter, we will cover:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖：
- en: An overview of widgets
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件概述
- en: Creating buttons
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建按钮
- en: Creating list views
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建列表视图
- en: Showing pop ups
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示弹出窗口
- en: Using the Tizen Notification API
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Tizen通知API
- en: Customizing the look and feel
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义外观和感觉
- en: Drawing and writing text on a canvas
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在画布上绘制和书写文本
- en: Creating 3D objects with WebGL
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WebGL创建3D对象
- en: Introduction
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter of the book is dedicated to graphical user interfaces. It includes
    tutorials for creating buttons, lists, pop ups, and notifications with Tizen Web
    UI Framework and jQuery Mobile. We'll also cover hints to make user-friendly mobile
    applications as well as easier customization of the application design are shared.
    Furthermore, reference guides for drawing 2D and 3D objects on an HTML5 canvas
    are also included.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一章专注于图形用户界面。它包含了使用Tizen Web UI框架和jQuery Mobile创建按钮、列表、弹出窗口和通知的教程。我们还将介绍一些提高用户友好性的提示，并分享如何更容易地定制应用程序设计。此外，还包括了在HTML5画布上绘制2D和3D对象的参考指南。
- en: An overview of widgets
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件概述
- en: 'Tizen Web UI Framework is based on several open source JavaScript libraries
    and frameworks: jQuery, jQuery Mobile, and Globalize.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen Web UI框架基于多个开源JavaScript库和框架：jQuery、jQuery Mobile和Globalize。
- en: Nowadays, jQuery Mobile is among the most popular frameworks to build web applications
    optimized for mobile devices, and it is not a surprise that Tizen relies on it.
    The framework is based on the popular JavaScript library, jQuery. jQuery Mobile
    is an open source project of jQuery foundation, and it is available under MIT
    license.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，jQuery Mobile是最受欢迎的移动设备优化Web应用框架之一，Tizen依赖于它也不足为奇。该框架基于流行的JavaScript库jQuery。jQuery
    Mobile是jQuery基金会的开源项目，且在MIT许可下发布。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The page structure of a Tizen web application built with Tizen Web UI Framework
    is similar to jQuery Mobile. A typical page contains:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Tizen Web UI框架构建的Tizen Web应用程序的页面结构与jQuery Mobile类似。一个典型页面包含：
- en: A header
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页头
- en: Content
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容
- en: A footer
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页脚
- en: Most of the widgets provided by Tizen UI Framework are based on jQuery Mobile.
    Several new widgets designed in a way that they match the Tizen native UI are
    also available.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen UI框架提供的大多数小部件基于jQuery Mobile。还有一些新设计的小部件，以与Tizen本地UI匹配的方式提供。
- en: 'The following table lists in alphabetical order all widgets provided by Tizen
    UI Framework as of the Tizen SDK 2.2.1:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格按字母顺序列出了截至Tizen SDK 2.2.1版本，Tizen UI框架提供的所有小部件：
- en: '| Widget | Brief description |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 小部件 | 简要描述 |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Autodividers | Automatically adds dividers between the items of a list. A
    similar option is available for jQuery Mobile lists. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 自动分隔符 | 在列表项之间自动添加分隔符。jQuery Mobile的列表也有类似的选项。 |'
- en: '| Button | A basic push button inherited from jQuery Mobile. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 按钮 | 基本的推送按钮，继承自jQuery Mobile。 |'
- en: '| Checkbox | Displays a standard checkbox. The user can choose whether to select
    it. Often, several checkboxes are grouped together, and the user can simultaneously
    select more than one option. This component also comes from jQuery Mobile. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 复选框 | 显示标准复选框，用户可以选择是否选中。通常，多个复选框会被分组在一起，用户可以同时选择多个选项。此组件也来自jQuery Mobile。
    |'
- en: '| Date, Time, or Date time picker | Widgets that simplify the input of date
    and/or time. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 日期、时间或日期时间选择器 | 简化日期和/或时间输入的小部件。 |'
- en: '| Extendable list | Provides a list view that can be extended. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 可扩展列表 | 提供可扩展的列表视图。 |'
- en: '| Fast scroll | Simplifies scrolling and makes it faster. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 快速滚动 | 简化滚动并加快滚动速度。 |'
- en: '| Flip toggle | This is similar to a radio button as it displays a switch with
    two options. For example, on/off. The same widget exists in jQuery Mobile. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 翻转开关 | 类似于单选按钮，显示一个带有两个选项的开关。例如：开/关。这个小部件在jQuery Mobile中也有类似的实现。 |'
- en: '| Footer | An essential widget inherited from jQuery Mobile. It is placed at
    the bottom of a page. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 底部 | 从jQuery Mobile继承的一个基本小部件。它位于页面的底部。 |'
- en: '| Gallery | A widget for displaying images. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 画廊 | 用于显示图片的小部件。 |'
- en: '| Gallery 3D | A widget that allows 3D arrangement for the displayed images.
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 3D画廊 | 一个允许显示图片进行3D排列的小部件。 |'
- en: '| Handler | Scrollbar optimized for touchscreen devices. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 处理程序 | 为触摸屏设备优化的滚动条。 |'
- en: '| Header | Another essential widget from jQuery Mobile. It is placed at the
    top of a page. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 头部 | jQuery Mobile中的另一个基本小部件。它位于页面的顶部。 |'
- en: '| HTML block | A widget that contains custom HTML code. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| HTML块 | 一个包含自定义HTML代码的小部件。 |'
- en: '| List | List view with multiple items, the appearance of which can be customized.
    This widget is the same as the one in jQuery Mobile. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 列表 | 具有多个项的列表视图，可以自定义外观。这个小部件与jQuery Mobile中的相同。 |'
- en: '| List divider | A special item of a list that acts a separator. It is convenient
    for grouping items, and it also comes from jQuery Mobile. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 列表分隔符 | 列表中的一个特殊项，充当分隔符。它方便进行分组，同时也来自jQuery Mobile。 |'
- en: '| Multimedia view | A widget that provides audio and video player. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 多媒体视图 | 一个提供音频和视频播放器的小部件。 |'
- en: '| Notification | An information widget that is displayed when events occur.
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 通知 | 当事件发生时显示的信息小部件。 |'
- en: '| Pop up | A customizable widget to show information in a separate window.
    It has the same methods and events as the jQuery Mobile widget with the same name.
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 弹出窗口 | 一个可自定义的小部件，用于在单独的窗口中显示信息。它具有与同名jQuery Mobile小部件相同的方法和事件。 |'
- en: '| Progress | Indicates that there is an operation in progress. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 进度 | 表示当前有一个操作正在进行。 |'
- en: '| Progress bar | Indicates the progress of an ongoing operation using percentages.
    This widget is taken from jQuery UI. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 进度条 | 使用百分比指示正在进行的操作的进度。这个小部件取自jQuery UI。 |'
- en: '| Search filter bar | A filter that simplifies searching in large text data.
    The same widgets exist in jQuery Mobile. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 搜索过滤栏 | 一个过滤器，简化了在大量文本数据中搜索的过程。这个小部件在jQuery Mobile中也存在。 |'
- en: '| Slider | Another widget from jQuery Mobile. It collects a value picked by
    the user in a range defined by the developer. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 滑块 | 另一个来自jQuery Mobile的小部件。它收集用户在开发者定义的范围内选择的值。 |'
- en: '| Split view | Splits the content into several different views on the screen.
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 拆分视图 | 将内容拆分成多个不同的视图显示在屏幕上。 |'
- en: '| Swipe | An advanced list widget whose items can be swiped and buttons can
    appear in the place of each item. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 滑动 | 一个高级列表小部件，列表项可以滑动，并且按钮可以出现在每个项的位置。 |'
- en: '| Tab bar | Bundles buttons into a group. It is recommended to be located within
    the header or the footer of a page. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 标签栏 | 将按钮捆绑成一个组。建议将其放置在页面的头部或底部。 |'
- en: '| Token text area | A sophisticated widget that converts text entered by the
    user into a button. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 令牌文本区域 | 一个复杂的小部件，将用户输入的文本转换为按钮。 |'
- en: '| Virtual grid | A widget optimized for loading and representing large data
    in a table. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 虚拟网格 | 一个优化加载和显示大量数据的表格小部件。 |'
- en: '| Virtual list | A widget optimized to load and represent large data in a list.
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 虚拟列表 | 一个优化加载和显示大量数据的列表小部件。 |'
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Use the following HTML5 source code to create a page that contains a header
    with a title and a button, content with a list, and a footer:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下HTML5源代码创建一个页面，页面包含一个带有标题和按钮的头部，一个包含列表的内容和一个底部：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The HTML5 code snippet demonstrates the usage of Tizen UI Web Framework based
    on jQuery Mobile.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5代码示例演示了基于jQuery Mobile的Tizen UI Web框架的使用方法。
- en: A page is created using a `div` tag with the attribute `data-role` and value
    page. In HTML, tags with the `div` keyword are used to define a section of the
    document. The header and the footer are created in a similar way. The header contains
    a heading marked with `h1` and a button whose icon is set at the attribute `data-icon`.
    The value of `data-icon` should match an option from the available icon set provided
    by jQuery Mobile. The example uses `plus`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个页面是通过带有`data-role`属性和值“page”的`div`标签创建的。在HTML中，带有`div`关键字的标签用于定义文档的一个部分。头部和底部是以类似的方式创建的。头部包含一个标记为`h1`的标题和一个按钮，按钮的图标通过`data-icon`属性设置。`data-icon`的值应该与jQuery
    Mobile提供的可用图标集中的选项匹配。此示例使用的是`plus`。
- en: The main components of the page are situated in a `div` element between the
    header and the footer, and this section is marked as `data-role="content"`. The
    examples in the previous section of this recipe show the usage of the list and
    list divider widgets.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 页面中的主要组件位于一个`div`元素中，该元素位于页头和页脚之间，并且该部分标记为`data-role="content"`。本食谱上一节的示例展示了列表和列表分隔符小部件的用法。
- en: See also
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: Please refer to the recipe *Tizen web app programming* from [Chapter 2](ch02.html
    "Chapter 2. Introduction to the Tizen Ecosystem"), *Introduction to the Tizen
    Ecosystem*, to create a web application. Replace the body of `index.html` with
    the preceding example to try it out.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[Tizen Web应用编程](ch02.html "第2章 Tizen生态系统介绍")的食谱，*Tizen生态系统介绍*，来创建一个Web应用程序。用前面的示例替换`index.html`的主体部分来试试。
- en: More information about the widgets in Tizen UI Framework is available in the
    official documentation at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_reference.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_reference.htm).
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Tizen UI框架中小部件的更多信息，请参考官方文档：[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_reference.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_reference.htm)。
- en: Creating buttons
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建按钮
- en: This recipe demonstrates how to create a Tizen web application with buttons
    and how to handle an event if the user clicks on any of these buttons.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何创建一个Tizen Web应用程序并创建按钮，如何处理用户点击这些按钮时的事件。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Buttons in the Tizen UI Web Framework can be created using any of the following
    three options:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen UI Web框架中的按钮可以通过以下三种方式中的任何一种来创建：
- en: Using HTML5 elements, such as `anchor` or `div`, with the attribute `data-role="button"`
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML5元素，如`anchor`或`div`，并添加属性`data-role="button"`
- en: Using the `button` element of HTML5
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML5的`button`元素
- en: Using the `input` element of HTML5
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML5的`input`元素
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Tizen UI Web Framework is based on jQuery Mobile, and similar rules are applied
    for buttons. For details visit [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_button.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_button.htm).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen UI Web框架基于jQuery Mobile，类似的规则也适用于按钮。详细信息请访问[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_button.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_button.htm)。
- en: Feel free to create a button with the approach that suits you best depending
    on the situation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 根据情况，您可以自由选择最适合您的方式来创建按钮。
- en: Now we are ready to create buttons, so let's proceed with the development of
    a whole application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好创建按钮了，让我们继续开发整个应用程序。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Launch the Tizen IDE, and start a new Tizen web project.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Tizen IDE，并启动一个新的Tizen Web项目。
- en: Create a single-page application using Tizen Web UI Framework.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Tizen Web UI框架创建单页面应用程序。
- en: 'Open `index.html`, and replace the content of the `body` element with the following
    source code:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.html`，并用以下源代码替换`body`元素的内容：
- en: '[PRE1]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open `js/main.js`, and append the following source code to the JavaScript anonymous
    (lambda) function, which is assigned to the variable `init`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`js/main.js`，并将以下源代码附加到分配给变量`init`的JavaScript匿名（lambda）函数中：
- en: '[PRE2]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save all changes and run the application on a real device, emulator, or simulator.
    If everything works correctly when you click a button, the text of the paragraph
    with the `id` label will be changed.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，并在真实设备、模拟器或仿真器上运行该应用程序。如果一切正常，当点击按钮时，带有`id`标签的段落文本将会被更改。
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The HTML5 source code that was inserted in `index.html` creates a page with
    header, footer, single paragraph with `id` label, and three buttons with the IDs
    `btn1`, `btn2`, and `bnt3`. Each button is created using one of these different
    options provided by the framework, but visually all of them look the same.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 插入到`index.html`中的HTML5源代码创建了一个包含页头、页脚、带有`id`标签的单一段落和三个ID为`btn1`、`btn2`和`btn3`的按钮的页面。每个按钮都使用框架提供的不同选项之一创建，但视觉上它们看起来相同。
- en: 'The source code inserted in the JavaScript file is based on the jQuery library.
    The first line binds the click event of the button with the ID `btn1` to a function
    that handles it. Have a look at the following line of code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 插入到JavaScript文件中的源代码基于jQuery库。第一行将ID为`btn1`的按钮的点击事件绑定到一个处理该事件的函数上。请看以下代码行：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The dollar sign is an alias of `jQuery()`. This function returns a collection
    of elements from the DOM of the HTML based on the provided selector as an argument.
    The code snippet from this recipe uses ID selectors. jQuery is famous for its
    powerful tools to access DOM elements. The full list of supported selectors is
    available at [http://api.jquery.com/category/selectors/](http://api.jquery.com/category/selectors/).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 美元符号是`jQuery()`的别名。这个函数根据提供的选择器返回HTML文档中元素的集合。此教程中的代码片段使用了ID选择器。jQuery以其强大的DOM元素访问工具而著名。支持的选择器的完整列表可以在[http://api.jquery.com/category/selectors/](http://api.jquery.com/category/selectors/)上找到。
- en: 'The next line changes the text of the paragraph label using the method `text()`,
    which is provided by jQuery. Have a look at the following line of code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行使用jQuery提供的`text()`方法来更改段落标签的文本。请看下面的代码行：
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that according to the documentation of jQuery Mobile
    1.3.2, which is included in Tizen SDK 2.2.1, `$(document).bind('pageinit')` must
    be used instead of `$(document).ready()`. Please note that the event `pageinit`
    has been replaced with `pagecreate` in jQuery Mobile 1.4.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，根据包含在Tizen SDK 2.2.1中的jQuery Mobile 1.3.2的文档，必须使用`$(document).bind('pageinit')`而不是`$(document).ready()`。请注意，在jQuery
    Mobile 1.4中，`pageinit`事件已被`pagecreate`替代。
- en: 'If the handlers are not bound to the buttons at an appropriate place, most
    probably they will not work. Pay attention to the fact that they must be implemented
    as anonymous functions that are assigned to the variable `init`. After that, `init`
    is bound to the `pageinit` event, so the anonymous function is executed on page
    initialization. Have a look at the following line of code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事件处理程序没有绑定到按钮的适当位置，它们很可能无法正常工作。请注意，它们必须作为匿名函数实现，并分配给变量`init`。之后，`init`会绑定到`pageinit`事件，因此匿名函数将在页面初始化时执行。请看下面的代码行：
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Anonymous functions are first-class citizens of JavaScript. They are most commonly
    used as callbacks—functions that are executed asynchronously when an event occurs
    or at a later time. Although this usage of anonymous functions is often very convenient,
    you should pay attention to it; otherwise, you may end up at the so-called callback
    hell. Good suggestions on how to write and maintain easy-to-read JavaScript code
    with callbacks can be found at [http://callbackhell.com/](http://callbackhell.com/).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名函数是JavaScript的第一类公民。它们最常用于回调函数——即在事件发生或稍后某个时间异步执行的函数。虽然这种使用匿名函数通常非常方便，但你需要注意它；否则，可能会陷入所谓的回调地狱。关于如何编写和维护易于阅读的JavaScript回调函数的良好建议，可以参考[http://callbackhell.com/](http://callbackhell.com/)。
- en: See also
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The project of the example application in this recipe is provided is present
    in the source code of the book. Please explore its source code if you have any
    trouble implementing the example on your own.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本教程中示例应用程序的项目文件已经包含在书籍的源代码中。如果你在实现示例时遇到困难，请查阅其源代码。
- en: Creating list views
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建列表视图
- en: An old joke popular among developers says that there is no good mobile application
    without a list. This widget is very convenient for storing large amount of data,
    especially on devices with relatively small screens, such as smartphones or smart
    watches.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者中有一个流行的老笑话，认为没有列表的移动应用程序就不算好。这个控件对于存储大量数据非常方便，尤其是在屏幕较小的设备上，如智能手机或智能手表。
- en: This recipe explains how to create a multipage application with a list view
    that includes several items, an item divider, and a search filter.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程解释了如何创建一个包含多个项目、项目分隔符和搜索过滤器的列表视图的多页面应用程序。
- en: Although multipage application might sound fancy, in fact, it is just an application
    that contains two or more Tizen UI Web Framework pages, and it is very easy to
    create such an application.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管多页面应用程序听起来很炫，但实际上它只是包含两个或更多Tizen UI Web框架页面的应用程序，而且创建这样的应用程序非常简单。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Lists in Tizen UI Web Framework are created using HTML5 elements for ordered
    and unordered lists, `ol` and `ul`, combined with `data-role="listview"`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen UI Web框架中的列表使用HTML5元素创建，分别是有序列表`ol`和无序列表`ul`，并结合`data-role="listview"`。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到……
- en: Create a new project that uses the **Multi Page Application** template of **Tizen
    Web UI Framework**.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的项目，使用**Tizen Web UI Framework**的**多页面应用程序**模板。
- en: Create a new folder, `images`, from the **Project Explorer**.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目资源管理器**中创建一个新的文件夹`images`。
- en: Create a simple icon using your drawing application, and save it as `smile``.``png`
    inside the `images` folder.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的绘图应用程序创建一个简单的图标，并将其保存在 `images` 文件夹中，文件名为 `smile``.``png`。
- en: 'Open `index.html` in the Tizen IDE, and replace the content of the `body` element
    with the following source code:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Tizen IDE 中的 `index.html`，并用以下源代码替换 `body` 元素的内容：
- en: '[PRE6]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save all changes, and run the application on an emulator or a device. The application
    should look like the following:![How to do it...](img/1908OS_03_01.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，并在模拟器或设备上运行应用。应用应显示如下：![如何实现...](img/1908OS_03_01.jpg)
- en: List views
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列表视图
- en: How it works…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The source code of the body element in the preceding example application contains
    only HTML5 and CSS.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 前面示例应用中的 `body` 元素源代码只包含 HTML5 和 CSS。
- en: Two pages are created in two different `div` elements, and each of them contains
    `data-role="page"`. Both pages contain a header, footer, and list.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 两个页面被创建在两个不同的 `div` 元素中，每个页面都包含 `data-role="page"`。两个页面都包含页头、页脚和列表。
- en: 'The `id` label of the first page is `pageMain`. Each item of the list is created
    using the `li` element. The list contains the following items:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个页面的 `id` 标签为 `pageMain`。列表中的每个项是通过 `li` 元素创建的。该列表包含以下项：
- en: 'A list divider created with the value `list-divider` of the attribute `data-role`.
    Have a look at the following line of code:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用属性 `data-role` 的值为 `list-divider` 创建的列表分隔符。请查看以下代码行：
- en: '[PRE7]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A simple item. Have a look at the following line of code:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简单的项。请查看以下代码行：
- en: '[PRE8]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'An item with a button on the right-hand side of the text. The button is created
    using a `span` element. It has a default style and a right arrow for an icon set
    through the attribute `data-icon`. Have a look at the following code snippet:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个在文本右侧带按钮的项。按钮是通过 `span` 元素创建的，具有默认样式，并通过属性 `data-icon` 设置了右箭头图标。请查看以下代码片段：
- en: '[PRE9]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A two-line item with an image (`img`) on the left-hand side and a button on
    the right-hand side. The style of the button is `circle`, and its icon is `info`.
    The CSS class `ui-li-as-multiline` is used to enable multiple lines, and the class
    `ui-li-text-sub` marks its second line:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含左侧图片（`img`）和右侧按钮的两行项。按钮的样式为 `circle`，图标为 `info`。CSS 类 `ui-li-as-multiline`
    用于启用多行显示，`ui-li-text-sub` 类则标记第二行：
- en: '[PRE10]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The second page displays a simple read-only list. It has `id` `pageInfo`. The
    back button that is displayed at the footer is actually set at the `div` element
    of the page using `data-add-back-btn="true"`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 第二页显示了一个简单的只读列表，`id` 为 `pageInfo`。显示在页脚的返回按钮实际上是通过 `data-add-back-btn="true"`
    设置在页面的 `div` 元素上的：
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Please check the Tizen documentation to see the full list of supported styles
    for list widgets at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_list.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_list.htm).
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请查看 Tizen 文档，查看支持的列表小部件样式的完整列表，网址为[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_list.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_list.htm)。
- en: Showing pop ups
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示弹出窗口
- en: Do you remember the ugly JavaScript built-in functions `alert()` and `confirm()`?
    Both are useful, but their design is stuck in the 1990s, and alternatives are
    needed for modern mobile applications.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得那种丑陋的 JavaScript 内建函数 `alert()` 和 `confirm()` 吗？虽然它们很有用，但它们的设计停留在 1990 年代，需要现代移动应用的替代品。
- en: Tizen Web UI Framework offers pop ups with a much better look and a customizable
    design that can fit the needs of your application. In this recipe, we will create
    a single-page application with a button that opens a pop up.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen Web UI 框架提供了外观更好、设计可定制的弹出窗口，能够满足您的应用需求。在本教程中，我们将创建一个包含按钮的单页面应用，按钮点击后会弹出窗口。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Launch the Tizen IDE, and create a new Tizen Web Project.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Tizen IDE，创建一个新的 Tizen Web 项目。
- en: Create a single-page application using Tizen Web UI Framework.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Tizen Web UI 框架创建一个单页面应用。
- en: 'Open `index.html`, and replace the content of the `body` element with the following
    source code:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `index.html`，并用以下源代码替换 `body` 元素的内容：
- en: '[PRE12]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open `js/main.js`, and insert the following source code into the anonymous
    JavaScript function, which is assigned to variable `init`. Have a look at the
    following code:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `js/main.js`，将以下源代码插入到分配给变量 `init` 的匿名 JavaScript 函数中。请查看以下代码：
- en: '[PRE13]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Run the application, and have fun with the old but gold binary joke.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用，享受这段旧但经典的二进制笑话。
- en: How it works…
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The HTML5 that was appended in the third step to the `body` element of `index.html`
    contains a page and a pop up with two buttons. The pop up is represented by a
    `div` element with `id popupConfirm` and `data-role="popup"`. The CSS class `center_title_2btn`
    defines its type. The other available types are as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步附加到`index.html`的 HTML5 代码包含一个页面和一个带有两个按钮的弹出窗口。该弹出窗口由具有`id popupConfirm`和`data-role="popup"`的`div`元素表示。CSS
    类`center_title_2btn`定义了它的类型。其他可用的类型如下：
- en: '`center_info`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_info`'
- en: '`center_title`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_title`'
- en: '`center_basic_1btn`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_basic_1btn`'
- en: '`center_title_1btn`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_title_1btn`'
- en: '`center_title_2btn`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_title_2btn`'
- en: '`center_title_3btn`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_title_3btn`'
- en: '`center_button_vertical`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_button_vertical`'
- en: '`center_checkbox`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_checkbox`'
- en: '`center_liststyle_1btn`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_liststyle_1btn`'
- en: '`center_liststyle_2btn`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_liststyle_2btn`'
- en: '`center_liststyle_3btn`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_liststyle_3btn`'
- en: Note
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The buttons are arranged horizontally next to each other for all types with
    more than one button, except for `center_button_vertical`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`center_button_vertical`外，所有有多个按钮的类型中，按钮都会水平排列在一起。
- en: The JavaScript appended to `main.js` binds handlers to the buttons of the pop
    up. The text content of the paragraph with the `id` label is changed depending
    on the user's choice.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 附加到`main.js`中的 JavaScript 将处理程序绑定到弹出窗口的按钮上。根据用户的选择，具有`id`标签的段落文本内容会发生变化。
- en: Tizen Web UI Framework and jQuery Mobile do not support the chaining of pop
    ups. This means that it is not possible to invoke a pop up from another pop up.
    From a designer's point of view, it is also not recommended to use the chaining
    of pop ups, as it has negative impact on the user experience. Anyway, if you insist
    on it, a workaround is available; open a pop up with a minimal timeout after closing
    the first pop up by implementing `setTimeout()` after the `popupafterclose` event.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen Web UI 框架和 jQuery Mobile 不支持弹出窗口的链式调用。这意味着无法从一个弹出窗口调用另一个弹出窗口。从设计角度来看，也不建议使用弹出窗口链式调用，因为它会对用户体验产生负面影响。不过，如果你坚持使用，可以通过在`popupafterclose`事件之后实现`setTimeout()`，在关闭第一个弹出窗口后，使用最短的超时来打开下一个弹出窗口。
- en: See also
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Please refer to the Tizen Web UI and jQuery Mobile documentation for a full
    list of all events and methods as well as details about the pop up types at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_popup.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_popup.htm).
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 Tizen Web UI 和 jQuery Mobile 文档，查看所有事件和方法的完整列表，以及有关弹出窗口类型的详细信息，网址：[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_popup.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_popup.htm)。
- en: Using the Tizen Notification API
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tizen 通知 API
- en: The Notification API allows developers to display messages to users outside
    their applications. Notifications are useful when the user has to be informed
    about events or the status of an ongoing process. They are displayed in one place,
    which is shared between notifications from each application and the system.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 通知 API 允许开发者向用户显示应用外的消息。当用户需要了解事件或正在进行的过程的状态时，通知就很有用。它们显示在一个共享的位置，供各个应用程序和系统的通知使用。
- en: Follow the tutorial in this recipe to learn how to use the Tizen Notification
    API to display `SIMPLE` and `PROGRESS` notifications in Tizen.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本教程中的步骤，学习如何使用 Tizen 通知 API 在 Tizen 中显示`SIMPLE`和`PROGRESS`通知。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Several different types of notifications exist in Tizen:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen 中存在几种不同类型的通知：
- en: '`SIMPLE`: This is a `basic text` notification'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIMPLE`：这是一种`基本文本`通知'
- en: '`THUMBNAIL`: This notification includes both text and thumbnails'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THUMBNAIL`：该通知包含文本和缩略图'
- en: '`ONGOING`: This is a notification that informs the user whether the application
    is running'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ONGOING`：这是一种通知，告知用户应用程序是否正在运行'
- en: '`PROGRESS`: This provides information about the current status of a job and
    its progress'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PROGRESS`：这提供了关于任务当前状态及其进度的信息'
- en: The first two types of notifications can be removed by the user. The other types
    cannot be removed by the user, and the application should take care of their removal.
    The notification API is quite flexible, and as a developer, you can choose the
    types that exactly match the needs of your application.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 前两种类型的通知可以由用户移除。其他类型的通知则无法由用户移除，应用程序应负责移除这些通知。通知 API 非常灵活，作为开发者，你可以选择完全符合应用需求的通知类型。
- en: How to do it...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Launch Tizen IDE, and start a new Tizen Web Project.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Tizen IDE，创建一个新的 Tizen Web 项目。
- en: Create a single-page application using Tizen Web UI Framework.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Tizen Web UI框架创建单页应用程序。
- en: 'Insert the following HTML code that creates two buttons inside the body of
    `index.html`:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML代码插入到`index.html`的body中，以创建两个按钮：
- en: '[PRE14]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Paste the following JavaScript function inside `main.js`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下JavaScript函数粘贴到`main.js`中：
- en: '[PRE15]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This function as well as the other functions in this recipe use the try-catch
    block to handle exceptions, such as `WebAPIException`. They are thrown by the
    methods of the Notification API if an error occurs.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数以及此处其他函数使用了try-catch块来处理异常，比如`WebAPIException`。如果发生错误，Notification API的方法会抛出这些异常。
- en: 'The `try` statement defines a block in which the source code should be tested
    for any errors. The keyword `throw` must be used to raise an exception. The exception
    terminates the execution of the source code at the `try` block, and the control
    is passed to the `catch` block. Rules and commands for handling intercepted exceptions
    are defined in it:'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`try`语句定义了一个代码块，在该块中应测试源代码是否有错误。必须使用关键字`throw`来抛出异常。异常终止了`try`块中源代码的执行，控制权传递给`catch`块。处理被拦截的异常的规则和命令在其中定义：'
- en: '[PRE16]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The second argument of the function `setTimeout()` is the delay in milliseconds.
    Six thousand (6,000) milliseconds is equal to 6 seconds and 10,000 milliseconds
    is equal to 10 seconds. Have a look at the following code:'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数`setTimeout()`的第二个参数是延迟时间，单位为毫秒。6000毫秒等于6秒，10000毫秒等于10秒。请看以下代码：
- en: '[PRE17]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Bind the click events of both buttons to the JavaScript functions from the
    previous step by inserting the following code snippet into the anonymous JavaScript
    function that is assigned to variable `init`:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将以下代码片段插入分配给变量`init`的匿名JavaScript函数中，绑定两个按钮的点击事件到上一阶段的JavaScript函数：
- en: '[PRE18]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add notification privileges to `config.xml`:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将通知权限添加到`config.xml`：
- en: '[PRE19]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Save all modified files, and run the application.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有修改过的文件，并运行应用程序。
- en: How it works…
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The application contains a single application and two buttons. The click event
    of the button with ID `btnSimpleNotification` is bound to JavaScript function
    `postSimpleNotification()`. When this function is executed, a simple notification
    with the title **Notification** and text **Hello World** is displayed on the screen
    as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序包含一个单一应用和两个按钮。ID为`btnSimpleNotification`的按钮的点击事件与JavaScript函数`postSimpleNotification()`绑定。当执行该函数时，屏幕上将显示一个标题为**Notification**，文本为**Hello
    World**的简单通知，如下所示：
- en: '![How it works…](img/1908OS_03_02.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/1908OS_03_02.jpg)'
- en: Simple notification
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 简单通知
- en: 'A click on the button with the ID `btnProgressNotification` leads to the execution
    of the function `runProgressDemo()`. A progress notification with the title **Progress**
    and text **Please wait...** is posted. After 6 seconds, it is updated, and the
    text is changed to **Almost done!** The notification is removed 10 seconds after
    its occurrence. The function `updateProgressNotification()` is responsible for
    the update, and the function `removeProgressNotification()` removes the notification.
    The delay of the execution of both functions is achieved using the JavaScript
    built-in function `setTimeout()`. You can explore the implementation of all functions
    added to `main.js` to understand how the Notification API is used. Have a look
    at the following screenshot:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 点击ID为`btnProgressNotification`的按钮将执行函数`runProgressDemo()`。一个标题为**Progress**，文本为**Please
    wait...**的进度通知被发布。6秒后，它将被更新，文本更改为**Almost done!**。该通知在发生后10秒被移除。函数`updateProgressNotification()`负责更新，函数`removeProgressNotification()`负责移除通知。这两个函数的执行延迟通过使用JavaScript内置函数`setTimeout()`来实现。你可以查看添加到`main.js`的所有函数实现，以了解Notification
    API的使用方式。请看以下截图：
- en: '![How it works…](img/1908OS_03_03.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/1908OS_03_03.jpg)'
- en: The Progress notification before and after the update
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 更新前后的进度通知
- en: Tip
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Optionally, an icon and/or a sound can be added by specifying the path to the
    image and/or a sound file in the JavaScript object that is created for the notification.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，通过在为通知创建的JavaScript对象中指定图像和/或音频文件的路径，可以添加图标和/或声音。
- en: It is mandatory to add privileges as described in step 6; otherwise, the application
    will not work properly, because it will not be able to post any notifications.
    Use a device or Emulator to test and debug applications which post notifications.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 必须按照第6步所述添加权限，否则应用程序将无法正常工作，因为它将无法发布任何通知。使用设备或模拟器来测试和调试发布通知的应用程序。
- en: See also
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: If you are interested in posting push notifications to the Tizen device from
    a server, please take a look at the recipe *Receiving push notifications* in [Chapter
    8](ch08.html "Chapter 8. Communication"), *Communication*.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有兴趣从服务器向Tizen设备推送通知，请查看[第8章](ch08.html "第8章 通信")中的食谱*接收推送通知*，该章节属于*通信*部分。
- en: To explore the full capabilities of the Notification API, please visit [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/notification.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/notification.html).
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要探索通知API的全部功能，请访问[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/notification.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/notification.html)。
- en: Customizing the look and feel
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义外观和样式
- en: Have you ever been in a situation when the customer changes the requirements
    in the middle of a project, and you have to modify the whole design of the application?
    Or have you been in a situation when you have to deliver the same application
    to different customers with different themes and images?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经遇到过这样的情况：客户在项目进行中间改变了需求，你不得不修改整个应用程序的设计？或者，你是否曾经遇到过需要将相同的应用程序交付给不同的客户，但他们有不同的主题和图片的情况？
- en: CSS is the language used to describe the look and format of web applications.
    Every web developer should be familiar with it. Unfortunately the maintenance
    and the modification of complex CSS files might be difficult. You can always use
    CSS in Tizen web applications, but in the case described, the most painless solution
    is to rely on a CSS preprocessor, such as **LESS** or **Sass**.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: CSS是用于描述Web应用程序外观和格式的语言。每个Web开发人员都应该熟悉它。不幸的是，复杂的CSS文件的维护和修改可能会很困难。你总是可以在Tizen
    Web应用中使用CSS，但在描述的这种情况中，最简单的解决方案是依赖于CSS预处理器，比如**LESS**或**Sass**。
- en: This recipe demonstrates the basic usage of LESS for a Tizen web application.
    I hope that based on the experienced gained here, you should be able to generate
    complex CSS through LESS.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程演示了LESS在Tizen Web应用中的基本用法。我希望通过这里获得的经验，你应该能够通过LESS生成复杂的CSS。
- en: Getting ready
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: LESS is an open source dynamic language, which brings variables, mixins, operations,
    and functions to CSS. LESS can be executed on the client side through JavaScript
    or on a server.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: LESS是一种开源的动态语言，它为CSS带来了变量、混合、操作和函数。LESS可以通过JavaScript在客户端执行，也可以在服务器上执行。
- en: Note
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Valid CSS code is valid LESS code as well.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的CSS代码也是有效的LESS代码。
- en: How to do it...
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Perform the following steps to generate CSS from LESS online. This simple example
    changes the fonts and the colors of text headings:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤从LESS在线生成CSS。这个简单的示例更改了文本标题的字体和颜色：
- en: Load the website [http://less2css.org/](http://less2css.org/) using your favorite
    web browser.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的网页浏览器加载网站[http://less2css.org/](http://less2css.org/)。
- en: 'Insert the LESS source code that customizes the colors and the fonts of the
    headings:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入自定义颜色和字体的LESS源代码：
- en: '[PRE20]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Please feel free to change the colors by modifying the values of the LESS variables.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请随意通过修改LESS变量的值来更改颜色。
- en: 'Copy the generated CSS to the clipboard. The CSS should be similar to the following
    example:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的CSS复制到剪贴板。CSS应该类似于以下示例：
- en: '[PRE21]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Select a project in the **Project Explorer** view of the Tizen IDE, right-click
    on it, and navigate to **New** | **CSS File**. Follow the onscreen instructions
    to complete the creation of the file with the name `myHeadings.css`.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Tizen IDE的**项目资源管理器**视图中选择一个项目，右键单击它，然后选择**新建** | **CSS文件**。按照屏幕上的指示完成文件的创建，文件名为`myHeadings.css`。
- en: Paste the copied content into the newly created CSS file, and save it.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将复制的内容粘贴到新创建的CSS文件中，并保存。
- en: 'Add the following HTML line to `index.html` to load the CSS file as an external
    style sheet into the application:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.html`中添加以下HTML代码，将CSS文件作为外部样式表加载到应用程序中：
- en: '[PRE22]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The advantage in this example is that only the value of the variable should
    be modified to change the color of all headings. The real power of LESS can be
    seen in large projects that consist of a large number of style sheets.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的优势在于，只需要修改变量的值，就可以改变所有标题的颜色。LESS的真正威力可以在包含大量样式表的大型项目中体现出来。
- en: How it works…
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: LESS is compiled to CSS through an online tool powered by the open source project
    less-preview. The source code of the project is available at GitHub under MIT
    license, and its maintainer is Brian Frichette. For details, please visit [https://github.com/brian-frichette/less-preview/](https://github.com/brian-frichette/less-preview/).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: LESS 通过由开源项目 less-preview 提供的在线工具编译为 CSS。该项目的源代码可以在 GitHub 上找到，并且使用 MIT 许可证，维护者是
    Brian Frichette。有关详细信息，请访问 [https://github.com/brian-frichette/less-preview/](https://github.com/brian-frichette/less-preview/)。
- en: The LESS code snippet in the preceding example is very simple. On the first
    three lines are declared and initialized LESS variables. According to the rules,
    a variable starts with the prefix `@` followed by its name. A colon is used to
    initialize its value.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例中的 LESS 代码片段非常简单。前面三行声明并初始化了 LESS 变量。根据规则，变量以前缀 `@` 开头，后跟变量名。使用冒号来初始化其值。
- en: 'The font family is set at the LESS variable `@font`, and its value is set at
    the CSS grouping for `h1`, `h2`, and `h3`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 字体系列通过 LESS 变量 `@font` 设置，其值在 `h1`、`h2` 和 `h3` 的 CSS 分组中设置：
- en: '[PRE23]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The other LESS variables `@color1` and `@color2` are used to set the font and
    the background colors of the headings.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 其他 LESS 变量 `@color1` 和 `@color2` 用于设置标题的字体和背景颜色。
- en: The output of the successful execution of the LESS source code is valid CSS.
    When the CSS is ready, it must be loaded in the Tizen web application as described
    in steps 3 through 6.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行 LESS 源代码的输出是有效的 CSS。当 CSS 准备好后，必须按照步骤 3 至 6 中的说明将其加载到 Tizen Web 应用中。
- en: See also
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'If you are curious to learn more about CSS preprocessors, you can extend your
    knowledge with a couple of books written by Alex Libby: *Instant SASS CSS How-to*
    and *Instant LESS CSS Preprocessor How-to*.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解更多关于 CSS 预处理器的知识，可以通过 Alex Libby 编写的几本书来扩展你的知识：*Instant SASS CSS How-to*
    和 *Instant LESS CSS Preprocessor How-to*。
- en: Drawing and writing text on a canvas
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 canvas 上绘制和写入文本
- en: One of the main advantages of HTML5 is that it can be used as a replacement
    of Adobe Flash for drawing. The HTML5 canvas element opens new horizons to create
    cutting-edge animations inside web and mobile applications or games.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 的主要优势之一是它可以替代 Adobe Flash 来进行绘图。HTML5 canvas 元素为在 Web 和移动应用程序或游戏中创建前沿动画开辟了新的视野。
- en: This recipe demonstrates drawing and writing text on the HTML5 canvas with JavaScript
    in a Tizen web application. Follow the steps given in this recipe to create a
    single page Tizen web application with two buttons. The first button writes the
    text **Hello Tizen** and draws a blue square and an orange circle. The second
    button clears the screen.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了在 Tizen Web 应用中使用 JavaScript 在 HTML5 canvas 上绘制和写入文本。按照本教程中的步骤创建一个包含两个按钮的单页面
    Tizen Web 应用。第一个按钮写入文本 **Hello Tizen**，并绘制一个蓝色方块和一个橙色圆圈。第二个按钮清除屏幕。
- en: '![Drawing and writing text on a canvas](img/1908OS_03_04.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![在 canvas 上绘制和写入文本](img/1908OS_03_04.jpg)'
- en: Drawing on a canvas in the Tizen web application
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Tizen Web 应用中绘制图形
- en: Getting ready
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Canvas is a new element that was introduced in HTML5\. The attributes `id`,
    `width`, and `height` of the canvas can be specified. By default, the canvas is
    empty and JavaScript should be used to create and control its content.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Canvas 是 HTML5 中引入的新元素。可以指定 canvas 的属性 `id`、`width` 和 `height`。默认情况下，canvas
    是空的，应该使用 JavaScript 来创建和控制其内容。
- en: How to do it...
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Launch the Tizen IDE, and start a new **Tizen Web Project**.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Tizen IDE，并创建一个新的 **Tizen Web 项目**。
- en: Create a **Single Page Application** using Tizen Web UI Framework.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Tizen Web UI 框架创建 **单页面应用程序**。
- en: Right-click on the project in the Project Explorer view, and select **New**
    | **Other** | **JavaScript** | **JavaScript Source File** to create the file `draw.js`.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资源管理器视图中右击项目，选择 **新建** | **其他** | **JavaScript** | **JavaScript 源文件** 来创建
    `draw.js` 文件。
- en: 'Save the following JavaScript code to draw on a canvas to `draw.js`:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 JavaScript 代码保存到 `draw.js` 文件中：
- en: '[PRE24]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `font` property in the HTML5 canvas supports the same syntax as the CSS
    fonts. Tizen offers a dedicated font family, which is called TizenSans, but in
    this application, the popular Arial font is used. For more information about the
    typography guidelines in Tizen, please visit [https://developer.tizen.org/documentation/ux-guide/visual-style/typography](https://developer.tizen.org/documentation/ux-guide/visual-style/typography).
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HTML5 canvas 中的 `font` 属性支持与 CSS 字体相同的语法。Tizen 提供了一种专用的字体系列，称为 TizenSans，但在此应用程序中使用了流行的
    Arial 字体。有关 Tizen 排版指南的更多信息，请访问 [https://developer.tizen.org/documentation/ux-guide/visual-style/typography](https://developer.tizen.org/documentation/ux-guide/visual-style/typography)。
- en: '[PRE25]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Include the new JavaScript file before loading `main.js` in `index.html`. Have
    a look at the following code:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.html`中，在加载`main.js`之前包含新的 JavaScript 文件。请查看以下代码：
- en: '[PRE26]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Insert the following HTML inside the body of `index.html` to create a canvas
    and a couple of buttons:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `index.html` 的 body 部分插入以下 HTML 来创建画布和几个按钮：
- en: '[PRE27]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Handle button clicks by adding the following source code to the anonymous JavaScript
    function, which is assigned to the variable `init` in `main.js`:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向分配给`main.js`中`init`变量的匿名 JavaScript 函数添加以下源代码来处理按钮点击事件：
- en: '[PRE28]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Save all files, and run the application on a device or Emulator.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有文件，并在设备或模拟器上运行应用程序。
- en: How it works…
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: 'A canvas with the ID `pic` and width and height equal to 200 px is created
    in `index.html` as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`中创建了一个 ID 为`pic`、宽度和高度均为 200 px 的画布，代码如下：
- en: '[PRE29]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The click events of buttons with IDs `btnDraw` and `bntClear` invoke the JavaScript
    functions `draw()` and `clear()`. Both functions are implemented in the file `draw.js`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: ID 为`btnDraw`和`bntClear`的按钮的点击事件分别调用 JavaScript 函数`draw()`和`clear()`。这两个函数都在文件`draw.js`中实现。
- en: Note
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the `head` of the `index.html` file, `draw.js` must be loaded before the
    file `main.js`; otherwise, the application will not work properly.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`文件的`head`部分，必须在加载`main.js`之前加载`draw.js`，否则应用程序将无法正常工作。
- en: The JavaScript function `draw()` writes text on the screen using `fillText()`
    on the canvas object. After that, it invokes the canvas object's function `fillRect()`
    and draws a blue square whose sides are 25 px. Finally, the functions `arc()`
    and `fill()` are executed to draw an orange circle with radius 25 px.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 函数`draw()`使用画布对象上的`fillText()`在屏幕上写入文本。之后，它调用画布对象的函数`fillRect()`并绘制一个边长为
    25 px 的蓝色正方形。最后，执行函数`arc()`和`fill()`来绘制一个半径为 25 px 的橙色圆圈。
- en: Tip
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The coordinates (0, 0) correspond to the upper-left corner of the drawing area.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 坐标 (0, 0) 对应绘图区域的左上角。
- en: See also
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: All tricks to draw on the HTML5 canvas should be valid for a Tizen web application.
    More HTML5 examples about drawings and animations can be found in Eric Rowell's
    book *HTML5 Canvas Cookbook*.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有在 HTML5 画布上绘制的技巧都应该适用于 Tizen Web 应用程序。更多关于绘图和动画的 HTML5 示例可以在 Eric Rowell 的书《*HTML5
    Canvas Cookbook*》中找到。
- en: Creating 3D objects with WebGL
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 WebGL 创建 3D 对象
- en: Twenty years ago, 3D graphics and OpenGL were restricted primarily to CAD software
    and games. Back then, websites were very, very simple. The times have changed
    and Web technologies have evolved dramatically. Nowadays, thanks to WebGL, it
    is possible to create sophisticated 3D cross-platform animations and games directly
    inside the HTML5 canvas through JavaScript APIs.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 二十年前，3D 图形和 OpenGL 主要仅限于 CAD 软件和游戏。那时的网站非常简单。时代变了，Web 技术有了显著发展。如今，得益于 WebGL，可以通过
    JavaScript API 在 HTML5 画布中直接创建复杂的跨平台 3D 动画和游戏。
- en: The story of WebGL started in 2006, but it was officially released for the first
    time in 2011\. Today, a nonprofit organization called Khronos Group takes care
    of the standard. WebGL is based on OpenGL ES. OpenGL is a high-performance 2D
    and 3D graphics API, and ES is its flavor for embedded devices. WebGL is maintained
    by a working group started by Khronos Group. Employees of Apple, Google, Mozilla,
    and other leading vendors are among its members.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: WebGL 的故事始于 2006 年，但它首次正式发布是在 2011 年。今天，一个名为 Khronos Group 的非盈利组织负责 WebGL 的标准。WebGL
    基于 OpenGL ES，OpenGL 是一个高性能的 2D 和 3D 图形 API，而 ES 是它针对嵌入式设备的版本。WebGL 由 Khronos Group
    发起的工作组维护，Apple、Google、Mozilla 等领先厂商的员工都是该工作组的成员。
- en: 'This advanced recipe demonstrates how to create a 3D animation by drawing a
    cube that swivels clockwise inside a Tizen web application. After launching the
    application, the user must press the **Play** button to start the animation as
    displayed in the following screenshot:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这个高级示例演示了如何通过绘制一个在 Tizen Web 应用程序中顺时针旋转的立方体来创建 3D 动画。在启动应用程序后，用户必须点击**播放**按钮才能开始动画，如下图所示：
- en: '![Creating 3D objects with WebGL](img/1908OS_03_05.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![使用 WebGL 创建 3D 对象](img/1908OS_03_05.jpg)'
- en: WebGL demo on Tizen
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: WebGL 在 Tizen 上的演示
- en: Getting ready
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This application is based on the spinning WebGL box example that is available
    on the public GitHub repository of Khronos Group. Several external JavaScript
    files that are copyrighted by Apple, Google, and Khronos Group are used in this
    example according to their copyright notices. For details regarding their licenses
    and the terms of use, please read the comments at the beginning of each file.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序基于可在Khronos Group的公共GitHub存储库上找到的旋转WebGL盒子示例。根据其版权声明，本示例使用了由Apple、Google和Khronos
    Group版权所有的几个外部JavaScript文件。有关其许可证和使用条款的详细信息，请阅读每个文件开头的注释。
- en: How to do it...
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Launch the Tizen IDE, and start a new Tizen Web Project.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Tizen IDE，并开始一个新的Tizen Web项目。
- en: Create a single-page application using the Tizen Web UI Framework.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Tizen Web UI Framework创建一个单页应用程序。
- en: 'Visit the GitHub repository of WebGL by Khronos Group at [https://github.com/KhronosGroup/WebGL](https://github.com/KhronosGroup/WebGL)
    to locate, download, and save the following files to the `js` directory of the
    project:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问Khronos Group的WebGL GitHub存储库，网址为 [https://github.com/KhronosGroup/WebGL](https://github.com/KhronosGroup/WebGL)，以查找、下载并保存以下文件到项目的
    `js` 目录中：
- en: '`webgl-utils.js`'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webgl-utils.js`'
- en: '`webgl-debug.js`'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webgl-debug.js`'
- en: '`J3DI.js`'
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`J3DI.js`'
- en: '`J3DIMath.js`'
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`J3DIMath.js`'
- en: Right-click on the project in the **Project Explorer** view, navigate to **New**
    | **Other** | **JavaScript** | **JavaScript Source File**, and create the file
    `draw.js`.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Project Explorer** 视图中项目上右键单击，导航到 **New** | **Other** | **JavaScript** |
    **JavaScript Source File**，创建文件 `draw.js`。
- en: 'Insert the following JavaScript source code into the newly created file `draw.js`.
    Have a look at the following code:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下JavaScript源代码插入到新创建的文件 `draw.js` 中。查看下面的代码：
- en: '[PRE30]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The preceding code snippet declares several global variables and initializes
    them with default values. It also includes a function `setupColors()`, which sets
    the colors of each side of the cube. The following source code implements the
    function `init()`, which prepares the drawing area, and it has to be inserted
    in the same file:'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码片段声明了几个全局变量，并将它们初始化为默认值。它还包括一个名为 `setupColors()` 的函数，用于设置立方体每一面的颜色。下面的源代码实现了名为
    `init()` 的函数，用于准备绘图区域，必须插入到同一文件中：
- en: '[PRE31]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following line sets a uniform variable for the shaders, who take the shape
    data and transform it into pixels on the screen:'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面这行代码为着色器设置一个统一变量，它接受形状数据并将其转换为屏幕上的像素：
- en: '[PRE32]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Several 4 x 4 matrices will be created from the class `J3DIMatrix4`. They will
    be used for vector transformations at the function `draw()`:'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将从类 `J3DIMatrix4` 创建的多个 4 x 4 矩阵用于 `draw()` 函数中的向量变换：
- en: '[PRE33]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The next function sets the viewport. Initially, the object is represented with
    modeling coordinates, which, after that, are transformed to world, view and finally
    to viewport coordinates. As a result, the 3D scene is transformed into a 2D projection,
    which is displayed on the screen of the device:'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一个函数设置视口。最初，对象用建模坐标表示，然后转换为世界坐标，再转换为视图坐标，最终转换为视口坐标。因此，3D场景被转换为在设备屏幕上显示的2D投影：
- en: '[PRE34]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now is the time to implement the most important function of these examples,
    `draw()`. It is responsible for drawing each frame of the animation. Please append
    the following source code inside the file `draw.js` too:'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在是实现这些示例中最重要功能 `draw()` 的时候了。它负责绘制动画的每一帧。请将以下源代码附加到 `draw.js` 文件中：
- en: '[PRE35]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Make sure that the canvas is clean before drawing anything. Have a look at
    the following code snippet:'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在绘制任何东西之前，请确保画布是干净的。看看下面的代码片段：
- en: '[PRE36]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Open `index.html`, and replace its code with the following:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `index.html`，并用以下代码替换它的内容：
- en: '[PRE37]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Insert the following couple of scripts inside the HTML `head` to implement
    a vertex shader that takes care of each corner of each rendered triangle:'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 HTML `head` 中插入以下两个脚本以实现一个顶点着色器，负责处理每个渲染三角形的每个角落：
- en: '[PRE38]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following source code implements a fragment shader. It applies the texture
    and the lighting on each pixel of each transformed triangle:'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的源代码实现了一个片段着色器。它在每个转换三角形的每个像素上应用纹理和光照：
- en: '[PRE39]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Continue by appending the source code of the HTML `body` as follows. This creates
    a user interface with a couple of buttons through which the user controls the
    animation:'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续通过附加 HTML `body` 的源代码如下。这将创建一个用户界面，通过几个按钮来控制动画：
- en: '[PRE40]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Open `main.js` and register the function `run()` as a handler of the button
    **Play** as follows:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `main.js` 并将函数 `run()` 注册为按钮 **Play** 的处理程序，如下所示：
- en: '[PRE41]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Save all changes, and run the application on a Tizen device or Emulator.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，并在Tizen设备或模拟器上运行应用程序。
- en: Note
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The full source code of this project is provided with the book. The application
    has been successfully tested on a device with Tizen 2.2.1.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的完整源代码随书提供。该应用已在Tizen 2.2.1版本的设备上成功测试。
- en: How it works…
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: All external JavaScript files are loaded at the head of `index.html`. The files
    downloaded in step 3 of the preceding tutorial provide basic functions to simplify
    the common usage of WebGL. Scripts for the vertex and fragment shaders are also
    included in `index.html` with IDs `vshareds` and `fshaders`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 所有外部JavaScript文件都在`index.html`的头部加载。步骤3中下载的文件提供了基本功能，简化了WebGL的常见使用。顶点和片段着色器的脚本也在`index.html`中，ID分别为`vshareds`和`fshaders`。
- en: A button with the ID `btnPlay` and a canvas with the ID `screen` are situated
    on the `div` element with the main content of the page. The canvas is used as
    a drawing area, and both its width and height are 200 px.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 页面主内容的`div`元素上放置了ID为`btnPlay`的按钮和ID为`screen`的画布。画布用作绘图区域，其宽度和高度均为200 px。
- en: The animation starts on the click event of the button `btnPlay`, and the button
    becomes disabled. The entry point of the animation is the JavaScript function
    `run()`, which is implemented in the file `draw.js`. It initializes the WebGL
    context through the function `init()`, which is also implemented in the same file.
    Furthermore, the functions `pause()` and `resume()` are bound to the canvas events
    `webglcontextlost` and `webglcontextrestored`.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 动画在点击`btnPlay`按钮时开始，按钮随之变为禁用。动画的入口点是JavaScript函数`run()`，它在`draw.js`文件中实现。通过同一文件中的`init()`函数初始化WebGL上下文。此外，`pause()`和`resume()`函数分别绑定到画布的`webglcontextlost`和`webglcontextrestored`事件。
- en: The current state of the rotation is stored in the global JavaScript variable,
    `g_nCurrentRotation`, and its initial value is 360\. The rotation per single step
    of the animation is defined in another global JavaScript variable with the name
    `g_nRotationAngle`.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的旋转状态存储在全局JavaScript变量`g_nCurrentRotation`中，初始值为360。每次动画的旋转角度由另一个全局JavaScript变量`g_nRotationAngle`定义。
- en: Tip
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Increase the value of `g_nRotationAngle` to speed up the rotation and decrease
    the value to slow it down.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 增加`g_nRotationAngle`的值以加快旋转速度，减少该值则会减慢旋转速度。
- en: The cube is created via the function `makeBox()`, and it is drawn on the screen
    using the JavaScript function `draw()`. It rotates clockwise, so on each execution
    of `draw()` , the angle is subtracted from the current state. When `g_nCurrentRotation`
    reaches a value below 0, it is set back to 360, and the animation starts all over
    again. The canvas is cleared at the beginning of `draw()` through the function
    `clear()`, and the cube is displayed via the function `drawElements()`.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 通过函数`makeBox()`创建立方体，并通过JavaScript函数`draw()`在屏幕上绘制它。它按顺时针方向旋转，因此每次执行`draw()`时，角度会从当前状态中减去。当`g_nCurrentRotation`的值低于0时，会重新设置为360，动画重新开始。在`draw()`的开始部分，通过函数`clear()`清除画布，立方体则通过`drawElements()`函数显示。
- en: The colors of the cube's sides are set at the function `setupColors()`. Edit
    the values of the array `colors` if you want to change the colors. The preceding
    example uses solid colors, but if you want, you can also set a different gradient
    for each side. The background color is white. It is set as a style of the page
    content's HTML `div` element and as an argument to the function `simpleSetup()`,
    which is called by the function `init()`.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 立方体各面的颜色在`setupColors()`函数中设置。如果你想更改颜色，可以编辑数组`colors`中的值。前面的示例使用了纯色，如果你愿意，也可以为每一面设置不同的渐变。背景色是白色，它被设置为页面内容HTML
    `div`元素的样式，并作为`simpleSetup()`函数的参数，该函数由`init()`函数调用。
- en: See also
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The demo repository of Khronos Group's contains a long list of different WebGL
    applications. Feel free to try them with Tizen at [http://www.khronos.org/webgl/wiki/Demo_Repository](http://www.khronos.org/webgl/wiki/Demo_Repository).
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Khronos Group的演示仓库包含了多种不同的WebGL应用程序列表。可以随意在Tizen上尝试这些应用，访问链接：[http://www.khronos.org/webgl/wiki/Demo_Repository](http://www.khronos.org/webgl/wiki/Demo_Repository)。
- en: Chapter 4. Storing Data
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 存储数据
- en: 'In this chapter, we will cover:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖：
- en: Writing files
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入文件
- en: Reading files
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取文件
- en: Creating a simple text editor
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的文本编辑器
- en: Downloading files
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载文件
- en: Using web storage
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Web存储
- en: Creating Web SQL Database
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Web SQL数据库
- en: Executing queries in Web SQL Database
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Web SQL数据库中执行查询
- en: Retrieving data from Web SQL Database
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Web SQL数据库中检索数据
- en: Using IndexedDB
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 IndexedDB
- en: Introduction
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Data management is becoming more and more important in the modern world. Billions
    of Internet-connected mobile and wearable devices already exist on the market.
    Now, the next big challenge is to improve communication and data synchronization
    between these devices as well as to provide better user experience. Each new mobile
    device model has a larger internal memory, and at the same time, the popularity
    of cloud services is constantly increasing. Nowadays, storing and managing information
    is more important than ever.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 数据管理在现代世界中变得越来越重要。市场上已经存在数十亿互联网连接的移动设备和可穿戴设备。现在，下一大挑战是改善这些设备之间的通信和数据同步，同时提供更好的用户体验。每一代新的移动设备都有更大的内存，同时云服务的普及度也在不断增加。如今，存储和管理信息比以往任何时候都更为重要。
- en: This chapter offers technical details about storing and accessing data on Tizen
    devices. It contains articles about file management, web storage, and Web SQL
    Database APIs as well as a tutorial about downloading files over the Internet.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了关于在 Tizen 设备上存储和访问数据的技术细节。内容包括文件管理、Web 存储和 Web SQL 数据库 API 文章，以及关于通过互联网下载文件的教程。
- en: Writing files
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正在写入文件
- en: 'Files on a Tizen device can be accessed through the **Filesystem API**. The
    filesystem of the platform is divided into several virtual roots:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过**文件系统 API**访问 Tizen 设备上的文件。平台的文件系统被划分为多个虚拟根目录：
- en: '`documents`'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`documents`'
- en: '`images`'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images`'
- en: '`videos`'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`videos`'
- en: '`music`'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`music`'
- en: '`ringtones`'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ringtones`'
- en: '`wgt-package`'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wgt-package`'
- en: '`wgt-private`'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wgt-private`'
- en: '`wgt-private-tmp`'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wgt-private-tmp`'
- en: Files located outside of any of the virtual paths from the preceding list can
    still be accessed from the actual root through their URI. For example, the URI
    of the directory `/etc/` is `file:///etc`.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 位于前面列表中的任何虚拟路径之外的文件仍然可以通过它们的 URI 从实际根目录访问。例如，目录 `/etc/` 的 URI 是 `file:///etc`。
- en: 'The API supports four modes to open a file:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: API 支持四种模式来打开文件：
- en: '`r`: This mode opens a file only for reading.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`：此模式仅以读取方式打开文件。'
- en: '`rw`: This mode opens a file for both reading and writing.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rw`：此模式以读写方式打开文件。'
- en: '`w`: This mode opens a file only for writing.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w`：此模式仅以写入方式打开文件。'
- en: '`a`: This mode opens a file for writing and places the cursor at its end. The
    new data will be appended to the existing content of the file.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`：此模式以写入方式打开文件，并将光标定位到文件末尾。新数据将追加到文件的现有内容后面。'
- en: The code snippets in this recipe demonstrate how to create a text file and save
    data to it. Since the content of the file will not be read in these particular
    cases, only modes `w` and `a` are appropriate.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中的代码示例展示了如何创建文本文件并保存数据。由于在这些特定情况下不会读取文件内容，因此仅使用 `w` 和 `a` 模式是合适的。
- en: Getting ready
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正在准备
- en: 'A privilege is required to save data to a file using the Filesystem API. Before
    you start, make sure that the following privilege has been added to the `config.xml`
    file of the project:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文件系统 API 保存数据到文件需要权限。在开始之前，请确保已将以下权限添加到项目的 `config.xml` 文件中：
- en: '[http://tizen.org/privilege/filesystem.write](http://tizen.org/privilege/filesystem.write)'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://tizen.org/privilege/filesystem.write](http://tizen.org/privilege/filesystem.write)'
- en: How to do it...
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Follow these instructions to save text to a file using the Tizen Filesystem
    API:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些说明，使用 Tizen 文件系统 API 将文本保存到文件：
- en: 'Use the following code snippet to prepare for file operations by obtaining
    an object associated with the virtual path for `documents`:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码片段，通过获取与 `documents` 虚拟路径相关联的对象来准备文件操作：
- en: '[PRE42]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Execute the function `createFile()` to make an empty file. The name of the
    file must be passed as an argument to the function, for example, `foo.txt`:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行函数 `createFile()` 来创建一个空文件。文件名必须作为参数传递给该函数，例如 `foo.txt`：
- en: '[PRE43]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Implement a callback function that will write the text `bar` to a stream associated
    with the file:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个回调函数，将文本 `bar` 写入与文件相关联的流：
- en: '[PRE44]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Open the file created in the second step to write and save data in it using
    the callback function implemented in the previous step, as follows:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开在第二步创建的文件，通过前一步实现的回调函数写入并保存数据，如下所示：
- en: '[PRE45]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works...
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: The Tizen Filesystem API works asynchronously, and because of this, a lot of
    functions are executed through callbacks. The successful cases as well as the
    error cases are processed using callbacks. Do not assume that everything will
    work as expected, and carefully handle errors.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen 文件系统 API 是异步工作的，因此许多函数通过回调执行。成功的情况以及错误的情况都通过回调来处理。不要假设一切都会按预期工作，必须小心处理错误。
- en: A global JavaScript object, `documentsDir`, is initialized at the callback function
    `onResolveSuccess()`. After that, the rest of the file operations are done by
    calling functions associated with this object. The functions `createFile()`, `resolve()`,
    and `openStream()` throw exceptions if any error occurs during their execution.
    It is important to add try-catch blocks and to handle potential exceptions properly.
    Please note that in this recipe, any exceptions that might occur are logged in
    the console. In real applications, you should integrate the error reporting with
    the user interface and make it user friendly.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 一个全局的 JavaScript 对象 `documentsDir` 在回调函数 `onResolveSuccess()` 中被初始化。之后，剩余的文件操作通过调用与该对象相关的函数完成。如果在执行过程中出现任何错误，函数
    `createFile()`、`resolve()` 和 `openStream()` 都会抛出异常。重要的是要添加 try-catch 块，并正确处理潜在的异常。请注意，在这个示例中，任何可能发生的异常都会记录到控制台。在实际应用中，您应将错误报告与用户界面集成，并使其更加友好。
- en: The function `write()` saves data to a file stream and then closes it. The function
    works asynchronously, and it is invoked as a callback upon the successful execution
    of `openStream()`.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `write()` 将数据保存到文件流中，然后关闭它。该函数是异步执行的，成功执行 `openStream()` 后会作为回调被调用。
- en: Reading files
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取文件
- en: The Tizen Filesystem API provides a couple of different ways to read a file.
    The primary option is using a file stream, and the alternative is to get the whole
    content of the file as a string through the function `readAsText()`. Both approaches
    work asynchronously and require a callback function for successful completion
    and another function for handling potential errors.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen 文件系统 API 提供了几种不同的方式来读取文件。主要选项是使用文件流，另一种方式是通过函数 `readAsText()` 获取文件的全部内容作为字符串。两种方法都是异步的，并且都需要一个回调函数来成功完成，以及另一个函数来处理潜在的错误。
- en: Please keep in mind that the Filesystem API is specific to Tizen, and its features
    must be accessed through the JavaScript object `tizen.filesystem`.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，文件系统 API 是特定于 Tizen 的，其功能必须通过 JavaScript 对象 `tizen.filesystem` 来访问。
- en: Getting ready
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before you start coding, make sure that a privilege to read files has been
    added to the `config.xml` file of your project as follows:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编码之前，请确保已将读取文件的权限添加到项目的 `config.xml` 文件中，如下所示：
- en: '[http://tizen.org/privilege/filesystem.read](http://tizen.org/privilege/filesystem.read)'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://tizen.org/privilege/filesystem.read](http://tizen.org/privilege/filesystem.read)'
- en: How to do it...
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these two steps to read text from a file using a stream:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下两个步骤使用流从文件中读取文本：
- en: 'Prepare an object that represents the `documents` directory:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备一个表示 `documents` 目录的对象：
- en: '[PRE46]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Use the following code snippet to read the content of a file using a stream.
    This approach allows us to read the file chunk by chunk, and it consumes less
    memory than reading the whole file at once:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码片段通过流读取文件内容。这种方法允许我们分块读取文件，并且比一次性读取整个文件消耗更少的内存：
- en: '[PRE47]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If you prefer to read the whole content of a text file without a stream, you
    should use the function `readAsText()` as shown in the following example:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢不使用流而直接读取整个文本文件的内容，你应该使用函数 `readAsText()`，如下示例所示：
- en: '[PRE48]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: How it works...
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You may have already noted that the first step for both operations, writing
    and reading files, is to create an object that represents the working directory.
    In this example, the virtual root of the used directory is `documents`.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，读写文件的第一个步骤是创建一个表示工作目录的对象。在这个示例中，所使用的目录的虚拟根是 `documents`。
- en: The first approach to reading files relies on streams. Tizen provides an interface
    called `FileStream` that is used for both reading and writing operations.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 读取文件的第一种方法依赖于流。Tizen 提供了一个叫做 `FileStream` 的接口，用于读写操作。
- en: The most important function is `openStream()`. A couple of callback functions
    have to be passed as its arguments. The first function will be invoked if the
    file content has been read successfully. In the previous example, the name of
    this function was `readFile()`. The second argument is a function that is invoked
    on an error.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的函数是 `openStream()`。必须将几个回调函数作为它的参数传递。第一个函数会在文件内容成功读取时被调用。在前面的示例中，这个函数的名称是
    `readFile()`。第二个参数是一个函数，它会在出现错误时被调用。
- en: The function `readFile()` receives the file stream as an argument, tries to
    understand the size of the available data, and then tries to read it using the
    function `read()` of the `FileStream` interface.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `readFile()` 接收文件流作为参数，尝试了解可用数据的大小，然后尝试使用 `FileStream` 接口的 `read()` 函数读取数据。
- en: The alternative approach does not rely on streams, but it still uses callback
    functions that are passed as arguments to `readAsText()`. Upon successful execution,
    the whole data is passed to a callback function, which, in our example, is called
    `showFileContent()`.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法不依赖于流，但仍然使用作为参数传递给 `readAsText()` 的回调函数。执行成功时，所有数据会传递给一个回调函数，在我们的示例中，该函数名为
    `showFileContent()`。
- en: Feel free to implement anonymous JavaScript functions for the callbacks if you
    prefer to do so.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，也可以实现匿名的 JavaScript 回调函数。
- en: Both the code snippets to read files with and without a stream call the same
    function `onError()` upon failure. In this recipe, the implementation of this
    callback function is very simple, as it just prints the error message to the web
    console.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 读取文件的代码片段（包括使用流和不使用流的）都在失败时调用相同的函数 `onError()`。在本教程中，这个回调函数的实现非常简单，它只是将错误信息打印到
    Web 控制台。
- en: Note
  id: totrans-393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: No matter which approach to reading files you prefer, it is mandatory to include
    privileges to read files.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你更倾向于哪种读取文件的方法，必须包含读取文件的权限。
- en: See also
  id: totrans-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The next recipe contains a tutorial on how to create a simple text editor, and
    it will guide you step by step in the implementation of both reading and writing
    text files with streams in an application.
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个教程将介绍如何创建一个简单的文本编辑器，并一步步指导你在应用程序中实现使用流的文本文件读取和写入。
- en: Creating a simple text editor
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的文本编辑器
- en: This recipe offers a tutorial on how to create a simple text editor based on
    the knowledge of writing and reading files from the previous recipes. The source
    code of the example application is simple and easy to understand.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程提供了如何基于前面教程中关于文件读取和写入的知识创建一个简单文本编辑器的指南。示例应用程序的源代码简单易懂。
- en: The content of a text file is loaded inside `textarea` at the application's
    startup. The user can modify the text and, after that, save it to the same file
    by clicking on the **Save** button at the top of the screen.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 文本文件的内容在应用程序启动时加载到 `textarea` 中。用户可以修改文本，然后点击屏幕顶部的 **保存** 按钮，将其保存到相同的文件中。
- en: How to do it...
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to create a simple text editor for Tizen:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个简单的 Tizen 文本编辑器：
- en: Launch the Tizen IDE and start a new Tizen Web Project.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Tizen IDE 并开始一个新的 Tizen Web 项目。
- en: Create a single-page application using **Tizen Web UI Framework**.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **Tizen Web UI Framework** 创建单页应用程序。
- en: 'Open the file `config.xml` using Widget Configuration Editor and select the
    tab **Privileges**. Click on the **Add** button and select the following internal
    privileges:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Widget 配置编辑器打开 `config.xml` 文件，并选择 **权限** 选项卡。点击 **添加** 按钮并选择以下内部权限：
- en: '[http://tizen.org/privilege/filesystem.read](http://tizen.org/privilege/filesystem.read)'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://tizen.org/privilege/filesystem.read](http://tizen.org/privilege/filesystem.read)'
- en: '[http://tizen.org/privilege/filesystem.write](http://tizen.org/privilege/filesystem.write)'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://tizen.org/privilege/filesystem.write](http://tizen.org/privilege/filesystem.write)'
- en: 'Update the content of `index.html` to match the following code:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `index.html` 文件的内容，使其与以下代码匹配：
- en: '[PRE49]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Right-click on the project in the **Project Explorer** view, navigate to **New**
    | **Other** | **JavaScript** | **JavaScript Source File**, and create the file
    `file.js`.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 **项目浏览器** 视图中的项目，依次选择 **新建** | **其他** | **JavaScript** | **JavaScript 源文件**，然后创建
    `file.js` 文件。
- en: 'Open `file.js` and insert the following source code:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `file.js` 并插入以下源代码：
- en: '[PRE50]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Implement JavaScript functions to read and write data using file streams in
    the same source file. Have a look at the following code:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个源文件中实现 JavaScript 函数，以通过文件流读取和写入数据。请查看以下代码：
- en: '[PRE51]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Declare a function, `loadFile()`, that loads the content of the file inside
    a text area if the file exists, as follows:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个函数 `loadFile()`，如果文件存在，它会将文件内容加载到文本区域中，代码如下：
- en: '[PRE52]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Append the JavaScript functions, `createFile()` and `saveFile()`, through which
    content is saved into the text file, as follows:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 JavaScript 函数 `createFile()` 和 `saveFile()` 附加到文本文件中，通过这些函数可以保存内容，代码如下：
- en: '[PRE53]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Append the following code snippet to the initialization function in the file
    `main.js`:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段附加到 `main.js` 文件中的初始化函数：
- en: '[PRE54]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Save all changes, build the application, and run it on the Tizen Emulator or
    device.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，构建应用程序，并在 Tizen 模拟器或设备上运行它。
- en: Note
  id: totrans-421
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example uses `console.log()` to print errors that may occur during the
    execution of the application. These messages are outputted on the console only
    to simplify debugging. Please note that it is not recommended to leave `console.log()`
    in production code. It is used as a simple error handling technique only for this
    example. You can display error messages in pop ups or notifications instead.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用 `console.log()` 打印在应用执行过程中可能发生的错误。这些信息仅在控制台输出，目的是简化调试。请注意，不建议在生产代码中保留
    `console.log()`。它仅作为一个简单的错误处理技巧，在这个示例中使用。你可以通过弹出框或通知来显示错误信息。
- en: How it works...
  id: totrans-423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The example relies on the Tizen Filesystem API to create, read, and write a
    file. The privileges set in the third step are mandatory. Without them, the exception
    `WebAPIException` with the error type `SecurityError` will be thrown, and the
    application will not work as expected.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例依赖于 Tizen 文件系统 API 来创建、读取和写入文件。第三步中设置的权限是强制性的。没有这些权限，将会抛出 `WebAPIException`
    异常，错误类型为 `SecurityError`，应用程序将无法按预期工作。
- en: The user interface of the simple text editor has a single button and an input
    field. The function `loadFile()` is called at the launch of the application if
    the documents directory is successfully resolved. It opens `simpleTextFile.txt`
    as read only, asynchronously gets its content, and loads it into the text area.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 简单文本编辑器的用户界面有一个按钮和一个输入框。如果文档目录成功解析，`loadFile()` 函数将在应用启动时被调用。它以只读方式打开 `simpleTextFile.txt`，异步获取其内容，并加载到文本区域。
- en: The function `saveFile()` is called each time the **Save** button is clicked.
    It opens `simpleTextFile.txt` to write and replaces its data with the content
    of the HTML5 `textarea` with ID `textbox`. If the file does not exist, then `saveFile()`
    tries to create it by executing the function `createFile()`.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 每次点击 **保存** 按钮时，都会调用 `saveFile()` 函数。它打开 `simpleTextFile.txt` 进行写入，并将其数据替换为
    HTML5 `textarea` 中 ID 为 `textbox` 的内容。如果文件不存在，则 `saveFile()` 会通过执行 `createFile()`
    函数尝试创建文件。
- en: Both reading and writing of the file are achieved asynchronously through file
    streams and callback functions. After successful completion of the operations,
    the file streams are closed.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的读取和写入是通过文件流和回调函数异步实现的。操作成功完成后，文件流会被关闭。
- en: 'The name of the text file is stored in the global variable `sTxtFile`, which
    is used by all functions. The file is located in the virtual root for documents.
    Have a look at the following screenshot:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 文本文件的名称存储在全局变量 `sTxtFile` 中，该变量由所有函数使用。该文件位于文档的虚拟根目录。请查看下面的截图：
- en: '![How it works...](img/1908OS_04_01.jpg)'
  id: totrans-429
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1908OS_04_01.jpg)'
- en: A simple text editor for Tizen
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于 Tizen 的简单文本编辑器
- en: See also
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: Please refer to the official documentation to find more detailed information
    about the Tizen Filesystem API at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/filesystem.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/filesystem.html).
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考官方文档，以获取关于 Tizen 文件系统 API 的详细信息，访问 [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/filesystem.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/filesystem.html)。
- en: Downloading files
  id: totrans-433
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载文件
- en: 'Tizen provides a **Download API**, which is dedicated only to asynchronous
    transfer of data from the URL of a remote server to the storage of the device.
    This API is very flexible, but it is still easy to use. For example, the developer
    has the option to specify explicitly whether a cellular or a Wi-Fi connection
    should be used for a specific download. During the download process, the file
    has one of the following states: `QUEUED`, `DOWNLOADING`, `PAUSED`, `CANCELED`,
    `COMPLETED`, and `FAILED`.'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen 提供了一个 **下载 API**，专门用于从远程服务器的 URL 异步传输数据到设备的存储。这一 API 非常灵活，但仍然易于使用。例如，开发者可以明确指定是否为特定下载使用蜂窝数据或
    Wi-Fi 连接。在下载过程中，文件具有以下状态之一：`QUEUED`、`DOWNLOADING`、`PAUSED`、`CANCELED`、`COMPLETED`
    和 `FAILED`。
- en: The usage of this API will be demonstrated with an example application that
    downloads PNG and JPEG images and saves them to the filesystem location defined
    for images.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 API 的使用将通过一个示例应用程序演示，该应用程序下载 PNG 和 JPEG 图像并将其保存到为图像定义的文件系统位置。
- en: Getting ready
  id: totrans-436
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The privilege [http://tizen.org/privilege/download](http://tizen.org/privilege/download)
    must be granted in Tizen applications in order to use the Download API. An exception
    will be thrown when the function `start()` of the interface `DownloadManager`
    is executed if an application does not have the required privilege.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-438
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a Tizen web application to download images by performing the following
    steps:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and create a new Tizen Web Project.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Tizen Web UI Framework** and **Single Page Application** from the available
    options of the wizard.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the file `config.xml` using the Widget Configuration Editor, select the
    tab **Privileges**, and click on the **Add** button. Insert the following internal
    privilege:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/download](http://tizen.org/privilege/download)'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace the content of `index.html` with the following source code:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Open the context menu of the **Project Explorer** view by right-clicking on
    it, navigate to **New** | **Other** | **JavaScript** | **JavaScript Source File**,
    and create the file `download.js`.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `download.js` and append the following code to it:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Implement a listener to handle download events:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Append the following code snippet to the initialization function in the file
    `main.js`:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Save all changes. Build and run the application on the Tizen Emulator or device.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the application is launched, the user must enter the URL to an image and
    click on the **Download** button. The file extensions allowed are `png`, `jpg`,
    and `jpeg`. Other extensions are not allowed to start the download. The user can
    pause and resume the download by clicking on the **Download** button during the
    download process.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: Successfully downloaded images are stored at the images virtual root, and they
    can be accessed directly from the Tizen default **Gallery** application.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: The ID of the only button in this simple example is `btnDownload`. In the file
    `main.js`, its click event is associated with an anonymous function that calls
    `handleButton()`. The called function is implemented in the file `download.js`,
    and it has a different behavior depending on the state of the application.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: The global variable `nDownloadImageId` stores the ID of the ongoing download.
    If there is no download in progress, its value is zero. The global Boolean variable
    `bIsPause` indicates whether the current download has been paused.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: 'The download starts with the following two lines of code in the function `handleButton()`,
    and its identifier is stored as `nDownloadImageId`:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `start()` function accepts arguments as an object with details regarding
    the download request as well as the download callback, which is optional. The
    only mandatory argument of the constructor of the interface `DownloadRequest`
    is the URL; optionally, other parameters, such as the destination, the name of
    the saved file, and the type of the network connection, can be set. The download
    callback handles events for `onprogress()`, `onpaused()`, `oncanceled()`, `oncompleted()`,
    and `onfailed()`. For more details, please refer to the documentation of the interface
    `DownloadCallback` at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/download.html#::Download::DownloadCallback](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/download.html#::Download::DownloadCallback).
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-462
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please look at the documentation of the Filesystem API to find out the most
    appropriate virtual paths to store the downloaded files. Storing files in suitable
    locations enhances the user experience, because the files will be easily located
    and accessed through system applications too. For example, applications for photo
    sharing or editing graphics look for files at the directory for images.
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information and details about the Download API in Tizen SDK 2.2.1 are available
    at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/download.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/download.html).
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using web storage
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tizen web applications can take full advantage of HTML5 web storage. The data
    saved in `localStorage` is stored permanently in the memory of the device, while
    the data stored in `sessionStorage` is kept temporarily as long as the application
    is running. On Tizen, the size of the session storage is unlimited, and you may
    store up to 5 MB of data at the local storage. Both storage types implement the
    interface storage, so the same methods for data manipulations are available, which
    are as follows:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: '`key(n)`: This returns the name of the element with a position in the list
    of stored data that matches the number provided as an argument.'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getItem(key)`: This returns the value that corresponds to the key passed as
    an argument.'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setItem(key, value)`: This saves a key-value pair into the storage.'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`removeItem(key)`: This finds and removes an element from the storage with
    the key provided as an argument.'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clear()`:This removes all key-value pairs from the storage object.'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that web storage is a standard API in HTML5, so no privileges are
    required to use it in a Tizen application.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to create an application that stores a text note permanently
    using `localStorage` and how to provide an undo option using `sessionStorage`.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-475
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow this guide to create a Tizen web application that uses web storage:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and start a new Tizen Web Project.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the wizard of the new project, first choose **Tizen Web UI Framework**
    and then choose **Single Page Application.**
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `index.html` and replace its source code with the following HTML5 code:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Add a new JavaScript file with the name `storage.js` by right-clicking on the
    **Project Explorer** view, and navigate to **New** | **Other** | **JavaScript**
    | **JavaScript Source File** from the menu that appears.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following JavaScript functions into `storage.js`:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Open `main.js` and append the following code to the initialization function:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Save all modified files, build the application, and run it.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application stores data for a single note using `localStorage`. At startup
    of the application function, `load()` retrieves data for the key note from the
    persistent web storage and sets it as content of `textarea` with the ID `textbox`.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: The function `save()` is executed each time the user changes the content of
    `textarea`. It saves the previous version of the text in `sessionStorage` with
    the key `undo` and the current version to `localStorage`.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user clicks on the button **Undo**, the value corresponding to the
    key `undo` at `sessionStorage` is loaded by the function `undo()`. The application
    supports only a single previous state, so the **Undo** button can be clicked just
    once. This button is hidden at application startup, and it is shown only when
    the option to go back is available. Have a look at the following screenshot:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1908OS_04_02.jpg)'
  id: totrans-491
  prefs: []
  type: TYPE_IMG
- en: A Tizen web application to save notes using web storage
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: Creating Web SQL Database
  id: totrans-493
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have discussed storing data in text files and web
    storage. Now it is time to focus on relational databases. Tizen web applications
    support **Web SQL Database**. The underlying implementation of the Web SQL Database
    API in HTML5 relies on the **SQLite** database.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: SQLite is written in C, and its source code is in the public domain. According
    to its creators, SQLite is probably the most popular SQL database in the world,
    as it is shipped with the majority of modern smartphones and web browsers, and
    it is also built in PHP.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: It should be mentioned that development of the Web SQL Database API by W3C working
    groups stopped in 2010, because all parties involved were using SQLite and the
    underlying engine of the API. Since then, W3C working groups have focused on the
    standardization of alternative APIs, such as web storage and **Indexed Database**.
    In my opinion, this should not worry you too much because Tizen supports the Web
    SQL Database API, and, as a matter of fact, it is very convenient.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-497
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Web SQL Database API supports both asynchronous and synchronous operations.
    Please note that all examples in this recipe, and the subsequent two recipes,
    are related to the same API and contain asynchronous operations only.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-499
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code snippet establishes the connection with the database `simpleTextEditor`:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Note
  id: totrans-502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function `openDatabaseSync()` should be used to create a new database or
    open an existing database synchronously. It expects the same arguments as those
    for `openDatabase()`.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-504
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding code snippet tries to open a database asynchronously using the
    function `openDatabase()`. If the database does not exist, the function tries
    to create it. The mandatory arguments for `openDatabase()` are name, version,
    full display name (description), as well as the estimated database's size in bytes.
    An empty string can be passed as an argument for the version, and, in this case,
    the database will be opened no matter what its version is.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: A callback function can be specified as an optional last argument. It will be
    invoked if the database is opened successfully. In the preceding example, an anonymous
    function that logs a message to the console has been implemented.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: An exception might be thrown in the event of an error, such as a database version
    mismatch or security issue.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-508
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please find tutorials and examples of how to execute SQL statements and how
    to handle the data retrieved using the Web SQL Database API in the subsequent
    two recipes. If you are interested in more information about the W3C specification,
    please visit [http://www.w3.org/TR/webdatabase/](http://www.w3.org/TR/webdatabase/).
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing queries in Web SQL Database
  id: totrans-510
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most important operations related to any database, including Web SQL Database,
    are executing SQL queries. The most frequently used SQL statements are `CREATE
    TABLE`, `INSERT`, `UPDATE`, and `SELECT`. Of course, SQLite, the engine behind
    Web SQL Database, supports a variety of other SQL statements. It should be possible
    to use each one of them in Tizen web applications. The full list of supported
    statements and syntax details about each of them can be found in the documentation
    available at [http://sqlite.org/lang.html](http://sqlite.org/lang.html).
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to execute SQL queries using the Web SQL Database API
    in HTML5.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-513
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following examples demonstrate how to execute SQL statements to create
    a new table and how to insert data into it:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the source code in the following sample to execute a single SQL statement:'
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Use the following source code to execute a sequence of several SQL statements
    with dynamically passed values:'
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: How it works...
  id: totrans-519
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Queries can be executed using a database object and the functions `transaction()`,
    `readTransaction()`, and `changeVersion()`. All of them invoke a callback function
    in which database operations are performed through the function `executeSql()`.
    The function accepts up to four arguments, but only the first with the SQL statement
    is mandatory. The optional arguments are an array with values for the SQL statement,
    a callback function to handle the result of the query, and a callback function
    to handle errors.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: 'Pay attention to the question marks in the SQL statements, such as in the following
    example:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: They will be automatically replaced by the values passed as an array. The special
    symbols at each value will also be automatically escaped. This is a convenient
    and safe approach that can prevent SQL errors and injections.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: Exceptions are thrown in the event of database errors, which means that the
    functions `createTable()` and `insertData()` from the previous examples must be
    called within try-catch blocks.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instructions on how to create an application that creates a Web SQL Database
    API and how to execute SQL queries is included in the next recipe.
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data from Web SQL Database
  id: totrans-527
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's develop an application that puts together everything related to the Web
    SQL Database API from the previous recipe and additionally demonstrates how to
    retrieve data.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: The application is based on the simple text editor explored in a previous recipe.
    It has the same user interfaces, but instead of reading and writing files, its
    backend uses Web SQL Database.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-530
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow this tutorial to create a Tizen web application powered by Web SQL Database:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and start a new Tizen Web Project.
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the wizard meant to create a new project, select **Tizen Web UI Framework**
    and **Single Page Application**.
  id: totrans-533
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the content of `index.html` to match the following code:'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Go to the **Project Explorer** view, select the project, and right-click on
    it to open a context menu. Navigate to **New** | **Other** | **JavaScript** |
    **JavaScript Source File** to add a new file `db.js` to the project.
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, open the file `db.js` and insert the following JavaScript code:'
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The implementation of the functions `load()` and `save()` should also be placed
    in the same file as follows:'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Insert the following source code into the initialization function in the file
    `main.js`:'
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Save all changes, build the application, and run it on the Tizen Emulator or
    device.
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-544
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application has exactly the same user interface and user experience as the
    application developed in the recipe *Creating a simple text editor*. The only
    difference is that the text is loaded and saved in the table `tizenSimpleTextEditor`
    of Web SQL Database's `simpleTextEditor`.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: 'The database table has two columns: `id` and `content`. The type of column
    `id` is `INT`, and it is the primary key. The type of the other column is `TEXT`.
    Please note that the full list of data types in SQLite is available at [http://www.sqlite.org/datatype3.html](http://www.sqlite.org/datatype3.html).'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: The function `load()` is called immediately after the application's launch by
    the initialization function at the file `main.js`. It tries to open a database
    and to retrieve the value of the saved text by executing the functions `openDb()`
    and `retrieveData()`. If the database does not exist, it will be created by the
    function `openDb()`.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: 'The function `retrieveData()` creates a table `tizenSimpleTextEditor` if it
    does not exist, retrieves data by executing a `SELECT` statement, and handles
    its result in an anonymous callback function as follows:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `retrieveData()` 创建一个名为 `tizenSimpleTextEditor` 的表（如果该表不存在），通过执行 `SELECT`
    语句来检索数据，并在以下的匿名回调函数中处理其结果：
- en: '[PRE71]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The variable `sqlResult` is an object that contains information about the last
    inserted row (if any) in the property `insertId`, the number of affected rows
    in the property `rowsAffected`, and an array of `rows` of all returned rows. In
    this case, there are no inserted or affected rows because an SQL `SELECT` statement
    was executed. The structure of the table `tizenSimpleTextEditor` allows only a
    single row or no rows to be returned. If the result contains a single row, the
    value of its property content is shown at the HTML5 `textarea` with the ID `textbox`.
    A loop should be used to iterate over the returned array in other cases where
    the `SELECT` statement may return more than one row.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 `sqlResult` 是一个对象，其中包含有关最后插入行的信息（如果有）在属性 `insertId` 中，受影响的行数在属性 `rowsAffected`
    中，以及所有返回行的 `rows` 数组。在此案例中，没有插入或受影响的行，因为执行的是 SQL `SELECT` 语句。表 `tizenSimpleTextEditor`
    的结构只允许返回一行或没有行。如果结果包含一行，则其属性 `content` 的值将在 ID 为 `textbox` 的 HTML5 `textarea`
    中显示。在其他可能返回多行的情况中，应该使用循环遍历返回的数组。
- en: The function `save()` performs a transaction that executes a SQL `REPLACE` query
    to store the value of `textbox` into the database table `simpleTextEditor` with
    the ID `1`. Please note that this table has a single row, because this is just
    a sample application. In real applications, you should use a database only if
    you have numerous records in its tables.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `save()` 执行一个事务，执行 SQL `REPLACE` 查询，将 `textbox` 的值存储到数据库表 `simpleTextEditor`
    中，ID 为 `1`。请注意，这个表只有一行，因为这是一个示例应用程序。在实际应用中，只有在表中有大量记录时，才应该使用数据库。
- en: See also
  id: totrans-552
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Refer to the documentation of SQLite about the syntax of the supported SQL commands
    at [http://sqlite.org/docs.html](http://sqlite.org/docs.html).
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 SQLite 文档，了解支持的 SQL 命令的语法：[http://sqlite.org/docs.html](http://sqlite.org/docs.html)。
- en: Details regarding the Web SQL Database API can be found in the latest versions
    of the specifications for the standard by the W3C working group from November
    18, 2010 at [http://www.w3.org/TR/webdatabase/](http://www.w3.org/TR/webdatabase/).
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 Web SQL 数据库 API 的详细信息，可以在 W3C 工作组于 2010 年 11 月 18 日发布的最新版本标准文档中找到：[http://www.w3.org/TR/webdatabase/](http://www.w3.org/TR/webdatabase/)。
- en: Using IndexedDB
  id: totrans-555
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IndexedDB
- en: The last recipe of the chapter is dedicated to IndexedDB. These databases are
    integrated naturally in JavaScript, and their specifications are standardized
    by W3C. This implies that source code for IndexedDB will work on other web browsers
    and platforms with HTML5 support.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一个配方专门介绍了 IndexedDB。这些数据库在 JavaScript 中自然集成，其规范由 W3C 标准化。这意味着 IndexedDB
    的源代码将在支持 HTML5 的其他网页浏览器和平台上运行。
- en: How to do it...
  id: totrans-557
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'The following code snippets demonstrate how to store and manipulate the top
    goal scorers from the 2014 FIFA World Cup in an indexed database using JavaScript:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何使用 JavaScript 在索引数据库中存储和操作 2014 年 FIFA 世界杯的最佳射手数据：
- en: 'Create and open a database:'
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并打开一个数据库：
- en: '[PRE72]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Insert initial data into the database:'
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向数据库中插入初始数据：
- en: '[PRE73]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Create a function that inserts an object into the database:'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个向数据库中插入对象的函数：
- en: '[PRE74]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Create a function that removes an object from the database:'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个从数据库中删除对象的函数：
- en: '[PRE75]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Create a function that reads all objects stored in an indexed database:'
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个读取存储在索引数据库中的所有对象的函数：
- en: '[PRE76]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: How it works...
  id: totrans-570
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: IndexedDB stores objects. The code snippets in this recipe insert, delete, and
    read objects that represent the top goal scorers from the 2014 FIFA World Cup.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: IndexedDB 存储对象。本配方中的代码片段插入、删除并读取代表 2014 年 FIFA 世界杯最佳射手的对象。
- en: The data is manipulated through the JavaScript object `db`. The database is
    opened using `window.indexedDB.open()`. This function will create the database
    if it does not exist before opening it. The first argument is the name of the
    database. The second argument is optional. If provided, it must be an integer
    value that matches the version of the database. For example, in the code snippet
    from the first step, the database version is set to `1`.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 数据通过 JavaScript 对象`db`进行操作。使用`window.indexedDB.open()`打开数据库。如果数据库不存在，函数将在打开之前创建它。第一个参数是数据库的名称。第二个参数是可选的。如果提供，它必须是一个与数据库版本匹配的整数值。例如，在第一步的代码片段中，数据库版本设置为`1`。
- en: The event `onupgradeneeded` is triggered if a database is created or updated.
    According to the code snippet implemented in the second step, the first two top
    goal scorers will be inserted in the database immediately after its creation.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 如果创建或更新数据库，将触发`onupgradeneeded`事件。根据第二步实现的代码片段，数据库创建后，将立即插入前两名顶级进球者。
- en: The functions `addGoalscorer()` and `removeGoalScorer()` perform transactions
    in the `readwrite` mode to modify the stored data. The mode of the transaction
    in the function `readGoalscorers()` is not explicitly specified, and the default
    value `readonly` is assigned to it. This function only retrieves data without
    making any modifications to the database, so the default mode is sufficient for
    it.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`addGoalscorer()`和`removeGoalScorer()`在`readwrite`模式下执行事务，以修改存储的数据。函数`readGoalscorers()`中的事务模式没有显式指定，默认值`readonly`被赋给它。此函数仅检索数据，不对数据库进行任何修改，因此默认模式对它来说足够了。
- en: The code snippets in this recipe print all retrieved data of eventual errors
    that might occur in the console. Please note that this is a simple example to
    demonstrate the usage of IndexedDB. In real applications, this source code should
    be integrated with the GUI.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中的代码片段将在控制台中打印所有检索到的数据以及可能发生的错误。请注意，这是一个简单的示例，用于演示 IndexedDB 的使用。在实际应用中，这些源代码应与
    GUI 集成。
- en: Also note that any of the functions implemented in the last three steps must
    be executed only after successful initialization of the `db` object.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 还需注意，最后三步中实现的任何函数必须在`db`对象成功初始化后执行。
- en: See also
  id: totrans-577
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Explore the W3C specification to learn more about the full features of IndexedDB
    at [http://www.w3.org/TR/IndexedDB/](http://www.w3.org/TR/IndexedDB/).
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览 W3C 规范，了解更多关于 IndexedDB 完整功能的信息，网址：[http://www.w3.org/TR/IndexedDB/](http://www.w3.org/TR/IndexedDB/)。
- en: Chapter 5. Creating Multimedia Apps
  id: totrans-579
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 创建多媒体应用
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下食谱：
- en: Playing local audio files
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放本地音频文件
- en: Playing local video files
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放本地视频文件
- en: Launching video in an external player
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在外部播放器中启动视频
- en: Taking a photo
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拍照
- en: Generating linear barcodes
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成线性条形码
- en: Scanning linear barcodes
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描线性条形码
- en: Generating QR codes
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成二维码
- en: Scanning QR codes
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描二维码
- en: Introduction
  id: totrans-589
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Multimedia capabilities are always among the most important and easily distinguishable
    features of smart devices. No matter what the form factor or the purpose of a
    Tizen device is, it will run multimedia applications if it has a graphical user
    interface.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 多媒体功能始终是智能设备中最重要且最容易区分的特点之一。无论 Tizen 设备的外形或用途如何，只要具备图形用户界面，它就能够运行多媒体应用程序。
- en: 'This chapter will cover the most common multimedia tasks: playing audio and
    video files, online video streaming, working with cameras, and processing barcodes.'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍最常见的多媒体任务：播放音频和视频文件、在线视频流、使用摄像头和处理条形码。
- en: Playing local audio files
  id: totrans-592
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放本地音频文件
- en: Several years ago, it was a real challenge to play a sound or a video on different
    browsers and platforms. Today, HTML5 offers us standard means for playing both
    audio and video files and makes the life of developers so much better.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，在不同浏览器和平台上播放声音或视频是一个真正的挑战。如今，HTML5 为我们提供了播放音频和视频文件的标准方式，让开发者的生活变得更加轻松。
- en: In the first recipe of this chapter, a Tizen web application that plays an audio
    file will be developed using only HTML5.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一个食谱将开发一个仅使用 HTML5 播放音频文件的 Tizen Web 应用程序。
- en: Getting ready
  id: totrans-595
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before you start, ensure that MP3 files are present on the Tizen device and
    emulator. Use the `sdb push` command to transfer a MP3 file from your development
    computer to the Tizen device or emulator, for example:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，确保 Tizen 设备和模拟器上存在 MP3 文件。使用`sdb push`命令将 MP3 文件从开发计算机传输到 Tizen 设备或模拟器，例如：
- en: '[PRE78]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: How to do it...
  id: totrans-598
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Perform the following steps to create a Tizen web application that plays the
    file that has been copied to the Tizen device or emulator:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and create the Tizen Web project.
  id: totrans-600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Tizen Web UI Framework** and then **Single Page Application** from
    the wizard to create the project.
  id: totrans-601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the content of `index.html` with the following source code:'
  id: totrans-602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Please note that the URI of the audio file should be changed to match the sound
    file on your Tizen device or emulator.
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Save all changes.
  id: totrans-606
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the application and after that run it on a Tizen emulator or device.
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-608
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The standard W3C HTML5 `audio` element is responsible for playing the MP3 file.
    A URI according to the Tizen file system rules is set as a value of the `src`
    attribute. The attribute `controls` adds buttons for controlling the process of
    sound reproduction. The last attribute `autoplay` is used to play the sound with
    the launch of the application.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: The other available attributes that can be used with the `audio` tag are `loop`,
    `muted`, and `preload`. The supported audio formats are MP3, Ogg Vorbis, and WAV.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_05_01.jpg)'
  id: totrans-611
  prefs: []
  type: TYPE_IMG
- en: The Tizen web application used to play a local audio file
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-613
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Details regarding the standard HTML5 audio element are available at [http://www.w3.org/TR/html5/embedded-content-0.html#the-audio-element](http://www.w3.org/TR/html5/embedded-content-0.html#the-audio-element).
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also possible to launch audio files in an external player from the Tizen
    web application. Have a look at the *Launching video in an external player* recipe
    and try to load an audio instead of video file.
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing local video files
  id: totrans-616
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen provides an API for retrieving multimedia files on the local storage of
    the device. In this example, an application that retrieves video files using the
    Content API and playing them with the HTML5 element `video` will be created.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Content` API is responsible for the discovery of media files such as videos,
    audio files, photos, and other images. The following video formats are supported
    in Tizen web applications: 3GP, AVI, ASF, OGV, MP4, MKV, and WMV.'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-619
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start, ensure that video files are present on the device. The easiest
    way is to copy several videos from your computer to the Tizen device or emulator
    using SDB and its command `push`.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following command transfers the file `happy.mp4` from the
    current directory of the computer to the directory `/opt/usr/media/Videos/` of
    the attached Tizen device or emulator:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Please note that new videos uploaded to the device with SDB may not appear in
    the content database unless you reboot the device or use the Content API to create
    them.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-624
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a Tizen web application that retrieves
    and plays video files:'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE.
  id: totrans-626
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Tizen Web project for **Multi Page Application** using **Tizen
    Web UI Framework**.
  id: totrans-627
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `config.xml` file using the Widget Configuration Editor and go to the
    **Privileges** tab. Click on the **Add** button and select **http://tizen.org/privilege/content.read**
    to use this privilege.
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the content of `index.html` with the following source code:'
  id: totrans-629
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Continue by appending the following source code for the first page:'
  id: totrans-631
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Insert the second page in the same file, as shown in the following code:'
  id: totrans-633
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Add a new JavaScript file `videoManager.js` in the `js` directory and place
    the following source code below it:'
  id: totrans-635
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Open `main.js` and replace the automatically generated code for handling the
    hardware back button in the initialization function with the following code:'
  id: totrans-637
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Save all changes, build, and run the application on a Tizen emulator or device.
  id: totrans-639
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-640
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application contains two pages. A list of all video files available on the
    local storage is shown on the first page. The user can click on each video and
    be transferred to the second page where the video is loaded and can be played.
    If no videos are found, the message **No data** is displayed on the first page.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: The `find()` function from the Tizen Content API is used by the `loadVideos()`function
    to discover the available video files. On success, the `mediaItems()` function
    creates a list and loads the titles of all retrieved videos. When an item of the
    list is clicked, the `selectVideo()` function transfers the user to the second
    page and loads the video.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: Please pay attention to the handling of the hardware back button in the penultimate
    step of this recipe. A menu and back hardware buttons should be present on each
    Tizen mobile device. The strings `back` and `menu` have to be used to identify
    which hardware button has been clicked.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-644
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same approach can be used to retrieve audio files. The HTML5 audio element
    should be used as explained in the previous recipe if an audio file should be
    played. Please explore the next recipe if you are interested in programmatically
    launching an external application for playing videos.
  id: totrans-645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details regarding the standard HTML5 video tag can be found at [http://www.w3.org/TR/html5/embedded-content-0.html#the-video-element](http://www.w3.org/TR/html5/embedded-content-0.html#the-video-element).
  id: totrans-646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about Tizen Content API is available at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/content.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/content.html).
  id: totrans-647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching video in an external player
  id: totrans-648
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn another approach for playing video files. This
    time instead of playing the video inside the current application, it will be loaded
    in an external player, which will be launched using the Tizen Application API.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-650
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As in the previous recipes, a video file has to be present on the Tizen device
    or emulator used for testing. Ensure that a file exists by copying a video using
    SDB. For example, the following command transfers the `happy.mp4` file from the
    computer to the targeted Tizen device:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: How to do it...
  id: totrans-653
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create an application that plays a video file
    in an external application:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and start a new Tizen Web project.
  id: totrans-655
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the wizard to create a new project, select **Tizen Web UI Framework** and
    then **Single Page Application**.
  id: totrans-656
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `config.xml` file using the Widget Configuration Editor and go to the
    tab **Privileges**. Click on the **Add** button and select **http://tizen.org/privilege/application.launch**
    to use this privilege.
  id: totrans-657
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the content of `index.html` with the following source code:'
  id: totrans-658
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Click the right mouse button over **Project Explorer** and select **New**, then
    select **Other**, then **JavaScript**, and then **JavaScript Source File** to
    add a new JavaScript file with the name `videoManager.js`.
  id: totrans-660
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following JavaScript functions into `videoManager.js`:'
  id: totrans-661
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Append the following source code to the initialization function at `main.js`:'
  id: totrans-663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Save all changes. Build the application and after that, launch the application
    on a Tizen emulator or device.
  id: totrans-665
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-666
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example uses the Application API. The `launchVideoPlayer()` function
    launches an external application to play a video file specified by URI. Please
    note that the filename should match the name of a video file present on your device
    or emulator.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-668
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The example in this recipe opens a video player using the operation ID `http://tizen.org/appcontrol/operation/view`.
    The other available options for operation ID are as follows:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/call` operation makes a phone call
    to a number specified with the `tel` scheme
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/dial` operation launches the dial
    pad with the entered phone number specified with the `tel` scheme
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/create_content` operation creates
    content as a photo
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/compose` operation composes a message,
    for example, SMS or e-mail
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/pick` displays a list of items that
    return the item selected by the user
  id: totrans-674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/share` operation shares data with
    other applications
  id: totrans-675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http://tizen.org/appcontrol/operation/multi_share` operation shares multiple
    items with other applications
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-677
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the official documentation of the Tizen Application API for
    more details at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/application.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/application.html)
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a photo
  id: totrans-679
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All modern mobile devices are equipped with high-quality cameras with great
    capabilities for recording videos and capturing photos. In this recipe, you will
    learn how to create a Tizen web application for capturing and displaying images
    using the device's camera.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-681
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a new project and to build a Tizen Web
    application capable of taking photos:'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and create a new Tizen Web project for **Single Page Application**
    using **Tizen Web UI Framework**.
  id: totrans-683
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `config.xml` file with the Widget Configuration editor and select the
    **Privileges** tab. Click on the **Add** button and insert the **http://tizen.org/privilege/content.read**
    privilege.
  id: totrans-684
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `index.html` by replacing its content with the following HTML5:'
  id: totrans-685
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The following HTML creates a single page with an element for capturing a photo
    and an image placeholder for displaying it:'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Go to **Project Explorer**, click the right button of the mouse and select **New,**
    then **Other**, then **JavaScript**, and then **JavaScript Source File**. Create
    a new file with the name `photographer.js`.
  id: totrans-689
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following JavaScript source code into `photographer.js`:'
  id: totrans-690
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Save all files, build, and run the application on a Tizen emulator or device.
  id: totrans-692
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Tizen emulator will try to capture images using a web camera on the development
    computer, if one is available.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-695
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The camera is activated when the user clicks on the **Take a photo** label.
    After that, if the user decides to click on the back button without taking a photo,
    nothing will happen, but if he shoots a photo, the content of the hidden input
    field will be changed and the `findImages()` function will be triggered. The purpose
    of this function is to retrieve all images and to sort them by their modification
    date in descending order. The first image in the provided result set is the latest
    photo taken by the user. The `loadImage()` function processes the result and loads
    these images in the HTML5 image element with the `photoFrame` ID.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript in the `photographer.js` file uses a Tizen Content API to retrieve
    the latest image, and the privilege `content.read` must be set or `WebAPIException`
    with the type `SecurityError` will be thrown.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-698
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Video and audio files can be recorded in a Tizen web application in a similar
    way. The attribute `accept` of the HTML5 input element should be set to `video/*`
    to record videos. For capturing sounds, its value should be `audio/*`.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: 'The value of the attribute `capture` in the `<input>` tag should match one
    of the following options: `camera`, `camcorder`, `microphone`, and `filesystem`.
    Please note that its default value is `filesystem` and in this mode, the user
    is asked to select a file from the local storage.'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-701
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the `SelfCamera` sample application shipped with the Tizen SDK to learn
    how to create more advanced web applications capable of displaying video stream
    from the front camera and capturing a photo.
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating linear barcodes
  id: totrans-703
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The rest of the recipes in this chapter are dedicated to barcodes. There are
    two major groups of barcodes; they are as follows:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: '**One-dimensional** (**1D**) barcodes, which contain only lines with the same
    height and a different width. The common 1D barcode types are Code 39, Code 128,
    Code 25 Interleaved 2 of 5, UPS, EAN-8, and EAN-13.'
  id: totrans-705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Two-dimensional** (**2D**) barcodes, which depending on their type can contain
    different geometric figures and patterns. The most popular 2D barcode types are
    QR Code, DataMatrix, and Aztec Code.'
  id: totrans-706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generation and scanning are complex and specific operations depending on the
    type of barcode. The recommended and easiest way for implementation is to use
    proven third-party open source libraries.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to generate one-dimensional Code 39 and Code
    25 Interleaved 2 of 5 barcodes using JavaScript in Tizen web applications. The
    open source project, jquery-barcode, will be used because it can be easily integrated
    in applications created with the Tizen UI framework, which is based on jQuery
    Mobile and jQuery. The project is available under MIT license and can be downloaded
    from [https://code.google.com/p/jquery-barcode/](https://code.google.com/p/jquery-barcode/).
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-709
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a Tizen web application capable of generating
    linear barcodes:'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and start a new Tizen Web project for **Single Page Application**
    using **Tizen Web UI Framework**.
  id: totrans-711
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Append the following CSS class to the `styles.css` file, which is located in
    the `css` directory:'
  id: totrans-712
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Download the `jquery-barcode` library and save it at the `js` directory.
  id: totrans-714
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the content of `index.html` with the following source code:'
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Save all changes and run the application on a Tizen emulator or device.
  id: totrans-717
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-718
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application contains two buttons. Barcodes are generated upon click and
    the clicked button disappears. The height, the width, and the border of the barcodes
    are set in the `barcodeImg` CSS class.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: The library jquery-barcode takes the HTML content of an element, creates a barcode
    based on it, and replaces it with the generated image of the barcode. Both buttons
    of the sample application developed in this recipe generate barcodes from the
    `1234` input data. In real-world applications, it is recommended to display a
    loading label while the barcode is being generated.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-721
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another useful open source JavaScript library for generation of Code 39 barcodes
    is called `barcode-39.js`. It is available under MIT license and it is developed
    by Erik Zettersten. The source code is available on GitHub at [https://github.com/erik5388/barcode-39.js](https://github.com/erik5388/barcode-39.js).
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-723
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check out the next recipe to learn how to read linear barcodes and retrieve
    data from them
  id: totrans-724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning linear barcodes
  id: totrans-725
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to read linear Code 39 barcodes in Tizen web applications.
    The most popular open source JavaScript library available at GitHub (at the time
    of the writing of this book) called `BarcodeReader` will be used. It was developed
    by Eddie Larsson and it supports recognition of Code 39 as well as Code 128, Code
    93, and EAN-13 barcodes.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-727
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Insert an image with appropriate barcode at the root directory of the project.
    For example, the image can be generated using the examples in the previous recipe.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: Download `BarcodeReader` from GitHub and insert its files into the `js` directory
    of your projects. For more information about BarcodeReader, refer to [https://github.com/EddieLa/BarcodeReader](https://github.com/EddieLa/BarcodeReader).
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-730
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following three easy steps to implement a linear barcode scanning
    feature based on BarcodeReader in a Tizen web application that uses the Tizen
    Web UI framework:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the HTML for a barcode image (for example, with the name `code39``.``png`)
    as well as a paragraph and a button, as shown in the following code:'
  id: totrans-732
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Place the following code before the `initialization` function of the application:'
  id: totrans-734
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Append the following source code to the initialization function:'
  id: totrans-736
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: How it works
  id: totrans-738
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The barcode is read from image with the ID `imgBarcode` when the user clicks
    on the button with the ID `btnScan`. The image processing is started by the `scanBarcode`
    function and the result of the job is done by the JavaScript object, `barcodeScanner`
    and the `BarcodeReader` library. A web worker is used to run the script `js/DecoderWorker.js`
    in the background without affecting the overall performance of the application.
    The final result is shown in the HTML `p` tag with the ID `labelResult`. If the
    barcode cannot be recognized, the displayed value with `labelResult` will be **Error**.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_05_02.jpg)'
  id: totrans-740
  prefs: []
  type: TYPE_IMG
- en: A sample Tizen web application for scanning linear barcodes
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-742
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more details, please explore the source code of the application, which is
    provided with other example applications of this book
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating QR codes
  id: totrans-744
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Quick Response** (**QR**) is the most popular type of barcode nowadays and
    is classified as a 2D barcode.'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: QR codes were invented by the Japanese corporation **DENSO**, which is part
    of the Toyota Group. They were first used for tracking parts in automotive manufacturing.
    The usage of QR codes quickly expanded to other industries because of the excellent
    capabilities for storing data of the format. The popularity of QR codes increased
    even more with the rise of smartphones with high resolution cameras.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we'll discuss QR code generation in Tizen web applications
    using third party open source JavaScript libraries.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-748
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A third-party open source JavaScript library that is part of the project qrcode-generator
    will be used in this recipe. The source code is available on GitHub.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: Add the `qrcode.js` file to the `js` directory of your Tizen web application's
    project. This file is available at [https://github.com/kazuhikoarase/qrcode-generator/tree/master/js](https://github.com/kazuhikoarase/qrcode-generator/tree/master/js).
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-751
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to generate QR codes in your Tizen web application
    with JavaScript:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the JavaScript file at the head of the HTML file, as shown in the following
    code:'
  id: totrans-753
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Create a user interface with HTML:'
  id: totrans-755
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Implement a JavaScript function that generates QR code from the text entered
    by the user:'
  id: totrans-757
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Create a button handler that executes the JavaScript function. The recommended
    location of this code is inside the initialization function at `main.js`:'
  id: totrans-759
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: How it works
  id: totrans-761
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `generateQrCode()` function takes the user input from `inputText`, creates
    a QR code, and places it at `div` with the `barcode` ID. Please note that a regular
    expression has been used to remove invalid characters. According to the documentation
    of the third party library, the type of the QR code may vary between 1 and 10\.
    The mask pattern and the BCH code (class of cyclic redundancy check) depends on
    the specified type. The permitted values for the error correction level are:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: 'Low (L): Up to 7 percent of the encoded data can be restored'
  id: totrans-763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Medium (M): Up to 15 percent of the encoded data can be restored'
  id: totrans-764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Quartile (Q): Up to 25 percent of the encoded data can be restored'
  id: totrans-765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'High (H): Up to 30 percent of the encoded data can be restored'
  id: totrans-766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The purpose of the error correction level is to define how much backup data
    should be added to the barcode. Medium error correction has been used for the
    previous example.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: The barcode image is created and displayed using the `createImgTag()` function.
    Optionally, the size of the cell and the margin can be passed as its arguments.
    The default value of the size is two and the default margin is four times bigger.
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_05_03.jpg)'
  id: totrans-769
  prefs: []
  type: TYPE_IMG
- en: A Tizen Web application showing the generation QR codes
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-771
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The format of the data encoded as a QR code depends on its purpose. The previous
    example encodes just plain text. If you want to serialize a website, the prefix
    `URL` should be added. For storing a phone number inside a barcode, add the prefix
    `TEL`. If you want to create a QR code that stores contact information, it is
    highly recommended to stick to the `vcard` format.
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-773
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A sample Tizen web application for QR code creation based on the previous tutorial
    is provided with this book. Please use this as a reference if you have any issues
    with the implementation.
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning QR codes
  id: totrans-775
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The library `ZXing` (pronounced *Zebra Crossing*) is so popular for Android
    applications that it has become a de facto standard for scanning barcodes. It
    is created using Java and it has been ported to several other languages and platforms.
    A JavaScript port of ZXing by Lazar Laszlo has been published at GitHub under
    the name `jsqrcode`. The source code of both the main project and the JavaScript
    port are available under Apache License Version 2.0.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-777
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Obtain the source code of `jsqrcode` and copy all JavaScript files into the
    `js` directory of your project. Download `jsqrcode` from [https://github.com/LazarSoft/jsqrcode](https://github.com/LazarSoft/jsqrcode).
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
- en: The next example decodes the QR code from the image with the filename `qr``.``png`.
    Either ensure that this image is bundled at the root directory of the project
    or set another location at HTML attribute `src` of the image.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-780
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate QR code scanning in a Tizen web application:'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the JavaScript files of `jsqrcode` in the following order:'
  id: totrans-782
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Create a simple user interface using HTML, for example, the following code:'
  id: totrans-784
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Create a button handler in the initialization function. By default this function
    is situated in the `main.js` file:'
  id: totrans-786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Note
  id: totrans-788
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that while writing this recipe, the latest version of `jsqrcode`
    had several minor JavaScript errors. The same errors appear when the example application
    for scanning QR codes provided with the book was built. Despite the issues, proceed
    with the packaging and testing the application because the errors do not affect
    QR code scanning.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-790
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The usage of `jsqrcode` for scanning QR codes from images is very simple. The
    user interface of the tutorial in this recipe contains three components as follows:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: An image in which the barcode that will be scanned is loaded
  id: totrans-792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A label where the data read from the QR code will be displayed
  id: totrans-793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A button that starts the scanning procedure
  id: totrans-794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An anonymous function for processing the read data is set as a callback to the
    JavaScript object `qrcode`. The `decode()` method of the same object is called
    to scan the image. The file path and name of the barcode are taken from the `src`
    attribute of image with the ID `imgBarcode` and are provided as an argument to
    `decode()`.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_05_04.jpg)'
  id: totrans-796
  prefs: []
  type: TYPE_IMG
- en: A Tizen web application for scanning QR code from an image
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-798
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can create a Tizen web application that scans QR codes captured from the
    camera by combining the source code from this recipe with a feature for taking
    photos
  id: totrans-799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 6. Developing Social Networking Apps
  id: totrans-800
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
- en: Developing Facebook apps in Tizen
  id: totrans-802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching a Facebook news feed
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining Facebook friends list
  id: totrans-804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing Facebook profile information
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading Facebook messages
  id: totrans-806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving Facebook notifications
  id: totrans-807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a Facebook status
  id: totrans-808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering a Tizen news feed from Twitter
  id: totrans-809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a LinkedIn app in Tizen
  id: totrans-810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving LinkedIn updates
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-812
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In less than a decade, social networks have become an essential part of modern
    life. Most people love social networks although it must be said that there are
    people who hate them. Nowadays, social networks are so popular that whether you
    like them or not, sooner or later, you will have to develop a social Tizen application.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: 'New social networks evolve every day but this chapter will focus only on the
    most popular ones: Facebook, Twitter, and LinkedIn. At the same time, although
    we will not discuss it in detail, it is worth mentioning the open source social
    engine, [pump.io](http://pump.io), which powers [Identi.ca](http://Identi.ca).'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: While you are developing a Tizen application, please remember that different
    parts of the world are dominated by different social networks. A lot of networks
    with regional impact such as the **Russian VK (Вконтакте)** exist and integration
    with them should be carefully considered for applications targeting the population
    of specific countries. It is also important to keep in mind that some social networks
    are not available in certain regions. For example, in China, Facebook has not
    been available since 2008 and access to Twitter was blocked a year later.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter are based on the public APIs provided directly by
    the social networks. If you are interested in a simpler solution for authentication,
    you may try out third-party services such as [https://oauth.io/](https://oauth.io/).
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: Developing Facebook apps in Tizen
  id: totrans-817
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Facebook provides a powerful API for browsing and managing data. The authorization
    is based on OAuth 2.0\. The developer must create a Facebook application and obtain
    an access token from the user before they can access and use their sensitive information.
    Each API function requires specific permissions; the Facebook user must grant
    privileges to the application when they start using it. Otherwise, the API will
    not work.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to create a Facebook application and to obtain
    an access token using the easiest authorization grant with JavaScript.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-820
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Facebook developers' portal requires you to log in with existing Facebook
    user credentials. It is not possible to develop a Facebook application without
    being registered to the social network. Before you proceed, please ensure that
    you have a Facebook account.
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-822
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a new Facebook application:'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://developers.facebook.com/](https://developers.facebook.com/) and
    log in using your Facebook credentials.
  id: totrans-824
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Apps** and then select **Create a new app**, as shown in the following
    screenshot:![How to do it...](img/1908OS_06_01.jpg)
  id: totrans-825
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Facebook application
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter **Display Name** and **Namespace**. After that, select a category and
    click on **Create App**, as shown in the following screenshot:![How to do it...](img/1908OS_06_02.jpg)
  id: totrans-827
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter details regarding your Facebook application
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go to **Settings** and to set **App Domains**, select a contact e-mail and select
    a platform.
  id: totrans-829
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are ready to publish your Facebook application to the general public,
    go to **Status & Review**, select the **On** button and confirm your choice, as
    shown in the following screenshot:![How to do it...](img/1908OS_06_03.jpg)
  id: totrans-830
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Releasing Facebook application to everyone
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is to obtain an access token from the user, which will be used
    in the Tizen web application. The simplest way to obtain an access token through
    JavaScript placed on the domain configured at the Facebook application settings
    requires only three steps, as follows:'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an HTML file with the following source code:'
  id: totrans-833
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Provide the [https://graph.facebook.com/oauth/authorize?type=user_agent&client_id=<Facebook
    app ID>&redirect_uri=<Web site>&scope=<Facebook application permissions>](https://graph.facebook.com/oauth/authorize?type=user_agent&client_id=<Facebook%20app%20ID>&redirect_uri=<Web%20site>&scope=<Facebook%20application%20permissions>)
    URL to a Facebook user, which will redirect them to your web page.
  id: totrans-835
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace `<Facebook app ID>`, `<Web site>`, and `<Facebook application permissions>`
    with appropriate values depending on the settings and the needs of your application.
    All permissions required by the APIs used by the application should be listed
    as a value of the `scope` parameter. For example, `scope=read_stream,read_mailbox`.
  id: totrans-836
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-837
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OAuth 2.0 is an leading industry standard authorization framework. After years
    of hard work and a lot of discussions, the final version of the specifications
    was published in October 2012 at [http://tools.ietf.org/html/rfc6749](http://tools.ietf.org/html/rfc6749).
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
- en: OAuth enables third-party applications such as Tizen web applications to access
    limited resources on behalf of their owners through a web service. The Facebook
    Graph API implements the OAuth 2.0 standard and using it, for example, a Tizen
    web application can post a status update on behalf of a Facebook user. However,
    to do this, the Tizen web application must be registered as a Facebook application
    and it must have an access token, with adequate permissions, granted by the user.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
- en: 'Facebook still does not provide an SDK, especially for Tizen. So, the login
    flow demonstrated in this recipe has been built manually. Strictly following OAuth
    2.0, the Facebook Graph API provides a couple of different ways to create authorization
    grants appropriate for Tizen web applications as follows:'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: '**Authorization code**: In this scenario, the Facebook application receives
    a code and after that, exchanges it for an access token. Details regarding this
    type of authorization grant are available in section 1.3.1 of OAuth 2.0 specifications
    and example implementations using the Facebook Graph API, provided at [https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/](https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/).'
  id: totrans-841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implicit**: The implicit authorization flow is simpler but it is also less
    secure. An access token is directly issued and provided to the Facebook application
    through an HTTP redirection. This approach is specially designed for JavaScript
    and similar scripting languages because the Facebook application does not have
    to share its secret. For more information, please refer to section 1.3.2 of the
    OAuth 2.0 specifications.'
  id: totrans-842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The example in this recipe relies on the implicit authorization grant as it
    is implemented with JavaScript. Only the client ID, the redirect URL, and a list
    of required permissions are provided to the Facebook Graph API. Upon success,
    the API redirects the user agent back to the configured destination and the JavaScript
    parses the granted access token from the URL. Upon success, the access token is
    printed on the screen. If an error occurs, the **Facebook access token: unknown**
    message is displayed.'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
- en: The example in this recipe assumes that the JavaScript will be placed on a website.
    However, it is worth mentioning that Facebook offers an alternative. Desktop applications
    are allowed to set the [https://www.facebook.com/connect/login_success.html](https://www.facebook.com/connect/login_success.html)
    redirect URL so that it is possible to implement a solution for obtaining access
    tokens directly in a Tizen application.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-845
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After obtaining an access token, please refer to the subsequent recipes to learn
    how to use the most common features of the Graph API in the Tizen web application
  id: totrans-846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need more information about the Facebook login flow, please do not hesitate
    to read the documents on the developers' portal at [https://developers.facebook.com/docs/facebook-login](https://developers.facebook.com/docs/facebook-login)
  id: totrans-847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of available scopes and details regarding Facebook permissions are
    available at [https://developers.facebook.com/docs/facebook-login/permissions/](https://developers.facebook.com/docs/facebook-login/permissions/)
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching a Facebook news feed
  id: totrans-849
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most famous and easily recognizable feature of Facebook is its news feeds.
    Every user of the social network is familiar with the Facebook news feed as it
    contains up-to-date information from their friends, pages, and groups.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to retrieve and display the news feed in
    a Tizen web application using the Graph API.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-852
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start, make sure that you have a valid Facebook access token. The
    user must have granted the `read_stream` permission to the application in this
    example.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-854
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate a Facebook news feed into a Tizen
    web application:'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  id: totrans-856
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Initialize the JavaScript variable, `sAccessToken`, with the Facebook access
    token, which should be obtained as explained in the previous recipe.
  id: totrans-858
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert an unordered list with the ID `listFb` in the HTML of the application:'
  id: totrans-859
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Implement the following JavaScript function that executes an AJAX request to
    the Facebook Graph API:'
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: How it works
  id: totrans-863
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application obtains the Facebook feed using the Graph API and shows only
    the news with text messages. The profile image and the name of the user, page,
    or the group is displayed next to their status.
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_06_04.jpg)'
  id: totrans-865
  prefs: []
  type: TYPE_IMG
- en: A Tizen application retrieving a Facebook news feed
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
- en: If there is an issue with the access token text, **Access denied** will be displayed
    on the screen.
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
- en: The URL request is sent to the Facebook servers asynchronously using the jQuery
    function `$.ajax()`. If the news feed is retrieved successfully, a JSON is received
    and it is handled by the function associated with `success`. An item of the unordered
    list, `listFb`, is created for each page with a text message. Image, title marked
    with tag `h2` as well as the plain text of the messages are added as a paragraph
    to the list item. The Facebook profile image of the author of the status is retrieved
    based on their unique ID.
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-869
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the Facebook Graph API documentation to learn more about all the data
    provided with the news feed per user at [https://developers.facebook.com/docs/graph-api/reference/user/home/](https://developers.facebook.com/docs/graph-api/reference/user/home/)
  id: totrans-870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining Facebook friends list
  id: totrans-871
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Friendship is the greatest treasure, especially on Facebook. In this recipe,
    you will learn how to obtain a user's list of friends using an asynchronous HTTP
    request to Facebook Graph API. The total number of friends, the profile image,
    and the full name of each user will be displayed in the frontend of the sample
    Tizen application.
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-873
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Obtain a valid Facebook access token before proceeding to the next example.
    The permission `user_friends` is required to perform a request to the Graph API
    regarding the user's friends.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-875
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate the algorithm for obtaining a list
    of Facebook friends in a Tizen web application:'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable access to websites by appending the following line to `config.xml`:'
  id: totrans-877
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Declare the JavaScript variable `sAccessToken` and initialize it with the Facebook
    access token granted to the application by the user.
  id: totrans-879
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an HTML5 document using a Tizen Web UI Framework that includes the following
    code:'
  id: totrans-880
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-881
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Create the following JavaScript functions to obtain and sort all friends of
    the current user:'
  id: totrans-882
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Execute `getFacebookFriends()` to request the list of friends.
  id: totrans-884
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-885
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application retrieves a person's friends and shows them in an alphabetical
    order. The `getFacebookFriends()` function performs an AJAX request using jQuery
    to `/me/friends` of the Facebook Graph API. Only the `name` and `picture` fields
    per user are requested.
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: If the AJAX request is completed without any issues, the result is handled at
    the method `success`. Friends are sorted alphabetically by the JavaScript function
    `sort()` and the function `compareName()` that acts as comparator. A row with
    the profile image and the name of each user is added to the HTML5 list with the
    ID `listFbFriends`. Finally, the total number of friends are added to a span with
    the ID `labelFbFriendsCount` at the header of the page.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
- en: Please note that if the asynchronous request to Facebook Graph API fails, the
    **Error** message will be displayed on the screen. The request may fail due to
    different issues, for example, invalid access token or lack of `user_friends`
    permissions.
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-889
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For details regarding the API for obtaining Facebook friends, please have a
    look at the Graph API documentation at [https://developers.facebook.com/docs/graph-api/reference/user/friends/](https://developers.facebook.com/docs/graph-api/reference/user/friends/)
  id: totrans-890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visit [https://developers.facebook.com/docs/graph-api/reference/user/friends/](https://developers.facebook.com/docs/graph-api/reference/user/friends/)
    to see the full list of fields available per user.
  id: totrans-891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing Facebook profile information
  id: totrans-892
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create an example application that reads the public
    information of the Linux Foundation from their pages. The information is retrieved
    using the Facebook Graph API.
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-894
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to retrieve profile information using the Facebook
    Graph API and to display it in a Tizen web application:'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  id: totrans-896
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Create a HTML `div` element with the ID `info`.
  id: totrans-898
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a JavaScript function that executes the request to Facebook:'
  id: totrans-899
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Call the function at an appropriate place inside your source code with the
    ID of a page or Facebook user. For example:'
  id: totrans-901
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-902
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: How it works
  id: totrans-903
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application performs an asynchronous request using the Facebook user ID.
    The request retrieves only the name, basic information, and the photo of the selected
    user. These fields are public and they do not require any permission. If a problem
    occurs, a label with the **Error** text is shown on the screen.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
- en: The previous example source code retrieves information about the Facebook page
    of the Linux Foundation through its ID `41911143546`. To find the ID of another
    page or profile, extract its name from its URL, append it to the end of [http://graph.facebook.com/](http://graph.facebook.com/),
    and retrieve the ID from the returned JSON. For example, the Facebook page of
    the Linux Foundation is [https://www.facebook.com/TheLinuxFoundation](https://www.facebook.com/TheLinuxFoundation);
    so, its name is `TheLinuxFoundation` and in this case, the URL to the Graph API
    should be [http://graph.facebook.com/TheLinuxFoundation](http://graph.facebook.com/TheLinuxFoundation).
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer to retrieve information about the current user, use `me` instead
    of the user ID in the URL and provide an access token. For example, the [https://graph.facebook.com/me?fields=name&access_token=](https://graph.facebook.com/me?fields=name&access_token=)
    URL finds the full name of the user identified by an access token, which should
    be appended to its end.
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_06_05.jpg)'
  id: totrans-907
  prefs: []
  type: TYPE_IMG
- en: Information about the Facebook page of the Linux Foundation
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-909
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please read the documentation provided by Facebook to learn details about the
    permissions and the other available fields for profiles at [https://developers.facebook.com/docs/graph-api/reference/user/](https://developers.facebook.com/docs/graph-api/reference/user/)
  id: totrans-910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading Facebook messages
  id: totrans-911
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Messages are another key Facebook feature that quickly become popular to all
    users around the world. In this recipe, we will create a sample Tizen application
    for browsing conversations using the Facebook Graph API.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-913
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start with the development of the following example, please make
    sure that you have a valid access token granted by a Facebook user. The permission
    `read_mailbox` is required to perform the actions in this recipe.
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-915
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following instructions to create a simple Tizen web application
    to browse Facebook messages:'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and start a new Tizen Web Project.
  id: totrans-917
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Tizen Web UI Framework** and **Single Page Application** from the available
    options of the wizard.
  id: totrans-918
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Append the following line to `config.xml` in order to allow access to Internet
    sites:'
  id: totrans-919
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Replace the content of `index.html` with the following source:'
  id: totrans-921
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Include an external JavaScript file with functions related to the Facebook
    Graph API:'
  id: totrans-923
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Insert a list view and a button inside the content of the page:'
  id: totrans-925
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Create a new file with the name `facebook.js` in the `js` directory and save
    the following code into it:'
  id: totrans-927
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Replace the value of the `sAccessToken` variable with an access token granted
    by a Facebook user:'
  id: totrans-929
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Proceed with the implementation of a JavaScript function, which makes an asynchronous
    request to Facebook servers:'
  id: totrans-931
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Append the following code snippet to an initialization function in the `main.js`
    file:'
  id: totrans-933
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Save all changes and run the application on a Tizen emulator or device.
  id: totrans-935
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-936
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application executes an asynchronous HTTP request to Facebook servers using
    `jQuery.ajax()`. Because of this, a rule for accessing website should be added
    to the configuration file of the application as shown in step 3.
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
- en: The user interface of the application consists of a list and a back button,
    which are created using HTML5 in `index.html`. Initially, the list is empty and
    the back button is hidden.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
- en: The `getFacebookMessages()` function is executed with the launch of the application.
    It performs the HTTP request to the Facebook servers and on success, stores the
    received data in variable messages. After that, it calls the `showMessages()`
    function, which displays the list of people with whom the user has communicated.
    The `bindListItem()` function associates a click with any of these people with
    the `showThread()` function. Facebook conversations are organized into threads;
    so, the purpose of the `showThread()` function is to display all messages for
    the selected thread in the list.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
- en: The back button has the ID `btnBack` and it is displayed after the last message.
    Please note that the button is shown only if the user has selected a message thread.
    Upon clicking on it, the function `showMessages()` is called to hide the back
    button and to show again the list of contacted people.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-941
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have a look at the official documentation for details regarding accessing a
    person's inbox using the Facebook Graph API at [https://developers.facebook.com/docs/graph-api/reference/user/inbox/](https://developers.facebook.com/docs/graph-api/reference/user/inbox/)
  id: totrans-942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are interested in the integration of chat capabilities inside your application,
    please refer to the documentation of Facebook Chat API at [https://developers.facebook.com/docs/chat/](https://developers.facebook.com/docs/chat/)
  id: totrans-943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving Facebook notifications
  id: totrans-944
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Facebook Graph API also provides an interface for managing notifications
    through HTTP requests. In this recipe, you will learn how to retrieve and handle
    Facebook notifications.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-946
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source code in this recipe requires the `manage_notifications` permission.
    Please obtain an access token from the Facebook user, which grants this permission
    to your application.
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-948
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate the Graph API for notifications in
    a Tizen web application:'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that access to websites is permitted by adding the following line
    to `config.xml`:'
  id: totrans-950
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-951
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Initialize the JavaScript variable `sAccessToken` with a valid Facebook access
    token.
  id: totrans-952
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an unordered HTML5 list with the ID `listNotifications`:'
  id: totrans-953
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  id: totrans-954
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Create a JavaScript function that sends an asynchronous HTTP request to Facebook
    servers to retrieve notifications:'
  id: totrans-955
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Call the `getFacebookNotifications()` function when you want to retrieve notifications
    and load them into the list.
  id: totrans-957
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-958
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTTP request for retrieving notifications and the response of the Facebook
    Graph API is similar to the API for the news feed. You will notice that the source
    code in this recipe is almost the same as for the *Fetching Facebook news feed*
    recipe.
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
- en: The `getFacebookNotifications()` function makes an asynchronous HTTP request
    using `jQuery.ajax()`. On success, the result is loaded into an HTML list with
    ID. If an error occurs, the **Error** text is displayed in the same list.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-961
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the Facebook Graph API documentation for more details related to notifications
    at [https://developers.facebook.com/docs/graph-api/reference/user/notifications/](https://developers.facebook.com/docs/graph-api/reference/user/notifications/)
  id: totrans-962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a Facebook status
  id: totrans-963
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have discussed how to get a news feed, list of friends,
    profile information, messages, and notifications. Now, it is time to do something
    more interesting. Let's post a Facebook status.
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-965
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A valid access token is required to publish content on behalf of the user through
    the Facebook Graph API. According to the Facebook developer's documentation, the
    permission `publish_stream` has to be used when posting a message to a Facebook
    page. To post on the timeline of a user, the permission `publish_actions` must
    be used.
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-967
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a JavaScript function to update a Facebook
    status in the Tizen web application:'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable access to websites by inserting the following line into `config.xml`:'
  id: totrans-969
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Declare a JavaScript variable, `sAccessToken`, with global scope and initialize
    it with a valid access token.
  id: totrans-971
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a JavaScript function that executes the request to Facebook:'
  id: totrans-972
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  id: totrans-973
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Note
  id: totrans-974
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is just a sample. If you plan to use the `updateFacebookStatus()` function
    in production code, please replace all `console.log()` executions with appropriate
    handlers.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-976
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `updateFacebookStatus()` function performs an asynchronous HTTP POST request
    to publish a Facebook status on behalf of the user through the Graph API. The
    text of the status is provided as an argument to the function. For example, the
    following line will try to post the message Tizen to the timeline of the user:'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  id: totrans-978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: The sample implementation in this recipe is connected to a GUI; so, operation
    statuses are printed directly onto the console. On success, the **Status updated**
    message will appear in the log.
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-980
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about publishing using the Facebook Graph API, please visit
    [https://developers.facebook.com/docs/graph-api/using-graph-api/#publishing](https://developers.facebook.com/docs/graph-api/using-graph-api/#publishing)
  id: totrans-981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering a Tizen news feed from Twitter
  id: totrans-982
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will conquer another popular social network. Twitter was
    launched in 2006 as a microblogging platform and it is famous for the limitation
    of 140 characters per message. The restriction of the message length has been
    set for compatibility with SMS.
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
- en: Due to security issues, the usage of the Twitter API of custom web and mobile
    applications has recently become a bit harder. In this recipe, we will authenticate
    the user from a server-side script and the retrieved data will be passed to a
    Tizen web application, which will process the data using JavaScript.
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-985
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need a Twitter account to create an application. Please make sure that you
    are signed up to Twitter before you proceed.
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-987
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a Twitter application in less than five
    minutes:'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
- en: Visit the website [https://dev.twitter.com/apps/](https://dev.twitter.com/apps/)
    and log in with your Twitter credentials.
  id: totrans-989
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create New App**.
  id: totrans-990
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Application details**, agree the developer rules, and click on **Create
    your Twitter application**.
  id: totrans-991
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-992
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that the callback URL can be left blank in our case.
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **API Keys** tab of your application and click on **Create my access
    token**.
  id: totrans-994
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you have successfully created a Twitter application, you can proceed
    with the development of a server-side application that will transfer Twitter data
    to a Tizen application on a mobile device. Perform the following steps to create
    a very simple PHP script that filters the 10 most recent tweets about #tizen:'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
- en: Download the open source library `TwitterOAuth` from GitHub and place it on
    the server at [https://github.com/abraham/twitteroauth](https://github.com/abraham/twitteroauth).
  id: totrans-996
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a PHP script and insert the following source code into it:'
  id: totrans-997
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  id: totrans-998
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Include TwitterOAuth using the PHP built-in function `require_once()`. Please
    change the path if you have installed the library on a different location.
  id: totrans-999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE131]'
  id: totrans-1000
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Assign the API key and secret key, as well as the access token and its secret
    key to the PHP variable on the first lines of the script.
  id: totrans-1001
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, it is time to develop a Tizen application that will read Twitter data
    from the PHP script and will display it to the user. Launch the Tizen IDE and
    create or update a new or new an existing Tizen web application by performing
    the following steps:'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable access to your server by inserting the following line into `config.xml`:'
  id: totrans-1003
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  id: totrans-1004
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Create an HTML5 unordered list for displaying the tweets:'
  id: totrans-1005
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Create a JavaScript function that retrieves data from the sever:'
  id: totrans-1007
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Replace the value of `url` with the URL of your Twitter application:'
  id: totrans-1009
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Execute the JavaScript function to populate the HTML5 list:'
  id: totrans-1011
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  id: totrans-1012
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: How it works
  id: totrans-1013
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The PHP script deployed on the server retrieves tweets about #tizen using Twitter
    REST API v1.1 and the open source PHP library `TwitterOAuth`. The Tizen web applications
    receive the data from the PHP script and display it in a list as shown in the
    following screenshot. If this fails, an **Error** message is displayed to the
    user.'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_06_06.jpg)'
  id: totrans-1015
  prefs: []
  type: TYPE_IMG
- en: 'A Tizen web application showing the latest tweets about #tizen'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
- en: 'Version 1.1 of the Twitter REST API provides a variety of methods for Twitter
    data management. In this recipe, `search/tweets` was used to return a collection
    of ten recent tweets about #tizen. According to the documentation of the API,
    the number of returned tweets and the hash tag are defined in GET parameters count
    and `q` of the URL:'
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  id: totrans-1018
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: The Tizen web application grabs data using `jQuery.ajax()`, iterates over the
    collection of tweets, and displays the text messages as well as the username and
    the profile picture of the author of each tweet.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1020
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the official documentation to use the full capabilities of Twitter RESP
    API v1.1 at [https://dev.twitter.com/docs/api/1.1](https://dev.twitter.com/docs/api/1.1)
  id: totrans-1021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details about searching tweets using the API are also available at [https://dev.twitter.com/docs/using-search](https://dev.twitter.com/docs/using-search)
    and [https://dev.twitter.com/docs/api/1.1/get/search/tweets](https://dev.twitter.com/docs/api/1.1/get/search/tweets)
  id: totrans-1022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a LinkedIn app in Tizen
  id: totrans-1023
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LinkedIn is the most popular professional social network. It is an excellent
    tool for maintaining professional contacts. Although people rarely spend as much
    time on LinkedIn as on Facebook or Twitter, it is still very useful.
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
- en: This recipe contains a tutorial on how to create a LinkedIn application, how
    to use the REST API, and how to develop a server-side script for management of
    access tokens.
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1026
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The authentication of the LinkedIn API is based on OAuth 2.0 and it has a lot
    of similarities with Facebook. The only requirement to create a LinkedIn application
    is to have a LinkedIn account; so, before proceeding, please ensure that you are
    signed up for the professional social network.
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1028
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please create a LinkedIn application by performing the following easy steps:'
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://www.linkedin.com/secure/developer](https://www.linkedin.com/secure/developer).
  id: totrans-1030
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add New Application**.
  id: totrans-1031
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the company information and application details.
  id: totrans-1032
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the OAuth permissions and set a redirect URL.
  id: totrans-1033
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  id: totrans-1034
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a website for retrieving access tokens. Although this can be achieved
    with JavaScript due to security reasons, it is recommended to rely on server-side
    scripting languages because the API secret must be included at the source code.
    The following tutorial shows a simple implementation approach with PHP:'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a PHP script that corresponds to the location pointed as a redirect
    URL and place in it the following source code:'
  id: totrans-1036
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  id: totrans-1037
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Replace the values of the previous four PHP variables with the API key and
    secret key, a long unique string for state, and the configured redirect URI:'
  id: totrans-1038
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Provide the following URL to the user to authenticate them:'
  id: totrans-1040
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.linkedin.com/uas/oauth2/authorization?response_type=code&client_id=<API
    key>&scope=<application''s permissions>&state=<state>&redirect_uri=<redirect URI>](https://www.linkedin.com/uas/oauth2/authorization?response_type=code&client_id=<API%20key>&scope=<application''s%20permissions>&state=<state>&redirect_uri=<redirect%20URI>)'
  id: totrans-1041
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace `<API key>` and `<redirect URI>` with the generated key, set the redirect
    URI, and set a unique long string for `<state>`. Provide a list of permissions
    required by the application as a value of `<application permission>`. The permissions
    are divided by commas, for example, `scope=r_basicprofile,rw_nus`.
  id: totrans-1042
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-1043
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LinkedIn authentication is based on OAuth 2.0; so, the flow for the generation
    of an access token contains two steps. In the first step, the PHP script obtains
    an authorization code. After that, during the second step, the authorization code
    is exchanged for an access token.
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-1045
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that a similar authentication flow is also supported by Facebook,
    although we used a simpler but less secure solution known as an implicit authorization
    grant in the *Developing a Facebook app in Tizen* recipe. It is possible to apply
    authentication with exchange of code for an access token for Facebook as well.
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
- en: The implicit approach is less secure because an access token is directly issued
    to the client. This solution is optimized for clients implemented in web browsers
    with JavaScript or other scripting languages. For more information about the authorization
    grant, please explore the following section of the proposed OAuth 2.0 standard
    at [http://tools.ietf.org/html/rfc6749#section-1.3](http://tools.ietf.org/html/rfc6749#section-1.3).
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
- en: The example relies on PHP only because of the personal preferences of the author.
    Feel free to implement similar solutions with any other server-side programming
    language if you want. Please review the code in this example as a proof of concept
    and improve it if you plan to use it in production.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
- en: The OAuth 2.0 redirects the URL saved in application settings, which must match
    the location of the server-side script. The state parameter of the initial URL
    is mandatory. It acts as a protection mechanism from cross-site request forgery.
    Its value should be a long string of text that is hard to be guessed. If there
    is a mismatch of the state value, the PHP script will exit with the **Cross-site
    request forgery detected** message.
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
- en: On success, the PHP scripts print the retrieved access token on the screen.
    In case of error, the **Unable to retrieve access token** message is displayed.
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, the user must grant privileges to the
    LinkedIn application when they start using it. The user is informed about all
    permissions required by the application:'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_06_07.jpg)'
  id: totrans-1052
  prefs: []
  type: TYPE_IMG
- en: Dialog granting access to a LinkedIn application
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
- en: Permissions depend on the API that will be used by the application. The full
    list of available programming interfaces and the permissions that they require
    can be viewed at [https://developer.linkedin.com/apis](https://developer.linkedin.com/apis).
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1055
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LinkedIn provides a very good guide and a lot of examples about authentication
    to their API using OAuth 2.0\. It is highly recommend that you extend the knowledge
    gained from this recipe by exploring the [https://developer.linkedin.com/documents/authentication](https://developer.linkedin.com/documents/authentication)
    document.
  id: totrans-1056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving LinkedIn updates
  id: totrans-1057
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe contains an example usage of the LinkedIn REST API for retrieving
    shared content by the connections of the user. Instructions on how to integrate
    the API in a Tizen web application and to get the twenty most recent updates with
    shared information are included.
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1059
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A LinkedIn application has to be created and an access token has to be obtained
    before proceeding with this recipe. If you have not yet created a LinkedIn application,
    please read the previous recipe to prepare.
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1061
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The LinkedIn API can be integrated into a Tizen web application. For example,
    the following tutorial explains how to show a list of shared LinkedIn updates:'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow access to websites by inserting the following line in `config.xml`:'
  id: totrans-1063
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Place an unordered list to display LinkedIn updates in the HTML5 content of
    the application:'
  id: totrans-1065
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  id: totrans-1066
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Implement JavaScript that retrieves data using the LinkedIn API, as shown in
    the following code:'
  id: totrans-1067
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  id: totrans-1068
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Replace the value of the previous JavaScript variable with the access token
    of the user:'
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE143]'
  id: totrans-1070
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: How it works
  id: totrans-1071
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An asynchronous HTTPS request to the LinkedIn servers is performed using `jQuery.ajax()`.
    The URL is formatted according to the LinkedIn API documentation for share and
    network updates. The access token is appended to the end of the following URL:'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
- en: '''[https://api.linkedin.com/v1/people/~/network/updates?type=SHAR&count=20&oauth2_access_token=](https://api.linkedin.com/v1/people/~/network/updates?type=SHAR&count=20&oauth2_access_token=)'''
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
- en: The number of returned results is set as a value of the `count` parameter. The
    parameter type defines a filter of the updates. In this case, only sharing updates
    are selected. The full list of supported types is available at [https://developer.linkedin.com/documents/network-update-types](https://developer.linkedin.com/documents/network-update-types).
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
- en: The `x-li-format` header is added to the HTTPS request to set JSON as the desired
    format of the response. If data is successfully retrieved, it is loaded in the
    unordered HTML5 list with ID `listUpdates`. The title, description, and the short
    URL of each shared item is displayed. The names of the author of the update as
    well as their profile image are also displayed. Otherwise, an error message is
    shown on the screen.
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1076
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For all details regarding the full capabilities of the LinkedIn API for network
    updates and statistics, please check the official documentation at [https://developer.linkedin.com/documents/get-network-updates-and-statistics-api](https://developer.linkedin.com/documents/get-network-updates-and-statistics-api)
  id: totrans-1077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 7. Managing the Address Book and Calendar
  id: totrans-1078
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving all contacts
  id: totrans-1080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new contact
  id: totrans-1081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a contact
  id: totrans-1082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a contact to vCard
  id: totrans-1083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving all tasks
  id: totrans-1084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new task
  id: totrans-1085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a task
  id: totrans-1086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new event
  id: totrans-1087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting an event
  id: totrans-1088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving all events
  id: totrans-1089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting an alarm
  id: totrans-1090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-1091
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The address book and the calendar are well-known applications on both feature
    phones and smartphones. Of course, Tizen is not an exception and these features
    and applications are built into the platform. Tizen web applications have full
    access to the data of these vital applications though a couple of APIs.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
- en: Tizen SDK brings Contacts and Calendar APIs to control the content of the address
    book and the calendar using JavaScript. Both APIs are capable of creating, updating,
    deleting, and reading items. Despite the powerful capabilities of the interfaces
    and their methods, the usage remains simple and it will be explained with a lot
    of examples in the following 11 recipes.
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving all contacts
  id: totrans-1094
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe offers a tutorial on how to retrieve and display a list of contacts
    and their phone numbers using the Tizen Contacts API.
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1096
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate the Contacts API in a Tizen web application
    and to load all contacts and their phone numbers inside an HTML5 list:'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following privilege to the `config.xml` file to allow the usage of
    the Contacts API:'
  id: totrans-1098
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**http://tizen.org/privilege/contact.read**'
  id: totrans-1099
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modify an appropriate HTML file of the application, for example, `index.html`,
    and add to it the content and an unordered list:'
  id: totrans-1100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  id: totrans-1101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Place the following source code into an existing file or create a new JavaScript
    file:'
  id: totrans-1102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Place a call to the JavaScript function to initialize the list with data at
    an appropriate state of the application, as shown in the following code:'
  id: totrans-1104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  id: totrans-1105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: How it works
  id: totrans-1106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JavaScript function `retrieveContacts()` invokes the `find()` method of
    the Tizen Contacts API and passes to it callback functions, which are triggered
    upon success or upon failure. The `contact.read` permission is required because
    without it, the operation will not be completed successfully. If a problem occurs,
    the previous sample implementation will display an error message in the HTML5
    element with the ID `listContacts`.
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_07_01.jpg)'
  id: totrans-1108
  prefs: []
  type: TYPE_IMG
- en: List all contacts from the address book
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the subsequent recipes to learn how to add, update, delete,
    and export contacts from the address book. A project with the source code of a
    Tizen web application for the management of the contacts from the address book
    is provided with this book.
  id: totrans-1111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please read the documentation for more details regarding the Contacts API at
    [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/contact.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/contact.html)
  id: totrans-1112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new contact
  id: totrans-1113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tizen Contacts API offers a couple of different approaches for adding a
    new contact to the address book as well as for updating an existing contact. This
    recipe walks you through how to collect user details and to save them as a new
    contact. HTML5 is used to create a simple interface and JavaScript is used to
    validate user input and store the data in the address book.
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure that the following privilege has been added to `config.xml` of the
    Tizen web application before starting the tutorial for adding new content to the
    address book:'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
- en: '**http://tizen.org/privilege/contact.write**'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
- en: This privilege is required by the `add()` method of the `AddressBook` interface,
    which saves contacts to the address book.
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a user interface for collecting contact
    details using HTML5 and to save them using JavaScript:'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a page using the Tizen Web UI Framework by inserting the following HTML:'
  id: totrans-1121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  id: totrans-1122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'Create a dialog that will be displayed if any errors occur:'
  id: totrans-1123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  id: totrans-1124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Implement a function that displays the dialog with some appropriate text:'
  id: totrans-1125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Create a JavaScript function that saves the name and the phone number of a
    new contact:'
  id: totrans-1127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'In the function for initialization of the application, append the following
    source code:'
  id: totrans-1129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  id: totrans-1130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Note
  id: totrans-1131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The page that was created in this recipe can be easily integrated in a Tizen
    web application that also contains a page with the list of all contacts. Take
    a look at the source code of the sample contacts application provided with this
    book.
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-1133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The user interface implementation contains two components that are created
    in the first step of the tutorial: a page and a pop-up dialog. Input boxes for
    the first and the last name as well as for a phone number of the new contact are
    included on the page. The type of the input box for the phone number is set to
    `tel` so that a convenient keypad will be provided when the user enters information
    in this field. Take a look at the following screenshot. It is a screenshot that
    has been taken from the sample application source code, which is provided with
    the book.'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_07_02.jpg)'
  id: totrans-1135
  prefs: []
  type: TYPE_IMG
- en: The user interface for adding a new contact to the Tizen address book
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
- en: 'The `saveContact()` function creates a JavaScript object from the `Contact`
    interface and saves it to the address book through the `add()` method of the `AddressBook`
    interface. In the last step of the tutorial, a code for handling buttons and initialization
    of the dialog is implemented. A function that validates the data and invokes `saveContact()`
    is bound to the button with the text `Save`. The same function catches all exceptions
    that may occur and displays their error messages to the user in a dialog. Upon
    success, the following code snippet transfers the user to the `#list` page, which
    has been created in the previous recipe:'
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  id: totrans-1138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'As a consequence, the jQuery Mobile event `show` will be generated for the
    `#list` page. It is recommend to bind this event at the initialization of the
    application to a function that reloads the list of contacts, for example:'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  id: totrans-1140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: There's more
  id: totrans-1141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An alternative way to add a new contact is to create a JavaScript object from
    the `Contact` interface by specifying the contact details using the vCard format.
    For example, the following code snippet creates an object for a person with the
    name `Indiana Jones` and phone number `12345678` from data provided as vCard Version
    3.0:'
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  id: totrans-1143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: If you want to modify the contact details of a person from an address book,
    please use the `update()` function from the `AddressBook` interface. The usage
    is the same as for the `add()` function, and the JavaScript object from the `Contact`
    interface must be provided as an argument.
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The example in this recipe saves only the name and a single phone number of
    a contact but the Tizen Contact API is not restricted only to this information.
    Refer to the following documentation to explore all available attributes of the
    Contact interface that can be saved into the address book: [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/contact.html#::Contact::Contact](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/contact.html#::Contact::Contact).'
  id: totrans-1146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a contact
  id: totrans-1147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A good application has to be prepared for any apocalypse that may occur. Keep
    in mind that anything can happen and for example, the user might decide to delete
    the contact details of his ex-wife. Luckily, the Tizen Contact API is easy to
    use. This recipe explains how to remove a single contact or even a whole batch
    of contacts. It also includes a tutorial for the integration of a contact removal
    feature into the application developed following the instructions from the first
    recipe of this chapter, *Retrieving all contacts*.
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tizen web applications that have a feature for removing contacts from the address
    book must have the following privilege set in their `config.xml` file:'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
- en: '**http://tizen.org/privilege/contact.write**'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
- en: The same privilege is required by the functions `remove()`, which deletes a
    single contact, and `removeBatch()`, which deletes several contacts at the same
    time.
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to improve the sample application from the previous
    recipe about retrieving all contacts and to delete the whole contact information
    of a person with a single click:'
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
- en: Launch a Tizen IDE and load the Tizen Web application to retrieve all contacts.
  id: totrans-1155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `config.xml` and append the required privileges for contact removal. The
    following line should exist in the source of this file:'
  id: totrans-1156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  id: totrans-1157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Create a JavaScript function that deletes a contact from the address book:'
  id: totrans-1158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  id: totrans-1159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Implement a JavaScript function that handles user selection and invokes the
    function created on the previous step with the ID of the selected contact:'
  id: totrans-1160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  id: totrans-1161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'Modify the `retrieveContacts()` function and bind the click events of the list
    items to the handlers to delete a contact:'
  id: totrans-1162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: How it works
  id: totrans-1164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `bindClick()` function binds the click events to an anonymous function that
    tries to delete a person and all their contacts from the address book based on
    their ID. Upon success, the `retrieveContacts()` function is called to reload
    the list of all contacts. If an exception is caught, the error message will be
    displayed in a pop up.
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
- en: 'To include the removal feature in the user interface of the application, you
    have to edit the `retrieveContacts()` function as described in the fifth step
    of the recipe. The `bindClick()` function expects two arguments: the object that
    represents the list item and the contact ID. It has to be invoked right after
    the creation of the list item:'
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  id: totrans-1167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: The Tizen Contact API provides the `remove()` function from the `AddressBook`
    interface for contact removal. The identifier of the contact is the only argument
    of this function. If the contact is not found or any other error is there, the
    function throws `WebAPIException`. Remember to add the exception handler anytime
    you use `remove()`, as shown in the previous example.
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  id: totrans-1169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is also possible to delete several contacts at the same time. Combining
    the functions `find()` and `removeBatch()` allows you to remove all contacts based
    on a specific filter. The following code snippet demonstrates how to delete all
    contacts with a specified first name:'
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  id: totrans-1171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'The following example executes the function and deletes all the contacts of
    people with the first name `John`:'
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  id: totrans-1173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: The `contactsRemoved()` function is executed successfully. All errors that might
    occur are processed by the `printError()` function.
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
- en: The applied instance of `AttributeFilter` is used with the matching flag `CONTAINS`,
    which ensures a case insensitive string comparison of the first name. The filter
    will select all contacts with the first name `John` as well all other names that
    contain John such as, Johnny. You can learn more about the filter and the other
    available matching flags from the official documentation at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/tizen.html#::Tizen::FilterMatchFlag](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/tizen.html#::Tizen::FilterMatchFlag).
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The example in this recipe depends on the source code from the previous recipes
    *Retrieving all contacts* and *Adding a new contact*. The source code of a sample
    application that combines the three recipes is provided with this book.
  id: totrans-1177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a contact to vCard
  id: totrans-1178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you transferred contacts to another device? Have you synchronized contacts
    from a mobile device with a computer or a cloud? Have you sent a contact to someone
    else as an e-mail or MMS? All these operations are basic for all smartphones and
    they require an export from the address book.
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will guide you on how to serialize and export data from the address
    book using the Contact API for Tizen web applications.
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The key word of this recipe is vCard. This is a standard file format for storing
    business card information. It appeared in the mid 90s and initially was used primarily
    in e-mails. Today, vCards are also used for contact data serialization on mobile
    devices and barcodes. Several versions of the format have been standardized: 2.1,
    3.0, and 4.0.'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
- en: Each vCard has a prefix of `BEGIN:VCARD` and suffix of `END:VCARD`. The version
    of the vCard should also be specified at the beginning of the vCard's text. The
    standards determine a set of predefined types such as `FN`, `TITLE`, `ADR`, and
    `TEL` and many more that are used to describe the full contact information. The
    most commonly known file extension for vCard is `.vcf`.
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Retrieve a contact from the address book of Tizen and use the `convertToString()`
    function to export it, as shown in the following code snippet:'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  id: totrans-1186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Please note that it in this case, `console.log` has been used only as a simple
    example. In a real application, you can do multiple things with a vCard. For example,
    you can share it with another application using the Tizen operation ID [http://tizen.org/appcontrol/operation/share](http://tizen.org/appcontrol/operation/share).
    The usage of this operation is similar to the one in the *Launching video in external
    player* recipe in [Chapter 5](ch05.html "Chapter 5. Creating Multimedia Apps"),
    *Creating Multimedia Apps*.
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-1188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `convertToString()` method of the `Contact` interface has a single argument,
    which specifies the desired export format. It is optional. As of Tizen 2.2.1 SDK,
    the only supported format for export by Tizen Contacts API is vCard version 3.0
    and it can be set using a string `VCARD_30`.
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample output of an exported contact from **John Smith** with the phone number
    **12345678** is as follows:'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  id: totrans-1191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Note
  id: totrans-1192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that the `convertToString()` function was not supported by the Tizen
    emulator provided with the SDK for older versions of the platforms such as Tizen
    2.0 Magnolia. If you are targeting older Tizen releases, please test your application
    on a real device.
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are interested in more information regarding the standard vCard format,
    you can explore the documents provided by the Internet Engineering Task Force
    (IETF) at [http://tools.ietf.org/html/rfc6868](http://tools.ietf.org/html/rfc6868)
  id: totrans-1195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving all tasks
  id: totrans-1196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tizen calendar is capable of storing both tasks and events. This recipe
    as well as the subsequent two recipes are dedicated to tasks. The result of the
    combination of the three tutorials about finding all tasks, adding, and deleting
    a task is a Tizen web application for a `TO-DO` list for which source code is
    provided with the book.
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Tizen SDK provides a Tizen Calendar API for management of the tasks and
    events. Both of them are calendar items and share many properties. This recipe
    will not modify any data, so the only required privilege is `calendar.read`. The
    `calendar.write` privilege has to be added to applications that add, change, or
    remove tasks and/or events.
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate the Calendar API into your Tizen web
    application and to show a list of all tasks:'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
- en: Add the **http://tizen.org/privilege/calendar.read** privilege to read calendar
    items to the `config.xml` file of your Tizen web application.
  id: totrans-1202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an HTML list to display the tasks:'
  id: totrans-1203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  id: totrans-1204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'Implement the following JavaScript function to retrieve and show all tasks:'
  id: totrans-1205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  id: totrans-1206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Call the `retrieveTasks()` function to load the to-do list.
  id: totrans-1207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-1208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `retrieveTasks()` function gets an aggregation of all calendars through
    the `getUnifiedCalendar()` function of the Calendar API on the operating system,
    which guarantees access to all available tasks. After that, `retrieveTasks()`
    calls the `find()` function and provides the functions `showTasks()` and `error()`
    as callbacks. Upon success, `showTasks()` iterates over an array of retrieved
    tasks and represents them graphically in an HTML unordered list with the ID `listTasks`,
    which was created in step 2\. The Tizen web application created the file which
    includes the source code from this recipe should look just like the following
    screenshot:'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_07_03.jpg)'
  id: totrans-1210
  prefs: []
  type: TYPE_IMG
- en: Show all tasks
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A lot of different features related to the calendar can be integrated in a Tizen
    web application. Study the documentation of the `Calendar` interface and its `find()`
    method to see all available options to define custom filters using an instance
    of `AbstractFilter` or to set ordering rules using an instance of `SortMode` at
    [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#findidp349704](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#findidp349704).
  id: totrans-1213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new task
  id: totrans-1214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tutorial provided in this part of the chapter describes how to add a new
    task to a calendar. A simple user interface will be created using the Tizen Web
    UI framework and its purpose will be to prompt for task details. The source code
    in this recipe uses the Calendar API to access a calendar and store data in it.
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a user interface to collect details and
    create a new task:'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
- en: Add a privilege for editing calendar events and tasks to `config.xml` of the
    application **http://tizen.org/privilege/calendar.write**.
  id: totrans-1218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Develop a user interface using HTML5 that will gather the information about
    the task. The following source code represents a single page created with the
    widgets provided by the Tizen Web UI Framework:'
  id: totrans-1219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  id: totrans-1220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'Implement a JavaScript function for storing tasks:'
  id: totrans-1221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  id: totrans-1222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Append the following source code to the initialization function of the application:'
  id: totrans-1223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  id: totrans-1224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: How it works
  id: totrans-1225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The user interfaces created in step 2 should look like the following screenshot:'
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_07_04.jpg)'
  id: totrans-1227
  prefs: []
  type: TYPE_IMG
- en: Adding a new task to the Tizen calendar
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
- en: The click event of the **Save** button is handled by a JavaScript anonymous
    function, which is implemented in the last step of the tutorial. This function
    gathers the values of entered information about a task summary, description, and
    date. The collected data is being validated and a `TZDate` object is constructed
    based on the value of the date. If the summary or the description is empty, a
    dialog with the error message **Please set task details** is displayed to the
    user.
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
- en: The `saveTask()` function is called to create the new task. It obtains a JavaScript
    object for an aggregation of all calendars and passes an object of the type `CalendarTask`
    to its method `add()`.
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
- en: Please note that according to the documentation, the `add()` method expects
    as an argument an instance of `CalendarItem`. Both interfaces `CalendarTask` and
    `CalendarEvent` implement `CalendarItem` so that their instances can be passed
    to `add()` as demonstrated in the code snippet of this recipe.
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-1232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The type of the task item in the Tizen calendar is defined by the `VTODO` format.
    It is also possible to create an object that represents a task using a string
    formatted following the rules of `VTODO`. For example:'
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  id: totrans-1234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: See also
  id: totrans-1235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to change the details of an existing task, use the `update()` method
    of the `Calendar` interface and provide as an argument the object of the task
    that has to be modified. Other useful functions for creating or editing multiple
    calendar items at the same time are `addBatch()` and `updateBatch()`. Please check
    the documentation for details regarding any of these functions at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::Calendar](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::Calendar).
  id: totrans-1236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a task
  id: totrans-1237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The third and final recipe about calendar tasks in this chapter reveals how
    to remove an existing task.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to implement the removal of a task upon click to
    the application developed following the instructions in the *Retrieving all tasks*
    recipe:'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
- en: Edit `config.xml` of your Tizen web application and add the **http://tizen.org/privilege/calendar.write**
    privilege, which allows the modification of calendar events.
  id: totrans-1241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement the JavaScript function that removes a task based on its name:'
  id: totrans-1242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  id: totrans-1243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'Connect click event upon a task with the `delete` function by appending the
    following line right after creation of list item in the `showTasks()` function:'
  id: totrans-1244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  id: totrans-1245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: How it works
  id: totrans-1246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `remove()` function of the `Calendar` interface from the Calendar API is
    used to completely remove a task or an event from the calendar. As shown in the
    code snippet, the `deleteTask()` function is an aggregate instance of all available
    calendars on the devices are retrieved and after that the `remove()` function
    is executed. The ID of the task is specified as its argument.
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, the `bindClick()` function is utilized to connect a click event
    on any of the items of the list with the `deleteTask()` function through the `.bind()`
    method that is provided by jQuery.
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JavaScript source code for deleting a task using Calendar API in the previous
    example is integrated with the user interface created in the *Retrieving all tasks*
    recipe. Familiarize yourself with the other recipes related to the management
    of a calendar's tasks as well as with the official documentation of the `CalendarTask`
    interface at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::CalendarTask](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::CalendarTask).
  id: totrans-1250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new event
  id: totrans-1251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A couple of code snippets for adding a new event using the Tizen Calendar API
    are provided in this recipe. Events are described by the `CalendarEvent` interface.
    The interface has all the attributes of the `CalendarItem` interface as well as
    the additional attributes `endDate`, `availability`, and `recurrenceRule`.
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same functions of the Calendar API are used to add or update events and
    tasks. As expected, the same privilege has to be appended to the `config.xml`
    file of the Tizen web application, whether the application modifies events or
    tasks.
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Tizen Calendar API provides two options to add a new event. The first approach
    is to set the event details using JSON, as shown in the following code snippet:'
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  id: totrans-1257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'The second approach relies on the `VEVENT` format. Implement and run the following
    source code to create an event from the string formatted following the rules of
    `VEVENT`:'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  id: totrans-1259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: See also
  id: totrans-1260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Creating a new task* recipe for more information and example usage
    of the functions `add()` and `update()` of the `Calendar` interface
  id: totrans-1261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting an event
  id: totrans-1262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to use the `remove()` method provided with the Calendar
    API to remove an event.
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The function used for removing events from the Tizen calendar requires the
    following privilege:'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/calendar.write](http://tizen.org/privilege/calendar.write)'
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
- en: Please ensure that this privilege has been added to the configuration file of
    your application if it is supposed to delete events.
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following example implementation of the `deleteEvent()` function demonstrates
    how to remove an event for the unified calendar of Tizen:'
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  id: totrans-1270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: How it works
  id: totrans-1271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The usage of the `remove()` function for events is the same as for tasks. According
    to the documentation, the function expects an argument of the type `CalendarItemId`,
    which can be either `CalendarEventId` or `CalendarTaskId`. In this particular
    case, it must be `CalendarEventId` because the `deleteEvent()` function removes
    events. The `remove()` function may fail due to the wrong type of the argument,
    invalid identifier, security issue, missing event, or other unknown error. For
    each of these errors, an exception will be thrown and in the attached code snippet
    it will be caught and printed on the console.
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take another look at the *Deleting a task* recipe to see how the `remove()`
    function can be integrated into the user interface of a Tizen web application
  id: totrans-1274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving all events
  id: totrans-1275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe provides instructions on how to find all events in your Tizen web
    application using the Calendar API. The provided sample code snippet is similar
    to the one in the recipe for retrieving all tasks. It shows how to list all events
    ordered alphabetically by their summary.
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to find all available events inside a Tizen web
    application:'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the application has the permission to read calendar events by
    adding the **http://tizen.org/privilege/calendar.read** privilege to its configuration
    file `config.xml`.
  id: totrans-1279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert an unordered list in the HTML5 content of the application:'
  id: totrans-1280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Implement JavaScript functions for retrieving and displaying basic information
    about events, as shown in the following code:'
  id: totrans-1282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  id: totrans-1283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'Execute the function at an appropriate moment, for example, at application
    startup using the following single line of code:'
  id: totrans-1284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  id: totrans-1285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: How it works
  id: totrans-1286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The behavior of the Calendar API for retrieving events is almost the same as
    for tasks. As you can see, the names of the functions and variables in this recipe
    are similar to the ones from the *Retrieving all tasks* recipe.
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
- en: The `retrieveEvents()` function gets a unified calendar and sorts events by
    their summary in ascending order. The callback functions `showEvents()` and `error()`
    are passed as the first and the second argument to the `find()` function. The
    other two arguments are optional. Null is passed as the third argument because
    all events should be retrieved. If you want to retrieve a subset of events based
    on any kind of criteria, please provide an instance of the `AbstractFilter` interface
    instead of `null`. Additionally, an object constructed from the `SortMode` interface
    defines the sorting properties.
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
- en: Upon success, an array of the retrieved calendar events is passed to the `showEvents()`
    function, which loads their description and summary into the HTML5 unordered list
    with the ID `listEvents`. If a problem occurs, details about it are displayed
    in the same list by the `error()` function.
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have a look at the official documentation to study all the available attributes
    of each event that are specified by the `CalendarEvent` interface and the interface
    that it inherits `CalendarItem` at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html)
  id: totrans-1291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting an alarm
  id: totrans-1292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tizen Calendar API allows developers to assign alarms to tasks and events.
    In this recipe, you will learn how to construct objects of the `CalendarAlarm`
    interface and how
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
- en: to use them.
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tizen web applications that set an alarm should have the `calendar.write` privilege.
    If the application has to find an existing calendar item and update its alarm,
    then the `calendar.read` privilege is also required. In this case, edit `config.xml`
    and add both the following privileges to ensure the application works properly:'
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/calendar.read](http://tizen.org/privilege/calendar.read)'
  id: totrans-1297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/calendar.write](http://tizen.org/privilege/calendar.write)'
  id: totrans-1298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following code snippet to create an alarm using an absolute date and
    time:'
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  id: totrans-1301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'Alternatively, you can create an alarm using a relative time duration before
    the occurrence of an event or the due date of a task, for example:'
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  id: totrans-1303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'The alarm has to be attached to the attribute of an event or tasks. For example,
    an instance of `CalendarAlarm` named `alarm` can be assigned to an instance of
    `CalendarEvent` named `event`, as shown in the following code:'
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  id: totrans-1305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: How it works
  id: totrans-1306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As shown in this recipe, the Calendar API offers two different ways to create
    an instance of the interface `CalendarAlarm`. In the first example, an absolute
    value for date and time is provided as the `TZDate` object to the constructor
    of the `alarmDate` object. The second example defines a time duration before the
    event using an instance of the `TimeDuration` interface when a reminder should
    be triggered.
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
- en: 'The notification method must also be explicitly specified as an argument of
    the constructor of `CalendarAlarm`. The available options are as follows:'
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
- en: '`SOUND`: The user is notified with a sound alarm'
  id: totrans-1309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DISPLAY`: This shows a message on the screen of the device without playing
    any sound'
  id: totrans-1310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string with a description can be provided as an optional argument upon the
    creation of an alarm.
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is recommended that you have a look at the *Creating a new task* and *Creating
    a new event* recipes in this chapter. A good idea for a practical exercise is
    to develop Tizen web applications, which sets an alarm along with the creation
    of a calendar item.
  id: totrans-1313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For full specifications of the interface `CalendarAlarm`, have a look at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::CalendarAlarm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/calendar.html#::Calendar::CalendarAlarm).
  id: totrans-1314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 8. Communication
  id: totrans-1315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
- en: Sending SMS messages
  id: totrans-1317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending e-mail messages
  id: totrans-1318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving and displaying e-mail messages
  id: totrans-1319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsing call history
  id: totrans-1320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bluetooth
  id: totrans-1321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NFC and detecting other devices
  id: totrans-1322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending NDEF messages
  id: totrans-1323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving NDEF messages
  id: totrans-1324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving push notifications
  id: totrans-1325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-1326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern telecommunication technologies offer a rich set of wireless standards
    for data exchange. The recipes in this chapter will guide you on how to utilize
    Tizen APIs to create Tizen web applications that communicate over different channels
    using a variety of network bearers.
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
- en: Each recipe provides simple examples. No source code for fancy user interfaces
    is included in any of the recipes, and the emphasis is on the usage of the APIs.
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
- en: Sending SMS messages
  id: totrans-1329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first SMS was sent in England on 3rd December 1992 by the software programmer
    Neil Papworth. Since then, the SMS has become the most popular text messaging
    service, and, nowadays, it is available for both feature and smartphones.
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
- en: Due to historical reasons, I believe that SMS deserves the honor of being the
    first discussed communicational channel in this chapter of the book. In this recipe,
    you will learn how to use the Messaging API in Tizen web applications to send
    SMS messages.
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Messaging API provides tools to manage e-mails as well as messages transferred
    through telecommunication protocols, such as SMS and MMS. Tizen web applications
    that utilize it require additional privileges depending on the methods used. Two
    types of privileges have been defined based on the operations performed by the
    methods of the API, [http://tizen.org/privilege/messaging.read](http://tizen.org/privilege/messaging.read)
    to find messages and conversations as well as for listener settings related to
    messaging and [http://tizen.org/privilege/messaging.write](http://tizen.org/privilege/messaging.write)
    for any other operations, such as synchronization, sending and removing messages,
    and so on.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to implement a JavaScript function to send SMS
    messages:'
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config.xml` file, and append the following privilege:'
  id: totrans-1336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/messaging.write](http://tizen.org/privilege/messaging.write)'
  id: totrans-1337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a global JavaScript object to store message details as follows:'
  id: totrans-1338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  id: totrans-1339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'Create the following callback functions:'
  id: totrans-1340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  id: totrans-1341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'Implement the function to send a text message to a single phone number as follows:'
  id: totrans-1342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  id: totrans-1343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'Execute the function `sendSMS()` when you want to send a text message to a
    single recipient by specifying their phone number:'
  id: totrans-1344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  id: totrans-1345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: How it works...
  id: totrans-1346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The function `sendSMS()` gets as arguments a text message and a phone number
    and stores it in the global JavaScript object `message`. The text of the message
    is set in the attribute `plainBody` of the object `message`, and the phone number
    is saved as the first element of the attribute to which it is an array. After
    that, `sendSMS()` invokes the method `getMessageServices()` of the Messaging API
    and sets the functions, `retrieveServices()` and `logError()`, to be called on
    success or failure of the operations.
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-1348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add more phone numbers to the attribute if you want to send the same message
    to multiple recipients.
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
- en: More details about all attributes of a message are available in the documentation
    of the `MessageInit` interface at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/messaging.html#::Messaging::MessageInit](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/messaging.html#::Messaging::MessageInit).
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
- en: The function `retrieveServices()` composes SMS messages and sends them using
    the method `sendMessage()`. This method requires the privilege [http://tizen.org/privilege/messaging.write](http://tizen.org/privilege/messaging.write)
    that has been set at the first step of the tutorial.
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
- en: Any issues that may occur during the execution of the error code are handled
    by the function `logError()`, which prints **Error** in the console followed by
    details about the problem.
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
- en: Please note that standard text messaging charges, depending on your subscription
    plan, will be applied by the mobile network operator for each SMS sent. You will
    not be able to send SMS messages successfully if there is no network coverage
    or if the flight mode of the device is enabled.
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the next recipe to learn how to use the same methods of the Messaging
    API to send e-mails.
  id: totrans-1355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending e-mail messages
  id: totrans-1356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The usage of the Messaging API to send e-mails is similar to the way SMSes are
    sent. This recipe will demonstrate how to send an e-mail and will discuss the
    differences between sending SMS messages and e-mails.
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of Tizen Version 2.2.1, the Messaging API is capable of sending SMS, MMS,
    and e-mail. These three options are defined at the enumerated type `MessageServiceTag`,
    which is defined by the API. Just as with the SMS method, `sendMessage()` has
    to be used to send an e-mail, and it also requires the [http://tizen.org/privilege/messaging.write](http://tizen.org/privilege/messaging.write)
    privilege.
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
- en: Before you proceed, please ensure that an Internet connection is available and
    an e-mail account has been set up on the Tizen device and emulator.
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up an e-mail, please launch the **Email** application that is present
    on the main screen of the device, or navigate to **Settings** | **Accounts** |
    **Add** | **Email**, and follow the onscreen instructions. Have a look at the
    following screenshot:'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/1908OS_08_01.jpg)'
  id: totrans-1362
  prefs: []
  type: TYPE_IMG
- en: Setting up an e-mail on a Tizen device
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to send an e-mail from the Tizen web application:'
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config.xml` file, and append the following privilege:'
  id: totrans-1366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/messaging.write](http://tizen.org/privilege/messaging.write)'
  id: totrans-1367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a global JavaScript object capable of storing all the information in
    the message as follows:'
  id: totrans-1368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  id: totrans-1369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'Implement callback functions, as shown in the following code:'
  id: totrans-1370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE186]'
  id: totrans-1371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'Create a JavaScript function to send an e-mail:'
  id: totrans-1372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  id: totrans-1373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'Specify the arguments required and invoke the function `sendEmail()` at an
    appropriate place on the application, for example:'
  id: totrans-1374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE188]'
  id: totrans-1375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: How it works...
  id: totrans-1376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example sends an e-mail with the subject **Hello** and content
    **Hello World** to `<[foo@example.com](mailto:foo@example.com)>` and a carbon
    copy to `<[bar@example.com](mailto:bar@example.com)>`. As you can see, the source
    code is very similar to the previous recipe for sending SMS messages. The major
    differences are in the attributes of the JavaScript object, `msgEmail`, the value
    of the first argument of the method `getMessageServices()`, and the constructor
    of `Message`, which has been set to `message.email`.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the object `msgEmail` follows the attributes described by the
    interface `MessageInit`. It is also possible to specify blind carbon copy e-mails
    using the attribute `bcc` or set HTML content for the e-mail using the attribute
    `htmlBody`. All of the attributes, to, cc, and bcc, are arrays, and any one of
    them can store multiple e-mails.
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
- en: 'The API also allows attachments. All attached files must be provided to the
    attribute `attachments` of the instances of the interface `Message`, for example:'
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  id: totrans-1380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: An instance of `MessageAttachment` is created for each attachment. The files
    are described by their filenames and MIME types.
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the documentation of the Messaging API to find out more details about
    all interfaces, their attributes, and methods at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/messaging.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/messaging.html)
  id: totrans-1383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving and displaying e-mail messages
  id: totrans-1384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to monitor and detect changes of messages, conversations, and
    message folders in the Tizen web application through the capabilities of the Messaging
    API. In this recipe, you will find guidelines on how to create an application
    to detect new e-mails.
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An Internet connection should be available, and an e-mail account must be configured
    on the Tizen device to try out and verify the successful functioning of the application
    created in this recipe. If you have not set up an e-mail yet, please do it following
    the instructions from the previous recipe.
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the steps provided in the following tutorial to implement a listener
    for new e-mails in a Tizen web application:'
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config.xml` file of the application, and add the following privilege
    to read messages:'
  id: totrans-1390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/messaging.read](http://tizen.org/privilege/messaging.read)'
  id: totrans-1391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Declare the following global JavaScript variables:'
  id: totrans-1392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  id: totrans-1393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'Create JavaScript functions to show retrieved e-mails or an error that has
    occurred as follows:'
  id: totrans-1394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  id: totrans-1395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'Implement JavaScript functions that initialize the e-mail service and listen
    for messages as follows:'
  id: totrans-1396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  id: totrans-1397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'Implement a function that unregisters the e-mail listener:'
  id: totrans-1398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  id: totrans-1399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: 'Start listening for e-mails at an appropriate place in the source code of the
    application as follows:'
  id: totrans-1400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE194]'
  id: totrans-1401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Note
  id: totrans-1402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code snippets provided are simple examples, and they are not related to
    any graphical user interface. The information about e-mail received or any errors
    is printed on the console.
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-1404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Three phases are required to monitor e-mails, as follows:'
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
- en: To obtain an e-mail messaging service
  id: totrans-1406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To listen for message changes
  id: totrans-1407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To display messages
  id: totrans-1408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first phase is performed by the function `initEmailService()`. If it is
    successful, the next step of the algorithm is to execute the function `registerEmailListener()`.
    The final phase is performed by the function `displayMessages()`, which is called
    as a callback by the method `addMessagesChangeListener()` of the interface `MessageStorage`.
    Please note that the code snippet from step four of the tutorial displays only
    messages that have been added to `MessageStorage`.
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-1410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tizen's Messaging API provides methods to listen for changes related to conversations
    and message folders as well. Please note that conversations can represent e-mail
    correspondence or chat. They are grouped by the subject for e-mails and by the
    sender and recipient for chats.
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
- en: The methods `addConversationsChangeListener()` and `addFoldersChangeListener()`
    of the interface `MessageStorage` should be utilized to detect changes related
    to conversations and folders. Their usage is similar to that of the method `addMessagesChangeListener()`,
    which was used in the code snippets of this recipe.
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A sample Tizen web application based on the tutorial is provided alongside the
    book. It has a simple user interface that shows the sender and the subject of
    e-mails received as shown in the following screenshot. Explore the source code
    of the application for more details.![See also](img/1908OS_08_03.jpg)
  id: totrans-1414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sample application that displays a received e-mail
  id: totrans-1415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Browsing call history
  id: totrans-1416
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use Tizen's Call History API to access
    and browse your call history. A sample application to retrieve the list of recently
    made outgoing calls is provided with the book.
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to implement the CallHistory API in the Tizen web
    application and to retrieve dialed phone numbers:'
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following privilege to read the call log to `config.xml`:'
  id: totrans-1420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/callhistory.read](http://tizen.org/privilege/callhistory.read)'
  id: totrans-1421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Implement JavaScript functions to show call history and handle errors as follows:'
  id: totrans-1422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  id: totrans-1423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: 'Create the function that retrieves outgoing calls as follows:'
  id: totrans-1424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  id: totrans-1425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: 'Call the function `getOutgoingCalls()` at the launch of the application or
    any other appropriate place:'
  id: totrans-1426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  id: totrans-1427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: How it works...
  id: totrans-1428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The function `getOutgoingCalls()` uses the method `find` of the interface `CallHistory`
    to retrieve the preceding ten outgoing calls. The results are ordered in descending
    order by their date and time. An instance of `AttributeFilter` is created to select
    only the `DIALED` numbers. The other options allowed for attribute direction are:'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
- en: '`RECEIVED`: This is used for incoming calls'
  id: totrans-1430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MISSEDNEW`: This is for not-yet-seen missed calls'
  id: totrans-1431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MISSED`: This is for all missed calls'
  id: totrans-1432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BLOCKED`: This is for calls that have been blocked'
  id: totrans-1433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`REJECTED`: This is for calls that have been rejected by the user'
  id: totrans-1434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous example, the function `showCalls()` is executed as a callback
    on success. Otherwise, on failure, the issue is handled by the function `showError()`.
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
- en: A sample Tizen web application based on this recipe is provided with the book.
    It is integrated with the HTML5 user interface. The following screenshot is from
    this application. You may improve the sample application by combining it with
    the Contacts API that was analyzed in the previous chapter.
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1908OS_08_04.jpg)'
  id: totrans-1437
  prefs: []
  type: TYPE_IMG
- en: A list of the most recently dialed phone numbers
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-1439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some Tizen web applications may need a capability to monitor calls. In these
    cases, you can use the methods `addChangeListener()` and `removeChangeListener()`
    of the interface `CallHistory`. An observer must be provided to the function `addChangeListener()`.
    On success, this function returns an identifier that is required for an argument
    of the function `removeChangeListener()` when the listener has to be removed.
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1441
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more details and information about all related interfaces, please refer
    to the documentation of the CallHistory API at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/callhistory.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/callhistory.html)
  id: totrans-1442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bluetooth
  id: totrans-1443
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bluetooth is a popular wireless standard for data transfer between devices at
    close range. The name of the standard comes from the nickname of the king of Denmark
    and Norway from the middle ages, Harald "Bluetooth" Gormsson.
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe provides details about the Bluetooth API for Tizen web applications
    and explains how to use it in the following cases:'
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
- en: To discover Bluetooth devices
  id: totrans-1446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To connect to another Bluetooth device
  id: totrans-1447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To connect and transfer data over Bluetooth
  id: totrans-1448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1449
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The methods of the Bluetooth API used in this recipe require the following
    privileges:'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/bluetooth.admin](http://tizen.org/privilege/bluetooth.admin)'
  id: totrans-1451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/bluetooth.gap](http://tizen.org/privilege/bluetooth.gap)'
  id: totrans-1452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/bluetooth.spp](http://tizen.org/privilege/bluetooth.spp)'
  id: totrans-1453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please append all privileges to the `config.xml` file of your Tizen web application
    before proceeding to the next section of the recipe.
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to discover, connect, and exchange data over Bluetooth
    in the Tizen web application:'
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare and initialize global JavaScript variables as follows:'
  id: totrans-1457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  id: totrans-1458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'The variable `bIsServer` is used only to determine whether the application
    is running as a server or as a client. Have a look at the following code:'
  id: totrans-1459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE199]'
  id: totrans-1460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: The Bluetooth **Service Discovery Protocol** (**SDP**) defines a range of available
    UUIDs. Tizen developers working on computers with GNU/Linux or OS X can execute
    the command `uuidgen` in a console to generate **Universally Unique Identifier**
    (**UUID**).
  id: totrans-1461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your application should connect and communicate to a Bluetooth serial board,
    you can try using the base UUID defined by SDP, `00000000-0000-1000-8000-00805F9B34FB`.
  id: totrans-1462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a simple function to log errors as follows:'
  id: totrans-1463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  id: totrans-1464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: 'Turn on Bluetooth and retrieve a Bluetooth device as shown in the following
    sample code snippet:'
  id: totrans-1465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  id: totrans-1466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'At this point, the JavaScript function `run()` will be invoked. Its implementation
    is provided in the next steps of the recipe:'
  id: totrans-1467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE202]'
  id: totrans-1468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'You can also create a function that turns off Bluetooth. An example of the
    implementation of such a function is shown as follows:'
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE203]'
  id: totrans-1470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'Create JavaScript data that reads data received from the Bluetooth socket.
    It will be used by both the server and client modes of the application. Have a
    look at the following code:'
  id: totrans-1471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE204]'
  id: totrans-1472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: 'Implement JavaScript functions that register a service, establish a connection
    with a client, and receive data if the application is running in server mode,
    as follows:'
  id: totrans-1473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE205]'
  id: totrans-1474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'Implement JavaScript functions that scan and pair devices. These functions
    will be used when the application is running as a client. Have a look at the following
    code:'
  id: totrans-1475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE206]'
  id: totrans-1476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'Please note that an exception will be thrown if the device found does not provide
    a service with the expected UUID. If everything is working as expected, the function
    `onSocketConnected()` will be invoked as a callback, as shown in the following
    code:'
  id: totrans-1477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE207]'
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'The following function tries to create a bond between two devices and, on success,
    invokes the function `paired()` as a callback:'
  id: totrans-1479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE208]'
  id: totrans-1480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: 'Create a callback function that sends data from the client to the server as
    follows:'
  id: totrans-1481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE209]'
  id: totrans-1482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'Implement a function that runs the application as a server or as a client depending
    on the preferences set by the user as follows:'
  id: totrans-1483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE210]'
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Build and run the application on two different Tizen devices. Launch it in the
    server mode on the first device and in the client mode on the second device.
  id: totrans-1485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-1486
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Tizen web application that uses the Bluetooth API, which can operate as the
    server and as the client, can be created following the instructions provided in
    this recipe. The following screenshot is taken from the sample application provided
    with the book:'
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1908OS_08_02.jpg)'
  id: totrans-1488
  prefs: []
  type: TYPE_IMG
- en: Simple Bluetooth application for Tizen
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
- en: In the server mode, the application registers a service with a unique UUID through
    the function `startService()`, receives text messages from the client, and displays
    them on the screen using the function `readMessage()`, which is executed as a
    callback.
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
- en: When the application is running in client mode, it starts searching for any
    nearby Bluetooth devices using the method `discoverDevices()` of the interface
    `BluetoothAdapter`. The same interface also provides the method `getKnownDevices()`,
    which is capable of retrieving the list of known devices.
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
- en: The function `paired()` bonds the two devices and establishes a connection only
    if the devices found offer services with the UUID that was configured in the first
    step of the recipe.
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
- en: The methods `readData()` and `writeData()` of the interface `BluetoothSocket`
    are used to send and receive data over an opened Bluetooth socket. Text messages
    must be converted into arrays of bytes before sending, as shown in the function
    `onSocketConnected()`. The opposite operation is required when a message is received.
    For example, the code snippet in the function `readMessage()` transforms a byte
    array into a string.
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the client sends just a single message, and its content is
    hardcoded as `Hello World`.
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
- en: The code snippets from this recipe can be easily improved and adjusted to other
    use cases, such as chat over Bluetooth. Please note that the source code of the
    sample application is not production ready. Its main purpose is to demonstrate
    an easy way to use the Bluetooth API.
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1496
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have a look at the sample Bluetooth application that is provided with the book,
    and explore the documentation of the Bluetooth API for more details at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/bluetooth.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/bluetooth.html)
  id: totrans-1497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bluetooth specifications and a variety of other documents about the standard
    are available at [https://www.bluetooth.org/en-us/specification](https://www.bluetooth.org/en-us/specification)
  id: totrans-1498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more technical information about the Bluetooth support in Tizen, please
    also explore the following page at the Tizen wiki at [https://wiki.tizen.org/wiki/Bluetooth](https://wiki.tizen.org/wiki/Bluetooth)
  id: totrans-1499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NFC and detecting other devices
  id: totrans-1500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Near Field Communication** (**NFC**) is a short-range wireless communication
    standard based on **radio-frequency identification** (**RFID**). NFC has several
    unique advantages compared to other communication technologies, such as Bluetooth.
    NFC does not require any setup to connect devices. The only requirement to establish
    a connection is a close proximity of about 4 cm (or less). Another valuable advantage
    of NFC is the lack of any requirements for power supply for passive tags.'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
- en: NFC tags are also known as smart or info tags. They store data that can be easily
    read by users. In many cases, their usage is similar to QR codes and other types
    of barcodes. Anyone can buy an empty NFC tag and save customized information on
    it.
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the standard, the usage of NFC can be grouped into three major
    categories depending on the modes, which are as follows:'
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
- en: Reader/writer mode, which is appropriate to exchange data with passive, NFC-compatible
    tags. For example, QR codes on posters, stickers, and other promotional merchandise
    can be replaced by passive NFC tags.
  id: totrans-1504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peer-to-peer mode, which allows data exchange between devices.
  id: totrans-1505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Card emulation mode, which allows the NFC device to be used as a card and accessed
    by external readers. For example, this feature might be convenient for contactless
    payments.
  id: totrans-1506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to power on NFC devices and how to search
    for other devices in close range. The subsequent two recipes are dedicated to
    sending and receiving data.
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1508
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tizen web applications that use the NFC capabilities shown in this recipe must
    have the following privileges in their `config.xml` files:'
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/nfc.common](http://tizen.org/privilege/nfc.common)'
  id: totrans-1510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/nfc.admin](http://tizen.org/privilege/nfc.admin)'
  id: totrans-1511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following privilege is also required for applications that work in peer-to-peer
    mode:'
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/nfc.p2p](http://tizen.org/privilege/nfc.p2p)'
  id: totrans-1513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Applications that use the reader/writer mode should also include the following
    privilege:'
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tizen.org/privilege/nfc.tag](http://tizen.org/privilege/nfc.tag)'
  id: totrans-1515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1516
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to establish peer-to-peer connection between two
    NFC-enabled devices in the Tizen web application using the NFC API:'
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare and initialize the global JavaScript variable for the NFC adapter and
    the NFC device that will be retrieved:'
  id: totrans-1518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  id: totrans-1519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Create an instance of the interface `NFCPeerDetectCallback`, which implements
    the methods `onattach()` and `ondetach()`, as follows:'
  id: totrans-1520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  id: totrans-1521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'Develop the JavaScript function to handle errors, for example:'
  id: totrans-1522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE213]'
  id: totrans-1523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'Create JavaScript functions that turn on the NFC device and search for other
    nearby NFC devices:'
  id: totrans-1524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  id: totrans-1525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'Invoke the following function to start the procedure to establish an NFC connection:'
  id: totrans-1526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Note
  id: totrans-1528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The easiest way to debug a Tizen application that takes advantage of the NFC
    API is using **Event Injector**. Enable it by navigating to **Window** | **Show
    View** | **Event Injector** of the Tizen IDE and selecting the tab **Nfc**.
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-1530
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The algorithm implemented in this recipe obtains an instance of the interface
    `NFCAdapter`, searches for other NFC devices using the method `setPeerListener()`,
    and establishes a connection with the detected device through the callback functions
    implemented in `peerFound`.
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
- en: By the way, this JavaScript object is of the interface `NFCPeerDetectCallback`.
    The method `onattach()` is invoked when another NFC device is detected, and it
    receives as an argument an instance of the interface `NFCPeer`.
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-1533
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tizen web applications that have to connect to an NFC tag must use a similar
    approach. The only difference is that the method `setTagListener()` should be
    used instead of `setPeerListener()`, and the success callback is described by
    the interface `NFCTagDetectCallback`. Please note that the names of the methods
    of this interface match `NFCPeerDetectCallback`. In this case, however, the argument
    of `onattach()` is an instance of the interface `NFCTag`.
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1535
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please have a look at the upcoming recipes to understand how to send and receive
    NDEF messages. Please also do not forget to explore the documentation of the NFC
    API for more details at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html)
  id: totrans-1536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending NDEF messages
  id: totrans-1537
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **NFC Data Exchange Format** (**NDEF**) is a binary format for the serialization
    of data transferred over NFC. This recipe demonstrates how to create an NDEF message,
    share it with another NFC device in peer-to-peer mode, or write it to a passive
    NFC tag.
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1539
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please include the privilege [http://tizen.org/privilege/nfc.p2p](http://tizen.org/privilege/nfc.p2p)
    if you plan to communicate in peer-to-peer mode and the privilege [http://tizen.org/privilege/nfc.tag](http://tizen.org/privilege/nfc.tag)
    if you plan to write an NFC tag.
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1541
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to send an NDEF message:'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an NDEF message. For example, the following function creates a text
    NDEF message with UTF-16 character encoding using instances of the interfaces
    `NDEFMessage` and `NDEFRecordText`:'
  id: totrans-1543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  id: totrans-1544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: Note
  id: totrans-1545
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The Tizen NFC API supports three different types of NDEF records; text, URI,
    and MIME. A separate interface is provided for each supported type. The interfaces
    `NDEFRecordText`, `NDEFRecordURI`, and `NDEFRecordMedia` implement the basic interface
    `NDEFRecord`.
  id: totrans-1546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Write or send the message. Use the method `writeNDEF()` of the interface to
    store information on an NFC tag as shown in the following code:'
  id: totrans-1547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE217]'
  id: totrans-1548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: 'Use the method `sendNDEF()` of the interface to transfer information to another
    device in peer-to-peer mode. Take a look at the following example:'
  id: totrans-1549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE218]'
  id: totrans-1550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: Please note that callback functions that will be invoked on success or failure
    can be optionally specified as arguments of both `writeNDEF()` and `sendNDEF()`.
    Both methods throw an exception upon error, so the try/catch block must be added
    when they are invoked.
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1552
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more details regarding the attributes of the interfaces `NDEFRecordText`
    and `NDEFMessage`, please refer to the following links:'
  id: totrans-1553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFRecordText](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFRecordText)'
  id: totrans-1554
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFMessage](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFMessage)'
  id: totrans-1555
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: NDEF technical specifications as well as other documents related to NFC are
    available for download at the NFC Forum at [http://members.nfc-forum.org/specs/spec_list/](http://members.nfc-forum.org/specs/spec_list/)
  id: totrans-1556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving NDEF messages
  id: totrans-1557
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous two recipes demonstrated how to establish a connection with NFC
    and to write/send data. The next logical step is to explore the capabilities of
    the Tizen NFC API to read/receive data.
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1559
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The privilege [http://tizen.org/privilege/nfc.p2p](http://tizen.org/privilege/nfc.p2p)
    is required when an NDEF message is received in NFC's peer-to-peer mode. If you
    plan to implement a feature to read data from passive NFC tags, you have to include
    the privilege [http://tizen.org/privilege/nfc.tag](http://tizen.org/privilege/nfc.tag)
    in the `config.xml` file. Please note that as described in the previous recipe,
    the same privileges are required to send messages and to write information to
    a tag.
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1561
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please use the method `readNDEF()` provided by the interface `NFCTag` to read
    data from passive NFC tags as demonstrated in the following example:'
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a function that will be invoked as a callback if a supported NDEF is
    found as follows:'
  id: totrans-1563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  id: totrans-1564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'Implement a function to handle any errors that may occur as follows:'
  id: totrans-1565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  id: totrans-1566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'Read the content of the tag using the following code snippet:'
  id: totrans-1567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  id: totrans-1568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'In Tizen web applications that communicate in the NFC peer-to-peer mode, it
    is possible to listen for incoming NDEF messages. For example, the following code
    snippet extends the source code from the second step of the *Using NFC and detecting
    other devices* recipe:'
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  id: totrans-1570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: The new lines of code that have been appended are shown in bold. The method
    `setReceiveNDEFListener()` is used to listen to incoming NDEF messages. An anonymous
    JavaScript function, which receives an instance of the interface `NDEFMessage`
    as an argument, is assigned to the `onsuccess` method.
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-1572
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second argument of `readNDEF()` is optional but is recommended to handle
    errors that might occur during its execution. It is also recommend that you surround
    the method with try/catch blocks, as it may throw an exception.
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example to read a passive NFC tag, an instance of `NDEFMessage` will
    be provided as an argument of the function `readMessage()`. An instance of the
    same class is provided to the function, which is invoked on success in peer-to-peer
    mode. The attribute records of `NDEFMessage` contain an array with instances of
    `NDEFRecord`. The specified type of each record can be checked through the attribute
    `tnf` , which stores the 3-bit value for **Type Name Field** (**TNF**). According
    to the documentation, at least the following values are supported:'
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_EMPTY`'
  id: totrans-1575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_WELL_KNOWN`'
  id: totrans-1576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_MIME_MEDIA`'
  id: totrans-1577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_URI`'
  id: totrans-1578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_EXTERNAL_RTD`'
  id: totrans-1579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_UNKNOWN`'
  id: totrans-1580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NFC_RECORD_TNF_UNCHANGED`'
  id: totrans-1581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-1582
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please explore the information available at the following link for more information
    about the interface `NDEFRecord` at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFRecord](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/nfc.html#::NFC::NDEFRecord)
  id: totrans-1583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving push notifications
  id: totrans-1584
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen provides a mechanism to trigger events from an application server and
    the delivery of these events on Tizen devices. Tizen web applications that have
    to receive notifications for these events must utilize and take advantage of the
    Push API.
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to send a notification from your website to your Tizen
    web application, which is running on the user's device, you have to send the notification
    to a push service, which will forward it to the Tizen device. Once the notification
    is received on the device, your Tizen application should handle the message.
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1587
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The push service in Tizen is provided by Samsung. You have to request access
    to the service before you start with the application development.
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
- en: According to the procedure for *Push Service Request*, the developer must send
    an e-mail to `<[push.tizen@samsung.com](mailto:push.tizen@samsung.com)>`. The
    request should contain developer and application information. Please read the
    up-to-date information and details about the request form for Tizen web applications
    in the documentation at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_service_request.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_service_request.htm).
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1590
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate the Push API into a Tizen web application:'
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the privilege [http://tizen.org/privilege/push to config.xml](http://tizen.org/privilege/push%20to%20config.xml),
    and allow access from the domain of the Push server as follows:'
  id: totrans-1592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE223]'
  id: totrans-1593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: Note
  id: totrans-1594
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Replace `{region}` and set a value that corresponds to the location of the used
    server depending on the first two digits of `regID`. Please read the official
    documentation for more details at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_server_api.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_server_api.htm).
  id: totrans-1595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a JavaScript function to handle errors and exceptions as follows:'
  id: totrans-1596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE224]'
  id: totrans-1597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'Create a JavaScript function to handle successful registration of the push
    service as follows:'
  id: totrans-1598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE225]'
  id: totrans-1599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'Register for the service using the following code:'
  id: totrans-1600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE226]'
  id: totrans-1601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: 'Create a JavaScript function to handle incoming notifications as follows:'
  id: totrans-1602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  id: totrans-1603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'Connect to the push service and receive messages as follows:'
  id: totrans-1604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE228]'
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: How it works
  id: totrans-1606
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The notification received will be handled immediately if it is received while
    the application is running. If the application is not running or if it is running
    in the background, a ticker message will be displayed, and a badge with the number
    of unread notifications will appear next to the application's icon.
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
- en: To take advantage of the Push API and receive push notifications, you must first
    register the push service on the devices in the Tizen web application using the
    method `registerService()` of the interface `PushManager`.
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
- en: After that, the application must be connected to the service using the method
    `connectService()` of the same interface. In the previous code snippet, an instance
    of `PushMessage` is passed to the function `notificationReceived()` for each message
    received. The function `notificationReceived()` is invoked as a callback by `connectService().connectiService()`.
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-1610
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To send a notification for a website or service to the server of the Push API,
    execute the HTTPS POST request to `https://{region}.push.samsungosp.com:8088/spp/pns/api/push`.
    Please replace `{region}` following the guide provided in the first step of the
    recipe. The header of the request should include information about the ID (`appID`)
    and the secret (`appSecret`) of the application. The body must contain `regID`,
    `requestID`, `message`, and `appData`.
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code snippet demonstrates how to send a HTTPS POST
    request to the push server using JavaScript and jQuery:'
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  id: totrans-1613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: The notification is sent to the Tizen server in the EU West region, and it includes
    the text **Bar** and the ticker message **Foo**. The value of the application's
    ID and secret is provided through the JavaScript variables `sAppId` and `sAppSecret`.
    The variable `sRegId` stores the registration identification of the application.
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
- en: For more details regarding the integration of websites and services with the
    push server, please visit [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_server_api.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/push_server_api.htm).
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-1616
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By the way, the Tizen Push API uses the same servers as the push messaging service
    in Bada. This coincidence is not a surprise, because in 2013, Samsung merged its
    Bada OS into the second major version of the open source platform Tizen.
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1618
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please explore the Push API documentation for more details about the interfaces
    provided, their methods, and attributes at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/push.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/push.html)
  id: totrans-1619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 9. Using Sensors
  id: totrans-1620
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
- en: Using location-based services to display current location
  id: totrans-1622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting directions
  id: totrans-1623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocoding
  id: totrans-1624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reverse geocoding
  id: totrans-1625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating distance
  id: totrans-1626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting device motion
  id: totrans-1627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting device orientation
  id: totrans-1628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Vibration API
  id: totrans-1629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-1630
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data provided by the hardware sensors of Tizen devices can be useful for
    many mobile applications. In this chapter, you will learn how to retrieve the
    geographic location of Tizen devices using the assisted GPS, to detect changes
    of the device orientation and motion as well as how to integrate map services
    into Tizen web applications.
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
- en: Most of the examples related to maps and navigation use Google APIs. Other service
    providers such as **Nokia HERE**, **OpenStreetMap**, and **Yandex** also offer
    APIs with similar capabilities and can be used as an alternative to Google in
    Tizen web applications.
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
- en: It was announced that Nokia HERE joined the Tizen association at the time of
    writing this book. Some Tizen devices will be shipped with built-in navigation
    applications powered by Nokia HERE. The smart watch Gear S is the first Tizen
    wearable device from Samsung that comes of the box with an application called
    Navigator, which is developed with Nokia HERE. Explore the full capabilities of
    Nokia HERE JavaScript APIs if you are interested in their integration in your
    Tizen web application at [https://developer.here.com/javascript-apis](https://developer.here.com/javascript-apis).
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenStreetMap also deserves special attention because it is a high quality
    platform and very successful community-driven project. The main advantage of OpenStreetMap
    is that its usage is completely free. The recipe about Reverse geocoding in this
    chapter demonstrates address lookup using two different approaches: through Google
    and through OpenStreetMap API.'
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
- en: Using location-based services to display current location
  id: totrans-1635
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By following the provided example in this recipe, you will master the HTML5
    Geolocation API and learn how to retrieve the coordinates of the current location
    of a device in a Tizen web application.
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1637
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ensure that the positioning capabilities are turned on. On a Tizen device or
    Emulator, open **Settings**, select **Locations**, and turn on both **GPS** (if
    it is available) and **Network position** as shown in the following screenshot:'
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/1908OS_09_01.jpg)'
  id: totrans-1639
  prefs: []
  type: TYPE_IMG
- en: Enabling GPS and network position from Tizen Settings
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1641
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to retrieve the location in a Tizen web application:'
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement JavaScript for handling errors:'
  id: totrans-1643
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE230]'
  id: totrans-1644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: 'Implement JavaScript for processing the retrieved location:'
  id: totrans-1645
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE231]'
  id: totrans-1646
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: 'Implement a JavaScript function that searches for the current position using
    the HTML5 Geolocation API:'
  id: totrans-1647
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE232]'
  id: totrans-1648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'At an appropriate place in the source code of the application, invoke the function
    created in the previous step:'
  id: totrans-1649
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE233]'
  id: totrans-1650
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: How it works
  id: totrans-1651
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `getCurrentPosition()` method of the HTML5 Geolocation API is used in the
    `retrieveLocation()` function to retrieve the coordinates of the current position
    of the device. The functions `showLocation()` and `showError()` are provided as
    callbacks, which are invoked on success or failure. An instance of the `Position`
    interface is provided as an argument to `showLocation()`. This interface has two
    properties:'
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
- en: '`coords`: This specifies an object that defines the retrieved position'
  id: totrans-1653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestamp`: This specifies the date and time when the position has been retrieved'
  id: totrans-1654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getCurrentPosition()` method accepts an instance of the `PositionOptions`
    interface as a third optional argument. This argument should be used for setting
    specific options such as `enableHighAccuracy`, `timeout`, and `maximumAge`. Explore
    the Geolocation API specification if you are interested in more details regarding
    the attributes of the discussed interface at [http://www.w3.org/TR/geolocation-API/#position-options](http://www.w3.org/TR/geolocation-API/#position-options).
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no need to add any specific permissions explicitly in `config.xml`.
    When an application that implements the code from this recipe is launched for
    the first time, it will ask for permission to access the location, as shown in
    the following screenshot:'
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_09_02.jpg)'
  id: totrans-1657
  prefs: []
  type: TYPE_IMG
- en: A request to access location in Tizen web application
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
- en: If you are developing a location-based application and want to debug it using
    the Tizen Emulator, use the Event Injector to set the position.
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-1660
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A map view provided by Google Maps JavaScript API v3 can be easily embedded
    into a Tizen web application. An Internet connection is required to use the API,
    but there is no need to install an additional SDK or tools from Google. Follow
    these instructions to display a map and a marker:'
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that the application can access the Google API. For example, you
    can enable access to any website by adding the following line to `config.xml`:'
  id: totrans-1662
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  id: totrans-1663
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Visit [https://code.google.com/apis/console](https://code.google.com/apis/console)
    to get the API keys.
  id: totrans-1664
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Services** and activate **Google Maps API v3**.
  id: totrans-1665
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, click on **API** and copy **Key for browser apps**. Its value will
    be used in the source code of the application.
  id: totrans-1666
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement the following source code to show a map inside `div` with the ID
    `map-canvas`:'
  id: totrans-1667
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE235]'
  id: totrans-1668
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'In the HTML of the application, create the following `div` element:'
  id: totrans-1669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE236]'
  id: totrans-1670
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'Provide latitude and longitude to the function and execute it at an appropriate
    location. For example, these are the coordinates of a location in Westminster,
    London:'
  id: totrans-1671
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE237]'
  id: totrans-1672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'The following screenshot demonstrates a Tizen web application that has been
    created by following the preceding guidelines:'
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1908OS_09_03.jpg)'
  id: totrans-1674
  prefs: []
  type: TYPE_IMG
- en: Google Maps in a Tizen web application
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
- en: Combine the tutorial from the *How to do it* section of the recipe with these
    instructions to display a map with the current location.
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1677
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source code of a simple Tizen web application is provided alongside the
    book following the tutorial from this recipe. Feel free to use it as you wish.
  id: totrans-1678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More details are available in the W3C specification of the HTML5 Geolocation
    API at [http://www.w3.org/TR/geolocation-API/](http://www.w3.org/TR/geolocation-API/).
  id: totrans-1679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more details and to explore the full capabilities of the Google Maps
    JavaScript API v3, please visit [https://developers.google.com/maps/documentation/javascript/tutorial](https://developers.google.com/maps/documentation/javascript/tutorial).
  id: totrans-1680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting directions
  id: totrans-1681
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigation is another common task for mobile applications. The Google Directions
    API allows web and mobile developers to retrieve a route between locations by
    sending an HTTP request. It is mandatory to specify an origin and a destination,
    but it is also possible to set way points. All locations can be provided either
    by exact coordinates or by address. An example for getting directions and to reach
    a destination on foot is demonstrated in this recipe.
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1683
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you start with the development, register an application and obtain API
    keys:'
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Google Developers Console at [https://code.google.com/apis/console](https://code.google.com/apis/console).
  id: totrans-1685
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Services** and turn on **Directions API**.
  id: totrans-1686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **API Access** and get the value of **Key for server apps**, which
    should be used in all requests from your Tizen web application to the API.
  id: totrans-1687
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more information about the API keys for the Directions API, please visit
    [https://developers.google.com/maps/documentation/directions/#api_key](https://developers.google.com/maps/documentation/directions/#api_key).
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1689
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following source code to retrieve and display step-by-step instructions
    on how to walk from one location to another using the Google Directions API:'
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  id: totrans-1691
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE238]'
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'Create an HTML unordered list:'
  id: totrans-1693
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE239]'
  id: totrans-1694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: 'Create some JavaScript that will load retrieved directions:'
  id: totrans-1695
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE240]'
  id: totrans-1696
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'Create a JavaScript function that sends an asynchronous HTTP (**AJAX**) request
    to the Google Maps API to retrieve directions:'
  id: totrans-1697
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE241]'
  id: totrans-1698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'Do not forget to replace `<API key>` with the **Key for server apps** value
    provided by Google for the Directions API. Please note that a similar key has
    to be set to the source code in the subsequent recipes that utilize Google APIs
    too:'
  id: totrans-1699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE242]'
  id: totrans-1700
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: 'Provide start and end locations as arguments and execute the `retrieveDirection()`
    function. For example:'
  id: totrans-1701
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE243]'
  id: totrans-1702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: How it works
  id: totrans-1703
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first mandatory step is to allow access to the Tizen web application to
    Google servers. After that, an HTML unordered list with ID directions is constructed.
    An origin and destination is provided to the JavaScript function `retrieveDirections()`.
    On success, the `showDirections()` function is invoked as a callback and it loads
    step-by-step instructions on how to move from the origin to the destination. The
    following screenshot displays a Tizen web application with guidance on how to
    walk from Times Square in New York to the Empire State Building:'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_09_04.jpg)'
  id: totrans-1705
  prefs: []
  type: TYPE_IMG
- en: 'The Directions API is quite flexible. The mandatory parameters are `origin`,
    `destination`, and `sensor`. Numerous other options can be configured at the HTTP
    request using different parameters. To set the desired transport, use the parameter
    `mode`, which has the following options:'
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
- en: '`driving`'
  id: totrans-1707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`walking`'
  id: totrans-1708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bicycling`'
  id: totrans-1709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transit` (for getting directions using public transport)'
  id: totrans-1710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, if the mode is not specified, its value will be set to `driving`.
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
- en: The unit system can be configured through the parameter `unit`. The options
    `metric` and `imperial` are available. The developer can also define restrictions
    using the parameter `avoid` and the addresses of one or more directions points
    at the `waypoints` parameter. A pipe (`|`) is used as a symbol for separation
    if more than one address is provided.
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-1713
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An application with similar features for getting directions can also be created
    using services from Nokia HERE. The REST API can be used in the same way as Google
    Maps API. Start by acquiring the credentials at [http://developer.here.com/get-started](http://developer.here.com/get-started).
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
- en: An asynchronous HTTP request should be sent to retrieve directions. Instructions
    on how to construct the request to the REST API are provided in its documentation
    at [https://developer.here.com/rest-apis/documentation/routing/topics/request-constructing.html](https://developer.here.com/rest-apis/documentation/routing/topics/request-constructing.html).
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
- en: The Nokia HERE JavaScript API is another excellent solution for routing. Make
    instances of classes `Display` and `Manager` provided by the API to create a map
    and a routing manager. After that, create a list of way points whose coordinates
    are defined by an instance of the `Coordinate` class. Refer to the following example
    provided by the user's guide of the API to learn details at [https://developer.here.com/javascript-apis/documentation/maps/topics/routing.html](https://developer.here.com/javascript-apis/documentation/maps/topics/routing.html).
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
- en: 'The full specifications about classes `Display`, `Manager`, and `Coordinate`
    are available at the following links:'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.map.Display.html](https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.map.Display.html)'
  id: totrans-1718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.routing.Manager.html](https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.routing.Manager.html)'
  id: totrans-1719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.geo.Coordinate.html](https://developer.here.com/javascript-apis/documentation/maps/topics_api_pub/nokia.maps.geo.Coordinate.html)'
  id: totrans-1720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-1721
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All details, options, and returned results by the Google Directions API are
    available at [https://developers.google.com/maps/documentation/directions/](https://developers.google.com/maps/documentation/directions/).
  id: totrans-1722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocoding
  id: totrans-1723
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Geocoding** is the process of retrieving geographical coordinates associated
    with an address. It is often used in mobile applications that use maps and provide
    navigation. In this recipe, you will learn how to convert an address to longitude
    and latitude using JavaScript and AJAX requests to the Google Geocoding API.'
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1725
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You must obtain keys before you can use the Geocoding API in a Tizen web application:'
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
- en: Visit Google Developers Console at [https://code.google.com/apis/console](https://code.google.com/apis/console).
  id: totrans-1727
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Services** and turn on **Geocoding API**.
  id: totrans-1728
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **API Access** and get the value of **Key for server apps.** Use it
    in all requests from your Tizen web application to the API.
  id: totrans-1729
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more details regarding the API keys for the Geocoding API, visit [https://developers.google.com/maps/documentation/geocoding/#api_key](https://developers.google.com/maps/documentation/geocoding/#api_key).
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1731
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to retrieve geographic coordinates of an address
    in a Tizen web application using the Google Geocoding API:'
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  id: totrans-1733
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE244]'
  id: totrans-1734
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'Create a JavaScript function to handle results provided by the API:'
  id: totrans-1735
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE245]'
  id: totrans-1736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'Create a JavaScript function that sends a request to the API:'
  id: totrans-1737
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE246]'
  id: totrans-1738
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: As in the previous recipes, you should again replace `<API key>` with the **Key
    for server apps** value provided by Google for the Geocoding API.
  id: totrans-1739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE247]'
  id: totrans-1740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'Provide the address as an argument to the `geocoding()` function and invoke
    it. For example:'
  id: totrans-1741
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE248]'
  id: totrans-1742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: How it works
  id: totrans-1743
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The address is passed as an argument to the `geocoding()` function, which sends
    a request to the URL of Google Geocoding API. The URL specifies that the returned
    result should be serialized as JSON. The parameters of the URL contain information
    about the address and the API key. Additionally, there is a parameter that indicates
    whether the device has a sensor. In general, Tizen mobile devices are equipped
    with GPS so the parameter sensor is set to `true`.
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
- en: 'A successful response from the API is handled by the `retrieveCoordinates()`
    function, which is executed as a callback. After processing the data, the code
    snippet in this recipe prints the retrieved coordinates at the console. For example,
    if we provide the address of the Empire State Building to the `geocoding()` function
    on success, the following text will be printed: **latitude: 40.7481829 longitude:
    -73.9850635**.'
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1746
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explore the Google Geocoding API documentation to learn more details regarding
    the usage of the API and all of its parameters at [https://developers.google.com/maps/documentation/geocoding/#GeocodingRequests](https://developers.google.com/maps/documentation/geocoding/#GeocodingRequests).
  id: totrans-1747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nokia HERE provides similar features. Refer to the documentation of its Geocoder
    API to learn how to create the URL of a request to it at [https://developer.here.com/rest-apis/documentation/geocoder/topics/request-constructing.html](https://developer.here.com/rest-apis/documentation/geocoder/topics/request-constructing.html).
  id: totrans-1748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reverse geocoding
  id: totrans-1749
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reverse geocoding, also known as address lookup, is the process of retrieving
    an address that corresponds to a location described with geographic coordinates.
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
- en: The Google Geocoding API provides methods for both geocoding as well as reverse
    geocoding. In this recipe, you will learn how to find the address of a location
    based on its coordinates using the Google API as well as an API provided by OpenStreetMap.
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1752
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The same keys are required for geocoding and reverse geocoding. If you have
    already obtained a key for the previous recipe, you can directly use it here again.
    Otherwise, you can perform the following steps:'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
- en: Visit Google Developers Console at [https://code.google.com/apis/console](https://code.google.com/apis/console).
  id: totrans-1754
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Services** and turn on **Geocoding API**.
  id: totrans-1755
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **API Access**, locate the value of **Key for server apps**, and use
    it in all requests from the Tizen web application to the API.
  id: totrans-1756
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need more information about the Geocoding API keys, visit [https://developers.google.com/maps/documentation/geocoding/#api_key](https://developers.google.com/maps/documentation/geocoding/#api_key).
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1758
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the described algorithm to retrieve an address based on geographic coordinates
    using the Google Maps Geocoding API:'
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  id: totrans-1760
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE249]'
  id: totrans-1761
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: 'Create a JavaScript function to handle the data provided for a retrieved address:'
  id: totrans-1762
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE250]'
  id: totrans-1763
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: 'Implement a function that performs a request to Google servers to retrieve
    an address based on latitude and longitude:'
  id: totrans-1764
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE251]'
  id: totrans-1765
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: 'Pay attention that `<API key>` has to be replaced with the **Key for server
    apps** value provided by Google for the Geocoding API:'
  id: totrans-1766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE252]'
  id: totrans-1767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'Provide coordinates as arguments of function and execute it, for example:'
  id: totrans-1768
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE253]'
  id: totrans-1769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: How it works
  id: totrans-1770
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If an application developed using the preceding source code invokes the `reverseGeocoding()`
    function with latitude 40.748183 and longitude -73.985064, the printed result
    at the console will be **350 5th Avenue, New York, NY 10118, USA**. By the way,
    as in the previous recipe, the address corresponds to the location of the Empire
    State Building in New York.
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
- en: The `reverseGeocoding()` function sends an AJAX request to the API. The parameters
    at the URL specify that the response must be formatted as JSON. The longitude
    and latitude of the location are divided by commas and set as a value of the `latlng`
    parameter in the URL.
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-1773
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OpenStreetMap also provides a reverse geocoding service. For example, the following
    URL will return a JSON result of a location with the latitude 40.7481829 and longitude
    -73.9850635:'
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
- en: '[http://nominatim.openstreetmap.org/reverse?format=json&lat=40.7481829&lon=-73.9850635](http://nominatim.openstreetmap.org/reverse?format=json&lat=40.7481829&lon=-73.9850635)'
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of OpenStreetMap is that it is an open project with a great
    community. Its API for reverse geocoding does not require any keys and it can
    be used for free.
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
- en: Leaflet is a popular open source JavaScript library based on OpenStreetMap optimized
    for mobile devices. It is well supported and easy to use, so you may consider
    integrating it in your Tizen web applications. Explore its features at [http://leafletjs.com/features.html](http://leafletjs.com/features.html).
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1778
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All details regarding the Google Geocoding API are available at [https://developers.google.com/maps/documentation/geocoding/#ReverseGeocoding](https://developers.google.com/maps/documentation/geocoding/#ReverseGeocoding)
  id: totrans-1779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you prefer to user the API provided by OpenStreetMap, take a look at [http://wiki.openstreetmap.org/wiki/Nominatim#Reverse_Geocoding_.2F_Address_lookup](http://wiki.openstreetmap.org/wiki/Nominatim#Reverse_Geocoding_.2F_Address_lookup)
  id: totrans-1780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating distance
  id: totrans-1781
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is dedicated to a method for calculating the distance between two
    locations. The Google Directions API will be used again. Unlike the *Getting directions*
    recipe, this time only the information about the distance will be processed.
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-1783
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like the other recipe related to the Google API, in this case, the developer
    must obtain the API keys before the start of the development. Please follow these
    instructions to register and get an appropriate API key:'
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
- en: Visit Google Developers Console at [https://code.google.com/apis/console](https://code.google.com/apis/console).
  id: totrans-1785
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Services** and turn on **Geocoding API**.
  id: totrans-1786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **API Access** and save the value of **Key for server apps.** Use it
    in all requests from your Tizen web application to the API.
  id: totrans-1787
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need more information about the API keys for Directions API, visit [https://developers.google.com/maps/documentation/directions/#api_key](https://developers.google.com/maps/documentation/directions/#api_key).
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1789
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to calculate the distance between two locations:'
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow the application to access websites by adding the following line to `config.xml`:'
  id: totrans-1791
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE254]'
  id: totrans-1792
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'Implement a JavaScript function that will process the retrieved data:'
  id: totrans-1793
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE255]'
  id: totrans-1794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'Create a JavaScript function that will request directions using the Google
    Maps API:'
  id: totrans-1795
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE256]'
  id: totrans-1796
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Remember to replace `<API key>` with the **Key for server apps** value provided
    by Google for the Direction API:'
  id: totrans-1797
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE257]'
  id: totrans-1798
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'Execute the `checkDistance()` function and provide the origin and the destination
    as arguments, for example:'
  id: totrans-1799
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE258]'
  id: totrans-1800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'Geographical coordinates can also be provided as arguments to the function
    `checkDistance()`. For example, let''s calculate the same distances but this time
    by providing the latitude and longitude of locations in the Bulgarian cities Plovdiv
    and Burgas:'
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  id: totrans-1802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: How it works
  id: totrans-1803
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `checkDistance()` function sends data to the Google Directions API. It sets
    the origin, the destination, the sensor, the unit system, and the API key as parameters
    of the URL. The result returned by the API is provided as JSON, which is handled
    in the `retrieveDistance()` function.
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
- en: 'The output in the console of the preceding example, which retrieves the distance
    between the Bulgarian cities Plovdiv and Burgas, is `The distance between Plovdiv,
    Bulgaria and Burgas, Bulgaria is: 253 km.`'
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1806
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For all details about the Directions API as well as a full description of the
    returned response, visit [https://developers.google.com/maps/documentation/directions/](https://developers.google.com/maps/documentation/directions/).
  id: totrans-1807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting device motion
  id: totrans-1808
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe offers a tutorial on how to detect and handle device motion in Tizen
    web applications. No specific Tizen APIs will be used. The source code in this
    recipe relies on the standard W3C `DeviceMotionEvent`, which is supported by Tizen
    web applications as well as any modern web browser.
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1810
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please follow these steps to detect device motion and display its acceleration
    in a Tizen web application:'
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
- en: 'Create some HTML components to show device acceleration, for example:'
  id: totrans-1812
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE260]'
  id: totrans-1813
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: 'Create a JavaScript function to handle errors:'
  id: totrans-1814
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE261]'
  id: totrans-1815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'Create a JavaScript function that handles motion events:'
  id: totrans-1816
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE262]'
  id: totrans-1817
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'Create a JavaScript function that starts a listener for motion events:'
  id: totrans-1818
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE263]'
  id: totrans-1819
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: 'Invoke a function at an appropriate location of the source code of the application:'
  id: totrans-1820
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE264]'
  id: totrans-1821
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: How it works
  id: totrans-1822
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `deviceMotion()` function registers an event listener that invokes the
    `motionDetected()` function as a callback when device motion event is detected.
    All errors, including an error if `DeviceMotionEvent` is not supported, are handled
    in the `showError()` function. As shown in the following screenshot, the `motionDetected()`
    function loads the data of the properties of `DeviceMotionEvent` into the HTML5
    labels that were created in the first step. The results are displayed using standard
    units for acceleration according to the international system of units (**SI**)—metres
    per second squared (m/s2). The JavaScript method `toFixed()` is invoked to convert
    the result to a string with two decimals:'
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_09_05.jpg)'
  id: totrans-1824
  prefs: []
  type: TYPE_IMG
- en: A Tizen web application that detects device motion
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-1826
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notice that the device motion event specification is part of the `DeviceOrientationEvent`
    specification. Both are still in draft. The latest published version is available
    at [http://www.w3.org/TR/orientation-event/](http://www.w3.org/TR/orientation-event/).
  id: totrans-1827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code of a sample Tizen web application that detects device motion
    is provided along with this book. You can import the project of the application
    into the Tizen IDE and explore it.
  id: totrans-1828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting device orientation
  id: totrans-1829
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to monitor changes of device orientation
    using the HTML5 `DeviceOrientation` event as well as get the device orientation
    using the Tizen SystemInfo API. Both methods for retrieving device orientation
    have advantages and work in Tizen web applications. It is up to the developer
    to decide which approach is more suitable for their application.
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1831
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to register a listener and handle device orientation
    events in your Tizen web application:'
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a JavaScript function to handle errors:'
  id: totrans-1833
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE265]'
  id: totrans-1834
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: 'Create a JavaScript function that handles changes of the orientation:'
  id: totrans-1835
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE266]'
  id: totrans-1836
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: 'Create a JavaScript function that adds a listener for the device orientation:'
  id: totrans-1837
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE267]'
  id: totrans-1838
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: 'Execute the JavaScript function to start listening for device orientation events:'
  id: totrans-1839
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE268]'
  id: totrans-1840
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: How it works
  id: totrans-1841
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If `DeviceOrientationEvent` is supported, the `deviceOrientation()` function
    binds the event to the `orientationDetected()` function, which is invoked as a
    callback only on success. The `showError()` function will be executed only if
    a problem occurs.
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
- en: An instance of the `DeviceOrientationEvent` interface is provided as an argument
    of the `orientationDetected()` function. In the preceding code snippet, the values
    of its four read-only properties `absolute` (a Boolean value, `true` if the device
    provides orientation data absolutely), `alpha` (motion around the *z* axis), `beta`
    (motion around the *x* axis), and `gamma` (motion around the *y* axis) are printed
    in the console.
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-1844
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is an easier way to determine whether a Tizen device is in landscape or
    portrait mode. In a Tizen web application, in this case, it is recommended to
    use the SystemInfo API.
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet retrieves the device orientation:'
  id: totrans-1846
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  id: totrans-1847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'The status of the orientation can be one of the following values:'
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
- en: '`PORTRAIT_PRIMARY`'
  id: totrans-1849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PORTRAIT_SECONDARY`'
  id: totrans-1850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LANDSCAPE_PRIMARY`'
  id: totrans-1851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LANDSCAPE_SECONDARY`'
  id: totrans-1852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-1853
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DeviceOrientationEvent` specification is still a draft. The latest published
    version is available at [http://www.w3.org/TR/orientation-event/](http://www.w3.org/TR/orientation-event/).
  id: totrans-1854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the Tizen SystemInfo API, visit [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/systeminfo.html](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.device.apireference/tizen/systeminfo.html).
  id: totrans-1855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Vibration API
  id: totrans-1856
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen is famous for its excellent support of HTML5 and W3C APIs. The standard
    Vibration API is also supported and it can be used in Tizen web applications.
    This recipe offers code snippets on how to activate vibration on a Tizen device.
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-1858
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following code snippet to activate the vibration of the device for
    three seconds:'
  id: totrans-1859
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE270]'
  id: totrans-1860
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: 'To cancel an ongoing vibration, just call the `vibrate()` method again with
    zero as a value of its argument:'
  id: totrans-1861
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE271]'
  id: totrans-1862
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: 'Alternatively, the vibration can be canceled by passing an empty array to the
    same method:'
  id: totrans-1863
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE272]'
  id: totrans-1864
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: How it works
  id: totrans-1865
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The W3C Vibration API is used through the JavaScript object, `navigator`. Its
    `vibrate()` method expects either a single value or an array of values. All values
    must be specified in milliseconds. The value provided to the `vibrate()` method
    in the preceding example is `3000` because 3 seconds is equal to 3000 milliseconds.
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-1867
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The W3C Vibration API allows advanced tuning of the device vibration. A list
    of time intervals (with values in milliseconds), during which the device will
    vibrate, can be specified as an argument of the `vibrate()` method. For example,
    the following code snippet will make the device vibrate for 100 ms, stand still
    for 3 seconds, and then again vibrate, but this time just for 50 ms:'
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  id: totrans-1869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: See also
  id: totrans-1870
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on the vibration capabilities and the API usage, visit
    [http://www.w3.org/TR/vibration/](http://www.w3.org/TR/vibration/).
  id: totrans-1871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen native applications for the mobile profile have exposure to additional
    APIs written in C++ for light and proximity sensors. Explore the source code of
    the sample native application SensorApp which is provided with the Tizen SDK to
    learn how to use these sensors. More information about them is available at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/uix/light_sensor.htm](http://ttps://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/uix/light_sensor.htm)
    and [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/uix/proximity_sensor.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/uix/proximity_sensor.htm).
  id: totrans-1872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

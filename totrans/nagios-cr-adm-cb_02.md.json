["```\n    # cd /usr/local/nagios/libexec\n    # ls\n    check_apt       check_ide_smart     check_nntp      check_simap\n    check_breeze    check_ifoperstatus  check_nntps     check_smtp\n    check_by_ssh    check_ifstatus      check_nt        check_spop\n    ...\n\n    ```", "```\n    # cd /usr/local/nagios/libexec\n\n    ```", "```\n    # wget 'http://exchange.nagios.org/components/com_mtree/attachment.php?link_id=307&cf_id=29' -O check_rsync\n\n    ```", "```\n    # chown nagios.nagios check_rsync\n    # chmod 0770 check_rsync\n\n    ```", "```\n    # sudo -s -u nagios\n    $ ./check_rsync\n    Usage: check_rsync -H <host> [-p <port>] [-m <module>[,<user>,<password>] [-m <module>[,<user>,<password>]...]]\n\n    ```", "```\n    $ ./check_rsync -H troy.naginet\n    Output normally starts with the status determined, with any extra information after a colon:\n    OK: Rsync is up\n\n    ```", "```\n$ ./configure\n$ make\n# make install\n\n```", "```\n    define command {\n        command_name  check_rsync\n        command_line  $USER1$/check_rsync -H $HOSTADDRESS$\n    }\n    ```", "```\n    # grep -R check_rsync /usr/local/nagios/etc\n\n    ```", "```\n    # cd /usr/local/nagios/libexec\n\n    ```", "```\n    # rm check_rsync\n\n    ```", "```\n    # /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg\n    # /etc/init.d/nagios restart\n\n    ```", "```\n    # cd /usr/local/nagios/etc/objects\n\n    ```", "```\n    # vi commands.cfg\n\n    ```", "```\n    define command {\n        command_name  check_rsync\n     command_line  $USER1$/check_rsync -H $HOSTADDRESS$\n    }\n    ```", "```\n    # /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg\n    # /etc/init.d/nagios restart\n\n    ```", "```\ndefine service {\n    use                  generic-service\n    host_name            troy.naginet\n    service_description  RSYNC\n check_command        check_rsync\n}\n```", "```\n$ /usr/local/nagios/libexec/check_rsync -H troy.naginet\n\n```", "```\n$ /usr/local/nagios/libexec/check_rsync -H troy.naginetOK: Rsync is up\n\n```", "```\ndefine command {\n    command_name  check_rsync_backup\n command_line  $USER1$/check_rsync -H $HOSTADDRESS$ -m backup\n}\n```", "```\ndefine command {\n    command_name  check_rsync_altport\n command_line  $USER1$/check_rsync -H $HOSTADDRESS$ -p 5873\n}\n```", "```\n    # cd /usr/local/nagios/etc/objects\n\n    ```", "```\n    # vi commands.cfg\n\n    ```", "```\n    # 'check_http' command_definition\n    define command {\n     command_name  check_http\n     command_line  $USER1$/check_http -H $HOSTADDRESS$ $ARG1$\n    }\n\n    ```", "```\n    # 'check_http_altport' command_definition\n    define command {\n     command_name  check_http_altport\n     command_line  $USER1$/check_http -H $HOSTADDRESS$ -p 8080 $ARG1$\n    }\n\n    ```", "```\n    # /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg\n    # /etc/init.d/nagios restart\n\n    ```", "```\ndefine service {\n    use                  generic-service\n    host_name            sparta.naginet\n service_description  HTTP_8080\n check_command        check_http_alt\n}\n```", "```\n#\n# 'check_http_altport' command_definition. This is to keep track of\n# servers that have panels running on alternative ports.\n#\ndefine command {\n command_name  check_http_altport\n command_line  $USER1$/check_http -H $HOSTADDRESS$ -p 8080 $ARG1$\n}\n\n```", "```\n    # cd /usr/local/nagios/etc/objects\n\n    ```", "```\n    # vi crete.naginet.cfg\n\n    ```", "```\n    define host {\n        use            linux-server\n        host_name      crete.naginet\n        alias          crete\n        address        10.128.0.23\n        check_command  check_ssh\n    }\n    ```", "```\n    # sudo -s -u nagios\n    $ /usr/local/nagios/libexec/check_ssh -H 10.128.0.23\n    SSH OK - OpenSSH_5.5p1 Debian-6+squeeze1 (protocol 2.0)\n\n    ```", "```\n    # /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg\n    # /etc/init.d/nagios restart\n\n    ```", "```\n    # cd /usr/local/nagios/libexec\n\n    ```", "```\n    # vi check_vuln_kernel\n\n    ```", "```\n    #!/usr/bin/env perl\n\n    #\n    # Use strict Perl style and report potential problems to help us write this\n    # securely and portably.\n    #\n    use strict;\n    use warnings;\n\n    #\n    # Include the Nagios utils.pm file, which includes definitions for the return\n    # statuses that are appropriate for each level: OK, WARNING, CRITICAL, and\n    # UNKNOWN. These will become available in the %ERRORS hash.\n    #\n    use lib \"/usr/local/nagios/libexec\";\n    use utils \"%ERRORS\";\n    #\n    # Define a pattern that matches any kernel vulnerable enough so that if we find\n    # it we should return a CRITICAL status.\n    #\n    my $critical_pattern = \"^(2\\.6\\.39)[^\\\\d]\";\n\n    #\n    # Same again, but for kernels that only need a WARNING status.\n    #\n    my $warning_pattern = \"^(2\\.6\\.19|2\\.6\\.24|3\\.0\\.1)[^\\\\d]\";\n\n    #\n    # Run the command uname with option -r to get the kernel release version, put\n    # the output into a scalar $release, and trim any newlines or whitespace\n    # around it.\n    #\n    chomp(my $release = qx|/bin/uname -r|);\n\n    #\n    # If uname -r exited with an error status, that is, anything greater than 1,\n    # then there was a problem and we need to report that as the UNKNOWN status\n    # defined by Nagios Core's utils.pm.\n    #\n    if ($? != 0) {\n     exit $ERRORS{UNKNOWN};\n    }\n\n    #\n    # Check to see if any of the CRITICAL patterns are matched by the release\n    # number. If so, print the version number and exit, returning the appropriate\n    # status.\n    #\n    if ($release =~ m/$critical_pattern/) {\n     printf \"CRITICAL: %s\\n\", $release;\n     exit $ERRORS{CRITICAL};\n    }\n\n    #\n    # Same again, but for WARNING patterns.\n    #\n    if ($release =~ m/$warning_pattern/) {\n     printf \"WARNING: %s\\n\", $release;\n     exit $ERRORS{WARNING};\n    }\n\n    #\n    # If we got this far, then uname -r worked and didn't match any of the\n    # vulnerable patterns, so we'll print the kernel release and return an OK\n    # status.\n    #\n    printf \"OK: %s\\n\", $release;\n    exit $ERRORS{OK};\n\n    ```", "```\n    # chown nagios.nagios check_vuln_kernel# chmod 0770 check_vuln_kernel\n    Run the plugin directly to test it:\n    # sudo -s -u nagios\n    $ ./check_vuln_kernel\n    OK: 2.6.32-5-686\n\n    ```", "```\ndefine command {\n    command_name  check_vuln_kernel\n    command_line  $USER1$/check_vuln_kernel\n}\n```", "```\ndefine service {\n    use                  local-service\n    host_name            localhost\n    service_description  VULN_KERNEL\n check_command        check_vuln_kernel\n}\n```"]
- en: Chapter 10. Security Central
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章 安全中心
- en: 'Linux security is not a chapter in a book, it is a way of life. For every task
    that you carry out in CentOS, you should consider the security impact and how
    your actions can be made more secure. Of course, security takes many forms, and
    much of it is quite simple (for example, the physical security of servers locked
    in server rooms and so on. In this section, we will visit the world of **pluggable
    authentication modules** (**PAM**) and **SELinux**. Do not be scared of either,
    especially, SELinux; they are your friends. In this chapter, we will cover the
    following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 安全不仅仅是书中的一章，它是一种生活方式。在你执行 CentOS 中的每一项任务时，你都应该考虑安全影响，以及如何让你的操作变得更加安全。当然，安全有很多形式，其中很多都很简单（例如，服务器房里上锁的物理安全等等）。在这一部分，我们将深入了解
    **可插拔认证模块**（**PAM**）和 **SELinux**。不要害怕这两者，尤其是 SELinux；它们是你的朋友。在本章中，我们将涵盖以下内容：
- en: '**Understanding PAM configuration files**: At the heart of PAM are the files
    located in `/etc/pam.d`; I will lead you through their syntax and meaning'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解 PAM 配置文件**：PAM 的核心是位于 `/etc/pam.d` 中的文件；我将带你了解它们的语法和含义。'
- en: '**Limits of PAM**: Through PAM''s limits module, we can restrict limits on
    system resources that can be obtained in a user session'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PAM 的限制**：通过 PAM 的限制模块，我们可以限制用户会话中可以使用的系统资源。'
- en: '**SELinux**: This is a quick guide to SELinux, both through the filesystem
    and the user''s perspective'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SELinux**：这是一个快速指南，涵盖了 SELinux 从文件系统到用户视角的内容。'
- en: '**Hardening Linux**: This is a checklist on what and how to secure your Linux
    server'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加固 Linux**：这是一个关于如何保护你的 Linux 服务器的检查清单。'
- en: Understanding PAM configuration files
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 PAM 配置文件
- en: Rather than building authentication into each and every application that needs
    it, most services in Linux will make use of modules such as PAM. These modules
    have the `.so` extension to identify them as standard modules, and are used by
    programs rather than the kernel directly. They make their home in `/lib/security`
    or `/lib64/security`, depending on whether your system is 32 bit or 64 bit. Each
    service or program that has PAM capabilities has its own configuration that dictates
    how authentication and session settings will be enforced; these files are located
    in `/etc/pam.d`. A quick look in this folder will reveal some recognizable names,
    such as `sshd`, `sudo`, `su`, and `login`, all representing services that have
    a level of authentication associated with them.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与其将认证功能构建到每一个需要它的应用程序中，大多数 Linux 服务会使用如 PAM 这样的模块。这些模块具有 `.so` 扩展名，用于标识它们是标准模块，并且是由程序而不是内核直接使用的。它们通常位于
    `/lib/security` 或 `/lib64/security` 目录下，具体位置取决于你的系统是 32 位还是 64 位。每个具有 PAM 功能的服务或程序都有自己的配置文件，规定如何强制执行认证和会话设置；这些文件位于
    `/etc/pam.d` 中。快速查看这个文件夹，你会看到一些熟悉的名称，如 `sshd`、`sudo`、`su` 和 `login`，它们都代表了具有一定认证功能的服务。
- en: The `/etc/pam.d/login` file will be used by the console login program and `/etc/pamd/sshd`
    by the OpenSSH server. There will be multiple lines in each configuration file,
    and every line will have settings for type, control, module-path, and optional
    arguments to the module.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/pam.d/login` 文件将由控制台登录程序使用，`/etc/pamd/sshd` 则由 OpenSSH 服务器使用。每个配置文件中会有多行内容，每一行都包含类型、控制、模块路径以及可选的模块参数设置。'
- en: 'From the following figure, you can gain some understanding of the file syntax
    and see the four type settings: account, auth, session, and password.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从下图中，你可以对文件语法有所了解，并看到四种类型的设置：账户、认证、会话和密码。
- en: '![Understanding PAM configuration files](img/5920OS_10_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![理解 PAM 配置文件](img/5920OS_10_01.jpg)'
- en: 'Take the following line as an example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下这一行作为例子：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This line has been taken from the `/etc/pam.d/login` file and has been set
    for the `account` type with the control set to `required` for the specified module:
    `pam_nologin.so`. This particular module checks for the existence of the `/etc/nologin`
    file; if it does exist, then even on successful authentication the user will not
    gain access to the system. He or she will be shown either the contents of the
    `/etc/nologin` file or a generic message explaining that login could not occur.
    This approach in itself becomes a simple way to temporarily disable logins to
    a server by just creating the `nologin` file; delete the file to re-enable logins.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行来自 `/etc/pam.d/login` 文件，并且已为指定模块 `pam_nologin.so` 设置了 `account` 类型，控制设定为
    `required`：此模块会检查 `/etc/nologin` 文件的存在情况；如果该文件存在，即使身份验证成功，用户也无法访问系统。他或她将看到 `/etc/nologin`
    文件的内容或一个通用消息，说明无法登录。此方法本身成为一种临时禁用登录服务器的简单方式，只需创建 `nologin` 文件；删除文件即可重新启用登录。
- en: Each of the elements of a PAM configuration file are listed next.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: PAM 配置文件的每个元素如下所示。
- en: Type
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型
- en: 'Type defines when the module will be invoked. There are 4 valid entries:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 类型定义了模块何时会被调用。共有四种有效的类型：
- en: '**Account**: This is typically used to restrict or permit access to a service
    based on the time of day, maximum users, concurrent logins, and so on. Think of
    these as account restrictions.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账户**: 通常用于根据一天中的时间、最大用户数、并发登录等条件来限制或允许访问服务。可以将这些视为账户限制。'
- en: '**Auth**: This is used to establish who the user is, most often, by prompting
    for a password. This module can also be used to grant group membership.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证**: 用于确定用户身份，通常是通过提示输入密码。此模块也可以用于授予用户组成员资格。'
- en: '**Password**: This type is used when updating a user''s authentication token;
    again, most commonly, the password. Typically, one module will need to be loaded
    for each challenge and response authentication method.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**: 此类型用于更新用户的认证令牌；通常是密码。通常，每个挑战和响应认证方法需要加载一个模块。'
- en: '**Session**: This is associated with events that need to be complete before
    a user is given access to the server, such as creating a home directory, if required.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话**: 关联于在用户访问服务器之前必须完成的事件，例如创建主目录（如果需要）。'
- en: Control
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制
- en: The control field indicates the behavior of the PAM-API based on success or
    failure returned by the module.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 控制字段表示基于模块返回的成功或失败，PAM-API 的行为。
- en: '**required** (`success=ok new_authtok_reqd=ok ignore=ignore default=bad`):
    Failure will ultimately lead to the API returning `failure`, but only after the
    remaining modules have been invoked.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**required** (`success=ok new_authtok_reqd=ok ignore=ignore default=bad`):
    失败最终会导致 API 返回 `failure`，但只有在其他模块执行完后才会返回。'
- en: '**requisite** (`success=ok new_authtok_reqd=ok ignore=ignore default=die`):
    Like required, except control and failure is immediately returned to the calling
    service.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**必需** (`success=ok new_authtok_reqd=ok ignore=ignore default=die`): 类似于“required”，但是控制和失败会立即返回给调用服务。'
- en: '**sufficient** (`success=done new_authtok_reqd=done default=ignore`): Success
    of a module with this type is enough to satisfy the authentication requirements
    unless a previously required module has failed. A failure of a module of this
    type is not fatal.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**足够** (`success=done new_authtok_reqd=done default=ignore`): 此类型模块的成功足以满足认证要求，除非先前的必需模块失败。此类型模块的失败不会致命。'
- en: '**optional** (`success=ok new_authtok_reqd=ok default=ignore`): Success or
    failure of this module is not important.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可选** (`success=ok new_authtok_reqd=ok default=ignore`): 此模块的成功或失败不重要。'
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Recently, the second notation (within the brackets) is referred to for the control
    value, which is accepted to be a better explanation of the meaning.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，第二种标记（括号内的内容）用于表示控制值，认为这是对含义更好的解释。
- en: The module path
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块路径
- en: The module path will consist of either the full filesystem path to the referenced
    module and the path would begin with the `/` filesystem or a relative to the `/lib/security`
    or `/lib64/security` directory.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 模块路径将包括引用模块的完整文件系统路径，路径以 `/` 文件系统开头，或者是相对于 `/lib/security` 或 `/lib64/security`
    目录的路径。
- en: Module arguments
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块参数
- en: 'The module arguments are a space delimited list of tokens that can modify the
    behavior of a module. The following is an example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 模块参数是一个以空格分隔的标记列表，可以修改模块的行为。以下是一个示例：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We could put arguments together and use an example whereby we create a user's
    home directory for them on first login. This can be useful where we create many
    accounts in one go and do not want to overload the server creating the home directories
    at the same time. This is common for universities and so on where many accounts
    are created in batches.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将参数组合在一起，举个例子，在用户首次登录时为他们创建家目录。这在我们一次性创建许多账户时很有用，可以避免同时创建家目录时过载服务器。这在大学等地方非常常见，很多账户是批量创建的。
- en: 'Users would most probably connect to the server using SSH, so we should consider
    adding the following line to the `/etc/pam.d/sshd` file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 用户很可能通过 SSH 连接到服务器，因此我们应该考虑将以下行添加到 `/etc/pam.d/sshd` 文件中：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This mechanism utilizes PAM to create the home directory at user login.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该机制利用 PAM 在用户登录时创建家目录。
- en: Limits of PAM
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PAM 的限制
- en: 'Let''s stick with using the SSH login at the moment. Many users will only access
    the server via SSH, perhaps using the PuTTY SSH client on Windows. If we want
    to control access to system resources, then we can implement restrictions using
    PAM and `pam_limits.so`. We should add the following line to the `/etc/pam.d/sshd`
    file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们继续使用 SSH 登录。许多用户可能只通过 SSH 访问服务器，可能在 Windows 上使用 PuTTY SSH 客户端。如果我们想控制对系统资源的访问，可以通过
    PAM 和 `pam_limits.so` 来实施限制。我们应该将以下行添加到 `/etc/pam.d/sshd` 文件中：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will implement the module, however, we still have to set the restrictions
    in the `/etc/security/limits.conf` file; the module reads from this file. The
    file''s structure is set as follows with these elements making up a line in the
    limits file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这将实现该模块，但我们仍然需要在 `/etc/security/limits.conf` 文件中设置限制；该模块从此文件中读取。文件的结构如下，以下元素构成
    limits 文件中的一行：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Domain
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 域
- en: Domain represents to whom the limit is intended. This, most often, is a username
    such as `user1` or a group entry such as `@users`; the `@` symbol differentiates
    between user and group names. To implement a default restriction to apply to all
    accounts that do not have their own entry is the wildcard `*`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 域表示限制适用的对象。通常，这是一个用户名，例如 `user1`，或者一个组条目，例如 `@users`；`@` 符号用于区分用户名和组名。要对所有没有自己条目的账户应用默认限制，可以使用通配符
    `*`。
- en: Type
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型
- en: Type can be set to `soft`, `hard`, or both with `-`. Use the `hard` restriction
    for enforcing hard resource limits. These limits are set by the root user and
    enforced by the kernel. The user cannot raise their requirement of system resources
    above such values. Be cautious when enforcing restrictions before adequately testing,
    as it is possible to bring a system to a halt if enough processes cannot be spawned.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 类型可以设置为 `soft`、`hard` 或两者的组合（用 `-`）。使用 `hard` 限制来强制执行硬资源限制。这些限制由 root 用户设置并由内核强制执行。用户不能将其系统资源需求提高到这些值之上。强制执行限制前请小心测试，因为如果无法创建足够的进程，可能会导致系统崩溃。
- en: The `soft` restriction is used to enforce soft resource limits. These limits
    are the ones that the user can move up or down within the permitted range with
    any pre-existing hard limits. The values specified with this token can be thought
    of as default values for normal system usage. Use of the `-` symbol is to enforce
    both soft and hard resource limits together.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`soft` 限制用于强制执行软资源限制。这些限制是用户可以在允许的范围内上下调整的，前提是没有预设的硬性限制。使用这个标记指定的值可以视为正常系统使用的默认值。使用
    `-` 符号则是同时强制执行软性和硬性资源限制。'
- en: Item
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项
- en: 'The item represents the system resource on which the restriction is being made.
    Command items that can be restricted include the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 项表示正在进行限制的系统资源。可以限制的命令项包括以下内容：
- en: '**nofile**: This sets the maximum number of open files'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nofile**: 这设置了最大打开文件数'
- en: '**maxlogins**: This is the maximum number of logins for this user except for
    the user with uid=0'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**maxlogins**: 这是除 uid=0 用户外，此用户的最大登录次数'
- en: '**maxsyslogins**: This is the maximum number of all logins on a system'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**maxsyslogins**: 这是系统上所有登录的最大数量'
- en: '**priority**: This is the priority to run user process with (negative values
    boost process priority)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**priority**: 这是运行用户进程的优先级（负值提升进程优先级）'
- en: '**nice**: This is the maximum nice priority allowed to raise to (Linux 2.6.12
    and higher) values: [-20,19]'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nice**: 这是允许提升的最大优先级（适用于 Linux 2.6.12 及更高版本）值：[-20,19]'
- en: 'You can see from the preceding partial item list that it is possible to assign
    certain users a higher CPU priority than others, which is useful for call center
    groups whose access is more time sensitive than other accounts. The following
    example would give the telesales group a higher priority than standard users where
    the priority is normally 0:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的部分项目列表中可以看到，确实可以为某些用户分配比其他用户更高的CPU优先级，这对于那些访问时间要求较高的呼叫中心群体非常有用。以下示例会给销售团队分配比普通用户更高的优先级，普通用户的优先级通常为0：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It may also be useful to limit concurrent logins with an entry similar to the
    following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 限制并发登录也可能会很有用，类似于以下条目的设置：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These limits might be very important to the running of your server and its
    security. So do take the time to investigate what is best in your environment,
    and more information can be found by referencing the manual page:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些限制对于服务器的运行和安全可能非常重要。因此，请花时间研究在你的环境中最适合的设置，更多信息可以参考手册页面：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: SELinux
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SELinux
- en: I am not really sure if I can quantify how many blogs I read on the Internet
    where "the solution" to an issue is to disable SELinux, or at least set it into
    permissive mode. While I do not disagree that the immediate problem may then be
    resolved, it is a little like setting the filesystem permissions to rwx for all
    users authenticated or otherwise. Similarly, we all joke about users sticking
    post-it notes with password to the screen; there is little difference in this
    to an administrator disabling SELinux inappropriately.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我不太确定我是否能量化在互联网上我所读到的多少博客，其中“解决方案”是禁用SELinux，或者至少将其设置为宽容模式。虽然我并不反对即时问题可能因此得到解决，但这有点像将文件系统权限设置为所有用户都可以读写执行，无论是否经过认证。同样，我们也开玩笑说用户把密码写在便签纸上贴在屏幕上；管理员不当禁用SELinux与此没有太大区别。
- en: There are reasons that the **mandatory access control** (**MAC**) list exists,
    and we as administrators should use it to our advantage. Traditionally, we are
    accustomed to using **discretionary access control** (**DAC**) lists and these
    can be set by users as well as root. The MAC is said to be mandatory, as it can
    only be applied and revoked by root.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**强制访问控制**（**MAC**）列表存在是有原因的，我们作为管理员应该利用它。传统上，我们习惯于使用**自主访问控制**（**DAC**）列表，这些列表可以由用户或root设置。MAC被称为强制性的，因为它只能由root应用或撤销。'
- en: First the DAC list is applied, and then the MAC list. SELinux never gives additional
    rights that were not there in the first place. The real advantage that we have
    is that we can give the same process different rights depending on the SELinux
    context in which it was started or is accessing. So, a process started as a service
    through the `init` daemon can have different rights to the same process that was
    started outside of the normal `init` process by a user. SELinux is very powerful,
    and we just need to understand how we can channel its power.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先应用DAC列表，然后是MAC列表。SELinux永远不会赋予本来没有的额外权限。我们真正的优势在于，可以根据进程启动时的SELinux上下文或它访问的内容，赋予同一进程不同的权限。因此，通过`init`守护进程启动的服务进程，可以拥有与普通用户在非`init`进程中启动的相同进程不同的权限。SELinux非常强大，我们只需要了解如何有效利用它的力量。
- en: Reading the current SELinux mode
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看当前SELinux模式
- en: 'SELinux has two modes, but it can operate in three if you include the disabled
    mode. The operational modes are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux有两种模式，但如果包括禁用模式，它可以在三种模式下运行。操作模式如下：
- en: Enforcing
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制
- en: Permissive
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽容
- en: 'SELinux is enabled in both these modes, but only the `Enforcing` mode will
    apply and enforce SELinux policies. In `Permissive` mode, the policies are read
    but not acted upon; however, we can view any denials from the audit log. The log
    entries still appear as denials even though the denials are not enforced while
    in the `Permissive` mode. The `/usr/sbin/getenforce` command can be used to display
    the current SELinux mode:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux在这两种模式下都是启用的，但只有`强制`模式会应用并执行SELinux策略。在`宽容`模式下，策略会被读取，但不会被执行；不过，我们仍然可以从审计日志中查看任何拒绝的记录。即使在`宽容`模式下没有强制执行这些拒绝，日志条目仍然会显示为拒绝。可以使用`/usr/sbin/getenforce`命令来显示当前的SELinux模式：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This setting can also be read from the `/selinux/enforce` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设置也可以从`/selinux/enforce`文件中读取：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The integers 1 and 0 represent the SELinux modes: `Enforcing` and `Permissive`
    respectively. Note that the `/selinux` directory is the SELinux mountpoint in
    CentOS; in other systems, this may be `/sys/fs/selinux`, or you can check the
    output of `sestatus`, which is shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 整数 1 和 0 分别代表 SELinux 模式：`Enforcing` 和 `Permissive`。请注意，`/selinux` 目录是 CentOS
    中的 SELinux 挂载点；在其他系统中，可能是 `/sys/fs/selinux`，或者可以检查 `sestatus` 的输出，如以下截图所示：
- en: '![Reading the current SELinux mode](img/5920OS_10_02.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![读取当前 SELinux 模式](img/5920OS_10_02.jpg)'
- en: The mode can also be read from the `sestatus` (`/usr/bin/sestatus`) command;
    this command returns a little more information including the current mode as well
    as the mode configured in `/etc/selinux/config`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 `sestatus` (`/usr/bin/sestatus`) 命令读取模式；此命令返回更多信息，包括当前模式以及在 `/etc/selinux/config`
    中配置的模式。
- en: Setting the SELinux mode
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 SELinux 模式
- en: 'As with most tasks in Linux, setting the SELinux mode is very flexible, in
    that, it can be set in many ways. Firstly we will look at the use of `setenforce`
    (`/usr/sbin/setenforce`):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Linux 中的大多数任务一样，设置 SELinux 模式非常灵活，可以通过多种方式设置。首先，我们将看看使用 `setenforce` (`/usr/sbin/setenforce`)
    的方法：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first two options are used to set the mode to `Enforcing` and the bottom
    two, to `Permissive`, either method can be used, as the word and integer have
    the same meaning as the `setenforce` command.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个选项用于将模式设置为 `Enforcing`，底部两个选项用于设置为 `Permissive`，这两种方法都可以使用，因为单词和数字与 `setenforce`
    命令的含义相同。
- en: 'We can also set the mode by writing directly to the control file within the
    SELinux mountpoint:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过直接写入 SELinux 挂载点中的控制文件来设置模式：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we need more ways to set this, we can also use kernel options at boot time.
    Appending to the kernel entry in the GRUB configuration file will have the effect
    of overwriting the default mode in the `/etc/selinux/config` file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要更多设置方式，还可以在启动时使用内核选项。向 GRUB 配置文件中的内核条目追加内容将覆盖 `/etc/selinux/config` 文件中的默认模式：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Lastly, we can configure the mode in the `/etc/selinux/config` file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在 `/etc/selinux/config` 文件中配置模式。
- en: Preventing mode changes from the command line
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止从命令行更改模式
- en: 'I know many system administrators who will readily set the system to `Permissive`
    in order to provide a *quick fix*; if this is contrary to your administration
    policy, then you can enforce the mode at boot time by using the `setsebool` (`/usr/sbin/setsebool`)
    command; perhaps, as a script at system boot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道很多系统管理员会轻易将系统设置为 `Permissive` 以便提供一个 *快速修复*；如果这与你的管理政策相悖，则可以在启动时使用 `setsebool`
    (`/usr/sbin/setsebool`) 命令强制设置模式；也许在系统启动时作为脚本：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once set, the mode cannot be changed from what was set during the startup process
    either from the file or boot parameters to the kernel. This can be seen from the
    following screenshot when the mode is attempted to be changed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置，模式就不能从启动过程中的文件或内核启动参数更改。这可以通过以下截图看到，当尝试更改模式时。
- en: '![Preventing mode changes from the command line](img/5920OS_10_03.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![防止从命令行更改模式](img/5920OS_10_03.jpg)'
- en: The setting made in this way will persist until the next boot. If we would prefer
    this setting to always be in place, then we can make it truly persistent with
    the `-P` option. Do take care while using this, as it does what it says on the
    tin. The setting is then persisted.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式设置的设置将持续到下次启动。如果我们希望此设置始终生效，可以通过 `-P` 选项将其设置为真正持久。使用时要小心，因为它的作用就是按照字面意思操作，设置将被持久化。
- en: Tip
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Caution is advised in implementing the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 实施以下命令时需要小心：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Understanding SELinux contexts
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 SELinux 上下文
- en: 'SELinux will try to match the context of the process to the context of the
    resource being accessed; the SELinux policy in effect will specify what access
    is allowed to the resource from a given context. A SELinux context consists of
    four fields, note that the user is a SELinux user as opposed to a standard Linux
    user:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux 将尝试将进程的上下文与正在访问的资源的上下文匹配；生效的 SELinux 策略将指定从给定上下文访问资源时允许的权限。SELinux 上下文由四个字段组成，请注意，用户是
    SELinux 用户，而非标准 Linux 用户：
- en: User
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户
- en: Role
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色
- en: Type
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型
- en: Sensitivity
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏感度
- en: Tip
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Technically, a file has a type and a user or process a domain, but in reality
    both the type and the domain are suffixed with `-t`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，文件有一个类型，而用户或进程有一个域，但实际上，类型和域都以 `-t` 结尾。
- en: 'We can view the context of a file with `ls -Z` as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `ls -Z` 查看文件的上下文，如下所示：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'See the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下截图：
- en: '![Understanding SELinux contexts](img/5920OS_10_04.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![理解 SELinux 上下文](img/5920OS_10_04.jpg)'
- en: 'The output shows the SELinux user, role, type, and sensitivity for the `/etc/hosts`
    file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示 `/etc/hosts` 文件的 SELinux 用户、角色、类型和敏感度：
- en: '`system_u`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system_u`'
- en: '`object_r`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object_r`'
- en: '`net_conf_t`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net_conf_t`'
- en: '`s0`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s0`'
- en: 'We can view the SELinux context of a user with the command ID:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 ID 命令查看用户的 SELinux 上下文：
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'See the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下截图：
- en: '![Understanding SELinux contexts](img/5920OS_10_05.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![理解 SELinux 上下文](img/5920OS_10_05.jpg)'
- en: 'We can see from the output of the command that the SELinux context for this
    user (`user`) is currently:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令输出中我们可以看到，当前该用户（`user`）的 SELinux 上下文是：
- en: '`unconfined_u`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unconfined_u`'
- en: '`unconfined_r`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unconfined_r`'
- en: '`unconfined_t`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unconfined_t`'
- en: '`s0` sensitivity (`s0` starts and stops at `s0`) and any category (`c0` through
    to `c1023`)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s0` 敏感度（`s0` 从 `s0` 开始并停止）和任何类别（`c0` 到 `c1023`）'
- en: 'To view the SELinux context of a process, we can use the `ps` command. In this
    example, the process ID of `1629` represents the Nginx server:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看进程的 SELinux 上下文，我们可以使用 `ps` 命令。在这个示例中，进程 ID 为 `1629` 表示 Nginx 服务器：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Well over 90 percent of SELinux policies work with the type (`_t`), so most
    often this is where we will be troubleshooting.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 超过 90% 的 SELinux 策略与类型 (`_t`) 一起工作，因此通常我们会在这里进行故障排除。
- en: Troubleshooting SELinux
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除 SELinux
- en: We will now look at what happens when the context of a file resource and process
    does not match the SELinux policy.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看当文件资源和进程的上下文与 SELinux 策略不匹配时会发生什么。
- en: For the purpose of the demonstration, I will use CentOS 6.5 and the Apache httpd
    web server. To create a command SELinux issue the web server will be configured
    to access an aliased directory outside of the normal `/var/www` structure. This
    could mimic a typical process where you want to supply kickstart files via HTTP
    to aid the automatic installation of your workstations and servers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我将使用 CentOS 6.5 和 Apache httpd web 服务器。为了制造 SELinux 命令问题，web 服务器将配置为访问一个别名目录，这个目录位于正常的
    `/var/www` 结构之外。这个设置可以模拟一个常见的过程，即你希望通过 HTTP 提供 kickstart 文件，以帮助自动安装工作站和服务器。
- en: Of course as soon as we work outside of the `/var/www/` directory, the file
    context or labels will not match the expectation of the web server and access
    will be denied even though we meet the requirements of the DAC (file permissions).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，一旦我们在 `/var/www/` 目录之外工作，文件的上下文或标签将不再与 web 服务器的预期匹配，尽管我们满足 DAC（文件权限）的要求，访问仍会被拒绝。
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The web server configuration is correct to allow the URL `/ks` to point to `/install/ks`
    as this has been added in by way of an alias.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: web 服务器配置正确，允许 URL `/ks` 指向 `/install/ks`，因为它已经通过别名添加了这一点。
- en: 'Consider the following commands:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下命令：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With this in place, we can restart the web server and test access to the normal
    web root and to the URL `/ks`. For ease of demonstration, I have installed the
    command-line browser `w3m`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，我们可以重启 web 服务器并测试访问正常的 web 根目录以及 URL `/ks`。为了演示方便，我安装了命令行浏览器 `w3m`：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This works and displays the standard welcome page. Now use the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作有效并显示标准的欢迎页面。现在使用以下命令：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We will see a rather ominous **Forbidden** page, as shown in the following
    screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到一个相当不祥的 **禁止访问** 页面，如下图所示：
- en: '![Troubleshooting SELinux](img/5920OS_10_06.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![故障排除 SELinux](img/5920OS_10_06.jpg)'
- en: 'If we have the audit running, then SELinux denials are written to the audit
    log file, which is `/var/log/audit/audit.log`. We can use `ausearch` (available
    at `/sbin/ausearch`) to query this file:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们启用了审计，SELinux 拒绝的信息将写入审计日志文件 `/var/log/audit/audit.log`。我们可以使用 `ausearch`（位于
    `/sbin/ausearch`）来查询此文件：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The options that we have used with the command are explained as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在命令中使用的选项解释如下：
- en: '`-m`: This is the message to search for. We look for `avc`, which is the SELinux
    denials.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m`：这是要搜索的消息。我们查找 `avc`，即 SELinux 拒绝的信息。'
- en: '`-ts`: This is the time start. If we use `recent`, it means from 10 minutes
    ago. The input `today` can also be commonly used.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ts`：这是时间开始。如果我们使用 `recent`，意味着从 10 分钟前开始。输入 `today` 也可以常用。'
- en: 'The output of the `ausearch` command is shown in the following screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`ausearch` 命令的输出如以下截图所示：'
- en: '![Troubleshooting SELinux](img/5920OS_10_07.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![故障排除 SELinux](img/5920OS_10_07.jpg)'
- en: As we can see from the output, we have been denied read access for the PID of
    `1731`. We were running the `httpd` command while accessing the `/ks` directory,
    which is the inode `22341` in the filesystem of `sda3`. I am already impressed
    with this detail! The subject context has the type `httpd_t`, and the target has
    the type `default_t`. The subject is process 1731, and the target is the file
    in this case, and they do not match contexts, and access is denied.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出结果来看，我们被拒绝了对 PID 为 `1731` 的进程的读取访问。在访问 `/ks` 目录时，我们正在运行 `httpd` 命令，而该目录在
    `sda3` 文件系统中的 inode 为 `22341`。这一细节给我留下了深刻印象！主体上下文是 `httpd_t` 类型，目标是 `default_t`
    类型。主体是进程 1731，目标是文件，在这种情况下它们的上下文不匹配，因此访问被拒绝。
- en: 'We can use the command, `chcon` (available at `/usr/bin/chcon`), to change
    the SELinux context of the target either directly or by referencing the context
    of a directory that we know works, `/var/www/html`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用命令`chcon`（位于`/usr/bin/chcon`），通过直接修改目标的 SELinux 上下文或通过引用我们已知有效的目录上下文（例如
    `/var/www/html`）来改变目标的 SELinux 上下文。
- en: '[PRE22]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`-v`: This makes the file verbose'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v`：这使文件变得详细。'
- en: '`-R`: This recurses all file and subdirectories'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-R`：这个选项会递归所有文件和子目录。'
- en: '`--reference`: This means copy the context from this file'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--reference`：这意味着从此文件复制上下文。'
- en: 'Alternatively, we can set the context directly; although for accuracy and simplicity,
    I would prefer to use the `--reference` method:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以直接设置上下文；不过，为了准确和简便起见，我更倾向于使用 `--reference` 方法。
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: A process of type `httpd_t` can access resources that include `httpd_sys_content_t`,
    so with this simple change, we should now have access to the `/ks` directory through
    the web server without disabling SELinux.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`httpd_t` 类型的进程可以访问包括 `httpd_sys_content_t` 在内的资源，因此通过这个简单的更改，我们现在应该可以通过 Web
    服务器访问 `/ks` 目录，而不需要禁用 SELinux。'
- en: Hardening Linux
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加固 Linux
- en: We can really look at the previous example using SELinux to determine what we
    mean by hardening Linux, but this is often not the simple option. In the case
    of SELinux, the simple option is to set the `Permissive` mode but this does not
    go hand in hand with the best security for our systems.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过前面使用 SELinux 的例子来探讨“加固 Linux”的含义，但这通常并非简单的选择。以 SELinux 为例，简单的做法是设置为 `Permissive`
    模式，但这并不符合我们系统的最佳安全要求。
- en: Start with passwords and ask yourself how often are passwords changed on your
    system? When was the root password last changed? How many people have access to
    the root password? I come across many instances where the root password is never
    changed, and all administrators seem to have access to the root password. This
    is not a secure way of running your system even though it may help in the short
    term. Think of how many people who no longer work for your company have access
    to the root user password.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 从密码开始，问问自己：你的系统上密码多久更换一次？root 密码上次更换是什么时候？多少人可以访问 root 密码？我遇到过许多情况，root 密码从未更改过，所有管理员似乎都有
    root 密码的访问权限。尽管这种做法可能在短期内有助于管理系统，但这并不是一种安全的操作方式。想想有多少曾经在你公司工作过的人仍然能够访问 root 用户密码。
- en: Of course, the system security has to work for you and the company, but the
    needs of a secure system should never be undervalued. For root access, consider
    using `sudo` instead of `su` and don't give the root password to each administrator.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，系统安全必须为你和公司服务，但安全系统的需求永远不应被低估。对于 root 访问，考虑使用 `sudo` 而不是 `su`，并且不要将 root
    密码提供给每个管理员。
- en: Similarly, ensure strong password for accounts that have `sudo` rights as well
    as the root account.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，要确保对具有`sudo`权限的账户以及 root 账户使用强密码。
- en: Password auditing
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码审计
- en: I will use the term password auditing, as I do feel the tool highlights the
    need for adequate monitoring of password policies. You may well ask users to use
    strong passwords and to a degree we can enforce this use PAM modules. However,
    how many users have the same password, perhaps managers whose passwords are set
    by an assistant. It may also be the case that you have not realized how important
    it is not to allow weak passwords, often to save issues with forgetful users.
    The package john from Openwall ([http://www.openwall.com](http://www.openwall.com))
    is one not to be missed to help you understand the need for strong passwords and
    algorithms.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用“密码审计”这个术语，因为我确实认为这个工具突出了对密码策略进行充分监控的必要性。你可以要求用户使用强密码，在一定程度上我们可以通过使用 PAM
    模块来强制执行这一点。然而，有多少用户使用相同的密码呢？也许是经理们的密码是由助理设置的。也有可能你没有意识到禁止使用弱密码的重要性，通常为了避免遗忘用户出现的问题。Openwall
    的 `john` 包（[http://www.openwall.com](http://www.openwall.com)）是一个不容错过的工具，帮助你理解强密码和密码算法的必要性。
- en: The RPM is not in the repository but can be obtained from the Openwall site.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: RPM不在仓库中，但可以从Openwall网站获得。
- en: Preparing a password file
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备密码文件
- en: The password auditing tool john will be expecting users and passwords in one
    file, so we will use the `pwunconv` (`/usr/sbin/pwunconv`) command to add the
    passwords from the `/etc/shadow` file to the `/etc/passwd` file. Although this
    is not ideal, you have the password file; you can copy it to you own directory
    and use `pwconv` to switch back to the `/etc/shadow` file. The purpose of john
    is to show what is possible if password security isn't as it should be, and gaining
    rogue root privileges to the server is not unheard of. Even if john is run as
    a demonstration, it becomes a great tool to show what is possible with weak passwords,
    and a lab machine is fine for the demo.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 密码审计工具john会期待用户和密码在一个文件中，因此我们将使用`pwunconv`（`/usr/sbin/pwunconv`）命令将`/etc/shadow`文件中的密码添加到`/etc/passwd`文件中。虽然这并非理想做法，但你拥有密码文件；你可以将其复制到自己的目录，并使用`pwconv`切换回`/etc/shadow`文件。john的目的是展示如果密码安全不到位，可能发生的情况，而获得服务器的恶意root权限并非闻所未闻。即使john是作为演示运行，它也成了展示弱密码可能造成后果的一个好工具，实验室机器用作演示完全没问题。
- en: The `pwunconv` command run as root is enough to read passwords from the shadow
    file into the `/etc/passwd` file.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`pwunconv`命令以root身份运行足以将密码从shadow文件读取到`/etc/passwd`文件中。'
- en: Cracking passwords
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 破解密码
- en: 'Now that we have the prepared password file, we can copy it our own home directory:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了密码文件，可以将其复制到我们自己的主目录中：
- en: '[PRE24]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This step is not strictly required, but will allow you to convert back to shadow
    files as quickly as possible if this is not a lab machine. Run the following `john`
    command with the path through to the password file you would like to crack. The
    password file should contain users and passwords.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步并非严格要求，但如果这不是实验室机器，执行该操作将使你能够尽可能快速地转换回shadow文件。运行以下`john`命令，指定你希望破解的密码文件路径。密码文件应包含用户和密码。
- en: '[PRE25]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will then start cracking the passwords that it finds. In my file, there
    is only one user with a password, and it uses the default SHA512 encryption.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这将开始破解它找到的密码。在我的文件中，只有一个用户有密码，并且使用的是默认的SHA512加密。
- en: Tip
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: On my system, a simple password `Password1` took just 1 minute and 45 seconds
    to crack.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的系统上，一个简单的密码`Password1`只用了1分钟45秒就被破解了。
- en: Weakening the algorithm
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 削弱算法
- en: 'The password is weak enough, but what if we weakened the algorithm too? MD5
    is only 128-bit or 16-byte encryption; what effect would that have on the result?
    We can use the `chpasswd` (available at `/usr/sbin/chpasswd`) command to generate
    passwords with MD5 rather than SHA512 encryption:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 密码足够弱，但如果我们也削弱了算法呢？MD5只有128位或16字节加密；这会对结果产生什么影响？我们可以使用`chpasswd`（位于`/usr/sbin/chpasswd`）命令生成使用MD5而非SHA512加密的密码：
- en: '[PRE26]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This command writes to the `/etc/passwd` file; if you need to write to your
    own file, send the output to `stdout` with `-S` and add the displayed text to
    your own password file:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令会写入`/etc/passwd`文件；如果你需要写入到自己的文件中，可以使用`-S`将输出发送到`stdout`，并将显示的文本添加到自己的密码文件中：
- en: '[PRE27]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can now try running john again. However, to ensure that the new password
    is cracked fairly, delete the `john.pol` file that will contain the original password:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以再次尝试运行john。然而，为了确保新密码能够公平破解，请删除包含原始密码的`john.pol`文件：
- en: '[PRE28]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `john.pot` file contains previously cracked passwords; so to run a true
    comparison, we should ensure that this file does not exist. Now, running the same
    test on my system, the crack, with the same password set but only with 128-bit
    encryption, took just 0.8 seconds.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`john.pot`文件包含以前破解的密码；因此，为了进行真实的比较，我们应该确保该文件不存在。现在，在我的系统上运行相同的测试，使用相同的密码设置，但仅使用128位加密，破解只花了0.8秒。'
- en: Hardening the password
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强化密码
- en: With a more secure password set, we can see the difference in time needed to
    crack the password, as a brute force attack will be needed. In this example, we
    use a password `27csg0TNWoUS`. This is more of a passphrase to me, as I would
    remember this as *the 27th scout group of the Northwestern United States*. Anyway,
    I am sure you have your own ways to memorize complex passwords that don't involve
    post-it notes.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了更安全的密码后，我们可以看到破解密码所需的时间差异，因为这将需要暴力破解攻击。在这个示例中，我们使用的密码是`27csg0TNWoUS`。对我来说，这更像是一个密码短语，因为我会记住它作为*美国西北部第27侦察小组*。无论如何，我相信你有自己的方式来记住复杂的密码，而不需要用便签纸。
- en: With this password set and MD5 encryption, I left the program running for 20
    minutes, and it had not cracked the password. In time, moving from 0.8 seconds
    with a simple password to 20 minutes is a great demonstration on the use of secure
    passwords and how much more effective a strong password is compared to relying
    on a strong algorithm.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了密码并启用了 MD5 加密后，我让程序运行了 20 分钟，程序仍未破解密码。随着时间的推移，从 0.8 秒（使用简单密码）到 20 分钟的变化，充分展示了使用安全密码的意义，以及与依赖强算法相比，强密码的效果要强大得多。
- en: Start with these few steps, and your Linux system will be more secure from the
    outset.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 从这几步开始，你的 Linux 系统将从一开始就更加安全。
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we walked on the secure side of the road. Starting out with
    understanding a little of how PAM modules work and looking at ways in which we
    can use these modules to help us in administration and security. We saw that we
    could create user home directories, as they log in using PAM and a just-in-time
    method. We also looked at how we can restrict access and grant more access to
    users and groups using `/etc/security/limits.conf`. We then spent a little time
    to understand SELinux and securing our CentOS host.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们走在了安全的路上。从了解 PAM 模块如何工作开始，探索我们如何利用这些模块帮助我们进行管理和安全性。我们看到，我们可以创建用户的主目录，因为他们是通过
    PAM 和即时创建方法登录的。我们还看了如何使用 `/etc/security/limits.conf` 限制或授予用户和组更多的访问权限。随后，我们花了一些时间了解
    SELinux 并保护我们的 CentOS 主机。
- en: The next chapter will discuss some general best practices guides to some of
    the elements that the book has taken us through.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将讨论一些通用的最佳实践指南，涵盖本书中介绍的一些元素。

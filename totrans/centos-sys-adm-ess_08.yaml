- en: Chapter 8. Nginx – Deploying a Performance-centric Web Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章 Nginx – 部署一个以性能为中心的 Web 服务器
- en: When it comes to web servers, it seems that Apache gets all the attention, and
    you may be led to believe that there is little competition; so let me introduce
    Nginx to you. We have seen many articles implementing the **Linux Apache MySQL
    and PHP** (**LAMP**) technology. We shall play this a little left field and look
    at **Linux Nginx MySQL and PHP** (**LEMP**); the E in LEMP comes from the phonetic
    version of the web server that is pronounced *engine-x*, allowing us to place
    a well needed vowel to create the acronym LEMP. The web server was first introduced
    in 2004, and Nginx is beginning to make inroads into the enterprise web space,
    being faster to deliver web content than equivalent Apache servers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈到 web 服务器时，似乎 Apache 总是占据着所有的关注点，你可能会被引导认为几乎没有竞争对手；因此让我来向你介绍一下 Nginx。我们已经看过很多实现**Linux
    Apache MySQL 和 PHP**（**LAMP**）技术的文章。我们将在此稍作调整，看看**Linux Nginx MySQL 和 PHP**（**LEMP**）；LEMP
    中的 E 来自于该 web 服务器的发音版本 *engine-x*，这个发音让我们得以为这个首字母缩写加上一个必要的元音字母。该 web 服务器首次推出是在
    2004 年，Nginx 开始逐步进入企业级 web 空间，并且在提供 web 内容的速度上超过了相同的 Apache 服务器。
- en: 'The following topics are going to be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: '**Installing and configuring Nginx**: We will install and configure the Nginx
    web server'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装和配置 Nginx**：我们将安装并配置 Nginx web 服务器'
- en: '**Installing PHP**: We will install PHP5 to integrate with Nginx'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 PHP**：我们将安装 PHP5 并与 Nginx 集成'
- en: '**Installing MySQL**: We will install and configure the MySQL database server'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 MySQL**：我们将安装并配置 MySQL 数据库服务器'
- en: '**Creating dynamic web content**: Using the LEMP stack, we will learn to create
    simple dynamic web pages'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建动态 web 内容**：使用 LEMP 堆栈，我们将学习创建简单的动态网页'
- en: Installing and configuring Nginx
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 Nginx
- en: To begin this chapter, we will need to install the web server Nginx on our CentOS
    system. Nginx is the new kid on the block in terms of web servers, but in recent
    surveys from NetCraft, [http://www.netcraft.com](http://www.netcraft.com), we
    have seen that the Internet has fallen a little out of love with Apache, with
    Nginx making steady rises since its introduction in 2004\. That said, in May 2014,
    Apache still had 37 percent of the web server share with Microsoft at 33 percent
    and Nginx at 14 percent.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始本章内容，我们需要在 CentOS 系统上安装 web 服务器 Nginx。Nginx 是 web 服务器的新星，但根据 NetCraft 最近的调查，[http://www.netcraft.com](http://www.netcraft.com)，我们看到互联网对
    Apache 的喜爱有所减少，自 2004 年 Nginx 推出以来，它稳步增长。尽管如此，在 2014 年 5 月，Apache 仍然占有 37% 的 web
    服务器份额，微软占 33%，而 Nginx 占 14%。
- en: Installing Nginx
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Nginx
- en: 'Nginx is not part of the standard repositories, but we can use the EPEL repository
    that we used to install the 389-ds we looked at in [Chapter 7](ch07.html "Chapter 7. LDAP
    – A Better Type of User"), *LDAP – A Better Type of User*. With the **Extra Packages
    for Enterprise Linux** (**EPEL**) repository in place, we can install using yum,
    and then once we have Nginx installed, we can start the service and configure
    it with `chkconfig` to start on the system boot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 并不包含在标准的软件仓库中，但我们可以使用在安装 [第 7 章](ch07.html "第 7 章. LDAP – 一种更好的用户类型")中提到的
    EPEL 仓库，*LDAP – 一种更好的用户类型*。有了 **企业 Linux 扩展包**（**EPEL**）仓库后，我们可以使用 yum 安装，然后在安装了
    Nginx 后，我们可以启动服务并使用 `chkconfig` 配置它在系统启动时自动启动：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There is a welcome page configured in the default site''s configuration that
    points to `/usr/share/nginx/html/`. We will leave this in place, but will create
    our own document root soon. We can test the functionality of the web server by
    browsing to the site `http://localhost` as seen in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 默认站点的配置中已配置了一个欢迎页面，该页面指向 `/usr/share/nginx/html/`。我们将保留此设置，但很快会创建我们自己的文档根目录。我们可以通过访问
    `http://localhost` 来测试 web 服务器的功能，如下图所示：
- en: '![Installing Nginx](img/5920OS_08_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Nginx](img/5920OS_08_01.jpg)'
- en: That was really quite easy, wasn't it! We probably need to replace this web
    page with one of our own and tidy up some other configurations; but this simple
    test is good enough to prove the site is up and running.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的非常简单，不是吗！我们可能需要用我们自己的网页替换这个页面，并整理一些其他配置；但这个简单的测试足以证明网站已经启动并运行了。
- en: Configuring Nginx
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Nginx
- en: 'The configuration directory for Nginx, or what is referred to as `ServerRoot`,
    is `/etc/nginx`. The main configuration file is `/etc/nginx/nginx.conf`; however,
    the web server takes a very modular approach to its configuration, and there is
    an include statement within the main configuration file that will reference all
    `.conf` files in `conf.d`. The statement from the `nginx.conf` reads as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 的配置目录，或称为 `ServerRoot`，是 `/etc/nginx`。主配置文件是 `/etc/nginx/nginx.conf`；但是，Web
    服务器采取了一种非常模块化的配置方法，主配置文件中有一个包含语句，它会引用 `conf.d` 中的所有 `.conf` 文件。`nginx.conf` 中的语句如下：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this way, it is easy to add in additional configurations without having
    to edit existing files and risking costly errors. The default configuration that
    defines the initial server is `/etc/nginx/conf.d/default.conf`. To help understand
    a little of the anatomy of the Nginx configurations files, let''s take a look
    at the following diagram:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，可以轻松地添加其他配置，而无需编辑现有文件，也不会冒犯代价高昂的错误。定义初始服务器的默认配置文件是 `/etc/nginx/conf.d/default.conf`。为了帮助理解
    Nginx 配置文件的一些结构，让我们看一下以下的图示：
- en: '![Configuring Nginx](img/5920OS_08_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![配置 Nginx](img/5920OS_08_02.jpg)'
- en: 'To gain the best understanding of the configuration of Nginx, it is often better
    to start with your own configuration. Start with something simple and add to it.
    To this end, we will rename `default.conf` to something else and create our own
    configuration. For a simple server configuration, we need little more than five
    lines of code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解 Nginx 的配置，通常最好从自己的配置开始。先从简单的配置开始，然后逐步添加。为此，我们将 `default.conf` 重命名为其他名称，并创建我们自己的配置。对于一个简单的服务器配置，我们只需要不到五行代码：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The previous lines can save this configuration to the new file, `/etc/nginx/conf.d/main.conf`.
    We will then rename the original configuration `/etc/nginx/conf.d/default.conf`
    to `/etc/nginx/conf.d/default.conf.old`. It is only `.conf` files that are included
    so in this way, we can maintain the original configuration without effecting the
    operation of the web server.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的几行可以将此配置保存到新文件 `/etc/nginx/conf.d/main.conf`。然后，我们将原始配置 `/etc/nginx/conf.d/default.conf`
    重命名为 `/etc/nginx/conf.d/default.conf.old`。只有 `.conf` 文件会被包含进来，因此通过这种方式，我们可以保持原始配置而不影响
    Web 服务器的运行。
- en: 'The new configuration that we have is very simple and sparse, and we can explain
    the limited directives:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新配置非常简单且稀疏，我们可以解释有限的指令：
- en: '`listen`: We will listen on all interfaces to TCP port 80.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`listen`：我们将监听所有接口的 TCP 80 端口。'
- en: '`root`: Here we set the document root to `/var/www/html`. It is better to have
    variable content like this in the `/var` structure rather than the default location
    of `/usr`.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root`：在这里，我们将文档根目录设置为 `/var/www/html`。最好将像这样的变量内容放在 `/var` 结构中，而不是默认的 `/usr`
    位置。'
- en: '`index`: We set the default page, often known as the welcome page, to `index.html`.
    If the URL from the client is entered using the server name only or server name
    with a directory path without specifying a web page, then the server will look
    for a page named `index.html`.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：我们将默认页面（通常称为欢迎页面）设置为 `index.html`。如果客户端的 URL 只输入服务器名称，或者是服务器名称加上目录路径而没有指定网页，那么服务器将寻找名为
    `index.html` 的页面。'
- en: 'We will need to create the directory structure for the document root and fashion
    a simple web page:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为文档根目录创建目录结构，并制作一个简单的网页：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In an ideal world, before restarting the Nginx server, we should endeavor to
    test any configuration changes. In this way, we can avoid the embarrassing issue
    where the restart of the server is interrupted by configuration anomalies. When
    we issue a restart to the service, we will need to first stop and then start Nginx.
    Stopping the service will not be a problem, but the start might be if we have
    omitted a semi-colon or other little typo. Consequently, it may be few minutes
    before we can identify the problem and resume normal service. Having made any
    changes to the Nginx configuration, we should always test the integrity of these
    edits before restarting. Using the `/usr/sbin/nginx -t` command, we can perform
    this check and ensure that if we stop the server, we will be able to start it
    again. If you prefer, the same test is available by the use of the `service nginx
    configtest` command.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想情况下，在重新启动 Nginx 服务器之前，我们应该尽量测试任何配置更改。通过这种方式，我们可以避免因配置异常导致的服务器重启中断的尴尬问题。当我们发出重启命令时，首先需要停止服务然后再启动
    Nginx。停止服务不会有问题，但如果我们遗漏了分号或其他小错误，启动时可能会出现问题。因此，可能需要几分钟才能找出问题并恢复正常服务。在对 Nginx 配置做出任何更改后，我们应始终测试这些修改的完整性，然后再重启。使用
    `/usr/sbin/nginx -t` 命令，我们可以进行此检查，确保如果停止服务器，我们能够重新启动它。如果你更喜欢，也可以通过使用 `service
    nginx configtest` 命令来进行相同的测试。
- en: 'Other options to the `nginx` command include `-v` for the version of Nginx
    and `-V` to show the version and configuration options. If we do come across errors,
    we can check the logfile `/var/log/nginx/error.log`. The `tail` command is often
    good for this since only the last 10 lines will be shown. The path to the error
    log is configured in the `/etc/nginx/nginx.conf` with the following line:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx` 命令的其他选项包括 `-v` 用于显示 Nginx 的版本，`-V` 显示版本和配置选项。如果我们遇到错误，可以检查日志文件 `/var/log/nginx/error.log`。`tail`
    命令通常对这个很有用，因为它只会显示最后 10 行。错误日志的路径在 `/etc/nginx/nginx.conf` 中配置，以下行进行设置：'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If required, you could change this to a different logfile; but the default
    seems reasonable. For now, we can satisfy ourselves that the configuration is
    OK and restart the service as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你可以将其更改为其他日志文件；但默认设置似乎是合理的。现在，我们可以确保配置正常并通过以下方式重新启动服务：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In this command sequence, the `&&` operator ensures that the restart will only
    occur if the first command succeeds and the configuration check gave no errors.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令序列中，`&&` 运算符确保只有在第一个命令成功且配置检查没有错误时才会重新启动。
- en: 'We can revisit our site now. It may appear a little less glamorous, but it
    is all our own work as we can see in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以重新访问我们的网站了。它可能看起来不那么华丽，但正如我们在以下截图中看到的那样，它完全是我们自己的工作：
- en: '![Configuring Nginx](img/5920OS_08_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![配置 Nginx](img/5920OS_08_03.jpg)'
- en: Configuring a 404 Document Not Found Error page
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 404 文档未找到错误页面
- en: 'Another small change we will implement is to control the page not found or
    HTTP 404 errors. If a user types a page that does not exist, then they will be
    displayed a very simple error page. We can customize this a little and, at least,
    give the user a link back to the main index page. If we reedit the configuration
    file, `/etc/nginx/conf.d/main.conf` it will now read:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们将实现的小改动是控制“页面未找到”或 HTTP 404 错误。如果用户输入了一个不存在的页面，那么他们将看到一个非常简单的错误页面。我们可以稍微自定义一下，至少给用户提供一个返回主索引页面的链接。如果我们重新编辑配置文件
    `/etc/nginx/conf.d/main.conf`，它现在会显示如下：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The extra line `error_page` looks for HTTP 404 errors and returns the page
    `not_found.html`. We, of course, need to create the page, and it could look similar
    to this, as a very simple example providing the error and a link to return to
    the index page:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的 `error_page` 行会查找 HTTP 404 错误并返回 `not_found.html` 页面。我们当然需要创建该页面，它可能看起来像这样，作为一个非常简单的示例，提供错误信息和返回首页的链接：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Remember to test the configuration; we can restart the web server as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 记得测试配置；我们可以通过以下方式重新启动 Web 服务器：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, access a page that we know does not exist, such as `http://localhost/page1.html`.
    We should see the new error page, which may look like this if you used my example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，访问一个我们知道不存在的页面，例如 `http://localhost/page1.html`。我们应该能看到新的错误页面，如果你使用了我的示例，它可能看起来像这样：
- en: '![Configuring a 404 Document Not Found Error page](img/5920OS_08_04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![配置 404 文档未找到错误页面](img/5920OS_08_04.jpg)'
- en: Although the design of the web page is simple and bare, we are not trying to
    teach HTML or CSS tricks here, but more about gaining the idea of how we can use
    directives in Nginx to issue our own custom error pages.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然网页的设计简单且裸露，但我们并不是在这里教 HTML 或 CSS 技巧，而是更多地探讨如何通过 Nginx 指令实现自定义错误页面的思路。
- en: Installing PHP
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 PHP
- en: 'Now that we have the web server up and running, we can add the PHP processor
    that we need to be able to add PHP elements to our page and subsequently create
    dynamic web content. Nginx uses the PHP FastCGI Process Manager, which is again
    available from the EPEL repository. We have that set up already from the Nginx
    install and the earlier install of 389-ds. To install PHP and the PHP-FPM, we
    can use `yum`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经让 Web 服务器启动并运行，我们可以添加需要的 PHP 处理器，从而能够在页面中添加 PHP 元素，并随后创建动态的 Web 内容。Nginx
    使用 PHP FastCGI 进程管理器，这个也可以从 EPEL 仓库中获取。我们已经在 Nginx 安装时以及之前安装 389-ds 时设置好了它。为了安装
    PHP 和 PHP-FPM，我们可以使用 `yum`：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once installed, we need to edit the FPM so that it uses the correct accounts
    for Nginx. To do this, we can edit `/etc/php-fpm.d/www.conf`. We will need to
    edit the user and group lines from `apache` to `nginx`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们需要编辑 FPM，以便它使用正确的 Nginx 账户。为此，我们可以编辑`/etc/php-fpm.d/www.conf`文件。我们需要将用户和组的行从`apache`修改为`nginx`：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We also need to make sure that the Nginx web server knows to forward PHP files
    to the FPM service on port 9000\. We can re-edit `/etc/nginx/conf.d/main.conf`
    and add it to the server section:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要确保 Nginx Web 服务器知道将 PHP 文件转发到 FPM 服务的 9000 端口。我们可以重新编辑`/etc/nginx/conf.d/main.conf`文件并将其添加到服务器部分：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The code we add is all within the original server block. The file will end correctly
    with two right braces. We are closing the new location block and the original
    server code block. Taking stock of the edit, we can see that we have defined a
    `location` block. This is used when we access a web page that ends with `.php`
    or, more simply, a PHP page. The definition for the location block looks a little
    akin to comic book profanities, and that should identify for you that it is in
    fact a regular expression; the tilde (`~`) denotes that we look for a regular
    expression match. The expression we search for is URLs that end in `.php`. The
    `$` symbol denotes the end of the string. The complete expression starts with
    the escape character `\`; this is needed as the period (dot) has special meaning
    in regular expressions. To protect this, we use `\` to inform Nginx to read it
    as literal dot rather than as a regular expression language element. The rest
    of the code block then denotes that we should pass the PHP code through to the
    PHP interpreter by means of port 9000 on the local host. The `include` statement
    reads in a preconfigured file for PHP to set various parameter values.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的代码都在原始服务器块内。文件会以两个右括号正确结束。我们正在关闭新的 location 块和原始的服务器代码块。回顾一下编辑内容，我们可以看到我们定义了一个
    `location` 块。这个块在我们访问以 `.php` 结尾的网页时使用，或者更简单地说，访问 PHP 页面。location 块的定义看起来有点像漫画书中的脏话，这应该能让你识别出它实际上是一个正则表达式；波浪符号（`~`）表示我们在寻找正则表达式匹配。我们要查找的表达式是以
    `.php` 结尾的 URL。`$` 符号表示字符串的结束。完整的表达式以转义字符`\`开始；这是必要的，因为句点（dot）在正则表达式中有特殊含义。为了保护它，我们使用
    `\` 告诉 Nginx 将其视为字面上的句点，而不是正则表达式语言元素。接下来的代码块则表示我们应该通过本地主机的 9000 端口将 PHP 代码传递给
    PHP 解释器。`include` 语句用于读取一个预配置的 PHP 文件，以设置各种参数值。
- en: 'We can now test and restart the Nginx web server and start the FPM service,
    configuring it for autostart:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测试并重启 Nginx Web 服务器，并启动 FPM 服务，配置它为自动启动：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With a little luck and a following wind, all has been successful, but of course,
    we do need to test a PHP page now; this can be easily achieved by calling a simple
    `phpinfo()` function. This is a really simple test that will prove PHP is up and
    running on your CentOS system. We will return to the Nginx document root directory,
    `/var/www/html` and create a new page, `info.php`. The PHP extension is important
    as this is what we look for in the location block: to direct through to the PHP
    interpreter. The page that we will create could not be any more simple; however,
    the power behind the function will display a lot in your web browser for very
    little typing. We can mix HTML code and PHP code in the single file, but we will
    just use only PHP here. The PHP block starts with `<?php` and ends with the closing
    tag, `?>`. Each line of PHP code ends with a semi-colon. The `/var/www/html/info.php`
    file will look like this when edited:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 凭借一点运气和顺风，一切都已成功，但当然，我们现在需要测试一个PHP页面；这可以通过调用一个简单的`phpinfo()`函数轻松实现。这是一个非常简单的测试，它将证明PHP在你的CentOS系统上正常运行。我们将返回到Nginx的文档根目录`/var/www/html`并创建一个新页面`info.php`。PHP扩展很重要，因为这是我们在位置块中寻找的：它将指引我们进入PHP解释器。我们将创建的页面再简单不过了；然而，这个功能背后的强大作用将在你的网页浏览器中展示出很多内容，输入几行代码就能实现。我们可以在同一个文件中混合HTML代码和PHP代码，但在这里我们只使用PHP。PHP代码块以`<?php`开始，并以关闭标签`?>`结束。每行PHP代码后面都需要加一个分号。编辑后的`/var/www/html/info.php`文件将如下所示：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When we direct the browser to the page with `http://127.0.0.1/info.php`, we
    should be encouraged with a comprehensive page detailing the configuration of
    PHP on our CentOS host. See the output from my system in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将浏览器指向`http://127.0.0.1/info.php`页面时，我们应该看到一个详细的页面，展示了PHP在我们CentOS主机上的配置。请看以下截图，展示了我系统的输出：
- en: '![Installing PHP](img/5920OS_08_05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Installing PHP](img/5920OS_08_05.jpg)'
- en: Very quickly we have been able to demonstrate the power that lies behind PHP
    with this simple test. We also can be confident that we have configured PHP correctly
    with Nginx on our system. We will now add the MySQL database.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，我们就通过这个简单的测试展示了PHP背后的强大功能。我们也可以确信，PHP已经在我们的系统上正确配置并与Nginx一起运行。接下来我们将添加MySQL数据库。
- en: Installing MySQL
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装MySQL
- en: 'MySQL is the open source database solution now managed by Oracle, and of course
    this is a pivotal component of the LEMP stack that we are implementing. The MySQL
    server can store data to be displayed later on our web pages. We will communicate
    from Nginx using PHP with the database server. We can use `yum` to install MySQL
    and the PHP modules:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL是由Oracle管理的开源数据库解决方案，当然，这也是我们实现的LEMP栈中的关键组件。MySQL服务器可以存储数据，稍后在我们的网页中显示。我们将通过PHP与数据库服务器进行Nginx的通信。我们可以使用`yum`来安装MySQL及PHP模块：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once MySQL is installed, we need to secure the installation a little further;
    even if it is only to set the MySQL root password. Out of the box security in
    many systems tends to be a little light. Using the `mysql_secure_installation`
    command, we can add a little extra security. Running the program will lead you
    into a simple interactive prompted session:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了MySQL，我们需要进一步确保安装的安全性；即使只是设置MySQL的root密码。许多系统的开箱安全性通常有些薄弱。通过`mysql_secure_installation`命令，我们可以增加一些额外的安全性。运行该程序将引导你进入一个简单的交互式提示会话：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The resulting wizard will prompt you through the process described in the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的向导将引导你完成以下过程：
- en: '**Enter current password for root**: This is currently blank, so just use the
    *Enter* key.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入当前 root 密码**：目前为空，所以直接按 *Enter* 键。'
- en: '**Set root password**: We will choose `Y`.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置 root 密码**：我们将选择`Y`。'
- en: '**New Password**: Enter the new password twice.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新密码**：输入新密码并确认。'
- en: '**Remove anonymous users**: Choose `Y` for this. In this way, only configured
    accounts have access.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除匿名用户**：选择`Y`。这样，只有配置好的账户才能访问。'
- en: '**Disallow root login remotely**: This is usually a good idea, preventing remote
    MySQL root access. We only need access from this host, so we will answer `Y`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁止远程 root 登录**：这通常是一个好主意，可以防止远程 MySQL root 访问。我们只需要从此主机进行访问，所以我们将回答`Y`。'
- en: '**Remove test database and access to it**: There is a database test that is
    empty. If we do not need it, we should delete it.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除测试数据库及其访问权限**：有一个空的数据库测试。如果我们不需要它，应该删除它。'
- en: '**Reload privilege table now**: We will answer `Y` to make these settings effective.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**现在重新加载权限表**：我们将回答`Y`以使这些设置生效。'
- en: 'If for nothing else, this is one of the simplest ways to set the MySQL root
    account password and remind us to verify other settings as we run through the
    simple script. When we are ready, we can test the operation of the database server
    from the Linux command line:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仅仅为了这个目的，这是设置MySQL根账户密码的最简单方法之一，并提醒我们在执行简单脚本时验证其他设置。当我们准备好时，我们可以通过Linux命令行测试数据库服务器的运行：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We are authenticating as root and will be prompted for the password we set
    earlier. The `-e` option allows us to execute a MySQL query directly from the
    command line, and the subsequent query we issue will list all databases. Of course,
    these will be system databases, as we have not created our own. We can use this
    same query within a web page to show that we have connectivity to the database
    from Nginx later. From the query results, we should see two databases listed:
    `information_schema` and `mysql`.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以root身份进行身份验证，并且系统会提示我们输入之前设置的密码。`-e`选项允许我们直接从命令行执行MySQL查询，随后的查询将列出所有数据库。当然，这些将是系统数据库，因为我们还没有创建自己的数据库。我们可以在网页中使用相同的查询，稍后用来显示我们是否能够从Nginx连接到数据库。从查询结果中，我们应该看到列出两个数据库：`information_schema`
    和 `mysql`。
- en: Create dynamic web content
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动态网页内容
- en: 'To demonstrate how easily we can create dynamic web pages that will connect
    to the database using PHP from the Nginx server, we will create a new PHP page
    in `/var/www/html`. So fire up your favorite editor, and we will create the page
    within the document root, `/var/www/html/db.php`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示我们如何轻松地创建动态网页，并通过PHP从Nginx服务器连接到数据库，我们将在`/var/www/html`中创建一个新的PHP页面。所以，启动你最喜欢的编辑器，我们将在文档根目录下创建页面，路径为`/var/www/html/db.php`：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The code again is kept as simple as possible, and ideally we would include the
    connection credentials stored within another file that was not accessible to the
    web server, allowing access only from the PHP process; however, keeping the code
    to a minimum does aide the learning process at this early stage.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 代码再次保持尽可能简单，理想情况下，我们会将连接凭证存储在另一个无法被Web服务器访问的文件中，只允许PHP进程访问；然而，在这个早期阶段，保持代码简洁有助于学习过程。
- en: 'In this PHP file, you can see that we mix a little HTML code with the PHP code,
    starting with heading tags before entering into the PHP block. The PHP code first
    connects to the MySQL server, and then we execute the same query we demonstrated
    before, from the command line. Before we test this, we will need to restart Nginx
    and the `php-fpm` service:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个PHP文件中，你可以看到我们将一些HTML代码与PHP代码混合使用，先使用标题标签，然后进入PHP代码块。PHP代码首先连接到MySQL服务器，然后我们执行之前在命令行中演示过的相同查询。在我们进行测试之前，我们需要重新启动Nginx和`php-fpm`服务：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This time, the results will show in the web browser and illustrating that we
    have a simple dynamic page created from database content. At this stage, we can
    be happy that we have a LEMP server up and running. With this proof of concept
    in place, we can now consider building further projects on the LEMP stack, and
    I certainly hope that you can take a little enthusiasm away with you to read a
    little more on what you can achieve with PHP and MySQL.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，结果将在网页浏览器中显示，并说明我们已经创建了一个简单的动态页面，内容来自数据库。在这个阶段，我们可以为自己已经启动并运行的LEMP服务器感到高兴。有了这个概念验证，我们现在可以考虑在LEMP堆栈上构建进一步的项目，我也真心希望你能带着一些热情离开，去阅读更多关于你可以通过PHP和MySQL实现的内容。
- en: 'This is the home page that you''ll be seeing:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你将看到的主页：
- en: '![Create dynamic web content](img/5920OS_08_06.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![创建动态网页内容](img/5920OS_08_06.jpg)'
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how we can build upon the CentOS host and the
    LEMP stack and implementing Nginx, MySQL, and PHP. Nginx is quite simple to configure
    but provides faster access to web content than Apache, but can equally be configured
    to communicate with PHP and MySQL in the backend. Gaining the basic knowledge
    of configuring PHP and MySQL to operate with the web server can build the grounding
    you need to develop your web application further.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了如何基于CentOS主机和LEMP堆栈构建，并实现Nginx、MySQL和PHP。Nginx配置起来相当简单，但比Apache提供更快的网页内容访问速度，同时也可以配置与PHP和MySQL进行后台通信。掌握PHP和MySQL与Web服务器一起工作的基本知识，可以为你进一步开发Web应用程序打下基础。
- en: In the following chapter, we will see how to implement Puppet on CentOS as a
    central configuration server to allow configuration changes to be made on one
    server to replicate to other configured clients.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看到如何在CentOS上实现Puppet作为中央配置服务器，允许在一台服务器上进行配置更改，然后将其复制到其他配置的客户端。

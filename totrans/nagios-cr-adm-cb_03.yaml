- en: Chapter 3. Working with Checks and States
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Specifying how frequently to check a host or service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing thresholds for PING RTT and packet loss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing thresholds for disk usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduling downtime for a host or service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing brief outages with flapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting flapping percentage thresholds for a service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once hosts and services are configured in Nagios Core, its behavior is primarily
    dictated by the checks it makes to ensure that hosts and services are operating
    as expected, and the state it concludes these hosts and services must be in as
    a result of those checks.
  prefs: []
  type: TYPE_NORMAL
- en: How often it's appropriate to check hosts and services, and on what basis it's
    appropriate to flag a host or service as having problems, depends very much on
    the nature of the service and the importance of it running all the time. If a
    host on the other side of the world is being checked with PING, and during busy
    periods its round trip time is over 100ms, then this may not actually be a cause
    for concern at all, and perhaps not something to even flag a `WARNING` state over,
    let alone a `CRITICAL` one.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the same host were on the local network where it would be appropriate
    to expect round trip times of less than 10ms, then a round trip time of more than
    100ms could well be considered a grave cause for concern, signaling a packet storm
    or other problem with the local network, and we would want to notify the appropriate
    administrators immediately. Similarly, for hosts such as web servers, we may not
    be concerned by a response time of more than a second for a page on a busy budget
    shared web host for customers. But if the response time for the corporate website
    or a dedicated colocation customer was getting that bad, it might well be something
    to notify the web server administrator about.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hosts and services are therefore not all created equal. Nagios Core provides
    several ways to define behaviors with more precision, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: How often a host or service should be checked with its appropriate `check_command`
    plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How bad a check's results have to be before a `WARNING` or `CRITICAL` problem
    is flagged, if at all
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a downtime period for a host or service, so that Nagios Core knows
    not to expect it to operate during a specified period of time, often for upgrades
    or other maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether to automatically tolerate flapping, or hosts and services seeming to
    go up and down a lot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will use some common instances of problems with the preceding behaviors
    to give examples showing how to configure them.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying how frequently to check a host or service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll configure a very important host to be checked every three
    minutes, and if Nagios Core finds it is `DOWN` as a result of the check failing,
    it will check again after a minute before it sends a notification about the state
    to its defined contact. We'll do this by customizing the definition of an existing
    host.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a Nagios Core 3.0 or newer server with at least one host configured
    already. We'll use the example of `sparta.naginet`, a host defined in its own
    file.
  prefs: []
  type: TYPE_NORMAL
- en: You should also understand the basics of commands and plugins, in particular
    the meaning of the `check_command` directive. These are covered in the recipes
    in [Chapter 2](ch02.html "Chapter 2. Working with Commands and Plugins"), *Working
    with Commands and Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can customize the check frequency for a host as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to the `objects` configuration directory for Nagios Core. The default
    is `/usr/local/nagios/etc/objects`. If you''ve put the definition of your host
    in a different file, then move to its directory instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the file containing your host definition, and find the definition within
    the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The host definition may look similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add or edit the value of the `check_interval` directive to `3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add or edit the value of the `retry_interval` directive to `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add or edit the value of `max_check_attempts` to `2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the configuration and restart the Nagios Core server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this done, Nagios Core will run the relevant `check_command` plugin (probably
    something like `check-host-alive`) against this host every three minutes; if it
    fails, it will flag the host as down, check again one minute later, and only then
    send a notification to its defined contact if the second check fails too.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The preceding configuration changed three properties of the host object type
    to effect the changes we needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`check_interval`: This defines how long to wait between successive checks of
    the host under normal conditions. We set this to `3`, or three minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retry_interval`: This defines how long to wait between follow-up checks of
    the host after first finding problems with it. We set this to `1`, or one minute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_check_attempts`: This defines how many checks in total should be run before
    a notification is sent. We set this to `2` for two checks. This means that after
    the first failed check is run, Nagios Core will run another check a minute later,
    and will only send a notification if this check fails as well. If two checks have
    been run and the host is still in a problem state, it will go from a `SOFT` state
    to a `HARD` state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that setting these directives in a host that derives from a template, as
    is the case with our example, will override any of the same directives in the
    template.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s important to note that we can also define the units used by the `check_interval`
    and `retry_interval` commands. They only use minutes by default, checking the
    `interval_length` setting that''s normally defined in the root configuration file
    for Nagios Core, by default `/usr/local/nagios/etc/nagios.cfg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we wanted to specify these periods in seconds instead, we could set this
    value to `1` instead of `60`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This would allow us, for example, to set `check_interval` to `15`, to check
    a host every 15 seconds. Note that if we have a lot of hosts with such a tight
    checking schedule, it might overburden the Nagios Core process, particularly if
    the checks take a long time to complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t forget that changing these properties for a large number of hosts can
    be tedious, so if it''s necessary to set these directives to some common value
    for more than a few hosts, then it may be appropriate to set the values in a host
    template and then have these hosts inherit from it. See the *Using inheritance
    to simplify configuration* recipe in [Chapter 9](ch09.html "Chapter 9. Managing
    Configuration"), *Configuration Management* for details on this. Note that the
    same three directives also work for service declarations, and have the same meaning.
    We could define the same notification behavior for a service on `sparta.naginet`
    with a declaration similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Scheduling downtime for a host* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using inheritance to simplify configuration* recipe in [Chapter 9](ch09.html
    "Chapter 9. Managing Configuration"), *Configuration Management*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing thresholds for PING RTT and packet loss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll set up a service for a host that monitors PING, and take
    a look at how to adjust the thresholds for the `WARNING` and `CRITICAL` states,
    done using command arguments. We'll accomplish this by setting up a service for
    an existing host that's already being checked with a `check_command` plugin, such
    as `check-host-alive`. Our service will be used to monitor not whether the host
    is completely `DOWN`, but whether it's responding to PING requests within a reasonable
    period of time.
  prefs: []
  type: TYPE_NORMAL
- en: This could be useful to notify and assist in diagnosing problems with the actual
    connectivity of a service or host.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will therefore serve as a good demonstration of the concepts of
    supplying arguments to a command, and adjusting the `WARNING` and `CRITICAL` thresholds
    for a particular service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a Nagios Core 3.0 or newer server with at least one host configured
    already, and using a `check_command` plugin of `check-host-alive`. We'll use the
    example of `sparta.naginet`, a host defined in its own file.
  prefs: []
  type: TYPE_NORMAL
- en: You should also understand the basics of how hosts and services fit together
    in a Nagios Core configuration, and be familiar with the use of commands and plugins
    via the `check_command` directive.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can add our PING service to the existing host with custom round trip time
    and packet loss thresholds as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to the objects configuration directory for Nagios Core. The default
    is `/usr/local/nagios/etc/objects`. If you''ve put the definition of your host
    in a different file, then move to its directory instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the file containing your host definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following definition to the end of the file. Of most interest here
    is the value for the `check_command` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the configuration and restart the Nagios Core server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With this done, Nagios Core will not only run a host check of `check-host-alive`
    against your original host to ensure that it''s up, but it will also run a more
    stringent check of the PING responses from the machine as a service to check that
    it''s adequately responsive:'
  prefs: []
  type: TYPE_NORMAL
- en: If the **Round Trip Time** (**RTT**) of the PING response is greater than 100ms
    (but less than 200ms), Nagios Core will flag a `WARNING` state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the RTT of the PING response is greater than 200ms, Nagios Core will flag
    a `CRITICAL` state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If more than 20 percent (but less than 40 percent) of the PING requests receive
    no response, Nagios Core will flag a `WARNING` state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If more than 40 percent of the PING requests receive no response, Nagios Core
    will flag a `CRITICAL` state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In both cases, a notification will be sent to the service's defined contacts
    if configured to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, this service works the same way as any other service, and appears
    in the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The configuration we added for our existing host creates a new service with
    a `service_description` of PING. For `check_command`, we use the `check_ping`
    command, which uses the plugin of the same name. The interesting part here is
    what follows the `check_command` definition: the string `!100,20%!200,40%`.'
  prefs: []
  type: TYPE_NORMAL
- en: In Nagios Core, a `!` character is used as a separator for arguments that should
    be passed to the command. In the case of `check_ping`, the first argument defines
    thresholds, or conditions that, if met, should make Nagios Core flag a `WARNING`
    state for the service. Similarly, the second argument defines the thresholds for
    a `CRITICAL` state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of the two arguments are comprised of two comma-separated terms: the first
    number is the threshold for the RTT of the PING request and its response that
    should trigger a state, and the second number is the percentage of packet loss
    that should be tolerated before raising the same state.'
  prefs: []
  type: TYPE_NORMAL
- en: This pattern of arguments is specific to `check_ping`; they would not work for
    other commands such as `check_http`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to look in a bit more detail at how these arguments are applied,
    we can inspect the command definition for `check_ping`. By default, this is in
    the `/usr/local/nagios/etc/objects/commands.cfg` file, and looks similar to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the value for `command_line`, four macros are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$USER1$`: This expands to `/usr/local/nagios/libexec`, or the directory in
    which the Nagios Core plugins are normally kept, including `check_ping`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$HOSTADDRESS$`: This expands to the hostname for the host or service definition
    in which the command is used. In this case, it expands to `10.128.0.21`, the value
    of the `address` directive for the `sparta.naginet` host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$ARG1$`: This expands to the value given for the first argument of the command,
    in our recipe''s case, the string `100,20%`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$ARG2$`: This expands to the value given for the second argument of the command;
    in our recipe''s case, the string `200,40%`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The complete command-line call for our specific check with all these substitutions
    made would therefore look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This command line makes use of four parameters of the `check_ping` program:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-H`: This specifies the address of the host to check'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-w`: This specifies the thresholds for raising a `WARNING` state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`: This specifies the thresholds for raising a `CRITICAL` state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: This specifies the number of PING requests to send'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can run this directly from the command line on the Nagios Core server to
    see what the results of the check might be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command yields an output including the `OK` result of the check,
    and also some performance data, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The arguments specified in the command are therefore used to customize the behavior
    of `check_command` for the particular host or service being edited.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Changing thresholds for disk usage* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a new service* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Hosts, Services, and Contacts"), *Understanding Hosts, Services, and Contacts*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Customizing an existing command* and *Creating a new command* recipes in
    [Chapter 2](ch02.html "Chapter 2. Working with Commands and Plugins"), *Working
    with Commands and Plugins*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring PING for any host* recipe in [Chapter 5](ch05.html "Chapter 5. Monitoring
    Methods"), *Monitoring Methods*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing thresholds for disk usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll configure the Nagios Core server to check its own disk
    usage, and to flag a `WARNING` or `CRITICAL` state depending on how little free
    space is left on the disk. We'll accomplish this by adding a new service to the
    already defined `localhost` called `DISK`, which will run the `check_local_disk`
    command to examine the state of mounted volumes on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Because burgeoning disk usage can creep up on any system administrator, and
    because of the dire effect it can have when a disk suddenly fills completely without
    any warning, this is amongst the more important things to monitor in any given
    network.
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, we'll demonstrate this only for the monitoring server itself,
    as a host called `localhost` on `127.0.0.1`. This is because the `check_disk`
    plugin can't directly check the disk usage of a remote server over a network.
    However, the principles discussed here could be adapted to running the check on
    a remote server using `check_nrpe`. The use of NRPE is discussed in all the recipes
    in [Chapter 6](ch06.html "Chapter 6. Enabling Remote Execution"), *Enabling Remote
    Execution*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a Nagios Core 3.0 or newer server with a definition for `localhost`,
    so that the monitoring host is able to check itself. A host definition for `localhost`
    is included in the sample configuration in `/usr/local/nagios/etc/objects/localhost.cfg`.
    You should also understand the basics of how hosts and services fit together in
    a Nagios Core configuration, and be familiar with the use of commands and plugins
    via the `check_command` directive.
  prefs: []
  type: TYPE_NORMAL
- en: We'll use the example of `olympus.naginet` as our Nagios Core server checking
    itself, with one block device on one disk, with its device file at `/dev/sda1`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can add our `DISK` service to the existing host with custom usage thresholds
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to the objects configuration directory for Nagios Core. The default
    is `/usr/local/nagios/etc/objects`. If you''ve put the definition for your host
    in a different file, move to its directory instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the file containing your host definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following definition to the end of the file. Of most interest here
    is the value for the `check_command` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the configuration and restart the Nagios Core server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this done, a new service is created for `localhost` that checks the disk
    usage on `/dev/sda1`, and flags a `WARNING` state for the service if the free
    space is below 10 percent, and a `CRITICAL` state if it is below 5 percent.
  prefs: []
  type: TYPE_NORMAL
- en: In both cases, a notification will be sent to the service's defined contacts,
    if configured to do so.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The configuration we added for our existing host creates a new service with
    a `service_description` of `DISK`. For `check_command`, we use the `check_local_disk`
    command, which in turn uses the `check_disk` plugin to check the local machine''s
    disks. The interesting part here is what follows the `check_local_disk` definition:
    the string `!10%!5%!/dev/sda1`.'
  prefs: []
  type: TYPE_NORMAL
- en: In Nagios Core, a `!` character is used as a separator for arguments that should
    be passed to the command. In the case of `check_local_disk`, the first two arguments
    define thresholds, or conditions that, if met, should make Nagios Core flag a
    `WARNING` state (first argument, 10 percent) or a `CRITICAL` state (second argument,
    5 percent) for the service. The third argument defines the device name of the
    disk to check, `/dev/sda1`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to look in a bit more detail at how these arguments are applied,
    we can inspect the command definition for `check_local_disk`. By default, this
    is in the file `/usr/local/nagios/etc/objects/commands.cfg`, and looks similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In this case, `command_name` and the name of the plugin used in the `command_line`
    are not the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the value for `command_line`, four macros are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$USER1$`: This expands to `/usr/local/nagios/libexec`, or the directory in
    which the Nagios Core plugins are normally kept, including `check_disk`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$ARG1$`: This expands to the value given for the first argument of the command;
    in this case, the string `10%`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$ARG2$`: This expands to the value given for the second argument of the command;
    in this case, the string `5%`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$ARG3$`: This expands to the value given for the third argument of the command;
    in this case, the string `/dev/sda1`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The complete command-line call for our specific check with all these substitutions
    made would therefore be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This command line makes use of three parameters of the `check_disk` program:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-w`: This specifies the thresholds for raising a `WARNING` state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`: This specifies the thresholds for raising a `CRITICAL` state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: This specifies the device file for the disk to check'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can run this directly from the command line on the Nagios Core server to
    see what the results of the check might be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output includes both the `OK` result of the check, and also some performance
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Changing thresholds for disk usage* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a new service* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Hosts, Services, and Contacts"), *Understanding Hosts, Services, and Contacts*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Customizing an existing command* and *Creating a new command* recipes in
    [Chapter 2](ch02.html "Chapter 2. Working with Commands and Plugins"), *Working
    with Commands and Plugins*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring PING for any host* recipe in [Chapter 5](ch05.html "Chapter 5. Monitoring
    Methods"), *Monitoring Methods*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduling downtime for a host or service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn how to schedule downtime for a host or service in
    Nagios Core. This is useful for elegantly suppressing notifications for some predictable
    period of time; a very good example is when servers require downtime to be upgraded,
    or to have their hardware checked.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we'll demonstrate scheduling downtime for a host named `sparta.naginet`,
    and we'll examine the changes it makes in the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a Nagios Core 3.0 or newer server with a definition for at least
    one host and at least one service, and some idea of when you would like your downtime
    to be scheduled. You should also have a working web interface, per the QuickStart
    installation of Nagios Core 3.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also have Nagios Core configured to process external commands, and
    have given your web interface user the permissions to apply them. If you are logging
    in as the `nagiosadmin` user per the recommended quick start guide, then you can
    check this is the case with the following directive in `/usr/local/nagios/etc/nagios.cfg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Permissions to submit external commands from the web interface are defined
    in `/usr/local/nagios/etc/cgi.cfg`; check that your username is included in these
    directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have followed the Nagios Core QuickStart guides, then you will probably
    find this is already working: [http://nagios.sourceforge.net/docs/3_0/quickstart.html](http://nagios.sourceforge.net/docs/3_0/quickstart.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can set up a fixed period of scheduled downtime for our host and service
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into the web interface for Nagios Core.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Hosts** in the left menu:![How to do it...](img/5566_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the host's name in the table that comes up, to view the details for
    that host:![How to do it...](img/5566_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Schedule downtime for this host** in the **Host Commands** menu:![How
    to do it...](img/5566_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill out the fields in the resulting form, including the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Host Name**: The name of the host for which you''re scheduling downtime.
    This should have been filled out for you.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Author**: Your name, for records of who scheduled the downtime. This may
    be greyed out and just say **Nagios Admin**; that''s fine.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comment**: Some comment explaining the reason for the downtime.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start Time**: The time at which the scheduled downtime should begin, and
    when the state notifications end.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**End Time**: The time at which the scheduled downtime should end, and when
    the state notifications resume.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_03_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In this case, our downtime will be from 8:00 PM to 9:00 PM on the 15th of June,
    2012\.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Commit** to submit the downtime definition, and then **Done** in
    the screen that follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this done, we can safely bring the `sparta.naginet` host down between the
    nominated times, and any notifications for the host and any of its services will
    be suppressed until the downtime is over.
  prefs: []
  type: TYPE_NORMAL
- en: Note that restarting Nagios Core is not required for this step, as it usually
    would be for changes made to Nagios Core's configuration files. The change is
    done "on the fly".
  prefs: []
  type: TYPE_NORMAL
- en: Note also that comments now appear in the detailed information for both the
    host and service, defining the downtime and including the reason specified for
    it.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The preceding steps nominate a period of downtime for both the `sparta.naginet`
    server and all of its services. This accomplishes two things:'
  prefs: []
  type: TYPE_NORMAL
- en: It suppresses all notifications (whether e-mails or anything else) for the host
    or service for the appropriate time period, including `RECOVERY` notifications.
    The only exceptions are the `DOWNTIMESTART` and `DOWNTIMEEND` notifications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It adds a comment to the host or service showing the scheduled downtime, for
    the benefit of anyone else who might be using the web interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nagios Core keeps track of any downtime defined for all the hosts and services,
    and prevents the notifications it would normally send out during that time. Note
    that it will still run its checks and record the state of both the hosts and services
    even during downtime. All that is suppressed are the notifications, and not the
    actual checks.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that the downtime for individual services can be applied in much the same
    way, by clicking on **Schedule downtime for this service** in the web interface,
    under **Service Commands**.
  prefs: []
  type: TYPE_NORMAL
- en: What was defined in this recipe was a method for defining fixed downtime, where
    we know ahead of time when the host or its services are likely to be unavailable.
    If we don't actually know what time the unavailability will start, but we do know
    how long it's likely to last, then we can define a period of flexible downtime.
    This means that the downtime can start any time within the nominated period, and
    will last for the length of time we specify from that point.
  prefs: []
  type: TYPE_NORMAL
- en: 'A notification event is also fired when the host or service begins the downtime,
    called `DOWNTIMESTART`, and another when the downtime ends, called `DOWNTIMEEND`.
    This may be a useful notification to send to the relevant contact or contact group
    if they''d like to be notified when this happens. This can be arranged by ensuring
    that the host or service is configured to send these messages, by including the
    `s` flag in the `notification_options` directive for both hosts and services,
    and correspondingly in the contact definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Managing brief outages with flapping* and *Adjusting flapping percentage
    thresholds for a service* recipes in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Specifying which states to be notified about* and *Tolerating a certain
    number of failed checks* recipes in [Chapter 4](ch04.html "Chapter 4. Configuring
    Notifications"), *Configuring Notifications*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding comments on hosts or services in web interface* recipe in [Chapter
    7](ch07.html "Chapter 7. Using the Web Interface"), *Working with the Web Interface*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing brief outages with flapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn how to use Nagios Core's state flapping detection
    and handling to avoid sending excessive notifications when a host or service changes
    its state too frequently. This is useful in circumstances where a host or service
    is changing between `OK` to `WARNING` to `CRITICAL` states too frequently within
    the last 21 checks. If the percentage of state changes is too high, Nagios Core
    will suppress further notifications and add an icon and comment to the host or
    service showing that it is flapping.
  prefs: []
  type: TYPE_NORMAL
- en: Flap detection is normally enabled in the QuickStart configuration for Nagios
    Core, and is part of the sample `generic-host` host template and the `generic-service`
    service template. It's therefore likely that it's already enabled on most servers,
    and we only need to check that it's still working.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a Nagios Core 3.0 or newer server with at least one host and
    one service configured already. You should also have access to a working web interface
    for the Nagios Core server. It would be helpful if you are monitoring a test service
    that you can bring up and down to trigger the flap detection to test it; an unused
    webserver might be good for this.
  prefs: []
  type: TYPE_NORMAL
- en: You should be familiar with the way hosts and services change state as a result
    of their checks and the different states corresponding to hosts and services in
    order to understand the basics of how flap detection works.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can check whether or not flap detection is enabled for our Nagios Core server,
    our hosts, and our services as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Change to the configuration directory for Nagios Core. The default is `/usr/local/nagios/etc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `nagios.cfg` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Look for an existing definition for the `enable_flap_detection` directive,
    and check that it is set to `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If this was not set to `1`, then after we''ve changed it, we will probably
    also need to at least temporarily disable the `use_retained_program_state` directive
    in the same file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the file for our particular hosts and or services. We should check that
    at least one of the following is the case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The host or service inherits from a template that has the `enable_flap_detection`
    directive set to `1`. For example, both the `generic-host` and `generic-service`
    templates defined by default in `/usr/local/nagios/etc/objects/templates.cfg`
    do this.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The host or service itself has the `enable_flap_detection` directive set to
    `1` in its own definition.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the latter case, the configuration for the host or service might look similar
    to the following code snippet:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'If any of the preceding configuration was changed, validate the new configuration
    and restart the Nagios Core server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check that for the hosts or services for which flap detection is wanted, the
    word **ENABLED** appears in the details for that host or service:![How to do it...](img/5566_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With this done, if a host or service changes its state too frequently within
    21 checks, then it will be flagged as flapping, and will appear with a custom
    icon in views of that host or service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A comment is also placed on the host or service explaining what has happened
    for the benefit of anyone viewing the host or service in the web interface, who
    might perhaps be wondering why notifications have stopped:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There will also be an indicator on the details for the host or service defining
    whether the host or service is flapping:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For hosts or services that don't have flap detection enabled, this particular
    field simply reads **N/A**, and the **Flap Detection** field below it will show
    as **DISABLED**.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The logic behind determining flap detection is actually quite complex. For our
    purposes, it suffices to explain flap detection as being based on whether a host
    or service has changed state within its last 21 checks too often—with the thresholds
    usually expressed as a percentage.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is discussed in great detail including the formulae that are used to determine
    flapping state in the Nagios Core 3.0 documentation, available online at the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://nagios.sourceforge.net/docs/3_0/flapping.html](http://nagios.sourceforge.net/docs/3_0/flapping.html)'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common cause of flapping is that checks are too stringent. As an example,
    if you are checking a shared web server's response time is less than 50ms while
    the server is busy, checks might pass and fail without actually giving an accurate
    reflection of whether the service is doing its job. In this case, it would be
    appropriate to loosen the thresholds of the service by increasing its percentage
    thresholds, so that it isn't quite so ready to flag a `WARNING` or `CRITICAL`
    state over things that aren't actually very worrisome. Flap detection can help
    diagnose these sorts of cases.
  prefs: []
  type: TYPE_NORMAL
- en: We can also enable or disable flap detection for a host via the web interface;
    in the details screen for both hosts and services, a menu item is available under
    **Host Commands** labeled **Enable/Disable flap detection for this host**, and
    under **Service Commands** there's another labeled **Enable/Disable flap detection
    for this service**.
  prefs: []
  type: TYPE_NORMAL
- en: These may be useful when we want to turn flap detection on or off for a particular
    host or service temporarily, perhaps because under certain circumstances it is
    or is not appropriate to use the feature. For permanent setup and for clarity,
    it would be best to include it explicitly in the configuration as shown in the
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adjusting flapping percentage thresholds for a service* recipe in this
    chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Tolerating a certain number of failed checks* recipe in [Chapter 4](ch04.html
    "Chapter 4. Configuring Notifications"), *Configuring* *Notifications*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding comments on hosts or services in web interface* recipe in [Chapter
    7](ch07.html "Chapter 7. Using the Web Interface"), *Working with the Web Interface*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting flapping percentage thresholds for a service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn how to adjust the percentage thresholds for host
    or service flap detection. This means that we can adjust how frequently a host
    or service has to change state within its last 21 checks, before Nagios Core will
    conclude that it is flapping, and suppress notifications until its state becomes
    stable again.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a Nagios Core 3.0 or newer server with at least one host and
    one service configured already. You should also have access to a working web interface
    for the Nagios Core server.
  prefs: []
  type: TYPE_NORMAL
- en: You should be familiar with the way hosts and services change state as a result
    of their checks and the different states corresponding to hosts and services,
    to understand the basics of how flap detection works. Flap detection should also
    already be enabled and working for the appropriate hosts and services.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can adjust the thresholds for flap detection for a specific host or service
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Change to the `objects` configuration directory for Nagios Core. The default
    is `/usr/local/nagios/etc/objects`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the file containing the definition for the host or service for which we
    want to set the thresholds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the host or service definition, set the `low_flap_threshold` and/or
    `high_flap_threshold` values to appropriate percentages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the configuration and restart the Nagios Core server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this done, the flapping thresholds for the host or service should be changed
    appropriately for future checks.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The preceding configuration changes include the following directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '`high_flap_threshold`: A host or service that is changing state by a certain
    percentage of the time must exceed this percentage threshold, before it is determined
    to be flapping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`low_flap_threshold`: If a host or service is already in the flapping state,
    then its state change percentage must fall below this threshold before the flapping
    state will end.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a detailed breakdown of how the state change percentage is calculated,
    see the Nagios Core 3.0 documentation online at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://nagios.sourceforge.net/docs/3_0/flapping.html](http://nagios.sourceforge.net/docs/3_0/flapping.html)'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If appropriate, we can also set a global default for hosts and services'' flap
    thresholds with the following directives in `/usr/local/nagios/etc/nagios.cfg`.
    The following values are examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: These values correspond to the percentages of state change, in just the same
    way that the per-host and per-service configurations do.
  prefs: []
  type: TYPE_NORMAL
- en: Note that there are separate directives for hosts and services in this case.
    These values are also overridden if you specify thresholds for a particular service
    or host, as we did in the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Managing brief outages with flapping* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

- en: 15 Prevent Unwanted Programs from Running
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15 防止不必要的程序运行
- en: Join our book community on Discord
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Discord 上加入我们的书籍社区
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/file104.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file104.png)'
- en: 'Once upon a time, we didn’t have to worry much about Linux malware. While it’s
    still true that Linux users don’t have to worry about viruses, there are other
    types of malware that can definitely ruin a Linux user’s day. Cryptomining programs
    planted on your server can eat up memory and CPU cycles, causing your server to
    work much harder and use more power than it should. Ransomware, which can encrypt
    either important files or a system’s bootloader, can make these important files
    or even the whole system inaccessible. Even paying the demanded ransom isn’t always
    a guarantee that your system will be returned to proper order. One way to prevent
    these programs from doing their damage is to only allow authorized programs to
    run, and to block everything else. We have two ways of doing that, which are the
    topics of this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 曾几何时，我们不需要太担心 Linux 恶意软件。虽然 Linux 用户现在仍不需要担心病毒，但还有其他类型的恶意软件确实能让 Linux 用户的日子变得糟糕。种植在你服务器上的加密货币挖矿程序会消耗内存和
    CPU 时间，导致服务器比应该的工作更繁重，消耗更多的电力。勒索软件，它可以加密重要文件或系统引导加载程序，使这些重要文件甚至整个系统无法访问。即使支付了勒索款项，也不能保证你的系统会恢复正常。防止这些程序造成损害的一种方法是，只允许授权程序运行，阻止其他所有程序。这是我们本章要讨论的两个方法之一：
- en: Mount partitions with the *no* options
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 *no* 选项挂载分区
- en: Use `fapolicyd` on Red Hat-type systems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Red Hat 类型系统上使用 `fapolicyd`
- en: So, if you’re ready, let’s get going.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你准备好了，我们就开始吧。
- en: Mount Partitions with the no options
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 no 选项挂载分区
- en: 'In *Chapter 12*, *Scanning, Auditing, and Hardening*, I showed you how OpenSCAP
    can automatically bring your Linux systems into compliance with the security standards
    of certain regulatory bodies. I also told you the inconvenient truth that there
    are certain things that OpenSCAP can’t do, and that you’ll have to do for yourself.
    One thing that it can’t do is to partition your system drives as some of these
    regulatory bodies require. For example, the **Security Technical Implementation
    Guides** (**STIG**s) that the U.S. Government uses require the following Linux
    system and data directories to be mounted on their own partitions:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第12章*，*扫描、审计与加固* 中，我向你展示了 OpenSCAP 如何自动使你的 Linux 系统符合某些监管机构的安全标准。我还告诉你一个不太方便的真相，那就是
    OpenSCAP 无法做到的事情，某些任务需要你自己完成。它无法做的事情之一就是像一些监管机构要求的那样为你的系统驱动器分区。例如，美国政府使用的 **安全技术实施指南**（**STIG**）要求以下
    Linux 系统和数据目录必须挂载到独立的分区上：
- en: '`/var`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var`'
- en: '`/var/log/`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/log/`'
- en: '`/var/tmp/`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/tmp/`'
- en: '`/var/log/audit/`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/log/audit/`'
- en: '`/tmp/`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/tmp/`'
- en: '`/home/`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home/`'
- en: '`/boot/`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/boot/`'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The reason for this is twofold:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为有两个原因：
- en: If the root (`/`) partition of a Linux operating system becomes too full, it
    can cause the operating system to completely lock up. Mounting these directories
    in their own partitions can help prevent the `/` partition from filling up.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 Linux 操作系统的根分区 (`/`) 太满，它可能会导致操作系统完全卡死。将这些目录挂载到独立的分区上可以帮助防止 `/` 分区被填满。
- en: The STIGs, and possibly other security regulations, require that these partitions
    be mounted with options that prevent executable programs from running on them,
    SGID and SUID file permissions from being effective, and device files to be created
    on them.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STIGs，以及可能的其他安全规定，要求这些分区挂载时使用选项，以防止在其上运行可执行程序，禁止 SGID 和 SUID 文件权限生效，并防止在其上创建设备文件。
- en: As I mentioned, OpenSCAP won’t automatically set up this partitioning scheme
    for you. So, you’ll need to set it up as you install the operating system. This
    requires careful planning in order to get the partitions sized correctly. I mean,
    you don’t want to waste space by making certain partitions too large, and you
    don’t want to run out of space on partitions that really need the extra space.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，OpenSCAP 不会自动为你设置这种分区方案。所以，你需要在安装操作系统时进行设置。这需要仔细规划，以确保分区大小正确。我是说，你不想通过将某些分区做得太大而浪费空间，也不想在真正需要额外空间的分区上出现空间不足的情况。
- en: RHEL 9.1 and all of its clones were released a few weeks before I began writing
    this chapter. You might already have noticed that there’s a bug in the 9.1 installer
    that wasn’t in the 9.0 installer. That is, the option to create a normal user
    account isn’t visible on the installer screen. I mean, it’s there, but you can’t
    see it and can’t scroll down to it. To bring it up, just keep hitting the Tab
    key until you’ve highlighted the option to create the root user password. Then,
    hit the Tab key once more, and then hit the Enter key. (Of course, there’s always
    the chance that the problem will get fixed by the time you read this.)
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在我开始写这一章的几周前，RHEL 9.1及其所有克隆版本已经发布。你可能已经注意到，在9.1的安装程序中存在一个在9.0安装程序中没有的bug。也就是说，创建普通用户账户的选项在安装程序界面上不可见。其实，它是存在的，只是你看不见，也无法向下滚动找到它。要显示这个选项，只需要不断按Tab键，直到你高亮显示了创建root用户密码的选项。然后，再按一次Tab键，再按回车键。（当然，等你读到这本书时，问题可能已经被修复了。）
- en: 'To get this set up, you’ll need to select the installer option to create a
    custom partitioning scheme. To make this somewhat realistic, set the size of your
    virtual machine’s virtual drive to about 1 TB. (Don’t worry if you don’t have
    that much space on your host machine’s drive. VirtualBox will create a dynamically-sized
    drive that won’t use 1 TB worth of space on the host drive unless you put 1 TB
    worth of files on it.) Let’s see what this looks like on AlmaLinux 9:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置这个，你需要选择安装程序中的自定义分区方案选项。为了让这个过程稍微真实一些，将虚拟机的虚拟硬盘大小设置为大约1 TB。（如果你的宿主机硬盘上没有那么多空间也没关系，VirtualBox会创建一个动态大小的虚拟硬盘，除非你放入1
    TB的文件，否则不会占用宿主硬盘上1 TB的空间。）让我们来看看在AlmaLinux 9中是如何显示的：
- en: '![Figure 15.1: Choose to create a custom partitioning scheme](img/file105.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图15.1：选择创建自定义分区方案](img/file105.png)'
- en: 'Figure 15.1: Choose to create a custom partitioning scheme'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1：选择创建自定义分区方案
- en: After selecting the **Custom** option, hit the **Done** button at the top of
    the screen. On the next screen, click the `+` box to create a mount point. Note
    that you can create a standard partition, a logical volume, or a thin-provisioned
    logical volume. (I’m going to go with standard partitions.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**Custom**选项后，点击屏幕顶部的**Done**按钮。在下一个屏幕上，点击`+`框来创建一个挂载点。请注意，你可以创建标准分区、逻辑卷或精简配置的逻辑卷。（我会选择标准分区。）
- en: '![Figure 15.2: Create a mount point](img/file106.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图15.2：创建挂载点](img/file106.png)'
- en: 'Figure 15.2: Create a mount point'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2：创建挂载点
- en: 'Let’s start by creating the `/boot/` mount point:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建`/boot/`挂载点开始：
- en: '![Figure 15.3: Creating the first mount point](img/file107.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图15.3：创建第一个挂载点](img/file107.png)'
- en: 'Figure 15.3: Creating the first mount point'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3：创建第一个挂载点
- en: 'Create the rest of the required mount points for the partitions that I mentioned
    in the above list. Your completed scheme might look something like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我在上述列表中提到的其余挂载点。你的完成方案可能如下所示：
- en: '![Figure 15.4: Create the rest of the mount points](img/file108.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图15.4：创建其余的挂载点](img/file108.png)'
- en: 'Figure 15.4: Create the rest of the mount points'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4：创建其余的挂载点
- en: Of course, your own use case will dictate how large you make each of these partitions.
    Here, you see that the `/home/` directory is the largest, which suggests that
    I want to use this machine as a Samba file server. If I were to use this machine
    for some other purpose, such as a database server, I would resize these partitions
    as required.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你的使用场景将决定你为每个分区设置多大的空间。在这里，你可以看到`/home/`目录最大，这表明我想把这台机器用作Samba文件服务器。如果我将这台机器用作其他用途，比如数据库服务器，我会根据需要调整这些分区的大小。
- en: There’s a long-standing upstream bug in the RHEL installer that also affects
    the RHEL clones. That is, regardless of how much or how little space you need
    for each partition, you’ll have to make each one at least 1 GB in size. Otherwise,
    the installation will fail with an `error in POSTTRANS scriptlet in rpm package
    kernel-core` message. This has been a known problem for a long time, but it still
    hasn’t been fixed. (Yes, it does waste some disk space, but there’s nothing we
    can do about it.)
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在RHEL安装程序中有一个长期存在的上游bug，这个bug同样影响RHEL的克隆版本。也就是说，无论每个分区需要多少空间，你必须将每个分区的大小设置为至少1
    GB。否则，安装将失败，并显示`error in POSTTRANS scriptlet in rpm package kernel-core`的错误信息。这个问题已经存在很长时间了，但仍然没有被修复。（是的，虽然这样浪费了一些磁盘空间，但我们无能为力。）
- en: Now, here’s where we’re going to cheat a bit. We’re going to pretend that we’re
    dealing with the US government, which requires us to meet the STIG specifications.
    So, on the installer screen, we’ll click on the option to apply a security profile.
    On the next screen, we’ll scroll down to where we see the STIG profile, and select
    it. At the bottom, you’ll see that this profile adds the `noexec`, `nodev`, and
    `nosuid` options to the partitions, as applicable. (The `/var/` partition only
    requires the `nodev` option, and the `/boot/` partition only requires the `nodev`
    and `nosuid` options.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们要稍微作弊一下。我们假装正在处理美国政府的要求，必须符合STIG规范。所以，在安装界面上，我们点击应用安全配置文件的选项。接下来的界面中，我们滚动到看到STIG配置文件的位置，并选择它。在底部，你会看到该配置文件根据需要将`noexec`、`nodev`和`nosuid`选项添加到分区中。（`/var/`分区只需要`nodev`选项，`/boot/`分区只需要`nodev`和`nosuid`选项。）
- en: '![Figure 15.5: Applying the STIG profile](img/file109.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.5: 应用 STIG 配置文件](img/file109.png)'
- en: 'Figure 15.5: Applying the STIG profile'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '图 15.5: 应用 STIG 配置文件'
- en: 'Here’s what these three mount options do for us:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这三种挂载选项的作用：
- en: '**noexec**: Executable files cannot run from any partition that’s mounted with
    this option. (This includes executable shell scripts, unless you invoke the script
    with `sh`. I’ll show you more about this in just a bit.)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**noexec**：任何挂载了此选项的分区上的可执行文件都不能运行。（这包括可执行的Shell脚本，除非你使用`sh`来调用脚本。稍后我会展示更多关于这方面的内容。）'
- en: '**nodev**: Users can’t create any device files on partitions that are mounted
    with this option.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nodev**：用户无法在挂载了此选项的分区上创建任何设备文件。'
- en: '**nosuid**: On partitions that are mounted with this option, adding either
    the SUID or SGID permission to files will have no effect.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nosuid**：在挂载了此选项的分区上，添加SUID或SGID权限对文件没有任何影响。'
- en: 'When the installation completes, our `/etc/fstab` file will look something
    like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们的`/etc/fstab`文件将会是这样：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (Note that some of these lines might wrap around on the printed page.)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: （注意，某些行在打印的页面上可能会换行。）
- en: 'Now, let’s see if we can run an executable script from any of these directories.
    In my own home directory, I created a shell script that looks like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看能否从这些目录中的任何一个运行可执行脚本。在我自己的主目录中，我创建了一个如下的Shell脚本：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After adding the executable permission for myself, I tried to run it. Then,
    I copied it to the `/tmp/` directory and tried to run it again. Here’s what I
    got:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在为自己添加可执行权限后，我尝试运行它。然后，我将其复制到`/tmp/`目录并再次尝试运行。以下是我得到的结果：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So, I can’t run it, at least not as a normal user. But, what if I were to try
    it with `sudo`? Let’s see:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我不能运行它，至少作为普通用户不能。但是，如果我用`sudo`试试呢？让我们看看：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Cool, the `noexec` option actually works. Well, for this it does. What would
    happen if we were to invoke the script with `sh?` Let’s see:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷，`noexec`选项实际上有效。好吧，对于这个例子是有效的。如果我们用`sh`调用脚本会怎样呢？让我们看看：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'So, with shell scripts, the blocking isn’t perfect. Let’s see what happens
    with a compiled executable file. Start by downloading the command-line wallet/mining
    program for the DERO cryptocurrency project from here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，对于Shell脚本，阻止功能并不完美。让我们看看编译后的可执行文件会发生什么。首先，从这里下载DERO加密货币项目的命令行钱包/挖矿程序：
- en: '[https://dero.io/download.html#linux](https://dero.io/download.html#linux)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dero.io/download.html#linux](https://dero.io/download.html#linux)'
- en: 'Transfer the file to your virtual machine and untar it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件传输到虚拟机并解压：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the executable permission is already set for all of the executable
    files, so you won’t have to add it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有可执行文件的执行权限已经设置好，所以你无需再添加它。
- en: 'Now, for the moment of truth. Enter the `dero_linux_amd64` directory and attempt
    to run the `derod-linux-amd64` program:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进入关键时刻。进入`dero_linux_amd64`目录并尝试运行`derod-linux-amd64`程序：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since this is a compiled executable instead of a shell script, prefacing the
    command with `sh` won’t do anything for us in any case. Anyway, keep this DERO
    stuff handy, because we’ll use it again in the next section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个已编译的可执行文件，而不是Shell脚本，在任何情况下，在命令前加上`sh`都不会对我们有所帮助。总之，保留好这些DERO的内容，因为我们将在下一节中再次使用它。
- en: If you’re wondering what DERO is, think of it as a private version of Ethereum.
    You can build other tokens on it and create smart contract applications on it,
    just like you can do with Ethereum. The difference is that DERO protects your
    privacy, and Ethereum doesn’t.
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你想知道什么是DERO，可以把它当作是以太坊的私人版本。你可以在其上构建其他代币并创建智能合约应用，就像在以太坊上做的那样。不同之处在于，DERO保护你的隐私，而以太坊则没有。
- en: In *Chapter 12*, *Scanning, Auditing, and Hardening*, I showed you that only
    the RHEL-type distros give us the option of applying a SCAP profile as we install
    the operating system. On non-RHEL distros, you’ll need to apply the SCAP profile
    after the installation has completed, assuming that an appropriate profile is
    available for your distro. In any case, if you don’t need to apply a whole SCAP
    profile but still want to add these security options to your partitions, or if
    no SCAP profile is available for your distro, just hand-edit the `/etc/fstab`
    file to add them in.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第12章*，*扫描、审计与加固*中，我曾向你展示过，只有RHEL类型的发行版在安装操作系统时才会给我们提供应用SCAP配置文件的选项。在非RHEL的发行版上，你需要在安装完成后应用SCAP配置文件，前提是你的发行版提供了适用的配置文件。无论如何，如果你不需要应用整个SCAP配置文件，但仍希望将这些安全选项添加到你的分区，或者你的发行版没有可用的SCAP配置文件，只需手动编辑`/etc/fstab`文件即可将它们添加进去。
- en: Next, we’ll look at another control mechanism that, so far at least, is exclusive
    to the world of Red Hat.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看另一种控制机制，至少目前为止，它是Red Hat世界独有的。
- en: Understanding fapolicyd
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解fapolicyd
- en: 'The **File Access Policy Daemon** (**fapolicyd**) is a fairly new addition
    to Red Hat Enterprise Linux and its various clones. It’s free-as-in-speech software
    so that anyone can use it, but so far neither Ubuntu nor SUSE have made it available
    for their distros. To get a quick feel for how it works, go back to the virtual
    machine that you’ve just been using. First, move the entire `derod-linux-amd64`
    directory over to the top level of the `/` partition:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件访问策略守护进程**（**fapolicyd**）是一个相对较新的功能，添加到了Red Hat Enterprise Linux及其各种克隆版本中。它是自由软件，任何人都可以使用，但目前为止，Ubuntu和SUSE还没有为它们的发行版提供支持。为了快速了解它是如何工作的，请回到你刚才使用的虚拟机。首先，将整个`derod-linux-amd64`目录移动到`/`分区的顶层：'
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'By moving the directory instead of copying it, your ownership of the directory
    and its files will be preserved:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过移动目录而不是复制目录，你的目录和文件的所有权将被保留：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, copy the script that you created over to `/usr/local/bin/`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将你创建的脚本复制到`/usr/local/bin/`：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When you look at the permissions settings on this script file, you’ll see something
    very unusual:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看这个脚本文件的权限设置时，你会看到一些非常不寻常的地方：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You see that doing a `cp` operation automatically changes the ownership of
    this file to the owner of the target directory, which in this case is the root
    user. That’s just normal operation, so there’s nothing to see there. What’s so
    unusual is that we have a permissions setting of `700` on this file. That’s because
    of something else that our STIG profile has done. That is, the STIG profile has
    set a **UMASK** of `077` on this system, as we see here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到，执行`cp`操作时，文件的所有权会自动更改为目标目录的所有者，在这种情况下就是root用户。这是正常操作，所以没有什么特别之处。奇怪的是，这个文件的权限设置为`700`。这与我们的STIG配置文件做的另一件事有关。也就是说，STIG配置文件在这个系统上设置了**UMASK**为`077`，如我们所见：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This means that any normal files that you create will have read and write permissions
    for only the owner, and any directories that you create will have read, write,
    and execute permissions for only the owner. To make this demo work we’ll need
    to change the permissions settings to a value of `755`, like so:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，你创建的任何普通文件将仅对所有者具有读写权限，而你创建的任何目录将仅对所有者具有读、写和执行权限。为了让这个演示能够工作，我们需要将权限设置更改为`755`，像这样：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Cool. We can now make the demo work. We’ll start by entering the `/dero-linux-amd64/`
    directory and trying to invoke the `derod-linux-amd64` executable:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒，我们现在可以让演示正常工作了。我们将从进入`/dero-linux-amd64/`目录开始，尝试调用`derod-linux-amd64`可执行文件：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Even though you’re now invoking this program from a partition that isn’t mounted
    with the `noexec` option, you’re still not allowed to run it. That’s because it’s
    now being blocked by `fapolicyd`. That is, you can’t run it with your normal user
    privileges, even though both the directory and the executable file belong to you.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你现在是在一个没有`noexec`选项挂载的分区中调用这个程序，你仍然不能运行它。这是因为它现在被`fapolicyd`阻止了。也就是说，尽管目录和可执行文件都属于你，但你仍然无法用普通用户权限运行它。
- en: There’s an idiosyncrasy with `fapolicyd` that I haven’t seen documented anywhere,
    and that I only found out by accident. That is, it will only block untrusted programs
    when a normal, unprivileged user tries to run them. But, you can run them just
    fine with the proper `sudo` privileges. (This is all the more reason to grant
    only limited `sudo` privileges to all but your most trusted administrators.)
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fapolicyd`有一个特殊的行为，我在任何文档中都没看到过，也是在偶然间才发现的。也就是说，只有当普通的非特权用户尝试运行不受信任的程序时，它才会阻止这些程序。但你可以通过正确的`sudo`权限来运行它们。（这更能说明，只应授予除最信任的管理员外其他用户有限的`sudo`权限。）'
- en: 'Next, let’s see what we can do with the shell script:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何使用Shell脚本：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'So, why can I invoke this script here, but not in my home directory? It’s because
    in my home directory, the `noexec` mount option is blocking the script. But here
    in the `/usr/local/bin/` directory, we don’t have that mount option. Instead,
    all we have is just `fapolicyd`. We can use the `fapolicyd-cli -list` command
    to view the rules that are in effect, which might explain why I was able to run
    this script. (Note that formatting constraints don’t allow me to show the entire
    output.):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我可以在这里调用这个脚本，却不能在我的主目录中调用它呢？原因是，在我的主目录中，`noexec`挂载选项阻止了脚本的运行。但在`/usr/local/bin/`目录下，我们没有这个挂载选项。这里只有`fapolicyd`。我们可以使用`fapolicyd-cli
    -list`命令查看当前生效的规则，这也许能解释为什么我能运行这个脚本。（请注意，格式限制使我无法展示完整的输出。）
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Look at rule number 12\. This rule allows shell scripts to run on all partitions
    that don’t have the `noexec` mount option, even by unprivileged users. That makes
    sense, considering that even unprivileged users make extensive use of shell scripts
    in order to automate repetitive tasks. But, if you’re absolutely certain that
    no unprivileged user will ever have cause to run shell scripts on a system, you
    can always disable that rule. And, in any case, you’d still be able to run shell
    scripts if you have the proper `sudo` privileges.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 看看第12条规则。该规则允许Shell脚本在没有`noexec`挂载选项的所有分区上运行，即使是非特权用户也可以运行。这是有道理的，因为即使是非特权用户也广泛使用Shell脚本来自动化重复性任务。但是，如果你完全确定没有非特权用户需要在系统上运行Shell脚本，你始终可以禁用此规则。而且，无论如何，只要你拥有适当的`sudo`权限，仍然可以运行Shell脚本。
- en: And, speaking of rules, let’s look at them next.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 说到规则，我们接下来就来看一下它们。
- en: Understanding the fapolicyd rules
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解fapolicyd规则
- en: The `fapolicyd` framework uses rules in the `/etc/fapolicyd/rules.d/` directory
    to create a list of programs that are either allowed or denied to execute on the
    system. When you install `fapolicyd`, you’ll get a set of default rules that are
    already set up and ready-to-go. If you need to allow more than what the default
    rules allow, you can create your own custom rules or add your desired program
    to the list of trusted applications.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`fapolicyd`框架使用`/etc/fapolicyd/rules.d/`目录中的规则来创建一个允许或拒绝在系统上执行的程序列表。当你安装`fapolicyd`时，你将获得一组已设置好并且可以立即使用的默认规则。如果你需要允许比默认规则更多的内容，你可以创建自己的自定义规则，或将你想要的程序添加到受信任应用程序列表中。'
- en: 'In the `/etc/fapolicyd/rules.d/` directory, there are 11 rules files. Each
    one serves a different purpose:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/etc/fapolicyd/rules.d/`目录下，有11个规则文件。每个文件都有不同的用途：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The numbers at the beginning of the file names indicate the order in which these
    rules files will be processed, because the order in which the rules get processed
    really does matter. Rather than try to explain what these different classes of
    rules do for us, I’ll just let you open each file and read the contents. They’re
    all very short and include a comment to explain what each file does.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名开头的数字表示这些规则文件处理的顺序，因为规则处理的顺序非常重要。与其尝试解释这些不同类别的规则对我们做了什么，我更愿意让你打开每个文件并阅读其内容。它们都非常简短，并包括注释来解释每个文件的作用。
- en: 'Although you can create custom rules for your own custom applications, that’s
    not the recommended method. For performance and safety reasons, it’s better to
    just add your application to the trusted list, like so:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以为自己的自定义应用程序创建自定义规则，但这并不是推荐的方法。出于性能和安全的考虑，最好只是将你的应用程序添加到受信任列表中，方法如下：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: I mentioned *safety* reasons because when you write your own custom rules, it’s
    easy to make a mistake that will lock up the entire system. You don’t have to
    worry about that so much if you’re just adding files to the trusted list.
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我提到*安全性*问题是因为当你编写自己的自定义规则时，很容易犯错误，从而锁定整个系统。如果你只是将文件添加到受信任列表中，倒不需要太担心这个问题。
- en: 'This command adds the desired file, along with its associated SHA256 hash value,
    to the `/etc/fapolicyd/fapolicyd.trust` file, as we see here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将所需的文件及其相关的SHA256哈希值添加到`/etc/fapolicyd/fapolicyd.trust`文件中，正如我们在这里看到的：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To make this change take effect, we need to update the database and restart
    the `fapolicyd` service, like so:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使此更改生效，我们需要更新数据库并重启`fapolicyd`服务，如下所示：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, when I invoke this application with my normal user privileges, it will
    run just fine:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我以普通用户权限调用这个应用程序时，它将正常运行：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: So now, you’re likely wondering if you have to manually add each new application
    that you would install to the trusted list. Well, that depends upon how you install
    it. If you just download a compiled program as we did in the previous example,
    or compile one yourself, then yeah, you will have to manually add it to the trusted
    list. But, by default, every program that gets installed by the system package
    manager is automatically trusted. That means that if you use either `dnf` to install
    a package from the repository, or `rpm` to install an `rpm` package that you either
    downloaded or created, then the associated application is automatically trusted.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，现在你可能会想，是否需要手动将每个新安装的应用程序添加到受信任列表中。好吧，这取决于你如何安装它。如果你像我们在前面示例中那样下载一个已编译的程序，或者自己编译一个程序，那么是的，你需要手动将它添加到受信任列表中。但默认情况下，系统包管理器安装的每个程序都会自动被信任。这意味着，如果你使用`dnf`从软件仓库安装一个包，或者使用`rpm`安装一个你下载或创建的`rpm`包，那么相关的应用程序会自动被信任。
- en: So far, we’ve looked at how the three *no* mount options and `fapolicyd` work
    together and complement each other. In this case, the mount options and `fapolicyd`
    all got set up automatically because we applied the STIG OpenSCAP profile as we
    installed the operating system. We can also install `fapolicyd` without the STIG
    profile, which is what we’ll look at next.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看了这三个*no*挂载选项和`fapolicyd`是如何协同工作、互补的。在这种情况下，挂载选项和`fapolicyd`都已自动设置，因为我们在安装操作系统时应用了STIG
    OpenSCAP配置文件。我们也可以在没有STIG配置文件的情况下安装`fapolicyd`，这就是我们接下来要看的一部分。
- en: Installing fapolicyd
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装fapolicyd
- en: 'Normally, `fapolicyd` isn’t automatically installed on AlmaLinux. In this case
    it was, because the STIG profile that we applied requires it as well as the restrictive
    mounting options for our partitions. To install `fapolicyd` on a system on which
    it hasn’t already been installed, just do:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`fapolicyd`不会在AlmaLinux上自动安装。在这种情况下它已被安装，因为我们应用的STIG配置文件要求它以及为我们的分区设置的限制性挂载选项。如果要在未安装`fapolicyd`的系统上安装它，只需执行以下命令：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There’s still a bit more about `fapolicyd` that I haven’t shown you, but I think
    you’ve seen enough to get the gist of it. To get more details about it and to
    see how to also use it as a file-integrity checker, be sure to visit the official
    Red Hat documentation for it. (The link is below in the *Further reading* section.)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`fapolicyd`，还有一些我没有展示的内容，但我认为你已经看到了足够的内容，能理解它的核心。要获取更多的细节，并了解如何将其用作文件完整性检查器，请务必访问官方的Red
    Hat文档。（链接位于下方的*进一步阅读*部分。）
- en: Adding the `noexec`, `nosuid`, and `nodev` mount options to your partitions
    works well, except that you can’t add them to all of your partitions. Obviously,
    you can’t add them to any partitions that are supposed to have executable files
    in them, or else your system would never work. The `fapolicyd` framework gives
    you a way to prevent rogue programs from running on those partitions, as long
    as the malicious intruder hasn’t already gained root privileges.
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将`noexec`、`nosuid`和`nodev`挂载选项添加到分区中效果不错，除了你不能将它们添加到所有分区。显然，不能将它们添加到任何应该包含可执行文件的分区，否则你的系统将无法正常工作。`fapolicyd`框架为你提供了一种方法，可以防止恶意程序在这些分区上运行，只要恶意入侵者尚未获得根权限。
- en: All right, let’s wrap this baby up.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，让我们总结一下。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at two ways to prevent untrusted programs from running
    on your systems. The first method, which can be used on any Linux distro, is to
    separate the various system and data directories into their own separate partitions,
    and then to mount each of these partitions with the appropriate combination of
    the `noexec`, `nosuid`, and `nodev` options. The second method, which so far is
    only available on Red Hat and its clones, is to use the `fapolicyd` framework.
    We saw how to automatically enable both of these methods by applying the STIG
    OpenSCAP profile as we install the operating system. Finally, we saw how to install
    `fapolicyd` separately, without having to apply the STIG profile.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了两种防止不信任的程序在系统上运行的方法。第一种方法适用于任何 Linux 发行版，即将各个系统和数据目录分离到独立的分区中，然后用适当的
    `noexec`、`nosuid` 和 `nodev` 挂载选项挂载每个分区。第二种方法，至今仅在 Red Hat 及其衍生版上可用，是使用 `fapolicyd`
    框架。我们看到如何在安装操作系统时，通过应用 STIG OpenSCAP 配置文件自动启用这两种方法。最后，我们看到如何单独安装 `fapolicyd`，而不需要应用
    STIG 配置文件。
- en: In the next chapter, we’ll be wrapping things up with a quick look at various
    topics that didn’t neatly fit into any of the preceding chapters. I’ll see you
    there.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将快速回顾一些未能完全归入前几章的主题。我们在那里见。
- en: Further reading
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The bug in the RHEL installer: [https://forums.rockylinux.org/t/kernel-core-error-at-install/3683](https://forums.rockylinux.org/t/kernel-core-error-at-install/3683)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: RHEL 安装程序中的 bug：[https://forums.rockylinux.org/t/kernel-core-error-at-install/3683](https://forums.rockylinux.org/t/kernel-core-error-at-install/3683)
- en: 'The STIG for Red Hat 8: [https://www.stigviewer.com/stig/red_hat_enterprise_linux_8/](https://www.stigviewer.com/stig/red_hat_enterprise_linux_8/)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat 8 的 STIG：[https://www.stigviewer.com/stig/red_hat_enterprise_linux_8/](https://www.stigviewer.com/stig/red_hat_enterprise_linux_8/)
- en: 'Linux Ransomware: [https://phoenixnap.com/blog/linux-ransomware](https://phoenixnap.com/blog/linux-ransomware)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 勒索病毒：[https://phoenixnap.com/blog/linux-ransomware](https://phoenixnap.com/blog/linux-ransomware)
- en: 'Linux File Access Policy Daemon (`fapolicyd`) video: [https://youtu.be/txThobi7oqc](https://youtu.be/txThobi7oqc)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 文件访问策略守护进程 (`fapolicyd`) 视频：[https://youtu.be/txThobi7oqc](https://youtu.be/txThobi7oqc)
- en: 'Official `fapolicyd` documentation at Red hat: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat 官方 `fapolicyd` 文档：[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening)
- en: Questions
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Which of the following statements is true?
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个说法是正确的？
- en: You can use the `noexec`, `nosuid`, and `nodev` mount options on any Linux distro.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在任何 Linux 发行版上使用 `noexec`、`nosuid` 和 `nodev` 挂载选项。
- en: You can use `fapolicyd` on any Linux distro.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在任何 Linux 发行版上使用 `fapolicyd`。
- en: You can prevent rogue programs from running by using the `noexec` mounting option
    on the `/` partition.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过在 `/` 分区上使用 `noexec` 挂载选项来防止恶意程序运行。
- en: To use the `noexec`, `nosuid`, and `nodev` mount options, you can edit the `/etc/mtab`
    file.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 `noexec`、`nosuid` 和 `nodev` 挂载选项，你可以编辑 `/etc/mtab` 文件。
- en: You need to run a program that `fapolicyd` normally won’t allow. What is the
    best way to deal with this?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要运行一个 `fapolicyd` 通常不会允许的程序。解决此问题的最佳方法是什么？
- en: Add it by hand-editing the `/etc/fapolicyd/fapolicyd.trust` file.
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过手动编辑 `/etc/fapolicyd/fapolicyd.trust` 文件来添加它。
- en: Add it by creating a custom rule.
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建自定义规则添加它。
- en: Add it by running the `sudo fapolicyd-cli --file add` command.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `sudo fapolicyd-cli --file add` 命令来添加它。
- en: Add it by hand-editing the `/etc/fapolicyd/fapolicyd.conf` file.
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过手动编辑 `/etc/fapolicyd/fapolicyd.conf` 文件来添加它。
- en: When you apply the STIG OpenSCAP profile, what permissions settings will files
    and directories have when you create them?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你应用 STIG OpenSCAP 配置文件时，创建文件和目录时将具有什么权限设置？
- en: 644 for files, 755 for directories.
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件权限为 644，目录权限为 755。
- en: 600 for files, 700 for directories.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件权限为 600，目录权限为 700。
- en: 640 for files, 750 for directories.
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件权限为 640，目录权限为 750。
- en: 755 for files, 755 for directories.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件权限为 755，目录权限为 755。
- en: Which of the following is true about applying the STIG OpenSCAP profile?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于应用 STIG OpenSCAP 配置文件，以下哪项是正确的？
- en: You can apply the profile to any Linux operating system during the installation
    process.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在安装过程中将配置文件应用于任何 Linux 操作系统。
- en: Applying the STIG profile to the operating system during the installation process
    does everything for you.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装过程中应用STIG配置文件会为你完成所有操作。
- en: Before you apply the STIG profile, you’ll need to set up a custom partition
    scheme to separate certain directories onto their own partitions.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用STIG配置文件之前，你需要设置一个自定义分区方案，将某些目录分配到它们自己的分区上。
- en: On Red Hat-type systems, you can only apply the STIG profile after you’ve installed
    the system.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Red Hat类型的系统上，只有在安装系统之后才能应用STIG配置文件。
- en: What type of hash value does `fapolicyd` use in its `fapolicyd.trust` file?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fapolicyd`在其`fapolicyd.trust`文件中使用哪种类型的哈希值？'
- en: SHA1
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SHA1
- en: Blowfish
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blowfish
- en: MD5
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: MD5
- en: SHA256
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SHA256
- en: Answers
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 答案
- en: a
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a
- en: c
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: b
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b
- en: c
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: d
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d

- en: 15 Prevent Unwanted Programs from Running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Join our book community on Discord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file104.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once upon a time, we didn’t have to worry much about Linux malware. While it’s
    still true that Linux users don’t have to worry about viruses, there are other
    types of malware that can definitely ruin a Linux user’s day. Cryptomining programs
    planted on your server can eat up memory and CPU cycles, causing your server to
    work much harder and use more power than it should. Ransomware, which can encrypt
    either important files or a system’s bootloader, can make these important files
    or even the whole system inaccessible. Even paying the demanded ransom isn’t always
    a guarantee that your system will be returned to proper order. One way to prevent
    these programs from doing their damage is to only allow authorized programs to
    run, and to block everything else. We have two ways of doing that, which are the
    topics of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Mount partitions with the *no* options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `fapolicyd` on Red Hat-type systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, if you’re ready, let’s get going.
  prefs: []
  type: TYPE_NORMAL
- en: Mount Partitions with the no options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *Chapter 12*, *Scanning, Auditing, and Hardening*, I showed you how OpenSCAP
    can automatically bring your Linux systems into compliance with the security standards
    of certain regulatory bodies. I also told you the inconvenient truth that there
    are certain things that OpenSCAP can’t do, and that you’ll have to do for yourself.
    One thing that it can’t do is to partition your system drives as some of these
    regulatory bodies require. For example, the **Security Technical Implementation
    Guides** (**STIG**s) that the U.S. Government uses require the following Linux
    system and data directories to be mounted on their own partitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/var`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/tmp/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/audit/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/tmp/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/home/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/boot/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason for this is twofold:'
  prefs: []
  type: TYPE_NORMAL
- en: If the root (`/`) partition of a Linux operating system becomes too full, it
    can cause the operating system to completely lock up. Mounting these directories
    in their own partitions can help prevent the `/` partition from filling up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The STIGs, and possibly other security regulations, require that these partitions
    be mounted with options that prevent executable programs from running on them,
    SGID and SUID file permissions from being effective, and device files to be created
    on them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As I mentioned, OpenSCAP won’t automatically set up this partitioning scheme
    for you. So, you’ll need to set it up as you install the operating system. This
    requires careful planning in order to get the partitions sized correctly. I mean,
    you don’t want to waste space by making certain partitions too large, and you
    don’t want to run out of space on partitions that really need the extra space.
  prefs: []
  type: TYPE_NORMAL
- en: RHEL 9.1 and all of its clones were released a few weeks before I began writing
    this chapter. You might already have noticed that there’s a bug in the 9.1 installer
    that wasn’t in the 9.0 installer. That is, the option to create a normal user
    account isn’t visible on the installer screen. I mean, it’s there, but you can’t
    see it and can’t scroll down to it. To bring it up, just keep hitting the Tab
    key until you’ve highlighted the option to create the root user password. Then,
    hit the Tab key once more, and then hit the Enter key. (Of course, there’s always
    the chance that the problem will get fixed by the time you read this.)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To get this set up, you’ll need to select the installer option to create a
    custom partitioning scheme. To make this somewhat realistic, set the size of your
    virtual machine’s virtual drive to about 1 TB. (Don’t worry if you don’t have
    that much space on your host machine’s drive. VirtualBox will create a dynamically-sized
    drive that won’t use 1 TB worth of space on the host drive unless you put 1 TB
    worth of files on it.) Let’s see what this looks like on AlmaLinux 9:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1: Choose to create a custom partitioning scheme](img/file105.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.1: Choose to create a custom partitioning scheme'
  prefs: []
  type: TYPE_NORMAL
- en: After selecting the **Custom** option, hit the **Done** button at the top of
    the screen. On the next screen, click the `+` box to create a mount point. Note
    that you can create a standard partition, a logical volume, or a thin-provisioned
    logical volume. (I’m going to go with standard partitions.)
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2: Create a mount point](img/file106.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.2: Create a mount point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by creating the `/boot/` mount point:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3: Creating the first mount point](img/file107.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.3: Creating the first mount point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the rest of the required mount points for the partitions that I mentioned
    in the above list. Your completed scheme might look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4: Create the rest of the mount points](img/file108.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.4: Create the rest of the mount points'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, your own use case will dictate how large you make each of these partitions.
    Here, you see that the `/home/` directory is the largest, which suggests that
    I want to use this machine as a Samba file server. If I were to use this machine
    for some other purpose, such as a database server, I would resize these partitions
    as required.
  prefs: []
  type: TYPE_NORMAL
- en: There’s a long-standing upstream bug in the RHEL installer that also affects
    the RHEL clones. That is, regardless of how much or how little space you need
    for each partition, you’ll have to make each one at least 1 GB in size. Otherwise,
    the installation will fail with an `error in POSTTRANS scriptlet in rpm package
    kernel-core` message. This has been a known problem for a long time, but it still
    hasn’t been fixed. (Yes, it does waste some disk space, but there’s nothing we
    can do about it.)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, here’s where we’re going to cheat a bit. We’re going to pretend that we’re
    dealing with the US government, which requires us to meet the STIG specifications.
    So, on the installer screen, we’ll click on the option to apply a security profile.
    On the next screen, we’ll scroll down to where we see the STIG profile, and select
    it. At the bottom, you’ll see that this profile adds the `noexec`, `nodev`, and
    `nosuid` options to the partitions, as applicable. (The `/var/` partition only
    requires the `nodev` option, and the `/boot/` partition only requires the `nodev`
    and `nosuid` options.)
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5: Applying the STIG profile](img/file109.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.5: Applying the STIG profile'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what these three mount options do for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '**noexec**: Executable files cannot run from any partition that’s mounted with
    this option. (This includes executable shell scripts, unless you invoke the script
    with `sh`. I’ll show you more about this in just a bit.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**nodev**: Users can’t create any device files on partitions that are mounted
    with this option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**nosuid**: On partitions that are mounted with this option, adding either
    the SUID or SGID permission to files will have no effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When the installation completes, our `/etc/fstab` file will look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: (Note that some of these lines might wrap around on the printed page.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s see if we can run an executable script from any of these directories.
    In my own home directory, I created a shell script that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the executable permission for myself, I tried to run it. Then,
    I copied it to the `/tmp/` directory and tried to run it again. Here’s what I
    got:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'So, I can’t run it, at least not as a normal user. But, what if I were to try
    it with `sudo`? Let’s see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Cool, the `noexec` option actually works. Well, for this it does. What would
    happen if we were to invoke the script with `sh?` Let’s see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'So, with shell scripts, the blocking isn’t perfect. Let’s see what happens
    with a compiled executable file. Start by downloading the command-line wallet/mining
    program for the DERO cryptocurrency project from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dero.io/download.html#linux](https://dero.io/download.html#linux)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Transfer the file to your virtual machine and untar it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that the executable permission is already set for all of the executable
    files, so you won’t have to add it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for the moment of truth. Enter the `dero_linux_amd64` directory and attempt
    to run the `derod-linux-amd64` program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Since this is a compiled executable instead of a shell script, prefacing the
    command with `sh` won’t do anything for us in any case. Anyway, keep this DERO
    stuff handy, because we’ll use it again in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re wondering what DERO is, think of it as a private version of Ethereum.
    You can build other tokens on it and create smart contract applications on it,
    just like you can do with Ethereum. The difference is that DERO protects your
    privacy, and Ethereum doesn’t.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In *Chapter 12*, *Scanning, Auditing, and Hardening*, I showed you that only
    the RHEL-type distros give us the option of applying a SCAP profile as we install
    the operating system. On non-RHEL distros, you’ll need to apply the SCAP profile
    after the installation has completed, assuming that an appropriate profile is
    available for your distro. In any case, if you don’t need to apply a whole SCAP
    profile but still want to add these security options to your partitions, or if
    no SCAP profile is available for your distro, just hand-edit the `/etc/fstab`
    file to add them in.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll look at another control mechanism that, so far at least, is exclusive
    to the world of Red Hat.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding fapolicyd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **File Access Policy Daemon** (**fapolicyd**) is a fairly new addition
    to Red Hat Enterprise Linux and its various clones. It’s free-as-in-speech software
    so that anyone can use it, but so far neither Ubuntu nor SUSE have made it available
    for their distros. To get a quick feel for how it works, go back to the virtual
    machine that you’ve just been using. First, move the entire `derod-linux-amd64`
    directory over to the top level of the `/` partition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'By moving the directory instead of copying it, your ownership of the directory
    and its files will be preserved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, copy the script that you created over to `/usr/local/bin/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When you look at the permissions settings on this script file, you’ll see something
    very unusual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You see that doing a `cp` operation automatically changes the ownership of
    this file to the owner of the target directory, which in this case is the root
    user. That’s just normal operation, so there’s nothing to see there. What’s so
    unusual is that we have a permissions setting of `700` on this file. That’s because
    of something else that our STIG profile has done. That is, the STIG profile has
    set a **UMASK** of `077` on this system, as we see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that any normal files that you create will have read and write permissions
    for only the owner, and any directories that you create will have read, write,
    and execute permissions for only the owner. To make this demo work we’ll need
    to change the permissions settings to a value of `755`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Cool. We can now make the demo work. We’ll start by entering the `/dero-linux-amd64/`
    directory and trying to invoke the `derod-linux-amd64` executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Even though you’re now invoking this program from a partition that isn’t mounted
    with the `noexec` option, you’re still not allowed to run it. That’s because it’s
    now being blocked by `fapolicyd`. That is, you can’t run it with your normal user
    privileges, even though both the directory and the executable file belong to you.
  prefs: []
  type: TYPE_NORMAL
- en: There’s an idiosyncrasy with `fapolicyd` that I haven’t seen documented anywhere,
    and that I only found out by accident. That is, it will only block untrusted programs
    when a normal, unprivileged user tries to run them. But, you can run them just
    fine with the proper `sudo` privileges. (This is all the more reason to grant
    only limited `sudo` privileges to all but your most trusted administrators.)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Next, let’s see what we can do with the shell script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'So, why can I invoke this script here, but not in my home directory? It’s because
    in my home directory, the `noexec` mount option is blocking the script. But here
    in the `/usr/local/bin/` directory, we don’t have that mount option. Instead,
    all we have is just `fapolicyd`. We can use the `fapolicyd-cli -list` command
    to view the rules that are in effect, which might explain why I was able to run
    this script. (Note that formatting constraints don’t allow me to show the entire
    output.):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Look at rule number 12\. This rule allows shell scripts to run on all partitions
    that don’t have the `noexec` mount option, even by unprivileged users. That makes
    sense, considering that even unprivileged users make extensive use of shell scripts
    in order to automate repetitive tasks. But, if you’re absolutely certain that
    no unprivileged user will ever have cause to run shell scripts on a system, you
    can always disable that rule. And, in any case, you’d still be able to run shell
    scripts if you have the proper `sudo` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: And, speaking of rules, let’s look at them next.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the fapolicyd rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fapolicyd` framework uses rules in the `/etc/fapolicyd/rules.d/` directory
    to create a list of programs that are either allowed or denied to execute on the
    system. When you install `fapolicyd`, you’ll get a set of default rules that are
    already set up and ready-to-go. If you need to allow more than what the default
    rules allow, you can create your own custom rules or add your desired program
    to the list of trusted applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `/etc/fapolicyd/rules.d/` directory, there are 11 rules files. Each
    one serves a different purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The numbers at the beginning of the file names indicate the order in which these
    rules files will be processed, because the order in which the rules get processed
    really does matter. Rather than try to explain what these different classes of
    rules do for us, I’ll just let you open each file and read the contents. They’re
    all very short and include a comment to explain what each file does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although you can create custom rules for your own custom applications, that’s
    not the recommended method. For performance and safety reasons, it’s better to
    just add your application to the trusted list, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: I mentioned *safety* reasons because when you write your own custom rules, it’s
    easy to make a mistake that will lock up the entire system. You don’t have to
    worry about that so much if you’re just adding files to the trusted list.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This command adds the desired file, along with its associated SHA256 hash value,
    to the `/etc/fapolicyd/fapolicyd.trust` file, as we see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To make this change take effect, we need to update the database and restart
    the `fapolicyd` service, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when I invoke this application with my normal user privileges, it will
    run just fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: So now, you’re likely wondering if you have to manually add each new application
    that you would install to the trusted list. Well, that depends upon how you install
    it. If you just download a compiled program as we did in the previous example,
    or compile one yourself, then yeah, you will have to manually add it to the trusted
    list. But, by default, every program that gets installed by the system package
    manager is automatically trusted. That means that if you use either `dnf` to install
    a package from the repository, or `rpm` to install an `rpm` package that you either
    downloaded or created, then the associated application is automatically trusted.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve looked at how the three *no* mount options and `fapolicyd` work
    together and complement each other. In this case, the mount options and `fapolicyd`
    all got set up automatically because we applied the STIG OpenSCAP profile as we
    installed the operating system. We can also install `fapolicyd` without the STIG
    profile, which is what we’ll look at next.
  prefs: []
  type: TYPE_NORMAL
- en: Installing fapolicyd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Normally, `fapolicyd` isn’t automatically installed on AlmaLinux. In this case
    it was, because the STIG profile that we applied requires it as well as the restrictive
    mounting options for our partitions. To install `fapolicyd` on a system on which
    it hasn’t already been installed, just do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: There’s still a bit more about `fapolicyd` that I haven’t shown you, but I think
    you’ve seen enough to get the gist of it. To get more details about it and to
    see how to also use it as a file-integrity checker, be sure to visit the official
    Red Hat documentation for it. (The link is below in the *Further reading* section.)
  prefs: []
  type: TYPE_NORMAL
- en: Adding the `noexec`, `nosuid`, and `nodev` mount options to your partitions
    works well, except that you can’t add them to all of your partitions. Obviously,
    you can’t add them to any partitions that are supposed to have executable files
    in them, or else your system would never work. The `fapolicyd` framework gives
    you a way to prevent rogue programs from running on those partitions, as long
    as the malicious intruder hasn’t already gained root privileges.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: All right, let’s wrap this baby up.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we looked at two ways to prevent untrusted programs from running
    on your systems. The first method, which can be used on any Linux distro, is to
    separate the various system and data directories into their own separate partitions,
    and then to mount each of these partitions with the appropriate combination of
    the `noexec`, `nosuid`, and `nodev` options. The second method, which so far is
    only available on Red Hat and its clones, is to use the `fapolicyd` framework.
    We saw how to automatically enable both of these methods by applying the STIG
    OpenSCAP profile as we install the operating system. Finally, we saw how to install
    `fapolicyd` separately, without having to apply the STIG profile.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll be wrapping things up with a quick look at various
    topics that didn’t neatly fit into any of the preceding chapters. I’ll see you
    there.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The bug in the RHEL installer: [https://forums.rockylinux.org/t/kernel-core-error-at-install/3683](https://forums.rockylinux.org/t/kernel-core-error-at-install/3683)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The STIG for Red Hat 8: [https://www.stigviewer.com/stig/red_hat_enterprise_linux_8/](https://www.stigviewer.com/stig/red_hat_enterprise_linux_8/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux Ransomware: [https://phoenixnap.com/blog/linux-ransomware](https://phoenixnap.com/blog/linux-ransomware)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux File Access Policy Daemon (`fapolicyd`) video: [https://youtu.be/txThobi7oqc](https://youtu.be/txThobi7oqc)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official `fapolicyd` documentation at Red hat: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening)'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which of the following statements is true?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the `noexec`, `nosuid`, and `nodev` mount options on any Linux distro.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use `fapolicyd` on any Linux distro.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can prevent rogue programs from running by using the `noexec` mounting option
    on the `/` partition.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To use the `noexec`, `nosuid`, and `nodev` mount options, you can edit the `/etc/mtab`
    file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to run a program that `fapolicyd` normally won’t allow. What is the
    best way to deal with this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add it by hand-editing the `/etc/fapolicyd/fapolicyd.trust` file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add it by creating a custom rule.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add it by running the `sudo fapolicyd-cli --file add` command.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add it by hand-editing the `/etc/fapolicyd/fapolicyd.conf` file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When you apply the STIG OpenSCAP profile, what permissions settings will files
    and directories have when you create them?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 644 for files, 755 for directories.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 600 for files, 700 for directories.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 640 for files, 750 for directories.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 755 for files, 755 for directories.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is true about applying the STIG OpenSCAP profile?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can apply the profile to any Linux operating system during the installation
    process.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Applying the STIG profile to the operating system during the installation process
    does everything for you.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Before you apply the STIG profile, you’ll need to set up a custom partition
    scheme to separate certain directories onto their own partitions.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On Red Hat-type systems, you can only apply the STIG profile after you’ve installed
    the system.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of hash value does `fapolicyd` use in its `fapolicyd.trust` file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SHA1
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Blowfish
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: MD5
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SHA256
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

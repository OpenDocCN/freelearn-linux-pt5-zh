- en: Chapter 5. Using SELinux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is an overview of the recipes presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing file contexts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring SELinux booleans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring SELinux port definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting SELinux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating SELinux policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying SELinux policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SELinux is a Linux kernel module that allows supporting **mandatory access control**
    (MAC) security policies. The Red Hat implementation of SELinux combines **role-based
    access control** (**RBAC**) with **type enforcement** (**TE**). Optionally, **multilevel
    security** (**MLS**) is also available but isn't widely used as it implements
    fewer policies than the default Red Hat SELinux policies.
  prefs: []
  type: TYPE_NORMAL
- en: SELinux is enabled by default in RHEL 7 and supported for all software packaged
    by Red Hat.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes presented in this chapter will not only provide you with a solid
    base to troubleshoot SELinux issues and fix them, but also a peek into how to
    create your own SELinux policies.
  prefs: []
  type: TYPE_NORMAL
- en: Changing file contexts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Files and processes are labeled with a SELinux context, which contains additional
    information about a SELinux user, role type, and level. This information is provided
    by the SELinux kernel module to make access control decisions.
  prefs: []
  type: TYPE_NORMAL
- en: The SELinux user, a unique identity known by the SELinux policy, is authorized
    for a number of roles.
  prefs: []
  type: TYPE_NORMAL
- en: SELinux roles, as we already alluded to before, are attributes of SELinux users
    and part of the RBAC SELinux policy. SELinux roles are authorized for SELinux
    domains.
  prefs: []
  type: TYPE_NORMAL
- en: SELinux types define the type for files and domain for processes. SELinux policies
    define access between types and other files and processes. By default, if there
    is no specific rule in the SELinux policy, access is denied.
  prefs: []
  type: TYPE_NORMAL
- en: The SELinux level is only used when the SELinux type is set to MLS and should
    be avoided altogether on anything other than servers. This set of policies doesn't
    cover the same domains as defined by the default Red Hat SELinux policy. The SELinux
    level is an attribute of MLS and **multi-category security** (**MCS**).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All files and processes on a system are labeled to represent security-relevant
    information. This information is called the SELinux context. To view the contexts
    of files (and directories), execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can temporarily change the context of a file (or files) or permanently change
    their context. The first option allows easy troubleshooting if you need to figure
    out whether changing the context solves your problem. Persistent changes are mostly
    used when your applications refer to data that is not in the standard location—for
    example, if your web server serves data from `/srv/www`.
  prefs: []
  type: TYPE_NORMAL
- en: Temporary context changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Temporary SELinux context changes remain until the file, or the filesystem that
    the file resides on, is relabeled.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the SELinux user of a file, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To change the SELinux role of a file, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To change the SELinux type of a file, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Persistent file context changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changing the application data location doesn't automatically modify SELinux
    contexts to allow your application to access this data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To permanently relabel files or directories, perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the SELinux user for your files or directories via this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the SELinux type of your files or directories by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finish with this command line by applying the directive to the `files/directories`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To show all the available SELinux users, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more…](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, you can install the `setools-console` package and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more…](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To show all the available SELinux types, install the `setools-console` package
    and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more…](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To show the available SELinux roles, install the `setools-console` package
    and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more…](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `semanage` tool doesn't have an option to include all files recursively,
    but there is a solution to this. The filename or dirname you specify is actually
    a regular expression filter. So, for example, if you want to recursively include
    all the files in `/srv/www`, you could specify `"/srv/www(/.*)?"`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For now, there''s no way to change the SELinux role using `semanage`. A way
    to get around this is to change the SELinux user or type using `semanage` and
    then edit it, as follows: `/etc/selinux/targeted/contexts/files/file_contexts.local`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a wrong SELinux context example of an AVC denial report found in the
    `audit.log` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This command can be explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Commands | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `type=AVC` | This is the log type |'
  prefs: []
  type: TYPE_TB
- en: '| `msg=audit(1438884962.645:86)` | This is the log entry timestamp |'
  prefs: []
  type: TYPE_TB
- en: '| `avc` | This is a repetition of the log type |'
  prefs: []
  type: TYPE_TB
- en: '| `denied` | This states whether enforcing is enabled |'
  prefs: []
  type: TYPE_TB
- en: '| `{ open }` | This is a permission that causes AVC denial |'
  prefs: []
  type: TYPE_TB
- en: '| `for pid=1283` | This is the process ID |'
  prefs: []
  type: TYPE_TB
- en: '| `comm="httpd"` | This is the process command |'
  prefs: []
  type: TYPE_TB
- en: '| `path="/var/www/html/index.html"` | This is the path that is accessed |'
  prefs: []
  type: TYPE_TB
- en: '| `dev="dm-5"` | This blocks the device that the preceding file is located
    on |'
  prefs: []
  type: TYPE_TB
- en: '| `ino=1089` | This is the inode of the preceding file |'
  prefs: []
  type: TYPE_TB
- en: '| `scontext=system_u:system_r:httpd_t:s0` | This is the source SELinux context
    |'
  prefs: []
  type: TYPE_TB
- en: '| `tcontext=system_u:object_r:user_home_t:s0` | This is the target SELinux
    context |'
  prefs: []
  type: TYPE_TB
- en: '| `tclass=file` | This is the target SELinux class |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the man page for *chcon (1)* and *semanage-fcontext (8)* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring SELinux booleans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SELinux booleans allow you to change the SELinux policy at runtime without the
    need to write additional policies. This allows you to change the policy without
    the need for recompilation, such as allowing services to access NFS volumes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the way to temporarily or permanently change SELinux booleans.
  prefs: []
  type: TYPE_NORMAL
- en: Listing SELinux booleans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For a list of all booleans and an explanation of what they do, execute the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Listing SELinux booleans](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s try to get the value of a particular SELinux boolean. It is possible
    to get the value of a single SELinux boolean without the use of additional utilities,
    such as **grep** and/or **awk**. Simply execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This shows you whether or not the boolean is set. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Changing SELinux booleans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To set a boolean value to a particular one, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This command allows you to change the value of the boolean, but it is not persistent
    across reboots. To allow persistence, add the `-P` option to the command line,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you would like a list of all the bare bones of SELinux booleans and their
    values, `getsebool -a` is an alternative, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more…](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Managing SELinux booleans can be rather complex as there are a lot of booleans,
    and their names are not always simple to remember. For this reason, the `setsebool`,
    `getsebool`, and `semanage` tools come with tab completion. So, whenever you type
    any boolean name, you can use the `tab` key to complete or display the possible
    options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of an AVC denial report found in the `audit.log` file that
    can be solved by enabling a boolean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This is an example of a service (`httpd` in this case) accessing a file located
    on an NFS share, which is disabled by default.
  prefs: []
  type: TYPE_NORMAL
- en: This can be allowed by setting the `httpd_use_nfs` boolean to "`on`".
  prefs: []
  type: TYPE_NORMAL
- en: Configuring SELinux port definitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SELinux also controls access to your TCP/IP ports. If your application is confined
    by SELinux, it will also deny access to your ports when starting up the application.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to detect which ports are used by a particular
    SELinux type and change it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s allow the HTTP daemon to listen on the nonstandard port `82` through
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, look for the ports that are accessed by HTTP via these commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The SELinux port assignment we're looking for is `http_port_t`. As you can see,
    only the displayed ports (`80`, `81`, `443`, `488`, `8008`, `8009`, `8443`, and
    `9000`) are allowed to be used to listen on by any process that is allowed to
    use the `http_port_t` type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add port `82` to the list of allowed ports, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, verify the port assignment, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, there is reference to the HTTP daemon as the SELinux policy
    governing HTTP daemons is implemented not only for the Apache web server, but
    also for Nginx. So, as long as you use the packages provided by Red Hat, the SELinux
    policies will be used correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following example of an AVC denial report found in the `audit.log`
    file that is caused because the domain is not allowed to access a certain port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This AVC denial shows that the `httpd` daemon attempted to listen (`name_bind`)
    on port `82` but was prohibited by SELinux.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting SELinux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Troubleshooting SELinux is not as straightforward as it may seem as at the time
    of writing this book, there is no integration with SELinux to return SELinux-related
    events back to the applications. Usually, you will find that access is denied
    with no further description of it in log files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure that `setroubleshoot-server` and `setools-console` are installed
    by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have X server installed on your system, you can also install the GUI,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that `auditd`, `rsyslog`, and `setroubleshootd` are installed and
    running before reproducing the issue.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several ways to detect SELinux issues.
  prefs: []
  type: TYPE_NORMAL
- en: This is a classic issue where the SELinux context of a file is incorrect, causing
    the application trying to access the file to fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the context of `/var/www/html/index.html` is set to `system_u:object_r:user_home_t:s0`
    instead of `system_u:object_r:httpd_sys_content_t:s0`, causing `httpd` to throw
    a `404`. Take a look at the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: audit.log
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the following command to look for denied or failed entries in the audit
    log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: syslog
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can look for SELinux messages in `/var/log/messages` via the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: ausearch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the audit search tool to find SELinux errors, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we restore the context of `/var/www/html/index.html` to its original,
    the file is accessible again. Take a look at the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s not always easy to determine whether a file has the correct context.
    To view the actual SELinux context and compare it to what it should be without
    modifying anything, execute this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This tells you what the current context is and what it should be.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding syslog example, the output comes with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This command provides you with a richer description of the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This will actually give you more details about the problem at hand, and it will
    also make a couple of suggestions. Of course, in this case, the real solution
    is to restore the SELinux context of the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have installed a graphical desktop environment, you will get a notification
    each time your system encounters an "AVC denied" alert:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the icon will present you with the following dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the **Troubleshoot** button will provide you with additional information
    and a (or multiple) possible solution(s) for your problem, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this case, the first option (the one marked with a green line) is the correct
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: Some AVC denial messages may not be logged when SELinux denies access. Applications
    and libraries regularly probe for more access than is actually required to perform
    their tasks. In order to not flood the audit logs with these kinds of messages,
    the policy can silence the AVC denials that are without permissions using `dontaudit`
    rules. The downside of this is that it may make troubleshooting SELinux denials
    more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: 'To disable the `dontaudit` rules, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This will disable the `dontaudit` rules and rebuild the SELinux policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is advisable to reenable the `dontaudit` rules when you''re done troubleshooting
    as this may flood your disks. You can do this by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To get a full list of `dontaudit` rules, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If you know the domain that you wish to check for `dontaudit` rules, add the
    `-s` argument followed by the domain, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take a look at the man page for *ausearch (8)*, *matchpathcon (8)*, and *sealert
    (8)* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Creating SELinux policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, you'll need to create a new SELinux policy—for instance, when
    installing a piece of software from source. Although I do not recommend installing
    software from source on enterprise systems, this is sometimes your only option
    for company-developed software.
  prefs: []
  type: TYPE_NORMAL
- en: It is then time to create your own SELinux policy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you need to have `policycoreutils-python` installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll use the `denied` entries in the `audit.log` log file to build our SELinux
    policy with `audit2allow`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll use the same example as in the previous recipe: the
    SELinux context of `/var/www/html/index.html` that is changed to `system_u:object_r:user_home_t:s0`.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a human readable policy for verification via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When this policy is validated, you can create a compiled SELinux policy file,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you generate a module package, two files are created: a type enforcement
    file (`.te`) and a policy package file (`.pp`) file. The `te` file is the human
    readable policy as generated using `audit2allow -m`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `pp` file is the SELinux policy module package, which will later be used
    to enable the new policy.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you believe you have discovered a bug in an existing SELinux policy, you'll
    need to produce a type enforcing and policy package file to report with Red Hat
    Bugzilla.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to make sure that you only parse the correct `AVC denial` entries
    with `audit2allow` as it may result in more access than required. It's a good
    idea to pipe the `AVC denial` entries to a temporary file and remove what is not
    needed before you parse the file with `audit2allow`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the policy you generate in this way is not exactly what you need, you can
    always edit the generated `te` policy file, and when you''re done, compile a new
    policy file using the `te` policy file. You can do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build a binary policy module out of the policy file through this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the SELinux policy module package by executing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take a look at the man page for *audit2allow(1)* for more options on creating
    a policy
  prefs: []
  type: TYPE_NORMAL
- en: To report bugs, go to [https://bugzilla.redhat.com/](https://bugzilla.redhat.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Applying SELinux policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've learned how to create SELinux policies in the previous recipe. This recipe
    will show you how to apply your newly created SELinux policies.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to apply a policy, we need a policy package file (`pp`). This can be
    obtained by parsing AVC denials to `audit2allow` or compiling your own policy
    package file, as explained in the *Create SELinux policies* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activate the policy (this can take quite a while, depending on the number of
    policies applied to your system) by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, verify that the policy is actually activated via these commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When executing the `semodule` command, the policy file is copied to `/etc/selinux/targeted/modules/active/modules/`,
    and the complete SELinux policy is recompiled and applied.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful when applying custom-made policies as these may allow more access
    than required!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To remove policies, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This is particularly practical when you want to test the effect with and without
    the policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s also a way to upgrade the module without removing it first, which
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the man page for *semodule (8)* for more information.
  prefs: []
  type: TYPE_NORMAL

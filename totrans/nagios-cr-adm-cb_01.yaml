- en: Chapter 1. Understanding Hosts, Services, and Contacts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 理解主机、服务和联系人
- en: 'In this chapter we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating a new network host
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的网络主机
- en: Creating a new HTTP service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的HTTP服务
- en: Creating a new e-mail contact
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的电子邮件联系人
- en: Verifying configuration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证配置
- en: Creating a new hostgroup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的主机组
- en: Creating a new servicegroup
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的服务组
- en: Creating a new contactgroup
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的联系人组
- en: Creating a new time period
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的时间段
- en: Running a service on all hosts in a group
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组内所有主机上运行服务
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: '**Nagios Core** is appropriate for monitoring services and states on all sorts
    of hosts, and one of its primary advantages is that the configuration can be as
    simple or as complex as required. Many Nagios Core users will only ever use the
    software as a way to send PING requests to a few hosts on their local network
    or possibly the Internet, and to send e-mail or pager messages to the administrator
    if they don''t get any replies. Nagios Core is capable of monitoring vastly more
    complex systems than this, scaling from simple LAN configurations to being the
    cornerstone for monitoring an entire network.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nagios Core**适用于监控各种主机上的服务和状态，其主要优点之一是配置可以根据需要简单或复杂。许多Nagios Core用户只会将该软件用作向本地网络或可能的互联网中的少数主机发送PING请求，并在没有收到回复时向管理员发送电子邮件或寻呼机消息。Nagios
    Core能够监控比这更复杂的系统，从简单的局域网配置扩展到作为监控整个网络的基石。'
- en: However, for both simple and complex configurations of Nagios Core, the most
    basic building blocks of configuration are **hosts**, **services**, and **contacts**.
    These are the three things that administrators of even very simple networking
    setups will end up editing and probably creating. If you're a beginner to Nagios
    Core, then you might have changed a hostname here and there or copied a stanza
    in a configuration to get it to do what you want. In this chapter, we're going
    to look at what these configurations do in a bit more depth than that.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于Nagios Core的简单和复杂配置来说，最基本的配置构建块是**主机**、**服务**和**联系人**。这些是即使是非常简单的网络设置的管理员最终也会编辑和可能创建的三项内容。如果你是Nagios
    Core的初学者，可能曾在这里和那里更改过主机名，或者复制过配置中的某个段落以使其按预期工作。在本章中，我们将更深入地探讨这些配置的作用。
- en: 'In a Nagios Core configuration:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nagios Core配置中：
- en: Hosts usually correspond to some sort of computer. This could be a physical
    or virtual machine accessible over the network, or the monitoring server itself.
    Conceptually, however, a host can monitor any kind of network entity, such as
    the endpoint of a VPN.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机通常对应某种计算机。这可以是通过网络访问的物理或虚拟机器，或者是监控服务器本身。然而，从概念上讲，主机可以监控任何类型的网络实体，例如VPN的终端。
- en: Services usually correspond to an arrangement for Nagios Core to check something
    about a host, whether that's something as simple as getting PING replies from
    it, or something more complicated such as checking that the value of an SNMP OID
    is within acceptable bounds.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务通常对应于Nagios Core检查主机某些内容的安排，无论是像获取主机的PING响应这样的简单操作，还是像检查SNMP OID的值是否在可接受范围内这样更复杂的操作。
- en: Contacts define a means to notify someone when events happen to our services
    on our hosts, such as not being able to get a PING response, or being unable to
    send a test e-mail message.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系人定义了一种在我们的主机上发生事件时通知某人的方式，例如无法获得PING响应，或无法发送测试电子邮件消息。
- en: In this chapter, we'll add all three of these, and we'll learn how to group
    their definitions together to make the configuration more readable, and to work
    with hosts in groups rather than having to edit each one individually. We'll also
    set up a custom time period for notifications, so that hardworking system administrators
    like us don't end up getting paged at midnight unnecessarily!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将添加这三项内容，并学习如何将它们的定义组合在一起，以使配置更具可读性，并以组的形式操作主机，而不必单独编辑每个主机。我们还将为通知设置一个自定义时间段，这样像我们这样的辛勤系统管理员就不会在午夜时分不必要地接到通知了！
- en: Creating a new network host
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的网络主机
- en: In this recipe, we'll start with the default Nagios Core configuration, and
    set up a host definition for a server that responds to PING on our local network.
    The end result will be that Nagios Core will add our new host to its internal
    tables when it starts up, and will automatically check it (probably using PING)
    on a regular basis. In this example, I'll use my Nagios Core monitoring server
    with a **Domain Name System** (**DNS**) name of `olympus.naginet`, and add a host
    definition for a webserver with a DNS name of `sparta.naginet`. This is all on
    my local network – `10.128.0.0/24`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将从默认的 Nagios Core 配置开始，并为响应我们本地网络上 PING 的服务器设置一个主机定义。最终结果是，Nagios Core
    在启动时将我们的新主机添加到内部表中，并会定期自动检查它（可能使用 PING）。在本示例中，我将使用我的 Nagios Core 监控服务器，**域名系统**（**DNS**）名称为`olympus.naginet`，并为
    DNS 名称为`sparta.naginet`的 web 服务器添加主机定义。这一切都在我的本地网络上 – `10.128.0.0/24`。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You''ll need a working Nagios Core 3.0 or greater installation with a web interface,
    with all the Nagios Core Plugins installed. If you have not yet installed Nagios
    Core, then you should start with the QuickStart guide: [http://nagios.sourceforge.net/docs/3_0/quickstart.html](http://nagios.sourceforge.net/docs/3_0/quickstart.html).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装一个能够运行的 Nagios Core 3.0 或更高版本，并且必须有一个 Web 界面，以及安装了所有 Nagios Core 插件。如果你尚未安装
    Nagios Core，应该先从快速入门指南开始：[http://nagios.sourceforge.net/docs/3_0/quickstart.html](http://nagios.sourceforge.net/docs/3_0/quickstart.html)。
- en: We'll assume that the configuration file that Nagios Core reads on startup is
    located at `/usr/local/nagios/etc/nagios.cfg`, as is the case with the default
    install. It shouldn't matter where you include this new host definition in the
    configuration, as long as Nagios Core is going to read the file at some point,
    but it might be a good idea to give each host its own file in a separate objects
    directory, which we'll do here. You should have access to a shell on the server,
    and be able to write text files using an editor of your choice; I'll use `vi`.
    You will need root privileges on the server via `su` or `sudo`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设 Nagios Core 启动时读取的配置文件位于`/usr/local/nagios/etc/nagios.cfg`，这是默认安装时的配置。将新主机定义放入配置文件的哪个位置不应该有太大影响，只要
    Nagios Core 最终会读取该文件，但最好是为每个主机在单独的对象目录中创建一个文件，正如我们在这里所做的那样。你应该能在服务器上访问 shell，并使用你喜欢的编辑器编辑文本文件；我将使用`vi`。你需要通过`su`或`sudo`获得服务器的
    root 权限。
- en: You should know how to restart Nagios Core on the server, so that the configuration
    you're going to add gets applied. It shouldn't be necessary to restart the whole
    server to do this! A common location for the startup/shutdown script on Unix-like
    hosts is `/etc/init.d/nagios`, which I'll use here.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该知道如何在服务器上重启 Nagios Core，以便将你即将添加的配置应用到系统中。通常不需要重启整个服务器！在类 Unix 系统中，启动/关闭脚本的常见位置是`/etc/init.d/nagios`，我将在这里使用这个路径。
- en: You should also get the hostname or IP address of the server you'd like to monitor
    ready. It's good practice to use the IP address if you can, which will mean your
    checks keep working even if DNS is unavailable. You shouldn't need the subnet
    mask or anything like that; Nagios Core will only need whatever information the
    PING tool would need for its own `check_ping` command.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该准备好你想要监控的服务器的主机名或 IP 地址。如果可能，最好使用 IP 地址，这样即使 DNS 不可用，你的检查依然能正常工作。你不需要子网掩码之类的东西；Nagios
    Core 只需要 PING 工具所需要的任何信息来执行它自己的`check_ping`命令。
- en: 'Finally, you should test things first; confirm that you''re able to reach the
    host from the Nagios Core server via PING by checking directly from the shell,
    to make sure your network stack, routes, firewalls, and netmasks are all correct:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你应该先测试一下；通过从 shell 中直接检查来确认你是否能够通过 PING 从 Nagios Core 服务器访问该主机，确保你的网络堆栈、路由、防火墙和子网掩码都是正确的：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create the new host definition for `sparta.naginet` as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下步骤为`sparta.naginet`创建新的主机定义：
- en: 'Change directory to `/usr/local/nagios/etc/objects`, and create a new file
    called `sparta.naginet.cfg`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`/usr/local/nagios/etc/objects`目录，并创建一个名为`sparta.naginet.cfg`的新文件：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Write the following into the file, changing the values in bold as appropriate
    for your own setup:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容写入文件，并根据你自己的设置适当更改粗体部分的值：
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Change directory to `/usr/local/nagios/etc`, and edit the `nagios.cfg` file:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`/usr/local/nagios/etc`目录，并编辑`nagios.cfg`文件：
- en: '[PRE3]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'At the end of the file add the following line:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾添加以下一行：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Restart the Nagios Core server:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 Nagios Core 服务器：
- en: '[PRE5]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If the server restarted successfully, the web interface should show a brand
    new host in the **Hosts** list, in **PENDING** state as it waits to run a check
    that the host is alive:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器成功重启，网页界面应显示一个全新的主机，在**Hosts**列表中处于**PENDING**状态，等待进行存活检查：
- en: '![How to do it...](img/5566_01_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5566_01_01.jpg)'
- en: 'In the next few minutes, it should change to green to show that the check passed
    and the host is **UP**, assuming that the check succeeded:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几分钟内，它应该变为绿色，显示检查已通过，主机处于**UP**状态，假设检查成功：
- en: '![How to do it...](img/5566_01_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5566_01_02.jpg)'
- en: 'If the test failed and Nagios Core was not able to get a PING response from
    the target machine after three tries, for whatever reason, then it would probably
    look similar to the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试失败，并且在三次尝试后Nagios Core未能从目标机器获取到PING响应，无论出于何种原因，那么它的界面可能会显示如下所示的截图：
- en: '![How to do it...](img/5566_01_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5566_01_03.jpg)'
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The configuration we included in this section adds a host to Nagios Core's list
    of hosts. It will periodically check the host by sending a PING request, checking
    to see if it receives a reply, and updating the host's status as shown in the
    Nagios Core web interface accordingly. We haven't defined any other services to
    check for this host yet, nor have we specified what action it should take if the
    host is down. However, the host itself will be automatically checked at regular
    intervals by Nagios Core, and we can view its state in the web interface at any
    time.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中我们包含的配置将主机添加到Nagios Core的主机列表中。它将通过发送PING请求定期检查该主机，查看是否收到回复，并根据Nagios Core网页界面中的显示更新主机的状态。我们尚未定义要检查的其他服务，也没有指定如果主机宕机应采取何种措施。不过，Nagios
    Core将定期自动检查该主机，并且我们可以随时在网页界面中查看其状态。
- en: 'The directives we defined in the preceding configuration are explained as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的配置中定义的指令如下所示：
- en: '`host_name`: This defines the hostname of the machine, used internally by Nagios
    Core to refer to its host. It will end up being used in other parts of the configuration.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_name`：此项定义了机器的主机名，Nagios Core在内部用来引用该主机。它将在配置的其他部分中使用。'
- en: '`alias`: This defines a more recognizable human-readable name for the host;
    it appears in the web interface. It could also be used for a full-text description
    of the host.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alias`：此项定义了一个更易于识别的、可读性强的主机名称，显示在网页界面中。它还可以用于为主机提供一个完整的文本描述。'
- en: '`address`: This defines the IP address of the machine. This is the actual value
    that Nagios Core will use for contacting the server; using an IP address rather
    than a DNS name is generally best practice, so that the checks continue to work
    even if DNS is not functioning.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address`：此项定义了机器的IP地址。这是Nagios Core用来联系服务器的实际值；一般来说，使用IP地址而非DNS名称是最佳实践，因为即使DNS无法正常工作，检查仍然能够继续进行。'
- en: '`max_check_attempts`: This defines the number of times Nagios Core should try
    to repeat the check if checks fail. Here, we''ve defined a value of `3`, meaning
    that Nagios Core will try two more times to PING the target host after first finding
    it down.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_check_attempts`：此项定义了如果检查失败，Nagios Core应重试的次数。在此，我们定义了`3`次，这意味着如果主机首次被发现宕机，Nagios
    Core将在接下来的两次尝试中再次PING目标主机。'
- en: '`check_period`: This references the time period that the host should be checked.
    `24x7` is a time period defined in the default configuration for Nagios Core.
    This is a sensible value for hosts, as it means the host will always be checked.
    This defines how often Nagios Core will check the host, and not how often it will
    notify anyone.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check_period`：此项引用了应检查主机的时间段。`24x7`是Nagios Core默认配置中定义的时间段。这个值对于主机来说是合理的，因为它意味着主机将始终被检查。这项设置定义了Nagios
    Core检查主机的频率，而非通知频率。'
- en: '`check_command`: This references the command that will be used to check whether
    the host is `UP`, `DOWN`, or `UNREACHABLE`. In this case, a QuickStart Nagios
    Core configuration defines `check-host-alive` as a PING check, which is a good
    test of basic network connectivity, and a sensible default for most hosts. This
    directive is actually not required to make a valid host, but you will want to
    include it under most circumstances; without it, no checks will be run.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check_command`：此项引用了将用于检查主机是否处于`UP`、`DOWN`或`UNREACHABLE`状态的命令。在本例中，QuickStart
    Nagios Core配置将`check-host-alive`定义为PING检查，这对于测试基本的网络连接性是一个很好的方法，且是大多数主机的合理默认配置。实际上，这个指令对于创建有效的主机并非必需，但在大多数情况下你仍然需要包含它；没有它，检查将不会执行。'
- en: '`contacts`: This references the contact or contacts that will be notified about
    state changes in the host. In this instance, we''ve used `nagiosadmin`, which
    is defined in the QuickStart Nagios Core configuration.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contacts`：这指的是将收到主机状态变化通知的联系人。在这个例子中，我们使用了`nagiosadmin`，它在QuickStart的Nagios
    Core配置中有定义。'
- en: '`notification_interval`: This defines how regularly the host should repeat
    its notifications if it is having problems. Here, we''ve used a value of `60`,
    which corresponds to 60 minutes or one hour.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notification_interval`：这定义了主机在出现问题时应多频繁地重复发送通知。在这里，我们使用了值`60`，表示60分钟或一小时。'
- en: '`notification_period`: This references the time period during which Nagios
    Core should send out notifications, if there are problems. Here, we''re again
    using the `24x7` time period; for other hosts, another time period such as `workhours`
    might be more appropriate.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notification_period`：这指的是Nagios Core在出现问题时应发送通知的时间段。在这里，我们再次使用了`24x7`时间段；对于其他主机，像`workhours`这样的时间段可能更为合适。'
- en: Note that we added the definition in its own file called `sparta.naginet.cfg`
    , and then referred to it in the main `nagios.cfg` configuration file. This is
    simply a conventional way of laying out hosts, and it happens to be quite a tidy
    way to manage things to keep definitions in their own files.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将定义添加到一个名为`sparta.naginet.cfg`的文件中，然后在主配置文件`nagios.cfg`中引用它。这仅仅是一种传统的主机布局方式，实际上这是一种相当整洁的管理方式，通过将定义保存在各自的文件中来保持清晰。
- en: There's more...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a lot of other useful parameters for hosts, but the ones we've used
    include everything that's required.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他有用的主机参数，但我们使用的这些已经涵盖了所有必需的内容。
- en: 'While this is a perfectly valid way of specifying a host, it''s more typical
    to define a host based on some template, with definitions of how often the host
    should be checked, who should be contacted when its state changes and on what
    basis, and similar properties. Nagios Core''s QuickStart sample configuration
    defines a simple template host called `generic-host`, which could be used by extending
    the host definition with the `use` directive:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种指定主机的方式完全有效，但通常更常见的做法是基于某些模板定义主机，并定义主机应多久检查一次，状态变化时应该联系谁，以及联系的依据等类似属性。Nagios
    Core的QuickStart示例配置定义了一个简单的模板主机，名为`generic-host`，可以通过使用`use`指令扩展主机定义来使用它：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This uses all the parameters defined for `generic-host`, and then adds on the
    details of the specific host that needs to be checked. Note that if you use `generic-host`,
    then you will need to define `check_command` in your host definition. If you're
    curious to see what's defined in `generic-host`, then you can find its definition
    in `/usr/local/nagios/etc/objects/templates.cfg`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了为`generic-host`定义的所有参数，然后添加了需要检查的特定主机的详细信息。请注意，如果使用`generic-host`，则需要在主机定义中定义`check_command`。如果你想查看`generic-host`中定义了什么内容，可以在`/usr/local/nagios/etc/objects/templates.cfg`中找到它的定义。
- en: See also
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Using an alternative check command for hosts* recipe in [Chapter 2](ch02.html
    "Chapter 2. Working with Commands and Plugins"), *Working with Commands and Plugins*
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章. 工作与命令和插件")中的*使用替代的主机检查命令*实例，*工作与命令和插件*'
- en: The *Specifying how frequently to check a host* recipe in [Chapter 3](ch03.html
    "Chapter 3. Working with Checks and States"), *Working with Checks and States*
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章. 工作与检查和状态")中的*指定检查主机的频率*实例，*工作与检查和状态*'
- en: The *Grouping configuration files in directories* and *Using inheritance to
    simplify configuration* recipes in [Chapter 9](ch09.html "Chapter 9. Managing
    Configuration"), *Managing Configuration*
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html "第9章. 配置管理")中的*在目录中分组配置文件*和*使用继承简化配置*实例，*配置管理*'
- en: Creating a new HTTP service
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的HTTP服务
- en: In this recipe, we'll create a new service to check on an existing host. Specifically,
    we'll check our `sparta.naginet` server to see if it's responding to HTTP requests
    on the usual HTTP TCP port 80\. To do this, we'll be using a predefined command
    called `check_http` , which in turn uses one of the standard set of Nagios Core
    plugins, also called `check_http`. If you don't yet have a web server defined
    as a host in Nagios Core, then you may like to try the *Creating a new network
    host* recipe in this chapter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将创建一个新的服务来检查现有的主机。具体来说，我们将检查我们的`sparta.naginet`服务器，看看它是否在常用的HTTP TCP端口80上响应HTTP请求。为此，我们将使用一个预定义的命令`check_http`，该命令又使用Nagios
    Core插件集中的一个标准插件，名为`check_http`。如果你还没有在Nagios Core中定义一个作为主机的Web服务器，你可以尝试本章中的*创建一个新的网络主机*食谱。
- en: After we've done this, not only will our host be checked for a PING response
    by `check_command`, but Nagios Core will also run a periodic check to ensure that
    an HTTP service on that machine is responding to requests on the same host.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，不仅`check_command`会检查我们的主机是否有PING响应，Nagios Core还会定期检查该机器上的HTTP服务是否能响应同一主机上的请求。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You'll need a working Nagios Core 3.0 or greater installation with a web interface,
    all the Nagios Plugins installed, and at least one host defined. If you need to
    set up a host definition for your web server first, then you might like to read
    the *Creating a new network host* recipe in this chapter, for which the requirements
    are the same.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个运行正常的Nagios Core 3.0或更高版本的安装，并且有一个Web界面，安装了所有Nagios插件，并且至少定义了一个主机。如果你需要先为你的Web服务器设置主机定义，你可以阅读本章中的*创建一个新的网络主机*食谱，要求与此相同。
- en: 'It would be a good idea to test that the Nagios Core server is actually able
    to contact the web server first, to ensure that the check we''re about to set
    up should succeed. The standard **telnet** tool is a fine way to test that a response
    comes back from TCP port 80 as we would expect from a web server:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置检查之前，最好先测试一下Nagios Core服务器是否能够联系到Web服务器，以确保我们即将设置的检查能够成功。标准的**telnet**工具是一个很好的方法，用来测试是否能从TCP端口80获得我们期望的Web服务器响应：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'We can create the service definition for `sparta.naginet` as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式为`sparta.naginet`创建服务定义：
- en: 'Change to the directory containing the file in which the `sparta.naginet` host
    is defined, and edit it as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到包含`sparta.naginet`主机定义的文件所在目录，并按如下方式编辑该文件：
- en: '[PRE8]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following code snippet to the end of the file, substituting in the
    value of the host''s `host_name` directive:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段添加到文件末尾，并替换主机的`host_name`指令的值：
- en: '[PRE9]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Restart the Nagios Core server:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启Nagios Core服务器：
- en: '[PRE10]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If the server restarted successfully, the web interface should show a new service
    under the **Services** section, in **PENDING** state as the service awaits its
    first check:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器成功重启，Web界面应该会在**服务**部分显示一个新的服务，其状态为**PENDING**，等待首次检查：
- en: '![How to do it...](img/5566_01_04.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5566_01_04.jpg)'
- en: 'Within a few minutes, the service''s state should change to **OK** once the
    check has run and succeeded with an **HTTP/1.1 200 OK** response, or similar:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，当检查成功并获得**HTTP/1.1 200 OK**响应（或类似响应）时，服务的状态应该变为**OK**：
- en: '![How to do it...](img/5566_01_05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5566_01_05.jpg)'
- en: 'If the check had problems, perhaps because the HTTP daemon isn''t running on
    the target server, then the check may show **CRITICAL** instead. This probably
    doesn''t mean the configuration is broken; it more likely means the network or
    web server isn''t working:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检查出现问题，可能是因为目标服务器上的HTTP守护进程未运行，那么检查可能会显示**CRITICAL**。这可能并不意味着配置有问题；更可能是网络或Web服务器未正常工作：
- en: '![How to do it...](img/5566_01_06.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5566_01_06.jpg)'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The configuration we've added adds a simple service check definition for an
    existing host, to check up to three times whether the HTTP daemon on that host
    is responding to a simple **HTTP/1.1** request. If Nagios Core can't get a response
    to its check, then it will flag the state of the service as **CRITICAL**, and
    will try again up to two more times before sending a notification. The service
    will be visible in the Nagios Core web interface and we can check its state at
    any time. Nagios Core will continue testing the server on a regular basis and
    flagging whether the checks were successful or not.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的配置为现有主机添加了一个简单的服务检查定义，用于检查该主机上的 HTTP 守护进程是否响应一个简单的**HTTP/1.1**请求，最多检查三次。如果
    Nagios Core 无法得到响应，它将标记该服务的状态为**严重**，并会在发送通知之前再尝试两次。该服务将在 Nagios Core 的 Web 界面中可见，我们可以随时查看其状态。Nagios
    Core 将定期测试服务器，并标记检查是否成功。
- en: It's important to note that the service is like a property of a particular host;
    we define a service to check for a specific host, in this case, the `sparta.naginet`
    web server. That's why it's important to get the definition for `host_name` right.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，服务像是某个特定主机的一个属性；我们为特定主机定义一个服务进行检查，在这个例子中是 `sparta.naginet` Web 服务器。这就是为什么获取正确的
    `host_name` 定义很重要。
- en: 'The directives we defined in the preceding configuration are as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面配置中定义的指令如下：
- en: '`host_name`: This references the host definition for which this service should
    apply. This will be the same as the `host_name` directive for the appropriate
    host.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_name`：这是指该服务应适用的主机定义。这将与适当主机的 `host_name` 指令相同。'
- en: '`service_description`: This is a name for the service itself, something human-recognizable
    that will appear in alerts and in the web interface for the service. In this case,
    we''ve used `HTTP`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service_description`：这是服务本身的名称，应该是一个易于识别的名称，将出现在警报中以及 Web 界面的服务部分。在这个例子中，我们使用了
    `HTTP`。'
- en: '`check_command`: This references the command that should be used to check the
    service''s state. Here, we''re referring to a command defined in Nagios Core''s
    default configuration called `check_http`, which refers to a plugin of the same
    name in the Nagios Core Plugins set.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check_command`：这是指用于检查服务状态的命令。在这里，我们指的是 Nagios Core 默认配置中定义的 `check_http`
    命令，该命令是 Nagios Core 插件集中同名插件的引用。'
- en: '`max_check_attempts`: This defines the number of times Nagios Core should attempt
    to re-check the service after finding it in a state other than `OK`.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_check_attempts`：这是定义当 Nagios Core 发现服务状态不是 `OK` 时，应该尝试重新检查服务的次数。'
- en: '`check_interval`: This defines how long Nagios Core should wait between checks
    when the service is `OK`, or after the number of checks given in `max_check_attempts`
    has been exceeded.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check_interval`：这是定义当服务处于 `OK` 状态时，或者当超过 `max_check_attempts` 中给定的检查次数后，Nagios
    Core 应该等待多久再进行下次检查。'
- en: '`retry_interval`: This defines how long Nagios Core should wait between retrying
    checks after first finding them in a state other than `OK`.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retry_interval`：这是定义 Nagios Core 在第一次发现服务状态不是 `OK` 后，应该在重新尝试检查时等待的时间。'
- en: '`check_period`: This references the time period during which Nagios Core should
    run checks of the service. Here we''ve used the sensible `24x7` time period, as
    defined in Nagios Core''s default configuration. Note that this can be different
    from `notification_period`; we can check the service''s status without necessarily
    notifying a contact.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check_period`：这是指 Nagios Core 应该在该时间段内运行服务检查。在这里，我们使用了在 Nagios Core 默认配置中定义的合理时间段
    `24x7`。请注意，这可以与 `notification_period` 不同；我们可以检查服务的状态，而不一定需要通知联系人。'
- en: '`notification_interval`: This defines how long Nagios Core should wait between
    re-sending notifications when a service is in a state other than `OK`.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notification_interval`：这是定义当服务处于非 `OK` 状态时，Nagios Core 应该在重新发送通知时等待的时间。'
- en: '`notification_period`: This references the time period during which Nagios
    Core should send notifications if it finds a host in a problem state. Here we''ve
    again used `24x7`, but for some less critical services it might be appropriate
    to use a time period such as `workhours`.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notification_period`：这是指 Nagios Core 应该在何时发送通知，如果它发现主机处于问题状态。在这里，我们再次使用了 `24x7`，但对于一些不太重要的服务，使用诸如
    `workhours` 的时间段可能更合适。'
- en: Note that we added the service definition in the same file as defining the host,
    and directly after it. We can actually place the definition anywhere we like,
    but this happens to be a good way of keeping things organized.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在与主机定义相同的文件中添加了服务定义，并且紧跟其后。我们实际上可以将定义放在任何我们喜欢的位置，但这样做有助于保持组织结构。
- en: There's more...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The service we''ve set up to monitor on `sparta.naginet` is an HTTP service,
    but that''s just one of many possible services we could monitor on our network.
    Nagios Core defines many different commands for its core plugin set, such as `check_smtp`,
    `check_dns`, and so on. These commands, in turn, all point to programs that actually
    perform a check and return the results to the Nagios Core server to be dealt with.
    The important thing to take away from this is that a service can monitor pretty
    much anything, and there are hundreds of plugins available for common network
    monitoring checks available on the Nagios Exchange website: [http://exchange.nagios.org/](http://exchange.nagios.org/).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`sparta.naginet`上设置的监控服务是HTTP服务，但这只是我们可以在网络上监控的众多服务之一。Nagios Core为其核心插件集定义了许多不同的命令，如`check_smtp`、`check_dns`等。这些命令实际上指向执行检查并将结果返回给Nagios
    Core服务器处理的程序。关键是要知道，服务几乎可以监控任何东西，而且在Nagios Exchange网站上有成百上千个可用于常见网络监控检查的插件：[http://exchange.nagios.org/](http://exchange.nagios.org/)。
- en: There are a great deal more possible directives for services, and in practice
    it's more likely for even simple setups that we'll want to extend a service template
    for our service. This allows us to define values that we might want for a number
    of services, such as how long they should be in a `CRITICAL` state before a notification
    event takes place and someone gets contacted to deal with the problem.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 服务有更多可能的指令，在实际应用中，即使是简单的设置，我们也更有可能希望扩展一个服务模板。这样，我们就可以为多个服务定义我们可能需要的值，例如在发生通知事件之前，服务应处于`CRITICAL`状态多长时间，以及何时有人被联系以处理问题。
- en: 'One such template that Nagios Core''s default configuration defines is called
    `generic-service`, and we can use it as a basis for our new service by referring
    to it with the `use` keyword:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios Core默认配置中定义的一个模板叫做`generic-service`，我们可以通过`use`关键字引用它，将其作为我们新服务的基础：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This may work well for you, as there are a lot of very sensible default values
    set by the `generic-service` template, which makes things a lot easier. We can
    inspect these values by looking at the template's definition in `/usr/local/nagios/etc/objects/templates.cfg`.
    This is the same file that includes the `generic-host` definition that we may
    have used earlier.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这对你来说可能非常有效，因为`generic-service`模板中设置了许多非常合理的默认值，这使得事情变得更加简单。我们可以通过查看`/usr/local/nagios/etc/objects/templates.cfg`中的模板定义来检查这些值。这与我们之前可能使用过的`generic-host`定义位于同一个文件中。
- en: See also
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a new servicegroup* recipe in this chapter
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*创建新服务组*配方
- en: The *Specifying how frequently to check a service* and *Scheduling downtime
    for a host or service* recipes in [Chapter 3](ch03.html "Chapter 3. Working with
    Checks and States"), *Working with Checks and States*
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章。与检查和状态一起工作")中，*指定检查服务的频率*和*为主机或服务安排停机时间*配方，*与检查和状态一起工作*
- en: The *Monitoring web services* recipe in [Chapter 5](ch05.html "Chapter 5. Monitoring
    Methods"), *Monitoring Methods*
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章。监控方法")中，*监控Web服务*配方，*监控方法*
- en: Creating a new e-mail contact
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的电子邮件联系人
- en: In this recipe, we'll create a new contact with which hosts and services can
    interact, chiefly to inform them of hosts or services changing states. We'll use
    the simplest example of setting up an e-mail contact, and configuring an existing
    host so that this person receives an e-mail message when Nagios Core's host checks
    fail and the host is apparently unreachable. In this instance, I'll make it e-mail
    me at `nagios@sanctum.geek.nz` whenever my host, `sparta.naginet`, goes from `DOWN`
    to `UP` state, or vice-versa.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将创建一个新的联系人，使主机和服务能够进行交互，主要是通知它们主机或服务状态的变化。我们将使用设置电子邮件联系人的最简单示例，并配置现有主机，以便当Nagios
    Core的主机检查失败并且主机显然无法访问时，此人会收到电子邮件消息。在这个例子中，当我的主机`sparta.naginet`的状态从`DOWN`变为`UP`，或反之时，我将让它给我发送电子邮件，邮件地址是`nagios@sanctum.geek.nz`。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a working Nagios Core 3.0 or greater server running, with a
    web interface and at least one host to check. If you need to do this first, see
    the *Creating a new network host* recipe in this chapter.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该有一个正常运行的 Nagios Core 3.0 或更高版本的服务器，带有 Web 界面，并且至少有一个需要监控的主机。如果你需要先做这一步，请参见本章中的*创建一个新的网络主机*部分。
- en: For this particular kind of contact, you'll also need to have a working SMTP
    daemon running on the monitoring server, such as **Exim** or **Postfix**. You
    should verify that you're able to send messages to the target address, and that
    they're successfully delivered to the mailserver you expect.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种特定类型的联系人，你还需要在监控服务器上运行一个正常工作的 SMTP 守护进程，如**Exim**或**Postfix**。你应该验证是否能够将消息发送到目标地址，并且这些消息能够成功送达预期的邮件服务器。
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can add a simple new contact to the Nagios Core configuration as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式将一个简单的新联系人添加到 Nagios Core 配置中：
- en: 'Change to Nagios Core''s object configuration directory; ideally it should
    contain a file that''s devoted to contacts, such as `contacts.cfg` here, and edit
    that file:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Nagios Core 的对象配置目录；理想情况下，这里应该有一个专门用于联系人配置的文件，比如这里的`contacts.cfg`，并编辑该文件：
- en: '[PRE12]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following contact definition to the end of the file, substituting your
    own values for the properties in bold as you need them:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下联系人定义添加到文件的末尾，根据需要替换加粗的属性值：
- en: '[PRE13]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Edit the definition for the `sparta.naginet` host, and add or replace the definition
    for `contacts` for the appropriate host to our new `spartaadmin` contact:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`sparta.naginet`主机的定义，并为适当的主机将`contacts`定义添加或替换为我们的新`spartaadmin`联系人：
- en: '[PRE14]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Restart the Nagios Core server:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 Nagios Core 服务器：
- en: '[PRE15]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'With this done, the next time our host changes its state, we should receive
    messages similar to the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，下次我们的主机状态发生变化时，我们应该收到类似以下的消息：
- en: '![How to do it...](img/5566_01_07.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5566_01_07.jpg)'
- en: 'When the host becomes available again, we should receive a recovery message
    similar to the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当主机再次可用时，我们应该收到类似以下的恢复消息：
- en: '![How to do it...](img/5566_01_08.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5566_01_08.jpg)'
- en: If possible, it's worth testing this setup with a test host that we can safely
    bring down and then up again, to check that we receive the appropriate notifications.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能，值得通过一个我们可以安全关闭并重新启动的测试主机来测试此设置，以检查是否能收到适当的通知。
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: This configuration adds a new contact to the Nagios Core configuration, and
    references it in one of the hosts as the appropriate contact to use when the host
    has problems.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置将一个新联系人添加到 Nagios Core 配置中，并在某个主机的配置中引用它，作为当主机出现问题时使用的合适联系人。
- en: 'We''ve defined the required directives for the contact, and a couple of others
    as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已定义了联系人所需的指令，以及其他几个指令，具体如下：
- en: '`contact_name`: This defines a unique name for the contact, so that we can
    refer to it in host and service definitions, or anywhere else in the Nagios Core
    configuration.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contact_name`：此项定义了联系人的唯一名称，以便我们可以在主机和服务定义中，或者在 Nagios Core 配置的任何其他地方引用它。'
- en: '`alias`: This defines a human-friendly name for the contact, perhaps a brief
    explanation of who the person or group is and/or for what they''re responsible.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alias`：此项定义了联系人的人性化名称，可能简要说明此人或小组的身份和/或其负责的内容。'
- en: '`email`: This defines the e-mail address of the contact, since we''re going
    to be sending messages by e-mail.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`：此项定义了联系人的电子邮件地址，因为我们将通过电子邮件发送消息。'
- en: '`host_notification_commands`: This defines the command or commands to be run
    when a state change on a host prompts a notification for the contact. In this
    case, we''re going to e-mail the contact the results with a predefined command
    called `notify-host-by-email`.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_notification_commands`：此项定义了当主机状态变化并触发通知时，应该运行的命令或命令集合。在这种情况下，我们将使用一个预定义的命令`notify-host-by-email`，通过电子邮件将结果发送给联系人。'
- en: '`host_notification_options`: This specifies the different kinds of host events
    for which this contact should be notified. Here, we''re using `d,u,r`, which means
    that this contact will receive notifications for a host going `DOWN`, becoming
    `UNREACHABLE`, or coming back `UP`.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_notification_options`：此项指定应通知此联系人的不同主机事件类型。这里我们使用的是`d,u,r`，意味着此联系人将接收关于主机`DOWN`、变为`UNREACHABLE`或恢复`UP`时的通知。'
- en: '`host_notification_period`: This defines the time period during which this
    contact can be notified of any host events. If a host notification is generated
    and defined to be sent to this contact, but it falls outside this time period,
    then the notification will not be sent.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_notification_period`: 这定义了此联系人可以在任何主机事件通知期间内被通知的时间段。如果生成了主机通知，并且定义为发送给此联系人，但它不在此时间段内，则通知将不会被发送。'
- en: '`service_notification_commands`: This defines the command or commands to be
    run when a state change on a service prompts a notification for this contact.
    In this case, we''re going to e-mail the contact the results with a predefined
    command called `notify-service-by-email`.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service_notification_commands`: 这定义了在服务状态变化时运行的命令或命令，以便向此联系人发送通知。在本例中，我们将使用预定义命令
    `notify-service-by-email` 将结果通过电子邮件发送给联系人。'
- en: '`service_notification_options`: This specifies the different kinds of service
    events for which this contact should be notified. Here, we''re using `w,u,c,r`,
    which means we want to receive notifications about the services entering the `WARNING`,
    `UNKNOWN`, or `CRITICAL` states, and also when they recover and go back to being
    in the `OK` state.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service_notification_options`: 这指定了应向此联系人通知的不同类型的服务事件。在这里，我们使用 `w,u,c,r`，这意味着我们希望收到关于进入
    `WARNING`、`UNKNOWN` 或 `CRITICAL` 状态的服务的通知，以及当它们恢复并回到 `OK` 状态时的通知。'
- en: '`service_notification_period`: This is the same as `host_notification_period`,
    except that this directive refers to notifications about services, and not hosts.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service_notification_period`: 这与 `host_notification_period` 相同，只是此指令是关于服务的通知，而不是关于主机的。  '
- en: Note that we placed the definition for the contact in `contacts.cfg`, which
    is a reasonably sensible place. However, we can place the contact definition in
    any file that Nagios Core will read as part of its configuration; we can organize
    our hosts, services, and contacts any way we like. It helps to choose some sort
    of system, so we can easily identify where definitions are likely to be when we
    need to add, change, or remove them.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将联系人的定义放在了 `contacts.cfg` 中，这是一个相当合理的地方。但是，我们可以将联系人定义放在 Nagios Core 将作为配置的一部分读取的任何文件中；我们可以按照自己喜欢的方式组织我们的主机、服务和联系人。选择一种系统有助于我们在需要添加、更改或删除它们时，能够轻松地识别定义可能出现的位置。
- en: There's more...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'If we define a lot of contacts with similar options, it may be appropriate
    to have individual contacts extend contact templates, so that they can inherit
    those common settings. The QuickStart Nagios Core configuration includes such
    a template, called `generic-contact`. We can define our new contact as an extension
    of this template, as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们定义了许多具有相似选项的联系人，可能适合使个体联系人扩展联系人模板，以便它们可以继承这些共同的设置。QuickStart Nagios Core
    配置包括一个名为 `generic-contact` 的模板，我们可以将我们的新联系人定义为此模板的扩展，如下所示：
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To see the directives defined for `generic-contact`, you can inspect its definition
    in the `/usr/local/nagios/etc/objects/templates.cfg` file.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 `generic-contact` 定义的指令，你可以检查 `/usr/local/nagios/etc/objects/templates.cfg`
    文件中的定义。
- en: See also
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a new contact group* recipe in this chapter
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中的 *创建新的联系人组* 配方
- en: The *Automating contact rotation* and *Defining an escalation for repeated notifications*
    recipes in [Chapter 5](ch05.html "Chapter 5. Monitoring Methods"), *Monitoring
    Methods*
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自动化联系轮换* 和 *为重复通知定义升级* 在 [第 5 章](ch05.html "第 5 章. 监控方法"), *监控方法*'
- en: Verifying configuration
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证配置
- en: 'In this recipe, we''ll learn about the most basic step in debugging a Nagios
    Core configuration, which is to verify it. This is a very useful step to take
    before restarting the Nagios Core server to load an altered configuration, because
    it will warn us about possible problems. This is a good recipe to follow if you''re
    not able to start the Nagios Core server at any point because of configuration
    problems, and instead get output similar to the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习关于调试 Nagios Core 配置的最基本步骤，即验证配置。在重新启动 Nagios Core 服务器以加载更改的配置之前进行这一步骤非常有用，因为它将警告我们可能存在的问题。如果由于配置问题而无法在任何时候启动
    Nagios Core 服务器，而是获得类似以下输出，则这是一个很好的配方可供遵循：
- en: '[PRE17]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You should have a working Nagios Core 3.0 or better server running.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该有一个运行良好的 Nagios Core 3.0 或更高版本服务器。
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做……
- en: 'We can verify the Nagios Core configuration as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式验证 Nagios Core 配置：
- en: 'Run the following command, substituting the path to the Nagios binary file
    and our primary `nagios.cfg` configuration file, if necessary:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，如果需要，可以替换为Nagios二进制文件的路径和我们的主配置文件`nagios.cfg`：
- en: '[PRE18]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If the output is very long, then it might be a good idea to pipe it through
    a pager program, such as `less`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输出非常长，可能最好通过一个分页程序来显示，比如`less`：
- en: '[PRE19]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Inspect the output and look for warnings and problems. Here's an example of
    part of the output we can expect, if our configuration is correct:![How to do
    it...](img/5566_01_09.jpg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查输出并查看警告和问题。如果我们的配置正确，以下是我们可能期望的输出的一部分示例：![如何操作...](img/5566_01_09.jpg)
- en: 'If there''s a problem of some sort, then we might see an output similar to
    the following, which is just an example of a possible error; my configuration
    is wrong because I tried to add a service for a host called `athens.naginet`,
    when I hadn''t actually configured that host yet. So Nagios Core is quite right
    to yell at me:'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果出现某些问题，我们可能会看到类似下面的输出，这只是一个可能的错误示例；我的配置出错是因为我尝试为一个名为`athens.naginet`的主机添加服务，但实际上我还没有配置该主机。所以，Nagios
    Core 很正确地对我发出了警告：
- en: '![How to do it...](img/5566_01_10.jpg)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/5566_01_10.jpg)'
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The configuration is parsed as though Nagios Core were about to start up, to
    check that the configuration all makes sense. It will run basic checks such as
    looking for syntax errors, and will also check things like having at least one
    host and service to monitor. Some of the things it reports are warnings, meaning
    that they're not necessarily problems; examples include hosts not having any services
    monitored, or not having any contacts defined.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 配置会被解析，就像Nagios Core即将启动一样，以检查配置是否合理。它会执行基本的检查，比如查找语法错误，也会检查是否至少有一个主机和服务在监控之中。它报告的某些内容是警告，意味着这些不一定是问题；例如，主机没有任何被监控的服务，或者没有定义任何联系人。
- en: This is the quickest way to get an idea of whether the Nagios Core configuration
    is sane and will work correctly. Whenever there's trouble restarting the Nagios
    Core server, it's a good idea to check the output of this command first. In fact,
    it's a good habit to check the configuration before restarting, particularly if
    we're unsure about the configuration changes, or if the monitoring server is checking
    something very important! This means if it turns out that our configuration is
    broken, then the Nagios Core daemon will keep running with the configuration from
    the point before we changed it, and we can fix things before we restart.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是检查Nagios Core配置是否合理并能正常工作的最快方式。每当重新启动Nagios Core服务器遇到问题时，最好首先检查此命令的输出。实际上，养成在重新启动前检查配置的好习惯是很有帮助的，尤其是当我们不确定配置变更时，或者当监控服务器正在检查一些非常重要的内容时！这意味着，如果最终发现我们的配置有问题，那么Nagios
    Core守护进程将继续使用我们更改之前的配置运行，我们可以在重启前修复问题。
- en: There's more...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The program at `/usr/local/nagios/bin/nagios` is actually the same program that
    runs the Nagios Core server, but the `-v` part of the command is a switch for
    the program that verifies the configuration instead, and shows any problems with
    it. The second path is to the configuration file with which Nagios Core starts,
    which in turn imports the configuration files for objects, such as contact, host,
    and service definitions.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`/usr/local/nagios/bin/nagios`程序实际上与运行Nagios Core服务器的程序是相同的，但是命令中的`-v`部分是一个用于验证配置的开关，而不是启动服务器，它会显示配置中的任何问题。第二个路径是Nagios
    Core启动时使用的配置文件，它会导入对象的配置文件，例如联系人、主机和服务定义。'
- en: See also
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Writing debugging information to Nagios Core log file* recipe in [Chapter
    10](ch10.html "Chapter 10. Security and Performance"), *Security and Performance*
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章. 安全与性能")中的*将调试信息写入Nagios Core日志文件*教程，*安全与性能*'
- en: Creating a new hostgroup
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的主机组
- en: In this recipe, we'll learn how to create a new hostgroup; in this case, we'll
    do this to group together two webservers. This is useful for having distinct groups
    of hosts that might have different properties, such as being monitored by different
    teams, or running different types of monitored services. It also allows us to
    view a group breakdown in the Nagios Core web interface, and to apply a single
    service to a whole group of hosts, rather than doing so individually. This means
    we can set up services for a new host simply by adding it to a group, rather than
    having to specify the configuration manually.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何创建一个新的主机组；在这个案例中，我们将创建一个主机组来将两个网页服务器归为一组。这对于拥有不同属性的主机组非常有用，例如它们可能由不同的团队进行监控，或者运行不同类型的监控服务。它还允许我们在Nagios
    Core网页界面中查看组的详细信息，并将一个服务应用于整个主机组，而不是单独应用。这意味着，我们可以通过将主机添加到一个组来为新主机设置服务，而无需手动指定配置。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a working Nagios Core 3.0 or better server running, with a web
    interface.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该有一个运行中的Nagios Core 3.0或更高版本的服务器，并且该服务器有一个网页界面。
- en: You should also have at least two hosts that form a meaningful group; perhaps
    they're similar kinds of servers, such as webservers, or are monitored by the
    same team, or all at a physical location.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该至少有两台主机组成一个有意义的组；也许它们是相似类型的服务器，如网页服务器，或者由同一团队进行监控，或者都位于同一个物理位置。
- en: In this example, we have two webservers, `sparta.naginet` and `athens.naginet`,
    and we're going to add them to a group called `webservers`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有两台网页服务器，`sparta.naginet`和`athens.naginet`，我们将它们添加到一个名为`webservers`的组中。
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can add our new hostgroup `webservers` to the Nagios Core configuration
    as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式将新的主机组`webservers`添加到Nagios Core配置中：
- en: 'Create a new file called `/usr/local/nagios/etc/objects/hostgroups.cfg`, if
    it doesn''t already exist:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`/usr/local/nagios/etc/objects/hostgroups.cfg`文件尚不存在，请创建它：
- en: '[PRE20]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following code into the new file, substituting the names in bold to
    suit your own layout:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到新文件中，并根据您的布局替换加粗的名称：
- en: '[PRE21]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Move a directory up, and then edit the `nagios.cfg` file:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上移动一个目录，然后编辑`nagios.cfg`文件：
- en: '[PRE22]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following line to the end of the file:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到文件的末尾：
- en: '[PRE23]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'For each of the hosts we want to add to the group, find their definitions,
    and add a `hostgroups` directive to put them into the new hostgroup. In this case,
    our definitions for `sparta.naginet` and `athens.naginet` end up looking as follows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们希望添加到组中的每个主机，找到它们的定义，并添加一个`hostgroups`指令，将它们放入新主机组中。在本例中，`sparta.naginet`和`athens.naginet`的定义最终看起来如下：
- en: '[PRE24]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Restart Nagios:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启Nagios：
- en: '[PRE25]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We should now be able to visit the **Host Groups** section of the web interface,
    and see a new hostgroup with two members:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该能够访问网页界面中的**主机组**部分，并看到一个包含两个成员的新主机组：
- en: '![How to do it...](img/5566_01_11.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5566_01_11.jpg)'
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The configuration we added includes a new file with a new hostgroup into the
    Nagios Core configuration, and inserts the appropriate hosts into the group. At
    the moment, all this is doing is creating a separate section in the web interface
    for us to get a quick overview of only the hosts in that particular group.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的配置包括一个新文件，并将新的主机组插入到Nagios Core配置中，同时将适当的主机插入到该组中。目前，这样做只是为我们在网页界面中创建一个单独的部分，以便快速查看该特定组中的所有主机。
- en: There's more...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The way we''ve added hosts to groups is actually not the only way to do it.
    If we prefer, we can name the hosts for the group inside the group definition,
    using the `members` directive, so that we could have a code snippet similar to
    the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将主机添加到组的方式其实并不是唯一的做法。如果我们愿意，可以在组定义中为该组命名主机，使用`members`指令，这样我们就可以得到类似以下的代码片段：
- en: '[PRE26]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This extends to allowing us to make a hostgroup that always includes every
    single host, if we find that useful:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这扩展到允许我们创建一个始终包含所有主机的主机组，如果我们觉得这有用：
- en: '[PRE27]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If we're going to use hostgroups extensively in our Nagios Core configuration,
    then we should use whichever method is going to be easiest for our configuration.
    We can use both, if necessary.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Nagios Core配置中广泛使用主机组，那么我们应该选择最适合我们配置的方式。如果有需要，我们也可以同时使用这两种方法。
- en: It's worth noting that a host can be in more than one group, and there is no
    limit on the number of groups we can declare, so we can afford to be quite liberal
    with how we group our hosts into useful categories. Examples could be organizing
    servers by function, manufacturer, or colocation customer, or routers by BGP or
    OSPF usage; it all depends on what kind of network we're monitoring.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，一个主机可以属于多个组，并且我们声明的组数量没有限制，因此我们可以在将主机分组到有用的类别时更加灵活。示例可以是按功能、制造商或托管客户组织服务器，或按BGP或OSPF使用组织路由器；这完全取决于我们监控的网络类型。
- en: See also
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating a new host* and *Running a service on all hosts in a group* recipes
    in this chapter
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*创建新主机*和*在组内所有主机上运行服务*配方
- en: The *Using inheritance to simplify configuration* recipe in [Chapter 9](ch09.html
    "Chapter 9. Managing Configuration"), *Managing Configuration*
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html "第9章：管理配置")的*通过继承简化配置*配方中，*管理配置*。
- en: Creating a new servicegroup
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的服务组
- en: In this recipe, we'll create a new servicegroup. This allows us to make meaningful
    groups out of a set of arbitrary services, so that we can view the status of all
    those services in a separate part of the web administration area.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建一个新的服务组。这允许我们将一组任意的服务组成有意义的组，以便在网页管理区域的独立部分中查看这些服务的状态。
- en: Getting ready
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a working Nagios Core 3.0 or better server running, with web
    interface.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经运行着一个正常工作的Nagios Core 3.0或更高版本的服务器，并且具备网页界面。
- en: You should also have at least two services defined that form a meaningful group;
    perhaps they're similar kinds of services, such as mail services, or are monitored
    by the same team, or all on the same set of servers at a physical location.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该定义至少两个服务，它们形成一个有意义的组；这些服务可能是类似类型的服务，如邮件服务，或者由同一团队监控，或者都位于同一物理位置的服务器上。
- en: 'In this example, we have three servers performing mail functions: `smtp.naginet`,
    `pop3.naginet`, and `imap.naginet`, running an SMTP, POP3, and IMAP daemon, respectively.
    All three of the hosts are set up in Nagios Core, and so are their services. We''re
    going to add them into a new servicegroup called `mailservices`.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们有三台执行邮件功能的服务器：`smtp.naginet`、`pop3.naginet`和`imap.naginet`，分别运行SMTP、POP3和IMAP守护进程。所有三台主机和它们的服务都已经在Nagios
    Core中设置好了。我们将把它们添加到一个名为`mailservices`的新服务组中。
- en: 'Here are the definitions of the hosts and services used in this example, so
    you can see how everything fits together:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是示例中使用的主机和服务的定义，你可以看到它们是如何配合工作的：
- en: '[PRE28]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can add our new servicegroup with the following steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤添加新的服务组：
- en: 'Change to our Nagios Core configuration objects directory, and edit a new file
    called `servicegroups.cfg`:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到我们的Nagios Core配置对象目录，并编辑一个名为`servicegroups.cfg`的新文件：
- en: '[PRE29]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following definition to the new file, substituting the values in bold
    with your own values:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下定义添加到新文件中，替换粗体部分的值为你自己的值：
- en: '[PRE30]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Move a directory up, and then edit the `nagios.cfg` file:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上移动一个目录，然后编辑`nagios.cfg`文件：
- en: '[PRE31]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the following line to the end of the file:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到文件末尾：
- en: '[PRE32]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For each of the services we want to add to the group, find their definitions
    and add a `servicegroups` directive to put them into the new servicegroup. The
    definitions may end up looking similar to the following code snippet:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们想要添加到组中的每个服务，找到它们的定义，并添加一个`servicegroups`指令，将它们加入到新的服务组中。定义可能最终类似于以下代码片段：
- en: '[PRE33]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Restart Nagios with the following command:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令重启Nagios：
- en: '[PRE34]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We should now be able to visit the **Service Groups** section of the web interface,
    and see a new servicegroup with three members:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该能够访问网页界面的**服务组**部分，并看到一个包含三个成员的新服务组：
- en: '![How to do it...](img/5566_01_12.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5566_01_12.jpg)'
- en: How it works...
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The configuration we added includes a new file with a new servicegroup into
    the Nagios Core configuration, and inserts the appropriate services into the group.
    This creates a separate section in the web interface for us to get a quick overview
    of only the services in that particular group.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的配置包括一个新文件，其中包含一个新的服务组，并将适当的服务插入到该组中。这在网页界面中为我们创建了一个单独的部分，让我们可以快速查看该特定组中的所有服务。
- en: There's more...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The way we''ve added services to the groups is actually not the only way to
    do it. If we prefer, we can name the services (and their applicable hosts) for
    the group inside the group definition, using the `members` directive, so that
    we could have a code snippet similar to the following:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将服务添加到组中的方式实际上并不是唯一的方式。如果我们愿意，我们可以在组定义中使用 `members` 指令来命名服务（及其适用的主机），从而拥有类似以下的代码片段：
- en: '[PRE35]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note that we need to specify both the host that the service is on, and then
    the services to monitor on it, comma-separated. The hostname comes first, and
    then the service.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们需要指定服务所在的主机，然后列出该主机上要监控的服务，服务之间用逗号分隔。主机名先出现，然后是服务。
- en: 'This extends to allowing us to make a servicegroup that always includes every
    single service, if we find that useful:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这也扩展到允许我们创建一个始终包含每个单独服务的服务组，如果我们认为这有用的话：
- en: '[PRE36]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If we're going to be using servicegroup definitions extensively in our Nagios
    Core configuration, we should use whichever of the two methods to add services
    to groups that we think is going to be easiest for us to maintain.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打算在 Nagios Core 配置中广泛使用服务组定义，我们应该使用我们认为最易于维护的两种方法中的任意一种来将服务添加到组中。
- en: It's worth noting that a service can be in more than one group, and there is
    no limit on the number of groups we can declare, so we can afford to be quite
    liberal with how we group our services into categories. Examples could be organising
    services by the appropriate contact for their notifications, for internal functions,
    or customer facing functions.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，一个服务可以属于多个组，而且我们声明的组数量没有限制，因此我们可以非常灵活地将服务归类到不同的类别中。举例来说，可以根据通知的相应联系人、内部功能或面向客户的功能来组织服务。
- en: See also
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating a new service* and *Running a service on all hosts in a group*
    recipes in this chapter
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*创建新服务*和*在组内所有主机上运行服务*食谱
- en: The *Using inheritance to simplify configuration* recipe in [Chapter 9](ch09.html
    "Chapter 9. Managing Configuration"), *Managing Configuration*
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html "第9章：配置管理")中的*使用继承简化配置*食谱，*配置管理*'
- en: Creating a new contactgroup
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的联系人组
- en: In this recipe, we'll create a new contactgroup into which we can add our contacts.
    Like hostgroups and servicegroups, contactgroups mostly amount to convenient shortcuts.
    In this case, it allows us to define a contactgroup as the recipient of notifications
    for a host or service definition. This means that we could define a group `ops`,
    for example, and then even if people joined or left the group, we wouldn't need
    to change any definitions for the hosts or services.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将创建一个新的联系人组，向其中添加我们的联系人。像主机组和服务组一样，联系人组主要是便捷的快捷方式。在这种情况下，它允许我们定义一个联系人组作为主机或服务定义的通知接收者。这意味着我们可以定义一个名为
    `ops` 的组，然后即使人员加入或离开该组，我们也无需更改主机或服务的任何定义。
- en: Getting ready
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a working Nagios Core 3.0 or better server running.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该运行一个正常工作的 Nagios Core 3.0 或更高版本的服务器。
- en: 'You should also have at least two contacts that form a meaningful group. In
    this case, we have two staff members, John Smith and Jane Doe, who are both a
    part of our network operations team. We want both of them to be notified for all
    the appropriate hosts and services, so we''ll add them to a group called `ops`.
    Here are the definitions with which we''re working:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该至少有两个联系人组成一个有意义的组。在这种情况下，我们有两位员工，John Smith 和 Jane Doe，他们都是我们网络运维团队的一部分。我们希望他们都能接收到所有相关主机和服务的通知，因此我们将把他们添加到一个名为
    `ops` 的组中。以下是我们正在使用的定义：
- en: '[PRE37]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create our new `ops` contactgroup as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式创建新的 `ops` 联系人组：
- en: 'Change to our Nagios Core object configuration directory, and edit the `contacts.cfg`
    file:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入我们的 Nagios Core 对象配置目录，并编辑 `contacts.cfg` 文件：
- en: '[PRE38]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the following definition to the file, substituting your own values in bold
    as appropriate:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向文件中添加以下定义，并根据需要替换加粗部分的值：
- en: '[PRE39]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'For each of the contacts that we want to add to the group, find their definitions
    and add the `contactgroups` directive to them. The definitions will end up looking
    similar to the following code snippet:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们想要添加到组中的每个联系人，找到他们的定义并为他们添加 `contactgroups` 指令。定义最终会类似于以下代码片段：
- en: '[PRE40]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Restart the Nagios Core server:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 Nagios Core 服务器：
- en: '[PRE41]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works...
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: With this group set up, we are now able to use it in the `contactgroups` directive
    for hosts and services, to define the contacts to which notifications should be
    sent. Notifications are sent to all the addresses in the group. This can replace
    the `contacts` directive where we individually name the contacts.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好这个组后，我们现在可以在`contactgroups`指令中使用它，指定应接收通知的联系人组。通知将发送到该组中的所有地址。这可以替代`contacts`指令，其中我们逐个列出联系人。
- en: There's more...
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'This means, for example, that instead of having a service definition similar
    to the following:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，例如，替代具有如下类似服务定义：
- en: '[PRE42]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We could use the following code snippet:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码片段：
- en: '[PRE43]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: If John Smith were to leave the operations team, then we could simply remove
    his contact definition, and nothing else would require changing; from then on,
    only Jane Doe would receive the service notifications. This method provides a
    layer of abstraction between contacts and the hosts and services for which they
    receive notifications.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 John Smith 离开了操作团队，我们只需删除他的联系人定义，其他的无需更改；从此以后，只有 Jane Doe 会收到服务通知。此方法在联系人和他们接收通知的主机与服务之间提供了一层抽象。
- en: See also
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Creating a new contact* recipe in this chapter
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*创建新联系人*示例
- en: The *Automating contact rotation* recipe in [Chapter 4](ch04.html "Chapter 4. Configuring
    Notifications"), *Configuring Notifications*
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 4 章](ch04.html "第4章 配置通知")中的*自动化联系人轮换*示例，*配置通知*'
- en: The *Using inheritance to simplify configuration* recipe in [Chapter 9](ch09.html
    "Chapter 9. Managing Configuration"), *Managing Configuration*
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 9 章](ch09.html "第9章 管理配置")中的*使用继承简化配置*示例，*管理配置*'
- en: Creating a new time period
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的时间段
- en: In this recipe, we'll add a new time period definition to the Nagios Core configuration
    to allow us to set up monitoring for hosts and services only during weekdays.
    There's a default configuration defined as `workhours` that would almost suit
    us, except that it doesn't include the evenings. We'll make a new one from scratch,
    and we'll make another one to cover the weekends too.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将在 Nagios Core 配置中添加一个新的时间段定义，以便我们仅在工作日进行主机和服务的监控。这里有一个默认配置定义为`workhours`，几乎适合我们的需求，除了它没有包括晚上时间。我们将从头开始创建一个新的，并且还会再创建一个用于覆盖周末的时间段。
- en: Getting ready
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a working Nagios Core 3.0 or better server running.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该有一个运行正常的 Nagios Core 3.0 或更高版本的服务器。
- en: How to do it...
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can set up our new time period, which we''ll call `weekdays`, as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下设置新的时间段，命名为`weekdays`：
- en: 'Change to our Nagios Core configuration objects directory, and edit the file
    called `timeperiods.cfg`:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到我们的 Nagios Core 配置对象目录，并编辑名为 `timeperiods.cfg` 的文件：
- en: '[PRE44]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the following definitions to the end of the file:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下定义添加到文件的末尾：
- en: '[PRE45]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Restart the Nagios Core server:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 Nagios Core 服务器：
- en: '[PRE46]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In our host and service definitions, there are two directives, `check_period`
    and `notification_period`. These directives are used to define the times during
    which a host or service should be checked, and the times when notifications about
    them should be sent. The `24x7` and `workhours` periods are defined in the `timeperiods.cfg`
    file that we just edited, and are used in several of the examples and templates.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主机和服务定义中，有两个指令，`check_period` 和 `notification_period`。这些指令用于定义主机或服务应检查的时间，以及应发送通知的时间。`24x7`
    和 `workhours` 时间段已在我们刚刚编辑的 `timeperiods.cfg` 文件中定义，并且在多个示例和模板中使用。
- en: We've just added two more of these time periods, which we can now use in our
    definitions for hosts and services. The first is called `weekdays`, and corresponds
    to any time during a weekday; the second is called `weekends`, and corresponds
    to any time that's not a weekday. Note that in both cases, we specified the dates
    and times by naming each individual day, and the times to which they corresponded.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚又添加了两个这样的时间段，现在可以在主机和服务的定义中使用它们。第一个称为`weekdays`，表示工作日的任何时间；第二个称为`weekends`，表示任何非工作日的时间。请注意，在这两种情况下，我们通过命名每一天并指定对应的时间，来定义了日期和时间。
- en: There's more...
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The definitions for dates are quite clever, and can be defined in a variety
    of ways. The following are all valid definitions for days and time periods:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 日期的定义非常巧妙，可以通过多种方式进行定义。以下都是有效的天数和时间段定义：
- en: '`june 1 - july 15 00:00-24:00`: Any time from June 1st to July 15th, inclusive'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`june 1 - july 15 00:00-24:00`：从 6 月 1 日到 7 月 15 日的任何时间（含这两天）'
- en: '`thursday -1 00:00-24:00`: Any time on the last Thursday of every month'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thursday -1 00:00-24:00`：每月的最后一个星期四的任何时间'
- en: '`day 1 - 10 13:00-21:00`: From 1 PM to 9 PM on any day from the 1st of any
    month to the 10th of any month, inclusive'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`day 1 - 10 13:00-21:00`：每月的 1 号至 10 号期间，从下午 1 点到晚上 9 点的时间段'
- en: It's likely that the standard `24x7` and `workhours` definitions will be fine
    for day-to-day monitoring, maybe with a `weekdays` and `weekends` definition added.
    However, there may well come a time when we need a specific host or service monitored
    on an unusual schedule, particularly if we're debugging a specific problem that
    only manifests around a certain time, or have a lot of contacts to manage, or
    a complex on-call roster.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，标准的 `24x7` 和 `workhours` 定义已经适合日常监控，也许可以添加一个 `weekdays` 和 `weekends` 的定义。然而，可能会有某个时候，我们需要对某个主机或服务进行不常规的监控，特别是如果我们正在调试一个仅在某个特定时间出现的问题，或者需要管理大量联系人，或者有一个复杂的轮值安排。
- en: Note that Nagios Core can behave in unusual ways, particularly with uptime reporting,
    if the time periods for our monitoring of hosts and services don't add up to 24
    hours. Ideally, we should check and notify all our hosts and services in at least
    some way around the clock, but dealing with the notifications in different ways
    depending on schedule; for example, we could page the systems administrators about
    a non-critical system during work hours, but just e-mail them when they're asleep!
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Nagios Core 在某些情况下可能表现异常，特别是在正常运行时间报告方面，如果我们对主机和服务的监控时间段总和不到 24 小时。理想情况下，我们应当全天候检查并通知所有主机和服务，但根据日程安排以不同的方式处理通知；例如，工作时间内可以通过分页通知系统管理员关于非关键系统的情况，但当他们睡觉时，只需通过电子邮件通知他们！
- en: See also
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Automating contact rotation*, *Configuring notification periods*, and *Configuring
    notification groups* recipes in [Chapter 4](ch04.html "Chapter 4. Configuring
    Notifications"), *Configuring Notifications*
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html "第4章 配置通知")中的*自动化联系轮换*、*配置通知时段*和*配置通知组*的教程，*配置通知*'
- en: Running a service on all hosts in a group
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在组内所有主机上运行服务
- en: In this recipe, we'll create a new service, but instead of applying it to an
    existing host, we'll apply it to an existing hostgroup. In this case, we'll create
    a group called `webservers`. The steps for this are very similar to adding a service
    for just one host; only one directive is different.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将创建一个新服务，但不是将其应用到现有的主机上，而是将其应用到现有的主机组上。在这种情况下，我们将创建一个名为 `webservers`
    的组。执行此操作的步骤与为单个主机添加服务非常相似；唯一不同的是有一条指令。
- en: Getting ready
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a working Nagios Core 3.0 or better server running, with a web
    interface. You should be familiar with adding services to individual hosts.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该运行一个工作中的 Nagios Core 3.0 或更高版本的服务器，并且具有 Web 界面。你应熟悉如何向单个主机添加服务。
- en: You should also have at least one hostgroup defined, with at least one host
    in it; we'll use a group called `webservers`, with the hosts `sparta.naginet`
    and `athens.naginet` defined in it.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应至少定义一个主机组，并且该组中至少有一个主机；我们将使用一个名为 `webservers` 的组，并在其中定义主机 `sparta.naginet`
    和 `athens.naginet`。
- en: 'For reference, here is the hostgroup definition and the definitions for the
    two hosts in it:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参考，以下是该主机组的定义及其包含的两个主机定义：
- en: '[PRE47]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How to do it...
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create the service definition for the webservers group as follows:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下为 `webservers` 组创建服务定义：
- en: 'Change to the directory containing the file in which the webservers hostgroup
    is defined, and edit it:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入包含定义 `webservers` 主机组的文件所在的目录，并进行编辑：
- en: '[PRE48]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add the following code snippet just after the hostgroup definition. Change
    the lines in bold to suit your own template and hostgroup names:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机组定义后添加以下代码片段。将粗体部分修改为适合你自己模板和主机组名称的内容：
- en: '[PRE49]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Restart the Nagios Core server:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 Nagios Core 服务器：
- en: '[PRE50]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: It's important to note that if we are already monitoring those hosts with a
    per-host service of the same name, then we will need to remove those definitions
    as well; Nagios Core may not start if a service of the same description is already
    defined on the same host.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特别注意的是，如果我们已经通过每个主机的同名服务在监控这些主机，那么我们也需要删除这些定义；如果同一主机上已经定义了相同描述的服务，Nagios Core
    可能无法启动。
- en: How it works...
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Adding a service to a hostgroup works in exactly the same way as adding it to
    an individual host, except that it only requires one definition, which is then
    individually applied to all the hosts in the group. This means it's a very good
    way to keep a Nagios Core configuration tidier. If we have a group of 50 different
    web servers in it and we need to monitor their HTTP services on the same basis
    for each one of them, then we don't need to create 50 service definitions; we
    can just create one for their hostgroup, which amounts to a smaller and more easily
    updated configuration.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 将服务添加到主机组的方式与添加到单个主机完全相同，不同之处在于，它只需要一个定义，然后应用于组内所有主机。这意味着它是保持Nagios Core配置整洁的一个非常好的方式。如果我们有一个包含50个不同Web服务器的主机组，并且我们需要基于相同的标准监控它们的HTTP服务，那么我们就不需要为每个服务器创建50个服务定义；我们只需为主机组创建一个服务定义，这样配置更简洁且更易于更新。
- en: There's more...
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Like the `host_name` directive for services, the `hostgroup_name` directive
    can actually have several hostgroups defined, separated by commas. This means
    that we can apply the same service to not just one group, but several. For services
    that we would want to run on several different groups (for example, basic PING
    monitoring) this can amount to a much more flexible configuration.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 与服务的`host_name`指令类似，`hostgroup_name`指令实际上可以定义多个主机组，这些主机组通过逗号分隔。这意味着我们可以将相同的服务应用于多个主机组，而不仅仅是一个。如果我们希望在多个不同的主机组上运行某个服务（例如，基本的PING监控），这将使得配置更加灵活。
- en: See also
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating a new service and Creating a new hostgroup* recipe in this chapter
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*创建新服务和创建新主机组*配方
- en: The *Using inheritance to simplify configuration* recipe in [Chapter 9](ch09.html
    "Chapter 9. Managing Configuration"), *Managing Configuration*
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html "第9章 管理配置")中的*使用继承简化配置*配方，*管理配置*'

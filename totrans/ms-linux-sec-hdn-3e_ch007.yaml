- en: 6 Encryption Technologies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6 种加密技术
- en: Join our book community on Discord
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入我们的书籍社区，加入 Discord
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/file36.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file36.png)'
- en: 'You may work for a super-secret government agency, or you may be just a regular
    Joe or Jane citizen. Either way, you still have sensitive data that you need to
    protect from prying eyes. Business secrets, government secrets, personal secrets—it
    doesn''t matter; it all needs protection. Locking down users home directories
    with restrictive permissions settings, as we saw in *Chapter 3*, *Securing Normal
    User Accounts*, is only part of the puzzle; we also need encryption. This encryption
    will provide three things for us:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是为某个超级机密的政府机构工作，还是普通的市民，你都有敏感数据需要保护免受窥探。商业机密、政府机密、个人机密——都需要保护。正如我们在*第3章*《保护普通用户账户》中所见，锁定用户的主目录并设置限制性权限只是解决方案的一部分；我们还需要加密。这种加密将为我们提供三大保护：
- en: '**Confidentiality**: This ensures that only people who are authorized to see
    the data can see it.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机密性**：确保只有授权的人才能查看数据。'
- en: '**Integrity**: This ensures that the original data hasn''t been altered by
    unauthorized people.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整性**：确保原始数据未被未经授权的人篡改。'
- en: '**Availability**: This ensures that sensitive data is always available, and
    can''t be deleted by unauthorized people.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：确保敏感数据始终可用，且无法被未经授权的人删除。'
- en: The two general types of data encryption that we'll look at in this chapter
    are meant to protect data at rest and data in transit. We'll begin with using
    file, partition, and directory encryption to protect data at rest. We'll wrap
    up with a look at using OpenSSL to protect data in transit.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论的两种数据加密类型旨在保护静态数据和传输中的数据。我们将首先使用文件、分区和目录加密来保护静态数据，最后探讨如何使用 OpenSSL 保护传输中的数据。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Encrypting directories with eCryptfs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 eCryptfs 加密目录
- en: Using VeraCrypt for the cross-platform sharing of encrypted containers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 VeraCrypt 进行跨平台加密容器共享
- en: OpenSSL and the Public Key Infrastructure
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSSL 和公钥基础设施
- en: Commercial certificate authorities
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商业证书授权机构
- en: Creating keys, certificate requests, and certificates
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建密钥、证书请求和证书
- en: Creating an on-premises certificate authority
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建本地证书授权机构
- en: Adding a certificate authority to an operating system
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将证书授权机构添加到操作系统
- en: OpenSSL and the Apache web server
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSSL 和 Apache Web 服务器
- en: Setting up mutual authentication
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置互认证
- en: If you’re ready to get cryptic, let’s get started.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你准备好进入加密世界，我们就开始吧。
- en: GNU Privacy Guard (GPG)
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GNU 隐私保护工具（GPG）
- en: We'll begin with **GNU Privacy Guard** (**GPG**). This is a free open source
    implementation of Phil Zimmermann's Pretty Good Privacy, which he created back
    in 1991\. You can use either one of them to either encrypt or cryptographically
    sign files or messages. In this section, we'll focus strictly on GPG.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从**GNU 隐私保护工具**（**GPG**）开始。这是 Phil Zimmermann 在1991年创建的 Pretty Good Privacy
    的免费开源实现。你可以使用它对文件或消息进行加密或数字签名。在本节中，我们将严格关注 GPG。
- en: 'There are some advantages of using GPG:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GPG 有一些优势：
- en: It uses strong, hard-to-crack encryption algorithms.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用强大且难以破解的加密算法。
- en: It uses the private/public key scheme, which eliminates the need to transfer
    a password to a message or file recipient in a secure manner. Instead, just send
    along your public key, which is useless to anyone other than the intended recipient.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用私钥/公钥方案，从而消除了需要以安全方式将密码传输给消息或文件接收人的需求。相反，你只需要发送公钥，除了预定的接收人外，其他人都无法使用它。
- en: You can use GPG to just encrypt your own files for your own use, the same as
    you'd use any other encryption utility.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用 GPG 来加密你自己的文件供自己使用，就像使用任何其他加密工具一样。
- en: It can be used to encrypt email messages, allowing you to have true end-to-end
    encryption for sensitive emails.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以用于加密电子邮件消息，允许你对敏感邮件进行真正的端到端加密。
- en: There are a few GUI-type frontends available to make it somewhat easier to use.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一些图形用户界面（GUI）前端可用，旨在让使用更加简便。
- en: 'But, as you might know, there are also some disadvantages:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但正如你所知道的，也有一些缺点：
- en: Using public keys instead of passwords is great when you work directly only
    with people who you implicitly trust. But for anything beyond that, such as distributing
    a public key to the general population so that everyone can verify your signed
    messages, you're dependent upon a web-of-trust model that can be very hard to
    set up.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你只与信任的人直接合作时，使用公钥而不是密码是非常好的。但对于更广泛的情况，例如将公钥分发给大众，以便每个人都能验证你的签名消息，你将依赖于一个非常难以建立的信任网络模型。
- en: For the end-to-end encryption of email, the recipients of your email must also
    have GPG set up on their systems and know how to use it. That might work in a
    corporate environment, but lots of luck getting your friends to set that up. (I've
    never once succeeded in getting someone else to set up email encryption.)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于电子邮件的端到端加密，收件人也必须在他们的系统上配置 GPG，并且知道如何使用它。这在企业环境中可能可行，但要让你的朋友设置这个，祝你好运。（我从未成功让其他人设置过邮件加密。）
- en: If you use a standalone email client, such as Mozilla Thunderbird, you can install
    a plugin that will encrypt and decrypt messages automatically. But every time
    a new Thunderbird update is released, the plugin breaks, and it always takes a
    while before a new working version gets released.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用独立的电子邮件客户端，比如 Mozilla Thunderbird，你可以安装一个插件来自动加密和解密邮件。但每当 Thunderbird 发布新版本更新时，插件就会失效，而且总需要一段时间才能发布一个新的工作版本。
- en: Even if you could get other people to set up their email clients with GPG, it’s
    still not the perfect privacy solution. That’s because the email **metadata**--the
    email addresses of the sender and the recipient--can’t be encrypted. So, hackers,
    advertisers, or government agencies can still see who you’re exchanging email
    messages with, and use that information to build a profile that tells them a lot
    about your activities, your beliefs, and what kind of a person you are. If you
    really need complete privacy, your best bet is to go with a private messenger
    solution, such as the **Session** messenger. (That however, is beyond the scope
    of this book.)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使你能让其他人也设置他们的邮件客户端使用 GPG，这仍然不是一个完美的隐私解决方案。因为电子邮件的**元数据**——发件人和收件人的电子邮件地址——是无法加密的。因此，黑客、广告商或政府机构仍然能够看到你和谁交换邮件，并利用这些信息建立一个关于你活动、信仰和个性的个人档案。如果你真的需要完全的隐私，最好的选择是使用一个私密的消息解决方案，比如**Session**消息应用。（不过，这超出了本书的范围。）
- en: Even with its numerous weaknesses, GPG is still one of the best ways to share
    encrypted files and emails. GPG comes preinstalled on most Linux distros. So,
    you can use any of your *newer* virtual machines for these demos. (I say *newer*,
    because the procedure will differ slightly on older distros, such as CentOS 7.)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 即使存在许多弱点，GPG 仍然是分享加密文件和邮件的最佳方式之一。大多数 Linux 发行版都会预装 GPG。因此，你可以在任何 *更新* 的虚拟机上进行这些演示。（我说
    *更新*，是因为在旧版发行版上，如 CentOS 7，程序会略有不同。）
- en: Hands-on lab – creating your GPG keys
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实践实验室 – 创建你的 GPG 密钥
- en: 'On a text-mode AlmaLinux machine, the first thing you need to do is to install
    the `pinentry` package. Do that with:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本模式下的 AlmaLinux 机器上，首先需要做的就是安装 `pinentry` 包。可以通过以下命令来安装：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (Note that you won’t have to do this with either a GUI-mode AlmaLinux machine
    or with Ubuntu Server.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意，在图形界面的 AlmaLinux 机器或 Ubuntu 服务器上，你无需执行此操作。）
- en: 'Next, create your pair of GPG keys:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建你的 GPG 密钥对：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that since you're setting this up for yourself, you don't need `sudo` privileges.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于你是在为自己配置，因此不需要 `sudo` 权限。
- en: 'The first thing that this command does is to create a populated `.gnupg` directory
    in your home directory:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令首先会在你的主目录中创建一个已填充的 `.gnupg` 目录：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You''ll then be asked to select which kinds of keys you want. We''ll just go
    with the default `RSA and RSA`. RSA keys are stronger and harder to crack than
    the older DSA keys. Elgamal keys are good, but they may not be supported by older
    versions of GPG:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你会被要求选择你想要的密钥类型。我们将使用默认的 `RSA 和 RSA`。与较老的 DSA 密钥相比，RSA 密钥更强大且更难破解。Elgamal
    密钥也不错，但旧版本的 GPG 可能不支持它：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For decent encryption, you'll want to go with a key of at least 3,072 bits,
    because anything smaller is now considered vulnerable. (This is according to the
    newest guidance from the U.S. National Institute of Standards and Technology,
    or NIST.) That’s now the default on our newest Linux distros, so you’re already
    good there. On older distros, such as CentOS 7, the default is only 2048 bits,
    so you’ll need to change it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于适当的加密，你需要选择至少3,072位的密钥，因为任何更小的密钥现在都被认为是脆弱的。（这是根据美国国家标准与技术研究院（NIST）的最新指导）。这已经是我们最新Linux发行版的默认设置，所以你在那里已经没问题了。对于较旧的发行版，如CentOS
    7，默认设置只有2048位，所以你需要更改它。
- en: 'Next, select how long you want the keys to remain valid before they automatically
    expire. For our purposes, we''ll go with the default `key does not expire`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择你希望密钥在自动过期之前保持有效的时间。对于我们的目的，我们将选择默认的`密钥永不过期`：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Provide your personal information:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 提供你的个人信息：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'On older Linux distros, this could take a while, even when you''re doing all
    of the recommended things to create entropy. On newer Linux distros, the random
    number generator works more efficiently, so you can disregard the notice about
    how the key generation could take a long time. Here’s what you’ll see when the
    process has finished:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在较旧的Linux发行版上，这可能需要一段时间，即使你做了所有推荐的生成熵的操作。对于较新的Linux发行版，随机数生成器的工作效率更高，所以你可以忽略关于密钥生成可能需要很长时间的提示。下面是当过程完成后你会看到的内容：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Verify that the keys did get created:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证密钥是否已成功创建：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'While you''re at it, take a look at the files that you created:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 顺便查看一下你创建的文件：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: These files are your public and private keyrings, a revocation database, and
    a trusted users database.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件是你的公钥和私钥环、撤销数据库和受信任用户数据库。
- en: Hands-on lab – symmetrically encrypting your own files
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实践实验 – 对称加密自己的文件
- en: 'You may find GPG useful for encrypting your own files, even when you never
    plan to share them with anyone else. For this, you''ll use symmetric encryption,
    which involves using your own private key for encryption. Before you try this,
    you''ll need to generate your keys, as I outlined in the previous section:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你不打算与其他人共享文件，你可能仍然会发现GPG对于加密自己的文件很有用。为此，你将使用对称加密，即使用你自己的私钥进行加密。在尝试这个之前，你需要按照前一部分的说明生成密钥：
- en: Symmetric key encryption is, well, just that, symmetric. It's symmetric in the
    sense that the key that you would use to encrypt a file is the same key that you
    would use to decrypt the file. That's great for if you're just encrypting files
    for your own use. But if you need to share an encrypted file with someone else,
    you'll need to figure out a secure way to give that person the password. I mean,
    it's not like you'd want to just send the password in a plain-text email.
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对称密钥加密，顾名思义，就是对称的。它的对称性体现在你用来加密文件的密钥与用来解密文件的密钥是相同的。这对于仅加密自己使用的文件来说很方便。但如果你需要与其他人共享加密文件，你就需要找出一种安全的方式将密码交给那个人。我的意思是，你肯定不想通过明文电子邮件发送密码。
- en: 'In addition to your own user account, you''ll also need a user account for
    Maggie. On AlmaLinux, create her account like this:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了你的个人用户账户外，你还需要为Maggie创建一个用户账户。在AlmaLinux中，可以按照以下方式创建她的账户：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For Ubuntu, create Maggie’s account like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ubuntu，可以按照以下方式创建Maggie的账户：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s encrypt a super-secret file that we just can''t allow to fall into the
    wrong hands:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加密一个超级机密的文件，我们绝对不能让它落入错误的人手中：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that the `-c` option indicates that I chose to use symmetric encryption
    with a passphrase for the file. The passphrase that you enter will be for the
    file, not for your private key.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`-c`选项表示我选择使用带密码的对称加密来加密该文件。你输入的密码是用于该文件的，而不是你的私钥。
- en: 'Look at your new set of files. One slight flaw with this is that GPG makes
    an encrypted copy of the file, but it also leaves the original, unencrypted file
    intact:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看看你新的文件集。这个方法有一个小缺陷，那就是GPG会创建文件的加密副本，但它也会保留原始的未加密文件：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s get rid of that unencrypted file with `shred`. We''ll use the `-u` option
    to delete the file, and the `-z` option to overwrite the deleted file with zeros:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`shred`命令删除那个未加密的文件。我们将使用`-u`选项删除文件，`-z`选项则用于用零覆盖已删除的文件：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It doesn't look like anything happened, because `shred` doesn't give you any
    output. But `ls -l` will prove that the file is gone.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来好像没有任何变化，因为`shred`不会给出任何输出。但`ls -l`命令会证明文件已经不存在了。
- en: 'Now, if I were to look at the encrypted file with `less secret_squirrel_stuff.txt.gpg`,
    I would be able to see its contents after being asked to enter my private key
    passphrase. Try this for yourself:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我用`less secret_squirrel_stuff.txt.gpg`查看加密文件，我会在输入我的私钥密码后看到文件内容。试试看：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As long as my private key remains loaded into my keyring, I''ll be able to
    view my encrypted file again without having to reenter the passphrase. Now, just
    to prove to you that the file really is encrypted, I''ll create a shared directory,
    and move the file there for others to access. Again, go ahead and give it a try:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只要我的私钥仍然保存在我的密钥环中，我就可以再次查看加密文件，而不需要重新输入密码。现在，为了向你证明文件确实被加密了，我会创建一个共享目录，并将文件移动到那里供其他人访问。再试试看吧：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When I go into that directory to view the file with `less`, I can still see
    its contents without having to reenter my passphrase.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我进入那个目录并使用`less`查看文件时，我仍然可以看到文件内容，而不需要重新输入我的密码。
- en: 'But now, let''s see what happens when Maggie tries to view the file. Use `su
    - maggie` to switch to her account, and have her try:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是现在，让我们看看Maggie尝试查看文件时会发生什么。使用`su - maggie`切换到她的账户，并让她尝试：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And when she hits the *Y* key to see it anyway, she gets this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当她按下*Y*键想查看时，她看到的是：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Poor Maggie really wants to see my file, but all she can see is encrypted gibberish.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可怜的Maggie真的很想看到我的文件，但她只能看到加密的乱码。
- en: What I've just demonstrated is another advantage of GPG. After entering your
    private key passphrase once, you can view any of your encrypted files without
    having to manually decrypt them, and without having to reenter your passphrase.
    With other symmetric file encryption tools, such as `bcrypt`, you wouldn't be
    able to view your files without manually decrypting them first.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚才演示的是GPG的另一个优点。在输入私钥密码一次后，你可以查看任何加密文件，而无需手动解密，也不需要重新输入密码。使用其他对称加密文件工具，如`bcrypt`，则必须手动解密文件才能查看。
- en: 'But let''s now say that you no longer need to have this file encrypted, and
    you want to decrypt it in order to let other people see it. Exit Maggie''s account
    by typing `exit`. Then, just use `gpg` with the `-d` option:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是现在假设你不再需要加密这个文件，想要解密它以便让其他人查看。通过输入`exit`退出Maggie的账户。然后，只需使用`gpg`并加上`-d`选项：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This works differently from how it worked on older Linux distros. On our newer
    distros, we now have to use the `-o` option along with the filename of the decrypted
    file that we want to create. Also, note that the `-o` option has to come before
    the `-d` option, or else you’ll get an error message.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这与旧版Linux发行版的工作方式不同。在我们的新发行版中，我们现在必须使用`-o`选项，并指定要创建的解密文件的文件名。同时，注意`-o`选项必须放在`-d`选项之前，否则会收到错误信息。
- en: Hands-on lab – encrypting files with public keys
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动手实验 – 使用公钥加密文件
- en: 'In this lab, you''ll learn about how to encrypt and share a file with GPG public
    key encryption:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，你将学习如何使用GPG公钥加密来加密和共享文件：
- en: To begin, create a user account for Frank, as you did for Maggie in the previous
    lab.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，像在前一个实验中为Maggie创建用户账户一样，为Frank创建一个用户账户。
- en: 'Create a key set for both yourself and for Frank, as I''ve already shown you.
    Next, extract your own public keys into an `ASCII` text file:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为自己和Frank创建密钥对，正如我之前展示的那样。接下来，将你自己的公钥提取到一个`ASCII`文本文件中：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Log in as Frank, and repeat this command for him.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以Frank身份登录，并为他重复此命令。
- en: 'Normally, the participants in this would send their keys to each other either
    through an email attachment or by placing the keys in a shared directory. In this
    case, you and Frank will receive each other''s public key files and place them
    into your respective `.gnupg` directories. Once that''s done, import each other''s
    keys:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，参与者会通过电子邮件附件或将密钥放入共享目录的方式互相发送密钥。在这种情况下，你和Frank将会收到彼此的公钥文件，并将其放入各自的`.gnupg`目录中。完成后，导入彼此的密钥：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now for the good stuff. Create a super-secret message for Frank, asymmetrically
    encrypt it (`-e`), and sign it (`-s`). Signing the message is the verification
    that the message really is from you, rather than from an impostor:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是关键部分。为Frank创建一个超级机密的消息，进行非对称加密(`-e`)，并签名(`-s`)。签名消息是验证该消息确实来自你，而不是冒充者：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'So, the first thing you have to do is to enter the passphrase for your private
    key. Where it says to enter the user ID, enter `frank`, since he''s the intended
    recipient of your message. But look at the line after that, where it says `There
    is no assurance this key belongs to the named user`. That''s because you still
    haven''t trusted Frank''s public key. We''ll get to that in a bit. The last line
    of the output again says to enter a user ID so that we can designate multiple
    recipients. But Frank is the only one you care about right now, so just hit the
    *Enter* key to break out of the routine. This results in a `.gpg` version of your
    message to Frank:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你需要做的第一件事是输入你的私钥密码。在要求输入用户 ID 的地方，输入 `frank`，因为他是你的消息的预定接收者。但是看看下面那行，写着`没有任何保证表明此密钥属于指定用户`。那是因为你还没有信任
    Frank 的公钥。稍后我们会解决这个问题。输出的最后一行再次要求输入用户 ID，以便我们可以指定多个接收者。但此时你只关心 Frank，所以直接按*Enter*键跳出常规操作。这将导致生成一个
    `.gpg` 版本的消息，发送给 Frank：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The final step on your end is to send Frank his encrypted message file by whatever
    means available.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你最后的步骤是通过任何可用的方式将加密后的消息文件发送给 Frank。
- en: 'When Frank receives his message, he''ll use the `-d` option to view it:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Frank 收到他的消息后，他将使用`-d`选项来查看它：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Frank enters the passphrase for his private key, and he sees the message. At
    the bottom, he sees the warning about how your public key isn''t trusted, and
    that `There is no indication that the signature belongs to the owner`. Let''s
    say that you and Frank know each other personally, and he knows for a fact that
    the public key really is yours. He then adds your public key to the trusted list:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Frank 输入他的私钥密码后，就能看到消息。在底部，他看到有关你的公钥不受信任的警告，并且`没有迹象表明签名属于所有者`。假设你和 Frank 彼此认识，他知道公钥确实是你的。那么他将你的公钥添加到受信任列表中：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The last line of this output is the command prompt for the `gpg` shell. Frank
    is concerned with trust, so he''ll enter the `trust` command:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出的最后一行是 `gpg` shell 的命令提示符。Frank 关心的是信任问题，因此他会输入 `trust` 命令：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Frank has known you for quite a while, and he knows for a fact that you''re
    the one who sent the key. So, he chooses option `5` for ultimate trust. Once Frank
    logs out and logs back in, that trust will take effect:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Frank 已经认识你很久了，他确实知道是你发送了密钥。因此，他选择了选项 `5` 来获得完全的信任。一旦 Frank 登出并重新登录，这个信任将生效：
- en: '[PRE27]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: With no more warning messages, this looks much better. At your end, do the same
    thing with Frank's public key.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有更多警告信息时，情况看起来好多了。在你这边，也对 Frank 的公钥执行相同的操作。
- en: 'As you can see in the screen output in *step 8*, you can assign the marginal,
    full, or ultimate trust level to someone else''s public key. Space doesn''t permit
    me to provide a full explanation of the trust levels, but you can read a rather
    colorful explanation here: PGP Web of Trust: Core Concepts Behind Trusted Communication
    — [https://www.linux.com/tutorials/pgp-web-trust-core-concepts-behind-trusted-communication/.](https://www.linux.com/tutorials/pgp-web-trust-core-concepts-behind-trusted-communication/.)'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '正如你在*第 8 步*的屏幕输出中看到的，你可以将边际、完全或最终信任级别分配给他人的公钥。由于篇幅所限，我不能提供完整的信任级别解释，但你可以在这里阅读一个生动的解释：[PGP
    Web of Trust: Core Concepts Behind Trusted Communication — https://www.linux.com/tutorials/pgp-web-trust-core-concepts-behind-trusted-communication/.](https://www.linux.com/tutorials/pgp-web-trust-core-concepts-behind-trusted-communication/.)'
- en: What's so very cool about this is that even though the whole world may have
    your public key, it's useless to anyone who isn't a designated recipient of your
    message.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常酷，因为即使全世界可能都拥有你的公钥，除了你的指定接收者，其他人无法利用它。
- en: Now, let's look at how to sign a file *without* encrypting it.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在*不*加密的情况下签署一个文件。
- en: Hands-on lab – signing a file without encryption
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实践实验 – 在不加密的情况下签署文件
- en: 'If a file isn''t secret but you still need to ensure authenticity and integrity,
    you can just sign it without encrypting it:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个文件不是秘密的，但你仍然需要确保其真实性和完整性，你可以仅仅签名而不加密它：
- en: 'Create an unencrypted message for Frank and then sign it:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 Frank 创建一个未加密的消息并签名：
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Just as before, this creates a `.gpg` version of the file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 和以前一样，这会创建一个 `.gpg` 版本的文件。
- en: Send the message to Frank.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将消息发送给 Frank。
- en: 'Log in as Frank. Have him try to open it with `less`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录为 Frank。让他尝试使用`less`打开它：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: On older Linux distros, you’ll see a lot of gibberish because of the signature,
    but you’ll also see the plain-text message. On newer Linux distros, you’ll only
    see the plain-text message, without the gibberish.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧版Linux发行版中，由于签名的原因，你会看到很多乱码，但你也会看到明文消息。在新版Linux发行版中，你只会看到明文消息，而不会有乱码。
- en: 'Have Frank use `gpg` with the `--verify` option to verify that the signature
    really does belong to you:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让Frank使用`gpg`并加上`--verify`选项来验证签名是否真的是属于你的：
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This wraps it up for our discussion of encrypting individual files. Let's now
    take a look at encrypting block devices and directories.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 关于加密单个文件的讨论就到这里。接下来，我们来看一下如何加密块设备和目录。
- en: Encrypting partitions with Linux Unified Key Setup (LUKS)
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Linux统一密钥设置（LUKS）加密分区
- en: 'Being able to encrypt individual files can be handy, especially if you want
    to share sensitive files with other users. But, other types of encryption are
    also available:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 能够加密单个文件非常方便，特别是当你想与其他用户共享敏感文件时。但也有其他类型的加密可供选择：
- en: '**Block encryption**: We can use this for either whole-disk encryption or to
    encrypt individual partitions.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**块加密**：我们可以将其用于全盘加密，或者加密单个分区。'
- en: '**File-level encryption**: We''d use this to encrypt individual directories
    without having to encrypt the underlying partitions.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件级加密**：我们可以使用这种方式来加密单独的目录，而无需加密底层的分区。'
- en: '**Containerized Encryption**: Using third-party software that doesn''t come
    with any Linux distribution, we can create encrypted, cross-platform containers
    that can be opened on either Linux, macOS, or Windows machines.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器化加密**：使用第三方软件（这些软件不随任何Linux发行版一起提供），我们可以创建加密的跨平台容器，这些容器可以在Linux、macOS或Windows机器上打开。'
- en: '**Linux Unified Key Setup** (**LUKS**) falls into the first category. It''s
    built into pretty much every Linux distribution, and directions for use are the
    same for each. LUKS is now the default encryption mechanism for pretty much all
    of the newest Linux distros.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux统一密钥设置**（**LUKS**）属于第一类。几乎所有Linux发行版都内建了它，而且每个发行版的使用说明都是相同的。LUKS现在是几乎所有最新Linux发行版的默认加密机制。'
- en: You might be wondering if there's any performance impact with all of this disk
    encryption business. Well, with today's fast CPUs, not really. I run Fedora with
    full-disk encryption on a low-spec, Core i5 laptop, and other than having to enter
    the disk-encryption password when I first boot up, I don't even notice that encryption
    is taking place.
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可能会想，进行这些磁盘加密操作会不会对性能产生影响。事实上，随着今天快速的CPU，这几乎不会有影响。我在一台低配置的Core i5笔记本上运行带全盘加密的Fedora，除了在首次启动时需要输入磁盘加密密码外，我几乎没有注意到加密在进行。
- en: Okay, let's look at encrypting a disk while installing the operating system.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们来看一下在安装操作系统时如何加密磁盘。
- en: Disk encryption during operating system installation
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作系统安装过程中的磁盘加密
- en: 'When you install most any Linux-based operating system, you have the option
    of encrypting the drive during the installation. Just click the **Encryption**
    option on the drive setup screen:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当你安装大多数基于Linux的操作系统时，你可以选择在安装过程中加密磁盘。只需在磁盘设置界面点击**加密**选项：
- en: '![19501_06_01.png](img/file37.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![19501_06_01.png](img/file37.png)'
- en: 19501_06_01.png
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 19501_06_01.png
- en: Other than that, I just let the installer create the default partitioning scheme.
    On this AlmaLinux 9 machine, that means that the `/` filesystem and the `swap`
    partition will both be encrypted logical volumes. (I'll cover that in a moment.)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我让安装程序创建默认的分区方案。在这台AlmaLinux 9机器上，这意味着`/`文件系统和`swap`分区都会是加密的逻辑卷。（我稍后会详细说明。）
- en: 'Before the installation can continue, I have to create a passphrase to mount
    the encrypted disk:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装继续之前，我需要创建一个密码短语来挂载加密磁盘：
- en: '![19501_06_02.png](img/file38.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![19501_06_02.png](img/file38.png)'
- en: 19501_06_02.png
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 19501_06_02.png
- en: 'Now, whenever I reboot the system, I need to enter this passphrase:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次重启系统时，我都需要输入这个密码短语：
- en: '![19501_06_03.png](img/file39.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![19501_06_03.png](img/file39.png)'
- en: 19501_06_03.png
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 19501_06_03.png
- en: 'Rather than actually encrypting a normal disk partition, the installer will
    set up encrypted **logical volumes**. Once the machine is up and running, I can
    look at the list of logical volumes. Here, I see both the `/` logical volume and
    the `swap` logical volume:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序不会真正加密普通的磁盘分区，而是会设置加密的**逻辑卷**。一旦机器启动并运行，我可以查看逻辑卷的列表。在这里，我可以看到`/`逻辑卷和`swap`逻辑卷：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, let’s look at the list of **physical volumes**. Actually, there''s only
    one physical volume in the list, and it''s listed as a `luks` physical volume:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 **物理卷** 的列表。实际上，列表中只有一个物理卷，它被列为 `luks` 物理卷：
- en: '[PRE32]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the `/etc/` directory, you’ll find the `crypttab` file, which contains an
    entry for this physical volume.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/etc/` 目录下，你会找到 `crypttab` 文件，其中包含这个物理卷的条目。
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This shows that the underlying physical volume is encrypted, which means that
    both the `/` and the `swap` logical volumes are also encrypted. That's a good
    thing because leaving the swap space unencrypted—a common mistake when setting
    up disk encryption manually—can lead to data leakage. (We’ll talk more about this
    `crypttab` file in just a bit.)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明底层的物理卷已被加密，这意味着 `/` 和 `swap` 逻辑卷也都被加密了。这是好事，因为如果交换空间没有加密—这是手动设置磁盘加密时常见的错误—可能会导致数据泄漏。（稍后我们会详细讨论这个
    `crypttab` 文件。）
- en: Hands-on lab – adding an encrypted partition with LUKS
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实操实验——使用 LUKS 添加加密分区
- en: 'There may be times when you''ll need to either add another encrypted drive
    to an existing machine or encrypt a portable device, such as a USB memory stick.
    This procedure works for both scenarios. Also, the procedure is the same for all
    of the Linux distros that we’re using, so it doesn’t matter which virtual machine
    you use. Follow these steps to add an encrypted partition:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能需要将另一个加密驱动器添加到现有机器，或者加密一个便携设备，如 USB 闪存。这一过程适用于这两种场景。而且，这个过程对我们使用的所有 Linux
    发行版都相同，所以你使用哪台虚拟机都没关系。请按照以下步骤添加加密分区：
- en: 'Bump the size up to 20 GB:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将大小调整到 20 GB：
- en: '![19501_06_05.png](img/file40.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![19501_06_05.png](img/file40.png)'
- en: 19501_06_05.png
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 19501_06_05.png
- en: 'After rebooting the machine, you''ll now have a `/dev/sdb` drive to play with.
    We can see that here:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启机器后，你现在会有一个 `/dev/sdb` 驱动器可以使用。我们可以在这里看到：
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Open the drive in `gdisk`. Use the entire drive for the partition, and leave
    the partition type set at the default type `8300`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `gdisk` 中打开该驱动器。使用整个驱动器来创建分区，并将分区类型保持为默认类型 `8300`：
- en: '[PRE35]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'View the details about your new `/dev/sdb1` partition:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看你新 ` /dev/sdb1` 分区的详细信息：
- en: '[PRE36]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, use `cryptsetup` to convert the partition to LUKS format. In this command,
    the `-v` signifies verbose mode, and the `-y` signifies that you''ll have to enter
    your passphrase twice in order to properly verify it. Note that when it says to
    type `yes` all in uppercase, it really does mean to type it in uppercase:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用 `cryptsetup` 将分区转换为 LUKS 格式。在这个命令中，`-v` 表示详细模式，`-y` 表示你需要输入密码两次来确保密码正确。请注意，当它提示输入
    `yes` 时，确实需要全大写输入：
- en: '[PRE37]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Look at the information about your new encrypted partition:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看关于你新加密分区的信息：
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: There's a lot more to the output than I can show here, but you get the idea.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的信息比我这里展示的要多很多，但你大概明白了意思。
- en: 'Map the partition to a device name. You can name the device pretty much whatever
    you want. For now, just name this one `secrets`. I know, it''s a corny name. In
    real life, you won''t want to make it so obvious where you''re storing your secrets:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将分区映射到一个设备名。你可以给设备命名任何你想要的名称。现在就把它命名为 `secrets`。我知道，这个名字有点俗气。实际上，你不希望让人那么容易知道你在哪里存储你的秘密：
- en: '[PRE39]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Look in the `/dev/mapper/` directory. You''ll see your new `secrets` device
    listed as a symbolic link to some sort of `dm` device. (In this case, it’s `dm-1`.):'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看 `/dev/mapper/` 目录。你会看到你的新 `secrets` 设备列出为指向某种 `dm` 设备的符号链接。（在这个例子中，它是 `dm-1`。）：
- en: '[PRE40]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Use `dmsetup` to look at the information about your new device:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `dmsetup` 查看关于你新设备的信息：
- en: '[PRE41]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Format the partition in the usual manner. You can use any filesystem that''s
    supported by your Linux distro. On a production server, that will generally mean
    either XFS or EXT4\. Just for fun, let’s go with XFS:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照通常的方式格式化分区。你可以使用任何被你的 Linux 发行版支持的文件系统。在生产服务器上，这通常意味着使用 XFS 或 EXT4。为了好玩，我们就用
    XFS：
- en: '[PRE42]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a mount point and mount the encrypted partition:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个挂载点并挂载加密分区：
- en: '[PRE43]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Use the `mount` command to verify that the partition is mounted properly:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `mount` 命令验证分区是否正确挂载：
- en: '[PRE44]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Configuring the LUKS partition to mount automatically
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 LUKS 分区以自动挂载
- en: 'The only missing piece of the puzzle is to configure the system to automatically
    mount the LUKS partition upon boot-up. To do that, configure two different files:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一缺失的部分是配置系统在启动时自动挂载 LUKS 分区。为此，配置两个不同的文件：
- en: '**/etc/crypttab**'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/etc/crypttab**'
- en: '**/etc/fstab**'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/etc/fstab**'
- en: 'If you encrypted the `sda` drive while installing the operating system, you''ll
    already have a `crypttab` file that contains information about that drive. It
    would look something like this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在安装操作系统时加密了 `sda` 驱动器，你应该已经有一个包含该驱动器信息的 `crypttab` 文件。它看起来应该像这样：
- en: '[PRE45]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The first two fields describe the name and location of the encrypted partition.
    The third field is for the encryption passphrase. If it's set to `none`, as it
    is here, then the passphrase will have to be manually entered upon boot-up.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个字段描述了加密分区的名称和位置。第三个字段用于加密密码短语。如果它设置为 `none`，如本例所示，那么在启动时将需要手动输入密码。
- en: 'In the `fstab` file, we have the entry that actually mounts the partition:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `fstab` 文件中，我们有一个实际挂载该分区的条目：
- en: '[PRE46]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Well, there are actually two entries in this case, because we have two logical
    volumes, `/` and `swap`, on top of the encrypted physical volume. The `UUID` line
    is the `/boot/` partition, which is the only part of the drive that isn't encrypted.
    Now, let's add our new encrypted partition so that it will mount automatically,
    as well.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在这种情况下有两个条目，因为我们有两个逻辑卷，`/` 和 `swap`，它们位于加密的物理卷上。`UUID` 行是 `/boot/` 分区，这是驱动器中唯一未加密的部分。现在，让我们添加新的加密分区，以便它也能自动挂载。
- en: Hands-on lab – configuring the LUKS partition to mount automatically
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动手实验 - 配置 LUKS 分区以自动挂载
- en: 'In this lab, you''ll set up the encrypted partition that you created in the
    previous lab to automatically mount when you reboot the machine:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本实验中，你将设置在上一个实验中创建的加密分区，使其在重启计算机时自动挂载：
- en: 'Tip:'
  id: totrans-190
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提示：
- en: ''
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is where it would be extremely helpful to remotely log in to your virtual
    machine from your desktop host machine. By using a GUI-type terminal, be it Terminal
    from a Linux or macOS machine or Cygwin from a Windows machine, you'll have the
    ability to perform copy-and-paste operations, which you won't have if you work
    directly from the virtual machine terminal. (Trust me, you don't want to be typing
    in those long UUIDs.)
  id: totrans-192
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这里，通过从你的桌面主机远程登录到虚拟机将非常有帮助。通过使用图形界面的终端，无论是 Linux 或 macOS 机器的 Terminal 还是 Windows
    机器上的 Cygwin，你将能够执行复制和粘贴操作，而直接在虚拟机终端中操作时是无法做到的。（相信我，你不想手动输入那些长长的 UUID。）
- en: 'The first step is to obtain the UUID of the encrypted partition:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是获取加密分区的 UUID：
- en: '[PRE47]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Copy that UUID and paste it into the `/etc/crypttab` file. (If a `cryptab`
    file isn’t already there, just create a new one.) Also, note that you''ll paste
    the UUID in twice. The first time, you''ll prepend it with `luks-`, and the second
    time you''ll append it with `UUID=`:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制该 UUID 并粘贴到 `/etc/crypttab` 文件中。（如果没有 `crypttab` 文件，只需创建一个新文件。）另外，请注意，你需要粘贴两次
    UUID。第一次在前面加上 `luks-`，第二次在后面加上 `UUID=`：
- en: '[PRE48]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Edit the `/etc/fstab` file, adding the last line in the file for your new encrypted
    partition. Note that you again have to use `luks-`, followed by the UUID number:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `/etc/fstab` 文件，在文件的最后一行添加你的新加密分区。请注意，你需要再次使用 `luks-`，后面跟上 UUID 编号：
- en: '[PRE49]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: When editing the `fstab` file for adding normal, unencrypted partitions, I always
    like to do `sudo mount -a` to check the `fstab` file for typos. That won't work
    with LUKS partitions though, because `mount` won't recognize the partition until
    the system reads in the `crypttab` file, and that won't happen until I reboot
    the machine. So, just be extra careful with editing `fstab` when adding LUKS partitions.
  id: totrans-199
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在编辑 `fstab` 文件以添加普通的未加密分区时，我总是喜欢使用 `sudo mount -a` 来检查 `fstab` 文件是否有拼写错误。不过，这对于
    LUKS 分区不起作用，因为 `mount` 在系统读取 `crypttab` 文件之前无法识别该分区，直到重启计算机后才会读取该文件。所以，在添加 LUKS
    分区时，编辑 `fstab` 文件时要格外小心。
- en: 'Now for the moment of truth. Reboot the machine to see if everything works.
    Use the `mount` command to verify that your endeavors have been successful:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在到了关键时刻。重启计算机，检查一切是否正常工作。使用 `mount` 命令来验证你的努力是否成功：
- en: '[PRE50]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: End of lab.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验结束。
- en: 'Tip:'
  id: totrans-203
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提示：
- en: ''
  id: totrans-204
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Although it''s possible to include passwords or keys in the `/etc/crypttab`
    file, my own preference is to not do so. If you must do so, be sure that the passwords
    or keys are stored on an encrypted `/` partition, for which you''ll always have
    to enter a password upon boot-up. You can read more about that here: Store the
    passphrase of encrypted disk in `/etc/crypttab` encrypted: [https://askubuntu.com/questions/181518/store-the-passphrase-of-encrypted-disk-in-etc-crypttab-encrypted](https://askubuntu.com/questions/181518/store-the-passphrase-of-encrypted-disk-in-etc-crypttab-encrypted)'
  id: totrans-205
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that we've seen LUKS, let's move on to eCryptfs.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting directories with eCryptfs
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Encrypting entire partitions is cool, but you might, at times, just need to
    use file-level encryption to encrypt an individual directory. For that, we can
    use eCryptfs. We'll need to use our Ubuntu machines for this, because Red Hat
    and its offspring no longer include eCryptfs. (It was in Red Hat 6 and CentOS
    6, but it's no longer even available for installation in any newer versions.)
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Tip:'
  id: totrans-209
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It’s possible to use eCryptfs on a LUKS-encrypted disk. But, it’s not at all
    necessary, and I really don’t recommend it.
  id: totrans-211
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hands-on lab – encrypting a home directory for a new user account
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In *Chapter* 3, Securing Normal User Accounts, I showed you how Ubuntu allows
    you to encrypt a user''s home directory as you create his or her user account.
    To review, let''s see the command for creating Goldie''s account:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'If it hasn''t already been done, install the `ecryptfs-utils` package:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'On an Ubuntu VM, create Goldie''s account with an encrypted directory:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Have Goldie log in. Have her unwrap her mount passphrase, write it down, and
    store it in a secure place. She''ll need it if she ever needs to recover a corrupted
    directory:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: When you use `adduser --encrypt-home`, home directories for new users will automatically
    be set to a restrictive permissions value that will keep everyone out except for
    the owner of the directory. This happens even on Ubuntu 20.04 when you leave the
    `adduser.conf` file set with its default settings.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Creating a private directory within an existing home directory
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's say that you have users on your Ubuntu servers who, for whatever strange
    reason, don't want to encrypt their entire home directories, and want to keep
    the `755` permissions settings on their home directories so that other people
    can access their files. But they also want a private directory that nobody but
    them can access.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of encrypting an entire home directory, any user can create an encrypted
    private directory within his or her own home directory. Let''s check it out:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'If it hasn''t already been done, install the `ecryptfs-utils` package:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: To create this private directory, use the interactive `ecryptfs-setup-private`
    utility. If you have admin privileges, you can do this for other users. Users
    without admin privileges can do it for themselves. For our demo, let's say that
    Charlie, my big Siamese/Gray Tabby guy, needs his own encrypted private space.
    (Who knew that cats had secrets, right?)
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Create Charlie's account in the normal manner, *without* the encrypted home
    directory option.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, log in as Charlie and have him create his own private directory:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'For the login passphrase, Charlie enters his normal password or passphrase
    for logging in to his user account. He could have let the system generate its
    own mount passphrase, but he decided to enter his own. Since he did enter his
    own mount passphrase, he didn''t need to do the `ecryptfs-unwrap-passphrase` command
    to find out what the passphrase is. But, just to show how that command works,
    let''s say that Charlie entered `TurkeyLips` as his mount passphrase:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Yes, it's a horribly weak passphrase, but for our demo purposes, it works.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'Have Charlie log out, and then log back in. After this, he can start using
    his new private directory. Also, you can see that he has three new hidden directories
    within his home directory. All three of these new directories are only accessible
    by Charlie, even if he set his top-level home directory so that it’s open to everybody:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Run the `grep ''ecryptfs'' *` command in the `/etc/pam.d` directory. You''ll
    see that PAM is configured to automatically mount users'' encrypted directories
    whenever they log in to the system:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: End of lab.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All righty, then. We now know how to encrypt users' home directories. Now, let's
    find out how to encrypt other directories.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – encrypting other directories with eCryptfs
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Encrypting other directories is a simple matter of mounting them with the `ecryptfs`
    filesystem:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `secrets2` directory in the top level of the filesystem:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Use `mount` with the `-t ecryptfs` option to encrypt the directory. Note that
    you’ll list the directory name twice, because the it will be used as its own mount
    point. From the menu, choose `1` to enter your desired passphrase, and choose
    the encryption algorithm and the key length:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Go with the default of `aes`, and `16` bytes for the key.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'Go with the default of `no` for `plaintext passthrough`, and with `yes` for
    filename encryption:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Go with the default `Filename Encryption Key` and verify the mounting options:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This warning only comes up when you mount the directory for the first time.
    For the final two questions, type `yes` in order to prevent that warning from
    coming up again:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Just for fun, create a file within your new encrypted `secrets2` directory,
    and then unmount the directory. Then, try to do a directory listing:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: By choosing to encrypt filenames, nobody can even tell what files you have when
    the directory is unmounted. When you're ready to access your encrypted files again,
    just remount the directory the same as you did before.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting the swap partition with eCryptfs
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''re just encrypting individual directories with eCryptfs instead of
    using LUKS whole-disk encryption, you''ll need to encrypt your swap partition
    in order to prevent accidental data leakage. Fixing that problem requires just
    one simple command:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Don't mind the warning about the missing `/dev/mapper/cryptswap1` file. It will
    get created the next time you reboot the machine.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Using VeraCrypt for cross-platform sharing of encrypted containers
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once upon a time, there was TrueCrypt, a cross-platform program that allowed
    the sharing of encrypted containers across different operating systems. But the
    project was always shrouded in mystery because its developers would never reveal
    their identities. And then, right out of the blue, the developers released a cryptic
    message about how TrueCrypt was no longer secure, and shut down the project.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'VeraCrypt is the successor to TrueCrypt, and it allows the sharing of encrypted
    containers across Linux, Windows, macOS, and FreeBSD machines. Although LUKS and
    eCryptfs are good, VeraCrypt offers more flexibility in certain ways:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, VeraCrypt offers cross-platform sharing, whereas LUKS and eCryptfs
    don't.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VeraCrypt allows you to encrypt either whole partitions or whole storage devices,
    or to create virtual encrypted disks.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not only can you create encrypted volumes with VeraCrypt, you can also hide
    them, giving you plausible deniability.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VeraCrypt comes in both command-line and GUI variants, so it's appropriate for
    either server use or for the casual desktop user.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like LUKS and eCryptfs, VeraCrypt is free open source software, which means
    that it's free to use, and that the source code can be audited for either bugs
    or backdoors.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hands-on lab – getting and installing VeraCrypt
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to install VeraCrypt:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'Download VeraCrypt from here: [https://www.veracrypt.fr/en/Downloads.html](https://www.veracrypt.fr/en/Downloads.html)'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Linux version of VeraCrypt comes two ways. First, there’s `.tar.bz2` file,
    which contains a set of universal installer scripts that should work on any Linux
    distribution. Once you extract the `.tar.bz2` archive file, you''ll see three
    scripts for GUI installation and two for console-mode installation. There are
    scripts for both 32-bit and 64-bit versions of Linux:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The executable permission is already set, so all you have to do to install
    is this:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: You'll need sudo privileges, but the installer will prompt you for your sudo
    password. After reading and agreeing to a rather lengthy license agreement, the
    installation only takes a few seconds.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: End of lab
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: More recently, the VeraCrypt developers have also begun supplying `.deb` and
    `.rpm` installer packages for specific Linux distros. For Debian/Ubuntu-type systems,
    use `sudo dpkg -i` to install the `.deb` file. On RHEL/CentOS/AlmaLinux/SUSE systems,
    use `sudo rpm -Uvh` to install the `.rpm` file. Note that you might receive an
    error message telling you to install other packages as dependencies. Also, note
    that there’s no `.rpm` package for the RHEL/AlmaLinux 9 distros. Not to worry
    though, because I’ve just verified that the CentOS 8 package works just fine on
    AlmaLinux 9.
  id: totrans-276
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hands-on lab – creating and mounting a VeraCrypt volume in console mode
  id: totrans-277
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: I haven't been able to find any documentation for the console-mode variant of
    VeraCrypt, but you can see a list of the available commands just by typing `veracrypt`.
    For this demo, you'll create a 2 GB encrypted directory. But you can just as easily
    do it elsewhere, such as on a USB memory stick.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new encrypted volume, type the following:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'This will take you into an easy-to-use interactive utility. For the most part,
    you''ll be fine just accepting the default options:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'For the filesystem, the default option of `FAT` gives you the best cross-platform
    compatibility between Linux, macOS, and Windows:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Select your password and a **PIM** (short for **Personal Iterations Multiplier**).
    For my PIM, I entered `8891`. (High PIM values give better security, but they
    will also cause the volume to take longer to mount.) Then, type at least 320 random
    characters in order to generate the encryption key. (This is where it would be
    handy to have my cats walking across my keyboard):'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'After you hit the **Enter** key, be patient, because the final generation of
    your encrypted volume will take a few moments. Here, you see that my 2 GB `good_stuff`
    container has been successfully created:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Mount this container in order to use it. Begin by creating a mount point directory:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Use the `veracrypt` utility to mount your container on this mount point:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'To see what VeraCrypt volumes you have mounted, use `veracrypt -l`:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: End of lab. That's all there is to it.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using VeraCrypt in GUI mode
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Desktop users of any of the supported operating systems can install the GUI
    variant of VeraCrypt. Be aware, though, that you can''t install both the console-mode
    variant and the GUI variant on the same machine, because one will overwrite the
    other. Here’s what that looks like:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_06_06.png](img/file41.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
- en: 19501_06_06.png
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Since the main focus of this book is server security, I won't go into the details
    of the GUI version here. But it's fairly self-explanatory, and you can view the
    full VeraCrypt documentation on their website.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get VeraCrypt from here: [https://www.veracrypt.fr/en/Home.html](https://www.veracrypt.fr/en/Home.html).'
  id: totrans-301
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: OpenSSL and the public key infrastructure
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With OpenSSL, we can encrypt information on the fly as it goes across the network.
    There's no need to manually encrypt our data before we send it across the network
    because OpenSSL encryption happens automatically. This is important because online
    commerce and banking couldn't exist without it.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: The **Secure Sockets Layer** (**SSL**) is the original in-transit encryption
    protocol. Ironically, even though we're using the OpenSSL suite of programs and
    libraries, we no longer want to use SSL. Instead, we now want to use the **Transport
    Layer Security** (**TLS**) protocol . SSL is full of legacy code and a lot of
    vulnerabilities that go along with that legacy code. TLS is newer, and is much
    more secure. But, even when working with TLS, we can still use the OpenSSL suite.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: One reason that the older SSL protocol is so bad is because of past government
    regulations, especially here in the U.S., that prohibited the use of strong encryption.
    For the first few years of the public Internet, U.S. website operators couldn't
    legally implement encryption keys that were longer than a measly 40 bits. Even
    back then, a 40-bit key didn't provide a whole lot of security. But the U.S. government
    considered strong encryption as a type of munition, and tried to control it so
    that the governments of other countries couldn't use it. Meanwhile, an Australian
    outfit named Fortify started producing a strong encryption plugin that people
    could install in their Netscape web browsers. This plugin allowed the use of 128-bit
    encryption, and my geek buddies and I all eagerly installed it on our own machines.
    Looking back, I'm not sure that it did a lot of good, because website operators
    in the U.S. were still prohibited from using strong encryption keys on their web
    servers.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazingly, the Fortify outfit still has their website up. You can still download
    the Fortify plugin, even though it''s now completely useless. Here’s a screenshot
    of the Fortify website:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_06_07.png](img/file42.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
- en: 19501_06_07.png
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: An encrypted SSL/TLS session uses both symmetric and asymmetric mechanisms.
    For acceptable performance, it uses symmetric encryption to encrypt the data in
    transit. But symmetric encryption requires a private key to be exchanged between
    the two communication partners. To do that, SSL/TLS first negotiates an asymmetric
    session using the same public key exchange mechanism that we looked at in the
    GPG section.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Once that asymmetric session is set up, the two communication partners can safely
    exchange the private key that they'll use for the symmetric session.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Commercial certificate authorities
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make this magic work, you need to install a security certificate onto your
    web server. The certificate serves two purposes:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: It contains the public key that's needed to set up an asymmetric key-exchange
    session.
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, it can verify the identity of, or authenticate, your website. So,
    for example, users can theoretically be sure that they're connected to their real
    bank, instead of to Joe Hacker's Bank of Crooks and Criminals that's disguised
    as their bank.
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you shop for a certificate, you''ll find quite a few vendors, which are
    all referred to as **certificate authorities**, or **CAs**. Most CAs, including
    vendors such as Thawte, Symantec, GoDaddy, and Let''s Encrypt, among others, offer
    several different grades of certificates. To help explain the differences between
    the grades of certificates, here''s a screenshot from the GoDaddy site:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: At the left-hand side of the list, at the cheapest price, is the **standard**
    **Domain Verification** **(DV)** offering. Vendors advertise this type of certificate
    as for use where all you really care about is encryption. Identity verification
    is limited to domain verification, which means that yeah, records for your site
    have been found on a publicly accessible DNS server.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: At the right, we see the **premium** **Extended Verification** (**EV**) offering.
    This is the top-of-the-line, highest-grade certificate that certificate vendors
    offer. With this extended verification grade of certificate, you have to jump
    through some hoops to prove that you are who you really are and that your website
    and your business are both legit. It used to be that both Firefox and Chrome would
    show a green High-Assurance bar in the URL of any site with an EV certificate,
    but they no longer do, for reasons that I’ll explain in a moment.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: 'So, just how good is this **Premium SSL EV** certificate with rigorous identity
    testing? Well, not quite as good as I thought. Two days after I wrote this explanation
    about the different types of certificates for the previous edition of this book,
    I received the latest edition of the *Bulletproof TLS Newsletter* from Feisty
    Duck Publishing. The big news was that Google and Mozilla decided to remove the
    green high assurance bar from future editions of Chrome and Firefox. Their reasons
    are as follows:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: The green high assurance bar is meant to help users avoid phishing attacks.
    But for that to be useful, users have to notice that the high assurance bar is
    even there. Studies have shown that most people don't even notice it.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ian Carrol, a security researcher, questions the value of extended validation
    certificates. As an experiment, he was able to register a bogus certificate for
    Stripe, Inc., which is a legitimate company. The certificate vendor finally did
    notice their mistake and revoked the certificate, but it's something that shouldn't
    have happened in the first place.
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On top of everything else, it's also possible to register extended validation
    certificates with incorrect information. This indicates that the verification
    process isn't quite as thorough as the certificate vendors would have us believe.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But in spite of these occasional problems, I still believe that extended validation
    certificates are useful. When I access my bank account, I like to believe that
    extra identity verification is never a bad thing.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Something else that's rather curious is that certificate vendors still market
    their certificates as SSL certificates. Don't be fooled, though. As long as the
    website owners configure their servers correctly, they'll be using the more secure
    TLS protocol, rather than SSL.
  id: totrans-323
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Let''s Encrypt** is a fairly new organization that has the goal of ensuring
    that all websites everywhere are set up with encryption. It''s a worthy goal,
    but it has also introduced a new problem. Here’s what the Let''s Encrypt website
    looks like:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_06_09.png](img/file43.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
- en: 19501_06_09.png
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: To obtain a certificate from one of the traditional vendors, you have to use
    the OpenSSL utility to create your keys and a certificate request. Then, you'll
    submit the certificate request, proof of identity if applicable, and your payment
    to the certificate authority. Depending upon which grade of certificate you purchase,
    you'll have to wait anywhere from one to several days before you get the certificate.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: Let's Encrypt is totally free of charge, and you don't have to jump through
    hoops to get the certificate. Instead, you configure your web server to automatically
    obtain a new Let's Encrypt certificate each time you set up a new website. If
    Let's Encrypt sees that your new site has a valid record on a publicly accessible
    DNS server, it will automatically create and install the certificate on your server.
    Other than having to configure your web server to use Let's Encrypt, it's no fuss,
    no muss.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: The problem with Let's Encrypt is that it's even easier to abuse than the extended
    validation certificates. Shortly after Let's Encrypt began operation, criminals
    began setting up domains that appeared to be subdomains of legitimate business
    websites. So, people see that the website is encrypted and that the domain name
    seems to be legit, and they merrily enter their credentials without giving things
    a second thought. Let's Encrypt is handy and useful for legitimate purposes, but
    be aware of its downside, too.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: 'Tip:'
  id: totrans-330
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-331
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Before you choose a certificate vendor, do some research. Sometimes, even the
    big name vendors have problems. A few years ago, Google removed Symantec from
    Chrome's list of trusted certificate authorities because Symantec had allegedly
    violated industry best practices several times. That's rather ironic, considering
    that Symantec has had a long history of being a trusted vendor of security products.
  id: totrans-332
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that we've covered the basics of SSL/TLS encryption, let's see how to implement
    it with the OpenSSL suite.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: Creating keys, certificate signing requests, and certificates
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The good news is that, regardless of which *newer* Linux distribution we're
    on, this procedure is the same. (I say *newer*, because the newest versions of
    Ubuntu and RHEL/AlmaLinux use OpenSSL version 3\. Some of the Version 3 commands
    are different from what you’ll see on the older versions.) The not-so-good news
    is that OpenSSL can be a bit tricky to learn because it has loads of sub-commands,
    each with its own set of options and arguments. Bear with me, and I'll break it
    down the best I can.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Creating a self-signed certificate with an RSA key
  id: totrans-336
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A self-signed certificate is useful when all you need is encryption, or for
    testing purposes. There''s no identity verification involved with self-signed
    certificates, so you never want to use them on servers that your users need to
    trust. Let''s say that I need to test my new website setup before putting it into
    production, and I don''t want to do my testing with a for-real key and certificate.
    I''ll create the key and the self-signed certificate with one single command:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Here''s the breakdown:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '**openssl**: I''m using OpenSSL with just my normal user privileges. For now,
    I''m doing everything in my own home directory, so there''s no need for root or
    sudo privileges.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**req**: This is the sub-command for managing certificate signing requests
    (CSRs). When creating self-signed certificates, OpenSSL will create a temporary
    CSR.'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-newkey rsa:2048**: I''m creating an RSA keypair that''s 2,048 bits in length.
    I''d actually like to use something a bit longer, but that might impact server
    performance when setting up the TLS handshake. (Again, this is preceded by only
    a single dash.)'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-nodes**: This means that I''m not encrypting the private key that I''m about
    to create. If I were to encrypt the private key, I would have to enter the private
    key passphrase every time I restart the web server.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-keyout donnie-domain.key-x509**: I''m creating the private key with the
    name `donnie-domain.key-x509`. The `x509` part indicates that this will be used
    for a self-signed certificate.'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-days 365**: The certificate will expire in one year.'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-out donnie-domain.crt**: Finally, I''m creating the `donnie-domain.crt`
    certificate.'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you run this command, you'll be prompted to enter information about your
    business and your server. (We'll look at that in just a moment.) After creating
    this key and certificate, I'll need to move them to their proper locations and
    configure my web server to find them. (We'll also touch on that in a bit.)
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: 'Encrypting the private key is an optional step, which I didn''t do. If I were
    to encrypt the private key, I would have to enter the passphrase every time that
    I restart the web server. That could be problematic if there are any web server
    admins who don''t have the passphrase. And, even though this sounds counter-intuitive,
    encrypting the private key that''s on the web server doesn''t really help that
    much with security. Any malicious person who can get physical access to the web
    server can use memory forensics tools to get the private key from system memory,
    even if the key is encrypted. But if you plan to make a backup of the key to store
    elsewhere, definitely encrypt that copy. So now, let''s make an encrypted backup
    copy of my private key that I can safely store somewhere other than on the web
    server:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'There are two things to look at here:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '**rsa -aes256** means that I''m using the AES256 encryption algorithm to encrypt
    an RSA key.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To ensure that I made a copy instead of overwriting the original unencrypted
    key, I specified `donnie-domain-encrypted.key-x509` as the name for the copy.
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a self-signed certificate with an Elliptic Curve key
  id: totrans-353
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The only part of this that's different is the `ec:<(openssl ecparam -name secp384r1)`
    part. It looks strange, but it's really quite logical. When creating an EC key,
    you have to specify a parameter with the `ecparam` command. You'll normally see
    this as two separate `openssl` commands, but it's handier to combine the two commands
    together as one command within another command. The inner `openssl` command is
    feeding its output back to the outer `openssl` command via the input redirection
    symbol (`<`). The `-name secp384r1` part means that we're creating a 384-bit EC
    key with the `secp384` named curve algorithm.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Creating an RSA key and a Certificate Signing Request
  id: totrans-356
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Normally, we won''t use a self-signed certificate for anything that''s meant
    for the general public to interface with. Instead, we want to obtain a certificate
    from a commercial CA because we want users to know that they''re connecting to
    a server for which the identity of its owners has been verified. To obtain a certificate
    from a trusted CA, you''ll first need to create a key and a **Certificate Signing
    Request** (**CSR**). Let''s do that now:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Here''s the breakdown:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '**openssl**: I''m using OpenSSL with just my normal user privileges. For now,
    I''m doing everything in my own home directory, so there''s no need for root or
    sudo privileges.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**req**: This is the sub-command for managing CSRs.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**--out CSR.csr**: The `--out` means that I''m creating something. In this
    case, I''m creating the CSR with the name `CSR.csr`. All CSRs will have the `.csr`
    filename extension.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-new**: This is a new request. (And yes, this is preceded by a single dash,
    unlike the `out` in the previous line that''s preceded by two dashes.)'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-newkey rsa:2048**: I''m creating an RSA key pair that''s 2,048 bits in length.
    I''d actually like to use something a bit longer, but that will impact server
    performance when setting up the TLS handshake. (Again, this is preceded by only
    a single dash.)'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-nodes**: This means that I''m not encrypting the private key that I''m about
    to create. If I were to encrypt the private key, I would have to enter the private
    key passphrase every time I restart the web server.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-keyout server-privatekey.key**: Finally, I''m creating the private key with
    the name `server-privatekey.key`. Since this key isn''t for a self-signed certificate,
    I didn''t put the `-x509` at the end of the key''s filename.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s now look at a snippet from the command output:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: So, I've entered my information about my company location, name, and website
    name. Note the bottom where it asks me for a **challenge password**. This password
    doesn't encrypt either the key or the certificate. Rather, it's just a shared
    secret between the certificate authority and me that's embedded into the certificate.
    I'll need to keep it in a safe place in case I ever need to reinstall the certificate.
    (And, for goodness' sake, when you do this for real, pick a better password than
    `TurkeyLips`.)
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: As before, I didn't encrypt the private key. But if you need to make a backup
    copy, just follow the procedure that you saw in the previous section.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: To obtain a certificate from a commercial CA, go to their website and follow
    their directions. When you receive your certificate, install it in the proper
    place in your web server and configure the web server to find it.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: Creating an EC key and a CSR
  id: totrans-372
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Up until a few years ago, you would have wanted to use RSA keys on your web
    servers. They don''t have the security weaknesses that certain other key types
    have, and they''re widely supported by pretty much every web browser. But RSA
    keys do have two weaknesses:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: Even at the standard 2,048-bit length, they require more computational power
    than other key types. Increasing the key length for better security could degrade
    web server performance.
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RSA doesn't offer **Perfect Forward Secrecy** (**PFS**). In other words, if
    someone were to capture a session key that's produced by the RSA algorithm, they
    would be able to decrypt material from the past. If the same person were to capture
    a session key that was produced by a PFS algorithm, they would only be able to
    decrypt the current communication stream.
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the new-fangled EC algorithms instead of the creaky old RSA solves both
    of these problems. But if you pick up a book from even a couple of years ago,
    you'll see that it recommends using RSA keys for backward compatibility with older
    web browsers. That's partly because certain operating systems, along with their
    associated proprietary web browsers, lingered on for far longer than they should
    have. (*I'm looking at you, Windows XP.*) Now though, as I sit here writing this
    in October 2022, I think it's safe to start ignoring the needs of anyone who refuses
    to move on from these antiquated platforms. I mean, Windows XP and Windows 7 both
    reached end-of-life several years ago. So, let's get with the times, people.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: Unlike what we just saw with the RSA keys, we can't create the EC private key
    and the CSR all with one simple command. With EC, we need to do this in two separate
    steps.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: 'First, I''ll create the private key:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Here''s the breakdown:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '**genpkey -algorithm EC**: The `genpkey` command is a fairly recent addition
    to OpenSSL and is now the recommended way to create private keys. Here, I''m telling
    it to create a key with the EC algorithm.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-out eckey.pem**: I''m creating the `eckey.pem` key, which is in the **Privacy
    Enhanced Mail** (**PEM**) format. The RSA keys that I created in the previous
    section were also PEM keys, but I used the `.key` filename extension on them.
    You can use either the `.key` or the `.pem` filename extension, and they''ll both
    work. But if you use the `.pem` extension, everyone who looks at them can tell
    at a glance that they are PEM keys.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-pkeyopt ec_paramgen_curve:P-384**: This tells OpenSSL to create an EC key
    that''s 384 bits in length. A beautiful thing about EC is that its shorter-length
    keys provide the same encryption strength as the longer RSA keys. In this case,
    we have a 384-bit key that''s actually stronger than a 2,048-bit RSA key. And,
    it requires less computational power. (I call that a total win!)'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-pkeyopt ec_param_enc:named_curve**: This is the encoding method that I''m
    using for the EC parameters. It has to be set to either `named_curve or explicit`.'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, I''ll create a CSR and sign it with my new private key, like so:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The output that I didn't include is the same as what you saw in the RSA key
    section.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: The final steps are the same as before. Choose a CA and let them tell you how
    to submit the CSR. When they issue the certificate, install it on your web server.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: Creating an on-premises CA
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Buying a certificate from a commercial CA is good when you're dealing with the
    general public on a website that they need to trust. But for an organization's
    own internal use, it's not always necessary or feasible to buy commercial certificates.
    Let's say that your organization has a group of developers who need their own
    client certificates to access the development server. Buying a commercial certificate
    for each developer would be costly, and it would require the development server
    to have a publicly accessible domain name so that the commercial CA can do domain
    verification. Even going with the free-of-charge Let's Encrypt certificates isn't
    a good option, because that would also require that the development server have
    a publicly accessible domain name. Option 2 is to go with self-signed certificates.
    But that won't work because client authentication doesn't work with self-signed
    certificates. That leaves Option 3, setting up a private, on-premises CA.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: If you search around on the web, you'll find lots of guides for setting up your
    own private CA. But almost all of them are woefully outdated, and most of them
    are for setting up a CA with OpenSSL. There's nothing wrong with using OpenSSL
    for a CA, except that setting it up is a rather convoluted, multi-stage process.
    Then, when you finally do have it set up, you have to use complex commands from
    the command line in order to do anything. What we want is something a bit more
    user-friendly for both you and your users.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – setting up a Dogtag CA
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dogtag PKI is much simpler to set up, and it has a nice web interface that OpenSSL
    doesn't have. It's available in the normal repositories of Debian/Ubuntu and RHEL/AlmaLinux,
    but under different package names. In the Debian/Ubuntu repositories, the package
    name is `dogtag-pki`. In the RHEL/AlmaLinux repositories, the name is `pki-ca`.
    (For some reason that I don't understand, you'll never see Red Hat folk use the
    "Dogtag" name.)
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we install the Dogtag packages, we need to do a couple of simple chores:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Either create a record in a local DNS server for the Dogtag server, or create
    an entry for it in its own `/etc/hosts` file
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do this on either your AlmaLinux 9 or your Ubuntu 22.04 VM, and I’ll
    give directions for both. To access the Dogtag dashboard, we''ll use a second
    Linux VM with a desktop environment installed. With all this out of the way, let''s
    get started:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: 'On your server virtual machine, set an FQDN, substituting your own for the
    one that I''m using:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Edit the `/etc/hosts` file to add a line like the following:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Use your virtual machine's own IP address and FQDN.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, increase the number of file descriptors that your system can have open
    at one time. (Otherwise, you''ll get a warning message when you run the directory
    server installer.) Do that by editing the `/etc/security/limits.conf` file. At
    the end of the file, add these two lines:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Reboot the machine so that the new hostname and file descriptor limits can take
    effect.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Dogtag stores its certificate and user information in an LDAP database. In
    this step, we''ll install the LDAP server package, along with the Dogtag package.
    For AlmaLinux 9, do this:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'For Ubuntu 22.04, do this:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Next, create an LDAP Directory Server (DS) instance by first creating an `instance.inf`
    file in the root user’s home directory:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: (Yes, I know that it’s bad practice to put passwords into plain-text configuration
    files. That’s okay, though. We’ll take care of that in just a bit.)
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now use this `instance.inf` file, along with the `dscreate` utility,
    to create the Directory Server instance:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Finally, it''s time to create the CA:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Accept all the defaults until you get to the very end. When it asks **Begin
    Installation?**, type `Yes`. When you get to the Directory Server part, enter
    the password that you used to create the DS instance in the previous step. Note
    that you'll be offered the choice to access the LDAP DS instance via a secure
    port. But since we're setting up LDAP and Dogtag on the same machine, this isn't
    necessary.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the Dogtag service will automatically start by enabling the `pki-tomcatd.target`.
    Do that with:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'After everything is set up, you’ll no longer need the `instance.inf` file that
    holds your password in plain-text. Get rid of it by doing:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'You''ll access the Dogtag web interface via port `8443/tcp`. On the AlmaLinux
    machine, open that port like this:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'On the Ubuntu machine, assuming that you’re using the Uncomplicated Firewall,
    open the port like this:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'On another Linux virtual machine that has a desktop interface, edit the `/etc/hosts`
    file to add the same line that you added to the server `hosts` file in *step 2*.
    Then, open the Firefox web browser on that machine and navigate to the Dogtag
    dashboard. In keeping with the example in this scenario, the URL would look like
    this:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'You''ll receive a warning about the certificate being invalid because it''s
    self-signed. That''s normal, because every CA has to start with a self-signed
    certificate, and you haven''t yet imported this certificate into your trust store.
    Temporarily add the exception and continue. (In other words, clear the checkmark
    from the **Add permanently** box. You''ll see why in the next lab.) Click through
    the links until you reach this screen:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '![19501_06_10.png](img/file44.png)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
- en: 19501_06_10.png
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: Click the **SSL End Users Services** link. This is where end users can request
    the various types of certificates. Click the back button to return to the previous
    screen. This time, click on the **Agent Services** link. You won't be able to
    go there because it requires you to install a certificate into your web browser
    for authentication.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The certificate that you need to install is in the `/root/.dogtag/pki-tomcat/`
    directory of your Dogtag VM. Copy this file to the VM on which you''re using Firefox
    to access the Dogtag dashboard. Do the following:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Of course, substitute your own username and IP address. Note that the file will
    automatically land in your own home directory, and that its ownership will change
    from root to your own username.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: 'On the VM with Firefox, import the certificate into Firefox. From the Firefox
    menu, choose **Settings**, then **Privacy and Security**. At the very bottom of
    the screen, click on **View Certificates**. Click the **Your Certificates** tab
    at the top and the **Import** button at the bottom. Navigate to your home directory
    and choose the certificate that you just sent over from the Dogtag server VM.
    Once the import operation is complete, you should see the **PKI Administrator**
    certificate in the list of imported certificates:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![19501_06_11.png](img/file45.png)'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 19501_06_11.png
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now try to access the **Agent Services** page. You'll be allowed access once
    you confirm that you want to use the certificate that you just imported.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: End of lab.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a users need to request a certificate for their own use, they'll use `openssl`
    to create a key and a CSR, as I've already shown you earlier in this chapter.
    They'll then go to the SSL End User Services page and paste the contents of their
    CSR into the box for the certificate that they're requesting. An administrator
    will then go to the Agent Services page to approve the request and issue the certificate.
    (To help familiarize yourself with Dogtag, I encourage you to click around on
    the web interface, exploring all the options.)
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: Adding a CA to an operating system
  id: totrans-442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most of the major web browsers, such as Firefox, Chrome, and Chromium, come
    with their own pre-defined database of trusted CAs and their associated certificates.
    When you create a private CA, you'll need to import the CA certificate into your
    browser's trust store. Otherwise, your users will keep receiving messages about
    how the sites that they're viewing are using untrusted certificates. Indeed, that's
    the case with our Dogtag server. Any user who accesses it to request a certificate
    will receive a warning about how the CA is using a non-trusted certificate. We'll
    fix that by exporting the CA certificate from the Dogtag server and importing
    it into all of your users' browsers. Let's dig in, shall we?
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – exporting and importing the Dogtag CA certificate
  id: totrans-444
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The Dogtag web portal doesn''t have an option for this, so we''ll have to use
    the command line:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: In your home directory of the Dogtag server, create the `password.txt` file.
    On the first line of the file, insert the password for the server's certificate.
    (It's the password that you set when you ran the `pkispawn` command.)
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extract the server key and certificate like so:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Run an `ls -l` command to verify that the `pki-server.p12` file was created.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem with the `p12` file is that it contains both the server''s private
    key and its certificate. But to add a certificate to the CA section of your browser''s
    trusted store, you have to have just the certificate without the key. Extract
    the certificate like so:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Transfer this new `pki-server.crt` file to a machine with a graphical desktop.
    In Firefox, open **Settings/Privacy & Security**. Click the **View Certificates**
    button at the bottom. Click the **Authorities** tab and import the new certificate.
    Select **Trust this CA to identify websites** and to **Trust this CA to identify
    email users**:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![19501_06_12.png](img/file46.png)'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 19501_06_12.png
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Firefox and then open it again to ensure that the certificate takes effect.
    Navigate to the Dogtag portal. This time, you shouldn't receive any warning messages
    about using an untrusted certificate.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: End of lab.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing the CA into Windows
  id: totrans-457
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With either Firefox or Chrome, you'll import the CA certificate directly into
    the browser's trust store, regardless of which operating system you're running.
    But if you're stuck running one of Microsoft's own proprietary browsers on that
    off-brand operating system that's known as Windows, then you'll need to import
    the certificate into the Windows trust store instead of into the browser. Fortunately,
    that's incredibly easy to do. After you copy the certificate to the Windows machine,
    just open up Windows File Explorer and double-click on the certificate file. Then,
    click the **Install Certificate** button on the pop-up dialog box. If your organization
    is running an Active Directory domain, just ask one of the AD administrators to
    import it into Active Directory for you.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: OpenSSL and the Apache web server
  id: totrans-459
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A default installation of any web server isn't all that secure, so you'll need
    to harden it up a bit. One way to do that is by disabling the weaker SSL/TLS encryption
    algorithms. The general principles apply to all web servers, but for our examples,
    we'll just look at Apache. (The topic of web server hardening is quite extensive.
    For the present, I'll confine the discussion to hardening the SSL/TLS configuration.)
    You can use either Ubuntu 22.04 or AlmaLinux 9 for this section, but the package
    names and configuration files are different between the two distros. The configurations
    also differ between CentOS 7 and AlmaLinux 9, so we'll look at them as well. But,
    before I can explain the configuration options, I need to say a word or two about
    the history of the SSL/TLS protocol.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: In the 1990s, engineers at Netscape invented the SSL protocol. Version 1 never
    saw the light of day, so the first released version was SSL version 2 (SSLv2).
    SSLv2 had its share of weaknesses, many of which were addressed in SSLv3\. At
    the insistence of Microsoft, the next version was renamed Transport Layer Security
    (TLS) version 1 (TLSv1). (I have no idea why Microsoft objected to the SSL name.)
    The current version is TLSv1.3, which is finally now supported by most Linux distros.
    By default, Apache still supports some of the older protocols. Our goal is to
    disable those older protocols. Only a couple of years ago, that would have meant
    disabling SSLv2 and SSLv3 and leaving TLSv1 through TLSv1.2, due to questionable
    browser support for anything newer. Now, though, I think it's safe to disable
    support for anything older than TLSv1.3\. When I wrote the Second Edition of this
    book back in 2019, Apple Safari was the only major browser that didn’t support
    TLSv1.3\. Fortunately, even Apple is now on board with the newest TLS.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: Hardening Apache SSL/TLS on Ubuntu
  id: totrans-462
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For this demo, we''ll use two Ubuntu 22.04 virtual machines. We''ll install
    Apache on the first one and `sslscan` on the second one. (This `sslscan` package
    isn’t available in the AlmaLinux repository.):'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Apache on your Ubuntu machine, just do the following:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: This also installs the `mod_ssl` package, which contains the libraries and configuration
    files for SSL/TLS implementation.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: And, of course, if you have a firewall enabled, be sure that port `443/tcp`
    is open.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: 'The Apache service is already enabled and running, so you don''t have to mess
    with that. But you do need to enable the default SSL site and the SSL module with
    these three commands:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Before we look at the SSL/TLS configuration, let''s set up a scanner machine
    to externally test our configuration. On the second Ubuntu VM, install the `sslscan`
    package:'
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'On the scanner machine, scan the Ubuntu machine on which you installed Apache,
    substituting the IP address of your own machine:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Note the algorithms and the protocol versions that are supported. You should
    see that SSLv2, SSLv3, TLSv1.0, and TLSv1.1 are all disabled. TLSv1.2 and TLSv1.3
    are the only ones that are enabled.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Ubuntu VM with Apache, edit the `/etc/apache2/mods-enabled/ssl.conf`
    file. Look for the line that says this:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Change it to this:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Restart the Apache daemon to make this change take effect:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Scan this machine again, and note the output. You should see that the older
    TLSv1.2 protocol has also now been disabled. So, congratulations! You've just
    made a quick and easy security upgrade to your web server.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: End of lab.
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's take a look at RHEL 9/AlmaLinux 9.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: Hardening Apache SSL/TLS on RHEL 9/AlmaLinux 9
  id: totrans-484
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For this demo, you''ll install Apache and `mod_ssl` on an AlmaLinux 9 VM. (Unlike
    on Ubuntu, you have to install these as two separate packages.) Use the same scanner
    VM that you used in the previous lab. A new feature of the RHEL 8/9 distros is
    that you can now set system-wide crypto policies for most of your services and
    applications that require cryptography. We''ll take a quick look at it here, and
    again in *Chapter 7*, *SSH Hardening*:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: Before doing anything, shut down your AlmaLinux 9 VM and create a snapshot from
    the VirtualBox console. That’s because in just a bit, you’ll need to go back to
    a clean snapshot in order to test the crypto policies feature.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On your AlmaLinux 9 VM, install Apache and `mod_ssl`, and start the service:'
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Open port `443` on the firewall:'
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'From the scanner VM, scan the Apache VM, substituting your own IP address:'
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: As you just saw on the Ubuntu server, nothing older than TLSv1.2 is supported.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, on the Apache VM, view the status of the system-wide crypto configuration:'
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: You should see `DEFAULT` as the output. With `DEFAULT`, you get TLSv1.2 as the
    minimum protocol version along with the goodness of TLSv1.3\. But you'll also
    see some TLSv1.2 algorithms that we can do without.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: 'Shut down the Apache VM. Go to the VirtualBox console and restore the snapshot
    that you created in Step 1, in order to get rid of the Apache installation. Then,
    restart the virtual machine and set the crypto policy to `FUTURE`, like this:'
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: I had a good reason for having you create and restore the snapshot before setting
    `FUTURE` mode. It’s just that if you install Apache before setting `FUTURE` mode,
    you’ll no longer be able to start Apache. So, if you want to run your Apache webserver
    with `FUTURE` mode, you’ll need to set `FUTURE` mode first, then install Apache.
  id: totrans-499
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Reboot the Apache VM so that the `FUTURE` mode will take effect. Verify that
    `FUTURE` mode has taken effect by doing:'
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Install the `mod_ssl` and Apache packages, and start Apache as you did in Step
    2.
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scan the webserver VM as you did in Step 4\. You'll see that TLSv1.2 is still
    enabled, but with a much smaller list of enabled algorithms.
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: End of lab.
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are two other crypto policy modes besides the two that I've shown here.
    `LEGACY` mode enables some really old algorithms that we don't want to use unless
    it's absolutely necessary to support older clients. But, as I keep saying, anyone
    who's using a client that's that old needs to upgrade. There's also the `FIPS`
    mode, which you might need to use if you’re doing business with the U.S. government.
    Even though the `update-crypto-policies` utility appears to work with `FIPS` mode,
    Red Hat recommends against doing that. Instead, they recommend setting `FIPS`
    mode as you install the operating system. We’ll look at that next.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: Setting FIPS mode on RHEL 9/AlmaLinux 9
  id: totrans-506
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: FIPS stands for Federal Information Processing Standards, and is a set of cybersecurity
    requirements for people and companies who want to do business with the United
    States government. Setting your server to run in `FIPS` mode involves more than
    just disabling some weak encryption algorithms. It also involves installing a
    set of modules that help harden other aspects of the operating system.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though the `update-crypto-policies` utility has an option for setting
    `FIPS` mode, you’ll never use it. To set `FIPS` mode on a machine on which the
    operating system has already been installed, you’d instead use the `sudo fips-mode-setup
    --enable` command. But, Red Hat even recommends against doing that. Instead, they
    recommend setting `FIPS` mode as you install the operating system. Their concern
    is that setting `FIPS` mode after installing the operating system might leave
    behind encryption keys that were created with non-`FIPS` algorithms. Instead,
    they recommend setting `FIPS` mode as you install the operating system. Fortunately,
    that’s easy. All you have to do is interrupt the installer’s boot process and
    make a quick edit to the kernel configuration. Here’s how to do it as you create
    a new AlmaLinux VM:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new AlmaLinux VM and boot up the AlmaLinux installer. Hit the **Up
    arrow** key to highlight the **Install AlmaLinux** option. Instead of hitting
    the **Enter** key to continue, hit the **Tab** key to bring up the kernel options.
    Here’s what you should see:'
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/file47.png)'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'At the bottom of the screen, add `fips=1` to the end of the kernel option line.
    It should now look like this:'
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/file48.png)'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Hit the Enter key and continue installation as you normally would.
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the installation is complete and the VM has rebooted, check the status
    of `FIPS` mode, like this:'
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Finally, install `mod_ssl` and Apache. Open the the firewall port and scan the
    VM with `sslscan`, as you did in the previous exercise.
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: End of lab.
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is one caveat that you should know about when setting `FIPS` mode on any
    RHEL 9-type distro. It’s that the current version of the FIPS standard is version
    140-3\. However, at the time of this writing in October 2022, RHEL 9 and its offspring
    still only meet the standards for FIPS 140-2\. The Red Hat documentation gives
    no insight into when that might change.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: If you’re wondering why I’m not covering `FIPS` mode on Ubuntu, it’s just that
    it’s not possible to set `FIPS` mode on the free-of-charge version of Ubuntu.
    If you want to run Ubuntu in `FIPS` mode, you’ll have to purchase a support contract.
  id: totrans-519
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, let’s take a quick look at the legacy CentOS 7.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: Hardening Apache SSL/TLS on RHEL 7/CentOS 7
  id: totrans-521
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Okay, I did say that we'd look at doing this on a CentOS 7 machine. But, I'll
    make it brief.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: You'll install Apache and `mod_ssl` on CentOS 7 the same way that you did on
    AlmaLinux 9, except that you'll use the `yum` command instead of the `dnf` command.
    As with AlmaLinux, you'll need to enable and start Apache with `systemctl`, but
    you won't need to enable the ssl site or the ssl module. And, of course, make
    sure that port `443` is open on the firewall.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: 'When you do an sslscan of a CentOS 7 machine, you''ll see a very long list
    of supported algorithms, from TLSv1 through TLSv1.2\. Even with TLSv1.2, you''ll
    see a few really bad things, like this:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'The `DES` and `SHA` in these lines indicate that we''re supporting use of the
    antiquated **Data Encryption Standard** (**DES**) and version 1 of the **Secure
    Hash Algorithm** (**SHA**). That is not good. Get rid of them by editing the `/etc/httpd/conf.d/ssl.conf`
    file. Look for these two lines:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Change them to this:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Reload Apache with this command:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Scan the machine again, and you'll see a lot fewer supported algorithms. (And
    by the way, one advantage of the new TLSv1.3 is that it completely gets rid of
    these legacy algorithms.)
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at how users can identify themselves to a server.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: Setting up mutual authentication
  id: totrans-534
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you access your bank's secure website, your web browser requires that the
    web server authenticate itself to the browser. In other words, the browser demands
    to see the server's certificate for the website so that it can verify if it's
    valid. This way, you have some assurance that you're logging in to the bank's
    real, genuine website instead of a counterfeit site. You then have to authenticate
    yourself to the web server, but you'll normally do that with a username and password.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: If a web server is set up to allow it, users can instead authenticate themselves
    with a certificate. This way, there's no password for the bad guys to either steal
    or crack. You already saw how this is done when you imported Dogtag's `ca_admin_cert.p12`
    certificate into your web browser. This certificate gave you the awesome power
    to access Dogtag's administrator page. Your normal end users won't have this certificate,
    so all they can access is just the end-user page where they can request certificates.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: The major web servers—Apache, Nginx, lighttpd, and some others—support mutual
    authentication. Space doesn't permit me to go into the details of setting this
    up on a server, but the documentation for whichever server you use will cover
    it.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s get back to the future!
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: Introducing quantum-resistant encryption algorithms
  id: totrans-539
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve likely heard of quantum computers, which have nothing to do with the
    old *Quantum Leap* show on television. This new type of computer is still in the
    experimental stage, and likely will remain there for some time to come. Still,
    there’s a lot of hype about what they’ll be like when they finally are ready for
    production use. Supposedly, they’ll be way more powerful than the current generation
    of computers, and they’ll supposedly be able to easily crack even the strongest
    of the current encryption algorithms. Indeed, that’s a rather scary prediction.
    (Perhaps it’s fitting that I’m typing this on Halloween, the scariest day of the
    year.)
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though there’s some skepticism about whether this dire prediction will
    come true, or of whether production-grade quantum computers will even see the
    light of day, the U.S. federal government is taking this seriously. Here’s the
    list of quantum-resistant algorithms that the National Institutes of Standards
    and Technology (NIST) currently recommends:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '**CRYSTALS-Kyber**: This one is for general encryption. Cloudflare, Amazon,
    and IBM already use it.'
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CRYSTALS-Dilithium**: This is for encrypted digital signatures. NIST recommends
    this one as the primary signature algorithm.'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FALCON**: This is also a signature algorithm. NIST recommends it for whenever
    you need a signature that’s smaller than what CRYSTALS-Dilithium can provide.'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SPHINCS+**: This is the third signature algorithm, which is slower and larger
    than the first two. It uses a different approach than what the first two use,
    which is why NIST recommends it as a backup, in case the first two get hacked.'
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, how do we know that a particular encryption algorithm is resistant to quantum
    computer hacking if viable quantum computers don’t yet exist? Well, I wish that
    I could tell you, but I can’t. At any rate, you might not have to worry too much
    abut this just yet, but it’s still worthwhile to learn.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let’s wrap this baby up and move on to the next chapter.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-548
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As always, we've covered a lot of ground in this chapter. We began by using
    GPG to encrypt, sign, and share encrypted files. We then looked at various methods
    of encrypting drives, partitions, directories, and sharable containers. After
    that, we looked at how to use OpenSSL to create keys, CSRs, and certificates.
    But since we don't want to use self-signed certificates all the time and commercial
    certificates aren't always necessary, we looked at how to set up a private CA
    with Dogtag. We then looked at simple ways to harden the TLS configuration on
    the Apache web server, and we touched on the subject of mutual authentication.
    Finally, we saw an introduction to quantum-resistant encryption algorithms.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, we had plenty of hands-on labs. That's good, because after all,
    idle hands are the devil's workshop, and we certainly don't want any of that.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at ways to harden Secure Shell. I'll see you
    there.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-552
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which of the following is not an advantage of GPG?
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It uses strong, hard-to-crack algorithms.
  id: totrans-554
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It works well for sharing secrets with people you don't know.
  id: totrans-555
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Its public/private key scheme eliminates the need to share passwords.
  id: totrans-556
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use it to encrypt files that you don’t intend to share, for your own
    personal use.
  id: totrans-557
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to send an encrypted message to Frank. What must you do before you
    can encrypt his message with GPG so that you don't have to share a password?
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nothing. Just encrypt the message with your own private key.
  id: totrans-559
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Import Frank's private key into your keyring and send Frank your private key.
  id: totrans-560
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Import Frank's public key into your keyring and send Frank your public key.
  id: totrans-561
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Just import Frank's public key into your keyring.
  id: totrans-562
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Just import Frank's private key into your keyring.
  id: totrans-563
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following would be the proper choice for whole-disk encryption
    on a Linux system?
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bitlocker
  id: totrans-565
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: VeraCrypt
  id: totrans-566
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: eCryptfs
  id: totrans-567
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: LUKS
  id: totrans-568
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If you use eCryptfs to encrypt users' home directories and you're not using
    whole-disk encryption, what other action must you take in order to prevent leakage
    of sensitive data?
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None.
  id: totrans-570
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that users use strong private keys.
  id: totrans-571
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Encrypt the swap partition.
  id: totrans-572
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You must use eCryptfs in whole-disk mode.
  id: totrans-573
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In which of the following scenarios would you use VeraCrypt?
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever you want to implement whole-disk encryption.
  id: totrans-575
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever you just want to encrypt users' home directories.
  id: totrans-576
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever you'd prefer to use a proprietary, closed source encryption system.
  id: totrans-577
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever you need to create encrypted containers that you can share with Windows,
    macOS, and BSD users.
  id: totrans-578
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to ensure that your web browser trusts certificates from the Dogtag
    CA. How do you do it?
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use `pki-server` to export the CA certificate and key, and then use `openssl
    pkcs12` to extract just the certificate. Then, import the certificate into your
    browser.
  id: totrans-580
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You import the `ca_admin.cert` certificate into your browser.
  id: totrans-581
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You import the `ca_admin_cert.p12` certificate into your browser.
  id: totrans-582
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You import the `snakeoil.pem` certificate into your browser.
  id: totrans-583
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-584
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Explanations about TLS and OpenSSL:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenSSL Tutorial-How do SSL certificate, private keys, and CSRs work?: [https://phoenixnap.com/kb/openssl-tutorial-ssl-certificates-private-keys-csrs](https://phoenixnap.com/kb/openssl-tutorial-ssl-certificates-private-keys-csrs)'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Transport Layer Security version 1.3 in Red Hat 8: [https://www.redhat.com/en/blog/transport-layer-security-version-13-red-hat-enterprise-linux-8](https://www.redhat.com/en/blog/transport-layer-security-version-13-red-hat-enterprise-linux-8)'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The OpenSSL website: [https://www.openssl.org/](https://www.openssl.org/)'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Feisty Duck Publishing, who offer books, training, and newsletters about OpenSSL:
    [https://www.feistyduck.com/](https://www.feistyduck.com/)'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Problems with EV certificates:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: 'Chrome browser moving EV UI to Page Info: [https://chromium.googlesource.com/chromium/src/+/HEAD/docs/security/ev-to-page-info.md](https://chromium.googlesource.com/chromium/src/+/HEAD/docs/security/ev-to-page-info.md)'
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extended Validation is Broken: [https://www.cyberscoop.com/easy-fake-extended-validation-certificates-research-shows/](https://www.cyberscoop.com/easy-fake-extended-validation-certificates-research-shows/)'
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EV Certificates issued with "Default City" as the location: [https://groups.google.com/forum/#!topic/mozilla.dev.security.policy/1oReSOPCNy0](https://groups.google.com/forum/#!topic/mozilla.dev.security.policy/1oReSOPCNy0)'
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EV certificates issued with erroneous information: [https://twitter.com/Scott_Helme/status/1163546360328740864](https://twitter.com/Scott_Helme/status/1163546360328740864)'
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Problems with free Let''s Encrypt certificates:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: 'CyberCriminals abusing free Let''s Encrypt certificates: [https://www.infoworld.com/article/3019926/cyber-criminals-abusing-free-lets-encrypt-certificates.html](https://www.infoworld.com/article/3019926/cyber-criminals-abusing-free-lets-encrypt-certificates.html)'
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dogtag CA:'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: 'How to increase the number of file descriptors in Linux: [https://www.tecmint.com/increase-set-open-file-limits-in-linux/](https://www.tecmint.com/increase-set-open-file-limits-in-linux/)'
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dogtag PKI Wiki: [https://www.dogtagpki.org/wiki/PKI_Main_Page](https://www.dogtagpki.org/wiki/PKI_Main_Page)'
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Import CA into Linux and Windows: [https://thomas-leister.de/en/how-to-import-ca-root-certificate/](https://thomas-leister.de/en/how-to-import-ca-root-certificate/)'
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Red Hat (Dogtag) Certificate Authority Documentation: [https://access.redhat.com/documentation/en-us/red_hat_certificate_system/9/](https://access.redhat.com/documentation/en-us/red_hat_certificate_system/9/)'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 9/AlmaLinux 9:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting system-wide cryptographic policies: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening)'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FIPS
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: 'FIPS home page: [https://www.nist.gov/itl/fips-general-information](https://www.nist.gov/itl/fips-general-information)'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing Red Hat in FIPS mode: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/assembly_installing-the-system-in-fips-mode_security-hardening](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/assembly_installing-the-system-in-fips-mode_security-hardening)'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantum-resistant encryption
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: 'NIST announces quantum-resistant algorithms: [https://www.nist.gov/news-events/news/2022/07/nist-announces-first-four-quantum-resistant-cryptographic-algorithms](https://www.nist.gov/news-events/news/2022/07/nist-announces-first-four-quantum-resistant-cryptographic-algorithms)'
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some people are skeptical about quantum-computing: [https://www.fudzilla.com/news/55434-quantum-computing-is-neither-dead-or-alive](https://www.fudzilla.com/news/55434-quantum-computing-is-neither-dead-or-alive)'
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers
  id: totrans-610
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: B
  id: totrans-611
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-613
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  id: totrans-614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-615
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

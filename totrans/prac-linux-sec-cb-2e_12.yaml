- en: Scanning and Auditing Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing an antivirus on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning with ClamAV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding rootkits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the auditd daemon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ausearch and aureport to read logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditing system services with systemctl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing an antivirus on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In today's environment, viruses and malicious threats can be found in any system,
    including Linux. So, as a system administrator, we can use an antivirus on our
    Linux servers.
  prefs: []
  type: TYPE_NORMAL
- en: '**ClamAV**, is one such open source antivirus software, for detecting and removing
    viruses, Trojans, malware, and other threats on Linux systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ClamAV can be installed from the default repositories of Ubuntu. However, if
    we want to install it from the source, we can download the official source code
    from: [http://www.clamav.net/download.html.](http://www.clamav.net/download.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to install ClamAV antivirus, on our Ubuntu
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before beginning with the installation of the tool, we will update the repository,
    by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c2b4aacd-d50d-4c20-adf7-762ab2f6ab83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will run the following command to install ClamAV antivirus:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0121c472-38b7-45c9-8ebf-cd5377bd54b6.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/5fc8438b-d102-429d-bcd0-17a67f980363.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also install the GUI for the same tool, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/777972f1-47f5-4ca0-909a-7498a7e18aea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the installation completes, we can check the version of the package installed
    by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17c757fb-9e36-43cf-9765-86c28569ab48.png)'
  prefs: []
  type: TYPE_IMG
- en: The command-line version can be used by using `clamscan` followed by the appropriate
    options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To open the GUI version of ClamAV, go to the main menu, and search for the
    tool, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc03fc20-fb38-4c56-8f52-31d90b5031bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we open the GUI version, it will open as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c69c9d2-0f42-4a84-9610-5946fb592d05.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ClamAV can be easily installed on a Linux system, either by using the default
    repositories of Linux, or by downloading the source code from its official website.
  prefs: []
  type: TYPE_NORMAL
- en: ClamAV can be used from the command line as well as from the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning with ClamAV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ClamAV** is a cross-platform antivirus software that is capable of detecting
    different types of malware, including viruses. It includes various utilities such
    as a command-line scanner, a database updater, and a multi-threaded daemon, making
    it a powerful tool.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have to install either the command-line version or the GUI version of the
    tool, before we can run a scan on our system. The tool can be installed as discussed
    in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to use ClamAV to perform a scan; as per our
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a first step, we will check the Help menu of the tool, to see the different
    options supported by ClamAV, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/994cc242-2d72-459e-9546-c6caba67bd8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As seen in the following screenshot, ClamAV supports various options to be
    used during scanning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b86e75dd-4d77-4460-8fb1-b4925aa1feca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now start the scan on the `/home` directory, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2bcd0143-9511-4230-b33f-0fffc1624b73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the scan completes, it shows a scan summary as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de95d551-0bbf-4a3d-b2a4-9218c666e5ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also run the scan using the GUI version. After opening the tool, we
    change the scan settings, by clicking on Settings. This will open a window as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c776481-b7fa-4f4f-96e8-6b53f5ced102.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding window, check or uncheck the options as per our requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on Scan a file or Scan a directory to begin the scan accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8b725f78-30fa-4830-97e1-ac613967bade.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The scan will start running as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e4f75832-5b9f-41ac-abb8-0cf338398b34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the scan completes, it will either display the findings or else show a
    the following message, if no threats are found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/01ace307-c67c-4052-8ba5-adbad03696b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By clicking on Update, we can check for signature updates available for the
    software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/47dacb3d-cf88-4e48-b215-192b004d3dee.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ClamAV** is a versatile tool and supports multiple file formats and multiple
    signature languages, which most viruses would use to exploit systems. It can perform
    multithreaded scans.'
  prefs: []
  type: TYPE_NORMAL
- en: Finding rootkits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Servers that are connected to the internet nowadays face a constant daily attacks.
    As a system administrator, it is recommended you keep a check regularly to ensure
    that no attacker has been able to get in.
  prefs: []
  type: TYPE_NORMAL
- en: By using different tools, we can keep a check on malware and rootkits, from
    getting installed on our servers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no specific requirements to use the scanning tools on our Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to install and configure Linux rootkit scanning
    tools and use as per our requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we will install `chkrootkit`, a classic rootkit scanner for
    Linux, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cdfadde7-8f57-4f2a-8860-4bcd75546e23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the software has been installed, we can check the path where the software
    has been installed by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c47c2f6c-1545-4538-be7f-ec0bacb7980d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we check the Help menu to understand the options that can be used to
    run the tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/69a3f2d4-714a-46c1-baf2-1fd0a8b90f71.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to see the list of available tests in chkrootkit, we can run the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6085af77-e95f-4966-8189-3b57f7515b75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s start the scan as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/817e7d19-d931-42a4-ace0-7830d7300f2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the scan output, the software is checking for all known rootkit
    signatures:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07a656cf-e224-43b3-9c84-756c54fd2283.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another well-know tool that can be used for scanning rootkits is `rkhunter`.
    Install the tool by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2566bf41-5426-46ba-a127-0e81a08ca044.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, check the Help menu to see the options that can be used when running
    the software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3afcc33d-9bd9-470e-8bbd-e8b3a2d40bee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, start the scan as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/750cfdbd-ff6e-4689-9261-2caccc64185a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As seen in the output, all known rootkit signatures have been checked and none
    were found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fde92c07-f971-46a8-8d44-75c9f7b4946c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, when the scan completes, the tool will show a scan summary as seen
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c11f4ea-83f5-43e5-8628-0f1b2e5a1a11.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chkrootkit and rkhunter are both open source Linux-based rootkit scanner tools
    that help in scanning for rootkits, which may be present in the Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: Both the tools use signature based scanning to check for rootkits and any other
    malware on the Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: Using the auditd daemon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about securing a system, this it includes many procedures and auditing
    the system is one of them. The Linux system has a preinstalled tool named **auditd**,
    which is responsible for writing audit records on to the disk.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no specific requirements to use auditd on a Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to use auditd, for the purpose of auditing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the tool is not already installed on our Linux distribution, we can install
    it by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When the package is installed, it also installs a few other tools as part of
    the installation process. One of the tools installed is `auditctl` which helps
    in controlling the behavior of the software and also in adding rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can check the version of the tool by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/764dc05a-b374-4f20-b7f4-52439f17df93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When auditd is installed for the first time, it does not have any rules available
    yet. This can be checked by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa9b87a7-ae10-4789-b65f-87fe1aaaba5c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s see the Help menu to check for other options that can be used with
    the tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/13e67e3d-9846-4fc8-9f12-620802d4bfe8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To start using the `auditd` tool, it is necessary to have rules. We can add
    rules for auditing a file as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3d9a2f51-01cf-48a6-acb2-a0446e4ef2a6.png)'
  prefs: []
  type: TYPE_IMG
- en: In the previous command, the `-w` option will tell auditd to keep a watch on
    the file specified. The `p` option specifies the permissions for which auditd
    should trigger. And then `wxa` refers to read, write, execute, and attribute,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also add rules for keeping a watch on directories, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36b77be8-3610-4cca-8f99-483869db5c4a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we now check the list of rules, we get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/adf32b9c-ee8d-496f-9634-8c4dd623c4b1.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`auditd` helps in defining rules, based on which it will keep a watch on the
    files and directories specified. If any changes are made to those files and directories,
    then `auditd` will trigger based on the rules that have been defined.'
  prefs: []
  type: TYPE_NORMAL
- en: Using ausearch and aureport to read logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we have seen how the auditd tool can be used to define
    rules and keep watch on particular files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: To retrieve data from the auditd log files, we can use the `ausearch` tool and
    by using `aureport`, we can generate reports based on these logs.
  prefs: []
  type: TYPE_NORMAL
- en: '`ausearch` is a command-line tool that is used to search the log files of the
    auditd daemon on the basis of events and other search criteria.'
  prefs: []
  type: TYPE_NORMAL
- en: Similary, `aureport` is also a command-line tool that helps in creating useful
    summary reports from the log files of the audidt daemon.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we install the auditd daemon, it will also install the ausearch and aureport
    tool along with it. So no extra installation is needed to use these tools.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to use ausearch and aureport tools to read
    the log files of the auditd daemon and create reports from them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default location to find the logs of auditd is `/var/log/audit/audit.log`.
    If we view the content of this file, we get an output as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/66f71006-0deb-484e-8a39-914dc407a01d.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in this output, the log contains lots of data, and us it is difficult
    to get a specific information from this file, just by viewing its content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, we will use `ausearch` to search through the logs in a more powerful
    and efficient way. First, we check the help file of the tool to understand the
    options that can be used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2307eb9d-8a64-4749-aaf8-1f672b04bb47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Suppose we want to check the logs related to a particular running process;
    we can do this by using the `-p` flag and passing the process ID to the `ausearch`
    command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f25213f0-8ff1-4d6e-ad8e-7aefe661c798.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in this output, now the information is displayed only for the
    particular process ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to check failed login attempts of the user account, we can do so
    by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4ce998d3-b9a9-46a7-96b5-497915899be4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To find the user activity of any particular user account, we can run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/15f515d7-21f5-41e7-887a-008b2b5e9870.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding command, `pentest` is the username we want to query for.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use `ausearch` to query for the actions performed by any user in
    a given period of time. In the following command, we use `-ts` for start date/time
    and `-te` for end date/time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5ed92c4b-385a-47c8-ba73-2a833d5b3a46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to create a report based on the audit rule keys, added by the auditd
    daemon, we can use the following command, using the `-k` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e2c139a-f761-4afc-bb08-79159a8e6a38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to convert numeric entities into text (such as UID to account name),
    in the report created by using the preceding command, we can add the `-i` flag,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/581dd5aa-c190-458c-bc60-eb3eb325569c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To create a report regarding events related to user authentication, we can
    use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/560574b8-aa7c-4fb9-bfe5-d077335141f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To create a report of all logins, we use the `-l` flag as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21855408-41f4-4f6e-a433-867025a9d906.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to see a report of failed login events, we can use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c6e9a29-ee6a-4b8d-8ac1-66939d1032ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similar to `ausearch`, we can use `aureport` to create a report for a specific
    period of time, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf39122d-bdc6-4fbf-8947-587aa036633a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ausearch and aureport work along with the auditd daemon. Using the log files
    where auditd logs the event data, ausearch can help us read through the logs as
    per our requirements. Similarly, using aureport, we can create useful reports
    based on the log files of the auditd daemon.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing system services with systemctl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Systemd** is an init system and also a system manager, and it has become
    the new standard for Linux systems. To control this init system, we have a central
    management tool, called systemctl. Using systemctl, we can check services status,
    manage the services, change their states, and work with their configuration files.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the Linux distributions have implemented systemctl, so it comes preinstalled.
  prefs: []
  type: TYPE_NORMAL
- en: If any particular Linux distribution does not have it preinstalled, this implies
    that the particular Linux distribution is not using the init system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will discuss how to use the systemctl command to perform
    various actions on the services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To confirm if our Linux distribution supports systemctl, we can just run the
    command `systemctl`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9305c09-0b3a-47fd-a230-c9dccd83de7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we get output as shown here, it confirms that the command is working. If
    we receive an error, `bash: systemctl is not installed`, it implies the system
    does not support the command as it is using some other init system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to check the status of any particular service, such as SSHD service,
    we can use `systemctl` as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e26d107-46b6-41e7-b573-f9bf1d6edc5d.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shown clearly tells us that the SSHD service is running fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To stop or start any service, we use the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a5c0549-d27a-4f62-94a8-38329d29aa25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use `systemctl` to restart a running service. Also, if any particular
    service supports reloading its configuration files (without restarting), we can
    do so using the `reload` option with the `systemctl` command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/982cd36a-4f87-4d48-a64b-f841cb8b25cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use the `systemctl` command to see the list of all active units that
    systemd knows about, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9902bd99-d69a-49c1-990e-68071c6f69e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At times, we may want to see a particular service''s dependency tree. This
    can be done by using the `systemctl` command as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6840785c-7d81-452a-8f9c-bc1a3dcbf026.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`systemctl` allows us to interact with and control the `systemd` instance.
    We use `systemctl` utility for any type of service and system state management.'
  prefs: []
  type: TYPE_NORMAL
- en: Using different options with the `systemctl` command, we can perform different
    activities with the services.
  prefs: []
  type: TYPE_NORMAL

- en: Chapter 6. Configuring Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look how to manage hard disks in the FreeNAS server
    and how to configure them to form RAID sets that improve fault tolerance and increase
    drive performance.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The essence of the FreeNAS server is to provide storage that is easily accessible
    from the network. To this end, it is important to understand how FreeNAS handles
    the storage or more specifically hard disks and how they can be configured and
    used to provide the best and most reliable storage for your network. In this chapter,
    we shall use the words storage and hard disk almost interchangeably. Technically,
    a hard disk is a type of storage and there are many other types of storage besides
    hard disks, but as FreeNAS is primarily concerned with using hard disks as storage,
    the two terms will at times seem like one. The only exception to this will be
    when we look at iSCSI, as iSCSI allows remote storage to be added to the FreeNAS
    server as if it was a local hard disk. Of course, ultimately the remote storage
    is also a hard disk!
  prefs: []
  type: TYPE_NORMAL
- en: How FreeNAS Handles Data Disks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in Chapter 2, adding storage to the FreeNAS server is done in
    4 steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The FreeNAS server is "told" about a physical hard disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. This disk is formatted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3\. The resulting storage space is mounted and made available internally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4\. The mounted storage space is made available on the network via services
    like CIFS and NFS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Step one, telling the FreeNAS server about the disks at its disposal is handled
    in Disks: Management. On opening this page, you will see a list of disks that
    are already configured and using the add circle you have the possibility to add
    more. To add a disk, click the add circle and you will be taken to the **Disks:
    Management: Disk: Add** page.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How FreeNAS Handles Data Disks](img/4688_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The most important field on this page is the **Disk** field where you select
    which disk you want to add to the FreeNAS configuration. You can select the disk
    using a drop down box.
  prefs: []
  type: TYPE_NORMAL
- en: UNIX Device Names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a UNIX type operating systems, including FreeBSD, devices like hard disks
    are usually referred to by a slightly cryptic name which looks something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It isn't actually all that difficult once you understand how the name is made
    up. The first bit `/dev` is easy. It is a special directory on the server that
    holds information about all the devices on the system, where dev is short for
    device. Therefore, all devices start with `/dev`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part is the device itself. Here, it can be a bit more complicated,
    but `ad0` means `disk 0`, or the first hard disk as listed in the BIOS. Here is
    a table with some common device names:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Free BSD device name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| /dev/ad* | ATA and SATA hard disks |'
  prefs: []
  type: TYPE_TB
- en: '| /dev/da* | SCSI and USB flash storage |'
  prefs: []
  type: TYPE_TB
- en: '| /dev/acd* | IDE CD drives |'
  prefs: []
  type: TYPE_TB
- en: '| /dev/cd* | SCSI CD drives |'
  prefs: []
  type: TYPE_TB
- en: '| /dev/fd* | Floppy disks |'
  prefs: []
  type: TYPE_TB
- en: The `*` is a wild card, which in the real world is a number starting from 0\.
    So `/dev/da2` is the 3^(rd) (as it starts from 0) SCSI hard disk in the system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**RAID Controllers**'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a hardware RAID controller, for the disks attached it, don't
    use the standard device names for each disk. Instead, these RAID controllers present
    a virtual disk for each RAID set, using a device named after the RAID controller
    driver. For example, the *amr* driver (which supports controllers by MegaRAID
    and some Dell and Intel cards) presents its virtual disks as `/dev/amrd*`. Also,
    some RAID cards present their hard drives as `/dev/da*` devices.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Disk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have selected the right disk from the drop down box, you can normally
    just go ahead and click **Add**. However, there are some parameters that you can
    tweak and the final field **Preformatted FS** needs to be set correctly if this
    disk is already formatted and has data on it.
  prefs: []
  type: TYPE_NORMAL
- en: '| Disk parameter | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| UDMA mode | Normally, the interface speed of you hard disk is automatically
    detected. You can force interface speed (called the UDMA mode) if you have ''UDMA_ERROR....
    LBA'' message with your hard drive. |'
  prefs: []
  type: TYPE_TB
- en: '| Hard disk standby time | Puts the hard disk into standby mode when the selected
    amount of time after the last access has elapsed. Do not use this with flash memory
    devices. |'
  prefs: []
  type: TYPE_TB
- en: '| Advanced Power Management | This allows you to lower the power consumption
    of the drive, at the expense of performance. Success will vary depending on your
    BIOS and hard disk. Do not use this with flash memory devices. |'
  prefs: []
  type: TYPE_TB
- en: '| Acoustic level | This allows you to set how loud the drive is while it''s
    operating. Success will vary depending on your BIOS and hard disk. Do not use
    this with flash memory devices. |'
  prefs: []
  type: TYPE_TB
- en: '| Pre-formatted FS | This allows you to set the file system type for pre-formated
    disk with data. Leave ''unformatted'' for an unformatted disk and then use format
    menu for format it. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Don''t Erase Existing Data by Mistake**'
  prefs: []
  type: TYPE_NORMAL
- en: If you have converted an existing server into a FreeNAS server or you have put
    disks in your FreeNAS server with data already on them, then you need to be sure
    you set the **Preformatted FS** field correctly. Apart from the native UFS format
    of the FreeBSD, FreeNAS supports FAT32, NTFS, and EXT2.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have selected the disk from the drop down menu and set any of the optional
    parameters, you can click the **Add** button. Don't forget you also need to apply
    the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Disks: Management** page will now show your disk(s) in a table including
    information about the disk name, size, and file system.'
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to format the disk.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting a Newly Added Disk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the disk has been *added* to the FreeNAS server, it needs to be formatted.
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Go to the **Disks: Format** page.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '2\. Select which disk you wish to format. Only the disks you have added in
    the **Disks: Management** page are available to be formatted. If the disk you
    want to format doesn''t appear in the drop down list, then go back to the **Disks:
    Management** page and check that your disk has been added correctly.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3\. Next, you must choose the file system you want to use on this disk. The
    default will be UFS and unless you specifically need FAT32 or EXT2, it is best
    to format the disk with UFS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**UFS is Best**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: UFS is the NATIVE file format for FreeBSD (the underlying OS of FreeNAS). Attempting
    to use other file formats such as FAT, FAT32, EXT2, EXT3, or NTFS can result in
    unpredictable results, file corruption, and loss of data!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 4\. You can also enter an optional volume label for the disk, but it isn't very
    useful as it isn't used in the FreeNAS web interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5\. Leave the minimum free space percentage at its default 8% as lowering the
    threshold can adversely affect performance and auto-defragmentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 6\. The final option allows you to tweak the way the disk is formatted, specifically
    to not replace the Mater Boot Record (MBR) with a new one during the format process.
    Normally, this shouldn't be needed but some hardware RAID cards store information
    in the MBR. If you find that the drive doesn't format correctly and you are using
    a hardware RAID card, you can try formatting the disk with the option enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 7\. Once you click **Format Disk**, you will asked if you are sure that you
    wish to format the disk. Click **OK** to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output of formatting the disk will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Formatting a Newly Added Disk](img/4688_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The key is to look for the **Done!** comment at the end and the long list of
    superblock numbers before it. If you see that, then everything is OK. If the formatting
    failed for some reason then before the **Done!**, you will see an error message.
    For example if spaces aren''t permitted in the volume label, trying to format
    a disk like this will result in the last lines of the output reading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Mounting Your Newly Formatted Disks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have formatted the disk, you need to make it available internally in
    the FreeNAS server. This processing is called *mounting* the disk and is a term
    left over from the early days of computing when an operator had to mount a magnetic
    tape or hard disk on a spindle before using it. Mounting a disk makes it available
    for use within the server and only previously *added* and *formatted* disks can
    be mounted.
  prefs: []
  type: TYPE_NORMAL
- en: '1\. To mount a disk go to **Disks: Mount Point** and click the add circle.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are five important fields to fill in here: **Type, Disk, Partition, File
    System**, and Name.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Partitions**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To partition a disk means to divide it into parts. All disks need at least one
    partition and having a single partition means using the whole disk. It is also
    possible to partition a disk into many parts. Under FreeNAS, if you install the
    server software on a hard disk, then two partitions are created, the first for
    the operating system software and the second for data. When mounting disks, you
    need to know which partitions you wish to mount.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, FreeNAS doesn't use the legacy method to partition disks, which
    involved storing the partition data in the Mater Boot Record (MBR); instead it
    used the GUID Partition Table (GPT) which is part of the Extensible Firmware Interface
    (EFI) standard proposed by Intel as a replacement for the soon to be obsolescent
    PC BIOS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Type:** Here, you can select if you want to mount a disk or an ISO file.
    For new physical disks, you need to select disk. The ISO option is useful if you
    have an `.iso` file and you wish to make its contents available on your network.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disk:** Select the disk which you wish to mount. This will be the same disk
    as you used in the **Disks: Management** (to add the disk) and **Disks: Format**
    (to format it).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partition:** If you have just formatted this disk using FreeNAS, then you
    will need to select EFI GPT here. If your disk has previous data on it then you
    need to select which partition the data is on. If you have installed FreeNAS on
    a disk and you want to use the rest of the disk for data then select 2.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File System:** For disks that have been formatted using FreeNAS, you need
    to select UFS. If you have chosen to use another file system format or the disk
    already had data on it, you need to select the appropriate file system type (one
    of FAT, NTFS, EXT2).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name:** Each mounted disk needs a name to distinguish it from other disks.
    It does seem possible to use spaces in the name but for safety I would recommend
    using a simple single word mount point name. The name specified will used to mount
    the disk under the **/mnt** directory on the FreeNAS server, so if we used *store2*
    then the disk will be mounted on **/mnt/store2** and that would be the name used
    to share the disk on the network using CIFS etc.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description:** You can fill in an optional description for this mount point.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Read only:** Tick this to mount the file system as read-only, even the Administrator
    account (super user/root) may not write it.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Using Disks Formatted under Older Versions of FreeNAS**'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: If your disks were configured using a version of FreeNAS prior to version 0.683b
    then you need to manually select partition 1 for a UFS formatted drive or software
    RAID volume. The *File System* type should be set to UFS.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 2\. Once you have filled in all the data, click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3\. You will be shown a table with a list of the mounted drives on the FreeNAS
    server. Their status will be listed as **Configuring**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4\. You now need to click **Apply changes**. Once the changes have been applied,
    the newly displayed table should include the new mount point with the status of
    OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making the New Disk Available on the Network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the new disk is formatted and mounted, it can be made available on
    the network. To do this, enable the appropriate network services like CIFS, NFS,
    and AFP and if necessary, (for example with CIFS) add the new disk as a shared
    resource. For NFS and AFP, all mounted drives are automatically shared. See chapter
    4 for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Software RAID on FreeNAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FreeNAS has the ability to combine disks and either use them in a concatenated
    manner (meaning they are added together and will appear as one large disk) or
    use them together for redundancy and improved performance (by spreading the data
    across several disks). Using many disks in a set like this is called a RAID (Redundant
    Arrays of Inexpensive Disks) configuration. We looked at RAID in some detail in
    Chapter 3 but to save you from turning there again, here is a summary (you will
    need to go back to Chapter 3 if you need more details).
  prefs: []
  type: TYPE_NORMAL
- en: RAID is a system that divides and duplicates data across several hard disks.
    Depending on which scheme you use, your data is copied, in full or in part, across
    other disks in the RAID set, and if one of those disks fails, the other disks
    (with the copy of the data) continue to work and the data as a whole remains intact.
  prefs: []
  type: TYPE_NORMAL
- en: 'FreeNAS supports several different RAID configurations that are called RAID
    levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '**JBOD** (Just a Bunch of Disks): This is simple form of disk concatenation,
    the resulting disk appears as one large disk and there is no attempt to spread
    the data across the two disks. Data that falls in the first half of the RAID disk
    is written to disk 1, and data in second half to disk 2\. There is no fault tolerance.'
  prefs: []
  type: TYPE_NORMAL
- en: '**RAID 0** (Striped set without redundancy): RAID 0 is a way of joining two
    disks together to create one big disk. The data is interleaved between the two
    disks and so it improves performance but there is no fault tolerance.'
  prefs: []
  type: TYPE_NORMAL
- en: '**RAID 1** (mirroring): Here, two disks are used with one disk mirroring the
    contents of the other disk. If either of the disks fails, the RAID continues using
    the remaining disk. When the faulty disk is replaced, the new disk will be synchronized
    with the good disk and the mirroring will continue as before.'
  prefs: []
  type: TYPE_NORMAL
- en: '**RAID 5** (striped set with distributed parity): This is one of the most popular
    and arguable one of the most useful RAID levels. It allows you to combine a larger
    number of physical disks, and still maintain some redundancy. RAID 5 can be used
    on three or more disks. If one disk fails, the data remains intact. RAID 5 can
    survive one disk failure.'
  prefs: []
  type: TYPE_NORMAL
- en: RAID All Starts with Adding the Disks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step in configuring a RAID set is in the adding of disks on the **Disks:
    Management** page. Click the add circle and select the first disk you wish to
    make part of a RAID set. You do this by selecting it from the drop down box of
    available disks. You can''t use a disk that is already mounted.'
  prefs: []
  type: TYPE_NORMAL
- en: The trick now is to set the **Preformatted FS** field to **Software RAID**.
    This isn't instantly obvious as the disk isn't pre-formatted and in fact, it will
    be formatted later, but in essence what is happening is that this disk is being
    marked as a disk available for software RAID. Then, in the next step, when the
    RAID set is defined, it will appear in the list of disks available for RAID.
  prefs: []
  type: TYPE_NORMAL
- en: '![RAID All Starts with Adding the DisksRAIDRADI 5, levels](img/4688_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **Add**, and then on **Apply changes**. The list of disks will now
    show the disk added but notice now that the File system column says, SoftRaid
    and not UFS.
  prefs: []
  type: TYPE_NORMAL
- en: You need to add at least two disks to use JBOD, RAID 0, and RAID 1\. For RAID
    5, you need at least 3 disks. Repeat the above procedure to add the other disks.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to add the disk together to make a RAID set (sometimes referred
    to as a RAID array). The process is almost identical for all the RAID levels.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring RAID 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To define a RAID 1 set, go to the **Disks: Software RAID** page. The title
    of the initial page will read **Disks: Geom Mirror: Manage RAID**. At the top,
    there is a series of tabs to select other RAID pages including JBOD, RAID 0, RAID
    1, and RAID 5.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**GEOM**'
  prefs: []
  type: TYPE_NORMAL
- en: GEOM is FreeBSD's disk management system. GEOM provides an infrastructure system
    that allows the FreeBSD developers to easily write modules for different types
    of disk functionality. The RAID capabilities of the FreeNAS server come from Geom
    Concat, Geom Stripe, Geom Mirror, and Geom Raid5 modules.
  prefs: []
  type: TYPE_NORMAL
- en: To set up mirroring, you need two disks where one will be the mirror of the
    other i.e. if one fails then the other disk works in its place. During read operations
    from the disk set, either disk can be used to fetch the data and so read performance
    is significantly improved.
  prefs: []
  type: TYPE_NORMAL
- en: To create a RAID array, click on the add circle. In essence, to get the RAID1
    array working, you need to enter an array name of your choosing and then tick
    the disks that are part of the array. Finally, click **Add**.
  prefs: []
  type: TYPE_NORMAL
- en: The array name should be descriptive and you should consider using useful information
    in the name like the type of raid and the size of the disks, so a mirror of two
    80GB disks could be called *mirror80gb* or *80gbraid*1 etc.
  prefs: []
  type: TYPE_NORMAL
- en: The **Members of this volume** field offers a list of disks that have been previously
    added to the system with the **Preformatted FS** field set to **Software RAID**.
    Tick each disk you want to include in the RAID array.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Mixing Your Buses**'
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to uses IDE, SCSI, and SATA disks in RAID arrays and mix and
    match them. On a "professional" server, there are often several SCSI cards and
    disks, used from different SCSI cards to make the array. The reason for this is
    to limit the load on any one part of the system. So, you might find that performance
    increases by say using SATA and SCSI together. Of course, any performance benefit
    will be nulled if one of the disks is physically significantly slower that the
    other. Here, the bottleneck becomes the disk itself and not the interface servicing
    it. This might be the case if you have fast, expensive SCSI drives but only "consumer"
    level SATA drives, mixing the disks here won't improve you overall system speed.
  prefs: []
  type: TYPE_NORMAL
- en: With RAID1, there is one other option that isn't available in the other RAID
    configurations and that is the **Balance algorithm**. FreeBSD offers 3 different
    algorithms for controlling how data is read from the mirror set.
  prefs: []
  type: TYPE_NORMAL
- en: '**Round-robin read:** Here, the disks are used in turn to read data from the
    RAID array and hence the load is equally split over the two.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Split request:** Here, larger read requests are split into two requests and
    one sent to disk1 and the other to disk2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Read from lowest load:** This attempts to read from this disk with the lowest
    load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is generally considered that the round-robin balance algorithm is the best.
    You can of course, try the other settings and see if you get any performance increases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on **Add**, the RAID array will start to be formed. Creating
    a RAID array isn''t an instant thing and sometimes several minutes (or even hours)
    can pass before the array is set up. Don''t forget also to apply the changes.
    The **Disks: Software RAID** page will keep you up-to-date on the status of the
    array. When the array is forming, the status of the array will be listed as **Configuring**
    and when the array is ready it will read **COMPLETE**. You will need to keep going
    back to the **Disks: Software RAID** page to check the progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring RAID 1](img/4688_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From here, this RAID set is considered by FreeNAS as a single disk. Of course,
    it is made up of two disks, but logically, it is now one disk. It can be formatted,
    mounted, and shared on the network just like any other disk.
  prefs: []
  type: TYPE_NORMAL
- en: So, once the array is ready, the next step is to format it. **Don't try and
    format the array before it is ready**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Disks: Format** page. Find the RAID set in the drop down disk menu.
    It will be named according to the name you gave the mirror when you created the
    array followed by its size and finally, by **Software gmirror RAID 1**.'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the **File system** is set to UFS, enter the optional volume name
    and click **Format disk**. Confirm that you want to format the mirror and just
    like formatting a single drive, you will see the output of the commands used to
    format the RAID set and it should end with list of super block numbers and the
    reassuring **Done!**
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the disk can be mounted exactly like any other disk. To mount the disk,
    go to **Disks: Mount Point** and click the add circle. Select the disk from the
    drop down menu. On the format page, it will be named according to the name you
    gave the mirror when you created the array followed by its size and finally, by
    **Software gmirror RAID 1**. Make sure that the **Type** is **Disk, Partition**
    is **EFI GPT** and the **File system** is **UFS**. Enter the name for the mount
    point and click **Add**. Apply the changes and your disk is now ready and mounted.
    It can now be exported to the network using CIFS, NFS and AFP as before.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring RAID 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RAID 5 uses the striping of RAID 0 but now with three disks in the array parity
    data is also stored. If one disk fails, the data remains intact. Configuring a
    RAID 5 set is very similar to that of a RAID 1, except that a RAID 5 array must
    have at least 3 disks.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a RAID 5 set, go to the **Disks: Software RAID** page, and click
    on the **RAID 5** tab. Now click the add circle. The page to define the RAID array
    is very similar to that of RAID 1\. Enter a name for the array (remembering to
    be descriptive) and then tick the disks that you want to include in the array
    (with a minimum of 3).'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Add the RAID array** to start off the formation of the array. Apply
    the changes and wait for the array to become ready. Revisit the RAID 5 page until
    the status reads **COMPLETE**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Disks: Format** page. Find the RAID set in the drop down disk menu.
    It will be named according to the name you gave the RAID 5 set when you created
    the array followed by its size and finally by **Software graid5 RAID 5**.'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the **File system** is set to **UFS**, enter the optional volume name
    and click **Format disk**. Confirm that you want to format the logical disk and
    just like formatting a single drive, you will see the output of the commands used
    to format the RAID set and it should end with list of super block numbers and
    the reassuring **Done!**
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the disk can be mounted exactly like any other disk. To mount the disk,
    go to **Disks: Mount Point** and click the add circle. Select the disk from the
    drop down menu. As on the format page, it will be named according to the name
    you gave the RAID 5 set when you created the array followed by its size and finally,
    by **Software graid5 RAID 5**. Make sure that the **Type** is **Disk, Partition**
    is **EFI GPT** and the **File system** is **UFS**. Enter the name for the mount
    point and click **Add**. Apply the changes and your disk is now ready and mounted.
    It can now be exported to the network using CIFS, NFS and AFP as before.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring JBOD or RAID 0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JBOD (Just a Bunch of Disks) and RAID 0 (Stripe set) are configured in a very
    similar way to RAID 1\. Go to the **Disks: Software RAID** page, and click on
    the **JBOD** or **RAID 0** tab as required. Now click the add circle. The page
    to define the RAID array is very similar to that of RAID 1\. Enter a name for
    the array (remembering to be descriptive) and then tick the disks that you want
    to include in the array.'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Add the RAID array** to start off the formation of the array. Apply
    the changes and wait for the array to become ready. Revisit the page until the
    status reads **COMPLETE**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Disks: Format** page. Find the RAID set in the drop down disk menu.
    It will be named according to the name you gave the RAID set when you created
    the array followed by its size and finally, by **Software gconcat JBOD** or **Software
    gstripe RAID 0** for JBOD and RAID 0 respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the logical RAID disk can be mounted exactly like any other disk. To mount
    the disk go to **Disks: Mount Point** and click the add circle. Select the disk
    from the drop down menu. It will be named as it was in the format page. Make sure
    that the **Type** is **Disk, Partition** is **EFI GPT** and the **File system**
    is **UFS**. Enter the name for the mount point and click **Add**. Apply the changes
    and your disk is now ready and mounted. It can now be exported to the network
    using CIFS, NFS and AFP as before.'
  prefs: []
  type: TYPE_NORMAL
- en: Nested RAID Configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Nested RAID Configurations](img/4688_06_Graphics.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As well as the standard RAID levels, it is possible to create hybrid levels
    by combining one logical RAID disk with another logical RAID disk in a new RAID
    array. This is sometimes called nesting RAID levels.
  prefs: []
  type: TYPE_NORMAL
- en: For example you can configure two disks to be a RAID 1 mirror and then another
    two disks to be a second RAID 1 mirror. These two mirror sets can be combined
    with RAID 0 to make a new striped RAID set.
  prefs: []
  type: TYPE_NORMAL
- en: There are many possible combination of RAID levels, of which some of the most
    popular are RAID 1+0, RAID 0+1, RAID 5+0, and RAID 5+1.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, these hybrid RAID level are named without the plus sign, so RAID
    1+0 becomes RAID 10, RAID 5+1 becomes RAID 51, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Read the RAID Levels Backwards**'
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way to understand what each RAID level means is to read the RAID
    levels backwards, so RAID 1+0 is a RAID 0 array at the highest level made up of
    RAID 1 sets beneath it. Alternatively, it might help you picture it by understanding
    that as you read from left to right you are going up the nested RAID tree with
    the first RAID level being at the bottom, working with the actual hard disks.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring RAID 1+0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RAID 1+0 is a stripe of mirrors meaning the there are two (or more) RAID 1 (mirror)
    arrays and these are combined in a RAID 0 stripe set.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To create a RAID 1+0 set with FreeNAS, you will need at least 4 hard disks.
    Create two RAID 1 mirrors sets (which I will refer to as mirror1 and mirror2)
    as described in the *Configuring RAID 1* section above but do not format or mount
    the RAID arrays.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '2\. Go to the **Disks: Format** page and select **mirror1**. Change the **File
    system** to **Software RAID** and format the disk. The output will be short and
    simple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What has happened is that the RAID 1 mirror set, mirror1, as of now has itself
    been marked as a disk (albeit a logical disk) for software RAID.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Repeat the process for mirror2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '4\. Now, go back to the **Disks: Software RAID** page. On the **RAID 1** tab,
    the two mirror sets will be listed. Click on the **RAID 0** tab and then click
    the add circle.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first thing to notice is that in the **Members of this volume** field,
    there are now two additional disks listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Above them, will be the other 4 drives that you have used to create these two
    mirror sets. Also, notice that they are grayed out and you can't tick them for
    inclusion in another RAID set, which is of course correct as they are already
    in use for mirror1 and mirror2.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Enter the name for the RAID set, let's say **raid10** and then tick **mirror1**
    and **mirror2** to include them in the RAID array. Click **Add** and apply the
    changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 6\. Once the RAID is formed, its status will read **UP**. Once the RAID 1+0
    is **UP**, it can be formatted and mounted just like any other disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '7\. Go to the **Disks: Format** page. Find the RAID 1+0 set in the drop down
    disk menu. It will be named according to the name you gave the raid set when you
    created the array (**raid10**) followed by its size and finally by **Software
    gstripe RAID 0**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '8\. Now the logical RAID 1+0 disk can be mounted exactly like any other disk.
    To mount the disk, go to **Disks: Mount Point** and click the add circle. Select
    the disk from the drop down menu. It will be named as it was in the format page.
    Make sure that the **Type** is **Disk**, Partition is **EFI GPT** and the **File
    system** is **UFS**. Enter the name for the mount point and click **Add**. Apply
    the changes and your disk is now ready and mounted. It can now be exported to
    the network using CIFS, NFS, and AFP as before.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring RAID 0+1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RAID 0+1 is a mirror of two stripe sets. The key difference from RAID 1+0 is
    that RAID 0+1 creates a secondary stripe set to mirror the first striped set.
    A RAID 1+0 setup can cope with two disk failures as long as they are in the same
    stripe set or in other words, one whole side of the mirrored configuration can
    fail and the mirror will keep on working.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a RAID 0+1 configuration is similar to that of a RAID 1+0 set and it
    is best that you have read that section before you proceed here.
  prefs: []
  type: TYPE_NORMAL
- en: '1\. To create a RAID 0+1 set, two RAID 0 sets need to be created as described
    in the **Configuring JBOD or RAID 0** section. Let''s call these **raid0a** and
    **raid0b** After the sets have been created, they need to formatted as Software
    RAID on the **Disks: Format** page.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '2\. Now, go back to the **Disks: Software RAID** page. On the **RAID 0** tab,
    the two **raid0** sets will be listed. On the **RAID 1** tab, click the add circle.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Listed in the Members of this volume field will be the two RAID 0 sets, **raid0a**
    and **raid0b**.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Enter the name for the RAID set, let's say **raid01** and then tick **raid0a**
    and **raid0b** to include them in the RAID array. Click **Add** and apply the
    changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the RAID is formed, its status will read **COMPLETED**. It can now be formatted
    and mounted just like any other disk.
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Go to the **Disks: Format** page. Find the RAID 0+1 set in the drop down
    disk menu. It will be named according to the name you gave the RAID set when you
    created the array (**raid01**) followed by its size and finally, by **Software
    gmirror RAID 1**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '5\. Now the logical RAID 0+1 disk can be mounted exactly like any other disk.
    To mount the disk, go to **Disks: Mount Point** and click the add circle. Select
    the disk from the drop down menu. It will be named as it was in the format page.
    Make sure that the **Type** is **Disk, Partition** is **EFI GPT** and the **File
    system** is **UFS**. Enter the name for the mount point and click **Add**. Apply
    the changes and your disk is now ready and mounted. It can now be exported to
    the network using CIFS, NFS and AFP as before.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring RAID 5+0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RAID 5+0 is a stripe of RAID 5 sets meaning that there are two (or more) RAID
    5 (stripes with parity) arrays and these are combined in a RAID 0 stripe set.
    You need a minimum of 6 disks to build a RAID 5+0 array.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. To create a RAID 5+0 array, you must first create two RAID 5 sets called
    (for example) **raid5a** and **raid5b**. This is described in the *Configuring
    RAID 5* section. Do **not** format them as UFS disks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Configuring RAID 5+0](img/4688_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '2\. Go to the **Disks: Format** page and select **raid5a**. Change the **File
    system** to **Software RAID** and format the disk. The output will be short and
    simple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The RAID 5 set, **raid5a** is now marked as a disk (albeit a logical disk) ready
    for use in a software RAID set.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Repeat the process for raid5b.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '4\. Now, go back to the **Disks: Software RAID** page. On the **RAID 5** tab,
    the two RAID sets will be listed. Now click on the **RAID 0** tab and then click
    the add circle.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that in the **Members of this volume** field there are now two additional
    disks listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Above them will be the other 6 drives that you have used to create these two
    RAID 5 sets.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Enter the name for the raid set, let's say **raid50** and then tick **raid5a**
    and **raid5b** to include them in the RAID array. Click **Add** and apply the
    changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 6\. Once the RAID is formed, its status will read **UP**. Once the RAID 5+0
    is **UP** it can be formatted and mounted just like any other disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '7\. Go to the **Disks: Format** page. Find the RAID 5+0 set in the drop down
    disk menu. It will be named according to the name you gave the RAID set when you
    created the array (**raid50**) followed by its size and finally, by **Software
    gstripe RAID 0**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '8\. Now the logical RAID 5+0 disk can be mounted exactly like any other disk.
    To mount the disk, go to **Disks: Mount Point** and click the add circle. Select
    the disk from the drop down menu. It will be named as it was in the format page.
    Make sure that the **Type** is **Disk, Partition** is **EFI GPT** and the File
    system is **UFS**. Enter the name for the mount point and click **Add**. Apply
    the changes and your disk is now ready and mounted.It can now be exported to the
    network using CIFS, NFS, and AFP as before.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring RAID 5+1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A RAID 5+1 array is a mirror of two RAID 5 sets. Such a configuration can handle
    the failure of two disks as long as each disk is in a different RAID 5 set and
    multiple disk failures are inside the same RAID 5 set.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration of a RAID 5+1 is very similar to that of a RAID 5+0 set and you
    should familiarize yourself with the *Configuring RAID 5+0* section before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. As with RAID 5+0, you must first create two RAID 5 sets called (for example)
    **raid5a** and **raid5b**. This is described in the **Configuring RAID 5** section.
    Do **not** format them as UFS disks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '2\. Go to the **Disks: Format** page and select **raid5a**. Change the **File
    system** to **Software RAID** and format the disk. The RAID 5 set, **raid5a**
    is now marked as a disk (albeit a logical disk) ready for use in a software RAID
    set. Repeat the process for **raid5b**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '3\. Now go back to the **Disks: Software RAID** page. On the **RAID 5** tab,
    the two RAID sets will be listed. Now click on the **RAID 1** tab and then click
    the add circle.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that in the **Members of this volume** field there are now two additional
    disks listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Above them will be the other 6 drives which you have used to create these two
    RAID 5 sets.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Enter the name for the RAID set, let's say **raid51** and then tick **raid5a**
    and **raid5b** to include them in the RAID array. Click **Add** and apply the
    changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5\. Once the RAID is formed, its status will read **UP**. Once the RAID 5+1
    is **UP**, it can be formatted and mounted just like any other disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '6\. Go to the **Disks: Format** page. Find the RAID 5+1 set in the drop down
    disk menu. It will be named according to the name you gave the RAID set when you
    created the array (**raid51**) followed by its size and finally by **Software
    gmirror RAID 1**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '7\. Now the logical RAID 5+1 disk can be mounted exactly like any other disk.
    To mount the disk, go to **Disks: Mount Point** and click the add circle. Select
    the disk from the drop down menu. It will be named as it was in the format page.
    Make sure that the **Type** is **Disk, Partition** is **EFI GPT** and the **File
    system** is **UFS**. Enter the name for the mount point and click **Add**. Apply
    the changes and your disk is now ready and mounted. It can now be exported to
    the network using CIFS, NFS, and AFP as before.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: RAID 10+0 and Beyond
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As any RAID array can be formatted as **Software RAID** and then that logical
    disk used inside another RAID array, the number of permutations of nested RAID
    levels is endless, if not always useful. It is technically possible to create
    a mirror of a mirror (a RAID 1+1) or a RAID 5 of three mirror sets (a RAID 15)
    or a stripe of two RAID 15 arrays (a RAID 150—two RAID 5 sets of three mirrors
    sets) and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Another popular RAID format is the so called RAID 10+0 or RAID 100\. A RAID
    10+0 is a stripe of two RAID 10 sets. It is generally implemented using software
    RAID 0 over hardware RAID 10\. With FreeNAS, it is possible to implement it with
    just software.
  prefs: []
  type: TYPE_NORMAL
- en: For complicated RAID sets, the combination of hardware RAID and software RAID
    can be very powerful, along with the spreading of the load over different interface
    cards. Whatever your RAID needs, FreeNAS can almost certainly do it!
  prefs: []
  type: TYPE_NORMAL
- en: iSCSI Initiator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way to add storage to a FreeNAS server is via iSCSI. In Chapter 4, we
    looked at how the FreeNAS server can act as an iSCSI target, that is a remote
    hard disk that can be accessed by an iSCSI initiator (a client). We also saw how
    one FreeNAS server can initiate an iSCSI connection to another FreeNAS server
    and use the storage of the target server as if it was local storage.
  prefs: []
  type: TYPE_NORMAL
- en: The iSCSI technology in FreeNAS isn't only limited to working between FreeNAS
    servers. The FreeNAS server can also connect to Windows, Linux, and Solaris iSCSI
    targets. This way, it is possible to extend the storage capacity of your FreeNAS
    server using SCSI over IP.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate the FreeNAS server using iSCSI to a different platform, we shall
    look at using Windows.
  prefs: []
  type: TYPE_NORMAL
- en: There are several different iSCSI solutions for Windows including a special
    version of the Windows server called the Windows Storage Server. However, the
    Windows Storage Server is an OEM version of Windows and isn't available for consumer
    purchase. But there are other iSCSI solutions for Windows. A company called Rocket
    Division Software ([http://www.rocketdivision.com](http://www.rocketdivision.com))
    has a free (for personal use) iSCSI target solution called StarWind. It allows
    you to create RAM disks and images files and serve them as iSCSI targets.
  prefs: []
  type: TYPE_NORMAL
- en: To test FreeNAS with StarWind on Windows, you need to download and install the
    StarWind software. Use the documentation to familiarize yourself with the StarWind
    software and then create an iSCSI target called *istore*. This can be a RAM disk
    or an image file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing to watch when using iSCSI software on Windows is that you may need
    to explicitly open port 3260 in the Windows firewall for the connections to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the iSCSI initiator on FreeNAS, you need to:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. On the FreeNAS initiator server, go to the **Disks: Management** page and
    click on the **iSCSI Initiator** tab. Now click the add circle.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. Enter a name for the iSCSI disk, say **iSCSI0**. It isn't too important
    as it for information only (it is not using during iSCSI negotiation).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '3\. For the initiator name, enter: **iqn.1994-04.org.netbsd.iscsi-initiator:freenas**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '4\. For the target name, enter: **istore**, which is the target name your created
    in StarWind.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5\. Enter the IP address of the Windows target server. And then click **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '6\. Now back to the **Disks: Management** page. Click the add circle and select
    the iSCSI device from the Disk drop down menu. It should read something like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 7\. Add the disk in the normal way and apply the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '8\. Now the disk can be formatted from the **Disks: Format** page and mounted
    on the **Disks: Mount Point: Management** page exactly as we have done previously
    in the quick start guide in Chapter 2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, you will be able to use the disk via any of the protocols of your
    choosing including CIFS, NFS, AFP, and FTP.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked how FreeNAS handles disks and how these disks
    can be used in combination to create RAID sets that provide fault tolerance and
    improved performance compared to disks used in isolation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we shall look at the different backup strategies that can
    be used with the FreeNAS server.
  prefs: []
  type: TYPE_NORMAL

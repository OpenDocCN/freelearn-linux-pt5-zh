- en: Administration Calls
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理调用
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Gathering information about processes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集有关进程的信息
- en: What's what – which, whereis, whatis, and file
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种命令的功能 - which、whereis、whatis 和 file
- en: Killing processes, and sending and responding to signals
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 杀死进程，发送和响应信号
- en: Sending messages to user terminals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向用户终端发送消息
- en: The `/proc` filesystem
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/proc` 文件系统'
- en: Gathering system information
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集系统信息
- en: Scheduling with a `cron`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `cron` 调度任务
- en: Database styles and uses
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库风格与用途
- en: Writing and reading SQLite databases
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写和读取 SQLite 数据库
- en: Writing and reading a MySQL database from Bash
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Bash 编写和读取 MySQL 数据库
- en: User administration scripts
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户管理脚本
- en: Bulk image resizing and format conversion
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批量调整图像大小和格式转换
- en: Taking screenshots from the terminal
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从终端截屏
- en: Managing multiple terminals from one
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个管理多个终端
- en: Introduction
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Managing multiple terminals from one GNU/Linux ecosystem consists of the network,
    each set of hardware, the OS Kernel that allocates resources, interface modules,
    system utilities, and user programs. An administrator needs to monitor the entire
    system to keep everything running smoothly. Linux administration tools range from
    all-in-one GUI applications to command-line tools designed for scripting.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个 GNU/Linux 系统管理多个终端：GNU/Linux 生态系统由网络、硬件、操作系统内核（负责资源分配）、接口模块、系统工具和用户程序组成。管理员需要监控整个系统，以确保一切顺利运行。Linux
    管理工具从集成的图形用户界面应用程序到专为脚本设计的命令行工具不等。
- en: Gathering information about processes
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集有关进程的信息
- en: The term **process** in this case means the running instance of a program. Many
    processes run simultaneously on a computer. Each process is assigned a unique
    identification number, called a **process ID** (**PID**). Multiple instances of
    the same program with the same name can run at the same time, but they will each
    have different PIDs and attributes. Process attributes include the user who owns
    the process, the amount of memory used by the program, the CPU time used by the
    program, and so on. This recipe shows how to gather information about processes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，**进程**一词指的是程序的运行实例。计算机上同时运行着多个进程。每个进程都会分配一个唯一的标识号，称为**进程 ID**（**PID**）。同名的多个程序实例可以同时运行，但它们会拥有不同的
    PID 和属性。进程属性包括拥有进程的用户、程序使用的内存量、程序使用的 CPU 时间等。此教程展示了如何收集有关进程的信息。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Important commands related to process management are `top`, `ps`, and `pgrep`.
    These tools are available in all Linux distributions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与进程管理相关的重要命令有 `top`、`ps` 和 `pgrep`。这些工具在所有 Linux 发行版中都有提供。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何执行...
- en: '`ps` reports information about active processes. It provides information about
    which user owns the process, when the process started, the command path used to
    execute the process, the PID, the terminal it is attached to (**TTY**, for **TeleTYpe**),
    the memory used by the process, the CPU time used by the process, and so on. Consider
    the following example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps` 命令报告活动进程的信息。它提供有关哪个用户拥有进程、进程何时启动、执行进程的命令路径、PID、附加的终端（**TTY**，即**电传打字机**）、进程使用的内存、进程使用的
    CPU 时间等信息。考虑以下示例：'
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Be default, `ps` will display the processes initiated from the current terminal
    (TTY). The first column shows the PID, the second column refers to the terminal
    (TTY), the third column indicates how much time has elapsed since the process
    started, and finally we have CMD (the command).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`ps` 只会显示当前终端（TTY）启动的进程。第一列显示 PID，第二列表示终端（TTY），第三列表示自进程启动以来经过的时间，最后一列是
    CMD（命令）。
- en: The `ps` command report can be modified with command-line parameters.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps` 命令报告可以通过命令行参数进行修改。'
- en: 'The `-f (full)` option displays more columns of information:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`-f (full)` 选项显示更多列的信息：'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `-e` (every) and `-ax` (all) options provide a report on every process that
    is running on the system.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`-e`（所有）和 `-ax`（全部）选项提供了有关系统上所有正在运行进程的报告。'
- en: The `-x` argument (along with `-a`) specifies the removal of the default TTY
    restriction imparted by `ps`. Usually, if you use `ps` without arguments, it'll
    only print processes attached to the current terminal.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`-x` 参数（与 `-a` 一起使用）表示去除 `ps` 默认的 TTY 限制。通常，如果没有使用任何参数，`ps` 只会打印与当前终端连接的进程。'
- en: 'The commands `ps -e`, `ps -ef`, `ps -ax`, and `ps -axf` generate reports on
    all processes and provide more information than `ps`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `ps -e`、`ps -ef`、`ps -ax` 和 `ps -axf` 生成有关所有进程的报告，并提供比 `ps` 更多的信息：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `-e` option generates a long report. This example filters the output with
    `head` to display the first five entries.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The `-o PARAMETER1`, `PARAMETER2` option specifies the data to be displayed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Parameters for `-o` are delimited with a comma (`,`). There is no space between
    the comma operator and the next parameter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: The `-o` option can be combined with the `-e` (every) option (`-eo`) to list
    every process running in the system. However, when you use filters similar to
    the ones that restrict `ps` to the specified users along with `-o`, `-e` is not
    used. The -e option overrules the filter and displays all the processes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, `comm` stands for COMMAND and `pcpu` represents the percentage
    of CPU usage:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following parameters for the `-o` option are supported:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| `pcpu` | Percentage of CPU |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| `pid` | Process ID |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| `ppid` | Parent process ID |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '| `pmem` | Percentage of memory |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
- en: '| `comm` | Executable filename |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| `cmd` | A simple command |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| `user` | The user who started the process |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| `nice` | The priority (niceness) |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| `time` | Cumulative CPU time |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| `etime` | Elapsed time since the process started |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| `tty` | The associated TTY device |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| `euid` | The effective user |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| `stat` | Process state |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: There's more...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ps` command, `grep`, and other tools can be combined to produce custom
    reports.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Showing environment variables for a process
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some processes are dependent on their environment variable definitions. Knowing
    the environment variables and values can help you debug or customize a process.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ps` command does not normally show the environment information of a command.
    The `e` output modifier at the end of the command adds this information to the
    output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s an example of environment information:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Environment information helps trace problems using the `apt-get` package manager.
    If you use an HTTP proxy to connect to the Internet, you may need to set environment
    variables using `http_proxy=host:port`. If this is not set, the `apt-get` command
    will not select the proxy and hence returns an error. Knowing that `http_proxy`
    is not set makes the problem obvious.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'When a scheduling tool, such as `cron` (discussed later in this chapter), is
    used to run an application, the expected environment variables may not be set.
    This `crontab` entry will not open a GUI-windowed application:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It fails because GUI applications require the `DISPLAY` environment variable.
    To determine the required environment variables, run `windowapp` manually and
    then `ps -C windowapp -eo cmd e`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'After you''ve identified the required environment variables, define them before
    the command name in `crontab`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: OR
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The definition `DISPLAY=:0` was obtained from the `ps` output.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Creating a tree view of processes
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ps` command can report a process PID, but tracking from a child to the
    ultimate parent is tedious. Adding `f` to the end of the `ps` command creates
    a tree view of the processes, showing the parent-child relationship between tasks.
    The next example shows an `ssh` session invoked from a bash shell running inside
    `xterm`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`命令可以报告进程PID，但从子进程追踪到最终父进程很麻烦。将`f`添加到`ps`命令的末尾会创建一个进程树视图，显示任务之间的父子关系。下一个示例显示了从bash
    shell中运行的`ssh`会话，该会话是在`xterm`内启动的：'
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Sorting ps output
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对ps输出进行排序
- en: 'By default, the `ps` command output is unsorted. The -sort parameter forces
    `ps` to sort the output. The ascending or descending order can be specified by
    adding the `+` (ascending) or `-` (descending) prefix to the parameter:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`ps`命令的输出是未排序的。`-sort`参数强制`ps`对输出进行排序。可以通过在参数前添加`+`（升序）或`-`（降序）前缀来指定升序或降序：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For example, to list the top five CPU-consuming processes, use the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要列出前五个CPU占用率最高的进程，请使用以下命令：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This displays the top five processes, sorted in descending order by percentage
    of CPU usage.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这会显示前五个进程，按CPU使用百分比降序排序。
- en: 'The `grep` command can filter the `ps` output. To report only those Bash processes
    that are currently running, use the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`命令可以过滤`ps`输出。要仅报告当前正在运行的Bash进程，请使用以下命令：'
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Filters with ps for real user or ID, effective user or ID
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ps过滤真实用户或ID、有效用户或ID
- en: The `ps` command can group processes based on the real and effective usernames
    or IDs specified. The `ps` command filters the output by checking whether each
    entry belongs to a specific effective user or a real user from the list of arguments.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`命令可以根据指定的实际和有效用户名或ID对进程进行分组。`ps`命令通过检查每个条目是否属于有效用户或真实用户，从参数列表中过滤输出。'
- en: Specify an effective user's list with `-u EUSER1`, `EUSER2`, and so on
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-u EUSER1`、`EUSER2`等指定有效用户列表
- en: Specify a real user's list with `-U RUSER1`, `RUSER2`, and so on
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-U RUSER1`、`RUSER2`等指定真实用户列表
- en: 'Here''s an example of this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `-o` may be used with `-e` as `-eo` but when filters are applied, `-e` should
    not be used. It overrides the filter options.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`-o`选项可以与`-e`一起使用，如`-eo`，但当应用过滤器时，`-e`不应使用，它会覆盖过滤器选项。'
- en: TTY filter for ps
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ps的TTY过滤器
- en: 'The `ps` output can be selected by specifying the TTY to which the process
    is attached. Use the `-t` option to specify the TTY list:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`输出可以通过指定进程所在的TTY来选择。使用`-t`选项指定TTY列表：'
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here''s an example of this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Information about process threads
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程线程信息
- en: 'The `-L` option to `ps` will display information about process threads. This
    option adds an LWP column to the thread ID. Adding the `-f` option to `-L` (`-Lf`)
    adds two columns: NLWP, the thread count, and LWP, the thread ID:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`的`-L`选项将显示进程线程的信息。此选项会在线程ID旁边添加LWP列。将`-f`选项与`-L`（`-Lf`）一起使用会添加两列：NLWP（线程数）和LWP（线程ID）：'
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This command lists five processes with a maximum number of threads:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令列出了五个进程及其最大线程数：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Specifying the output width and columns to be displayed
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定输出宽度和要显示的列
- en: 'The `ps` command supports many options to select fields in order to display
    and control how they are displayed. Here are some of the more common options:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`命令支持多种选项来选择要显示的字段并控制其显示方式。以下是一些常见选项：'
- en: '| `-f` | This specifies a full format. It includes the starting time of the
    parent PID user ID. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `-f` | 这指定了一个完整的格式，包含父PID的启动时间、用户ID等。 |'
- en: '| `-u` userList | This selects processes owned by the users in the list. By
    default, it selects the current user. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `-u` userList | 选择由列表中的用户拥有的进程，默认选择当前用户。 |'
- en: '| `-l` | Long listing. It displays the user ID, parent PID, size, and more.
    |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `-l` | 长格式列出，显示用户ID、父PID、大小等信息。 |'
- en: What's what – which, whereis, whatis, and file
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是什么 – which、whereis、whatis和file
- en: There may be several files with the same name. Knowing which executable is being
    invoked and whether a file is compiled code or a script is useful information.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有多个文件具有相同的名称。知道正在调用哪个可执行文件以及文件是编译代码还是脚本是有用的信息。
- en: How to do it...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The `which`, `whereis`, `file`, and `whatis` commands report information about
    files and directories.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`which`、`whereis`、`file`和`whatis`命令报告文件和目录的信息。'
- en: '`which`: The which command reports the location of a command:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`which`：which命令报告命令的位置：'
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We often use commands without knowing the directory where the executable file
    is stored. Depending on how your `PATH` variable is defined, you may use a command
    from `/bin`, `/usr/local/bin`, or `/opt/PACKAGENAME/bin`.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们经常在不知道可执行文件存储目录的情况下使用命令。根据 `PATH` 变量的定义方式，你可能会使用来自 `/bin`、`/usr/local/bin`
    或 `/opt/PACKAGENAME/bin` 的命令。
- en: 'When we type a command, the terminal looks for the command in a set of directories
    and executes the first executable file it finds. The directories to search are
    specified in the `PATH` environment variable:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们输入命令时，终端会在一组目录中查找该命令，并执行它找到的第一个可执行文件。要搜索的目录由 `PATH` 环境变量指定：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can add directories to be searched and export the new `PATH`. To add `/opt/bin`
    to `PATH`, use the following command:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以添加要搜索的目录并导出新的 `PATH`。要将 `/opt/bin` 添加到 `PATH`，请使用以下命令：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**whereis**: `whereis` is similar to the which command. It not only returns
    the path of the command, but also prints the location of the man page (if available)
    and the path for the source code of the command (if available):'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**whereis**：`whereis` 类似于 which 命令。它不仅返回命令的路径，还打印命令的 man 页位置（如果有的话）以及命令源代码的路径（如果有的话）：'
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**whatis**: The `whatis` command outputs a one-line description of the command
    given as the argument. It parses information from the `man` page:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**whatis**：`whatis` 命令输出作为参数传递的命令的单行描述。它从 `man` 页解析信息：'
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `file` command reports a file type. Its syntax is as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`file` 命令报告文件类型。其语法如下：'
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The reported file type may comprise a few words or a long description:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告的文件类型可能包含几个词或一个长描述：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: apropos
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: apropos
- en: 'Sometimes we need to search for a command that is related to the topic. The
    `apropos` command will search the man pages for a keyword. Here''s the code to
    do this: **Apropos topic**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我们需要搜索与主题相关的命令。`apropos` 命令会在 man 页中搜索关键字。以下是执行此操作的代码：**Apropos 主题**
- en: Finding the process ID from the given command names
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从给定的命令名中查找进程 ID
- en: 'Suppose several instances of a command are being executed. In such a scenario,
    we need the PID of each process. Both the `ps` and `pgrep` command return this
    information:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 假设正在执行多个命令实例。在这种情况下，我们需要每个进程的 PID。`ps` 和 `pgrep` 命令都会返回此信息：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Alternatively, the following is returned:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，以下内容将被返回：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: When `=` is appended to `pid`, it removes the header PID from the output of
    `ps`. To remove headers from a column, append `=` to the parameter.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `=` 被附加到 `pid` 时，它会从 `ps` 的输出中移除 PID 标头。要从某一列中移除标头，只需在参数后附加 `=`。
- en: 'This command lists the process IDs of Bash processes:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令列出 Bash 进程的进程 ID：
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `pgrep` command also returns a list of process IDs for a command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`pgrep` 命令也会返回一个命令的进程 ID 列表：'
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`pgrep` requires only a portion of the command name as its input argument to
    extract a Bash command; `pgrep ash` or `pgrep bas` will also work, for example.
    But `ps` requires you to type the exact command. `pgrep` supports these output-filtering
    options.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`pgrep` 只需要命令名的一部分作为输入参数来提取 Bash 命令；例如，`pgrep ash` 或 `pgrep bas` 也能工作。但 `ps`
    命令要求你输入准确的命令。`pgrep` 支持这些输出过滤选项。'
- en: 'The `-d` option specifies an output delimiter other than the default new line:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`-d` 选项指定一个与默认换行符不同的输出分隔符：'
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `-u` option filters for a list of users:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`-u` 选项过滤出用户列表：'
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In this command, `root` and `slynux` are users.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，`root` 和 `slynux` 是用户。
- en: 'The `-c` option returns the count of matching processes:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`-c` 选项返回匹配进程的数量：'
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Determining how busy a system is
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定系统的繁忙程度
- en: Systems are either unused or overloaded. The `load average` value describes
    the total load on the running system. It describes the average number of runnable
    processes, processes with all resources except CPU time slices, on the system.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 系统要么空闲，要么超载。`load average` 值描述了运行系统的总负载。它描述了系统上可运行进程的平均数量，这些进程拥有除 CPU 时间片外的所有资源。
- en: Load average is reported by the uptime and top commands. It is reported with
    three values. The first value indicates the average in 1 minute, the second indicates
    the average in 5 minutes, and the third indicates the average in 15 minutes.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的负载平均值由 uptime 和 top 命令报告。它会报告三个值。第一个值表示 1 分钟的平均值，第二个表示 5 分钟的平均值，第三个表示 15
    分钟的平均值。
- en: 'It is reported by uptime:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 它由 uptime 报告：
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The top command
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: top 命令
- en: By default, the `top` command displays a list of the top CPU-consuming processes
    as well as basic system statistics, including the number of tasks in the process
    list, CPU cores, and memory usage. The output is updated every few seconds.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'This command displays several parameters along with the top CPU-consuming processes:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: See also...
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Scheduling with a cron* recipe in this chapter explains how to schedule
    tasks
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Killing processes, and sending and responding to signals
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may need to kill processes (if they go rogue and start consuming too many
    resources) if you need to reduce system load, or before rebooting. Signals are
    an inter-process communication mechanism that interrupts a running process and
    forces it to perform some action. These actions include forcing a process to terminate
    in either a controlled or immediate manner.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Signals send an interrupt to a running program. When a process receives a signal,
    it responds by executing a signal handler. Compiled applications generate signals
    with the `kill` system call. A signal can be generated from the command line (or
    shell script) with the `kill` command. The `trap` command can be used in a script
    to handle received signals.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Each signal is identified by a name and an integer value. The `SIGKILL (9)`
    signal terminates a process immediately. The keystroke events *Ctrl* + *C* and
    *Ctrl* + *Z* send signals to abort or put the task in the background.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The kill `-l` command will list the available signals:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Terminate the process:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `kill` command issues a `SIGTERM` signal by default. The process ID list
    is specified with spaces for delimiters.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-s` option specifies the signal to be sent to the process:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `SIGNAL` argument is either a signal name or a signal number. There are
    many signals available for different purposes. The most common ones are as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '`SIGHUP 1`: Hangup detection on the death of the controlling process or terminal'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SIGINT 2`: This is the signal emitted when *Ctrl* + *C* is pressed'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SIGKILL 9`: This is the signal used to forcibly kill the process'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SIGTERM 15`: This is the signal used to terminate a process by default'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SIGTSTP 20`: This is the signal emitted when *Ctrl* + *Z* is pressed'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We frequently use force kill for processes. Use this with caution. This is
    an immediate action, and it will not save data or perform a normal cleanup operation.
    The `SIGTERM` signal should be tried first; `SIGKILL` should be saved for extreme
    measures:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Alternatively, use this to perform the cleanup operation:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: There's more...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux supports other commands to signal or terminate processes.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: The kill family of commands
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `kill` command takes the process ID as the argument. The `killall` command
    terminates the process by name:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `-s` option specifies the signal to send. By default, `killall` sends a
    `SIGTERM` signal:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `-9` option forcibly kills a process by name:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Here''s an example of the preceding:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The `-u` owner specifies the process''s user:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The `-I` option makes `killall run` in interactive mode:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`-I` 选项使 `killall run` 以交互模式运行：'
- en: 'The `pkill` command is similar to the `kill` command, but by default it accepts
    a process name instead of a process ID:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`pkill` 命令类似于 `kill` 命令，但默认情况下它接受的是进程名而不是进程 ID：'
- en: '[PRE44]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '`SIGNAL` is the signal number. The `SIGNAL` name is not supported with `pkill`.
    The `pkill` command provides many of the same options as the `kill` command. Check
    the `pkill` man pages for more details.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`SIGNAL` 是信号号。`SIGNAL` 名称不支持 `pkill`。`pkill` 命令提供了与 `kill` 命令相同的许多选项。有关更多细节，请查看
    `pkill` 的手册页。'
- en: Capturing and responding to signals
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获并响应信号
- en: Well-behaved programs save data and shut down cleanly when they receive a `SIGTERM`
    signal. The `trap` command assigns a signal handler to signals in a script. Once
    a function is assigned to a signal using the `trap` command, when a script receives
    a signal, this function is executed.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的程序在接收到 `SIGTERM` 信号时会保存数据并正常关闭。`trap` 命令为脚本中的信号分配信号处理程序。一旦通过 `trap` 命令将函数分配给信号，当脚本接收到该信号时，这个函数会被执行。
- en: 'The syntax is as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE45]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`SIGNAL LIST` is space-delimited. It can include both signal numbers and signal
    names.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`SIGNAL LIST` 是空格分隔的。它可以包含信号号和信号名称。'
- en: 'This shell script responds to the `SIGINT` signal:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 shell 脚本响应 `SIGINT` 信号：
- en: '[PRE46]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Run this script in a terminal. When the script is running, pressing *Ctrl* +
    *C* it will show the message by executing the signal handler associated with it.
    *Ctrl* + *C* corresponds to a `SIGINT` signal.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中运行这个脚本。当脚本正在运行时，按下 *Ctrl* + *C*，它会通过执行与之关联的信号处理程序来显示消息。*Ctrl* + *C* 对应于
    `SIGINT` 信号。
- en: The `while` loop is used to keep the process running forever without being terminated.
    This is done so the script can respond to signals. The loop to keep a process
    alive infinitely is often called the **event loop**.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 循环用于保持进程永远运行而不被终止。这样做是为了让脚本能够响应信号。保持进程无限存活的循环通常被称为 **事件循环**。'
- en: 'If the process ID of the script is given, the `kill` command can send a signal
    to it:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定了脚本的进程 ID，`kill` 命令可以向其发送信号：
- en: '[PRE47]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The process ID of the preceding script will be printed when it is executed;
    alternatively, you can find it with the `ps` command.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时，会打印出前述脚本的进程 ID；或者，你可以使用 `ps` 命令找到它。
- en: If no signal handlers are specified for signals, a script will call the default
    signal handlers assigned by the operating system. Generally, pressing *Ctrl* +
    *C* will terminate a program, as the default handler provided by the operating
    system will terminate the process. The custom handler defined here overrides the
    default handler.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有为信号指定信号处理程序，脚本将调用操作系统分配的默认信号处理程序。通常，按 *Ctrl* + *C* 会终止程序，因为操作系统提供的默认处理程序会终止该进程。这里定义的自定义处理程序会覆盖默认处理程序。
- en: We can define signal handlers for any signals available (`kill -l`) with the
    `trap` command. A single signal handler can process multiple signals.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `trap` 命令为任何可用的信号（`kill -l`）定义信号处理程序。一个信号处理程序可以处理多个信号。
- en: Sending messages to user terminals
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向用户终端发送消息
- en: Linux supports three applications to display messages on another user's screen.
    The `write` command sends a message to a user, the `talk` command lets two users
    have a conversation, and the `wall` command sends a message to all users.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 支持三种应用程序向其他用户的屏幕显示消息。`write` 命令向用户发送消息，`talk` 命令让两个用户进行对话，`wall` 命令向所有用户发送消息。
- en: Before doing something potentially disruptive (say, rebooting the server), the
    system administrator should send a message to the terminal of every user on the
    system or network.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行可能导致系统中断的操作之前（例如，重启服务器），系统管理员应该向系统或网络中每个用户的终端发送一条消息。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `write` and `wall` commands are part of most Linux distributions. If a user
    is logged in multiple times, you may need to specify the terminal you wish to
    send a message to.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`write` 和 `wall` 命令是大多数 Linux 发行版的一部分。如果一个用户登录了多个会话，你可能需要指定要发送消息的终端。'
- en: 'You can determine a user''s terminals with the `who` command:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `who` 命令来确定用户的终端：
- en: '[PRE48]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The second column (`pts/#`) is the user's terminal identifier.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 第二列（`pts/#`）是用户的终端标识符。
- en: The `write` and `wall` programs work on a single system. The `talk` program
    can connect users across a network.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`write` 和 `wall` 程序仅在单一系统上工作。`talk` 程序可以在网络中连接多个用户。'
- en: 'The talk program is not commonly installed. Both the talk program and talk
    server must be installed and running on any machine where talk is used. Install
    the talk application as `talk` and `talkd` on Debian-based systems or as `talk`
    and `talk-server` on Red Hat-based systems. You will probably need to edit `/etc/xinet.d/talk`
    and `/etc/xinet.d/ntalk` to set the `disable` field to `no`. Once you do this,
    restart `xinet`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`talk` 程序并不常安装。在使用 `talk` 的任何机器上，`talk` 程序和 `talk` 服务器都必须安装并运行。在基于 Debian 的系统上安装
    `talk` 应用程序为 `talk` 和 `talkd`，在基于 Red Hat 的系统上为 `talk` 和 `talk-server`。你可能需要编辑
    `/etc/xinet.d/talk` 和 `/etc/xinet.d/ntalk` 来将 `disable` 字段设置为 `no`。完成后，重新启动 `xinet`：'
- en: '[PRE49]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: How to do it...
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Sending one message to one user
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向单个用户发送消息
- en: 'The write command will send a message to a single user:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`write` 命令将向单个用户发送消息：'
- en: '[PRE50]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: You can redirect a message from a file or an echo or write interactively. An
    interactive write is terminated with Ctrl-D.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从文件、回显或者交互式方式重定向消息。交互式写入通过 Ctrl-D 结束。
- en: 'The message can be directed to a specific session by appending the pseudo terminal
    identifier to the command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将伪终端标识符附加到命令中，可以将消息定向到特定会话：
- en: '[PRE51]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Holding a conversation with another user
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他用户进行对话
- en: The talk command opens an interactive conversation between two users. The syntax
    for this is `$ talk user@host`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`talk` 命令会在两个用户之间开启一个交互式对话。其语法为 `$ talk user@host`。'
- en: 'The next command initiates a conversation with user2 on their workstation:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令将在用户2的工作站上发起与其的对话：
- en: '[PRE52]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'After typing the talk command, your terminal session is cleared and split into
    two windows. In one of the windows, you''ll see text like this:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 `talk` 命令后，你的终端会被清空，并分成两个窗口。在其中一个窗口，你将看到如下文本：
- en: '[PRE53]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The person you''re trying to talk to will see a message like this:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 你尝试与之交谈的人将看到如下消息：
- en: '[PRE54]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'When they invoke talk, their terminal session will also be cleared and split.
    What you type will appear in one window on their screen and what they type will
    appear on yours:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当他们调用 `talk` 时，他们的终端会话也会被清空并分裂。你在一个窗口输入的内容将在他们的屏幕上显示，而他们输入的内容则会出现在你的屏幕上：
- en: '[PRE55]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Sending a message to all users
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向所有用户发送消息
- en: 'The **wall** (WriteALL) command broadcasts a message to all the users and terminal
    sessions:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**wall**（WriteALL）命令会广播一条消息到所有用户和终端会话：'
- en: '[PRE56]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Or:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE57]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The message header shows who sent the message: which user and which host.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 消息头显示了消息的发送者：包括用户和主机。
- en: The write, talk, and wall commands only deliver messages between users when
    the write message option is enabled. Messages from the root are displayed regardless
    of the write message option.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`write`、`talk` 和 `wall` 命令仅在启用写消息选项时才能在用户之间传递消息。来自 root 的消息无论写消息选项如何都将显示。'
- en: 'The message option is usually enabled. The `mesg` command will enable or disable
    the receiving of messages:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 消息选项通常是启用的。`mesg` 命令将启用或禁用接收消息：
- en: '[PRE58]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The /proc filesystem
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`/proc` 文件系统'
- en: '`/proc` is an in-memory pseudo filesystem that provides user-space access to
    many of the Linux kernel''s internal data structures. Most pseudo files are read-only,
    but some, such as `/proc/sys/net/ipv4/forward` (described in [Chapter 8](5ba784d5-fa8b-4840-b4c5-cac906e484f9.xhtml),
    *The Old-Boy Network*), can be used to fine-tune your system''s behavior.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`/proc` 是一个内存中的伪文件系统，提供对许多 Linux 内核内部数据结构的用户空间访问。大多数伪文件是只读的，但有些文件，如 `/proc/sys/net/ipv4/forward`（在[第8章](5ba784d5-fa8b-4840-b4c5-cac906e484f9.xhtml)，*老男孩网络*中有描述），可以用来微调系统行为。'
- en: How to do it...
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The `/proc` directory contains several files and directories. You can view most
    files in `/proc` and their subdirectories with `cat`, `less`, or `more`. They
    are displayed as plain text.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`/proc` 目录包含多个文件和目录。你可以使用 `cat`、`less` 或 `more` 查看 `/proc` 及其子目录中的大部分文件。它们以纯文本形式显示。'
- en: Every process running on a system has a directory in `/proc`, named according
    to the process's PID.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 系统上运行的每个进程都有一个 `/proc` 目录，目录名称为该进程的 PID。
- en: 'Suppose Bash is running with PID `4295` (`pgrep bash`); in this case, `/proc/4295`
    will exist. This folder will contain information about the process. The files
    under `/proc/PID` include:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 Bash 正在运行，PID 为 `4295`（通过 `pgrep bash` 查找）；在这种情况下，`/proc/4295` 将存在。这个文件夹将包含关于该进程的信息。`/proc/PID`
    下的文件包括：
- en: '`environ`: This contains the environment variables associated with the process.
    `cat /proc/4295/environ` will display the environment variables passed to the
    process `4295`.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environ`：它包含与进程相关的环境变量。`cat /proc/4295/environ` 将显示传递给进程 `4295` 的环境变量。'
- en: '`cwd`: This is a `symlink` to the process''s working directory.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cwd`：这是指向进程工作目录的 `symlink`。'
- en: '`exe`: This is a `symlink` to the process''s executable:'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exe`：这是指向进程可执行文件的 `symlink`：'
- en: '[PRE59]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '`fd`: This is the directory consisting of entries on file descriptors used
    by the process. The values 0, 1, and 2 are stdin, stdout, and stderr, respectively.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fd`：这是一个包含进程使用的文件描述符条目的目录。值 0、1 和 2 分别表示 stdin、stdout 和 stderr。'
- en: '`io`: This file displays the number of characters read or written by the process.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io`：此文件显示进程读取或写入的字符数。'
- en: Gathering system information
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集系统信息
- en: Describing a computer system requires many sets of data. This data includes
    network information, the hostname, kernel version, Linux distribution name, CPU
    description, memory allocation, disk partitions, and more. This information can
    be retrieved from the command line.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 描述计算机系统需要多组数据。这些数据包括网络信息、主机名、内核版本、Linux 发行版名称、CPU 描述、内存分配、磁盘分区等。这些信息可以通过命令行获取。
- en: How to do it...
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The `hostname` and `uname` commands print the hostname of the current system:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`hostname` 和 `uname` 命令打印当前系统的主机名：'
- en: '[PRE60]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Alternatively, they print the following:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它们会打印以下内容：
- en: '[PRE61]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The `-a` option to `uname` prints details about the Linux kernel version, hardware
    architecture, and more:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`uname` 的 `-a` 选项打印有关 Linux 内核版本、硬件架构等的详细信息：'
- en: '[PRE62]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The `-r` option limits the report to the kernel release:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-r` 选项将报告限制为内核版本：'
- en: '[PRE63]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The `-m` option prints the machine type:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-m` 选项打印机器类型：'
- en: '[PRE64]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The `/proc/` directory holds information about the system, modules, and running
    processes. `/proc/cpuinfo` contains CPU details:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/proc/` 目录包含关于系统、模块和正在运行的进程的信息。`/proc/cpuinfo` 包含 CPU 详细信息：'
- en: '[PRE65]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'If the processor has multiple cores, these lines will be repeated n times.
    To extract only one item of information, use `sed`. The fifth line contains the
    processor name:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果处理器有多个核心，这些行会重复n次。要提取单项信息，请使用`sed`。第五行包含处理器名称：
- en: '[PRE66]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '`/proc/meminfo` contains information about the memory and current RAM usage:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/proc/meminfo` 包含有关内存和当前 RAM 使用情况的信息：'
- en: '[PRE67]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The first line of `meminfo` shows the system''s total RAM:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`meminfo` 的第一行显示系统的总 RAM：'
- en: '[PRE68]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '`/proc/partitions` describes the disk partitions:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/proc/partitions` 描述磁盘分区：'
- en: '[PRE69]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The `fdisk` program edits a disk''s partition table and also reports the current
    partition table. Run this command as  `root`:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`fdisk` 程序编辑磁盘的分区表并报告当前分区表。以 `root` 身份运行此命令：'
- en: '[PRE70]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The `lshw` and `dmidecode` applications generate long and complete reports
    about your system. The report includes information about the motherboard, BIOS,
    CPU, memory slots, interface slots, disks, and more. These must be run as root.
    `dmidecode` is commonly available, but you may need to install `lshw`:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lshw` 和 `dmidecode` 应用程序生成关于系统的长时间且完整的报告。报告包括主板、BIOS、CPU、内存插槽、接口插槽、磁盘等信息。这些命令必须以
    root 身份运行。`dmidecode` 通常是可用的，但你可能需要安装 `lshw`：'
- en: '[PRE71]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Scheduling with a cron
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 cron 调度
- en: The GNU/Linux system supports several utilities for scheduling tasks. The `cron`
    utility is the most widely supported. It allows you to schedule tasks to be run
    in the background at regular intervals. The `cron` utility uses a table (crontab)
    with a list of scripts or commands to be executed and the time when they are to
    be executed.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: GNU/Linux 系统支持几种调度任务的工具。`cron` 工具是最广泛支持的。它允许你安排任务在后台以固定间隔执行。`cron` 工具使用一个表（crontab），列出要执行的脚本或命令及其执行时间。
- en: Cron is used to schedule system housekeeping tasks, such as performing backups,
    synchronizing the system clocking with `ntpdate`, and removing temporary files.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Cron 用于安排系统日常任务，例如执行备份、将系统时钟与 `ntpdate` 同步、删除临时文件等。
- en: A regular user might use `cron` to schedule Internet downloads to happen late
    at night when their ISP allows drop caps and the available bandwidth is higher.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 普通用户可能会使用 `cron` 安排互联网下载任务，在晚上网络提供商允许的时间进行下载，并且带宽较高。
- en: Getting ready
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The `cron` scheduling utility comes with all GNU/Linux distributions. It scans
    the `cron` tables to determine whether a command is due to be run. Each user has
    their own `cron` table, which is a plain text file. The `crontab` command manipulates
    the `cron` table.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`cron` 调度工具随所有 GNU/Linux 发行版提供。它扫描 `cron` 表以确定是否有命令应当执行。每个用户都有自己的 `cron` 表，这是一个纯文本文件。`crontab`
    命令用于操作 `cron` 表。'
- en: How to do it...
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: A `crontab` entry specifies the time to execute a command and the command to
    be executed. Each line in the `cron` table defines a single command. The command
    can either be a script or a binary application. When `cron` runs a task, it runs
    as the user who created the entry, but it does not source the user's `.bashrc`.
    If the task requires environment variables, they must be defined in the `crontab`.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: 'Each cron table line consists of six space-delimited fields in the following
    order:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '`Minute` (0 - 59)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Hour` (0 - 23)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Day` (1 - 31)'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Month` (1 - 12)'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Weekday` (0 - 6)'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COMMAND` (the script or command to be executed at the specified time)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first five fields specify the time when an instance of the command is to
    be executed. Multiple values are delimited by commas (no spaces). A star signifies
    that any time or any day will match. A division sign schedules the event to trigger
    every /Y interval *(*/5* in minutes means every five minutes).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `test.sh` script at the 2^(nd) minute of all hours on all days:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Execute **test.sh** on the 5^(th), 6^(th), and 7^(th) hours on all days:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Execute `script.sh` every other hour on Sundays:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Shut down the computer at 2 a.m. every day:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The `crontab` command can be used interactively or with prewritten files.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `-e` option with `crontab` to edit the `cron` table:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: When `crontab -e` is entered, the default text editor (usually `vi`) is opened
    and the user can type the `cron` jobs and save them. The `cron` jobs will be scheduled
    and executed at specified time intervals.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'The `crontab` command can be invoked from a script to replace the current crontab
    with a new one. Here''s how you do this:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a text file (for example, `task.cron`) with the `cron` job in it and
    then run `crontab` with this filename as the command argument:'
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Alternatively, specify the `cron` job as an inline function without creating
    a separate file. For example, refer to the following:'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The `cron` job needs to be written between `crontab<<EOF` and `EOF`.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An asterisk (`*`) specifies that the command should be executed at every instance
    during the given time period. A `*` in the `Hour` field in the `cron` job will
    cause the command to be executed every hour. To execute the command at multiple
    instances of a time period, specify the time intervals separated by a comma in
    this time field. For example, to run the command at the 5^(th) and 10^(th) minute,
    enter `5,10` in the `Minute` field. A slash (divide by) symbol will cause the
    command to run as per a division of the time. For example 0-30/6 in the Minutes
    field will run a command every 5 minutes during the first half of each hour. The
    string `*/12` in the Hours field will run a command every other hour.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: Cron jobs are executed as the user who created `crontab`. If you need to execute
    commands that require higher privileges, such as shutting down the computer, run
    the `crontab` command as root.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: The commands specified in a cron job are written with the full path to the command.
    This is because cron does not source your `.bashrc`, so the environment in which
    a cron job is executed is different from the bash shell we execute on a terminal.
    Hence, the `PATH` environment variable may not be set. If your command requires
    certain environment variables, you must explicitly set them.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `crontab` command has more options.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: Specifying environment variables
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many commands require environment variables to be set properly for execution.
    The cron command sets the SHELL variable to `"/bin/sh``"` and also sets `LOGNAME`
    and `HOME` from the values in `/etc/passwd`. If other variables are required,
    they can be defined in the `crontab`. These can be defined for all tasks or individually
    for a single task.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: If the `MAILTO` environment variable is defined, `cron` will send the output
    of the command to that user via an e-mail.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: The `crontab` defines environment variables by inserting a line with a variable
    assignment statement in the user's `cron` table.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `crontab` defines an `http_proxy` environment variable to use
    a proxy server for Internet interactions:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'This format is supported by `vixie-cron`, used in Debian, Ubunto, and CentOS
    distributions. For other distributions, environment variables can be defined on
    a per-command basis:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Running commands at system start-up/boot
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Running specific commands when the system starts (or boots) is a common requirement.
    Some `cron` implementations support a `@reboot` time field to run a job during
    the reboot process. Note that this feature is not supported by all `cron` implementations
    and only root is allowed to use this feature on some systems. Now check out the
    following code:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: This will run the command as your user at runtime.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the cron table
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `-l` option to crontab will list the current user''s crontab:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Adding the `-u` option will specify a user''s crontab to view. You must be
    logged in as root to use the `-u` option:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Removing the cron table
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `-r` option will remove the current user''s cron table:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The `-u` option specifies the crontab to remove. You must be a root user to
    remove another user''s crontab:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Database styles and uses
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux supports many styles of databases, ranging from simple text files (`/etc/passwd`)
    to low level B-Tree databases (Berkely DB and bdb), lightweight SQL (sqlite),
    and fully featured relational database servers, such as Postgres, Oracle, and
    MySQL.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: One rule of thumb for selecting a database style is to use the least complex
    system that works for your application. A text file and `grep` is sufficient for
    a small database when the fields are known and fixed.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: Some applications require references. For example, a database of books and authors
    should be created with two tables, one for books and one for the authors, to avoid
    duplicating the author information for each book.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: If the table is read more often than it's modified, then SQLite is a good choice.
    This database engine does not require a server, which makes it portable and easy
    to embed in another application (as Firefox does).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: If the database is modified frequently by multiple tasks (for example, a webstore's
    inventory system), then one of the RDBMS systems, such as Postgres, Oracle, or
    MySQL, is appropriate.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can create a text-based database with standard shell tools. SqlLite is commonly
    installed by default; the executable is `sqlite3`. You'll need to install MySQL,
    Oracle, and Postgres. The next section will explain how to install MySQL. You
    can download Oracle from www.oracle.com. Postgres is usually available with your
    package manager.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A text file database can be built with common shell tools.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an address list, create a file with one line per address and fields
    separated by a known character. In this case, the character is a tilde (`~`):'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'For instance:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Then add a function to find lines that match a pattern and translate each line
    into a human-friendly format:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'When in use, this would resemble the following:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: There's more...
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SQLite, Postgres, Oracle, and MySQL database applications provide a more
    powerful database paradigm known as relational databases. A relational database
    stores relations between tables, for example, the relation between a book and
    its author.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: A common way to interact with a relational database is using SQL. This language
    is supported by SQLite, Postgres, Oracle, MySQL, and other database engines.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: SQL is a rich language. You can read books devoted to it. Luckily, you just
    need a few commands to use SQL effectively.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: Creating a table
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tables are defined with the `CREATE TABLE` command:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The next line creates a table of books and authors:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Inserting a row into an SQL database
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The insert command will insert a row of data into the database.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The following command inserts the book you''re currently reading:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Selecting rows from a SQL database
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The select command will select all the rows that match a test:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'This command will select book titles that include the word Shell from the book
    table:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Writing and reading SQLite databases
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQLite is a lightweight database engine that is used in applications ranging
    from Android apps and Firefox to US Navy inventory systems. Because of the range
    of use, there are more applications running SQLite than any other database.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: A SQLite database is a single file that is accessed by one or more database
    engines. The database engine is a C library that can be linked to an application;
    it is loaded as a library to a scripting language, such as TCL, Python, or Perl,
    or run as a standalone program.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: The standalone application sqlite3 is the easiest to use within a shell script.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `sqlite3` executable may not be installed in your installation. If it is
    not, it can be installed by loading the `sqlite3` package with your package manager.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: 'For Debian and Ubuntu, use the following:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'For Red Hat, SuSE, Fedora, and Centos, use the following:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: How to do it...
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `sqlite3` command is an interactive database engine that connects to a SQLite
    database and supports the process of creating tables, inserting data, querying
    tables, and so on.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of the `sqlite3` command is this:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'If the `databaseName` file exists, `sqlite3` will open it. If the file does
    not exist, `sqlite3` will create an empty database. In this recipe, we will create
    a table, insert one row, and retrieve that entry:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: How it works...
  id: totrans-400
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `sqlite3` application creates an empty database named `books.db` and displays
    the `sqlite> prompt` to accept SQL commands.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: 'The `CREATE TABLE` command creates a table with two fields: title and author.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: The `INSERT` command inserts one book into the database. Strings in SQL are
    delimited with single quotes.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: The `SELECT` command retrieves the rows that match the test. The percentage
    symbol (`%`) is the SQL wildcard, similar to a star (`*`) in the shell.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-405
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A shell script can use `sqlite3` to access a database and provide a simple
    user interface. The next script implements the previous address database with
    `sqlite` instead of a flat text file. It provides three commands:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '`init`: This is to create the database'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insert`: This is to add a new row'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`query`: This is to select rows that match a query'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In use, it would look like this:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'The following script implements this database application:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: This script uses the case statement to select the SQL command string. The other
    command-line arguments are replaced with this string and the string is sent to
    `sqlite3` to be evaluated. The `$1`, `$2`, `$3`, and `$4` are the first, second,
    third, and fourth arguments, respectively, to the script.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Writing and reading a MySQL database from Bash
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL is a widely used database management system. In 2009, Oracle acquired
    SUN and with that the MySQL database. The MariaDB package is a fork of the MySQL
    package that is independent of Oracle. MariaDB can access MySQL databases, but
    MySQL engines cannot always access MariaDB databases.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: Both MySQL and MariaDB have interfaces for many languages, including PHP, Python,
    C++, Tcl, and more. All of them use the `mysql` command to provide an interactive
    session in order to access a database. This is the easiest way for a shell script
    to interact with a MySQL database. These examples should work with either MySQL
    or MariaDB.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: A bash script can convert a text or **Comma-Separated Values** (**CSV**) file
    into MySQL tables and rows. For example, we can read all the e-mail addresses
    stored in a guestbook program's database by running a query from the shell script.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: The next set of scripts demonstrates how to insert the contents of the file
    into a database table of students and generate a report while ranking each student
    within the department.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-420
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL and MariaDB are not always present in the base Linux distribution. They
    can be installed as either `mysql-server` and `mysql-client` or the `mariadb-server`
    package. The MariaDB distribution uses MySQL as a command and is sometimes installed
    when the MySQL package is requested.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: MySQL supports a username and password for authentication. You will be prompted
    for a password during the installation.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `mysql` command to create a new database on a fresh installation. After
    you create the database with the `CREATE DATABASE` command, you can select it
    for use with the use command. Once a database is selected, standard SQL commands
    can be used to create tables and insert data:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: The `quit` command or Ctrl-D will terminate a `mysql` interactive session.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-426
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe consists of three scripts: one to create a database and table,
    one to insert student data, and one to read and display data from the table.'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the database and table script:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'This script inserts data in the table:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The last script queries the database and generates a report:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'The data for the input CSV file (`studentdata.csv`) will resemble this:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Execute the scripts in the following sequence:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: How it works...
  id: totrans-438
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first script, `create_db.sh`, creates a database called `students` and a
    table named `students` inside it. The `mysql` command is used for MySQL manipulations.
    The `mysql` command specifies the username with `-u` and the password with `-pPASSWORD`.
    The variables `USER` and `PASS` are used to store the username and password.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: The other command argument for the `mysql` command is the database name. If
    a database name is specified as an argument to the `mysql` command, it will use
    that database; otherwise, we have to explicitly define the database to be used
    with the **use** `database_name` command.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: The `mysql` command accepts the queries to be executed through standard input
    (`stdin`). A convenient way of supplying multiple lines through `stdin` is using
    the `<<EOF` method. The text that appears between `<<EOF` and `EOF` is passed
    to `mysql` as standard input.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: The `CREATE DATABASE` and `CREATE TABLE` commands redirect `stderr` to `/dev/null`
    to prevent the display of error messages. The script checks the exit status for
    the `mysql` command stored in `$?` to determine whether a failure has occurred;
    it assumes that a failure occurs because a table or database already exists. If
    the database or table already exists, a message is displayed to notify the user;
    otherwise, the database and table are created.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: 'The `write_to_db.sh` script accepts the filename of the student data CSV file.
    It reads each line of the CSV file in the `while` loop. On each iteration, a line
    from the CSV file is read and reformatted into a SQL command. The script stores
    the data from the comma-separated line in an array. Array assignment is done in
    this form: `array=(val1 val2 val3)`. Here, the space character is the **Internal****Field****Separator**
    (**IFS**). This data has comma-separated values. By changing the IFS to a comma,
    we can easily assign values to the array (`IFS=,`).'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: The data elements in the comma-separated line are `id`, `name`, `mark`, and
    `department`. The `id` and `mark` values are integers, while `name` and `dept`
    are strings that must be quoted.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: The name could contain space characters that would conflict with the IFS. The
    script replaces the space in the name with a character (`#`) and restores it after
    formulating the query.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: To quote the strings, the values in the array are reassigned with a prefix and
    suffixed with `\"`. The `tr` command substitutes each space in the name with `#`.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the query is formed by replacing the space character with a comma and
    replacing `#` with a space. Then, SQL's `INSERT` command is executed.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: 'The third script, `read_db.sh`, generates a list of students for each department
    ordered by rank. The first query finds distinct names of departments. We use a
    `while` loop to iterate through each department and run the query to display student
    details in the order of highest marks obtained. `SET @i=0` is an SQL construct
    to set this: `i=0`. On each row, it is incremented and displayed as the rank of
    the student.'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: User administration scripts
  id: totrans-449
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GNU/Linux is a multiuser operating system that allows many users to log in and
    perform activities at the same time. Administration tasks involving user management
    include setting the default shell for the user, adding a user to a group, disabling
    a shell account, adding new users, removing users, setting a password, setting
    an expiry date for a user account, and so on. This recipe demonstrates a user
    management tool to handle these tasks.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-451
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This script performs common user management tasks:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'A sample output resembles the following:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: How it works...
  id: totrans-456
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `user_adm.sh` script performs several common user management tasks. The
    `usage()` text explains how to use the script when the user provides incorrect
    parameters or includes the `-usage` parameter. A case statement parses command
    arguments and executes the appropriate commands.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: The valid command options for the `user_adm.sh` script are: `-adduser`, `-deluser`,
    `-shell`, `-disable`, `-enable`, `-expiry`, `-passwd`, `-newgroup`, `-delgroup`,
    `-addgroup`, `-details`, and `-usage`. When the `*)` case is matched, it means
    no option was recognized; hence, `usage()` is invoked.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: Run this script as the root. It confirms the user ID (the root's user ID is
    `0`) before the arguments are examined.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: When an argument is matched, the `[ $# -ne 3 ] &&` test usage checks the number
    of arguments. If the number of command arguments does not match the required number,
    the `usage()` function is invoked and the script exits.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: 'These options are supported by the following scripts:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '`-useradd`: The `useradd` command creates a new user:'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: The `-m` option creates the home directory.
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-deluser`: The `deluser` command removes the user:'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: The `--remove-all-files` option removes all the files associated with the user,
    including the `home` directory.
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-shell`: The `chsh` command changes the default shell of the user:'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '`-disable` and `-enable`: The `usermod` command manipulates several attributes
    related to user accounts. `usermod -L USER` locks the user account and `usermod
    -U USER` unlocks the user account.'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-expiry`: The `change` command manipulates user account expiry information:'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'These options are supported:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '`-m MIN_DAYS`: This sets the minimum number of days between password changes
    to `MIN_DAYS`'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-M MAX_DAYS`: This sets the maximum number of days during which a password
    is valid'
  id: totrans-475
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-W WARN_DAYS`: This sets the number of days to provide a warning before a
    password change is required'
  id: totrans-476
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-passwd`: The `passwd` command changes a user''s password:'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'The command will prompt to enter a new password:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: '`-newgroup` and `-addgroup`: The `addgroup` command adds a new user group to
    the system:'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'If you include a username, it will add this user to a group:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'The `delgroup` command removes a user group:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '`-details`: The `finger USER` command displays user information, including
    the home directory, last login time, default shell, and so on. The `chage -l`
    command displays the user account expiry information.'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bulk image resizing and format conversion
  id: totrans-487
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of us download photos from our phones and cameras. Before we e-mail an image
    or post it to the Web, we may need to resize it or perhaps change the format.
    We can use scripts to modify these image files in bulk. This recipe describes
    recipes for image management.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-489
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `convert` command from the **ImageMagick** suite contains tools for manipulating
    images. It supports many image formats and conversion options. Most GNU/Linux
    distributions don't include ImageMagick by default. You need to manually install
    the package. For more information, point your web browser at [www.imagemagick.org](http://www.imagemagick.org).
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-491
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The convert program will convert a file from one image format to another:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Here''s an example of this:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'We can resize an image by specifying the scale percentage or the width and
    height of the output image. To resize an image by specifying `WIDTH` or `HEIGHT`,
    use this:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Here''s an example of this:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'If either `WIDTH` or `HEIGHT` is missing, then whatever is missing will be
    automatically calculated to preserve the image aspect ratio:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Here''s an example of this:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'To resize the image by specifying the percentage scale factor, use this:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'This script will perform a set of operations on all the images in a directory:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'The following example scales the images in the `sample_dir` directory to `20%`:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'To scale images to a width of `1024`, use this:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'To scale and convert files into a specified destination directory, use this:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: How it works...
  id: totrans-514
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The preceding `image_help.sh` script accepts these arguments:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: '`-source`: This specifies the source directory of the images.'
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-dest`: This specifies the destination directory of the converted image files.
    If `-dest` is not specified, the destination directory will be the same as the
    source directory.'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-ext`: This specifies the target file format for conversions.'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-percent`: This specifies the percentage of scaling.'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-scale`: This specifies the scaled width and height.'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the `-percent` and `-scale` parameters may not appear.
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script starts by checking the number of command arguments. Either four,
    six, or eight parameters are valid.
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The command line is parsed with a `while` loop and the case statement and values
    are assigned to appropriate variables. `$#` is a special variable that contains
    the number of arguments. The `shift` command shifts the command arguments one
    position to the left. With this, every time the shifting happens, we can access
    the next command argument as `$1` rather than using `$1`, `$2`, `$3`, and so on.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: The case statement is like a switch statement in the C programming language.
    When a case is matched, the corresponding statements are executed. Each match
    statement is terminated with `;;`. Once all the parameters are parsed into the
    variables `percent`, `scale`, `source_dir`, `ext`, and `dest_dir`, a `for` loop
    iterates through each file in the source directory and the file is converted.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: Several tests are done within the `for` loop to fine-tune the conversion.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: If the variable `ext` is defined (if `-ext` is given in the command argument),
    the extension of the destination file is changed from `source_file.extension`
    to `source_file.$ext`.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: If the `-dest` parameter is provided, the destination file path is modified
    by replacing the directory in the source path with the destination directory.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: If -scale or -percent are specified, the resize parameter (`-resize widthx`
    or `-resize perc%`) is added to the command.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: After the parameters are evaluated, the `convert` command is executed with proper
    arguments.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-530
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Slicing filenames based on extensions* recipe in [Chapter 2](36986eeb-141a-496a-a6b1-4f78f612c14e.xhtml),
    *Have a Good Command*, explains how to extract a portion of the filename
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking screenshots from the terminal
  id: totrans-532
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As GUI applications proliferate, it becomes important to take screenshots, both
    to document your actions and to report unexpected results. Linux supports several
    tools for grabbing screenshots.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-534
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will describe the **xwd** application and a tool from ImageMagick,
    which was used in the previous recipe. The xwd application is usually installed
    with the base GUI. You can install ImageMagick using your package manager.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-536
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The xwd program extracts visual information from a window, converts it into
    X Window Dump format, and prints the data to `stdout`. This output can be redirected
    to a file, and the file can be converted into GIF, PNG, or JPEG format, as shown
    in the previous recipe.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: 'When xwd is invoked, it changes your cursor to a crosshair. When you move this
    crosshair to an X Window and click on it, the window is grabbed:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'ImageMagick''s `import` command supports more options for taking screenshots:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: 'To take a screenshot of the whole screen, use this:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'You can manually select a region and take a screenshot of it using this:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'To take a screenshot of a specific window, use this:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: The `xwininfo` command will return a window ID. Run the command and click on
    the window you want. Then, pass this `window_id` value to the `-window` option
    of `import`.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: Managing multiple terminals from one
  id: totrans-548
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSH sessions, Konsoles, and xterms are heavyweight solutions for applications
    you want to run for a long time, but they perform a check infrequently (such as
    monitoring log files or disk usage).
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: The GNU screen utility creates multiple virtual screens in a terminal session.
    The tasks you start in a virtual screen continue to run when the screen is hidden.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-551
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To achieve this, we will use a utility called **GNU screen**. If the screen
    is not installed on your distribution by default, install it using the package
    manager:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: How to do it...
  id: totrans-554
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the screen utility has created a new window, all the keystrokes go to the
    task running in that window, except Control-A (*Ctrl*-*A*), which marks the start
    of a screen command.
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Creating screen windows**: To create a new screen, run the command screen
    from your shell. You will see a welcome message with information about the screen.
    Press Space or Return to return to the shell prompt. To create a new virtual terminal,
    press *Ctrl* + *A* and then *C* (these are case-sensitive) or type screen again.'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Viewing a list of open windows**: While running the screen, pressing *Ctrl*+*A*
    followed by a quote (`"`) will list your terminal sessions.'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Switching between windows**: The keystrokes *Ctrl* + *A* and *Ctrl* + *N*
    display the next window and *Ctrl* + *A* and *Ctrl* + *P* the previous window.'
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Attaching to and detaching screens**: The screen command supports saving
    and loading screen sessions, called detaching and attaching in screen terminology.
    To detach from the current screen session, press *Ctrl* + *A* and *Ctrl* + *D*.
    To attach to an existing screen when starting the screen, use:'
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'This tells the screen to attach the last screen session. If you have more than
    one detached session, the screen will output a list; then use:'
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Here, `PID` is the PID of the screen session you want to attach.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL

- en: Chapter 9. Running a MySQL Database Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the MySQL database server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing access to MySQL over the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing your MySQL server over an SSH tunnel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating users and granting permissions to databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a backup of your database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing custom SQL commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restoring database from the backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the structure of your database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing records in a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking who is using your database server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing phpMyAdmin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL is a powerful open source database management system. MySQL servers are
    easy to set up and scale quite well. This database system powers some of the world's
    largest websites including Facebook, Twitter, and Wikipedia.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL employs a distributed client-server architecture. A single server can
    provide database services to multiple client programs simultaneously. Clients
    running on the same machine as the server usually connect using a Unix socket.
    Clients can also run on separate machines and connect to the database server over
    the network. MySQL uses TCP connections, and the server's default listening port
    is 3306.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unix domain sockets are channels used for inter-process communication. Different
    programs running on the same machine can read and write information to a socket,
    enabling communication between the programs. Unix sockets are represented as nodes
    of the filesystem, so you can find a socket by listing the contents of a directory
    in which it was created.
  prefs: []
  type: TYPE_NORMAL
- en: The permissions system of MySQL is very granular. Each client can have access
    limited to a subset of databases and be allowed to execute a different set of
    SQL commands on each database.
  prefs: []
  type: TYPE_NORMAL
- en: The database server maintains a list of client accounts, which are separate
    from the system user accounts. Each client account is defined not only by a username
    and password, but also by the host from which the user is connecting. Thanks to
    this solution, complex permission definitions are possible. For instance, the
    same username and password may be used locally to perform administrative tasks,
    but allowed only to view the server state remotely.
  prefs: []
  type: TYPE_NORMAL
- en: The default MySQL installation creates an administrative superuser called `root`
    as well as an anonymous account, which makes it possible to connect to the database
    server without authentication. It's important to equip the `root` account with
    a strong password and disable anonymous accounts on a production system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to a username and password, MySQL may require the client to provide
    a certificate for increased security.
  prefs: []
  type: TYPE_NORMAL
- en: Webmin's support for MySQL is excellent and allows you to perform most tasks
    related to the running of the database server. In this chapter, we will demonstrate
    how Webmin can help you install MySQL, set up access to the server over a network,
    manage user accounts, create databases, and edit the structure and data of databases.
    We'll also demonstrate how to automatically backup databases and restore backup
    files. If you find that you need an even more advanced web-based management tool,
    we will demonstrate how to set up phpMyAdmin on your server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the MySQL database server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Practically all operating systems that come with a package management solution
    for open source software make MySQL packages available for installation. In this
    recipe, we will install MySQL from a package and set it up on your system. The
    server package automatically installs MySQL's command-line client package as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up MySQL on your server:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the steps described in the *Installing software packages* recipe in [Chapter
    1](ch01.html "Chapter 1. Setting Up Your System"), *Setting Up Your System*, to
    find and install the MySQL database server package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Most distributions make multiple versions of MySQL available in their package
    repositories. On some systems, you will find a meta-package called `mysql-server`
    that installs the latest version. On other systems, you will find packages with
    version numbers in the name, for instance `mysql-server-5.5` or `mysql55-server`
    for version 5.5.x. Pick the package with the latest version unless you have reasons
    to stick to an older one.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to **System** | **Bootup and Shutdown**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the checkbox next to the init script for the MySQL database server (it
    will be named `mysql`, `mysqld`, `mysql-server`, or similarly).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Start Now and On Boot** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Refresh Modules** link at the bottom of Webmin's main menu and reload
    the browser to update the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Webmin should be able to connect to your MySQL server. You will see a list of
    databases that, at this stage, should include default databases such as `information_schema`
    and `mysql`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you see **Warning: The Perl modules DBI and DBD::mysql are not installed
    on your system**, click the link and follow Webmin''s instructions to install
    the missing Perl modules.'
  prefs: []
  type: TYPE_NORMAL
- en: The default MySQL setup is fine for a development or testing server. However,
    if you plan to use the database in production or on a shared server, please continue
    reading the *There's more* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin helps you find and install the `mysql-server` package from your distribution's
    repositories. The package contains an init script, which we enabled in order to
    start the database server whenever your machine boots.
  prefs: []
  type: TYPE_NORMAL
- en: The default MySQL installation contains a number of convenient features, such
    as anonymous user accounts or the ability to log in as root without providing
    a password. These default options make it easier to get started with MySQL. However,
    they should never be used in production because they constitute a major security
    risk.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform the following steps to make MySQL more secure for use in a production
    setting.
  prefs: []
  type: TYPE_NORMAL
- en: Making MySQL ready for production use
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to provide basic security for your MySQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to your server using a terminal emulator, for instance over SSH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You may also use Webmin's **Text Login** module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type in the following command: `mysql_secure_installation`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer yes to all questions by pressing *Y* and then *Enter*, unless you know
    that you want settings other then the recommended ones.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `mysql_secure_installation` script performs the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Sets a password for the database `root` user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes anonymous access to the database; MySQL will only allow authorized users
    access from now on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disallows remote login by the `root` user, because this user should normally
    only access the database from the same computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes the `test` database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to allow other computers access to your databases, take a look at
    the *Allowing access to MySQL over the network* recipe of this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing access to MySQL over the network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Programs that access MySQL databases, which are called clients, may be running
    on the same machine as the server. In this case, the client and server will communicate
    most efficiently using a Unix domain socket, which is a channel of inter-process
    communication accessed through the filesystem like a file or directory. Access
    to a socket is controlled by the filesystem's permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Other client programs may be able to communicate only over TCP network sockets.
    These clients may connect to the local server using the loopback interface and
    IP address of 127.0.0.1\. In this case, the MySQL server must be compiled with
    networking support and configured to listen for connections on the loopback interface.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the client program is located on a machine other than the server,
    then communication between them must take place over the network using the TCP
    protocol. In order to make this communication possible, you will need to open
    an exception in your firewall and instruct MySQL to listen for incoming network
    connections on a physical network interface.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may also tunnel MySQL traffic over SSH, which may be a more secure solution.
    Take a look at the *Accessing your database server remotely over an SSH tunnel*
    recipe for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you plan to make your database server available over the network, you should
    definitely take measures to secure it. Take a look at the *Making MySQL ready
    for production use* section of the *Installing the MySQL database server* recipe
    in this chapter for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting, follow steps described in the *Allowing access to a service
    through the firewall* recipe in [Chapter 3](ch03.html "Chapter 3. Securing Your
    System"), *Securing your system*, to allow incoming TCP traffic to port `3306`
    through your firewall as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5849_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Steps in this recipe will be divided into the following four sections:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll instruct MySQL to listen for incoming network connections on the
    standard MySQL port (`3306`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we'll create a database user named `dbuser`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will grant access to a database named `testdb`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we will test the setup by connecting to our server from a secondary
    client machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instructing MySQL server to listen for network connections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For MySQL to accept incoming network connections, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server** | **MySQL Server Configuration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **MySQL server listening address** to **Any**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save and Restart MySQL** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new user
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to create a new user, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server** | **User Permissions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create new user** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Username** to `dbuser`, **Password** to a strong password, and **Hosts**
    to **Any**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Granting user access to database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to grant user access to database, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server** | **Database Permissions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create new database permissions** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Databases** line, choose **Selected** and select your `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Username** to the name of the created user, that is, `dbuser`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Hosts** to **Any** to allow the user to connect from anywhere.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For added security, you should specify an IP address or domain name from which
    the user will be able to connect. You can use `%` as part of the address to specify
    a wildcard. For example, `192.168.0.%` would denote the entire `192.168.0.1/24`
    subnet, while `%.example.com` would include all hosts within a domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select all the permissions in the **Permissions** list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the connection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Try to connect to your database server from a second machine on the network.
    If your other machine has the MySQL command-line client installed, you can test
    the connection by typing in this command at the terminal, but substitute `mysql-host`
    with the IP or domain name of your MySQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If the connection is successful, you will see the following welcome message
    including the server''s MySQL version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When you arrive at the `mysql>` prompt, you can start executing SQL commands.
    Type `exit` and press *Enter* to disconnect.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to allow the MySQL server to accept incoming network connections, Webmin
    edits your server's configuration file (usually located in `/etc/my.cnf`, `/var/db/mysql/my.cnf`
    or `/etc/mysql/my.cnf`).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two lines in the server''s configuration that specify what connections
    the server will accept. For instance, if we only want to accept local connections,
    these lines could read like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first line instructs MySQL to create a local Unix socket for communication
    with other programs on the same machine, while the second line instructs it to
    listen for incoming connections on the local loopback interface (`127.0.0.1`).
    In order to make the server listen to incoming network connections on all interfaces,
    Webmin simply removes the `bind-address` line.
  prefs: []
  type: TYPE_NORMAL
- en: 'We tested our connection by issuing the following command on another computer
    attached to the same network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command starts the MySQL command-line client. The options specified are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-u`: This option specifies which user is trying to connect to the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: This option states that we want to be prompted for a password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`: This option specifies the host to which we''re trying to connect'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-D`: This option states which database we want to use once we are connected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to create database users and grant them permissions, Webmin operates
    directly on the data stored in MySQL's internal configuration databases. If you
    wanted to perform the same operations manually, you could connect to the MySQL
    server by using the command-line client and issuing the following commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, connect to the local database server as `root`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, issue the following MySQL commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The first command creates a user named `dbuser`, while the second gives this
    user complete access to the `testdb` database. The final command forces your MySQL
    server to reload information about users and privileges so that the new user can
    connect.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The MySQL command-line client stores a history of all the entered commands
    in a file. If we execute the commands listed earlier, the history file will contain
    the password of our newly created user. To avoid this, we can instruct MySQL not
    to save history during this session by issuing the following command before connecting
    to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe allows a user to access a single database remotely. For security
    reasons, the primary management account (`root`) should not be allowed to connect
    to your server from another computer. If you would nevertheless like to allow
    some remote management of the database server (creating databases, users, and
    so on), you can perform the following outlined steps.
  prefs: []
  type: TYPE_NORMAL
- en: Managing databases remotely
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to create an account that you will use for remote administration:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server** | **User Permissions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create new user** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Username** to an administrative account name. Try to choose a username
    that will be harder to guess than `admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Password** to a very strong password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Hosts** to the IP address range from which your administrative user will
    connect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Permissions** list, carefully choose only those permissions that
    you are sure you need to access remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More information about the significance of each permission can be found in
    the *Privileges Provided by MySQL* section of MySQL''s documentation at the following
    link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://dev.mysql.com/doc/refman/5.6/en/privileges-provided.html](http://dev.mysql.com/doc/refman/5.6/en/privileges-provided.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now be able to connect to your server (`mysql-host`) from a remote
    client computer. You do not need to specify a database name when you connect:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to make remote access and management of your MySQL databases more secure,
    you can tunnel your connection over SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the *Accessing your MySQL server over an SSH tunnel* recipe of
    this chapter for instructions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing your MySQL server over an SSH tunnel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your server is hosting a website on the Internet and running a database system
    on the same machine, it is safer to disable remote network access to MySQL. On
    the other hand, you may still want to manage your databases remotely, and you
    can do so by tunneling MySQL traffic over an SSH connection.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most important aspects of a database system is the speed with which
    it can find and return the data that you ask for. Tunneling traffic over SSH will
    add significant overhead to this communication. This solution is great for intermittent
    management tasks, but is typically not suitable as a replacement for a direct
    connection to your database system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The server you want to connect to must run both the MySQL server and an SSH
    server. The remote client machine must have an SSH client and MySQL client software
    installed. Make a note of the IP address or domain name of the server (`mysql-host`),
    the SSH username (`ssh-user`), MySQL user (`mysql-user`), and database name (`database-name`).
    Substitute them in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to create an SSH tunnel for MySQL, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Issue the following command on your client machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a tunnel between the port `15000` on your client machine and the
    port `3306` of the server. You can now access the remote database by making a
    MySQL connection to your client computer's local port `15000`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Issue the following command on the client system to test the connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The SSH client acts as an intermediator in communication between a MySQL client
    running on your machine and the remote server. It opens port `15000` and listens
    for incoming connections. All packets arriving at port `15000` are encrypted and
    forwarded over SSH to the server. On the server side, SSH receives the packets,
    decrypts them, and sends them to port `3306`. Answers are sent back in the opposite
    direction over the same channel.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about SSH tunnels in the *Connecting to Webmin
    securely over an SSH tunnel* recipe in [Chapter 3](ch03.html "Chapter 3. Securing
    Your System"), *Securing Your System*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some MySQL clients incorporate the ability to set up an SSH tunnel when connecting
    to a remote database.
  prefs: []
  type: TYPE_NORMAL
- en: Making an SSH tunnel in MySQL Workbench
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Popular GUI clients such as MySQL Workbench or Sequel Pro allow you to specify
    the SSH connection settings in the same window as the database connection settings.
    The procedure is similar in all cases. In MySQL Workbench you would set up the
    connection as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Run MySQL Workbench on your client computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Connect to database** from the **Database** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Connection Method** to **Standard TCP/IP over SSH**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **SSH Hostname** to the remote server's IP address or domain name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **SSH Username** to a system user with SSH access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **MySQL Hostname** to `127.0.0.1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **MySQL Server Port** to `3306`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Username** to the name of a MySQL user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Test Connection** button. Consider the following screenshot:![Making
    an SSH tunnel in MySQL Workbench](img/5849_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be asked for the password of the SSH user and then the password of
    the MySQL user. If all goes well, you will see a message indicating that the connection
    parameters are correct.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many tools that allow you to connect to and control your MySQL databases.
    Webmin provides a wide range of tools to perform most of the common tasks, and
    these are described in recipes later in this chapter. An even more powerful web-based
    solution that is dedicated to MySQL is phpMyAdmin. It is discussed in the *Installing
    phpMyAdmin* recipe of this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can download the GUI clients mentioned in this recipe from the following
    sites:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MySQL Workbench**: [http://dev.mysql.com/downloads/tools/workbench](http://dev.mysql.com/downloads/tools/workbench).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sequel Pro (OS X only)**: [http://www.sequelpro.com/download](http://www.sequelpro.com/download).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about SSH tunnels is provided in the *Connecting to Webmin
    securely over an SSH tunnel* recipe in [Chapter 3](ch03.html "Chapter 3. Securing
    Your System"), *Securing Your System*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a new MySQL database through Webmin's interface is very quick and simple.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a new database:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new database** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Database name**, for instance, `new_db`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Character set** to **utf8 (UTF-8 Unicode)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Collation order** to **utf8_unicode_ci (UTF-8 Unicode)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The character set specifies how letter characters are stored in your database
    and the `utf8` character set contains all the letters of most alphabets. The collation
    order, on the other hand, specifies what order the letters should be placed in
    when sorting alphabetically. The `utf8_unicode_ci` collation aims to be universal,
    but there may be regional variations that make a local collation such as `utf8_polish_ci`
    more appropriate for your situation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set **Initial table** to **None**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin takes the information that you provide and creates a new database by
    connecting to the MySQL server and executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to make the database useful, you would want to grant users permissions
    to access it. Take a look at the *Creating users and granting permissions to databases*
    recipe of this chapter for instructions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have an initial database structure or contents, you can upload them to
    the server using a SQL commands file. Take a look at the *Executing custom SQL
    commands* recipe of this chapter for more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information about character sets and collations can be found in MySQL''s
    manual at the following link: [https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating users and granting permissions to databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because of MySQL's client-server architecture, the server may accept connections
    from multiple clients. The connecting clients authenticate themselves to MySQL
    using a username and password. Information about user accounts and privileges
    is stored in an internal database called `mysql`.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL accounts are separate from system accounts, which is usually a good thing
    because more often than not they represent applications running on your server
    rather than actual users. Each application connecting to your database server
    should have its own user account, with access privileges limited to only those
    databases which are needed for the application to run. It would be a bad idea
    to allow an application root-level access. This is because if the application
    is compromised, an attacker could steal or damage all databases on your system.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to a username and password, MySQL accounts are also described by
    the host from which a user is allowed to connect. This means that `'user'@'localhost'`
    is a different account than `'user'@'remotehost'` and these accounts may have
    different access privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, this means that multiple accounts have to be created if a user
    should have access from multiple hosts, or worse yet, if the location of the user
    changes as he roams around the network. In such cases, you may specify `%` as
    part of the host address as a wildcard. For example, `192.168.0.%` would specify
    the entire `192.168.0.1/24` subnet and `%.example.com` would specify all hosts
    within a domain.
  prefs: []
  type: TYPE_NORMAL
- en: If the location of your users cannot be narrowed down to a network or range
    of IP addresses, you should consider using SSH tunnels instead of opening access
    to your database server from the entire Internet. See the *Accessing your MySQL
    server over an SSH tunnel* recipe in this chapter for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should remove MySQL's anonymous accounts unless you have a particular reason
    to use them. Anonymous accounts are created by default for testing purposes, but
    they may cause difficulties in debugging problems with user privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say, for example, that you have a user account with access from any
    location: `''user''@''%''`, but you also have an anonymous account with access
    from the local host `@''localhost''`. If you try to connect as `user` from the
    local host, MySQL will first check the privileges entry that specifies the incoming
    connection''s host more precisely (`@''localhost''` is more specific then `@''%''`).
    This will cause `user` to be assigned privileges of the anonymous account rather
    than the expected `''user''@''%''` account. You can check what user you are connected
    as by issuing the following MySQL command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output shows that we are being treated as an anonymous user `@''localhost''`.
    The solution to this situation is to add a second account for `user` as `''user''@''localhost''`.
    Then, when we log in again, we will see the following output of the same command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If you don't need them for any specific purpose, it's safer and more convenient
    to remove anonymous accounts altogether.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create a user named `dbuser` with access from the local
    machine to the database `testdb`. The user will have to authenticate using a strong
    password. Prepare the username, database name, and password for your particular
    case.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to create a user account, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server** | **User Permissions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create new user** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Username** to `dbuser`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Password** to a strong password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Hosts** to `localhost`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Permissions** list, do not select any permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We do not need to grant any global permission to the account, as the user will
    have access limited to a specific database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Granting privileges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to grant privileges, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server** | **Database Permissions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create new database permissions** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Databases** to **Selected** and choose **testdb** from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Username** to `dbuser`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Hosts** to `localhost`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Permissions** list, select all permissions as shown in the following
    screenshot:![Granting privileges](img/5849_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The created account and privileges will allow `dbuser` to connect to and have
    full control over the `testdb` database when connecting to the local MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The MySQL server will use accounts associated with the `localhost` when a client
    connects from the local machine, regardless of whether the connection is made
    over a socket or TCP. However, if you create an account associated with `127.0.0.1`,
    it will be used when connecting over TCP, but not when connecting on a socket.
    When connecting over TCP using IPv6, a third option comes into play, namely the
    IPv6 address of the local machine `::1`. It's best to set up accounts for `localhost`
    to avoid this confusion.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin creates accounts and grants privileges by manipulating the `mysql` database
    directly. In particular, it adds a row to the `user` and `db` tables and then
    executes the `FLUSH PRIVILEGES` command.
  prefs: []
  type: TYPE_NORMAL
- en: If you wanted to perform the same operations manually, you could connect to
    the MySQL server using its command-line client and issue the following commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'First connect to the local database server as root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next issue the MySQL commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The first command creates a user named `dbuser`, the second gives this user
    complete access to the `testdb` database. The final command forces your MySQL
    server to reload information about users and privileges so that the new user can
    connect.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin allows you to specify more granular access permissions—at the level of
    a database table or even a specific column within a database table. It also allows
    you to automatically create MySQL accounts for the new system users that are created
    via Webmin.
  prefs: []
  type: TYPE_NORMAL
- en: Granting permissions to a specific database table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to grant permissions to a specific database table, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server** | **Table Permissions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a database from the list and click the **Add new permissions in database**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a database **Table** from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Username** to the name of a previously defined MySQL user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Host** to the name of the host associated with the user account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the permissions you wish to grant from the **Table permissions** and
    **Field permissions** lists as shown in the following screenshot:![Granting permissions
    to a specific database table](img/5849_08_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Granting permissions to a specific column in a database table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To grant permissions to a specific column in a database table, perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server** | **Field Permissions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a database and table from the list and click the **Add new permissions
    in database and table** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a database table **Field** from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Username** to the name of a previously defined MySQL user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Host** to the name of the host associated with the user account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the permissions you wish to grant from the **Permissions** list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automatically granting new system users access to MySQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To automatically grant all system users access to MySQL, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server** | **User Permissions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all three checkboxes in the **When to synchronize** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select permissions in the **Permissions for new users** list. For instance,
    if you want every user of your system to be a MySQL administrator, select all
    permissions. Use this with caution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Create new users with hosts** to **Specific host** and enter `localhost`.![Automatically
    granting new system users access to MySQL](img/5849_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From now on, every new user account created through Webmin will automatically
    receive a corresponding MySQL account with the same password as the system password.
    Passwords will be updated if changed through Webmin, and the MySQL account will
    be deleted if the corresponding system account is also deleted through Webmin.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a backup of your database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webmin can help you make backups of your MySQL databases. With just a few clicks,
    you can make a backup of any database. Webmin can also help you set up cron jobs
    to create backups automatically on a regular schedule.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting, create a directory to store local backup files. You can keep
    these files in `/backups` in the root directory `/root/backups`, or in any location
    that you find convenient.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Backup files created by Webmin will be readable by all users of your system.
    This may be a security risk, since database backups often contain sensitive data
    such as hashed user passwords. You should remove all permissions on the backups
    directory for users outside of root''s group. You can do that by issuing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If your file system supports access control lists, you can additionally set
    the default mask for newly created files in this directory in such a way that
    they are not readable by users outside of the group. You can set the default ACL
    for `/backups` by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at the *Changing file ownership and permissions* recipe in [Chapter
    6](ch06.html "Chapter 6. Managing Files on Your System"), *Managing Files on Your
    System* , for more information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a database backup:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the database you would like to back up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Backup Database** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Backup to file** to a path such as `/backups/database-name.sql.bz2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Tables to backup** to **All tables**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Other backup options** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Add drop table statements to backup?** to **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This helps you import the created backup into an existing database. Tables with
    the same names will be deleted (dropped) before importing the ones stored in the
    backup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set **Character set for backup** to **UTF-8 Unicode**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Compression format** to **Bzip2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Bzip2 gives really good compression for text such as SQL command files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Backup Now** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin executes the `mysqldump` command to output a series of SQL commands
    that would be needed to create the entire database. The database "dump" is then
    piped through the bzip2 compression algorithm and saved to an output file. If
    you wanted to do the same kind of backup in the terminal, you could run a command
    similar to the following (make sure you set the `mysqldump` options correctly):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin is quite a capable tool for making backups. Here are a few other, easily
    accessible functions.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up all databases automatically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Webmin can help you make an automated backup of some or all databases hosted
    by your server. These backups will be executed on a regular schedule by cron.
    For more information about scheduling commands take a look at the *Scheduling
    a command to run regularly with cron* recipe in [Chapter 4](ch04.html "Chapter 4. Controlling
    Your System"), *Controlling Your System*. In order to back up all databases automatically,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Backup Databases** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Backup to directory** to the location of your backup directory, for instance,
    `/backups`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Other backup options** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Add drop table statements to backup?** to **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Character set for backup** to **UTF-8 Unicode**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Compression format** to **Bzip2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Backup schedule** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Send backup status email to** to your e-mail address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Scheduled backup enabled?** to **Yes, at times chosen below**, set **Simple
    schedule** and select **Daily (at midnight)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that many things may be scheduled to start at midnight on your system,
    so you can choose another time if your system resources are limited. Choose a
    more complex schedule by marking the minutes, hours, and days of the month at
    which the job is to be performed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exporting a database table to CSV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Webmin can export a single table of your database into a **comma-separated-values**
    (**CSV**) file that can be opened by spreadsheet programs, such as Excel, Calc,
    or Gnumeric. To export a database table to CSV, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon of the database, which contains the table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon of the table you would like to export.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Export to CSV** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **File format** to **CSV with quotes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Include column names in CSV?** to **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Export destination** to **Display in browser**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Export Now** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can easily perform backups to a remote host by using a network file sharing
    protocol such as NFS or CIFS. You start by creating a network volume on the remote
    server, and then mount the volume on your server. You can then back up to directories
    on the remote system just as easily as if they were stored locally. Take a look
    at [Chapter 6](ch06.html "Chapter 6. Managing Files on Your System"), *Managing
    Files on Your System*, for instructions on the setting up of network file sharing
    using NFS or CIFS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another way to store spare copies of your databases remotely is to send your
    backup directory to a remote server using the SSH protocol. Take a look at the
    *Backing up to a remote host* recipe in [Chapter 7](ch07.html "Chapter 7. Backing
    Up Your System"), *Backing Up Your System*, for more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing custom SQL commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webmin provides a simple interface to your MySQL database server that allows
    you to execute arbitrary SQL commands. This can be a useful feature when you want
    to quickly find something in a database or perform a bulk update of multiple rows
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to execute an SQL command on your database:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the database you would like to use, for instance,
    `mysql`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Execute SQL** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter an SQL command in the text area, for instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/5849_09_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with a sortable display of data returned by the `SELECT`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin simply passes the SQL command to the database server. If the command
    returns an error, it will be displayed on screen. If the command returns rows
    of data, Webmin will convert them into an HTML page and display them on screen.
    Please note that Webmin is running as the root user, so caution should be used
    when executing commands.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin can also help you to execute an entire SQL script saved in a file. See
    the *Restoring database from the backup* recipe of this chapter for more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can save commands you execute often in an easy-to-use control panel in Webmin.
    Take a look at the *Creating a panel with the database commands that you execute
    often* recipe in [Chapter 4](ch04.html "Chapter 4. Controlling Your System"),
    *Controlling Your System*, for more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you find that you need a more full-fledged, web-based MySQL management tool,
    consider installing phpMyAdmin. This is described in the *Installing phpMyAdmin*
    recipe in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restoring database from the backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Databases may be stored as text files that contain SQL instructions which rebuild
    them. If you have a SQL backup file, you can use Webmin to restore it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Large backups should be uploaded to the server before being executed. If your
    backup file is large, upload it to the server and note its location. Take a look
    at the *Uploading files to the server* recipe in [Chapter 6](ch06.html "Chapter 6. Managing
    Files on Your System"), *Managing Files on Your System*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: We will restore the backup to an existing database. If you haven't created the
    database yet, follow instructions in the *Creating a new database* recipe before
    starting.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to restore a database from backup or execute a SQL script
    saved in a file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the database you would like to restore the backup
    to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Execute SQL** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Run SQL from file** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have uploaded the file onto the server, select **From local file** and
    enter the file's location in the text box. Otherwise, select **From uploaded file**
    and choose a file from your disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Webmin can handle SQL files that are compressed using gzip or bzip2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin pipes the entire SQL instructions file into the MySQL server. The server
    executes every instruction stored in the file, rebuilding the database line by
    line.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wanted to perform the same task in the terminal, you could use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin can import a single table into your database from a CSV file that can
    be created by a spreadsheet program such as Excel, Calc, or Gnumeric.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to import a CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the database to which you would like to restore
    the backup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Execute SQL** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Import text file** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have uploaded the file onto the server, select **From local file** and
    enter the file's location in the text box. Otherwise, select **From uploaded file**
    and choose a file from your disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a table from the **Table to import data into** dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Character set** to **utf8 (UTF-8 Unicode)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with an information screen that describes how many rows
    were successfully imported or what errors were encountered.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the structure of your database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Webmin allows you to quickly modify the structure of tables in your MySQL database
    through an easy-to-use interface. In this recipe, we will demonstrate how to perform
    the following list of tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a table in a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a column to a database table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit a column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete an index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a table from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For demonstration purposes, we will be using a database called `testdb`. You
    can create a database with this name through Webmin by following the steps described
    in the *Creating a new database* recipe of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `testdb` database, we'll create a table called `people` and add a column
    called `name` to the table. We'll then change the width of the field, turn it
    into a unique index, and finally delete the index, field, and table from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a table in a database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a table in a database, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new table** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify `people` as **Table name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Type of table** to **myisam**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The table type option specifies which storage engine is used by this table.
    This determines what features are available for your table, for instance **myisam**
    allows for full-text search indexes, while **innodb** supports transactions. You
    can find more information on storage engines in MySQL''s manual:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://dev.mysql.com/doc/refman/5.6/en/storage-engines.html](http://dev.mysql.com/doc/refman/5.6/en/storage-engines.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Provide the definition of one field that will be the primary key for this table.
    Fill in the following field definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Field name**: `id`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data type**: **int**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type width**: `11`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key**: **Yes**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto increment**: **Yes**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow nulls**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Creating a table in a database](img/5849_09_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a field to a database table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to add a field to the database table, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `varchar` from the types drop-down menu and click the **Add field of
    type** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the following field definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Field name**: `name`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type width**: `80`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type options**: **Case insensitive**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow nulls**: **Yes**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default value**: **NULL**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Part of primary key?**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Editing a field
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To edit a field, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link for field `name`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Type width** to `128`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an index
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create an index, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create Index** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Index name** to `unique_name`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the field `name` in the **Fields in index** list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Index type** to **Unique**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting an index
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To delete an index, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `unique_name` index.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Delete** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting a field
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to delete a field, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link for `name` field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Delete** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting a table from the database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To delete a table from the database, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Drop table** button and confirm on the screen that follows it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin prepares the syntax for the appropriate `CREATE`, `DROP`, and `ALTER
    TABLE` SQL commands to perform all of the earlier mentioned actions, and then
    executes those commands on your MySQL server as the `root` user.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you find that you need a more full-fledged, web-based MySQL management tool,
    consider installing phpMyAdmin. This is described in the *Installing phpMyAdmin*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing records in a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webmin allows you to quickly edit data in your MySQL database through a simple
    interface. In this recipe, we will demonstrate how to add, edit, and delete records
    in a database table.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use examples based on the `testdb` database created
    in the *Creating a new database* and *Editing the structure of your database*
    recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll add a record to the `people` table of the `testdb` database; we'll edit
    the same record, and finally delete it to show how to perform these actions in
    Webmin.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a row to database table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to add a row to the database table, perfom the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **View Data** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add row** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in a name in the textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Editing a row
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to edit a row, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **View Data** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark the checkbox next to the record you would like to edit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Edit selected rows** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the name value in the text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting a row
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to delete a row, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `testdb` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon that represents the `people` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **View Data** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark the checkbox next to the record you would like to delete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Delete selected rows** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin prepares the syntax for the appropriate `INSERT`, `UPDATE`, and `DELETE`
    SQL commands to perform the preceding actions and executes those commands on your
    MySQL server as the `root` user.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you find that you need a more full-fledged, web-based MySQL management tool,
    consider installing phpMyAdmin. This is described in the *Installing phpMyAdmin*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking who is using your database server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may wish to check who is connected to your database server when debugging
    network connectivity, auditing security, or simply if you're curious. In Webmin,
    this information is just a few clicks away.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Database Connections** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see a list of active connections or a message that no clients other
    then Webmin are connected to the database at this time. Consider the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5849_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin queries your MySQL server for information about active client connections.
    You could gain the same information by running the SQL command `SHOW PROCESSLIST`
    in a MySQL client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin also makes it easy to close any unnecessary connections. The clients
    will have to re-establish their connections to continue using the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to close a connection:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **MySQL Database Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Database Connections** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark the checkbox next to the description of an active connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Kill Selected Connections** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing phpMyAdmin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: phpMyAdmin is a commonly used database administration tool for MySQL. It is
    a web-based application, like Webmin itself, but dedicated to all tasks related
    to the administration of a MySQL server. It's easy to use and can be a helpful
    tool for your database users and administrators.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: System packages are configured to run phpMyAdmin on Apache. The Apache web server
    and PHP are installed as package dependencies. If you're not already using Apache
    and PHP, this exposes a potential attack vector on your database server. Consider
    the security implications of installing phpMyAdmin and keep it up to date.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up phpMyAdmin on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the package named `phpmyadmin` (or `phpMyAdmin` depending on your system).
    Refer to the *Installing software packages* recipe in [Chapter 1](ch01.html "Chapter 1. Setting
    Up Your System"), *Setting Up Your System*, for more information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: On some systems, you may need to add an additional repository to install the
    package. For instance, if you're running a Linux distribution from the RedHat
    family (RHEL, CentOS, Fedora, and so on), you should add the **Extra Packages
    for Enterprise Linux** (**EPEL**) repository. Information about the setting up
    of EPEL can be found in the *Giving users access to your server via FTP* recipe
    in [Chapter 6](ch06.html "Chapter 6. Managing Files on Your System"), *Managing
    Files on Your System*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since phpMyAdmin runs on top of Apache, you should make sure that this server
    is installed on your system and is accessible to a browser. Follow the *Installing
    Apache on your system* recipe in [Chapter 8](ch08.html "Chapter 8. Running an
    Apache Web Server"), *Running an Apache Web Server*, to get Apache up and running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the following URL, but substitute `webmin-host` for the IP or domain
    name of your server: [http://webmin-host/phpmyadmin](http://webmin-host/phpmyadmin).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: On some systems, phpMyAdmin is configured to be accessible to connections that
    originate from the local host only. If you wish to change this behavior, go to
    **Servers** | **Apache Webserver** | **Default Server**, select **Per-Directory
    Options** for phpMyAdmin's directory, and change its **Access Control** settings.
    More information is provided in the *Setting options for directories, files, and
    locations* recipe in [Chapter 8](ch08.html "Chapter 8. Running an Apache Web Server"),
    *Running an Apache Web Server*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Information about additional steps that may be necessary to set up phpMyAdmin
    in your system distribution can be found in package documentation files. Refer
    to the *Reading the documentation of the installed software* recipe in [Chapter
    1](ch01.html "Chapter 1. Setting Up Your System"), *Setting Up Your System*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now log in using the username and password of a MySQL account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: phpMyAdmin will log you in as if you were connecting from the local machine,
    so privileges assigned to an account on `localhost` will be used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: phpMyAdmin is an application written in PHP. The main configuration file of
    phpMyAdmin is named `config.inc.php`, and it is usually installed inside the `/etc/`
    directory. Example locations for different distributions are listed in the following
    table. The code of the application itself is stored in the form of PHP script
    files in a directory named phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: Because phpMyAdmin is served by Apache, the installation package includes an
    application-specific configuration file that will be loaded by the web server.
    This file informs Apache where phpMyAdmin is stored on the disk and which of its
    directories should be made available on the web.
  prefs: []
  type: TYPE_NORMAL
- en: '| File | OS / distro | Location |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| phpMyAdmin configuration | Debian | `/etc/phpmyadmin/config.inc.php` |'
  prefs: []
  type: TYPE_TB
- en: '| CentOS | `/etc/phpMyAdmin/config.inc.php` |'
  prefs: []
  type: TYPE_TB
- en: '| OpenSUSE | `/etc/phpMyAdmin/config.inc.php` |'
  prefs: []
  type: TYPE_TB
- en: '| phpMyAdmin files | Debian | `/usr/share/phpmyadmin` |'
  prefs: []
  type: TYPE_TB
- en: '| CentOS | `/usr/share/phpMyAdmin` |'
  prefs: []
  type: TYPE_TB
- en: '| OpenSUSE | `/srv/www/htdocs/phpMyAdmin` |'
  prefs: []
  type: TYPE_TB
- en: '| Apache configuration file for phpMyAdmin | Debian | `/etc/phpmyadmin/apache.conf`
    |'
  prefs: []
  type: TYPE_TB
- en: '| CentOS | `/etc/httpd/conf.d/phpMyAdmin.conf` |'
  prefs: []
  type: TYPE_TB
- en: '| OpenSUSE | `/etc/apache2/conf.d/phpMyAdmin.conf` |'
  prefs: []
  type: TYPE_TB
- en: Regardless of how package maintainers decided to prepare it, you can tweak the
    Apache configuration for phpMyAdmin by going to **Servers** | **Apache Webserver**
    | **Default Server** and selecting **Per-Directory Options** for the phpMyAdmin
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'phpMyAdmin is a very capable tool and you can find detailed information about
    how it can be used in its documentation at: [http://docs.phpmyadmin.net/en/latest/](http://docs.phpmyadmin.net/en/latest/)'
  prefs: []
  type: TYPE_NORMAL

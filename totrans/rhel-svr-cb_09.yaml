- en: Chapter 9. Securing RHEL 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn all about:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring IPA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing the system login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring privilege escalation with sudo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing the network with `firewalld`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using kdump and SysRq
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ABRT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditing the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is an important aspect of your environment. The recipes provided in
    this chapter are not a definitive set of how-tos; rather, they are a start to
    addressing security in an environment as every environment is different. This
    chapter is meant to give you an idea of what you can do with a simple set of tools
    included in Red Hat Enterprise Server 7.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I will not attempt explaining where the system stores syslog
    messages and what they mean as this can be quite an exhaustive topic. The most
    important security-related syslog messages can be found in `/var/log/secure` and
    `/var/log/audit/audit.log`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring IPA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **IPA** (**Identity Policy Audit**) server allows you to manage your kerberos,
    DNS, hosts, users, sudo rules, password policies, and automounts in a central
    location. IPA is a combination of packages, including—but not limited to—`bind`,
    `ldap`, `pam`, and so on. It combines all of these to provide identity management
    for your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, I will opt for an integrated DNS setup, although it is possible
    to use your existing DNS infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we'll install the server component, followed by what needs to be done
    on an IPA client.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the IPA server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these instructions to install an IPA server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the necessary packages via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the packages are installed, invoke the `ipa` installer, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this stage, you will be asked a couple of questions on how to set up your
    IPA server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure integrated DNS as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Overwrite existing `/etc/resolv.conf` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide the IPA server''s hostname, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, confirm the DNS domain name for the IPA server as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide an IP address for the IPA server as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, provide a Kerberos `realm` name, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the directory manager''s password and confirm it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the IPA manager''s password and confirm it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, configure the DNS forwarders as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, configure the reverse DNS zones as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The installer will now provide an overview similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, confirm the information by typing "yes", as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, you will see a lot of information scrolling on your screen,
    indicating what the installer is doing: installing or configuring NTP, LDAP, BIND,
    Kerberos, HTTP, the certificate server, and IPA-related modifications to the preceding
    examples.'
  prefs: []
  type: TYPE_NORMAL
- en: The installation and configuration process can take a while, so be patient.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the IPA client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform these steps to install and configure the IPA client on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure that the hostname of your system is different from `localhost.localdomain`.
    If it is not, the client configuration will fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the necessary packages via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that the IPA server is used as a DNS server through the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke the IPA client configuration by running this command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The installer will now show an overview of the detected IPA server and ask
    for a user (the IPA manager) and password to register your system, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the IPA client](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once installed, you can manage your IPA environment using the command line tool
    IPA or the web interface, which can be accessed by pointing your browser to your
    IPA master server over HTTPS. In this case, the URL is `https://master.example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the IPA client doesn''t create `homedirs` for new users at first
    login. If you want to enable this, use the `--mkhomedir` argument with `ipa-client-install`.
    If you happen to have forgotten about this, there''s no need to reinstall the
    IPA client. You can just reconfigure this by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more in-depth information about installing and configuring your IPA server,
    go to [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Linux_Domain_Identity_Authentication_and_Policy_Guide/installing-ipa.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Linux_Domain_Identity_Authentication_and_Policy_Guide/installing-ipa.html).
  prefs: []
  type: TYPE_NORMAL
- en: For more information about managing your IPA environment through the command
    line, read the *ipa (1)* man pages.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the system login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default settings applied to system login are based on what Red Hat deems
    basic security. If, for some reason, you want to change this, this recipe will
    show you a couple of examples. Authconfig has two tools that you can use to configure
    authentication: `authconfig` and `authconfig-tui`.'
  prefs: []
  type: TYPE_NORMAL
- en: These two tools configure `pam` for you in such a way that the changes are consistent
    throughout rpm updates.
  prefs: []
  type: TYPE_NORMAL
- en: The `authconfig-tui` tool is not as feature-rich as the plan `authconfig` tool,
    which I personally recommend you to use as it allows you to do more.
  prefs: []
  type: TYPE_NORMAL
- en: You can manually edit the files located in `/etc/pam.d` if and when you know
    what you're doing, but this is not recommended.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, change the hash encryption of the passwords stored in `/etc/shadow`
    to `sha512`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable NIS authentication through the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, set the minimum length requirement for passwords to `16` via the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The user requires at least one lowercase letter in the password; you can set
    this requirement by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the user requires at least one uppercase letter in the password, for
    which you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the user requires at least one number in the password. Execute the following
    command for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the user requires at least one nonalphanumeric character in the password,
    which you can set using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`authconfig` and `authconfig-tui` are wrapper scripts that modify a variety
    of files, including, but not limited to, `/etc/nsswitch.conf`, `/etc/pam.d/*`,
    `/etc/sssd.conf`, `/etc/openldap/ldap.conf`, and `/etc/sysconfig/network`.'
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of the tool is that it uses the correct syntax, which can sometimes
    be a little tricky, especially for the files in `/etc/pam.d`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the interesting features of this tool is the backup and restore functions.
    In case you do not use any centralized identification and authentication infrastructure,
    such as IPA, you can use this to make a backup of a correctly configured machine
    and distribute this through whichever means you wish to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To back up your `authconf` configuration, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This will create a `/tmp/auth.conf` directory, which contains all the files
    modified by `authconfig`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy this directory over to another server and restore the configuration by
    executing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: All of the security changes you apply through `authconfig` can also be managed
    through IPA.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For information about and more configuration options, take a look at the *authconfig
    (8)* man pages.
  prefs: []
  type: TYPE_NORMAL
- en: You can also find more information on Red Hat's page on authentication at [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System-Level_Authentication_Guide/Configuring_Authentication.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System-Level_Authentication_Guide/Configuring_Authentication.html).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring privilege escalation with sudo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sudo allows users to run applications and scripts with the security privileges
    of another user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before allowing someone to elevate their security context for a specific application
    or script, you need to figure out which user or group you wish to elevate from
    and to, which applications/scripts you use, and on which systems to run them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default syntax for a sudo entry is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These simple five steps will guide you through setting up privilege escalation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `sudoers` definition file in `/etc/sudoers.d/` called clustering
    through the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a command alias for the most-used clustering tools called `CLUSTERING`
    by executing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a host alias group for all the clusters called `CLUSTERS`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a user alias for all cluster admins called `CLUSTERADMINS` by
    executing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s create a sudo rule that allows the users from `CLUSTERADMINS` to
    execute commands from `CLUSTERING` on all servers within the `CLUSTERS` group,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To edit the `sudoers` file, you can either use a text editor and edit `/etc/sudoers`,
    the `visudo` tool, which automatically checks your syntax when exiting.
  prefs: []
  type: TYPE_NORMAL
- en: It's always a good idea to leave the original `/etc/sudoers` file alone and
    modify the files located in `/etc/sudoers.d/`. This allows the sudo rpm to update
    the `sudoers` file should it be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about sudo, take a look at the *sudoers (5)* man page.
  prefs: []
  type: TYPE_NORMAL
- en: Secure the network with firewalld
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`firewalld` is a set of scripts and a daemon that manage `netfilter` on your
    RHEL system. It aims at creating a simple command-line interface to manage the
    firewall on your systems.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, `firewalld` is included in the "core" rpm group, but it may not
    be installed for some reason (that you left it out of your kickstart would be
    one!). Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `firewalld` via the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, enable `firewalld` through the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, ensure that `firewalld` is started by executing the following command
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Showing the currently allowed services and ports on your system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'List all the allowed services using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the output as follows, where all the allowed services are listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing the currently allowed services and ports on your system](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, show the `tcp`/`udp` ports that are allowed by your firewall using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the output should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing the currently allowed services and ports on your system](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Allowing incoming requests for NFS (v4)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to allow NFSv4 traffic on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, allow `nfs` traffic via this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, reload the configuration as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, check the newly applied rule by executing the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Allowing incoming requests on an arbitrary port
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to allow incoming traffic on port `1234` over both
    `tcp` and `udp`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, allow traffic on port `1234` over `tcp` and `udp` by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the configuration by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the newly applied rule via the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`firewalld` comes with a set of predefined port configurations, such as HTTP
    and HTTPS. You can find all such definitions in `/lib/firewalld/services`. When
    creating your own port definitions or modifying the existing ones, you should
    create new port definition files in `/etc/firewalld/services`.'
  prefs: []
  type: TYPE_NORMAL
- en: When creating new "rules" by adding ports, services, and so on, you need to
    add the `--permanent` option, or your changes would be lost upon the rebooting
    of the system or the reloading of the `firewalld` policy.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on configuring your firewall, check the man pages for *firewall-cmd(1)*.
  prefs: []
  type: TYPE_NORMAL
- en: Using kdump and SysRq
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The kdump mechanism is a Linux kernel feature, which allows you to create dumps
    if your kernel crashes. It produces an exact copy of the memory, which can be
    analyzed for the root cause of the crash.
  prefs: []
  type: TYPE_NORMAL
- en: SysRq is a feature supported by the Linux kernel, which allows you to send key
    combinations to it even when your system becomes unresponsive.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we'll set up kdump and SysRq, and afterwards, I'll show you how to use
    it to debug a dump.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring kdump and SysRq
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s take a look at how this is installed and configured:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the necessary packages for kdump by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that `crashkernel=auto` is present in the `GRUB_CMDLINE_LINUX` variable
    declaration in the `/etc/sysconfig/grub` file using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start `kdump` by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, enable `kdump` to start at boot, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure SysRq to accept all commands via the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Regenerate your **intramfs** (**initial RAM file system**) to contain the necessary
    information for kdump by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, reboot through the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using kdump tools to analyze the dump
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Although you''ll find most of the information you''re looking for in the `vmcode-dmesg.txt`
    file, it can be useful sometimes to look into the bits and bytes of the `vmcore`
    dump, even if it is just to know what the people at Red Hat do when they ask you
    to send you a `vmcore` dump. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the necessary tools to debug the `vmcore` dump via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate your `vmcore` by executing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you don''t have a core dump, you can trigger this yourself by executing
    the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `crash` to analyze the contents, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, `<kernel>` must be the same kernel as the one that the dump was created
    for:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Using kdump tools to analyze the dump](img/00063.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Display the kernel message buffer (this can also be found in the `vmcore-dmesg.txt`
    dump file) by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s what the output should look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Using kdump tools to analyze the dump](img/00064.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Display the kernel stack trace through the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s what the output should look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Using kdump tools to analyze the dump](img/00065.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now, show the processes at the time of the core dump, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s what the output should look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Using kdump tools to analyze the dump](img/00066.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default kdump configuration uses `/var/crash` to dump its memory on. This
    MUST be on the root filesystem. Some systems are configured with a separate filesystem
    for `/var`, so you need to change the location in `/etc/kdump.conf` or use a different
    target type, such as `raw`, `nfs`, and so on. If your crash directory is located
    on a nonroot filesystem, the kdump service will fail!
  prefs: []
  type: TYPE_NORMAL
- en: Although the crash utility can provide a lot of details about the crash, usually
    you're set with the contents of the `vmcore-dmesg.txt` file, which resides in
    the same directory as the `vmcore` file. So, I suggest that you parse this file
    before digging into the bits and bytes of the memory dump.
  prefs: []
  type: TYPE_NORMAL
- en: SysRq, as stated before, allows you to control your system even if it is in
    a state that doesn't allow you to do anything at all. However, it does require
    you to have access to the system's console.
  prefs: []
  type: TYPE_NORMAL
- en: By default, kdump creates a dump and reboots your system. In the event that
    this doesn't happen and you don't want to push the power button on your (virtual)
    system, SysRq allows you to send commands through the console to your kernel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key combination needed to send the information differs a little from architecture
    to architecture. Take a look at the following table for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Architecture | Key combination |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| x86 | `<Alt><SysRq><command key>` |'
  prefs: []
  type: TYPE_TB
- en: '| Sparc | `<Alt><Stop><command key>` |'
  prefs: []
  type: TYPE_TB
- en: '| Serial console (PC style only) | This sends a `BREAK` and, within 5 seconds,
    the command key.Sending `BREAK` twice is interpreted as a normal `BREAK`. |'
  prefs: []
  type: TYPE_TB
- en: '| PowerPC | `<Alt><Print Screen>`(or `<F13>`)`<command key>` |'
  prefs: []
  type: TYPE_TB
- en: 'So, on an x86 system, you would attempt to sync your disks before rebooting
    it by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if you still have access to your terminal, you can do the same
    by sending characters to `/proc/sysrq-trigger`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The following key commands are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command key | Function |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `b` | This immediately reboots your system. It does not sync or unmount disks.
    This can result in data corruption! |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | This performs a system crash by a `NULL` pointer dereference. A crashdump
    is taken if kdump is configured. |'
  prefs: []
  type: TYPE_TB
- en: '| `d` | This shows all the locks held. |'
  prefs: []
  type: TYPE_TB
- en: '| `e` | This sends a `SIGTERM` signal to all your processes, except for `init`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `f` | This calls `oom_kill` to kill any process hogging the memory. |'
  prefs: []
  type: TYPE_TB
- en: '| `g` | This is used by the **kernel debugger** (**kgdb**). |'
  prefs: []
  type: TYPE_TB
- en: '| `h` | This shows help. (Memorize this option!) |'
  prefs: []
  type: TYPE_TB
- en: '| `i` | This sends a `SIGKILL` signal to all your processes, except for `init`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `j` | This freezes your filesystems with the `FIFREEZE` ioctl. |'
  prefs: []
  type: TYPE_TB
- en: '| `k` | This kills all the programs on the current virtual console.It enables
    a secure login from the console as this kills all malware attempting to grab your
    keyboard input, for example. |'
  prefs: []
  type: TYPE_TB
- en: '| `l` | This shows a stack trace for all active CPUs. |'
  prefs: []
  type: TYPE_TB
- en: '| `m` | This dumps the current memory info to your console. |'
  prefs: []
  type: TYPE_TB
- en: '| `n` | You can use this to make real-time tasks niceable. |'
  prefs: []
  type: TYPE_TB
- en: '| `o` | This shuts down your system and turns it off (if configured and supported).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `p` | This dumps the current registers and flags to your console |'
  prefs: []
  type: TYPE_TB
- en: '| `q` | This will dump a list of all armed `hrtimers` (except for `timer_list`
    timers) per CPU together with detailed information about all clockevent devices.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `r` | This turns off your keyboard''s raw mode and sets it to `XLATE`. |'
  prefs: []
  type: TYPE_TB
- en: '| `s` | This attempts to sync all your mounted filesystems, committing unwritten
    data to them. |'
  prefs: []
  type: TYPE_TB
- en: '| `t` | This dumps a list of current tasks and their information to your console.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `u` | This attempts to remount all your filesystems as read-only volumes.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `v` | This causes the ETM buffer to dump (this is ARM-specific). |'
  prefs: []
  type: TYPE_TB
- en: '| `w` | This dumps all the tasks that are in an uninterruptable (blocked) state.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `x` | This is used by xmon on ppc/powerpc platforms. This shows the global
    PMU registers on SPARC64. |'
  prefs: []
  type: TYPE_TB
- en: '| `y` | This shows global CPU registers (this is SPARC64-specific). |'
  prefs: []
  type: TYPE_TB
- en: '| `z` | This dumps the `ftrace` buffer. |'
  prefs: []
  type: TYPE_TB
- en: '| `0` - `9` | This sets the console''s log level, controlling which messages
    will be printed. The higher the number, the more the output. |'
  prefs: []
  type: TYPE_TB
- en: See also…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about SysRq and systemd, refer to the following page:
    [https://github.com/systemdaemon/systemd/blob/master/src/linux/Documentation/sysrq.txt](https://github.com/systemdaemon/systemd/blob/master/src/linux/Documentation/sysrq.txt)'
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat has a complete crash dump guide at [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Kernel_Crash_Dump_Guide/index.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Kernel_Crash_Dump_Guide/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using ABRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ABRT** (**Automatic Bug Reporting Tool**), is a set of tools that help users
    detect and analyze application crashes.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we'll install the necessary packages and then take a look at how to use
    these tools.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring abrtd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s install `abrt` and get it running:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `abrt` daemon and tools via the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, enable and start the `abrt` daemon through these commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using abrt-cli
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'List all detected segmentation faults by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the output should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using abrt-cli](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The displayed location contains all the information about the segmentation fault.
    You can use this to analyze what went wrong, and if you need help from Red Hat,
    you can use `abrt-cli report` to report to Red Hat Support.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When your RHEL 7 system is registered with a satellite, all bugs will automatically
    be reported to the satellite system.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install additional plugins to automatically report bugs in the following
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: to Bugzilla (`libreport-plugin-bugzilla`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: via ftp upload (`libreport-plugin-reportuploader`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to Red Hat Support (`libreport-plugin-rhtsupport`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to an `abrt` server (`libreport-plugin-ureport`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Besides the basic bug reporting, you can also create automatic bug reports for
    Java by installing the `abrt-java-connector` package.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on how to use the abrt tool, refer to [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-abrt.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-abrt.html).
  prefs: []
  type: TYPE_NORMAL
- en: Auditing the system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Linux audit system allows you to track security-related information about
    your systems. It allows you to watch security events, filesystem access, network
    access, commands run by users, and system calls.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, audit is installed as part of the core packages. So, there's no
    need to install this.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a centralized syslog server to accept audit logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform these steps to set up the `syslog` server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `syslog` server, create a `/etc/rsyslog.d/audit_server.conf` file containing
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the `syslog` server, restart `rsyslog`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the client, create a `/etc/rsyslog.d/audit_client.conf` file containing
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, on the client, restart `rsyslog`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Some audit rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the following command to log activity on `/etc/resolv.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'You can execute the following commands to log all the commands executed by
    root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Showing audit logs for the preceding rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can search for the audit events that have changed `/etc/resolv.conf` using
    the preceding rule by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the output should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing audit logs for the preceding rules](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check all the commands executed by root today, you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the output should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing audit logs for the preceding rules](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more in-depth information about audit, refer to [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/chap-system_auditing.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/chap-system_auditing.html).
  prefs: []
  type: TYPE_NORMAL

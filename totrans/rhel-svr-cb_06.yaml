- en: Chapter 6. Orchestrating with Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be addressed:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Ansible inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the template for a kickstart file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a playbook to deploy a new VM with kickstart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a playbook to perform system configuration tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is an easy-to-use agentless system configuration management tool. It
    allows us to deploy complex configurations without the hassle of a complex interface
    or language.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible uses playbooks, which are collections of tasks to deploy configurations
    and applications to multiple nodes over SSH in a controlled way. However, it doesn't
    stop there.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible's modules, which are used to execute tasks, are all built to be idempotent
    in their execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The definition of Idempotence, according to Wikipedia, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Idempotence (/ˌaɪdɨmˈpoʊtəns/ eye-dəm-poh-təns [citation needed]) is the property
    of certain operations in mathematics and computer science that can be applied
    multiple times without changing the result beyond the initial application.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In short, any module will detect the changes to be applied and perform them.
    If it doesn't need to change anything, it will not reapply the requested changes
    or interfere with file metadata.
  prefs: []
  type: TYPE_NORMAL
- en: The Ansible company also provides Tower, a paid subscription with extra features,
    as an add-on to Ansible. Tower provides a graphical interface to control your
    Ansible orchestration tool. However, this is out of the scope of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Install Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is not in the default RHEL 7 repositories, but in this recipe, I will
    show you how to install it in several ways.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ansible needs the following packages installed:'
  prefs: []
  type: TYPE_NORMAL
- en: Python v2.7 (Ansible doesn't support v3 yet)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python-httplib2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python-jinja2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python-paramiko`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python-setuptools`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyYAML`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, in order to achieve this, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As RHEL 7 and some other major distributions come preinstalled with Python (yum
    requires it, as do most of the Red Hat tools), we don't have to include it in
    the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, I will cover the three most used methods of installing Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the latest tarball
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This method is quite simple as you just download the tarball and extract it
    in a location of your choosing. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Grab the latest tarball located at [http://releases.ansible.com/ansible/](http://releases.ansible.com/ansible/)
    via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Extract the tarball to `/opt`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a symbolic link for easy access using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Ansible binaries and man pages to your environment''s path by executing
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, source the Ansible PATH and MANPATH by running this command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, use the following command to regenerate the man pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing cutting edge from Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Git makes keeping your local copy of Ansible up to date quite simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'It automatically updates/removes files where needed. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure `git` is installed using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clone the Ansible `git` repository to `/opt`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Installing cutting edge from Git](img/00050.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Add the Ansible binaries and man pages to your environment''s path, through
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, source the Ansible PATH and MANPATH via this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, using the following line, regenerate the man pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing Ansible from the EPEL repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Installing from a repository has the advantage that you can keep your version
    of Ansible up to date along with your system. Here are the steps you need to perform:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the extra packages for the **Enterprise Linux** (**EPEL**) repository
    from [https://fedoraproject.org/wiki/EPEL](https://fedoraproject.org/wiki/EPEL)
    via this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, install Ansible using yum, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to keep your Git clone up to date, remember that the sources tree
    also contains two subtrees. You''ll have to execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the Ansible inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible inventory is the heart of the product as it provides a lot of variables
    about your environment to the deployment mechanism. These variables are known
    as `facts` and serve Ansible to make decisions, template text-based files, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several ways of adding information about your environment to your
    inventory.
  prefs: []
  type: TYPE_NORMAL
- en: The static inventory file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The static inventory is basically a mini-formatted file containing the definitions
    for hosts and groups. Here''s what you need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `/etc/ansible/hosts` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The dynamic inventory file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The dynamic inventory file has to be an executable file, generating a JSON
    string containing information about your hosts and groups. Follow these steps::'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `~/inventory.py` script with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, make the script executable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: host_vars files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `host_vars` file is a `yml`-formatted one containing extra facts, which will
    only be applied to the host with the same name as the file. Simply do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `host_vars` file for `srv1.domain.tld` through this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: group_vars files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like `host_vars`, `group_vars` files are `yml`-formatted ones containing extra
    facts. These will be applied to the group with the same name as the file. Perform
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `group_vars` file for mail via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The inventory file location is set in the Ansible configuration file—look for
    the line starting with `hostfile` within the `defaults` section. This file is
    either a static file, or a script returning a JSON-formatted list of hosts and
    groups, as shown in the preceding recipe. Ansible automatically detects whether
    a file is a script and treats it this way to import information.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one caveat, however: the script needs to show the JSON-formatted information
    by specifying `--list`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible can automatically combine the inventory with the `host_vars` and `group_vars`
    files if the latter two directories are in the same directory as the inventory
    file / script. Take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The same can be achieved by putting the `host_vars` and `group_vars` directories
    in the same directory as the playbook you are executing.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The facts in `host_vars` and `group_vars` take priority over the variables returned
    through the inventory.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ansible already seeds the inventory with the facts that it retrieves from the
    host itself. You can easily find out which facts Ansible prepares for your use
    by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This will produce a lengthy JSON-formatted output with all the facts Ansible
    knows about your destination host.
  prefs: []
  type: TYPE_NORMAL
- en: If you want even more information, on RHEL systems, you can install `redhat-lsb-core`
    to have access to LSB-specific facts.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprises tend to have databases containing information regarding all their
    systems for change management. This is an excellent source for the inventory script
    to get its information.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want more detailed information about the Ansible inventory, go to [http://docs.ansible.com/ansible/intro_inventory.html](http://docs.ansible.com/ansible/intro_inventory.html).
  prefs: []
  type: TYPE_NORMAL
- en: Shameless self-promotion for a personal project and a tool to automate the inventory
    calls for a mention of [https://github.com/bushvin/inventoryd/](https://github.com/bushvin/inventoryd/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a template for a kickstart file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `template` is one of the core modules of Ansible. It is used to easily generate
    files (for example, configuration files) based on a common set of facts. It uses
    the Jinja2 template engine to interpret template files.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we'll use a simple `kickstart` script that is generic enough
    to deploy any host. Refer to [Chapter 2](part0025_split_000.html#NQU21-501a83dd54944cb1bf060a2ce9fab11f
    "Chapter 2. Deploying RHEL "En Masse""), *Deploying RHEL "En Masse"*, to find
    out about `kickstart` files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The facts that we need for this host are `repo_url`, `root_password_hash`, `ntp_servers`,
    `timezone`, `ipv4_address`, `ipv4_netmask`, `ipv4_gateway`, and `dns_servers`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the `kickstart` file in your playbook''s template folder (`~/playbooks/templates/kickstart/rhel7.ks`)
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Jinja2 engine replaces all the variables enclosed by `{{ }}` with whichever
    facts are available for the specified host in the inventory, resulting in a correct
    `kickstart` file, assuming all variables have been correctly set.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jinja2 can do more than just replace variables with whatever is in the inventory.
    It was originally developed as a rich templating language for web pages and supports
    major features such as conditions, loops, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Jinja, you can easily loop over a list or array within the inventory
    and use the resultant variable or even dictionaries and objects. For example,
    consider that your host has the following fact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This would allow you to replace the network portion of your `kickstart` script
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'There is one consideration with provisioning new systems such as this and the
    inventory: you can only use the facts that you have introduced yourself, not those
    that Ansible gets from the system. This is because firstly, they don''t exist
    yet, and secondly, the task is executed on a different host.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about templating with Ansible, read the Jinja2 Template
    Designer documentation at [http://jinja.pocoo.org/docs/dev/templates/](http://jinja.pocoo.org/docs/dev/templates/).
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the Ansible template module, go to [http://docs.ansible.com/ansible/template_module.html](http://docs.ansible.com/ansible/template_module.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a playbook to deploy a new VM with kickstart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating playbooks for Ansible is a relatively easy task as most considerations
    are handled by the modules. All modules are made as "idempotently" as possible,
    meaning that a module first checks what it is supposed to do with what has been
    done on the system and only then applies the changes if they are different.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We don't need any additional facts for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: For this to work, we need to have a web server and a location to store the `kickstart`
    files, which will be served by the web server.
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of convenience, our web server is called `web.domain.tld`, the
    location on this web server is `/var/www/html/kickstart`, and this directory can
    be accessed through `http://web.domain.tld/kickstart`.
  prefs: []
  type: TYPE_NORMAL
- en: We also need a KVM host (refer to [Chapter 1](part0015_split_000.html#E9OE1-501a83dd54944cb1bf060a2ce9fab11f
    "Chapter 1. Working with KVM Guests"), *Working with KVM Guests*, on how to set
    up a KVM server). In this case, we'll call our KVM server `kvm.domain.tld`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create the playbook that will provision new systems via the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `~/playbooks/provisioning.yml` playbook with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You''ll also need to create the template for the `~/templates/isolinux/isolinux.cfg.el7`
    file; you can do this by executing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, use the following command to execute the playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The playbook starts off with a name describing the playbook, as does each task.
    Personally, I think naming your playbooks and tasks is a good idea as it will
    allow you to troubleshoot any issue at hand more easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gather_facts: no` directive prevents the playbook from actually trying
    and connecting to the target host and gather information. As the host is yet to
    be built, this is of no use and will make the playbook fail.'
  prefs: []
  type: TYPE_NORMAL
- en: The first task uses a template (such as the one created in the previous recipe)
    to generate a new `kickstart` file. By default, tasks are executed on the host
    specified in the command line, but by specifying the `delegate_to` directive,
    this is executed on the web server with the facts of the selected host.
  prefs: []
  type: TYPE_NORMAL
- en: The same goes for the two last tasks; these execute a command using the local
    shell on `kvm.domain.tld` with the host's facts.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see, the playbook also makes use of Jinja, allowing us to create
    dynamic playbooks that can do different things based on the available facts.
  prefs: []
  type: TYPE_NORMAL
- en: The more facts you have available in your inventory, the more dynamic you can
    go in your playbook. For instance, your source template could be OS-version specific
    and you can create all the virtual disks at once and specify the correct amount
    of CPUs and RAM upon system creation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on playbooks, go to [http://docs.ansible.com/ansible/playbooks.html](http://docs.ansible.com/ansible/playbooks.html).
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Ansible templates, go to [http://docs.ansible.com/ansible/modules_by_category.html](http://docs.ansible.com/ansible/modules_by_category.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a playbook to perform system configuration tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Changing a system's configuration with Ansible isn't much more difficult than
    provisioning a new system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will need the following facts for the new host:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ntp_servers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dns_servers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dns_search`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll also need to have a couple of templates to provision the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/logrotate.d/syslog`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/ntp.conf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/ntp/step-tickers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/resolv.conf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we''ll create the playbook to configure the system. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `~/playbooks/config.yml` playbook with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `~/playbooks/networking.handlers.yml` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a `~/playbooks/ntp-client.handlers.yml` file with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `~/playbooks/networking.tasks.yml` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a `~/playbooks/ntp-client.tasks.yml` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `~/playbooks/logrotate.tasks.yml` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is it for the playbook. Now we need to create the templates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a `~/playbooks/templates/etc/sysctl.d/ipv6.conf.el7` file with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a `~/playbooks/templates/etc/resolv.conf.el7` file with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `~/playbooks/templates/etc/ntp.conf.el7` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a `~/playbooks/templates/etc/ntp/step-tickers.el7` file with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `~/playbooks/templates/etc/logrotate.d/syslog.el7` file with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, deploy the playbook to a newly created host by executing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The guys at Ansible are really smart people, and they have Ansible packed with
    lots of power tools. Two that are worth mentioning here and are lifesavers for
    debugging your playbooks are `--check` and `--diff`.
  prefs: []
  type: TYPE_NORMAL
- en: The `ansible-playbook --check` tool allows you to run your playbook on a system
    without actually changing anything. Why is this important, you ask? Well, the
    output of the playbook will list which actions of the playbook will actually change
    anything on the target system.
  prefs: []
  type: TYPE_NORMAL
- en: An important point to remember is that not all modules support this, but Ansible
    will tell you when it's not supported by a module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `shell` module is one such module that doesn''t support the dry run, and
    it will not execute unless you specify the `always_run: yes` directive. Be careful
    with this directive as if the action would change anything, this directive will
    cause this change to be applied, even when specifying `--check`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I added the `''Detect if ::1 is in /etc/hosts''` action to the `networking.tasks.yml`
    file with the `always_run: yes` directive. This specific action just checks whether
    the line is present. The `ergep` returns code `0` if it finds a match and `1`
    if it doesn''t. It registers the result of the shell action to a variable (`hosts_lo_ipv6`).'
  prefs: []
  type: TYPE_NORMAL
- en: This variable contains everything about the result of the action; in this case,
    it contains the values for `stdout`, `stder,r`, and also (but not limited to)
    the result code, which we need for the next task in the playbook (`'Remove ::1
    from /etc/hosts'`) to decide on. This way, we can introduce a manual form of idempotency
    into the playbook for modules that cannot handle idempotency due to whatever restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ansible-playbook --diff --check` tool does the exact same work as discussed
    here. However, it comes with an added bonus: it shows you what exactly will be
    changed in the form of a `diff -u` between what it actually is and what it''s
    supposed to be. Of course, once again, the module has to support it.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the recipe, Ansible allows us to create reusable code by creating
    separate task and handler yml files. This way, you could create other playbooks
    referring to these files, without having to reinvent the wheel.
  prefs: []
  type: TYPE_NORMAL
- en: This becomes particularly practical once you start using roles to deploy your
    playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: Roles allow you to group playbooks and have them deployed according to the needs
    (that is, roles) of your server.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, a "lamp" role would deploy Linux, Apache, MariaDB, and PHP to
    a system using the playbooks included in the role. Roles can define dependencies.
    These dependencies are other roles, and thus, the "lamp" role could be broken
    down into three more roles that may be more useful as separate roles: Linux, Dbserver,
    and ApachePHP.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a breakdown of the directory/file structure that you''ll need to use
    for certain roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '| File structure | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `roles/` | The container for all roles to be used by Ansible. |'
  prefs: []
  type: TYPE_TB
- en: '| `roles/<role>` | This is the container for your role. |'
  prefs: []
  type: TYPE_TB
- en: '| `roles/<role>/files` | This contains the files to be copied using the copy
    module to the target hosts. |'
  prefs: []
  type: TYPE_TB
- en: '| `roles/<role>/templates` | This contains the template files to be deployed
    using the template module. |'
  prefs: []
  type: TYPE_TB
- en: '| `roles/<role>/tasks` | This is where the tasks go to perform all the necessary
    actions. |'
  prefs: []
  type: TYPE_TB
- en: '| `roles/<role>/tasks/main.yml` | This playbook is automatically added to the
    play when this role is applied to a system. |'
  prefs: []
  type: TYPE_TB
- en: '| `roles/<role>/handlers` | This is the location of your role handlers. |'
  prefs: []
  type: TYPE_TB
- en: '| `roles/<role>/handlers/main` | This set of handlers is automatically added
    to the play. |'
  prefs: []
  type: TYPE_TB
- en: '| `roles/<role>/vars` | This location holds all the variables for your role.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `roles/<role>/vars/main.yml` | This set of variables is automatically applied
    to the play. |'
  prefs: []
  type: TYPE_TB
- en: '| `roles/<role>/defaults` | This is the directory to hold the defaults for
    any fact you may need. The facts/variables defined in this way have the lowest
    priority, meaning that your inventory will win in the event that a fact is defined
    in both. |'
  prefs: []
  type: TYPE_TB
- en: '| `role/<role>/defaults/main.yml` | This set of defaults is automatically added
    to the play. |'
  prefs: []
  type: TYPE_TB
- en: '| `role/<role>/meta` | This directory holds all the role dependencies for this
    role. |'
  prefs: []
  type: TYPE_TB
- en: '| `role/<role>/meta/main.yml` | This set of dependencies is automatically added
    to the play. |'
  prefs: []
  type: TYPE_TB
- en: 'In order to address the roles created in this way, you just need to create
    a playbook containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you could create a role lamp that has Linux, DBserver, and ApachePHP
    as the dependencies in the `meta`/`main.yml` file by creating it with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on Ansible Roles and Includes, go to [http://docs.ansible.com/ansible/playbooks_roles.html](http://docs.ansible.com/ansible/playbooks_roles.html).
  prefs: []
  type: TYPE_NORMAL
- en: For more information on playbooks, go to [http://docs.ansible.com/ansible/playbooks.html](http://docs.ansible.com/ansible/playbooks.html).
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Ansible templates, go to [http://docs.ansible.com/ansible/modules_by_category.html](http://docs.ansible.com/ansible/modules_by_category.html).
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ve written it before, and I''ll do it again: the people at Ansible are really
    smart as they actually packed it with power tools.'
  prefs: []
  type: TYPE_NORMAL
- en: One of my favorite troubleshooting tools is `--verbose` or `-v`. As you'll find
    out in this recipe, it's more than just verbose logging when deploying a playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see what happens with a `~/playbooks/hello_world.yml` playbook with
    the following contents when specifying up to 4 `-v` tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ansible has various verbosity levels, all adding another layer of information.
    It''s important to understand which layer adds what. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, execute the playbook without `–v`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the playbook with one `–v`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, execute the playbook with two `–v` tools; run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, execute the playbook with three `–v` tools via this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This table depicts what information is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '| # of –v | Information shown |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `0` | We obtained information about the play, facts gathered (if not disabled),
    and tasks executed, along with an overview of which and how many tasks are executed
    per server. |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | Additionally, in this case, each task shows all the values related
    to the module used. |'
  prefs: []
  type: TYPE_TB
- en: '| `2` | This shows some extra usage information additionally. There''s not
    much now, but this will be expanded in the future. |'
  prefs: []
  type: TYPE_TB
- en: '| `3` | Additionally, this shows information about and the result for SSH operations.
    |'
  prefs: []
  type: TYPE_TB
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using the three `v` tools, you get to see what Ansible does to execute
    a certain task, and the SSH options will already get you started by debugging
    issues with communication to a certain host. As you can see, a lot of options
    are passed along the SSH command(s) that may not be a part of the standard SSH
    configuration of your control server. A mere SSH command to confirm connectivity
    problems is not the same as what Ansible throws at the target.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of SSH issues occur due to a faulty profile at the other end, so besides
    testing your SSH connection, it may be a good idea to make sure that your `.bashrc`
    and `.bash_profile` files are correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible has a module called debug, which allows you to show the values for
    a certain fact/variable or collection of facts. Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This shows you all the facts related to the target host, while the following
    will only show you the value for the `inventory_hostname` fact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want a certain playbook or task to not log anything, use the `no_log:
    True` directive.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the play level, consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, on the task level, consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE

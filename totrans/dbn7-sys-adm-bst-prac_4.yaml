- en: Chapter 4. Basic Package Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debian depends heavily on the configuration methods used by the upstream developers
    of each package, supplemented by the Debian developers' modifications and additions
    to standardize package configuration, and make the administrator's life easier.
    In this chapter, we will cover the standard location of configuration files, utilities
    available to assist in configuration, trends in configuration file management,
    and some examples.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most configuration files reside in the `/etc` directory hierarchy. In general,
    most packages place their configuration files in a subdirectory named after the
    software. In cases where the upstream developers do not do this, the Debian package
    usually modifies the behavior. A good example is the **BIND** DNS server software.
    Traditionally, the base configuration is placed in `/etc/named.conf`, with any
    other configuration files placed in the `/var/lib/named` directory. The Debian
    BIND package places all configuration files in `/etc/bind9` and its subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, there is a `/etc/`default directory, in which commonly modified
    options are placed in a file matching the package name. Again, using BIND, the
    file is `/etc/default/bind9`, and contains two simple options: whether the `resolvconf`
    dynamic resolver is being used, and what options the server should be run with.
    We''ll cover this directory first.'
  prefs: []
  type: TYPE_NORMAL
- en: /etc/default
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The configuration files in this directory are intended to control the standard
    initialization scripts found in `/etc/init.d` (known as `init` scripts), or the
    way various system libraries behave. They contain environment variable definitions
    that are used by system libraries or in the `init` scripts, to control execution
    options, software module loading, and anything else that can be controlled dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of definitions used by the `init` scripts, the variables usually
    include a definition of command line options to be used. In some cases, setting
    one of the variables modifies the behavior of the script. For example, setting
    `RESOLVCONF` to anything but `no` in `/etc/default/bind9` will cause the `init`
    script to use the `resolvconf` utility to add an appropriate resolver line for
    the local loopback interface during initialization (and remove it during shutdown).
  prefs: []
  type: TYPE_NORMAL
- en: For those scripts that apply to system libraries, they generally define default
    behavior for commands or software that the libraries affect. A good example of
    this is `/etc/default/nss`, which controls how the **Name Service Switch** (**NSS**)
    functions in the GNU C library. In particular, it controls what information the
    library will consider authoritative for NSS calls, as well as the behavior of
    certain function calls.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In special cases, the default definition file may not be a single file, but
    a subdirectory of `/etc/default`. This is done to split information into groups
    of related variables, both for ease of update, and to allow local modifications
    that won't be overwritten when configuration files are replaced.
  prefs: []
  type: TYPE_NORMAL
- en: /etc/<package name>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration files are placed in `/etc` by most software developers, and this
    is standard practice for Debian packages. If the file is fairly simple, and the
    only file required, it is often placed directly in `/etc` with a `.conf` extension,
    such as /`etc/inetd.conf` for the `openbsd-inetd` package. For packages that require
    a more complex configuration, usually via multiple configuration files, those
    files are placed in a subdirectory of `/etc` which is generally named after the
    package. A good example of this is the `apache2` package, which has its configuration
    files in `/etc/apache2` and its subdirectories.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple files in a subdirectory are used for a number of reasons. In some cases,
    it is because the original software uses different files for different purposes.
    In other cases, it is done to organize configuration items into a more manageable
    and understandable group. Occasionally, Debian developers have modified the package
    to organize the configuration to simplify or streamline administration.
  prefs: []
  type: TYPE_NORMAL
- en: A good example of this is Apache. Normal Apache configuration is either by a
    single file or multiple files that are included by the master configuration file.
    Traditionally, **SSL** (**Secure Sockets Layer**) certificates and keys, and Virtual
    Host configuration files are contained in subdirectory, but all major options
    are configured in one or a few files in the main directory. Debian has actually
    split the configuration into many files in various subdirectories. This allows
    Debian to supply separate packages that provide certain features via individual
    configuration files that are added to the proper directory, rather than requiring
    modification of the primary configuration files. Also, there are subdirectories
    for modules and virtual hosts prefixed by `available-` or `enabled-`. This allows
    a simple script to activate or deactivate modules and virtual hosts easily and
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As it's not yet available in the stable release, Debian developers are taking
    this concept further in future releases, by providing a config-available and config-enabled
    directory, as well as allowing features to be activated and deactivated without
    editing config files or installing or removing feature packages. This will probably
    be available in Debian 8, code-named **Jessie**.
  prefs: []
  type: TYPE_NORMAL
- en: Initial configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the stability requirements for Debian is that when a package is installed,
    it should not adversely affect the system. Often, this is as simple as providing
    a standard configuration, such as Apache's simple **It works!** page. In other
    cases, however, at least some information must be provided during installation
    in order to create a basic, working configuration. This is handled by having the
    installation procedure ask the necessary questions during the installation process
    in order to create a working configuration. In fact, Debian developers have created
    the extensive `debconf` subsystem for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: The `debconf` subsystem provides the ability to configure packages before, during,
    and after installation, and it is integrated into all Debian packages that require
    configuration. It supports a number of frontend user interfaces, prewritten answers
    that can be input to the installation process, a simple interface for asking questions
    and providing the answers to the installation scripts, and even ways to reconfigure
    packages any time after installation. In general, this method of configuration
    provides only the most commonly used configuration options. More complex configurations
    must be handled by using any utilities provided by the packages, or by editing
    the configuration files directly.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you edit configuration files directly, Debian administrators have passed
    on various techniques to the developers to ease this process. In some cases, they
    have created alternative and more understandable configuration files that are
    scanned and used to create the actual, complex configuration by scripts provided
    in the package. A good example of this is the GRUB2 boot loader. An administrator
    makes whatever modifications to the configuration files in `/etc/default` and
    `/etc/grub.d`, and then runs `update-grub` to create the actual file that GRUB
    uses to load the operating system. The script then executes the necessary commands
    for creating and installing the configuration, as well as the necessary updates
    of other files affected by GRUB reconfiguration. This is just one example of how
    various utilities created by the Debian developers and other third parties have
    simplified Debian administration.
  prefs: []
  type: TYPE_NORMAL
- en: Another good example is sendmail. Administrators often modify the files and
    various database files required by sendmail to tailor it for large, corporate
    installations. However, instead of compiling the configuration and databases,
    then forcing sendmail to load the new configuration, a single command, `sendmailconfig`,
    will perform all of the necessary steps at once, with minimal interruption in
    server operation.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, what are some of the utilities provided for Debian administration? We've
    already mentioned a couple of specialized ones for GRUB and sendmail. There are
    many others that handle specific software or services, either included in the
    Debian package itself, or in a separate package. Here, however, we're concerned
    with more general utilities. The two main ones are `dpkg-reconfigure` and `gadmin`.
  prefs: []
  type: TYPE_NORMAL
- en: dpkg-reconfigure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This utility reruns the same configuration scripts that run during installation.
    It is run from the command line, and options can be used to vary the level of
    complexity of the questions asked. It is generally used when extensive, local
    modifications aren't required and the administrator just wants to update the basic
    configuration as provided by the installation scripts. It is also useful if the
    basic configuration has been corrupted, or changes made that have caused the package
    to stop working, to return it to the configuration provided immediately after
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: It is generally not useful if the configuration requires options that are not
    commonly used, or if the configuration requires extensive local modifications
    that aren't normally covered by the installation scripts, except perhaps to return
    the configuration to a post-installation condition as noted previously.
  prefs: []
  type: TYPE_NORMAL
- en: gadmin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is actually a suite of packages, each covering a different major service.
    Unfortunately, this is not as universal as `dpkg-reconfigure`, but it does handle
    more complex configurations. The following services are covered as of Debian 7:'
  prefs: []
  type: TYPE_NORMAL
- en: Bind (DNS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenVPN (both client and server)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ProFTPD (FTP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RSYNC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Samba (Windows Shares)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a graphical tool, based on **GTK** (**GIMP Tool Kit**). It was developed
    to provide some administrator functions under the GNOME desktop environment. It
    will handle fairly complex configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Desktop configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have been discussing server configuration. User configuration of
    a desktop environment is actually a little easier, as both **GNOME** (**GNU Object
    Model Environment**) and **KDE** (**K Desktop Environment**), as well as other
    desktop managers, provide a full suite of utilities gathered in one menu area
    that allows the user to easily configure things such as desktop appearance, behavior,
    window themes, login behavior, and system and session services relevant to their
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Other utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, there are a number of packages that were created for the express purpose
    of configuring individual services. There are software packages that provide graphic
    or command line configuration tools for any number of other software packages.
    The packages vary in complexity and usage, as they are usually provided by third
    parties. They can be found by using any of the search capable Debian package managers.
    **Synaptic** is probably the easiest as it allows one to easily browse descriptions
    after searching.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of the third-party utilities are not aware of modifications Debian makes
    to the configuration file layout in order to ease administration, upgrades, and
    stability. Often, they use the upstream configuration file layout, or sometimes
    even the author's idea of a better layout. Although the Debian package upgrade
    procedure will handle this as a local configuration file modification, it does
    make extra work for the administrator during upgrades. Keep this in mind when
    deciding whether to use third-party configuration utilities.
  prefs: []
  type: TYPE_NORMAL
- en: The next section will cover the preferred methods for local configuration in
    Debian.
  prefs: []
  type: TYPE_NORMAL
- en: Local configuration trends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because Debian upgrades often affect configuration files, the developers have
    crafted techniques to lower the impact of upgrades on locally modified configurations.
    In particular, they are moving to provide separate local configuration files and
    special directories that help maintain local changes during upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: Local configuration files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many software packages are moving to a multiple file configuration system. Debian
    developers are using this feature to protect local changes by instructing administrators
    to place their modifications in a file with a `.local` extension. In other cases,
    such as the Apache configuration directories, files are placed in specified subdirectories
    (`conf.d` and `sites-available` in this case), and may be named freely, as long
    as they don't conflict with file names used by standard Debian or upstream configurations.
    In these cases, the Debian developers have modified the configuration files so
    they contain commands to include local configuration files, overriding the standard
    files as necessary. In any case, a savvy administrator will use such separate
    files for local configuration changes when possible, so that they are unaffected
    by package updates.
  prefs: []
  type: TYPE_NORMAL
- en: One of the side effects of this separation of local configuration files is that
    the update procedure will no longer ask you whether to install the developers'
    configuration, leave the local configuration, or reconcile the two. Generally,
    this is what you want, as your local changes will remain in place, and any new
    features will have reasonable defaults that shouldn't cause problems. However,
    in cases where there are possible major changes to the configuration defaults,
    a pop-up description of the changes occurs during the upgrade (requiring acknowledgement),
    and is also emailed to the root account. Even without this, though, it is good
    practice to browse the package documentation for configuration advice and the
    configuration files for any obvious changes, after the upgrade is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration subdirectories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many software packages not only support separate, local configuration files,
    but also provide a special subdirectory to help organize and manage multiple configuration
    files. In some cases, the files in these directories require a specific extension
    in order to be considered active or enabled. This makes it easy to enable or disable
    software features. In other cases, all files in the directory are considered as
    part of the configuration, and a different method is used to enable and disable
    specific files or features, such as used in the Debian Apache software packages.
  prefs: []
  type: TYPE_NORMAL
- en: In any case, Debian developers usually recommend care in adding your own files,
    usually by including the word local somewhere in the name, or by placing them
    in directories that are provided specifically for local files.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration advice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, how do you know what configuration facilities are provided and what the
    recommended approach to local configuration is? The best place to begin is the
    `README.debian` file that comes with the package. It is a requirement of the **Debian
    Policy** manual that this file explains any special configuration issues, how
    configuration under Debian differs from the configuration provisions of the original
    software developers, and recommended ways to handle local configuration. It also
    explains any utilities Debian has added to aid in software configuration. This
    file exists in `/usr/share/doc/<package name>`, which also contains any original
    software documentation, plus any added by the Debian developers. This directory
    is standard with nearly all Debian packages, and is mandatory for any that have
    extensive documentation or special configuration issues.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some packages have such extensive documentation that it is provided in a separate
    package so that it can be installed on a separate system providing faster, local
    access to the information without requiring space or processing on the server
    on which the software is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at some examples that involve fairly complex configuration
    file sets.
  prefs: []
  type: TYPE_NORMAL
- en: Apache configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we will look at the Apache web server software configuration and see how
    Debian handles it. The details on what the configuration actually does will not
    be covered, as they are complex and covered in the package documentation. However,
    we will look at how the files are set up, and what procedures are provided by
    Debian for configuration maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to observe about the Debian Apache packages is that the type
    of server, threaded, non-threaded, event-driven, or multi-user, is determined
    by which package is installed to satisfy the server dependency in the main apache2
    meta package. In addition, the documentation is split off into a separate package,
    which places the Apache manuals in a web directory and adds the necessary configuration
    files so that Apache can serve them up as web pages.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic configuration file layout is as follows and is also documented in
    the `/etc/apache2/apache2.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuration files](img/3118OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The files shown are the only ones that are considered part of the actual apache2
    configuration by virtue of being included by commands in the main configuration
    file or one of the files it includes. Note that there is also a `sites-available`
    and a `mods-available` directory that are not automatically included in the configuration.
    The files in these latter two directories are included by virtue of links pointing
    to them from the `mods-enabled` and `sites-enabled` directories, which we will
    cover shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, configuration changes will be limited to the `ports.conf` file,
    adding or modifying files in `conf.d`, and the links in `mods-enabled` and `sites-enabled`
    directories (and the files they point to). Any files you modify that are provided
    as part of one of the Debian packages will, of course, be checked during upgrades
    and you will be prompted for the proper action. Such files are generally only:'
  prefs: []
  type: TYPE_NORMAL
- en: '`envvars`: This is the file containing environment variables used by Apache
    and the `apache2ctl` utility'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ports.conf`: This is the file that controls which ports and IP addresses Apache
    listens on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.conf` extension files in `mods-available` directory: These are the files
    which control the configuration of a module when loaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default` and `default-ssl` in `sites-available` directory: These are the files
    which control the behavior of the default web service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'files in the `conf.d` directory: These are the files that are part of add-on
    packages, such as `phpmyadmin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifications to these files should, of course, be kept to a minimum, but sometimes
    they are necessary. Most local configuration will be done by adding files to the
    `conf.d` directory, or to the `sites-available` directory (along with appropriate
    links in the `sites-enabled` directory), where virtual hosts are configured.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Debian 7, the files are only included if they begin with a letter or number.
    It does not include `.dpkg` and do not contain anything other than letters, numbers,
    and underscores. In Debian 8, only files that end in `.conf` or `.load` will be
    included.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling sites and modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned previously, site and module configurations and options are placed
    in the `sites-available` and `mods-available` directories. They are not included
    unless there is a link to them in the `sites-enabled` or `mods-enabled` directory.
    Instead of making the links manually, use the `a2enmod` and `a2dismod` commands
    to enable or disable modules, and the `a2ensite` and `a2dissite` commands to enable
    or disable specific site configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Testing and activating the configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once all modifications have been made, and the appropriate sites or modules
    enabled, it is best to test the configuration for obvious errors. While it is
    possible to use the `init` script in `/etc/init.d/apache2` for this, the `apache2ctl`
    utility is specifically intended for, and better suited for this purpose. There
    is a `configtest` command option (detailed in the `apache2ctl` manual page) which
    will perform basic checking on all of the included files. It won't catch all errors,
    but it will catch the majority of them. After you are confident the configuration
    is correct, it is necessary to reload or restart Apache in order for the changes
    to become effective. Again, while the `init` script can handle this, using `apache2ctl`
    is the preferred method.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to get Apache to reload its configuration files, a regular
    restart, or a graceful restart (which doesn't actually restart, it just reloads
    the configuration). The graceful restart is the preferred method because if there
    is some issue with the configuration, especially something the `configtest` was
    unable to catch, the web service continues running with the old configuration,
    avoiding server downtime while you fix the problem. A graceful restart may take
    some time if there are long-running threads, since it waits until all threads
    are idle before reloading the configuration. A full restart forcibly terminates
    all threads and reloads the configuration, and won't restart the server after
    it is fully stopped, if there are configuration errors.
  prefs: []
  type: TYPE_NORMAL
- en: Other examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Apache example should give you a feel for how Debian splits configuration
    files into smaller, more easily managed files, and provides means to ease various
    administration tasks, such as activating and deactivation modules. Other software
    will have different layouts, as well as, different configuration features and
    utilities, all described in the appropriate documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exim**, for example, uses a single, monolithic configuration file. In order
    to split files out, Debian provides a utility `update-exim4.conf` that combines
    all of the separate configuration files from the `/etc/exim4/conf.d` hierarchy
    into the single file required by the exim4 software. There are several minor variations
    in how this may be done (all explained in the documentation), so that an administrator
    can choose his preferred method.'
  prefs: []
  type: TYPE_NORMAL
- en: Debian sendmail, another email package, uses another method. All of its configuration
    files are in the `/etc/mail` hierarchy, and **GNU make** is used after updating
    the configuration to create all of the necessary database and config files. In
    fact, a special utility, `sendmailconfig`, will not only run make for you, it
    will also handle incorporating `/etc/default/sendmail` changes, and reload the
    sendmail configuration after processing is complete.
  prefs: []
  type: TYPE_NORMAL
- en: All of this shows how the Debian developers provide various methods of making
    configuration easier. Simpler packages may have few, one, or no configuration
    files. Those with larger or more complex configuration won't all be handled identically,
    although the technique of splitting files into smaller, easier to modify pieces
    and providing utilities to ease config administration will be common to most (and,
    per Debian policy, described in the documentation for each package).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Debian stays close to the upstream software developer's configuration
    methods, the Debian developers frequently modify configuration file layout to
    simplify local configuration and upgrades, and often provide additional utilities
    to ease the administrator's job. Third-party utilities are sometimes available
    as well, but the administrator should understand that the output of these utilities
    may not always follow the Debian configuration layout.
  prefs: []
  type: TYPE_NORMAL
- en: Now, with basic software configuration out of the way, it's time to cover more
    system wide administration issues.
  prefs: []
  type: TYPE_NORMAL

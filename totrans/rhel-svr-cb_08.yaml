- en: Chapter 8. Yum and Repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing yum history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a copy (mirror) of any (RHN) repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring additional repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up yum to automatically update
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring `logrotate` for yum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recovering from a corrupted RPM database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Originally, you needed to compile your GNU/Linux system manually from source,
    which used to be time consuming and could be problematic if you couldn't get your
    dependencies straight. Red Hat created **Red Hat Package Manager** (**RPM**) in
    1998 to address the concerns of dependencies and reduce the time needed to install
    a system (among others). Since then, RPM has been improved by the Open Source
    community. One such improvement is yum.
  prefs: []
  type: TYPE_NORMAL
- en: '**Yellowdog Updater, Modified** (**yum**) is a package management tool using
    RPM. It allows RPM to access remote repositories of RPM files and will automatically
    download the required RPM files based on the dependency information provided by
    RPM.'
  prefs: []
  type: TYPE_NORMAL
- en: Without a Red Hat Network subscription, you will not get access to updates.
  prefs: []
  type: TYPE_NORMAL
- en: Besides Red Hat Network, you can purchase Red Hat Satellite if you want even
    more control of your Red Hat systems.
  prefs: []
  type: TYPE_NORMAL
- en: Managing yum history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An often overlooked feature of yum is the history. It allows you to perform
    a load of additional features that can save your skin in an enterprise environment.
  prefs: []
  type: TYPE_NORMAL
- en: It allows you to turn back the proverbial clock to the last functioning state
    of an application should there be an issue with a package update, without having
    to worry about dependencies and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, I'll show you a couple of the most used yum history features.
  prefs: []
  type: TYPE_NORMAL
- en: Your yum history
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the following command to show your yum history:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will list the output, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Your yum history](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Information about a yum transaction or package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Show the details of a yum transaction by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show you all about this single transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Information about a yum transaction or package](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Show the details of a package installed with yum through the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show information about all the transactions that have modified the
    `ntp` package in some way (installed/updated/removed):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Information about a yum transaction or package](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Undoing/redoing certain yum transactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Undo a specific transaction through the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command undoes a specific transaction (defined by the ID), as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Undoing/redoing certain yum transactions](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you can redo a specific transaction using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will reperform a specific transaction (as defined by the transaction
    ID), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Undoing/redoing certain yum transactions](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Roll back to a certain point in your transaction history
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This allows you to undo all transactions up until the transaction ID that you
    specify. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the transaction ID up to which you roll back is `6`. You will get the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Roll back to a certain point in your transaction history](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have to be careful when you use history options such as undo and rollback.
    Yum does its best to comply, but it cannot restore configurations, and it will
    not restore previous versions of your configuration files if you have edited them.
    This is not a fail-safe option if you don't have any backups. Although both options
    are very useful, I recommend that you do not use them too often. When you do use
    them, try to keep the impact of the transactions as small as possible. The smaller
    the delta, the more chance of succeeding in undoing or rolling back!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *yum(8)* man pages for more information about yum history options.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a copy of an RHN repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, I'll show you how you can set up a yum repository for Red Hat
    Network-based and "plain" yum repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you create a copy of an RHN repository, you need to ensure that you have
    a valid subscription to the repository that you want to duplicate. When this prerequisite
    is met, you can perform this recipe from the machine that uses the subscription.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before being able to create yum repositories, we need to install a couple of
    tools by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `createrepo` and `yum-utils` packages using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, install the Apache web server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Syncing RHN repositories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can only sync RHN subscriptions that you have access to. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory to hold the RHN `rhel7` repository, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create `/mnt/iso` by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Mount the RHEL 7 Server DVD through the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, copy the `*-comps-Server.x86_64.xml` file from the RHEL Server DVD to
    your `repo` directory. The following command will help in this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Unmount the RHEL Server DVD, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Synchronize the RHEL 7 OS repository by running the following command: (This
    may take a while… I suggest you kill time drinking a cup of freshly ground Arabica
    coffee!)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the local repository (depending on your hardware, this may take
    a long time), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, test your repository through the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s create a copy of the EPEL repository through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install the EPEL repository, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a directory to hold the EPEL repository by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, download the `*-comps-epel7.xml` file to `/repo` as `comps-epel7.xml`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will need to replace the multiple `x`'s with the correct MD5 hash, as found
    in the `repodata` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, synchronize the EPEL repository by executing the following (this may
    take a very long time, depending on your hardware and internet speed):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the local repository (again, depending on your hardware, this may take
    a long time), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, test your repository by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When synchronizing RHEL 7 repositories, you will only be able to sync those
    you have entitlement to. To find out what entitlements you have on a given system
    connected to RHN, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Whenever you synchronize a repository, try to keep the same directory structure
    as the original. I have found that it makes life easier when you want to rewrite
    your `/etc/yum.repos.d` files.
  prefs: []
  type: TYPE_NORMAL
- en: In an enterprise, it is useful to have a point in time when you "freeze" your
    yum repositories to ensure that all your systems are at the same RPM level. By
    default, any repository is "live" and gets updated whenever a new package is added.
    The advantage of this is that you always have the latest version of all packages
    available; the downside is that your environment is not uniform and you can end
    up troubleshooting for different versions of the same package.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to achieve a "frozen" repository is to create a central location
    that holds all the RPMs as you would a normal yum mirror or copy.
  prefs: []
  type: TYPE_NORMAL
- en: Every `x` time, which you predefine, create a new directory with a timestamp,
    in which you hard link all the RPMs you mirror. Then finally, create a hard link
    to the directory, which you will later use in your repo configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Directories | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `/rhel7/x86_64.all` | This directory contains a mirror which is synced nightly.
    RPMs are added, never deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| `/rhel7/x86_64.20150701` | This directory contains hard links to the RPMs
    in `/rhel7/x86_64`, all of which were synced on 01/07/2015, along with monthly
    iterations of the `/rhel6/x86_64.20150701` directory. |'
  prefs: []
  type: TYPE_TB
- en: '| `/rhel7/x86_64` | This directory contains a hard link to the monthly iteration,
    which is deemed in production. |'
  prefs: []
  type: TYPE_TB
- en: Of course, you need to ensure that you create a repository for each new sync!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *createrepo(8)* man pages for more information about creating a
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Also, refer to the *reposync(1)* man pages for more information on keeping your
    repository up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring additional repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you create your own mirror repository or organizations provide software
    for you in repositories, setting up additional repositories on your RHEL system
    is quite simple. This recipe will show you how to set them up. Many repositories
    have their own repo files or even an RPM that automatically installs the repository.
    When these are available, don't hesitate to use them!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this to work, you will need to have a repository set up, which can be accessed
    through the following URL: `http://repo.example.com/myrepo/7/x86_64`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to create an additional repository, create a file in `/etc/yum.repos.d`
    called `myrepo.repo`, which contains the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `gpgcheck=1` option only functions if you or the provider of a repo has
    signed all the RPMs in the repo. This is generally a good practice and provides
    extra security to your repositories.
  prefs: []
  type: TYPE_NORMAL
- en: The `$releasever` and `$basearch` variables allow you to create a single repository
    file that can work on multiple systems as long as you have a repository for the
    URLs. The `$releasever` variable expands to the major version of the OS (7 in
    our case), and the `$basearch` will expands to x86_64\. On an i386 system (RHEL
    7 only comes in the x86_64 architecture), `$basearch` expands to i386.
  prefs: []
  type: TYPE_NORMAL
- en: You can find many repositories on the Internet, such as `epel` and `elrepo`,
    but it may not always be a good idea to use them. Any software provided by the
    Red Hat standard repositories are also supported by Red Hat, and they will no
    longer support you if you start using the same software provided through another
    repository. So, you better ensure that you don't care about support or have another
    party that is willing to support you.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although I do not condone the use of these in production without taking the
    appropriate support actions, here is a list of some popular repositories that
    you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ELRepo repository can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://elrepo.org/tiki/tiki-index.php](http://elrepo.org/tiki/tiki-index.php)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The EPEL repository is at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://fedoraproject.org/wiki/EPEL](https://fedoraproject.org/wiki/EPEL)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Puppetlabs repositories can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.puppetlabs.com/guides/puppetlabs_package_repositories.html](https://docs.puppetlabs.com/guides/puppetlabs_package_repositories.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Zabbix repositories are at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/documentation/2.0/manual/installation/install_from_packages](https://www.zabbix.com/documentation/2.0/manual/installation/install_from_packages)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the RepoForge repositories, refer to the following website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://repoforge.org/use/](http://repoforge.org/use/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remi''s repositories can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://rpms.famillecollet.com/](http://rpms.famillecollet.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Webtatic repositories are at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://webtatic.com/projects/yum-repository/](https://webtatic.com/projects/yum-repository/)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up yum to automatically update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In enterprises, automating the systematic updating of your RHEL systems is very
    important. You want to stay ahead of hackers or, in general, people trying to
    hurt you by exploiting the weaknesses in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Although I do not recommend applying this recipe to all systems in an enterprise,
    this is quite useful to ensure that certain systems are kept up to date as the
    patches and bugfixes are applied to the RPMs in Red Hat's (and other) repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order for this recipe to work, you'll need to be sure that the repositories
    you are using are set up correctly and you have valid mail setup (using Postfix
    or Sendmail, for example).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll set up yum to autoupdate your system once a week (at 03:00 ) and reboot
    if necessary through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the yum cron plugin, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, disable the hourly and daily yum cron jobs through the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the configuration file for the weekly yum update cron job via the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the created configuration file to apply updates and send a notification
    through e-mail by setting the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a weekly cron job by adding the following contents to `/etc/cron.weekly/yum-weekly.cron`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, make the cron job executable by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, `yum-cron` sets up a cron job that is run every hour (`/etc/cron.dhourly/0yum-hourly.cron`)
    and every day (`/etc/cron.daily/0yum-daily.cron`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe will upgrade all your packages when there''s an update available.
    If you just want to apply security fixes, modify the `update_cmd` value of your
    yum cron configuration file in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can even use the following configuration if you only want
    critical fixes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check the *yum cron(8)* man page or the default `yum-cron.conf` file located
    at `/etc/yum/yum-cron.conf` for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring logrotate for yum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every time you use yum to install and/or update packages, it logs to `/var/log/yum.log`.
    A lot of people don't want to rotate the file a lot as they believe (incorrectly)
    that it is their only source to the history of their yum tasks. They may even
    believe that it provides a way to restore your rpm database if it gets corrupted
    - it does not.
  prefs: []
  type: TYPE_NORMAL
- en: I do recommend keeping your complete yum history as it doesn't grow a lot, unless
    you reinstall packages a lot.
  prefs: []
  type: TYPE_NORMAL
- en: For a rich interface to your yum history, I suggest you use yum history.
  prefs: []
  type: TYPE_NORMAL
- en: By default, your yum log file is rotated yearly, and even then, it only rotates
    if the size of your log file exceeds 30 KB, and your logs are only kept for 4
    years. Usually, this is enough in the physical world as physical servers tend
    to be replaced every 3-4 years. However, virtual servers have the potential to
    stay "alive" beyond these 3-4 years.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modify `/etc/logrotate.d/yum` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This configuration will only rotate the yum log when it exceeds 30 KB in size
    on a yearly basis, and it will keep 1000 rotated logs, which is basically log
    files for 1000 years!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on how to use and configure logrotate, refer to the *logrotate(8)*
    man page.
  prefs: []
  type: TYPE_NORMAL
- en: Recovering from a corrupted RPM database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although everything is done to ensure that your RPM databases are intact, your
    RPM database may become corrupt and unuseable. This happens mainly if the filesystem
    on which the `rpm db` resides is suddenly inaccessible (full, read-only, reboot,
    or so on).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you the two ways in which you can attempt to restore your
    RPM database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Verify that your system is backed up in some way.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start with the easiest option and the one with the highest success rate
    in these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by creating a backup of your corrupt `rpm db`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove stale lock files if they exist through the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, verify the integrity of the `Packages` database via the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the previous step prints `0`, proceed to Step 7.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Rename the `Packages` file (don''t delete it, we''ll need it!), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, dump the `Packages db` from the original `Packages db` by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the integrity of the newly created `Packages` database. Run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the exit code is not `0`, you will need to restore the database from backup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Rebuild the `rpm` indexes, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, use the following command to check the `rpm db` with yum for any other
    issues (this may take a long time):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restore the SELinux context of the `rpm` database through the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/00059.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If, for some reason, you are unable to recover your RPM database, there is one
    final option left. Enterprises tend to have standardized builds, and many servers
    are installed with the same packages, so copy the healthy `/var/lib/rpm` directory
    from another server with the exact same package set to the corrupted one, and
    perform the preceding recipe's steps to ensure that everything is okay.
  prefs: []
  type: TYPE_NORMAL
- en: Although you'll find additional tools that can save your skin (such as RPM cron),
    it's usually more practical to have a decent backup.
  prefs: []
  type: TYPE_NORMAL

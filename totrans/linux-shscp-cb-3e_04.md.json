["```\n[a-z0-9_]+@[a-z0-9]+\\.[a-z]+. \n\n```", "```\n( +[a-zA-Z]+ +) \n\n```", "```\n( +[a-zA-Z]+[?,\\.]? +) \n\n```", "```\n[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3} \n\n```", "```\n[[:digit:]]{1,3}\\.[[:digit:]]{1,3}\\.[[:digit:]]{1,3}\\.[[:digit:]]{1,3} \n\n```", "```\n        $ echo -e \"this is a word\\nnext line\" | grep word \n this is a word\n\n```", "```\n        $ grep pattern filename\n this is the line containing pattern\n\n```", "```\n        $ grep \"pattern\" filename\n this is the line containing pattern\n\n```", "```\n        $ grep \"match_text\" file1 file2 file3 ... \n\n```", "```\n        $ grep -color=auto word filename\n this is the line containing word\n\n```", "```\n        $ grep -E \"[a-z]+\" filename\n\n```", "```\n        $ egrep \"[a-z]+\" filename\n\n```", "```\n        $ echo this is a line. | egrep -o \"[a-z]+\\.\"\n line\n\n```", "```\n        $ grep -v match_pattern file\n\n```", "```\n        $ grep -c \"text\" filename\n 10\n\n```", "```\n        $ echo -e \"1 2 3 4\\nhello\\n5 6\" | egrep  -c \"[0-9]\"\n 2\n\n```", "```\n        $ echo -e \"1 2 3 4\\nhello\\n5 6\" | egrep -o \"[0-9]\" | wc -l\n 6\n\n```", "```\n        $ cat sample1.txt\n gnu is not unix\n linux is fun\n bash is art\n $ cat sample2.txt\n planetlinux\n $ grep linux -n sample1.txt\n 2:linux is fun\n\n```", "```\n        $ cat sample1.txt | grep linux -n\n\n```", "```\n        $ grep linux -n sample1.txt sample2.txt\n sample1.txt:2:linux is fun\n sample2.txt:2:planetlinux\n\n```", "```\n        $ echo gnu is not unix | grep -b -o \"not\"\n 7:not\n\n```", "```\n        $ grep -l linux sample1.txt sample2.txt\n sample1.txt\n sample2.txt\n\n```", "```\n    $ grep \"text\" . -R -n\n\n```", "```\n    $ cd src_dir\n $ grep \"test_function()\" . -R -n\n ./miscutils/test.c:16:test_function();\n\n```", "```\n    $ find . -type f | xargs grep \"test_function()\"\n\n```", "```\n    $ echo hello world | grep -i \"HELLO\"\n hello\n\n```", "```\n    $ grep -e \"pattern1\" -e \"pattern2\"\n\n```", "```\n    $ echo this is a line of text | grep -o -e \"this\" -e \"line\"\n this\n line\n\n```", "```\n    $ grep -f pattern_filesource_filename\n\n```", "```\n    $ cat pat_file\n hello\n cool\n\n $ echo hello this is cool | grep -f pat_file\n hello this is cool\n\n```", "```\n    $ grep \"main()\" . -r  --include *.{c,cpp}\n\n```", "```\n    $ grep \"main()\" . -r --exclude \"README\" \n\n```", "```\n    $ grep main . -r -exclude-dir CVS\n\n```", "```\n    $ echo \"test\" > file1\n $ echo \"cool\" > file2\n $ echo \"test\" > file3\n\n```", "```\n    $ grep \"test\" file* -lZ | xargs -0 rm\n\n```", "```\n#!/bin/bash  \n#Filename: silent_grep.sh \n#Desc: Testing whether a file contain a text or not  \n\nif [ $# -ne 2 ]; then \n  echo \"Usage: $0 match_text filename\" \n  exit 1 \nfi \n\nmatch_text=$1  \nfilename=$2 \ngrep -q \"$match_text\" $filename \n\nif [ $? -eq 0 ]; then \n  echo \"The text exists in the file\" \nelse \n  echo \"Text does not exist in the file\" \nfi \n\n```", "```\n    $ ./silent_grep.sh Student student_data.txt \n The text exists in the file \n\n```", "```\n    $ seq 10 | grep 5 -A 3\n 5\n 6\n 7\n 8\n\n```", "```\n    $ seq 10 | grep 5 -B 3\n 2\n 3\n 4\n 5\n\n```", "```\n    $ seq 10 | grep 5 -C 3\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n\n```", "```\n    $ echo -e \"a\\nb\\nc\\na\\nb\\nc\" | grep a -A 1\n a\n b\n --\n a\n b\n\n```", "```\n        cut -f FIELD_LIST filename\n\n```", "```\n        $ cut -f 2,3 filename\n\n```", "```\n        $ cat student_data.txt \n No  Name  Mark  Percent\n 1  Sarath  45  90\n 2  Alex  49  98\n 3  Anu  45  90\n\n $ cut -f1 student_data.txt\n No \n 1 \n 2 \n 3 \n\n```", "```\n        $ cut -f2,4 student_data.txt\n Name     Percent\n Sarath   90\n Alex     98\n Anu      90\n\n```", "```\n        $ cut -f3 --complement student_data.txt\n No  Name    Percent \n 1   Sarath  90\n 2   Alex    98\n 3   Anu     90\n\n```", "```\n        $ cat delimited_data.txt\n No;Name;Mark;Percent\n 1;Sarath;45;90\n 2;Alex;49;98\n 3;Anu;45;90\n\n $ cut -f2 -d\";\" delimited_data.txt\n Name\n Sarath\n Alex\n Anu\n\n```", "```\n    $ cat range_fields.txt\n abcdefghijklmnopqrstuvwxyz\n abcdefghijklmnopqrstuvwxyz\n abcdefghijklmnopqrstuvwxyz\n abcdefghijklmnopqrstuvwxy\n\n```", "```\n    $ cut -c2-5 range_fields.txt\n bcde\n bcde\n bcde\n bcde\n\n```", "```\n    $ cut -c -2  range_fields.txt\n ab\n ab\n ab\n ab\n\n```", "```\n    $ cut range_fields.txt -c1-3,6-9 --output-delimiter \",\"\n abc,fghi\n abc,fghi\n abc,fghi\n abc,fghi\n\n```", "```\n $ sed 's/pattern/replace_string/' file \n\n```", "```\n $ cat file | sed 's/pattern/replace_string/'\n\n```", "```\n $ cat /etc/passwd | cut -d : -f1,3 | sed 's/:/ - UID: /'\n root - UID: 0\n bin - UID: 1\n ...\n\n```", "```\n        $ sed -i 's/text/replace/' file\n\n```", "```\n        $ sed 's/pattern/replace_string/g' file\n\n```", "```\n        $ echo thisthisthisthis | sed 's/this/THIS/2g' \n thisTHISTHISTHIS\n\n $ echo thisthisthisthis | sed 's/this/THIS/3g' \n thisthisTHISTHIS\n\n $ echo thisthisthisthis | sed 's/this/THIS/4g' \n thisthisthisTHIS\n\n```", "```\n        sed 's:text:replace:g'\n sed 's|text|replace|g'\n\n```", "```\n        sed 's|te\\|xt|replace|g'\n\n```", "```\n    $ sed '/^$/d' file\n\n```", "```\n    $ sed 's/PATTERN/replacement/' -i filename\n\n```", "```\n    $ cat sed_data.txt\n 11 abc 111 this 9 file contains 111 11 88 numbers 0000\n\n $ sed -i 's/\\b[0-9]\\{3\\}\\b/NUMBER/g' sed_data.txt\n $ cat sed_data.txt\n 11 abc NUMBER this 9 file contains NUMBER 11 88 numbers 0000\n\n```", "```\n    sed -i .bak 's/abc/def/' file\n\n```", "```\n    $ echo this is an example | sed 's/\\w\\+/[&]/g'\n [this] [is] [an] [example]\n\n```", "```\n    $ echo this is digit 7 in a number | sed 's/digit \\([0-9]\\)/\\1/'\n this is 7 in a number\n\n```", "```\n    $ echo seven EIGHT | sed 's/\\([a-z]\\+\\) \\([A-Z]\\+\\)/\\2 \\1/'\n EIGHT seven\n\n```", "```\n    sed 'expression' | sed 'expression'\n\n```", "```\n    $ sed 'expression; expression'\n\n```", "```\n    $ sed -e 'expression' -e expression'\n\n```", "```\n    $ echo abc | sed 's/a/A/' | sed 's/c/C/'\n AbC\n $ echo abc | sed 's/a/A/;s/c/C/'\n AbC\n $ echo abc | sed -e 's/a/A/' -e 's/c/C/'\n AbC\n\n```", "```\n $ text=hello\n $ echo hello world | sed \"s/$text/HELLO/\" \n HELLO world \n\n```", "```\nawk ' BEGIN{ print \"start\" } pattern { commands } END{ print \"end\"}' file\n\n```", "```\n    awk 'BEGIN { statements } { statements } END { end statements }'\n\n```", "```\n    awk \"BEGIN { statements } { statements } END { end statements }\"\n\n```", "```\n    $ awk 'BEGIN { i=0 } { i++ } END{ print i}' filename\n\n```", "```\n    $ awk \"BEGIN { i=0 } { i++ } END{ print i }\" filename\n\n```", "```\n    $ echo -e \"line1\\nline2\" | awk 'BEGIN{ print \"Start\" } { print } \\   \n        END{ print \"End\" } '\n Start\n line1\n line2\n End\n\n```", "```\n    $ echo | awk '{ var1=\"v1\"; var2=\"v2\"; var3=\"v3\"; \\\n print var1,var2,var3 ; }'\n\n```", "```\n    v1 v2 v3\n\n```", "```\n    $ echo | awk '{ var1=\"v1\"; var2=\"v2\"; var3=\"v3\"; \\\n print var1 \"-\" var2 \"-\" var3 ; }'\n v1-v2-v3\n\n```", "```\n    $ echo -e \"line1 f2 f3\\nline2 f4 f5\\nline3 f6 f7\" | \\\n\n awk '{\n print \"Line no:\"NR\",No of fields:\"NF, \"$0=\"$0,   \n        \"$1=\"$1,\"$2=\"$2,\"$3=\"$3 \n }' \n Line no:1,No of fields:3 $0=line1 f2 f3 $1=line1 $2=f2 $3=f3 \n Line no:2,No of fields:3 $0=line2 f4 f5 $1=line2 $2=f4 $3=f5 \n Line no:3,No of fields:3 $0=line3 f6 f7 $1=line3 $2=f6 $3=f7\n\n```", "```\n    $awk '{ print $3,$2 }'  file\n\n```", "```\n    $ awk 'END{ print NR }' file\n\n```", "```\n    $ seq 5 | awk 'BEGIN{ sum=0; print \"Summation:\" } \n { print $1\"+\"; sum+=$1 } END { print \"==\"; print sum }' \n Summation: \n 1+ \n 2+ \n 3+ \n 4+ \n 5+ \n ==\n 15\n\n```", "```\n    $ VAR=10000\n $ echo | awk -v VARIABLE=$VAR '{ print VARIABLE }'\n 10000\n\n```", "```\n    $ var1=\"Variable1\" ; var2=\"Variable2\"\n $ echo | awk '{ print v1,v2 }' v1=$var1 v2=$var2\n Variable1 Variable2\n\n```", "```\n    $ awk '{ print v1,v2 }' v1=$var1 v2=$var2 filename\n\n```", "```\n    $ seq 5 | awk 'BEGIN { getline; print \"Read ahead first line\", $0 }     \n    { print $0 }'\n Read ahead first line 1 \n 2\n 3\n 4\n 5\n\n```", "```\n $ awk 'NR < 5' # first four lines\n    $ awk 'NR==1,NR==4' #First four lines\n    $ # Lines containing the pattern linux (we can specify regex)\n    $ awk '/linux/' \n    $ # Lines not containing the pattern linux\n    $ awk '!/linux/' \n\n```", "```\n    $ awk -F: '{ print $NF }' /etc/passwd\n\n```", "```\n    awk 'BEGIN { FS=\":\" } { print $NF }' /etc/passwd\n\n```", "```\n    \"command\" | getline output ;\n\n```", "```\n    $ awk 'BEGIN {FS=\":\"} { \"grep root /etc/passwd\" | getline; \\\n        print $1,$6 }'\n root /root\n\n```", "```\n    arrayName[index]\n\n```", "```\n    myarray[index]=value\n\n```", "```\n    for(i=0;i<10;i++) { print $i ; } \n\n```", "```\n    for(i in array) { print array[i]; } \n\n```", "```\n    $ awk 'BEGIN {FS=\":\"} {nam[$1]=$5} END {for {i in nam} \\\n        {print i,nam[i]}}' /etc/passwd\n root root\n ftp FTP User\n userj Joe User\n\n```", "```\n#!/bin/bash \n#Name: word_freq.sh \n#Desc: Find out frequency of words in a file \n\nif [ $# -ne 1 ]; \nthen \n  echo \"Usage: $0 filename\"; \n  exit -1 \nfi \n\nfilename=$1 \negrep -o \"\\b[[:alpha:]]+\\b\" $filename | \\\n  awk '{ count[$0]++ }\n    END {printf(\"%-14s%s\\n\",\"Word\",\"Count\") ;\n      for(ind in count)\n        { printf(\"%-14s%d\\n\",ind,count[ind]); \n        }\n      }\n\n```", "```\n    $ ./word_freq.sh words.txt \n Word          Count \n used           1\n this             2 \n counting   1\n\n```", "```\negrep -o \"\\b[[:alpha:]]+\\b\" $filename | tr [A=Z] [a-z] | \\ \n  awk '{ count[$0]++ } \n    END{ printf(\"%-14s%s\\n\",\"Word\",\"Count\") ; \n      for(ind in count) \n        {  printf(\"%-14s%d\\n\",ind,count[ind]); \n        }\n      }' | sort \n\n```", "```\n    $ cat sample.js\n function sign_out()\n { \n\n $(\"#loading\").show(); \n $.get(\"log_in\",{logout:\"True\"},\n\n function(){ \n window.location=\"\";\n }); \n }\n\n```", "```\n    $ cat sample.js |  \\\n tr -d '\\n\\t' |  tr -s ' ' \\\n | sed 's:/\\*.*\\*/::g' \\\n | sed 's/ \\?\\([{}();,:]\\) \\?/\\1/g' \n\n```", "```\n    function sign_out(){$(\"#loading\").show();$.get(\"log_in\",  \n    {logout:\"True\"},function(){window.location=\"\";});}\n\n```", "```\n    $ cat obfuscated.txt | sed 's/;/;\\n/g; s/{/{\\n\\n/g; s/}/\\n\\n}/g' \n\n```", "```\n    $ cat obfuscated.txt | sed 's/;/;\\n/g' | sed 's/{/{\\n\\n/g' | sed   \n    's/}/\\n\\n}/g'\n\n```", "```\n tr -d '\\n\\t'  \n\n```", "```\n tr -s ' ' or sed 's/[ ]\\+/ /g' \n\n```", "```\n sed 's:/\\*.*\\*/::g' \n\n```", "```\n sed 's/ \\?\\([{}();,:]\\) \\?/\\1/g' \n\n```", "```\n    $ paste file1 file2 file3 ...\n\n```", "```\n    $ cat file1.txt\n 1\n 2\n 3\n 4\n 5\n $ cat file2.txt\n slynux\n gnu\n bash\n hack\n $ paste file1.txt file2.txt\n 1 slynux\n 2 gnu\n 3 bash\n 4 hack\n 5\n\n```", "```\n    $ paste file1.txt file2.txt -d \",\"\n 1,slynux\n 2,gnu\n 3,bash\n 4,hack\n 5,\n\n```", "```\n        $ awk '{ print $5 }' filename\n\n```", "```\n        $ ls -l | awk '{ print $1 \" :  \" $8 }'\n -rw-r--r-- :  delimited_data.txt\n -rw-r--r-- :  obfuscated.txt\n -rw-r--r-- :  paste1.txt\n -rw-r--r-- :  paste2.txt\n\n```", "```\n        $ awk 'NR==M, NR==N' filename\n\n```", "```\n        $ cat filename | awk 'NR==M, NR==N'\n\n```", "```\n        $ seq 100 | awk 'NR==4,NR==6' \n 4 \n 5 \n 6\n\n```", "```\n        $ awk '/start_pattern/, /end _pattern/' filename\n\n```", "```\n        $ cat section.txt \n line with pattern1 \n line with pattern2 \n line with pattern3 \n line end with pattern4 \n line with pattern5 \n\n $ awk '/pa.*3/, /end/' section.txt \n line with pattern3 \n line end with pattern4\n\n```", "```\n        tac file1 file2 ...\n\n```", "```\n        $ seq 5 | tac\n 5 \n 4 \n 3 \n 2 \n 1\n\n```", "```\n        $ echo \"1,2\" | tac -s ,\n 2\n 1\n\n```", "```\n        seq 9 | \\\n          awk '{ lifo[NR]=$0 } \\\n            END { for(lno=NR;lno>-1;lno--) { print lifo[lno]; }\n                }'\n\n```", "```\n    [A-Za-z0-9._]+@[A-Za-z0-9.]+\\.[a-zA-Z]{2,4} \n\n```", "```\n    $ cat url_email.txt \n this is a line of text contains,<email> #slynux@slynux.com.    \n    </email> and email address, blog \"http://www.google.com\",    \n    test@yahoo.com dfdfdfdddfdf;cool.hacks@gmail.com<br />\n <a href=\"http://code.google.com\"><h1>Heading</h1>\n\n```", "```\n    $ egrep -o '[A-Za-z0-9._]+@[A-Za-z0-9.]+\\.[a-zA-Z]{2,4}'    \n    url_email.txt\n slynux@slynux.com \n test@yahoo.com \n cool.hacks@gmail.com\n\n```", "```\n    http://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,4}\n\n```", "```\n    $ egrep -o \"http://[a-zA-Z0-9.]+\\.[a-zA-Z]{2,3}\" url_email.txt \n http://www.google.com \n http://code.google.com\n\n```", "```\n[A-Za-z0-9.]+@[A-Za-z0-9.]+\\.[a-zA-Z]{2,4} \n\n```", "```\nhttp://[a-zA-Z0-9.]+\\.[a-zA-Z]{2,3} \n\n```", "```\n    $ cat sentence.txt \n Linux refers to the family of Unix-like computer operating systems   \n    that use the Linux kernel. Linux can be installed on a wide variety   \n    of computer hardware, ranging from mobile phones, tablet computers   \n    and video game consoles, to mainframes and supercomputers. Linux is \n    predominantly known for its use in servers.\n\n```", "```\n    $ sed 's/ [^.]*mobile phones[^.]*\\.//g' sentence.txt\n Linux refers to the family of Unix-like computer operating systems   \n    that use the Linux kernel. Linux is predominantly known for its use   \n    in servers.\n\n```", "```\n find . -name *.cpp -print0 | \\\n        xargs -I{} -0 sed -i 's/Copyright/Copyleft/g' {}\n\n```", "```\n    $ find . -name *.cpp -exec sed -i 's/Copyright/Copyleft/g' \\{\\} \\;\n\n```", "```\n    $ find . -name *.cpp -exec sed -i 's/Copyright/Copyleft/g' \\{\\} \\+\n\n```", "```\n    $ var=\"This is a line of text\"\n $ echo ${var/line/REPLACED}\n This is a REPLACED of text\"\n\n```", "```\n    ${variable_name:start_position:length}\n\n```", "```\n    $ string=abcdefghijklmnopqrstuvwxyz\n $ echo ${string:4}\n efghijklmnopqrstuvwxyz\n\n```", "```\n    $ echo ${string:4:8}\n efghijkl\n\n```", "```\n    echo ${string:(-1)}\n z\n $ echo ${string:(-2):2}\n yz\n\n```"]
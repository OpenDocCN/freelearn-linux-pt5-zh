- en: Chapter 3. Networking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：网络
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Playing with Reactive Network Configuration
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩转响应式网络配置
- en: Internet Protocol Multipathing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网协议多路径
- en: Setting the link aggregation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置链路聚合
- en: Configuring network bridging
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置网络桥接
- en: Configuring link protection and the DNS Client service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置链路保护和 DNS 客户端服务
- en: Configuring the DHCP server
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 DHCP 服务器
- en: Configuring Integrated Load Balancer
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置集成负载均衡器
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: It's needless to say that a network card and its respective network configuration
    are crucial for an operating system such as Oracle Solaris 11\. I've been working
    with Oracle Solaris since version 7, and its network setup was always very simple,
    using files such as `/etc/hostname.<interface>`, `/etc/hosts`, `/etc/defaultrouter`,
    `/etc/resolv.conf`, and `/etc/hostname`. At that time, there wasn't anything else
    apart from these files, and this was very suitable because configuring a network
    takes only a few minutes. On the other hand, there wasn't any flexibility when
    the network configuration had to be changed. Moreover, at that time, there weren't
    any wireless interfaces on portable computers, and Oracle Solaris only worked
    with SPARC processors. That time has passed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不用多说，网络卡及其相应的网络配置对于操作系统如 Oracle Solaris 11 至关重要。我自从版本 7 起就开始使用 Oracle Solaris，它的网络设置一直都非常简单，使用了像
    `/etc/hostname.<interface>`、`/etc/hosts`、`/etc/defaultrouter`、`/etc/resolv.conf`
    和 `/etc/hostname` 等文件。当时，除了这些文件外没有其他配置，这非常适合，因为配置网络只需要几分钟时间。另一方面，当需要更改网络配置时，并没有太多的灵活性。此外，当时便携式计算机上没有无线接口，并且
    Oracle Solaris 仅支持 SPARC 处理器。那段时光已经过去了。
- en: This network architecture was kept until Oracle Solaris 10 even when hundreds
    of modifications and new features were introduced on Oracle Solaris 10\. Now,
    in Oracle Solaris 11, there are new commands and different methods to set up your
    network. Furthermore, there are many interesting technologies that have improved
    since the previous version of Oracle Solaris, and some of them are included in
    Oracle Solaris 11.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这种网络架构一直保持到 Oracle Solaris 10，尽管在 Oracle Solaris 10 中引入了数百项修改和新特性。但在 Oracle
    Solaris 11 中，现在有了新的命令和不同的设置网络方法。此外，自前一版本的 Oracle Solaris 以来，许多有趣的技术已经得到了改进，其中一些技术被包含在
    Oracle Solaris 11 中。
- en: In this chapter, we're going to learn about many materials related to Oracle
    Solaris 11 as well as advanced administration.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习许多与 Oracle Solaris 11 相关的材料，以及高级管理内容。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A fundamental point must be highlighted—during all examples shown here, I assume
    that there's a DHCP server on the network. In my case, my DHCP server is provided
    by a D-Link wireless router. Don't forget this warning!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键点必须强调——在这里展示的所有示例中，我假设网络中有一个 DHCP 服务器。在我的例子中，DHCP 服务器是由 D-Link 无线路由器提供的。不要忘记这个警告！
- en: Playing with Reactive Network Configuration
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩转响应式网络配置
- en: This discussion is probably one of the more interesting topics from Oracle Solaris
    11 and is also one of the most complex.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个讨论可能是 Oracle Solaris 11 中最有趣的话题之一，也是最复杂的话题之一。
- en: Some years ago, Oracle Solaris had only the SPARC version, and wireless networks
    were absent or rare. Starting with the release of Oracle Solaris 10, the use of
    Oracle Solaris on notebooks has been growing year after year. During the same
    time, wireless networks became popular and everything changed. However, this mobility
    brought with it a small problem with the network configuration. For example, imagine
    that we have a notebook with Oracle Solaris 11 installed and some day there's
    a need to connect to four different networks—home1, home2, work, and university—in
    order to read e-mails or access the Internet. This would be crazy because for
    each one of these environments, we would have to change the network configuration
    to be able to connect to the data network. Worse, if three out of the four networks
    require a manual network configuration (IP address, mask, gateway, name server,
    domain, and so on), we'd lose so much time in manual configuration.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，Oracle Solaris 只有 SPARC 版本，且无线网络要么不存在，要么很少见。自从 Oracle Solaris 10 发布以来，Oracle
    Solaris 在笔记本上的使用逐年增长。与此同时，无线网络变得流行，一切都发生了变化。然而，这种移动性带来了一些关于网络配置的小问题。例如，假设我们有一台安装了
    Oracle Solaris 11 的笔记本电脑，并且某天我们需要连接到四个不同的网络——home1、home2、work 和 university，以便阅读电子邮件或访问互联网。这样就很麻烦，因为每个网络环境都需要修改网络配置才能连接到数据网络。更糟的是，如果四个网络中有三个需要手动配置网络（IP
    地址、子网掩码、网关、名称服务器、域名等），我们将浪费大量时间在手动配置上。
- en: Oracle Solaris 11 has an excellent feature that manages **Reactive Network Configuration**
    (**RNC**). Basically, using RNC, a user can create different network configurations,
    and from a user request or event (turning a wireless card on or off, leasing and
    renewing a DHCP setting, connecting or disconnecting a cable, and so on), it's
    possible to change the network configuration quickly. All of this is feasible
    only because RNC was implemented based on a key concept named profiles, which
    can be classified as fixed or reactive, and they have many properties that help
    us configure the network that is appropriated.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Solaris 11 有一个非常出色的功能，管理**反应式网络配置**（**RNC**）。基本上，使用 RNC，用户可以创建不同的网络配置，并且通过用户请求或事件（开启或关闭无线网卡、租赁和更新
    DHCP 设置、连接或断开电缆等），可以快速地更改网络配置。所有这些都仅仅因为 RNC 是基于一个名为配置文件的关键概念来实现的，配置文件可以分为固定的或反应式的，并且它们具有许多属性，有助于我们配置适当的网络。
- en: There are two types of profiles—**Network Configuration Profiles** (**NCP**)
    and **Location Profiles**—and both are complementary. An NCP (a kind of container)
    is composed of **Network Configuration Units** (**NCUs**) that are configuration
    objects, and they all have properties that are required to configure the network.
    Additionally, there's a third type of profile named **External Network Modifiers**
    (**ENMs**) that are used with VPNs, which require a special profile that is able
    to create its own configuration.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的配置文件——**网络配置文件**（**NCP**）和**位置配置文件**（**Location Profiles**），它们是互补的。NCP（某种容器）由**网络配置单元**（**NCU**）组成，NCU
    是配置对象，它们都有配置网络所需的属性。此外，还有第三种类型的配置文件，名为**外部网络修饰符**（**ENM**），它们用于 VPN，需要一种能够创建自身配置的特殊配置文件。
- en: 'There are many terms or short concepts up to this point, so let''s summarize
    them:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止有很多术语或简短概念，我们可以做个总结：
- en: '**RNC**: This stands for Reactive Network Configuration'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RNC**：这代表反应式网络配置（Reactive Network Configuration）。'
- en: '**Profiles**: There are two classes: fixed or reactive'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置文件**：有两类：固定的或反应式的。'
- en: '**NCP**: This stands for Network Configuration Profile'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NCP**：这代表网络配置文件（Network Configuration Profile）。'
- en: '**Location Profile**: This is a profile that brings complementary information
    to NCP'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置配置文件**：这是一个提供补充信息给 NCP 的配置文件。'
- en: '**NCU**: This stands for Network Configuration Unit and are what makes up an
    NCP profile'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NCU**：这代表网络配置单元（Network Configuration Unit），是组成NCP配置文件的元素。'
- en: '**EMN**: This stands for External Network Modifier and is another kind of profile'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EMN**：这代表外部网络修饰符（External Network Modifier），是一种配置文件类型。'
- en: Returning to the two main profiles (**NCP** and **Location**), the role of NCP
    is to provide the basic network configuration for interfaces, and the role of
    Location profiles is to complete the information and configuration provided by
    NCP.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 回到两个主要的配置文件（**NCP** 和 **位置配置文件**），NCP 的作用是为接口提供基本的网络配置，而位置配置文件的作用是补充 NCP 提供的信息和配置。
- en: Some useful configurations given by the Location profile are the **IP Filter**
    settings, domain, DNS configuration, and so on. The default Location profile named
    **NoNet** is applied to the system when there is no valid IP address. When one
    of the network interfaces gets a valid IP address, the **Automatic Location**
    profile is used.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 位置配置提供的一些有用配置包括**IP过滤**设置、域名、DNS配置等。当系统没有有效IP地址时，默认使用名为**NoNet**的位置配置。当一个网络接口获得有效IP地址时，将使用**Automatic
    Location**配置。
- en: 'There are two types of **NCP** profile. The first type is the `Automatic` profile
    that is read-only, has your configuration (more about this later) hanged when
    a network device is added or removed, uses the DHCP service, always gives preference
    to an Ethernet card instead of a wireless card, is composed of one **Link NCU**
    (offered in several flavors: physical link, aggregation, virtual NIC, vlans, and
    so on), and has an **Interface NCU** inside it.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的**NCP**配置。第一种类型是`Automatic`配置，是只读的，在添加或移除网络设备时会自动更改您的配置（稍后详述），使用DHCP服务，始终优先使用以太网卡而不是无线网卡，包含一个**Link
    NCU**（提供多种风格：物理链路、聚合、虚拟网卡、vlan等），并且其中有一个**Interface NCU**。
- en: The second type is the user-defined profile that must and can be set up manually
    (so it can be edited) according to the user goals.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种类型是用户定义的配置，必须根据用户的目标进行手动设置（因此可以进行编辑）。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow this recipe, you need two virtual machines (VirtualBox or VMware)
    with Oracle Solaris 11 installed, each one with 4 GB RAM and four network interfaces.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照此方法操作，您需要安装有Oracle Solaris 11的两台虚拟机（VirtualBox或VMware），每台机器都有4 GB RAM和四个网络接口。
- en: How to do it…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'There are two key services related to RNC: `svc:/network/netcfg:default` and
    `svc:/network/location:default`. Both services must be enabled and working, and
    we have to pay attention to the `svc:/network/location:default` dependencies:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与RNC相关的两个关键服务是`svc:/network/netcfg:default`和`svc:/network/location:default`。这两个服务必须启用且正常工作，我们必须注意`svc:/network/location:default`的依赖关系：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'All profiles are listed using the `netcfg` command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`netcfg`命令列出所有配置：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a confirmation of what we've seen in the introduction of this section.
    There's an NCP profile named `Automatic`, which is related to the DHCP service,
    and another NCP profile that's associated to a user-defined NCP profile named
    `DefaultFixed`. Moreover, there are two locations—`Automatic`, which is applied
    to the system when at least one network interface has a valid IP address, and
    `NoNet`, which is enforced when no network card has received a valid IP address.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对本节介绍中所见内容的确认。有一个名为`Automatic`的NCP配置，与DHCP服务相关联，以及另一个关联到用户定义的NCP配置`DefaultFixed`的NCP配置。此外，还有两个位置配置——当至少一个网络接口具有有效IP地址时应用的`Automatic`配置，以及在没有任何网络卡接收到有效IP地址时强制应用的`NoNet`配置。
- en: 'Nonetheless, there is a lot of additional information that we can get from
    each of these profiles by executing the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，通过执行以下命令，我们可以从每个配置中获取大量额外信息：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'All of the network interfaces and their respective IP address objects are bound
    to the `Automatic` NCP profile, while nothing is assigned to the `DefaultFixed`
    NCP profile:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所有网络接口及其各自的IP地址对象都绑定到`Automatic` NCP配置，而未分配给`DefaultFixed` NCP配置：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the same way, tons of information can be taken from location profiles by
    running the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，通过运行以下命令，可以从位置配置中获取大量信息：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Nevertheless, it can be easier to do this interactively sometimes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，有时交互式地执行操作可能更容易：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As we can realize, many properties can be set to customize our system. Likewise,
    all NCP and NCU are listed by executing the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，许多属性可以设置以定制我们的系统。同样，执行以下命令列出所有NCP和NCU：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If there''s a demand for more details, these can be obtained by running the
    following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要更多详细信息，可以通过运行以下命令获取：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Instead of listing all profiles (NCP and Location), it is possible to list
    only a class of them by running the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 不必列出所有配置（NCP和位置），可以仅通过运行以下命令列出其中一类配置：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Nice! All commands have worked very well up to now. Therefore, it''s time to
    create a new profile using the `netcfg` command. To accomplish this task, we''re
    going to create an NCP named `hacker_profile` with two NCUs inside it, followed
    by a loc profile named `work`. Therefore, execute the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！到目前为止，所有命令都运行得非常顺利。因此，现在是使用 `netcfg` 命令创建新配置文件的时候了。为了完成这个任务，我们将创建一个名为 `hacker_profile`
    的NCP，并在其中添加两个NCU，接着创建一个名为 `work` 的LOC配置文件。因此，请执行以下命令：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'List current configurations by executing the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令列出当前配置：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When the new NCP and LOC profiles are enabled, everything changes. Let''s check
    this by executing the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当新的NCP和LOC配置文件启用时，一切都会发生变化。我们可以通过执行以下命令来验证这一点：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `Automatic` NCP profile has been disabled and the loc profile `Automatic`
    has gone offline. Then, the `hacker_profile` NCP profile has changed to the `online`
    status and the `work` Loc profile has also changed to the `online` status. Additionally,
    all network interfaces have disappeared except `net2`, because there's only one
    network interface NCU configured (`net2`) in the `hacker_profile` NCP profile.
    The other good fact is that this configuration is persistent, and we can reboot
    the machine (`init 6`) and everything will continue working according to what
    we've configured.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`Automatic` NCP配置文件已被禁用，LOC配置文件 `Automatic` 已离线。接着，`hacker_profile` NCP配置文件已变为
    `online` 状态，`work` LOC配置文件也变为 `online` 状态。此外，除了 `net2`，所有网络接口都消失了，因为在 `hacker_profile`
    NCP配置文件中仅配置了一个网络接口NCU（`net2`）。另一个好消息是，这个配置是持久的，我们可以重启机器（`init 6`），一切将按照我们配置的方式继续运行。'
- en: 'If we had committed any mistake by assigning a property with a wrong value,
    it would be easy to correct it. For example, the name servers (the `dns-nameservice-servers`
    property) can be altered by executing the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过为某个属性分配错误的值而犯了任何错误，那么修正起来会非常简单。例如，可以通过执行以下命令来更改名称服务器（`dns-nameservice-servers`属性）：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After all these long tasks, it''s recommend that you save the new profiles,
    `hacker_profile` and `work`. Therefore, to make a backup of them, execute the
    following commands:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了所有这些长时间的任务后，建议你保存新的配置文件，`hacker_profile` 和 `work`。因此，要备份它们，请执行以下命令：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Reverting the system to the old `Automatic` profiles (NCP and Loc) can be done
    by running the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令，可以将系统恢复到旧的 `Automatic` 配置文件（NCP和Loc）：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, it would be appropriate to destroy the created NCP and loc profiles
    by executing the following commands:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，适当的做法是通过执行以下命令销毁创建的NCP和LOC配置文件：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Oracle Solaris 11 is terrific!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Solaris 11 真棒！
- en: An overview of the recipe
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配方概述
- en: 'There is no doubt that RNC makes the life of an administrator easier. Administration,
    configuration, and monitoring are done through the command line and everything
    is configured using only two commands: `netadm` and `netcfg`. The `netadm` command
    role enables, disables, and lists profiles, while the `netcfg` command role creates
    profile configurations.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，RNC使管理员的生活更加轻松。管理、配置和监控都通过命令行完成，且所有配置都只使用两条命令：`netadm` 和 `netcfg`。`netadm`
    命令的作用是启用、禁用和列出配置文件，而 `netcfg` 命令的作用是创建配置文件配置。
- en: Internet Protocol Multipathing
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互联网协议多路径
- en: '**Internet Protocol Multipathing** (**IPMP**) is a great technology that was
    introduced a long time ago (originally in Oracle Solaris 8), and since then, it
    has been improving a lot up to the current Oracle Solaris 11\. In a general way,
    IPMP offers fault-tolerance for the network interfaces scheme, thus eliminating
    any single point of failure. Moreover, it provides an increase in the network
    bandwidth for outbound traffic by spreading the load over all active interfaces
    in the same group. This is our start point; to play with IPMP, an IPMP group interface
    must be created and all of the data IP addresses should be assigned to this IPMP
    group interface. Therefore, at the end, all network interfaces that will be used
    with IPMP must have an IPMP group assigned.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网协议多路径**（**IPMP**）是一项很棒的技术，它很久以前就被引入（最早在Oracle Solaris 8中），从那时起，它已经有了很多改进，直到当前的Oracle
    Solaris 11。总体来说，IPMP为网络接口方案提供了容错性，从而消除了任何单点故障。此外，它通过将负载分布到同一组中的所有活动接口上，增加了外发流量的网络带宽。这是我们的起点；要使用IPMP，必须创建一个IPMP组接口，并将所有的数据IP地址分配给该IPMP组接口。因此，最终，所有将与IPMP一起使用的网络接口都必须分配一个IPMP组。'
- en: 'To continue the explanation, the following is a quick example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续说明，以下是一个快速示例：
- en: 'Group interface: `hacker_ipmp0`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组接口：`hacker_ipmp0`
- en: 'Interface 1: `net0`'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口1：`net0`
- en: 'test IP (`test_net0`): `192.168.1.61`'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试IP（`test_net0`）：`192.168.1.61`
- en: 'Interface 2: `net1`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口2：`net1`
- en: 'test IP (`test_net1`): `192.168.1.71`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试IP（`test_net1`）：`192.168.1.71`
- en: In the previous example, we have two interfaces (`net0` and `net1`) that are
    used to send/receive the normal application data as usual. Nevertheless, the data
    IP addresses aren't assigned to the `net0` or `net1` interfaces, but they are
    assigned to the IPMP group interface that contains both physical network interfaces.
    The test IP addresses from the `net0` and `net1` interfaces (`192.168.1.61` and
    `192.168.1.71`, respectively) are used by the `in.mpathd` IPMP daemon to check
    whether the interface is healthy.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们有两个接口（`net0`和`net1`），它们通常用于发送/接收正常的应用数据。然而，数据的IP地址并没有分配给`net0`或`net1`接口，而是分配给包含两个物理网络接口的IPMP组接口。来自`net0`和`net1`接口的测试IP地址（分别为`192.168.1.61`和`192.168.1.71`）被`in.mpathd`
    IPMP守护进程用来检查接口是否正常。
- en: 'There are two possible configurations when deploying IPMP: active-active and
    active-passive. The former configuration works with all interfaces that transmit
    data, and the latter scheme works with at least one spare interface. Most of the
    time, you will see companies work with the active-active configuration.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 部署IPMP时有两种可能的配置：活动-活动和活动-备用。前者配置下所有接口都会传输数据，后者配置下至少有一个备用接口。大多数情况下，公司会使用活动-活动配置。
- en: What's the basic idea of IPMP? If one interface fails (or the cable is disconnected),
    the system continues transmitting and receiving data without any problems. Why?
    Because in the IPMP group, there is more than one interface that accomplishes
    the network job, and if any of them fails, any other interface resumes the work.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: IPMP的基本概念是什么？如果一个接口发生故障（或电缆断开），系统仍然能够继续正常传输和接收数据。为什么？因为在IPMP组中，至少有一个接口承担着网络任务，如果其中任何一个接口失败，其他接口会继续工作。
- en: 'Can IPMP monitor the interface using the assigned data IP address? No, it can''t;
    because, if `in.mpathd` used the data IP address to monitor the interface, there
    could be a delay in the monitoring process. By the way, is the test IP address
    necessary? It isn''t, really. The IPMP has two monitoring methods: probe-based
    detection (using a test IP address) and link-based (if it''s supported by the
    interface). Personally, I like probe-based monitoring (using a test IP address)
    because I''ve already faced some problems with the link-based method, and I think
    probe-based monitoring is more reliable. However, if the interface supports the
    link-based method, then both methods will be used. Anyway, when using probed monitoring,
    the `in.mpathd` daemon continues to monitor the failed interface to check when
    it comes alive again.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: IPMP能否使用分配的数据信息IP地址来监控接口？不能；因为如果`in.mpathd`使用数据IP地址来监控接口，监控过程中可能会有延迟。顺便问一下，测试IP地址是否必要？其实并不必要。IPMP有两种监控方式：基于探测的检测（使用测试IP地址）和基于链路的检测（如果接口支持）。就个人而言，我更喜欢基于探测的监控（使用测试IP地址），因为我曾遇到过链路检测方式的一些问题，我认为基于探测的监控更可靠。然而，如果接口支持基于链路的方式，那么两种方式都会被使用。无论如何，当使用探测式监控时，`in.mpathd`守护进程会继续监控故障接口，以检查它何时恢复正常。
- en: Finishing the theory, the active-standby configuration is very similar to active-active,
    but the standby interface doesn't transmit any data packets while the active network
    interfaces are good and working. If any active network interfaces go to the `failed`
    status, the standby network interface will be activated, and it will start to
    send data packets.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 讲完理论后，活动-备用配置与活动-活动配置非常相似，但备用接口在活动网络接口正常工作的情况下不会发送任何数据包。如果任何活动网络接口进入`失败`状态，备用网络接口将被激活，并开始发送数据包。
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires two virtual machines (VirtualBox or VMware Workstation)
    with Oracle Solaris 11 installed, 4 GB memory, and four network interfaces in
    the first virtual machine. For the second virtual machine, just one interface
    is enough.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本例需要两台安装了Oracle Solaris 11的虚拟机（VirtualBox或VMware Workstation），每台虚拟机内存4GB，并且第一台虚拟机需要四个网络接口。第二台虚拟机只需要一个接口。
- en: How to do it…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现……
- en: 'This recipe will be based on a similar scenario presented previously, but four
    interfaces will be used where all of them are active:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本例将基于之前展示的类似场景，但将使用四个接口，所有接口都是活动的：
- en: 'Group: `hacker_ipmp0`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组：`hacker_ipmp0`
- en: 'Data IP addresses: `192.168.1.50`, `192.168.1.60`, `192.168.1.70`, and `192.168.1.80`'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据IP地址：`192.168.1.50`，`192.168.1.60`，`192.168.1.70`，和`192.168.1.80`
- en: 'Interface 1: `net0`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '接口 1: `net0`'
- en: 'test IP (`test_net0`): `192.168.1.51`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '测试 IP（`test_net0`）: `192.168.1.51`'
- en: 'Interface 2: `net1`'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '接口 2: `net1`'
- en: 'test IP (`test_net1`): `192.168.1.61`'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '测试 IP（`test_net1`）: `192.168.1.61`'
- en: 'Interface 3: `net2`'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '接口 3: `net2`'
- en: 'test IP (`test_net2`): `192.168.1.71`'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '测试 IP（`test_net2`）: `192.168.1.71`'
- en: 'Interface 4: `net3`'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '接口 4: `net3`'
- en: 'test IP (`test_net3`): `192.168.1.81`'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '测试 IP（`test_net3`）: `192.168.1.81`'
- en: 'Like every feature in Oracle Solaris 11, IPMP is based on a **Service Management
    Facility** (**SMF**) service that must be online (default) and can be verified
    by running the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 和 Oracle Solaris 11 中的每个功能一样，IPMP 基于 **服务管理设施**（**SMF**）服务，该服务必须在线（默认为在线），并且可以通过运行以下命令进行验证：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Moreover, the behavior of the IPMP daemon is based on the `mpathd` configuration
    file that is in the `default` directory under `/etc/`. Additionally, this configuration
    file has default content that covers any usual environment that does not demand
    any special care with delay in responses. Execute the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，IPMP 守护进程的行为基于 `/etc/` 下 `default` 目录中的 `mpathd` 配置文件。此外，该配置文件具有默认内容，适用于任何不需要特别注意响应延迟的常规环境。执行以下命令：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Well, it''s time to move forward. Initially, let''s list what interfaces are
    available and their respective status by executing the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在是时候继续前进了。首先，执行以下命令列出可用的接口及其各自的状态：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the following step, all IP address objects will be deleted:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，将删除所有 IP 地址对象：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Returning to the monitoring commands, we shouldn''t see all these IP address
    objects anymore:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到监控命令，我们应该不再看到这些 IP 地址对象：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Everything is okay up to now. Thus, before starting to configure IPMP, it''s
    appropriate to change the NCP profile from `Automatic` to `DefaultFixed` because
    the IPMP setup is going to use fixed IP addresses:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切正常。因此，在开始配置 IPMP 之前，最好将 NCP 配置文件从 `Automatic` 更改为 `DefaultFixed`，因为 IPMP
    设置将使用固定 IP 地址：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Great! It''s interesting to realize that there is no IP address object on the
    system:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！很有意思的是，现在系统中没有任何 IP 地址对象：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The game begins. To make the administration more comfortable, all network links
    are going to be renamed for them to be more easily recognizable, and shortly thereafter,
    new IP address objects will be created too (for a while, without any IP address
    value):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开始了。为了使管理更加方便，所有网络链路将重新命名，以便更容易识别，并且很快会创建新的 IP 地址对象（暂时没有任何 IP 地址值）：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, it''s time to create the IPMP interface group (`hacker_ipmp0`) and assign
    all interfaces to this group. Pay attention to the fact that there are no IP addresses
    on any network interface yet:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建 IPMP 接口组（`hacker_ipmp0`）并将所有接口分配到该组了。请注意，目前任何网络接口上都没有 IP 地址：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Because there is no data or test IP address yet, all probe operations are disabled:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因为还没有数据或测试 IP 地址，所以所有探测操作都被禁用：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, all main data IP addresses and test IP addresses will be added to
    the IPMP configuration by executing the following commands:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将通过执行以下命令将所有主要数据 IP 地址和测试 IP 地址添加到 IPMP 配置中：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To check whether our previous `ipadm` commands are working, execute the following
    command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查我们之前的 `ipadm` 命令是否有效，请执行以下命令：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If everything went well, the IPMP interface group and all IP addresses should
    be `ok` and `up`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，IPMP 接口组和所有 IP 地址应该是 `ok` 并且 `up` 状态：
- en: '[PRE30]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Thanks to each test IP address, all interfaces should be being monitored by
    the `in.mpathd` daemon (from the IPMP service), and this probe information is
    shown by executing the following command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了每个测试 IP 地址，所有接口应该都在 `in.mpathd` 守护进程（来自 IPMP 服务）的监控下，并且通过执行以下命令可以显示该探测信息：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You might notice some strange IPs: `192.168.1.112`, `192.168.1.113`, and `192.168.1.188`.
    Where do these addresses come from? The IPMP service makes tests and checks (probes)
    to assure that the data IPs are working as expected by using the multicast protocol,
    and it registers the RTT (round trip) for a packet to go and return from a discovered
    host. In this particular case, IPMP has reached some machines on my private local
    network and a printer.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到一些奇怪的 IP 地址：`192.168.1.112`、`192.168.1.113` 和 `192.168.1.188`。这些地址来自哪里？IPMP
    服务使用多播协议进行测试和检查（探测），以确保数据 IP 正常工作，并记录一个数据包从发现的主机往返的 RTT（往返时间）。在这个特定的例子中，IPMP 已经连接到我私人本地网络上的一些机器和一台打印机。
- en: 'Therefore, according to the previous command, it is possible to confirm whether
    all IPMP network interfaces are good by executing the following commands:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，根据之前的命令，可以通过执行以下命令来确认所有IPMP网络接口是否正常：
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'These flags from the `ipmpstat –i` command deserve a quick explanation:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`ipmpstat –i`命令的这些标志需要简要解释一下：'
- en: '`m`: This is to send and/or receive IPv4 multicast packets'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m`：此选项用于发送和/或接收IPv4多播包'
- en: '`M`: This is to send and/or receive IPv6 multicast packets'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M`：此选项用于发送和/或接收IPv6多播包'
- en: '`b`: This is chosen to send and/or receive IPv4 broadcast packets'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`：此选项用于发送和/或接收IPv4广播包'
- en: '`i`: This means inactive'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i`：表示未激活'
- en: '`s`: This means standby'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`：表示待命'
- en: '`d`: This means down'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d`：表示已关闭'
- en: 'Likewise, information about test IP addresses and hosts that were used to send
    multicast packets are presented in a simple way, as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，关于测试IP地址和用于发送多播包的主机信息也以简单的方式呈现如下：
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Excellent! Is it over? No. How can we know whether the IPMP configuration is
    working? The best way is to make a network fail. To simulate this scenario, we
    must first shut down Oracle Solaris 11 by executing the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！结束了吗？不。我们如何知道IPMP配置是否有效？最好的方法是让网络发生故障。为了模拟这种情况，我们必须先通过执行以下命令关闭Oracle Solaris
    11：
- en: '[PRE34]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the next step, we must choose our virtual machine, click on the **Settings**
    button, and go to **Network**. There, for the **Attached to** option, change the
    first interface to **Not attached**.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们需要选择我们的虚拟机，点击**设置**按钮，然后进入**网络**。在那里，对于**附加到**选项，将第一个接口更改为**未附加**。
- en: '![How to do it…](img/00011.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00011.jpeg)'
- en: 'This trick will simulate a failure on the interface and the interface won''t
    be presented for Oracle Solaris 11\. Then, the virtual machine (`solaris11-1`)
    must be turned on again, and as expected, the system works very well. This can
    be confirmed by using all the previous network and IPMP commands:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个技巧将模拟接口故障，接口将不会在Oracle Solaris 11中出现。接着，虚拟机（`solaris11-1`）必须再次启动，正如预期的那样，系统运行得非常顺畅。可以通过使用所有先前的网络和IPMP命令来确认这一点：
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'As expected, the first interface (`net0_myipmp0`) fails during the probe test.
    Moving forward, the same failure will be shown in other commands:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，第一次接口（`net0_myipmp0`）在探测测试中失败。接下来，在其他命令中也会显示相同的故障：
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The IPMP group status is degraded because one of its interfaces (`net0_myipmp0`)
    is missing. Other IPMP commands can confirm this fact:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: IPMP组状态已降级，因为其中一个接口（`net0_myipmp0`）丢失。其他IPMP命令可以确认这一点：
- en: '[PRE37]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Take care—on the first view, it could seem that there''s something wrong, but
    in fact, there isn''t. It''s usual for some people to guess that the IP address
    is bound to a specific interface, but this isn''t true. All data IP addresses
    are assigned to the IPMP group interface, and IPMP will try to use the best interface
    for outbound connections. Nonetheless, the best and final test can be performed
    using another machine (`solaris11-2`), and from there, try to ping all data IP
    addresses from the first machine (`solaris11-1`):'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 小心——乍一看，可能会觉得有些不对劲，但实际上并没有。很多人会猜测IP地址绑定到某个特定的接口，但事实并非如此。所有数据IP地址都分配给IPMP组接口，IPMP会尝试使用最佳接口进行外部连接。然而，最好的测试方法是使用另一台机器（`solaris11-2`），然后从该机器尝试ping所有数据IP地址（来自第一台机器`solaris11-1`）：
- en: '[PRE38]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Amazing! Oracle Solaris 11 wins again! If we shut down the first virtual machine
    once more (`shutdown –y –g0` or `poweroff`), return the interface to its old configuration
    (**Settings** | **Network** | **Adapter 1** | **Attached to: Bridged Network**)
    and turn on the `solaris11-1` virtual machine again; we''re going to confirm that
    everything is `ok`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 太神奇了！Oracle Solaris 11再次获胜！如果我们再次关闭第一台虚拟机（`shutdown –y –g0` 或 `poweroff`），将接口恢复到旧配置（**设置**
    | **网络** | **适配器1** | **附加到：桥接网络**），然后重新启动`solaris11-1`虚拟机；我们将确认一切`ok`：
- en: '[PRE39]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Fantastic! However, let's execute another test. The goal is to convert an active
    interface into a standby interface (the active-passive configuration). Thus, to
    proceed, we should delete one of the IP addresses that carries data and is assigned
    to a standby network interface. If it's not deleted, it wouldn't make any difference.
    Relax! The following procedure is a piece of cake.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！不过，让我们执行另一个测试。目标是将一个活动接口转换为备用接口（即活动-待命配置）。因此，要继续操作，我们需要删除一个携带数据并分配给备用网络接口的IP地址。如果不删除，也不会有任何区别。放心！以下过程轻松搞定。
- en: 'The first step is to change the `standby` property from the interface to `on`
    by running the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是通过运行以下命令将接口的`standby`属性从`off`改为`on`：
- en: '[PRE40]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Check whether the last command worked as expected by executing the following
    command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令检查上一个命令是否按预期工作：
- en: '[PRE41]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'As we''ve mentioned, a data IP address object (the forth) will be deleted by
    running the following command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所提到的，通过运行以下命令将删除一个数据IP地址对象（第四个）：
- en: '[PRE42]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The `net3_myipmp3` interface is marked as deleted (its respective interface
    is put inside the parentheses):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`net3_myipmp3`接口被标记为已删除（其相应的接口被放入括号中）：'
- en: '[PRE43]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Check whether the `net3_myipmp3` interface doesn''t appear anymore by running
    the following three commands:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下三个命令检查`net3_myipmp3`接口是否已经不再显示：
- en: '[PRE44]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Notice that the `is` flag on `net3_myipmp3` describes this interface as inactive
    and working in the standby mode. All tests can be performed in the same way using
    this active-passive scenario.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`net3_myipmp3`上的`is`标志描述了该接口为非活动状态，并在备用模式下工作。所有的测试都可以在这种主动-被动场景下以相同方式进行。
- en: 'Last but not least, we need to return everything as it was before this section
    in order to prepare for the next section, which explains how to set up link aggregation:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们需要将一切恢复到这一节之前的状态，以便为下一节做准备，下一节将解释如何设置链路聚合：
- en: '[PRE45]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We are done with IPMP! Oracle Solaris 11 is the best operating system in the
    world!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了IPMP的设置！Oracle Solaris 11是世界上最好的操作系统！
- en: An overview of the recipe
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方案概述
- en: The main concept that must always be remembered is that the IPMP frame is suitable
    for eliminating a single point of failure. Although it is able to create the outbound
    load balance, the real goal is the high availability network.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 必须始终记住的主要概念是，IPMP框架适用于消除单点故障。尽管它能够创建外向负载均衡，但真正的目标是高可用性网络。
- en: Setting the link aggregation
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置链路聚合
- en: 'As a rough comparison, we could think about link aggregation (802.3ad LACP)
    as a network technology layer 2 (Datalink), which acts as the inverse of IPMP
    (network technology layer 3: IP). While IPMP is concerned with offering network
    interface fault tolerance—eliminating a single point of failure and offering a
    higher outbound throughput as a bonus—link aggregation works as the old "trunk"
    product from previous versions of Oracle Solaris and offers a high throughput
    for the network traffic and, as a bonus, also provides a fault tolerance feature
    so that if a network interface fails, the traffic isn''t interrupted.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个粗略的对比，我们可以将链路聚合（802.3ad LACP）看作是网络技术第二层（数据链路层），它的作用相当于IPMP（网络技术第三层：IP）的逆操作。虽然IPMP关注于提供网络接口故障容错——消除单点故障并提供更高的外部吞吐量作为附加功能——链路聚合则类似于Oracle
    Solaris早期版本中的“trunk”产品，它为网络流量提供高吞吐量，并且作为附加功能也提供了故障容错功能，使得如果某个网络接口故障，流量不会中断。
- en: 'Summarizing the facts:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 总结事实：
- en: IPMP is recommended for fault tolerance, but it offers some output load balance
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPMP建议用于故障容忍，但它也提供一定的输出负载均衡功能
- en: Link aggregation is recommended for increasing the throughput, but it also offers
    fault tolerance
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链路聚合建议用于增加吞吐量，但它也提供故障容忍功能。
- en: The link aggregation feature puts two or more network interfaces together and
    administers all of them as a single unit. Basically, link aggregation presents
    performance advantages, but all links must have the same speed, working in full
    duplex and point-to-point modes. An example of aggregation is **Aggregation_1**
    | net0, net1, net2, and net3.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 链路聚合功能将两个或更多网络接口结合在一起，并将它们作为一个单一单元进行管理。基本上，链路聚合带来了性能优势，但所有链路必须具有相同的速度，工作在全双工和点对点模式下。聚合的一个例子是**Aggregation_1**
    | net0、net1、net2和net3。
- en: 'At the end, there''s only one logic object (Aggregation_1) that was created
    on the underlying four network interfaces (net0, net1, net2, and net3). These
    are shown as a single interface, summing the strengths (high throughput, for example)
    and keeping them hidden. Nonetheless, a question remains: how are the outgoing
    packets delivered and balanced over the interfaces?'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，只创建了一个逻辑对象（Aggregation_1），该对象基于四个网络接口（net0、net1、net2和net3）。这些接口显示为一个单一接口，合并了它们的优势（例如高吞吐量），并将它们隐藏起来。然而，仍然存在一个问题：如何将传出的数据包通过接口进行传递和负载均衡？
- en: 'An answer to this question is named Aggregation and Load Balance Policies,
    which determine the outgoing link by hashing some values (properties) and are
    enumerated as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个问题的答案被称为聚合与负载均衡策略，它们通过哈希一些值（属性）来决定传出的链路，具体策略列举如下：
- en: '**L2 (Networking)**: In this, the outgoing interface is chosen by hashing the
    MAC header of each packet.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**L2（网络）**：在此，外发接口是通过哈希每个数据包的 MAC 头部来选择的。'
- en: '**L3 (Addressing)**: In this, the outgoing interface is chosen by hashing the
    IP header of each packet.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**L3（寻址）**：在此，外发接口是通过哈希每个数据包的 IP 头部来选择的。'
- en: '**L4 (Communication)**: In this, the outgoing interface is chosen by hashing
    the UDP and TCP header of each packet. This is the default policy. A very important
    note is that this policy gives the best performance, but it isn''t supported across
    all systems and it isn''t fully 802.3ad-compliant in situations where the switch
    device can be a restrictive factor. Additionally, if the aggregation scheme is
    connected to a switch, then the **Link Aggregation Control Protocol** (**LACP**)
    must be supported by the physical switch and aggregation, given that the aggregation
    can be configured with the following values:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**L4（通信）**：在此，外发接口是通过哈希每个数据包的 UDP 和 TCP 头部来选择的。这是默认策略。一个非常重要的说明是，这个策略提供最佳的性能，但并不是所有系统都支持，且在交换机设备可能成为限制因素的情况下，并不完全符合
    802.3ad 标准。此外，如果聚合方案连接到交换机，则物理交换机和聚合必须支持**链路聚合控制协议**（**LACP**），因为聚合可以配置以下值：'
- en: '**off**: This is the default mode for the aggregation'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关闭模式**：这是聚合的默认模式。'
- en: '**active**: This is the mode where the aggregation is configured and where
    it generates LACP Data Units at regular intervals'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动模式**：这是聚合配置模式，在此模式下，聚合会定期生成 LACP 数据单元。'
- en: '**passive**: This is the mode where the aggregation is configured and only
    generates LACP Data Units when it receives one from the switch, obliging both
    sides (the aggregation and switch) to be set up using the passive mode'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**被动模式**：这是聚合配置模式，仅在接收到交换机发来的 LACP 数据单元时生成 LACP 数据单元，要求两端（聚合和交换机）都必须以被动模式进行配置。'
- en: 'The only disadvantage of normal link aggregation (known as trunk link aggregation)
    is that it can''t span across multiple switches and is limited to working with
    only one switch. To overcome this, there''s another technique of aggregation that
    can span over multiple switches named **Data Link Multipathing** (**DLMP**) aggregation.
    To understand DLMP aggregation, imagine a scenario where we have the following
    in the same system:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 普通链路聚合（即 trunk 链路聚合）唯一的缺点是它无法跨多个交换机工作，且仅限于与一个交换机配合使用。为了克服这个问题，有一种名为**数据链路多路径**（**DLMP**）聚合的技术，它可以跨多个交换机工作。为了理解
    DLMP 聚合，假设在同一系统中有以下设置：
- en: Zone 1 with vnicA, vnicB, and vnicC virtual interfaces, which are connected
    to NIC1
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域 1 包含 vnicA、vnicB 和 vnicC 虚拟接口，连接到 NIC1
- en: Zone 2 with vnicD and vnicE virtual interfaces, where both of them are connected
    to NIC2
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域 2 包含 vnicD 和 vnicE 虚拟接口，它们都连接到 NIC2
- en: NIC1 is connected to **Switch1** (**SW1**)
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NIC1 连接到**交换机1**（**SW1**）
- en: NIC2 is connected to **Switch2** (**SW2**)
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NIC2 连接到**交换机2**（**SW2**）
- en: 'The following is another way of representing this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是另一种表示方式：
- en: Zone1 | vnicA,vnicB,vnicC | NIC1 | SW1
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域 1 | vnicA, vnicB, vnicC | NIC1 | SW1
- en: Zone 2 | vnicD,vnicE | NIC2 | SW2
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域 2 | vnicD, vnicE | NIC2 | SW2
- en: Using trunk link aggregation, if the NIC1 network interface went to `down`,
    the system could still fail over all traffic to NIC2, and there wouldn't be any
    problem if both NIC1 and NIC2 were connected to the same switch (this isn't the
    case).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 trunk 链路聚合，如果 NIC1 网络接口变为`down`，系统仍然可以将所有流量切换到 NIC2，并且如果 NIC1 和 NIC2 都连接到同一交换机，则不会出现任何问题（但这不是本例）。
- en: However, in this case, everything is worse because there are two switches connected
    to the same system. What would happen if Switch1 had gone down? This could be
    a big problem because Zone1 would be isolated. Trunk link aggregation doesn't
    support spanning across switches; therefore, there wouldn't be any possibility
    of failing over to another switch (Switch2). Concisely, Zone1 would lose network
    access.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这种情况下，情况变得更糟，因为有两个交换机连接到同一系统。如果交换机 1 出现故障，会发生什么情况？这可能会是一个大问题，因为区域 1 将会被隔离。Trunk
    链路聚合不支持跨交换机扩展，因此无法切换到另一个交换机（交换机 2）。简而言之，区域 1 将失去网络访问。
- en: This is a perfect situation to use DLMP aggregation because it is able to span
    across multiple switches without requiring any special configuration performed
    in the switches (this is only necessary when both are in the same broadcast domain).
    Even if the **Switch1** (**SW1**) port goes to `down`, Oracle Solaris 11 is able
    to fail over all the vnicA, vnicB, and vnicC flow from Zone1 to NIC2, which uses
    a different switch (SW2) port. Briefly, Zone1 doesn't lose access to the network.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 DLMP 聚合的完美场景，因为它能够跨越多个交换机而无需在交换机上进行任何特殊配置（只有在两个交换机处于同一广播域时才需要）。即使 **Switch1**（**SW1**）端口出现
    `down`，Oracle Solaris 11 也能够将 Zone1 中的所有 vnicA、vnicB 和 vnicC 流量切换到使用不同交换机（SW2）端口的
    NIC2。简而言之，Zone1 不会失去对网络的访问。
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To follow this recipe, you must have two virtual machines (VirtualBox or VMware)
    with Oracle Solaris 11 installed and have 4 GB RAM and four network interfaces
    in the first virtual machine. The second machine can have just one network interface.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个步骤操作，你必须有两台安装了 Oracle Solaris 11 的虚拟机（VirtualBox 或 VMware），第一台虚拟机需要有 4
    GB 内存和四个网络接口，第二台机器只需一个网络接口。
- en: How to do it…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let''s see what we have in the system by executing the following command:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过执行以下命令看看系统中有哪些内容：
- en: '[PRE46]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'There are four interfaces that get their IP address from a local DHCP service.
    Therefore, to configure the link aggregation, it''s necessary to delete all IP
    object addresses from all interfaces and verify their status by running the following
    commands:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个接口通过本地 DHCP 服务获取其 IP 地址。因此，要配置链路聚合，必须删除所有接口上的 IP 对象地址，并通过执行以下命令验证其状态：
- en: '[PRE47]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Nice. Everything is working. This time, the link aggregation (the trunk link
    aggregation) can be set up. Let''s take all of the interfaces to create the aggregation
    by running the following command:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。一切正常。这时可以设置链路聚合（干道链路聚合）。让我们通过运行以下命令，使用所有接口来创建聚合：
- en: root@solaris11-1:~# **dladm create-aggr -l net0 -l net1 -l net2 -l net3 super_aggr_0**
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: root@solaris11-1:~# **dladm create-aggr -l net0 -l net1 -l net2 -l net3 super_aggr_0**
- en: 'To check whether the aggregation was created, execute the following command:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查聚合是否创建成功，可以执行以下命令：
- en: '[PRE48]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'More details about the aggregation can be gathered by executing the following
    command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过执行以下命令收集更多关于聚合的信息：
- en: '[PRE49]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The `super_aggr_0` aggregation was created, and it works like a single network
    interface. As we mentioned previously, the default aggregation type is `trunk`
    and the default policy is L4 (Communication). For curiosity, if we wanted to create
    a DMLP link aggregation, the command would be as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`super_aggr_0` 聚合已经创建，并且像一个单独的网络接口一样工作。如前所述，默认的聚合类型是 `trunk`，默认策略是 L4（通信）。出于好奇，如果我们想创建一个
    DMLP 链路聚合，命令如下：'
- en: '[PRE50]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now, it''s time to create an IP object on it:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在其上创建一个 IP 对象了：
- en: '[PRE51]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The `super_aggr_0` aggregation is still down because no IP address is assigned
    to it:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`super_aggr_0` 聚合仍然处于关闭状态，因为没有为其分配 IP 地址：'
- en: '[PRE52]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'However, everything is `ok` at the layer 2 level (Datalink):'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在第 2 层（数据链路层）一切都是 `ok`：
- en: '[PRE53]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Great! The definitive step is to assign an IP address to the aggregation object,
    which is `super_aggr_0`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！关键的步骤是为聚合对象分配一个 IP 地址，即 `super_aggr_0`：
- en: '[PRE54]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'As we''ve learned previously, all interfaces are hidden and only the link aggregation
    interface is shown and presented to an external network. To collect more information
    about the aggregation, run the following command:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所学，所有接口都被隐藏，只有链路聚合接口会显示并呈现给外部网络。要收集有关聚合的更多信息，请运行以下命令：
- en: '[PRE55]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'A recommended way to verify whether everything is working is to try to send
    and receive packets:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 验证一切是否正常工作的推荐方法是尝试发送和接收数据包：
- en: '[PRE56]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We can also monitor the link aggregation activity by using the `netstat` command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用 `netstat` 命令来监视链路聚合活动：
- en: '[PRE57]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We have almost finished our learning (not yet!). To change the link aggregation
    policy (for example, from L4 to L2), we execute the following command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们差不多完成了学习（还没！）。要更改链路聚合策略（例如，从 L4 到 L2），我们执行以下命令：
- en: '[PRE58]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Our example of link aggregation was created using four interfaces. However,
    an interface can be either inserted or removed anytime. First, we have to know
    which interfaces are part of the aggregation by running the following command:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的链路聚合示例是使用四个接口创建的。然而，接口可以随时插入或删除。首先，我们需要知道哪些接口是聚合的一部分，可以通过执行以下命令来查看：
- en: '[PRE59]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now, it''s easy to remove an interface from aggregation by executing the following
    command:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过执行以下命令，可以轻松从聚合中删除一个接口：
- en: '[PRE60]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'To confirm that the previous command worked, run the following command:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认之前的命令是否有效，运行以下命令：
- en: '[PRE61]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Adding an interface follows almost the same syntax, as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 添加接口几乎遵循相同的语法，如下所示：
- en: '[PRE62]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Finally, we can remove the aggregation in order to prepare our environment
    for the next section:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以删除聚合，以便为下一节做准备：
- en: '[PRE63]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Excellent! We've completed our study of link aggregation.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！我们已完成链路聚合的学习。
- en: An overview of the recipe
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配方概览
- en: 'In this section, we learned about both types of link aggregation. The main
    advantage is the performance because it puts all interfaces together, hides them,
    and presents only the final logical object: the link aggregation object. For external
    hosts, this works as there was only a single interface on the system. Furthermore,
    we saw how to monitor, modify, and delete aggregations.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了两种链路聚合方式。其主要优势在于性能，因为它将所有接口汇聚在一起，隐藏它们，并只呈现最终的逻辑对象：链路聚合对象。对于外部主机来说，这就像系统上只有一个接口一样。此外，我们还了解了如何监控、修改和删除聚合。
- en: Configuring network bridging
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置网络桥接
- en: 'Oracle Solaris 11 provides a wonderful feature that offers the possibility
    to deploy network bridges (layer 2, Datalink) that connect separated network segments
    and share the broadcast domain without the requirement of a router using a packet-forwarding
    mechanism: Network 1 | Bridge | Network 2.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Solaris 11 提供了一项出色的功能，能够部署连接分离网络段并共享广播域的网络桥接（第二层，数据链路），无需路由器，采用数据包转发机制：网络
    1 | 桥接 | 网络 2。
- en: The real effect of configuring and using Network Bridging is that all machines
    are able to communicate with each other as if they were on the same network. However,
    as a bridge works in a promiscuous mode, it uses some techniques in order to prevent
    creating loops such as **Spanning Tree Protocol** (**STP**), which is used with
    switches, and **Transparent Interconnect of Lots of Links** (**TRILL**), which
    has a small advantage when compared to STP because it always uses the short path
    to forward packages without shutting down a physical link as STP does.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 配置并使用网络桥接的实际效果是，所有机器能够像在同一网络中一样相互通信。然而，由于桥接工作在混杂模式下，它使用一些技术来防止产生环路，如 **生成树协议**（**STP**），该协议用于交换机，还有
    **大量链路透明互连**（**TRILL**），与 STP 相比，TRILL 有一点优势，因为它始终使用最短路径来转发数据包，而不会像 STP 那样关闭物理链接。
- en: Getting ready
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To follow this recipe, it''s necessary to create a complex setup. We must have
    three virtual machines (VirtualBox or VMware, but I''m showing you the steps for
    VirtualBox) with Oracle Solaris 11 and 2 GB each. The first machine must have
    two network interfaces and the other two must have only one interface. For the
    first virtual machine (`solaris11-1`), network adapters must have the following
    configuration:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照此步骤操作，需要创建一个复杂的配置。我们必须有三台虚拟机（VirtualBox 或 VMware，这里以 VirtualBox 为例），每台虚拟机的
    Oracle Solaris 11 系统配置为 2GB。第一台虚拟机必须具备两个网络接口，而另外两台则只有一个接口。对于第一台虚拟机（`solaris11-1`），网络适配器需要按以下配置：
- en: '**Adapter 1** should have **Attached to** set to **Bridged Adapter**'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适配器 1** 应该设置为 **附加到** **桥接适配器**'
- en: '**Adapter 2** should have **Attached to** set to **Internal Network**'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适配器 2** 应该设置为 **附加到** **内部网络**'
- en: 'The second machine (`solaris11-2`) must have the following network configuration:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 第二台虚拟机（`solaris11-2`）必须具备以下网络配置：
- en: '**Adapter 1** should have **Attached to** set to **Internal Network**'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适配器 1** 应该设置为 **附加到** **内部网络**'
- en: 'The third virtual machine must have the following network configuration:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 第三台虚拟机必须具备以下网络配置：
- en: '**Adapter 1** should have **Attached to** set to **Bridged Adapter**'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适配器 1** 应该设置为 **附加到** **桥接适配器**'
- en: First, in the VirtualBox environment, select the `solaris11-1` virtual machine,
    go to the **Machine** menu, and select **Settings**. When the configuration screen
    appears, go to **Network**, and in the **Adapter 1** tab, change the **Attached
    to** configuration to **Bridged Adapter**.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 VirtualBox 环境中，选择 `solaris11-1` 虚拟机，进入 **机器** 菜单，选择 **设置**。当配置屏幕出现时，转到
    **网络**，在 **适配器 1** 标签中，将 **附加到** 配置更改为 **桥接适配器**。
- en: '![Getting ready](img/00012.jpeg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/00012.jpeg)'
- en: 'On the same screen, go to **Adapter 2** and configure the **Attached to** property
    to **Internal Network**, as shown in the following screenshot:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一屏幕上，转到 **适配器 2**，并将 **附加到** 属性配置为 **内部网络**，如下面的屏幕截图所示：
- en: '![Getting ready](img/00013.jpeg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/00013.jpeg)'
- en: 'Now, on VirtualBox''s first screen, select the `solaris11-2` virtual machine,
    go to the **Machine** menu, and select **Settings**. When the configuration screen
    appears, go to **Network**, and in the **Adapter 1** tab, change the **Attached
    to** configuration to **Internal Network**, as shown in the following screenshot:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在VirtualBox的第一个屏幕上，选择`solaris11-2`虚拟机，进入**机器**菜单，选择**设置**。当配置屏幕出现时，进入**网络**，在**适配器1**标签下，将**连接方式**配置为**内部网络**，如下图所示：
- en: '![Getting ready](img/00014.jpeg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/00014.jpeg)'
- en: 'Repeat the same steps that were performed for the previous machine for the
    third system and change the **Attached to** value to **Bridge Adapter**, as shown
    in the following screenshot:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第三个系统，重复执行之前对第二个虚拟机所做的步骤，并将**连接方式**值更改为**桥接适配器**，如下图所示：
- en: '![Getting ready](img/00015.jpeg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/00015.jpeg)'
- en: How to do it…
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做呢……
- en: 'The scheme for this recipe is `solaris11-2` | `solaris11-1` | `solaris11-3`.
    Let''s configure the bridge (`solaris11-1`). On the `solaris11-1` virtual machine,
    list the current network configuration:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的结构是`solaris11-2` | `solaris11-1` | `solaris11-3`。我们来配置桥接（`solaris11-1`）。在`solaris11-1`虚拟机中，列出当前的网络配置：
- en: '[PRE64]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'So far, we know that this machine has two network interfaces; both are `up`
    and one of them has an IP address. Since this IP address comes from the last recipe,
    the following commands are used to erase this existing IP address and create a
    new one for the `net0` and `net1` network interfaces:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们知道这台机器有两个网络接口；它们都处于`up`状态，并且其中一个有IP地址。由于这个IP地址来自上一节食谱，以下命令将用于删除现有的IP地址，并为`net0`和`net1`网络接口创建一个新的IP地址：
- en: '[PRE65]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Assign an IP address for each network interface (`net0` and `net1`) by executing
    the following commands:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令，为每个网络接口（`net0`和`net1`）分配IP地址：
- en: '[PRE66]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'To verify that the IP assignment is working, run the following command:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证IP分配是否正常工作，运行以下命令：
- en: '[PRE67]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Great! We assigned one IP address (`192.168.1.65/24`) for the `net0/24` network
    interface and another one (`192.168.10.38/24`) for the `net1` network interface.
    As we can see, both are in different networks so they aren't able to communicate
    with each other.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！我们为`net0/24`网络接口分配了一个IP地址（`192.168.1.65/24`），为`net1`网络接口分配了另一个IP地址（`192.168.10.38/24`）。如我们所见，这两个接口处于不同的网络中，因此无法互相通信。
- en: 'In the `solaris11-3` virtual machine, let''s also list the current network
    configuration, delete it, and create a new one:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在`solaris11-3`虚拟机中，我们也列出当前的网络配置，删除它，并创建一个新的配置：
- en: '[PRE68]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Good! This virtual machine can reach the first one (`solaris11-1`) because both
    are on the same network.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！这个虚拟机能够访问第一个虚拟机（`solaris11-1`），因为它们都处于同一个网络中。
- en: 'On the `solaris11-2` virtual machine, the same steps are going to be executed,
    erasing the current network configuration and creating a new one:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在`solaris11-2`虚拟机上，将执行相同的步骤，删除当前的网络配置并创建一个新的配置：
- en: '[PRE69]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: This is really good. This virtual machine (`solaris11-2`) is on a different
    network (**Internal Network**) than the other two virtual machines and there's
    a router that isn't able to reach them. We expected this exact behavior!
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常好。这个虚拟机（`solaris11-2`）处于一个与另外两个虚拟机不同的网络（**内部网络**）上，并且有一个路由器无法访问它们。我们预期的正是这种行为！
- en: 'Now it''s time! Returning to the `solaris11-1` virtual machine, make a bridge
    (layer 2) between the `net0` and `net1` network interfaces in the following steps.
    First, verify that there is a bridge on the system by executing the following
    two commands:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候了！返回到`solaris11-1`虚拟机，按照以下步骤在`net0`和`net1`网络接口之间创建一个桥接（第2层）。首先，执行以下两个命令以验证系统中是否存在桥接：
- en: '[PRE70]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'There is no bridge, so it''s time to create the bridge (between the `net0`
    and `net1` network interfaces) by executing the following command:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 没有桥接，所以是时候通过执行以下命令创建桥接（在`net0`和`net1`网络接口之间）：
- en: '[PRE71]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'To verify that the bridge was created successfully, execute the following command:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证桥接是否成功创建，执行以下命令：
- en: '[PRE72]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Gathering some details from `baybridge` is done by executing the following
    command:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令，从`baybridge`收集一些详细信息：
- en: '[PRE73]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'That sounds good. Both network interfaces from the `solaris11-1` virtual machine
    are forwarding and using STP to prevent loops. The next command confirms that
    they are using STP:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来不错。`solaris11-1`虚拟机的两个网络接口都在转发，并使用STP来防止环路。接下来的命令确认它们正在使用STP：
- en: '[PRE74]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'To verify that the bridge configuration has worked, the execution of the most
    important step from this recipe from the `solaris11-2` virtual machine is as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证桥接配置是否成功，执行以下最重要的步骤，该步骤需要从`solaris11-2`虚拟机中执行：
- en: '[PRE75]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Incredible! Previously, we tried to reach the `192.168.1.0` network and we didn't
    achieve success. However, now this is different because the bridge (`baybridge`)
    configured on `solaris11-1` has made it possible. Moreover, there's a big detail—there
    is no router. There's only a bridge.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 真不可思议！之前，我们尝试连接`192.168.1.0`网络时未能成功。然而，现在情况不同了，因为在`solaris11-1`上配置的桥接（`baybridge`）使这一切成为可能。而且，还有一个大细节——没有路由器，只有一个桥接。
- en: 'To undo the bridge and return the environment to the initial configuration,
    execute the following command:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 要撤销桥接并将环境恢复到初始配置，请执行以下命令：
- en: '[PRE76]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Logically, we've undone everything, and now it's necessary to change the network
    configuration back from the `solaris11-2` virtual machine to **Network Bridged**.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 从逻辑上讲，我们已经撤销了所有操作，现在需要将网络配置从`solaris11-2`虚拟机切换回**网络桥接**模式。
- en: An overview of the recipe
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配方概述
- en: In this section, we learned how to configure, monitor, and unconfigure a bridge,
    which is a layer 2 technology that makes it possible to transmit a packet from
    one network to another without using a router.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们学习了如何配置、监控和取消配置桥接，桥接是一个二层技术，可以在不使用路由器的情况下将数据包从一个网络传输到另一个网络。
- en: Configuring link protection and the DNS Client service
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置链接保护和DNS客户端服务
- en: Nowadays, virtualized systems are growing and spreading very fast, and usually,
    the virtual machines or virtual environments (zones, for example) have full physical
    network access. Unfortunately, this granted network access can compromise the
    system and the entire network if malicious packets originate from these virtual
    environments. It is at this point that Oracle Solaris 11 Link Protection can prevent
    any damage from being caused by these harmful packets that come from virtual environments.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，虚拟化系统正在快速发展和普及，通常，虚拟机或虚拟环境（例如区域）具有完全的物理网络访问权限。不幸的是，如果这些虚拟环境中发起恶意数据包，所授予的网络访问权限可能会危及系统和整个网络。在这个时候，Oracle
    Solaris 11的链接保护可以防止这些来自虚拟环境的有害数据包造成任何损害。
- en: Oracle Solaris 11 has introduced Link Protection to try and prevent several
    types of spoof attacks, such as IP spoofing (when someone masquerades the IP address
    from his/her system with a forged IP address in order to pretend being another
    system, which is very usual during a denial-of-service attack), DHCP spoofing
    (when a rogue DHCP server is attached in the network in order to provide false
    information such as the gateway address, causing all network data flow to go through
    the cracker machine in a classic man-in-the-middle attack), and MAC spoofing (a
    lethal attack in which the MAC address is manipulated, making it possible for
    a cracker to execute a man-in-the-middle attack or even gain access to system
    or network devices that control access using the MAC address). All these attacks
    have the potential to compromise a network or even the whole company.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Solaris 11引入了链接保护功能，旨在防止几种类型的欺骗攻击，如IP欺骗（当某人伪装其系统的IP地址，用伪造的IP地址冒充另一个系统，通常发生在拒绝服务攻击中）、DHCP欺骗（当一个非法的DHCP服务器接入网络，提供错误的信息如网关地址，导致所有网络数据流通过黑客机器，从而引发经典的中间人攻击）和MAC欺骗（这是一种致命的攻击，攻击者通过操控MAC地址，使其能够执行中间人攻击，甚至访问控制使用MAC地址的系统或网络设备）。所有这些攻击都有可能危及网络，甚至整个公司。
- en: For appropriate protection against all these attacks, the Link Protection feature
    offers a network interface property named protection, which has some possible
    values that determine the security level. For example, in the case of protection
    against MAC spoofing (the `protection` property value is equal to `mac-nospoof`),
    any MAC address outbound packets (packets that leave the system) must be equal
    to the MAC address from the source network; otherwise, the packet will certainly
    be dropped.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效防护这些攻击，链接保护功能提供了一个名为`protection`的网络接口属性，该属性有一些可能的值来确定安全级别。例如，在防止MAC欺骗的情况下（`protection`属性值等于`mac-nospoof`），任何出站的MAC地址数据包（离开系统的数据包）必须与源网络的MAC地址相同；否则，数据包肯定会被丢弃。
- en: When applying the IP spoofing protection (`ip-nospoof`), any outgoing packet
    (for example, ARP or IP) must have a source address equal to the address offered
    by the DHCP service or equal to the IP list configured in the `allow-ips` property.
    Otherwise, Oracle Solaris 11 drops the packet.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用IP欺骗保护（`ip-nospoof`）时，任何发出的数据包（例如，ARP或IP）必须具有与DHCP服务提供的地址相等的源地址，或者与在`allow-ips`属性中配置的IP列表相等。否则，Oracle
    Solaris 11将丢弃该数据包。
- en: The other two possible values for the `protection` property are `dhcp-nonspoof`
    and `restricted` (which restricts the outgoing packets to only IPv4, IPv6, and
    ARP).
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`protection`属性的其他两个可能值是`dhcp-nonspoof`和`restricted`（它限制发出的数据包仅为IPv4、IPv6和ARP）。'
- en: Another relevant subject is how to set up a DNS client on Oracle Solaris 11\.
    Until Oracle Solaris 10, this procedure wasn't integrated with the **Service Management
    Facility** (**SMF**) framework. This has changed with Oracle Solaris 11.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个相关的话题是如何在Oracle Solaris 11中设置DNS客户端。在Oracle Solaris 10之前，这个过程并没有与**服务管理设施**（**SMF**）框架集成。这个情况在Oracle
    Solaris 11中发生了变化。
- en: Getting ready
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a virtual machine (VirtualBox or VMware) with Oracle Solaris
    11 installed, 4 GB RAM, one network interface, and access to the Internet. Optionally,
    if the environment has some Oracle Solaris Zones configured, the tests can be
    more realistic.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程需要一台安装了Oracle Solaris 11的虚拟机（VirtualBox或VMware），4GB内存，一张网络接口卡，并能够访问互联网。可选地，如果环境中已配置了一些Oracle
    Solaris区域，那么测试会更加真实。
- en: How to do it…
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行…
- en: Link protection must be configured in the global zone. If the protection is
    applied to the physical network interface, all vnics connected to the physical
    network interface will be protected, but the following steps will be performed
    for one vnic only.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 链接保护必须在全局区域中配置。如果保护应用于物理网络接口，则所有连接到物理网络接口的虚拟网卡（vnic）都会受到保护，但以下步骤只会对一个vnic执行。
- en: 'The link protection configuration is started through a reset (disabling and
    resetting the protection to its default):'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 链接保护配置是通过重置（禁用并重置保护到默认值）开始的：
- en: '[PRE77]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'To list the link protection status, execute the following command:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出链接保护状态，请执行以下命令：
- en: '[PRE78]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The link protection is still not applied. Therefore, to enable link protection
    against IP spoofing for the network interface `net0`, execute the following:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 链接保护仍未应用。因此，要启用针对IP欺骗的网络接口`net0`的链接保护，请执行以下命令：
- en: '[PRE79]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Additionally, the two configured zones in the system have the IP addresses
    `192.168.1.55` and `192.168.1.66`, respectively, and both of them have virtual
    interfaces (`vnic0` and `vnic1`) connected to the `net0` interface. Then, to allow
    these zones to communicate over the physical network, execute the following command:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，系统中配置的两个区域的IP地址分别是`192.168.1.55`和`192.168.1.66`，它们都有虚拟接口（`vnic0`和`vnic1`）连接到`net0`接口。然后，为了允许这些区域通过物理网络进行通信，请执行以下命令：
- en: '[PRE80]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'To verify and check the previous command, execute the following command:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证并检查前一个命令，请执行以下命令：
- en: '[PRE81]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'It''s also possible to get some statistics about the link data protection for
    completeness, but we aren''t going to delve into details here:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以获取一些关于链接数据保护的统计信息，以便完整性验证，但我们在这里不深入探讨：
- en: '[PRE82]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'To disable the link data protection, execute the following commands:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用链接数据保护，请执行以下命令：
- en: '[PRE83]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Approaching another subject, the DNS Client configuration has changed a lot
    since Oracle Solaris 10\. However, it isn't hard to configure it. It's only different.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 转到另一个话题，DNS客户端的配置自Oracle Solaris 10以来发生了很大变化。然而，配置起来并不困难，只是有所不同。
- en: 'Usually, this kind of task, which requires us to modify some configuration
    manually, is executed when working on an environment with the NCP profile `DefaultFixed`
    and loc profile `DefaultFixed` because when both profiles are set to `Automatic`,
    DHCP provides the name server configuration and other settings. Therefore, to
    make the next recipe more realistic, the NCP and loc profiles will be altered
    to `DefaultFixed` where every network configuration must be performed manually:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这种需要我们手动修改一些配置的任务会在使用NCP配置文件`DefaultFixed`和本地配置文件`DefaultFixed`的环境中执行，因为当两个配置文件都设置为`Automatic`时，DHCP提供了名称服务器配置和其他设置。因此，为了使下一个过程更具真实性，NCP和本地配置文件将更改为`DefaultFixed`，在这种情况下，所有网络配置必须手动完成：
- en: '[PRE84]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'As we''ve enabled the `DefaultFixed` configuration, it''s our task to create
    the IP object and assign an IP address to it:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们启用了`DefaultFixed`配置，现在需要创建IP对象并为其分配一个IP地址：
- en: '[PRE85]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'To confirm that the previous command is working, execute the following commands:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认上述命令是否有效，请执行以下命令：
- en: '[PRE86]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Great! Now, in order to change the DNS servers used by the system to look up
    hostnames and IP addresses, execute the following command:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！现在，为了更改系统用于查找主机名和 IP 地址的 DNS 服务器，执行以下命令：
- en: '[PRE87]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Setting the DNS domain (`example.com`) and domain search list (`example.com`)
    is done by running the following:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 DNS 域（`example.com`）和域搜索列表（`example.com`）通过运行以下命令完成：
- en: '[PRE88]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Setting the IPv4 and IPv6 resolution order (first, try to resolve a hostname
    by looking at the `/etc/host` file, and if there is no success, try to resolve
    the hostname on the DNS service), respectively, is executed by the following commands:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 分别执行以下命令设置 IPv4 和 IPv6 解析顺序（首先尝试通过查看 `/etc/host` 文件解析主机名，如果没有成功，则尝试在 DNS 服务上解析主机名）：
- en: '[PRE89]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Everything that was configured can be verified by executing the following commands:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过执行以下命令来验证所有已配置的内容：
- en: '[PRE90]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'It''s nice that the executed steps have worked; however, this isn''t enough
    yet. All the DNS configuration up to this point isn''t persistent and doesn''t
    take effect now or till the next system boot. Therefore, the DNS Client service
    must be refreshed (to read its associated configuration file or service configuration
    again) for it to take effect immediately and restarted to make the configuration
    persistent (saved on the disk) and valid for the next system initializations.
    This task can be done by executing the following commands:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 执行了步骤是有效的，这很好；但是，这还不够。到目前为止所有的 DNS 配置都不是持久的，也不会立即或在下次系统启动时生效。因此，必须刷新 DNS 客户端服务（重新读取其关联的配置文件或服务配置）以使其立即生效，并重新启动以使配置持久化（保存在磁盘上）并在下次系统初始化时有效。可以通过执行以下命令完成此任务：
- en: '[PRE91]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Eventually, because of any prior random event, the `dns/client` service can
    be disabled, and in this case, we have to enable it by executing the following
    command:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，由于任何先前的随机事件，`dns/client` 服务可能被禁用，在这种情况下，必须通过执行以下命令启用它：
- en: '[PRE92]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: A very interesting point is that the `resolv.conf` file (the file that was the
    only point of configuration until Oracle Solaris 10) under `etc` is regenerated
    every time the DNS Client service is restarted. If the administrator modifies
    this file manually, the settings will take place immediately, but the file content
    will be restored from the service configuration in the next system reboot.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常有趣的点是 `etc` 下的 `resolv.conf` 文件（直到 Oracle Solaris 10 之前是唯一的配置点）在每次重新启动 DNS
    客户端服务时都会重新生成。如果管理员手动修改此文件，则设置将立即生效，但文件内容将在下次系统重启时从服务配置中恢复。
- en: '[PRE93]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Finally, the name server resolution takes effect only if the following commands
    are executed:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，只有执行以下命令才会使名称服务器解析生效：
- en: '[PRE94]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The same rule that is applied to the `resolv.conf` file under `etc` is also
    valid for the `nsswitch.conf` file (the file where the order of name resolution
    is configured) under `etc`, which is regenerated during each system boot as well:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于 `etc` 下的 `resolv.conf` 文件的相同规则也适用于 `etc` 下的 `nsswitch.conf` 文件（配置名称解析顺序的文件），它在每次系统启动时也会重新生成：
- en: '[PRE95]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'The final test is to ping a website as follows:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的测试是执行以下操作来 ping 一个网站：
- en: '[PRE96]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'To configure the default gateway for the system (`192.168.1.1`) and prevent
    the same effect of persistence (settings that are only valid until the next reboot)
    such as that in the DNS client configuration case, execute the following command:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 要为系统配置默认网关（`192.168.1.1`），并防止像 DNS 客户端配置案例中的持久性相同效果（即仅在下次重新启动之前有效的设置），请执行以下命令：
- en: '[PRE97]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'To verify the previous command and confirm the gateway configuration, execute
    the following command:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证上述命令并确认网关配置，请执行以下命令：
- en: '[PRE98]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: An overview of the recipe
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配方概述
- en: In this section, we learned about Link Protection to protect against DNS, DHCP,
    and IP spoofing. Additionally, the DNS Client service configuration was presented
    too.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了链路保护来防范 DNS、DHCP 和 IP 欺骗。此外，还介绍了 DNS 客户端服务配置。
- en: Configuring the DHCP server
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 DHCP 服务器
- en: Oracle Solaris 11 includes an open source version of DHCP named **Internet Systems
    Consortium Dynamic Host Configuration Protocol** (**ISC DHCP**), which is a well-known
    client-server service used by most IT administrators. This makes network and IP
    address configuration easier, mainly when there are many machines to be managed
    on a network. Without a DHCP server, the administrator would have to configure
    the IP address, mask, gateway, server name, and other settings on each network
    machine manually, making administration a time-consuming job. When using the DHCP
    service, most network settings are performed in a centralized point and there
    is the possibility of performing a particular configuration for chosen machines.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Solaris 11 包含了一个名为**互联网系统联盟动态主机配置协议**（**ISC DHCP**）的开源版本，这是一个广泛应用的客户端-服务器服务，许多IT管理员都会使用它。这使得网络和IP地址配置变得更加容易，尤其是在需要管理大量网络机器时。如果没有DHCP服务器，管理员必须手动为每台网络机器配置IP地址、子网掩码、网关、服务器名称等设置，这将使得管理工作变得非常耗时。使用DHCP服务时，大部分网络设置都在一个集中点进行，并且可以为选定的机器执行特定的配置。
- en: The DHCP server isn't already installed on Oracle Solaris 11, and it's available
    on the DVD or in the Oracle repository, whereas the DHCP client (`dhcpagent`)
    runs and is included on every default Oracle Solaris 11 and higher installations.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Solaris 11 中没有预安装DHCP服务器，但它可以从DVD或Oracle仓库中获取，而DHCP客户端（`dhcpagent`）则会在每个默认的Oracle
    Solaris 11及更高版本的安装中运行并包含。
- en: All DHCP operations are based on the broadcast service and are restricted to
    a local network, and each network segment should have its own DHCP server. When
    there are hosts on a network segment (for example, segment A) and there's only
    one DHCP server on another network segment (for example, segment B), it's possible
    to use the DHCP server from segment B through a router using a DHCP relay implementation.
    Oracle Solaris 11 offers the support to configure a DHCP relay as well. However,
    this won't be shown because using a DHCP relay with Oracle Solaris 11 is a rare
    configuration.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 所有DHCP操作基于广播服务并且限制在本地网络内，每个网络段应当拥有自己的DHCP服务器。当网络段（例如，A段）上的主机与另一个网络段（例如，B段）上只有一个DHCP服务器时，可以通过路由器使用DHCP中继实现从B段的DHCP服务器获取服务。Oracle
    Solaris 11也支持配置DHCP中继，但这里不展示，因为在Oracle Solaris 11中使用DHCP中继是一个罕见的配置。
- en: Getting ready
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires three virtual machines (VirtualBox or VMware) running Oracle
    Solaris 11 with 4 GB RAM. It is recommended that all machines be on an isolated
    network to prevent any external DHCP server from disturbing our test.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程需要三台虚拟机（VirtualBox或VMware），运行Oracle Solaris 11，内存为4GB。建议所有机器都在一个隔离的网络上，以防外部DHCP服务器干扰我们的测试。
- en: How to do it…
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'As we''ve mentioned, the DHCP server isn''t installed by default; we have to
    install it on the first machine (`solaris11-1`):'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，DHCP服务器默认没有安装；我们必须在第一台机器（`solaris11-1`）上安装它：
- en: '[PRE99]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: As the appropriate packages have been installed, it's time to configure the
    DHCP server.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所需的软件包已经安装，现在是时候配置DHCP服务器了。
- en: 'Our subnet is `192.168.1.0/24`, so the DHCP server needs to be configured to
    attend this network segment. Copy the `dhcpd.conf.example` template under `etc/inet`
    to `/etc/inet/dhcpd4.conf` and make some changes including the network segment,
    default lease time, domain server names, and default gateway line configuration,
    as follows:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的子网是`192.168.1.0/24`，因此需要配置DHCP服务器以支持这个网络段。将`etc/inet`下的`dhcpd.conf.example`模板复制到`/etc/inet/dhcpd4.conf`，并进行一些更改，包括网络段、默认租约时间、域名服务器名称和默认网关配置行，如下所示：
- en: '[PRE100]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'To make the changes in `dhcp4.conf` under `/etc/inet/` take effect, execute
    the following commands:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 要使`/etc/inet/`下的`dhcp4.conf`文件中的更改生效，请执行以下命令：
- en: '[PRE101]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'We''ve performed the configuration on the DHCP server; now, move to configure
    the DHCP client on the `solaris11-2` system. In order to set up the network interface
    to get the network configuration from our DHCP server, execute the following command:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了DHCP服务器的配置；现在，转到`solaris11-2`系统上配置DHCP客户端。为了将网络接口设置为从我们的DHCP服务器获取网络配置，请执行以下命令：
- en: '[PRE102]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Perfect! The client machine (`solaris11-2`) has received an IP address, which
    is in the range offered by the DHCP server (`192.168.1.10` to `192.168.1.15`).
    The most important command is `ipadm create-addr -T dhcp net0/v4`, which assigns
    an IP address from the DHCP server.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！客户端机器（`solaris11-2`）已成功接收到IP地址，这个地址位于DHCP服务器提供的地址范围内（`192.168.1.10`到`192.168.1.15`）。最重要的命令是`ipadm
    create-addr -T dhcp net0/v4`，该命令从DHCP服务器分配一个IP地址。
- en: 'On the DHCP server machine, there''s a file named `dhcp4.leases` that shows
    us the DHCP client lease information:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DHCP 服务器机器上，有一个名为 `dhcp4.leases` 的文件，显示了 DHCP 客户端的租约信息：
- en: '[PRE103]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'According to the preceding command, it was allocated an IP address (`192.168.1.10`)
    for the client that holds the MAC address `08:00:27:96:46:f0`. Retuning to the
    `solaris11-2` machine (the DHCP client machine), it''s possible to confirm that
    we are talking about the same virtual machine:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的命令，它为持有 MAC 地址 `08:00:27:96:46:f0` 的客户端分配了一个 IP 地址（`192.168.1.10`）。返回到
    `solaris11-2` 机器（即 DHCP 客户端机器），可以确认我们正在讨论的是同一台虚拟机：
- en: '[PRE104]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'At the DHCP client, execute the following command to renew the IP address:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DHCP 客户端上，执行以下命令以续租 IP 地址：
- en: '[PRE105]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'In the `solaris11-1` server, the renewing event is shown in `/var/db/isc-dhcp/dhcp4.leases`:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `solaris11-1` 服务器中，续租事件显示在 `/var/db/isc-dhcp/dhcp4.leases` 文件中：
- en: '[PRE106]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Let''s test the renew process once more, releasing and leasing a new IP address
    by executing the following commands:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再测试一次续租过程，通过执行以下命令释放并租用一个新的 IP 地址：
- en: '[PRE107]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Everything is working fine!
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 一切正常运作！
- en: An overview of the recipe
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配方概览
- en: The DHCP server is a very common service and is easy to configure and maintain.
    This DHCP example will be used as a support service for the **Automated Installation**
    (**AI**) service in a later chapter.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP 服务器是一项非常常见的服务，配置和维护都很简单。这个 DHCP 示例将在后续章节中作为 **自动安装**（**AI**）服务的支持服务。
- en: Configuring Integrated Load Balancer
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置集成负载均衡器
- en: 'Certainly, **Integrated Load Balancer** (**ILB**) is one of the most attractive
    features of Oracle Solaris 11 because it provides network layer 3 and 4 with the
    load balance service. Basically, when a client requires a resource from an application
    (for example, a web server), the ILB framework decides which backend host (for
    example, web server A or B) will attend the request. Therefore, the main role
    of ILB is to decide to which backend server (for example, the Apache web server)
    the request will be forwarded. ILB supports two work methods in Oracle Solaris
    11: **Direct Server Return** (**DSR**) and **Network** **Address Translate** (**NAT**).
    In both cases, the ILB framework uses one of four algorithms:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，**集成负载均衡器**（**ILB**）是 Oracle Solaris 11 最具吸引力的功能之一，因为它为网络层 3 和 4 提供了负载均衡服务。基本上，当客户端需要一个应用程序的资源（例如，Web
    服务器）时，ILB 框架决定哪个后端主机（例如，Web 服务器 A 或 B）将处理该请求。因此，ILB 的主要作用是决定将请求转发到哪个后端服务器（例如，Apache
    Web 服务器）。ILB 在 Oracle Solaris 11 中支持两种工作方式：**直接服务器返回**（**DSR**）和 **网络地址转换**（**NAT**）。在这两种情况下，ILB
    框架使用以下四种算法之一：
- en: '**Round robin**: This tries to keep an equal statistic distribution over all
    backend servers'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轮询**：这尝试在所有后端服务器之间保持均等的统计分布'
- en: '**Source IP hash**: In this, the choice of the destination backend server is
    made by hashing the source IP address of the client'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源 IP 哈希**：在这种方式中，目的后端服务器的选择是通过对客户端的源 IP 地址进行哈希计算来决定的'
- en: '**Source IP port hash**: In this, the choice of the destination backend server
    is made by hashing the source IP and port address of the client'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源 IP 端口哈希**：在这种方式中，目的后端服务器的选择是通过对客户端的源 IP 和端口地址进行哈希计算来决定的'
- en: '**Source IP VIP hash**: In this, the choice of the destination backend server
    is made by hashing the source and destination IP address of the client'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源 IP VIP 哈希**：在这种方式中，目的后端服务器的选择是通过对客户端的源 IP 和目的 IP 地址进行哈希计算来决定的'
- en: The DSR method allows ILB to receive the request in order to decide which backend
    server (for example, Apache servers) the request will be forwarded to and to make
    the answer from the backend server return directly to the client. Nevertheless,
    if the ILB server is configured as a router, then all answers from backend servers
    can be routed to the client through ILB.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: DSR 方法允许 ILB 接收请求，以决定将请求转发到哪个后端服务器（例如，Apache 服务器），并使来自后端服务器的回答直接返回给客户端。然而，如果
    ILB 服务器配置为路由器，则所有来自后端服务器的回答可以通过 ILB 路由到客户端。
- en: When ILB is configured to use the DSR method, its performance is better than
    NAT and it also shows better transparency because only the destination MAC address
    is changed and the answer returning to the client can bypass the ILB server, as
    we've mentioned previously. Unfortunately, if we try to add a new backend server,
    the connection will be disrupted because the connection is stateless.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 当 ILB 配置为使用 DSR 方法时，它的性能优于 NAT，并且具有更好的透明性，因为只有目的 MAC 地址发生变化，返回客户端的回答可以绕过 ILB
    服务器，正如我们之前提到的那样。不幸的是，如果我们尝试添加一个新的后端服务器，连接将会中断，因为连接是无状态的。
- en: 'A scheme about what we''ve mentioned up to now can be viewed as follows:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们提到的内容的示意图如下所示：
- en: '**request**: client | ILB server | backend servers (A or B)'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求**：客户端 | ILB服务器 | 后端服务器（A或B）'
- en: '**answer**: backend server | client'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回答**：后端服务器 | 客户端'
- en: '**answer (ILB as router)**: backend server | ILB (router) | client'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回答（ILB作为路由器）**：后端服务器 | ILB（路由器） | 客户端'
- en: 'The following image (the IP addresses in the image are only an example) also
    describes the process:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像（图中的IP地址仅为示例）也描述了该过程：
- en: '![Configuring Integrated Load Balancer](img/00016.jpeg)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
  zh: '![配置集成负载均衡器](img/00016.jpeg)'
- en: The NAT method (half or full) allows ILB to rewrite all requests by changing
    the destination IP address and—when ILB is working in the NAT full method—by also
    changing the source address by masking the real IP client with the ILB IP address.
    Backend servers think that the request is coming from the ILB server instead of
    coming from the client.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: NAT方法（半NAT或全NAT）允许ILB通过更改目标IP地址来重写所有请求——当ILB使用全NAT模式时，还会通过将真实的IP客户端地址用ILB的IP地址进行掩码来更改源地址。后端服务器认为请求来自ILB服务器，而不是客户端。
- en: 'The following is a scheme that explains this process:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是解释此过程的示意图：
- en: '**request**: client | ILB server (NAT) | backend server (A or B)'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求**：客户端 | ILB服务器（NAT） | 后端服务器（A或B）'
- en: '**answer**: backend server (A or B) | ILB server (NAT) | client'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回答**：后端服务器（A或B） | ILB服务器（NAT） | 客户端'
- en: 'To make this easier, the following diagram explains the process:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，以下图表说明了该过程：
- en: '![Configuring Integrated Load Balancer](img/00017.jpeg)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![配置集成负载均衡器](img/00017.jpeg)'
- en: Unlike DSR, the ILB NAT model requires the ILB server as a default gateway.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 与DSR不同，ILB NAT模型要求ILB服务器作为默认网关。
- en: Getting ready
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To follow the recipe, we must have four virtual machines (VirtualBox or VMware)
    installed with Oracle Solaris 11 and 4 GB RAM.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行此步骤，我们必须安装四台虚拟机（VirtualBox或VMware），并且每台虚拟机都安装Oracle Solaris 11和4GB的内存。
- en: 'Personally, I''ve installed all of these virtual machines in VirtualBox and
    their network adapters were configured as **Attached in: Internal Network**. The
    scenario was designed as `solaris11-2` | `solaris11-1` | `solaris11-3`/`solaris11-4`:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我在VirtualBox中安装了所有这些虚拟机，并将它们的网络适配器配置为**附加到：内部网络**。该场景的设计是`solaris11-2`
    | `solaris11-1` | `solaris11-3`/`solaris11-4`：
- en: '`solaris11-2` (`net0`): `192.168.1.155`'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solaris11-2`（`net0`）：`192.168.1.155`'
- en: '`solaris11-1` (`net0`): `192.168.1.144`'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solaris11-1`（`net0`）：`192.168.1.144`'
- en: '`solaris11-1` (`net1`): `192.168.5.77`'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solaris11-1`（`net1`）：`192.168.5.77`'
- en: '`solaris11-3` (`net0`): `192.168.5.88`'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solaris11-3`（`net0`）：`192.168.5.88`'
- en: '`solaris11-4` (`net0`): `192.168.5.99`'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solaris11-4`（`net0`）：`192.168.5.99`'
- en: 'For example, `/etc/hosts` should be as follows:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`/etc/hosts`应如下所示：
- en: '[PRE108]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: How to do it…
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Before starting a NAT or DSR example, the infrastructure must be configured
    and all virtual machines must be set up according to the IP address configuration
    shown previously:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动NAT或DSR示例之前，必须按照之前显示的IP地址配置配置基础设施并设置所有虚拟机：
- en: 'In `solaris11-1`, execute the following commands:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在`solaris11-1`中，执行以下命令：
- en: '[PRE109]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'In `solaris11-2`, execute the following commands:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在`solaris11-2`中，执行以下命令：
- en: '[PRE110]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'In `solaris11-3`, execute the following commands:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在`solaris11-3`中，执行以下命令：
- en: '[PRE111]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'In `solaris11-4`, execute the following commands:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在`solaris11-4`中，执行以下命令：
- en: '[PRE112]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The next stage is to configure both Apache servers (`solaris11-3` and `solaris11-4`)
    by executing the following commands:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 下一阶段是通过执行以下命令配置两个Apache服务器（`solaris11-3`和`solaris11-4`）：
- en: '[PRE113]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '![How to do it…](img/00018.jpeg)'
  id: totrans-424
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00018.jpeg)'
- en: '[PRE114]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '![How to do it…](img/00019.jpeg)'
  id: totrans-426
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00019.jpeg)'
- en: '[PRE115]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'The required infrastructure is ready, and so the ILB setup is going to be executed
    in the `solaris11-1` virtual machine that is configuring a half-NAT scenario:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的基础设施已经准备好，因此将在配置半NAT场景的`solaris11-1`虚拟机中执行ILB设置：
- en: '[PRE116]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'To verify the routing and forwarding configuration, run the following command:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证路由和转发配置，请运行以下命令：
- en: '[PRE117]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'To enable the IPv4 forwarding between network interface cards in the system,
    execute the following commands:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用系统中网络接口卡之间的IPv4转发，请执行以下命令：
- en: '[PRE118]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'At this time, we have to enable the ILB service by executing the following
    commands:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们需要通过执行以下命令启用ILB服务：
- en: '[PRE119]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'When working with ILB, we must create a server group that points to the application
    running in the backend servers (in our case, Apache):'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用ILB时，我们必须创建一个服务器组，指向在后端服务器中运行的应用程序（在我们的案例中是Apache）：
- en: '[PRE120]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'The next step creates a **virtual IP address** (**VIP address**), which makes
    the load balance possible and application to be accessed by the client through
    any network interface:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个**虚拟IP地址**（**VIP地址**），这使得负载均衡成为可能，并且客户端可以通过任何网络接口访问应用程序：
- en: '[PRE121]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Finally, we''re going to configure ILB using the round-robin algorithm by running
    the following command:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将通过运行以下命令配置ILB，使用轮询算法：
- en: '[PRE122]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Some options of this command are as follows:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的一些选项如下：
- en: '`-e`: This enables a rule'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-e`：此选项启用规则'
- en: '`-p`: This makes the rule persistent across a reboot'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p`：此选项使得规则在重启后仍然有效'
- en: '`-i`: This specifies an incoming package'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`：此选项指定传入数据包'
- en: '`vip`: This is the virtual IP address (the connection point)'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vip`：这是虚拟IP地址（连接点）'
- en: '`port`: This is the virtual IP address port'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`：这是虚拟IP地址端口'
- en: '`-m`: This specifies the keys that describe how to handle a packet'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m`：此选项指定描述如何处理数据包的关键字'
- en: '`lbalg`: This is the load-balance algorithm'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lbalg`：这是负载均衡算法'
- en: '`type`: This is the ILB topology'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：这是ILB拓扑'
- en: 'This recipe doesn''t use dynamic routing; hence, it''s necessary to include
    a static route in each backend server manually in order to return all answers
    to the ILB server:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 该配方不使用动态路由；因此，必须手动在每个后端服务器中添加静态路由，以便将所有响应返回给ILB服务器：
- en: '[PRE123]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The test of the ILB setup is performed through a browser pointing to the ILB
    server (`http://192.168.1.220:8080`), and it confirms that the result of the recipe
    is the following screenshot:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: ILB设置的测试是通过浏览器访问ILB服务器（`http://192.168.1.220:8080`）进行的，并确认该配方的结果如以下截图所示：
- en: '![How to do it…](img/00020.jpeg)'
  id: totrans-454
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00020.jpeg)'
- en: 'After a short time (60 seconds), we try to access the same address again:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在短暂的时间（60秒）后，我们再次尝试访问相同的地址：
- en: '![How to do it…](img/00021.jpeg)'
  id: totrans-456
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00021.jpeg)'
- en: Wonderful! The ILB recipe works perfectly!
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！ILB配方完美运行！
- en: 'There are other educational details here. For example, it''s possible to gather
    the rules'' details in the command line by executing the following command:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有其他的教育细节。例如，通过执行以下命令可以在命令行中获取规则的详细信息：
- en: '[PRE124]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The statistics (sampled every two seconds) can be presented by executing the
    following command:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 统计信息（每两秒采样一次）可以通过执行以下命令来显示：
- en: '[PRE125]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Here, note the following:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，请注意以下几点：
- en: '`PKT_P`: These are processed packets'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PKT_P`：这些是已处理的数据包'
- en: '`BYTES_P`: These are processed bytes'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BYTES_P`：这些是已处理的字节'
- en: '`PKT_U`: These are unprocessed packets'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PKT_U`：这些是未处理的数据包'
- en: '`BYTES_U`: These are unprocessed bytes'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BYTES_U`：这些是未处理的字节'
- en: '`PKT_D`: These are dropped packets'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PKT_D`：这些是丢弃的数据包'
- en: '`BYTES_D`: These are dropped bytes'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BYTES_D`：这些是丢弃的字节'
- en: Great! Although the ILB configuration is complete, we can add or remove new
    backend servers anytime without having to stop ILB or disrupt any connection using
    the `ilbadm add-server` and `ilbadm remove-server` commands. This feature is possible
    only when configuring NAT ILB. Moreover, another alternative is to stick the connection
    from the same client to the same server (session persistence) using the `–p` option
    and by specifying the `pmask` suboption.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！尽管ILB配置已完成，但我们可以随时通过`ilbadm add-server`和`ilbadm remove-server`命令添加或删除新的后端服务器，而无需停止ILB或中断任何连接。此功能仅在配置NAT
    ILB时可用。此外，另一种选择是使用`–p`选项并通过指定`pmask`子选项来将来自同一客户端的连接绑定到同一服务器（会话保持）。
- en: The half-NAT ILB setup provides you with the capacity to prevent new connections
    from being completed on a disabled server when there's a plan to execute the maintenance
    of this disabled server. A very good detail is that we deployed a single port
    (`8080`) to receive a new connection to the VIP address. Nevertheless, it would
    be possible to use several ports (`8080`-`8089`, for example) in order to balance
    connections among them using TCP or UDP.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 半NAT ILB设置使您能够在计划对禁用的服务器进行维护时，防止新的连接在该服务器禁用时完成。一个非常好的细节是我们部署了一个端口（`8080`）来接收对VIP地址的新连接。不过，实际上可以使用多个端口（例如`8080`-`8089`）来通过TCP或UDP在它们之间平衡连接。
- en: 'There are other alternatives that are worth mentioning:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些值得一提的其他选择：
- en: '`conn-drain`: This is used in the NAT ILB scenario; it''s a kind of timeout.
    After this time, the server''s connection state is removed as well as the respective
    rule. The default behavior for TCP is that connections remain until they are terminated,
    whereas the UDP connection is kept until the idle timeout time.'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn-drain`：这是在 NAT ILB 场景中使用的，它是一种超时设置。经过此时间后，服务器的连接状态会被移除，以及相应的规则。TCP 的默认行为是连接保持到终止，而
    UDP 连接则会保持直到空闲超时。'
- en: '`nat-timeout`: This value establishes the upper time limit for a connection
    (60 seconds for UDP and 120 seconds for TCP) to be killed and removed.'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nat-timeout`：此值设定了连接的最大超时时间（UDP 为 60 秒，TCP 为 120 秒），当超时后，连接会被终止并移除。'
- en: '`persist-timeout`: This is only used when persistent mapping is enabled, and
    it works like a time limit (the default is 60 seconds) in order to remove the
    mapping. At the end, the persistent mapping will be lost after the time limit.'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`persist-timeout`：此项仅在启用持久映射时使用，它类似于时间限制（默认值为 60 秒），用于删除映射。最终，持久映射将在超时后丢失。'
- en: 'To show how these options can be used, disable and remove the existing rule
    and afterwards, create a new rule with some additional parameters:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示这些选项的使用方法，请禁用并移除现有规则，然后创建一个带有一些附加参数的新规则：
- en: '[PRE126]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: This example uses a port range (`8080` to `8099`) by permitting any client using
    TCP to connect to any port in this range and specific parameters that control
    the timeout values explained previously. Any setup should be performed according
    to the applications that run in the backend servers.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例使用端口范围（`8080` 到 `8099`），允许任何使用 TCP 的客户端连接到该范围内的任意端口，并设置了之前解释的控制超时值的特定参数。任何设置都应根据后台服务器中运行的应用程序来执行。
- en: 'Erasing all ILB configuration can be done by executing the following commands:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过执行以下命令来删除所有 ILB 配置：
- en: '[PRE127]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: An overview of the recipe
  id: totrans-480
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配方概览
- en: ILB is a fantastic feature of Oracle Solaris 11 that creates the load balance
    for layer 3 and 4 and helps distribute the client requests over backend servers.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: ILB 是 Oracle Solaris 11 的一项极佳功能，它在第 3 层和第 4 层创建负载均衡，并帮助将客户端请求分发到后台服务器。
- en: References
  id: totrans-482
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '*Managing Oracle Solaris 11.1 Network Performance* at [http://docs.oracle.com/cd/E26502_01/html/E28993/preface-1.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28993/preface-1.html#scrolltoc)'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*管理 Oracle Solaris 11.1 网络性能* 参见 [http://docs.oracle.com/cd/E26502_01/html/E28993/preface-1.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28993/preface-1.html#scrolltoc)'
- en: '*Oracle Solaris Administration: Network Interfaces and Network Virtualization*
    at [http://docs.oracle.com/cd/E23824_01/html/821-1458/docinfo.html#scrolltoc](http://docs.oracle.com/cd/E23824_01/html/821-1458/docinfo.html#scrolltoc)'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Oracle Solaris 管理：网络接口与网络虚拟化* 参见 [http://docs.oracle.com/cd/E23824_01/html/821-1458/docinfo.html#scrolltoc](http://docs.oracle.com/cd/E23824_01/html/821-1458/docinfo.html#scrolltoc)'
- en: '*Working With DHCP in* *Oracle Solaris 11.1* at [http://docs.oracle.com/cd/E26502_01/html/E28991/dhcp-overview-1.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28991/dhcp-overview-1.html#scrolltoc)'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Oracle Solaris 11.1 中使用 DHCP* 参见 [http://docs.oracle.com/cd/E26502_01/html/E28991/dhcp-overview-1.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28991/dhcp-overview-1.html#scrolltoc)'
- en: '*Oracle Solaris Administration: IP Services* at [http://docs.oracle.com/cd/E23824_01/html/821-1453/toc.html](http://docs.oracle.com/cd/E23824_01/html/821-1453/toc.html)'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Oracle Solaris 管理：IP 服务* 参见 [http://docs.oracle.com/cd/E23824_01/html/821-1453/toc.html](http://docs.oracle.com/cd/E23824_01/html/821-1453/toc.html)'
- en: '*Integrated Load Balancer Overview* at [http://docs.oracle.com/cd/E23824_01/html/821-1453/gijjm.html#scrolltoc](http://docs.oracle.com/cd/E23824_01/html/821-1453/gijjm.html#scrolltoc)'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*集成负载均衡器概览* 参见 [http://docs.oracle.com/cd/E23824_01/html/821-1453/gijjm.html#scrolltoc](http://docs.oracle.com/cd/E23824_01/html/821-1453/gijjm.html#scrolltoc)'
- en: '*System Administration Commands* at [http://docs.oracle.com/cd/E26502_01/html/E29031/ilbadm-1m.html#REFMAN1Milbadm-1m](http://docs.oracle.com/cd/E26502_01/html/E29031/ilbadm-1m.html#REFMAN1Milbadm-1m)'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*系统管理命令* 参见 [http://docs.oracle.com/cd/E26502_01/html/E29031/ilbadm-1m.html#REFMAN1Milbadm-1m](http://docs.oracle.com/cd/E26502_01/html/E29031/ilbadm-1m.html#REFMAN1Milbadm-1m)'
- en: '*Configuration of Integrated Load Balancer* at [http://docs.oracle.com/cd/E23824_01/html/821-1453/gijgr.html#scrolltoc](http://docs.oracle.com/cd/E23824_01/html/821-1453/gijgr.html#scrolltoc)'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*集成负载均衡器的配置* 参见 [http://docs.oracle.com/cd/E23824_01/html/821-1453/gijgr.html#scrolltoc](http://docs.oracle.com/cd/E23824_01/html/821-1453/gijgr.html#scrolltoc)'

- en: Chapter 3. Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Playing with Reactive Network Configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet Protocol Multipathing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the link aggregation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring network bridging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring link protection and the DNS Client service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the DHCP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Integrated Load Balancer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's needless to say that a network card and its respective network configuration
    are crucial for an operating system such as Oracle Solaris 11\. I've been working
    with Oracle Solaris since version 7, and its network setup was always very simple,
    using files such as `/etc/hostname.<interface>`, `/etc/hosts`, `/etc/defaultrouter`,
    `/etc/resolv.conf`, and `/etc/hostname`. At that time, there wasn't anything else
    apart from these files, and this was very suitable because configuring a network
    takes only a few minutes. On the other hand, there wasn't any flexibility when
    the network configuration had to be changed. Moreover, at that time, there weren't
    any wireless interfaces on portable computers, and Oracle Solaris only worked
    with SPARC processors. That time has passed.
  prefs: []
  type: TYPE_NORMAL
- en: This network architecture was kept until Oracle Solaris 10 even when hundreds
    of modifications and new features were introduced on Oracle Solaris 10\. Now,
    in Oracle Solaris 11, there are new commands and different methods to set up your
    network. Furthermore, there are many interesting technologies that have improved
    since the previous version of Oracle Solaris, and some of them are included in
    Oracle Solaris 11.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we're going to learn about many materials related to Oracle
    Solaris 11 as well as advanced administration.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A fundamental point must be highlighted—during all examples shown here, I assume
    that there's a DHCP server on the network. In my case, my DHCP server is provided
    by a D-Link wireless router. Don't forget this warning!
  prefs: []
  type: TYPE_NORMAL
- en: Playing with Reactive Network Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This discussion is probably one of the more interesting topics from Oracle Solaris
    11 and is also one of the most complex.
  prefs: []
  type: TYPE_NORMAL
- en: Some years ago, Oracle Solaris had only the SPARC version, and wireless networks
    were absent or rare. Starting with the release of Oracle Solaris 10, the use of
    Oracle Solaris on notebooks has been growing year after year. During the same
    time, wireless networks became popular and everything changed. However, this mobility
    brought with it a small problem with the network configuration. For example, imagine
    that we have a notebook with Oracle Solaris 11 installed and some day there's
    a need to connect to four different networks—home1, home2, work, and university—in
    order to read e-mails or access the Internet. This would be crazy because for
    each one of these environments, we would have to change the network configuration
    to be able to connect to the data network. Worse, if three out of the four networks
    require a manual network configuration (IP address, mask, gateway, name server,
    domain, and so on), we'd lose so much time in manual configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Oracle Solaris 11 has an excellent feature that manages **Reactive Network Configuration**
    (**RNC**). Basically, using RNC, a user can create different network configurations,
    and from a user request or event (turning a wireless card on or off, leasing and
    renewing a DHCP setting, connecting or disconnecting a cable, and so on), it's
    possible to change the network configuration quickly. All of this is feasible
    only because RNC was implemented based on a key concept named profiles, which
    can be classified as fixed or reactive, and they have many properties that help
    us configure the network that is appropriated.
  prefs: []
  type: TYPE_NORMAL
- en: There are two types of profiles—**Network Configuration Profiles** (**NCP**)
    and **Location Profiles**—and both are complementary. An NCP (a kind of container)
    is composed of **Network Configuration Units** (**NCUs**) that are configuration
    objects, and they all have properties that are required to configure the network.
    Additionally, there's a third type of profile named **External Network Modifiers**
    (**ENMs**) that are used with VPNs, which require a special profile that is able
    to create its own configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many terms or short concepts up to this point, so let''s summarize
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RNC**: This stands for Reactive Network Configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profiles**: There are two classes: fixed or reactive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NCP**: This stands for Network Configuration Profile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location Profile**: This is a profile that brings complementary information
    to NCP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NCU**: This stands for Network Configuration Unit and are what makes up an
    NCP profile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EMN**: This stands for External Network Modifier and is another kind of profile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning to the two main profiles (**NCP** and **Location**), the role of NCP
    is to provide the basic network configuration for interfaces, and the role of
    Location profiles is to complete the information and configuration provided by
    NCP.
  prefs: []
  type: TYPE_NORMAL
- en: Some useful configurations given by the Location profile are the **IP Filter**
    settings, domain, DNS configuration, and so on. The default Location profile named
    **NoNet** is applied to the system when there is no valid IP address. When one
    of the network interfaces gets a valid IP address, the **Automatic Location**
    profile is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of **NCP** profile. The first type is the `Automatic` profile
    that is read-only, has your configuration (more about this later) hanged when
    a network device is added or removed, uses the DHCP service, always gives preference
    to an Ethernet card instead of a wireless card, is composed of one **Link NCU**
    (offered in several flavors: physical link, aggregation, virtual NIC, vlans, and
    so on), and has an **Interface NCU** inside it.'
  prefs: []
  type: TYPE_NORMAL
- en: The second type is the user-defined profile that must and can be set up manually
    (so it can be edited) according to the user goals.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, you need two virtual machines (VirtualBox or VMware)
    with Oracle Solaris 11 installed, each one with 4 GB RAM and four network interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two key services related to RNC: `svc:/network/netcfg:default` and
    `svc:/network/location:default`. Both services must be enabled and working, and
    we have to pay attention to the `svc:/network/location:default` dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'All profiles are listed using the `netcfg` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is a confirmation of what we've seen in the introduction of this section.
    There's an NCP profile named `Automatic`, which is related to the DHCP service,
    and another NCP profile that's associated to a user-defined NCP profile named
    `DefaultFixed`. Moreover, there are two locations—`Automatic`, which is applied
    to the system when at least one network interface has a valid IP address, and
    `NoNet`, which is enforced when no network card has received a valid IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nonetheless, there is a lot of additional information that we can get from
    each of these profiles by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the network interfaces and their respective IP address objects are bound
    to the `Automatic` NCP profile, while nothing is assigned to the `DefaultFixed`
    NCP profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, tons of information can be taken from location profiles by
    running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Nevertheless, it can be easier to do this interactively sometimes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can realize, many properties can be set to customize our system. Likewise,
    all NCP and NCU are listed by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If there''s a demand for more details, these can be obtained by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of listing all profiles (NCP and Location), it is possible to list
    only a class of them by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Nice! All commands have worked very well up to now. Therefore, it''s time to
    create a new profile using the `netcfg` command. To accomplish this task, we''re
    going to create an NCP named `hacker_profile` with two NCUs inside it, followed
    by a loc profile named `work`. Therefore, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'List current configurations by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When the new NCP and LOC profiles are enabled, everything changes. Let''s check
    this by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `Automatic` NCP profile has been disabled and the loc profile `Automatic`
    has gone offline. Then, the `hacker_profile` NCP profile has changed to the `online`
    status and the `work` Loc profile has also changed to the `online` status. Additionally,
    all network interfaces have disappeared except `net2`, because there's only one
    network interface NCU configured (`net2`) in the `hacker_profile` NCP profile.
    The other good fact is that this configuration is persistent, and we can reboot
    the machine (`init 6`) and everything will continue working according to what
    we've configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we had committed any mistake by assigning a property with a wrong value,
    it would be easy to correct it. For example, the name servers (the `dns-nameservice-servers`
    property) can be altered by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After all these long tasks, it''s recommend that you save the new profiles,
    `hacker_profile` and `work`. Therefore, to make a backup of them, execute the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Reverting the system to the old `Automatic` profiles (NCP and Loc) can be done
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, it would be appropriate to destroy the created NCP and loc profiles
    by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Oracle Solaris 11 is terrific!
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is no doubt that RNC makes the life of an administrator easier. Administration,
    configuration, and monitoring are done through the command line and everything
    is configured using only two commands: `netadm` and `netcfg`. The `netadm` command
    role enables, disables, and lists profiles, while the `netcfg` command role creates
    profile configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: Internet Protocol Multipathing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Internet Protocol Multipathing** (**IPMP**) is a great technology that was
    introduced a long time ago (originally in Oracle Solaris 8), and since then, it
    has been improving a lot up to the current Oracle Solaris 11\. In a general way,
    IPMP offers fault-tolerance for the network interfaces scheme, thus eliminating
    any single point of failure. Moreover, it provides an increase in the network
    bandwidth for outbound traffic by spreading the load over all active interfaces
    in the same group. This is our start point; to play with IPMP, an IPMP group interface
    must be created and all of the data IP addresses should be assigned to this IPMP
    group interface. Therefore, at the end, all network interfaces that will be used
    with IPMP must have an IPMP group assigned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To continue the explanation, the following is a quick example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Group interface: `hacker_ipmp0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interface 1: `net0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'test IP (`test_net0`): `192.168.1.61`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Interface 2: `net1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'test IP (`test_net1`): `192.168.1.71`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: In the previous example, we have two interfaces (`net0` and `net1`) that are
    used to send/receive the normal application data as usual. Nevertheless, the data
    IP addresses aren't assigned to the `net0` or `net1` interfaces, but they are
    assigned to the IPMP group interface that contains both physical network interfaces.
    The test IP addresses from the `net0` and `net1` interfaces (`192.168.1.61` and
    `192.168.1.71`, respectively) are used by the `in.mpathd` IPMP daemon to check
    whether the interface is healthy.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two possible configurations when deploying IPMP: active-active and
    active-passive. The former configuration works with all interfaces that transmit
    data, and the latter scheme works with at least one spare interface. Most of the
    time, you will see companies work with the active-active configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: What's the basic idea of IPMP? If one interface fails (or the cable is disconnected),
    the system continues transmitting and receiving data without any problems. Why?
    Because in the IPMP group, there is more than one interface that accomplishes
    the network job, and if any of them fails, any other interface resumes the work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Can IPMP monitor the interface using the assigned data IP address? No, it can''t;
    because, if `in.mpathd` used the data IP address to monitor the interface, there
    could be a delay in the monitoring process. By the way, is the test IP address
    necessary? It isn''t, really. The IPMP has two monitoring methods: probe-based
    detection (using a test IP address) and link-based (if it''s supported by the
    interface). Personally, I like probe-based monitoring (using a test IP address)
    because I''ve already faced some problems with the link-based method, and I think
    probe-based monitoring is more reliable. However, if the interface supports the
    link-based method, then both methods will be used. Anyway, when using probed monitoring,
    the `in.mpathd` daemon continues to monitor the failed interface to check when
    it comes alive again.'
  prefs: []
  type: TYPE_NORMAL
- en: Finishing the theory, the active-standby configuration is very similar to active-active,
    but the standby interface doesn't transmit any data packets while the active network
    interfaces are good and working. If any active network interfaces go to the `failed`
    status, the standby network interface will be activated, and it will start to
    send data packets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires two virtual machines (VirtualBox or VMware Workstation)
    with Oracle Solaris 11 installed, 4 GB memory, and four network interfaces in
    the first virtual machine. For the second virtual machine, just one interface
    is enough.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe will be based on a similar scenario presented previously, but four
    interfaces will be used where all of them are active:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Group: `hacker_ipmp0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data IP addresses: `192.168.1.50`, `192.168.1.60`, `192.168.1.70`, and `192.168.1.80`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interface 1: `net0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'test IP (`test_net0`): `192.168.1.51`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Interface 2: `net1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'test IP (`test_net1`): `192.168.1.61`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Interface 3: `net2`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'test IP (`test_net2`): `192.168.1.71`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Interface 4: `net3`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'test IP (`test_net3`): `192.168.1.81`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Like every feature in Oracle Solaris 11, IPMP is based on a **Service Management
    Facility** (**SMF**) service that must be online (default) and can be verified
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, the behavior of the IPMP daemon is based on the `mpathd` configuration
    file that is in the `default` directory under `/etc/`. Additionally, this configuration
    file has default content that covers any usual environment that does not demand
    any special care with delay in responses. Execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Well, it''s time to move forward. Initially, let''s list what interfaces are
    available and their respective status by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following step, all IP address objects will be deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Returning to the monitoring commands, we shouldn''t see all these IP address
    objects anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything is okay up to now. Thus, before starting to configure IPMP, it''s
    appropriate to change the NCP profile from `Automatic` to `DefaultFixed` because
    the IPMP setup is going to use fixed IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! It''s interesting to realize that there is no IP address object on the
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The game begins. To make the administration more comfortable, all network links
    are going to be renamed for them to be more easily recognizable, and shortly thereafter,
    new IP address objects will be created too (for a while, without any IP address
    value):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it''s time to create the IPMP interface group (`hacker_ipmp0`) and assign
    all interfaces to this group. Pay attention to the fact that there are no IP addresses
    on any network interface yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Because there is no data or test IP address yet, all probe operations are disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, all main data IP addresses and test IP addresses will be added to
    the IPMP configuration by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To check whether our previous `ipadm` commands are working, execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything went well, the IPMP interface group and all IP addresses should
    be `ok` and `up`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Thanks to each test IP address, all interfaces should be being monitored by
    the `in.mpathd` daemon (from the IPMP service), and this probe information is
    shown by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You might notice some strange IPs: `192.168.1.112`, `192.168.1.113`, and `192.168.1.188`.
    Where do these addresses come from? The IPMP service makes tests and checks (probes)
    to assure that the data IPs are working as expected by using the multicast protocol,
    and it registers the RTT (round trip) for a packet to go and return from a discovered
    host. In this particular case, IPMP has reached some machines on my private local
    network and a printer.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, according to the previous command, it is possible to confirm whether
    all IPMP network interfaces are good by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'These flags from the `ipmpstat –i` command deserve a quick explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`m`: This is to send and/or receive IPv4 multicast packets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`M`: This is to send and/or receive IPv6 multicast packets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b`: This is chosen to send and/or receive IPv4 broadcast packets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`i`: This means inactive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: This means standby'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d`: This means down'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Likewise, information about test IP addresses and hosts that were used to send
    multicast packets are presented in a simple way, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Is it over? No. How can we know whether the IPMP configuration is
    working? The best way is to make a network fail. To simulate this scenario, we
    must first shut down Oracle Solaris 11 by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: In the next step, we must choose our virtual machine, click on the **Settings**
    button, and go to **Network**. There, for the **Attached to** option, change the
    first interface to **Not attached**.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This trick will simulate a failure on the interface and the interface won''t
    be presented for Oracle Solaris 11\. Then, the virtual machine (`solaris11-1`)
    must be turned on again, and as expected, the system works very well. This can
    be confirmed by using all the previous network and IPMP commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, the first interface (`net0_myipmp0`) fails during the probe test.
    Moving forward, the same failure will be shown in other commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The IPMP group status is degraded because one of its interfaces (`net0_myipmp0`)
    is missing. Other IPMP commands can confirm this fact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Take care—on the first view, it could seem that there''s something wrong, but
    in fact, there isn''t. It''s usual for some people to guess that the IP address
    is bound to a specific interface, but this isn''t true. All data IP addresses
    are assigned to the IPMP group interface, and IPMP will try to use the best interface
    for outbound connections. Nonetheless, the best and final test can be performed
    using another machine (`solaris11-2`), and from there, try to ping all data IP
    addresses from the first machine (`solaris11-1`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Amazing! Oracle Solaris 11 wins again! If we shut down the first virtual machine
    once more (`shutdown –y –g0` or `poweroff`), return the interface to its old configuration
    (**Settings** | **Network** | **Adapter 1** | **Attached to: Bridged Network**)
    and turn on the `solaris11-1` virtual machine again; we''re going to confirm that
    everything is `ok`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Fantastic! However, let's execute another test. The goal is to convert an active
    interface into a standby interface (the active-passive configuration). Thus, to
    proceed, we should delete one of the IP addresses that carries data and is assigned
    to a standby network interface. If it's not deleted, it wouldn't make any difference.
    Relax! The following procedure is a piece of cake.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to change the `standby` property from the interface to `on`
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether the last command worked as expected by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'As we''ve mentioned, a data IP address object (the forth) will be deleted by
    running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The `net3_myipmp3` interface is marked as deleted (its respective interface
    is put inside the parentheses):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether the `net3_myipmp3` interface doesn''t appear anymore by running
    the following three commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `is` flag on `net3_myipmp3` describes this interface as inactive
    and working in the standby mode. All tests can be performed in the same way using
    this active-passive scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, we need to return everything as it was before this section
    in order to prepare for the next section, which explains how to set up link aggregation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We are done with IPMP! Oracle Solaris 11 is the best operating system in the
    world!
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main concept that must always be remembered is that the IPMP frame is suitable
    for eliminating a single point of failure. Although it is able to create the outbound
    load balance, the real goal is the high availability network.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the link aggregation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a rough comparison, we could think about link aggregation (802.3ad LACP)
    as a network technology layer 2 (Datalink), which acts as the inverse of IPMP
    (network technology layer 3: IP). While IPMP is concerned with offering network
    interface fault tolerance—eliminating a single point of failure and offering a
    higher outbound throughput as a bonus—link aggregation works as the old "trunk"
    product from previous versions of Oracle Solaris and offers a high throughput
    for the network traffic and, as a bonus, also provides a fault tolerance feature
    so that if a network interface fails, the traffic isn''t interrupted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Summarizing the facts:'
  prefs: []
  type: TYPE_NORMAL
- en: IPMP is recommended for fault tolerance, but it offers some output load balance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link aggregation is recommended for increasing the throughput, but it also offers
    fault tolerance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The link aggregation feature puts two or more network interfaces together and
    administers all of them as a single unit. Basically, link aggregation presents
    performance advantages, but all links must have the same speed, working in full
    duplex and point-to-point modes. An example of aggregation is **Aggregation_1**
    | net0, net1, net2, and net3.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end, there''s only one logic object (Aggregation_1) that was created
    on the underlying four network interfaces (net0, net1, net2, and net3). These
    are shown as a single interface, summing the strengths (high throughput, for example)
    and keeping them hidden. Nonetheless, a question remains: how are the outgoing
    packets delivered and balanced over the interfaces?'
  prefs: []
  type: TYPE_NORMAL
- en: 'An answer to this question is named Aggregation and Load Balance Policies,
    which determine the outgoing link by hashing some values (properties) and are
    enumerated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**L2 (Networking)**: In this, the outgoing interface is chosen by hashing the
    MAC header of each packet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**L3 (Addressing)**: In this, the outgoing interface is chosen by hashing the
    IP header of each packet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**L4 (Communication)**: In this, the outgoing interface is chosen by hashing
    the UDP and TCP header of each packet. This is the default policy. A very important
    note is that this policy gives the best performance, but it isn''t supported across
    all systems and it isn''t fully 802.3ad-compliant in situations where the switch
    device can be a restrictive factor. Additionally, if the aggregation scheme is
    connected to a switch, then the **Link Aggregation Control Protocol** (**LACP**)
    must be supported by the physical switch and aggregation, given that the aggregation
    can be configured with the following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**off**: This is the default mode for the aggregation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**active**: This is the mode where the aggregation is configured and where
    it generates LACP Data Units at regular intervals'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**passive**: This is the mode where the aggregation is configured and only
    generates LACP Data Units when it receives one from the switch, obliging both
    sides (the aggregation and switch) to be set up using the passive mode'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The only disadvantage of normal link aggregation (known as trunk link aggregation)
    is that it can''t span across multiple switches and is limited to working with
    only one switch. To overcome this, there''s another technique of aggregation that
    can span over multiple switches named **Data Link Multipathing** (**DLMP**) aggregation.
    To understand DLMP aggregation, imagine a scenario where we have the following
    in the same system:'
  prefs: []
  type: TYPE_NORMAL
- en: Zone 1 with vnicA, vnicB, and vnicC virtual interfaces, which are connected
    to NIC1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zone 2 with vnicD and vnicE virtual interfaces, where both of them are connected
    to NIC2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NIC1 is connected to **Switch1** (**SW1**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NIC2 is connected to **Switch2** (**SW2**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is another way of representing this:'
  prefs: []
  type: TYPE_NORMAL
- en: Zone1 | vnicA,vnicB,vnicC | NIC1 | SW1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zone 2 | vnicD,vnicE | NIC2 | SW2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using trunk link aggregation, if the NIC1 network interface went to `down`,
    the system could still fail over all traffic to NIC2, and there wouldn't be any
    problem if both NIC1 and NIC2 were connected to the same switch (this isn't the
    case).
  prefs: []
  type: TYPE_NORMAL
- en: However, in this case, everything is worse because there are two switches connected
    to the same system. What would happen if Switch1 had gone down? This could be
    a big problem because Zone1 would be isolated. Trunk link aggregation doesn't
    support spanning across switches; therefore, there wouldn't be any possibility
    of failing over to another switch (Switch2). Concisely, Zone1 would lose network
    access.
  prefs: []
  type: TYPE_NORMAL
- en: This is a perfect situation to use DLMP aggregation because it is able to span
    across multiple switches without requiring any special configuration performed
    in the switches (this is only necessary when both are in the same broadcast domain).
    Even if the **Switch1** (**SW1**) port goes to `down`, Oracle Solaris 11 is able
    to fail over all the vnicA, vnicB, and vnicC flow from Zone1 to NIC2, which uses
    a different switch (SW2) port. Briefly, Zone1 doesn't lose access to the network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, you must have two virtual machines (VirtualBox or VMware)
    with Oracle Solaris 11 installed and have 4 GB RAM and four network interfaces
    in the first virtual machine. The second machine can have just one network interface.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see what we have in the system by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'There are four interfaces that get their IP address from a local DHCP service.
    Therefore, to configure the link aggregation, it''s necessary to delete all IP
    object addresses from all interfaces and verify their status by running the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Nice. Everything is working. This time, the link aggregation (the trunk link
    aggregation) can be set up. Let''s take all of the interfaces to create the aggregation
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: root@solaris11-1:~# **dladm create-aggr -l net0 -l net1 -l net2 -l net3 super_aggr_0**
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether the aggregation was created, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'More details about the aggregation can be gathered by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The `super_aggr_0` aggregation was created, and it works like a single network
    interface. As we mentioned previously, the default aggregation type is `trunk`
    and the default policy is L4 (Communication). For curiosity, if we wanted to create
    a DMLP link aggregation, the command would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it''s time to create an IP object on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The `super_aggr_0` aggregation is still down because no IP address is assigned
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'However, everything is `ok` at the layer 2 level (Datalink):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! The definitive step is to assign an IP address to the aggregation object,
    which is `super_aggr_0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'As we''ve learned previously, all interfaces are hidden and only the link aggregation
    interface is shown and presented to an external network. To collect more information
    about the aggregation, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'A recommended way to verify whether everything is working is to try to send
    and receive packets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also monitor the link aggregation activity by using the `netstat` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'We have almost finished our learning (not yet!). To change the link aggregation
    policy (for example, from L4 to L2), we execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Our example of link aggregation was created using four interfaces. However,
    an interface can be either inserted or removed anytime. First, we have to know
    which interfaces are part of the aggregation by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it''s easy to remove an interface from aggregation by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'To confirm that the previous command worked, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding an interface follows almost the same syntax, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can remove the aggregation in order to prepare our environment
    for the next section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Excellent! We've completed our study of link aggregation.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we learned about both types of link aggregation. The main
    advantage is the performance because it puts all interfaces together, hides them,
    and presents only the final logical object: the link aggregation object. For external
    hosts, this works as there was only a single interface on the system. Furthermore,
    we saw how to monitor, modify, and delete aggregations.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring network bridging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Oracle Solaris 11 provides a wonderful feature that offers the possibility
    to deploy network bridges (layer 2, Datalink) that connect separated network segments
    and share the broadcast domain without the requirement of a router using a packet-forwarding
    mechanism: Network 1 | Bridge | Network 2.'
  prefs: []
  type: TYPE_NORMAL
- en: The real effect of configuring and using Network Bridging is that all machines
    are able to communicate with each other as if they were on the same network. However,
    as a bridge works in a promiscuous mode, it uses some techniques in order to prevent
    creating loops such as **Spanning Tree Protocol** (**STP**), which is used with
    switches, and **Transparent Interconnect of Lots of Links** (**TRILL**), which
    has a small advantage when compared to STP because it always uses the short path
    to forward packages without shutting down a physical link as STP does.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To follow this recipe, it''s necessary to create a complex setup. We must have
    three virtual machines (VirtualBox or VMware, but I''m showing you the steps for
    VirtualBox) with Oracle Solaris 11 and 2 GB each. The first machine must have
    two network interfaces and the other two must have only one interface. For the
    first virtual machine (`solaris11-1`), network adapters must have the following
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adapter 1** should have **Attached to** set to **Bridged Adapter**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adapter 2** should have **Attached to** set to **Internal Network**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second machine (`solaris11-2`) must have the following network configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adapter 1** should have **Attached to** set to **Internal Network**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The third virtual machine must have the following network configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adapter 1** should have **Attached to** set to **Bridged Adapter**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, in the VirtualBox environment, select the `solaris11-1` virtual machine,
    go to the **Machine** menu, and select **Settings**. When the configuration screen
    appears, go to **Network**, and in the **Adapter 1** tab, change the **Attached
    to** configuration to **Bridged Adapter**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the same screen, go to **Adapter 2** and configure the **Attached to** property
    to **Internal Network**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, on VirtualBox''s first screen, select the `solaris11-2` virtual machine,
    go to the **Machine** menu, and select **Settings**. When the configuration screen
    appears, go to **Network**, and in the **Adapter 1** tab, change the **Attached
    to** configuration to **Internal Network**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Repeat the same steps that were performed for the previous machine for the
    third system and change the **Attached to** value to **Bridge Adapter**, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The scheme for this recipe is `solaris11-2` | `solaris11-1` | `solaris11-3`.
    Let''s configure the bridge (`solaris11-1`). On the `solaris11-1` virtual machine,
    list the current network configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, we know that this machine has two network interfaces; both are `up`
    and one of them has an IP address. Since this IP address comes from the last recipe,
    the following commands are used to erase this existing IP address and create a
    new one for the `net0` and `net1` network interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Assign an IP address for each network interface (`net0` and `net1`) by executing
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the IP assignment is working, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Great! We assigned one IP address (`192.168.1.65/24`) for the `net0/24` network
    interface and another one (`192.168.10.38/24`) for the `net1` network interface.
    As we can see, both are in different networks so they aren't able to communicate
    with each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `solaris11-3` virtual machine, let''s also list the current network
    configuration, delete it, and create a new one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Good! This virtual machine can reach the first one (`solaris11-1`) because both
    are on the same network.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `solaris11-2` virtual machine, the same steps are going to be executed,
    erasing the current network configuration and creating a new one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: This is really good. This virtual machine (`solaris11-2`) is on a different
    network (**Internal Network**) than the other two virtual machines and there's
    a router that isn't able to reach them. We expected this exact behavior!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time! Returning to the `solaris11-1` virtual machine, make a bridge
    (layer 2) between the `net0` and `net1` network interfaces in the following steps.
    First, verify that there is a bridge on the system by executing the following
    two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'There is no bridge, so it''s time to create the bridge (between the `net0`
    and `net1` network interfaces) by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the bridge was created successfully, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Gathering some details from `baybridge` is done by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'That sounds good. Both network interfaces from the `solaris11-1` virtual machine
    are forwarding and using STP to prevent loops. The next command confirms that
    they are using STP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the bridge configuration has worked, the execution of the most
    important step from this recipe from the `solaris11-2` virtual machine is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Incredible! Previously, we tried to reach the `192.168.1.0` network and we didn't
    achieve success. However, now this is different because the bridge (`baybridge`)
    configured on `solaris11-1` has made it possible. Moreover, there's a big detail—there
    is no router. There's only a bridge.
  prefs: []
  type: TYPE_NORMAL
- en: 'To undo the bridge and return the environment to the initial configuration,
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Logically, we've undone everything, and now it's necessary to change the network
    configuration back from the `solaris11-2` virtual machine to **Network Bridged**.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we learned how to configure, monitor, and unconfigure a bridge,
    which is a layer 2 technology that makes it possible to transmit a packet from
    one network to another without using a router.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring link protection and the DNS Client service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, virtualized systems are growing and spreading very fast, and usually,
    the virtual machines or virtual environments (zones, for example) have full physical
    network access. Unfortunately, this granted network access can compromise the
    system and the entire network if malicious packets originate from these virtual
    environments. It is at this point that Oracle Solaris 11 Link Protection can prevent
    any damage from being caused by these harmful packets that come from virtual environments.
  prefs: []
  type: TYPE_NORMAL
- en: Oracle Solaris 11 has introduced Link Protection to try and prevent several
    types of spoof attacks, such as IP spoofing (when someone masquerades the IP address
    from his/her system with a forged IP address in order to pretend being another
    system, which is very usual during a denial-of-service attack), DHCP spoofing
    (when a rogue DHCP server is attached in the network in order to provide false
    information such as the gateway address, causing all network data flow to go through
    the cracker machine in a classic man-in-the-middle attack), and MAC spoofing (a
    lethal attack in which the MAC address is manipulated, making it possible for
    a cracker to execute a man-in-the-middle attack or even gain access to system
    or network devices that control access using the MAC address). All these attacks
    have the potential to compromise a network or even the whole company.
  prefs: []
  type: TYPE_NORMAL
- en: For appropriate protection against all these attacks, the Link Protection feature
    offers a network interface property named protection, which has some possible
    values that determine the security level. For example, in the case of protection
    against MAC spoofing (the `protection` property value is equal to `mac-nospoof`),
    any MAC address outbound packets (packets that leave the system) must be equal
    to the MAC address from the source network; otherwise, the packet will certainly
    be dropped.
  prefs: []
  type: TYPE_NORMAL
- en: When applying the IP spoofing protection (`ip-nospoof`), any outgoing packet
    (for example, ARP or IP) must have a source address equal to the address offered
    by the DHCP service or equal to the IP list configured in the `allow-ips` property.
    Otherwise, Oracle Solaris 11 drops the packet.
  prefs: []
  type: TYPE_NORMAL
- en: The other two possible values for the `protection` property are `dhcp-nonspoof`
    and `restricted` (which restricts the outgoing packets to only IPv4, IPv6, and
    ARP).
  prefs: []
  type: TYPE_NORMAL
- en: Another relevant subject is how to set up a DNS client on Oracle Solaris 11\.
    Until Oracle Solaris 10, this procedure wasn't integrated with the **Service Management
    Facility** (**SMF**) framework. This has changed with Oracle Solaris 11.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine (VirtualBox or VMware) with Oracle Solaris
    11 installed, 4 GB RAM, one network interface, and access to the Internet. Optionally,
    if the environment has some Oracle Solaris Zones configured, the tests can be
    more realistic.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Link protection must be configured in the global zone. If the protection is
    applied to the physical network interface, all vnics connected to the physical
    network interface will be protected, but the following steps will be performed
    for one vnic only.
  prefs: []
  type: TYPE_NORMAL
- en: 'The link protection configuration is started through a reset (disabling and
    resetting the protection to its default):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'To list the link protection status, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The link protection is still not applied. Therefore, to enable link protection
    against IP spoofing for the network interface `net0`, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, the two configured zones in the system have the IP addresses
    `192.168.1.55` and `192.168.1.66`, respectively, and both of them have virtual
    interfaces (`vnic0` and `vnic1`) connected to the `net0` interface. Then, to allow
    these zones to communicate over the physical network, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify and check the previous command, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s also possible to get some statistics about the link data protection for
    completeness, but we aren''t going to delve into details here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'To disable the link data protection, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Approaching another subject, the DNS Client configuration has changed a lot
    since Oracle Solaris 10\. However, it isn't hard to configure it. It's only different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, this kind of task, which requires us to modify some configuration
    manually, is executed when working on an environment with the NCP profile `DefaultFixed`
    and loc profile `DefaultFixed` because when both profiles are set to `Automatic`,
    DHCP provides the name server configuration and other settings. Therefore, to
    make the next recipe more realistic, the NCP and loc profiles will be altered
    to `DefaultFixed` where every network configuration must be performed manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'As we''ve enabled the `DefaultFixed` configuration, it''s our task to create
    the IP object and assign an IP address to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'To confirm that the previous command is working, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now, in order to change the DNS servers used by the system to look up
    hostnames and IP addresses, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting the DNS domain (`example.com`) and domain search list (`example.com`)
    is done by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting the IPv4 and IPv6 resolution order (first, try to resolve a hostname
    by looking at the `/etc/host` file, and if there is no success, try to resolve
    the hostname on the DNS service), respectively, is executed by the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything that was configured can be verified by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s nice that the executed steps have worked; however, this isn''t enough
    yet. All the DNS configuration up to this point isn''t persistent and doesn''t
    take effect now or till the next system boot. Therefore, the DNS Client service
    must be refreshed (to read its associated configuration file or service configuration
    again) for it to take effect immediately and restarted to make the configuration
    persistent (saved on the disk) and valid for the next system initializations.
    This task can be done by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Eventually, because of any prior random event, the `dns/client` service can
    be disabled, and in this case, we have to enable it by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: A very interesting point is that the `resolv.conf` file (the file that was the
    only point of configuration until Oracle Solaris 10) under `etc` is regenerated
    every time the DNS Client service is restarted. If the administrator modifies
    this file manually, the settings will take place immediately, but the file content
    will be restored from the service configuration in the next system reboot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the name server resolution takes effect only if the following commands
    are executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'The same rule that is applied to the `resolv.conf` file under `etc` is also
    valid for the `nsswitch.conf` file (the file where the order of name resolution
    is configured) under `etc`, which is regenerated during each system boot as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'The final test is to ping a website as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'To configure the default gateway for the system (`192.168.1.1`) and prevent
    the same effect of persistence (settings that are only valid until the next reboot)
    such as that in the DNS client configuration case, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the previous command and confirm the gateway configuration, execute
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we learned about Link Protection to protect against DNS, DHCP,
    and IP spoofing. Additionally, the DNS Client service configuration was presented
    too.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the DHCP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Oracle Solaris 11 includes an open source version of DHCP named **Internet Systems
    Consortium Dynamic Host Configuration Protocol** (**ISC DHCP**), which is a well-known
    client-server service used by most IT administrators. This makes network and IP
    address configuration easier, mainly when there are many machines to be managed
    on a network. Without a DHCP server, the administrator would have to configure
    the IP address, mask, gateway, server name, and other settings on each network
    machine manually, making administration a time-consuming job. When using the DHCP
    service, most network settings are performed in a centralized point and there
    is the possibility of performing a particular configuration for chosen machines.
  prefs: []
  type: TYPE_NORMAL
- en: The DHCP server isn't already installed on Oracle Solaris 11, and it's available
    on the DVD or in the Oracle repository, whereas the DHCP client (`dhcpagent`)
    runs and is included on every default Oracle Solaris 11 and higher installations.
  prefs: []
  type: TYPE_NORMAL
- en: All DHCP operations are based on the broadcast service and are restricted to
    a local network, and each network segment should have its own DHCP server. When
    there are hosts on a network segment (for example, segment A) and there's only
    one DHCP server on another network segment (for example, segment B), it's possible
    to use the DHCP server from segment B through a router using a DHCP relay implementation.
    Oracle Solaris 11 offers the support to configure a DHCP relay as well. However,
    this won't be shown because using a DHCP relay with Oracle Solaris 11 is a rare
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires three virtual machines (VirtualBox or VMware) running Oracle
    Solaris 11 with 4 GB RAM. It is recommended that all machines be on an isolated
    network to prevent any external DHCP server from disturbing our test.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we''ve mentioned, the DHCP server isn''t installed by default; we have to
    install it on the first machine (`solaris11-1`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: As the appropriate packages have been installed, it's time to configure the
    DHCP server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our subnet is `192.168.1.0/24`, so the DHCP server needs to be configured to
    attend this network segment. Copy the `dhcpd.conf.example` template under `etc/inet`
    to `/etc/inet/dhcpd4.conf` and make some changes including the network segment,
    default lease time, domain server names, and default gateway line configuration,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'To make the changes in `dhcp4.conf` under `/etc/inet/` take effect, execute
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve performed the configuration on the DHCP server; now, move to configure
    the DHCP client on the `solaris11-2` system. In order to set up the network interface
    to get the network configuration from our DHCP server, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Perfect! The client machine (`solaris11-2`) has received an IP address, which
    is in the range offered by the DHCP server (`192.168.1.10` to `192.168.1.15`).
    The most important command is `ipadm create-addr -T dhcp net0/v4`, which assigns
    an IP address from the DHCP server.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the DHCP server machine, there''s a file named `dhcp4.leases` that shows
    us the DHCP client lease information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the preceding command, it was allocated an IP address (`192.168.1.10`)
    for the client that holds the MAC address `08:00:27:96:46:f0`. Retuning to the
    `solaris11-2` machine (the DHCP client machine), it''s possible to confirm that
    we are talking about the same virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'At the DHCP client, execute the following command to renew the IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `solaris11-1` server, the renewing event is shown in `/var/db/isc-dhcp/dhcp4.leases`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s test the renew process once more, releasing and leasing a new IP address
    by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Everything is working fine!
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The DHCP server is a very common service and is easy to configure and maintain.
    This DHCP example will be used as a support service for the **Automated Installation**
    (**AI**) service in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Integrated Load Balancer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Certainly, **Integrated Load Balancer** (**ILB**) is one of the most attractive
    features of Oracle Solaris 11 because it provides network layer 3 and 4 with the
    load balance service. Basically, when a client requires a resource from an application
    (for example, a web server), the ILB framework decides which backend host (for
    example, web server A or B) will attend the request. Therefore, the main role
    of ILB is to decide to which backend server (for example, the Apache web server)
    the request will be forwarded. ILB supports two work methods in Oracle Solaris
    11: **Direct Server Return** (**DSR**) and **Network** **Address Translate** (**NAT**).
    In both cases, the ILB framework uses one of four algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Round robin**: This tries to keep an equal statistic distribution over all
    backend servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source IP hash**: In this, the choice of the destination backend server is
    made by hashing the source IP address of the client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source IP port hash**: In this, the choice of the destination backend server
    is made by hashing the source IP and port address of the client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source IP VIP hash**: In this, the choice of the destination backend server
    is made by hashing the source and destination IP address of the client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DSR method allows ILB to receive the request in order to decide which backend
    server (for example, Apache servers) the request will be forwarded to and to make
    the answer from the backend server return directly to the client. Nevertheless,
    if the ILB server is configured as a router, then all answers from backend servers
    can be routed to the client through ILB.
  prefs: []
  type: TYPE_NORMAL
- en: When ILB is configured to use the DSR method, its performance is better than
    NAT and it also shows better transparency because only the destination MAC address
    is changed and the answer returning to the client can bypass the ILB server, as
    we've mentioned previously. Unfortunately, if we try to add a new backend server,
    the connection will be disrupted because the connection is stateless.
  prefs: []
  type: TYPE_NORMAL
- en: 'A scheme about what we''ve mentioned up to now can be viewed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**request**: client | ILB server | backend servers (A or B)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**answer**: backend server | client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**answer (ILB as router)**: backend server | ILB (router) | client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following image (the IP addresses in the image are only an example) also
    describes the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Integrated Load Balancer](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The NAT method (half or full) allows ILB to rewrite all requests by changing
    the destination IP address and—when ILB is working in the NAT full method—by also
    changing the source address by masking the real IP client with the ILB IP address.
    Backend servers think that the request is coming from the ILB server instead of
    coming from the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a scheme that explains this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**request**: client | ILB server (NAT) | backend server (A or B)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**answer**: backend server (A or B) | ILB server (NAT) | client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To make this easier, the following diagram explains the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Integrated Load Balancer](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Unlike DSR, the ILB NAT model requires the ILB server as a default gateway.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow the recipe, we must have four virtual machines (VirtualBox or VMware)
    installed with Oracle Solaris 11 and 4 GB RAM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Personally, I''ve installed all of these virtual machines in VirtualBox and
    their network adapters were configured as **Attached in: Internal Network**. The
    scenario was designed as `solaris11-2` | `solaris11-1` | `solaris11-3`/`solaris11-4`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`solaris11-2` (`net0`): `192.168.1.155`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`solaris11-1` (`net0`): `192.168.1.144`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`solaris11-1` (`net1`): `192.168.5.77`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`solaris11-3` (`net0`): `192.168.5.88`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`solaris11-4` (`net0`): `192.168.5.99`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, `/etc/hosts` should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before starting a NAT or DSR example, the infrastructure must be configured
    and all virtual machines must be set up according to the IP address configuration
    shown previously:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `solaris11-1`, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'In `solaris11-2`, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'In `solaris11-3`, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'In `solaris11-4`, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'The next stage is to configure both Apache servers (`solaris11-3` and `solaris11-4`)
    by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'The required infrastructure is ready, and so the ILB setup is going to be executed
    in the `solaris11-1` virtual machine that is configuring a half-NAT scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the routing and forwarding configuration, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'To enable the IPv4 forwarding between network interface cards in the system,
    execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'At this time, we have to enable the ILB service by executing the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'When working with ILB, we must create a server group that points to the application
    running in the backend servers (in our case, Apache):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step creates a **virtual IP address** (**VIP address**), which makes
    the load balance possible and application to be accessed by the client through
    any network interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''re going to configure ILB using the round-robin algorithm by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'Some options of this command are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-e`: This enables a rule'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: This makes the rule persistent across a reboot'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i`: This specifies an incoming package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vip`: This is the virtual IP address (the connection point)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port`: This is the virtual IP address port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-m`: This specifies the keys that describe how to handle a packet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lbalg`: This is the load-balance algorithm'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: This is the ILB topology'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This recipe doesn''t use dynamic routing; hence, it''s necessary to include
    a static route in each backend server manually in order to return all answers
    to the ILB server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'The test of the ILB setup is performed through a browser pointing to the ILB
    server (`http://192.168.1.220:8080`), and it confirms that the result of the recipe
    is the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After a short time (60 seconds), we try to access the same address again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Wonderful! The ILB recipe works perfectly!
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other educational details here. For example, it''s possible to gather
    the rules'' details in the command line by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'The statistics (sampled every two seconds) can be presented by executing the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKT_P`: These are processed packets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BYTES_P`: These are processed bytes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKT_U`: These are unprocessed packets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BYTES_U`: These are unprocessed bytes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKT_D`: These are dropped packets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BYTES_D`: These are dropped bytes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great! Although the ILB configuration is complete, we can add or remove new
    backend servers anytime without having to stop ILB or disrupt any connection using
    the `ilbadm add-server` and `ilbadm remove-server` commands. This feature is possible
    only when configuring NAT ILB. Moreover, another alternative is to stick the connection
    from the same client to the same server (session persistence) using the `–p` option
    and by specifying the `pmask` suboption.
  prefs: []
  type: TYPE_NORMAL
- en: The half-NAT ILB setup provides you with the capacity to prevent new connections
    from being completed on a disabled server when there's a plan to execute the maintenance
    of this disabled server. A very good detail is that we deployed a single port
    (`8080`) to receive a new connection to the VIP address. Nevertheless, it would
    be possible to use several ports (`8080`-`8089`, for example) in order to balance
    connections among them using TCP or UDP.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other alternatives that are worth mentioning:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn-drain`: This is used in the NAT ILB scenario; it''s a kind of timeout.
    After this time, the server''s connection state is removed as well as the respective
    rule. The default behavior for TCP is that connections remain until they are terminated,
    whereas the UDP connection is kept until the idle timeout time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nat-timeout`: This value establishes the upper time limit for a connection
    (60 seconds for UDP and 120 seconds for TCP) to be killed and removed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`persist-timeout`: This is only used when persistent mapping is enabled, and
    it works like a time limit (the default is 60 seconds) in order to remove the
    mapping. At the end, the persistent mapping will be lost after the time limit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To show how these options can be used, disable and remove the existing rule
    and afterwards, create a new rule with some additional parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: This example uses a port range (`8080` to `8099`) by permitting any client using
    TCP to connect to any port in this range and specific parameters that control
    the timeout values explained previously. Any setup should be performed according
    to the applications that run in the backend servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Erasing all ILB configuration can be done by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ILB is a fantastic feature of Oracle Solaris 11 that creates the load balance
    for layer 3 and 4 and helps distribute the client requests over backend servers.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Managing Oracle Solaris 11.1 Network Performance* at [http://docs.oracle.com/cd/E26502_01/html/E28993/preface-1.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28993/preface-1.html#scrolltoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Oracle Solaris Administration: Network Interfaces and Network Virtualization*
    at [http://docs.oracle.com/cd/E23824_01/html/821-1458/docinfo.html#scrolltoc](http://docs.oracle.com/cd/E23824_01/html/821-1458/docinfo.html#scrolltoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working With DHCP in* *Oracle Solaris 11.1* at [http://docs.oracle.com/cd/E26502_01/html/E28991/dhcp-overview-1.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28991/dhcp-overview-1.html#scrolltoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Oracle Solaris Administration: IP Services* at [http://docs.oracle.com/cd/E23824_01/html/821-1453/toc.html](http://docs.oracle.com/cd/E23824_01/html/821-1453/toc.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Integrated Load Balancer Overview* at [http://docs.oracle.com/cd/E23824_01/html/821-1453/gijjm.html#scrolltoc](http://docs.oracle.com/cd/E23824_01/html/821-1453/gijjm.html#scrolltoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*System Administration Commands* at [http://docs.oracle.com/cd/E26502_01/html/E29031/ilbadm-1m.html#REFMAN1Milbadm-1m](http://docs.oracle.com/cd/E26502_01/html/E29031/ilbadm-1m.html#REFMAN1Milbadm-1m)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Configuration of Integrated Load Balancer* at [http://docs.oracle.com/cd/E23824_01/html/821-1453/gijgr.html#scrolltoc](http://docs.oracle.com/cd/E23824_01/html/821-1453/gijgr.html#scrolltoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Configuring Linux Servers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Linux 服务器
- en: In this chapter, you will learn how to set up different types of Linux servers.
    This will include **Domain Name System** (**DNS**) servers, **Domain Host Configuration
    Protocol** (**DHCP**) servers, **Samba** or **Server Message Block**/**Common
    Internet File System** (**SMB**/**CIFS**) file servers, and **Network File System**
    (**NFS**) servers. All these servers, in one way or another, are powering the
    backbone of the World Wide Web. Even though we will not cover it here, you should
    know that the reason your computer is showing the exact time is because of a well-implemented
    **Network Time Protocol** (**NTP**) server. You can shop online and transfer files
    between your friends and colleagues thanks to effective DHCP, web, and file servers.
    Configuring the different types of Linux services that power all these servers
    represents the knowledge base for any Linux system administrator. In this edition
    of the book, we will only cover a select few of these Linux servers, those we
    consider the most important and major Linux servers currently. For further information,
    please refer to the *Further reading* section at the end of this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何设置不同类型的 Linux 服务器。这将包括**域名系统**（**DNS**）服务器、**动态主机配置协议**（**DHCP**）服务器、**Samba**
    或 **服务器消息块**/**通用互联网文件系统**（**SMB**/**CIFS**）文件服务器，以及 **网络文件系统**（**NFS**）服务器。这些服务器在某种程度上都为万维网的骨干提供支持。虽然我们在这里不讨论，但你应当知道，你的计算机显示准确时间的原因是因为有一个良好实现的
    **网络时间协议**（**NTP**）服务器。你能够进行在线购物和与朋友、同事之间的文件传输，得益于高效的 DHCP、Web 和文件服务器。配置这些为服务器提供动力的各种
    Linux 服务，是任何 Linux 系统管理员的知识基础。在本书的本版本中，我们只会涵盖其中的一些 Linux 服务器，这些是我们认为当前最重要的主要 Linux
    服务器。如需进一步了解，请参考本章末尾的*进一步阅读*部分。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Introduction to Linux services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 服务介绍
- en: Setting up an SSH server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 SSH 服务器
- en: Setting up a DNS server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 DNS 服务器
- en: Setting up a DHCP server
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 DHCP 服务器
- en: Setting up an NFS server
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 NFS 服务器
- en: Setting up a Samba file server
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Samba 文件服务器
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Basic knowledge of networking and Linux commands is required. You will need
    access to multiple working systems, preferably on premise or in the cloud. If
    this is not possible, you can use local virtual machines on your system. Furthermore,
    it would be useful to have a domain available for you to use too. We will use
    Ubuntu Server 22.04.2 LTS as the distribution of choice for this chapter’s exercises
    and examples. Nevertheless, any other major Linux distribution—such as Fedora,
    RHEL, openSUSE, or Debian—is equally suitable for the tasks detailed in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 需要具备基本的网络知识和 Linux 命令知识。你需要访问多个正常工作的系统，最好是本地系统或云端系统。如果这不可能，你也可以在本地使用虚拟机。此外，拥有一个可以使用的域名会很有帮助。本章的练习和示例将使用
    Ubuntu Server 22.04.2 LTS 版本。但无论是 Fedora、RHEL、openSUSE 还是 Debian 等其他主要 Linux 发行版，都同样适用于本章所涉及的任务。
- en: Introducing Linux services
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Linux 服务
- en: Everything you have learned up until now will easily apply to any workstation
    or desktop/laptop running Linux. We have delved into advanced networking subjects
    that are meant to ease your learning path to becoming a seasoned Linux system
    administrator. Now we will enter the *server* territory as a natural path to the
    *cloud*, which will be discussed in detail in the last four chapters of this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你到目前为止所学的内容，能够轻松应用到任何运行 Linux 的工作站或台式机/笔记本上。我们已经深入探讨了一些高级网络主题，旨在帮助你顺利学习，成为一名资深的
    Linux 系统管理员。接下来，我们将进入*服务器*领域，这是通向*云计算*的自然路径，后者将在本书的最后四章中详细讨论。
- en: A **Linux server**, compared to a Linux workstation, is a system that serves
    content over a network. While doing so, a server provides its hardware and software
    resources to different clients that are accessing it. For example, every time
    you enter a website address into your browser, a server is accessed. That particular
    type of server is a **web server**. When you print over the network in your workplace,
    you access a **print server**, and when you read your email, you access a **mail
    server**. All these are specialized systems that run a specific piece of software
    (sometimes called a service) that provides you, the client, with the data you
    requested. Usually, servers are very powerful systems that have lots of resources
    available for a client’s use.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, a **workstation** (which is yet another powerful piece of hardware)
    is generally used for personal work, not for client access over a network. A workstation
    is used for intensive work, similar to any regular desktop or laptop system. In
    light of everything we have exposed up to now, the contents of this chapter and
    the following chapters are best suited for server use, but not limited to it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: You’ve probably already heard about setting up different Linux servers—such
    as a web server, a file server, or an email server—and have probably wondered
    why they are called that. They do not represent the hardware boxes that are the
    actual servers—they are basically services running on top of Linux. So what are
    Linux services? These are programs that run in the background. Inside the Linux
    world, those services are known as `init` process in [*Chapter 5*](B19682_05.xhtml#_idTextAnchor104),
    *Working with Processes, Daemons, and Signals*, when we discussed what processes,
    daemons, and signals are and how to manage them on Linux. The mother of all processes
    is the `init` process, which is among the first processes when Linux boots up.
    Currently, the latest version of Ubuntu (and also CentOS, Fedora, openSUSE, and
    others) uses `systemd` as the default `init` process.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: We will refresh your memory by using some basic commands for working with services
    on Linux. If you want more information, please refer to [*Chapter 5*](B19682_05.xhtml#_idTextAnchor104),
    *Working with Processes, Daemons,* *and Signals*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'The first command we will remind you of is the `ps` command. We will use it
    to show the `init` process running, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output on our Ubuntu 22.04.2 system is shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Showing the init process by using the ps command](img/B19682_13_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Showing the init process by using the ps command
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: By using the `-e` flag, we can generate information about all processes, except
    kernel-related ones, while the `-f` flag is used to generate a full listing.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: In the process list shown, the first process is either the `init` process or
    `systemd`. Sometimes, on older operating systems (such as Ubuntu 20.04 or 18.04),
    it uses the `init` name for backward-compatibility issues, but to make sure that
    it really is `systemd`, you can use the manual pages of `init` for more details.
    When you type `man init` in the command line, the manual page shown is for `systemd`.
    As the parent of all services, `systemd` starts all the running processes in parallel
    as a way to make the boot process and service-time response more efficient. To
    see how efficient those processes are, you can run the `systemd-analyze` command.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: A command we have frequently used, and one you should already know, is the `systemctl`
    command, which is the main command-line utility for working with `systemd` services
    (or daemons) on Linux.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'As you know `systemctl` invokes `systemd`. Those units have several types,
    such as service, mount, socket, and others. To see those units listed by the time
    they take to start up, you can use the `systemd-analyze blame` command, as shown
    in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – The systemd-analyze blame command](img/B19682_13_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – The systemd-analyze blame command
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The output shows different types of units, such as *service*, *mount*, and *device*.
    The preceding screenshot is only an excerpt of the running units. To learn more
    about the `systemctl` command, feel free to use the manual pages, or go back to
    [*Chapter 5*](B19682_05.xhtml#_idTextAnchor104) to refresh your memory.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: This brief introduction to Linux services is only a refresher of the respective
    sections from [*Chapter 5*](B19682_05.xhtml#_idTextAnchor104), enough for you
    to start delving into setting up and configuring specific Linux services. In the
    following sections, we will show you how to manage some of the most important
    services on Linux, such as **SSH**, **DNS**, **DHCP**, **NTP**, **Samba**, **NFS**,
    **web**, **File Transfer Protocol** (**FTP**), and **printing services**. Now,
    it’s time to roll up your sleeves and configure them yourself. First, we will
    show you how to set up an SSH server on Ubuntu Linux.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SSH
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will configure SSH on a computer running Ubuntu Server 22.04.2 LTS as the
    host operating system. Throughout the entire book, we used SSH connections several
    times, and showed you how to create an SSH key pair in [*Chapter 11*](B19682_11.xhtml#_idTextAnchor231),
    *Working with Virtual Machines*, when we worked with cloud-init. This time, we
    will show you how to install **OpenSSH**, how to enable SSH, and how to modify
    some of its configuration defaults.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring OpenSSH on Ubuntu
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to use SSH, the first thing we need to do is to install the `openssh`
    package. On Ubuntu, this can be done by using the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Chances are that it is already installed on your system. If that is the case,
    you can go ahead and skip this step and go to the configuration files.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, we can start and enable the `openssh` service with the
    following commands:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以使用以下命令启动并启用`openssh`服务：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For openSSH, the configuration file that we can work with is located under
    `/etc/ssh/sshd_config`. By default, this file already contains a lot of information,
    all we need to do is to open it with our text editor and start modifying the available
    options. Depending on what we want to achieve, the bare minimum configuration
    for SSH involves the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于openSSH，我们可以操作的配置文件位于`/etc/ssh/sshd_config`。默认情况下，这个文件已经包含了很多信息，我们需要做的就是用文本编辑器打开它并开始修改可用的选项。根据我们要实现的目标，SSH的基本最小配置包括以下内容：
- en: 'Modify the remote root login options; this can be done by changing the line
    with the following code and setting the option accordingly:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改远程根用户登录选项；这可以通过修改以下代码所在的行并相应设置选项来完成：
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In our case, we modified the default `prohibit-password` option to `no`, so
    that the root user will not be able to connect through SSH at all.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将默认的`prohibit-password`选项修改为`no`，以使得根用户无法通过SSH连接。
- en: 'Disable the SSH password authentication. This can be done by changing the following
    lines to `no`:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用SSH密码认证。可以通过将以下行更改为`no`来完成：
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Do this only after you copy your key pair on the remote machine and make sure
    you can use it. Otherwise, you won’t be able to access your server.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有在你将密钥对复制到远程机器并确保可以使用它之后才执行此操作。否则，你将无法访问你的服务器。
- en: 'To allow public key authentication, you will need to uncomment the following
    line:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要允许公钥认证，你需要取消注释以下行：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will quickly show the commands used in [*Chapter 11*](B19682_11.xhtml#_idTextAnchor231)
    to enable public keys authentication, as a reminder:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将快速展示在[*第11章*](B19682_11.xhtml#_idTextAnchor231)中使用的命令，以启用公钥认证，作为提醒：
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ssh packt@192.168.0.113
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ssh packt@192.168.0.113
- en: '[PRE7]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The configuration options presented here are the base minimum to start using
    SSH when working with a remote system or a virtual machine. However, OpenSSH is
    a very powerful tool that offers lots of options that you could explore. Here
    are two links that could help you in your endeavors: [https://ubuntu.com/server/docs/service-openssh](https://ubuntu.com/server/docs/service-openssh)
    and [https://www.openssh.com/](https://www.openssh.com/)manual.html. In the following
    section, we will show you how to set up a DNS server.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示的配置选项是开始使用SSH时的基本最小配置，适用于远程系统或虚拟机。但是，OpenSSH是一个功能非常强大的工具，提供了很多你可以探索的选项。以下是两个可能对你有所帮助的链接：[https://ubuntu.com/server/docs/service-openssh](https://ubuntu.com/server/docs/service-openssh)和[https://www.openssh.com/](https://www.openssh.com/)manual.html。在接下来的部分中，我们将展示如何设置DNS服务器。
- en: Setting up a DNS server
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置DNS服务器
- en: 'One of the most widely used DNS services is **Berkeley Internet Name Domain
    9** (**BIND 9**). You can visit its official website at the following address:
    [https://www.isc.org/bind/](https://www.isc.org/bind/). Before continuing, let’s
    underline the system configuration and goals. For this section, we will use a
    computer running on Ubuntu Server 22.04.2 LTS. On this system, we will create
    two types of servers, a **caching name server** and a **primary name server**,
    which you can use on your local network to manage hostnames and private IP addresses.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最广泛使用的DNS服务之一是**伯克利互联网域名系统9**（**BIND 9**）。你可以访问其官方网站：[https://www.isc.org/bind/](https://www.isc.org/bind/)。在继续之前，让我们强调系统配置和目标。对于本节内容，我们将使用一台运行Ubuntu
    Server 22.04.2 LTS的计算机。在这台系统上，我们将创建两种类型的服务器，分别是**缓存名称服务器**和**主名称服务器**，你可以在本地网络上使用它们来管理主机名和私有IP地址。
- en: Important note
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'There are different DNS servers, such as **authoritative**, **caching**, or
    **forwarding** types; those are also called functional types. Among those, a caching
    DNS server is the one that always answers recursive requests from clients. Also,
    there are **relational server types**, such as primary and secondary DNS servers.
    Those are authoritative types, and are almost identical, with the only difference
    between the primary and the secondary being the location from which they get the
    zones’ information. For more information on DNS, you can consult the following
    links: [https://www.digitalocean.com/community/tutorials/a-comparison-of-dns-server-types-how-to-choose-the-right-dns-configuration](https://www.digitalocean.com/community/tutorials/a-comparison-of-dns-server-types-how-to-choose-the-right-dns-configuration)
    and [https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts](https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: DNS 服务器有不同的类型，比如 **权威**、**缓存** 或 **转发** 类型；这些也称为功能类型。在这些类型中，缓存 DNS 服务器是始终响应客户端递归请求的服务器。此外，还有
    **关系服务器类型**，如主 DNS 服务器和从 DNS 服务器。这些是权威类型，它们几乎相同，唯一的区别是主服务器和从服务器获取区域信息的位置不同。有关
    DNS 的更多信息，你可以参考以下链接：[https://www.digitalocean.com/community/tutorials/a-comparison-of-dns-server-types-how-to-choose-the-right-dns-configuration](https://www.digitalocean.com/community/tutorials/a-comparison-of-dns-server-types-how-to-choose-the-right-dns-configuration)
    和 [https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts](https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts)。
- en: There are other ways to do this, but for the purpose of showing you the basics
    of DNS setup, this configuration will suffice. If you would like a secondary server,
    you will need to have another spare system, or if you use **virtual private servers**
    (**VPSs**), they would have to be in the same data center and be using the same
    private network. In our case, however, we will use a local system on our small
    private network.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他方法可以实现这一点，但为了向你展示 DNS 设置的基本原理，这个配置已经足够。如果你需要一个辅助服务器，你需要另一个备用系统，或者如果你使用 **虚拟私人服务器**（**VPS**），它们必须位于同一数据中心，并使用相同的私人网络。然而，在我们的案例中，我们将使用一个本地系统，在我们的小型私人网络中。
- en: 'First, we will install the `bind9` package in Ubuntu by using the following
    command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将通过以下命令在 Ubuntu 中安装 `bind9` 包：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding command will install all the packages needed for BIND9 to run.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将安装运行 BIND9 所需的所有包。
- en: 'Once the packages are installed, you can test them to see whether BIND works
    as expected. For this, we will use the `nslookup` command, as shown in the following
    screenshot, by using the local address (or *loopback* address):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦包安装完成，你可以测试它们以确认 BIND 是否按预期工作。为此，我们将使用 `nslookup` 命令，如下图所示，使用本地地址（或 *环回* 地址）：
- en: '![Figure 13.3 – Checking to see whether BIND is working using nslookup](img/B19682_13_03.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.3 – 使用 nslookup 检查 BIND 是否工作](img/B19682_13_03.jpg)'
- en: Figure 13.3 – Checking to see whether BIND is working using nslookup
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – 使用 nslookup 检查 BIND 是否工作
- en: 'You can now start setting up the service, as you can see it is working. First,
    we will configure a caching DNS service. But before we start, we advise you to
    back up the following configuration files: `/etc/bind/named.conf`, `/etc/bind/named.conf.options`,
    `/etc/hosts`, and `/etc/resolv.conf`. Let’s see how to create a caching server.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以开始设置服务，因为你可以看到它正在工作。首先，我们将配置一个缓存 DNS 服务。但在开始之前，我们建议你备份以下配置文件：`/etc/bind/named.conf`、`/etc/bind/named.conf.options`、`/etc/hosts`
    和 `/etc/resolv.conf`。让我们来看看如何创建一个缓存服务器。
- en: Caching a DNS service
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存 DNS 服务
- en: 'The default behavior of BIND9 is as a caching server. This means that setting
    it up is quite straightforward. We will tweak the configuration file just a little,
    in order to make it work according to our requests:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: BIND9 的默认行为是作为一个缓存服务器。这意味着设置它非常简单。我们只需稍微调整配置文件，以便它按照我们的需求工作：
- en: 'After seeing that the installed packages work as intended, you can also configure
    the firewall to allow BIND9, using the following command:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认已安装的包能正常工作后，你还可以使用以下命令配置防火墙，以允许 BIND9 通过：
- en: '[PRE9]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: // listen-on-v6 { any; };
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // listen-on-v6 { any; };
- en: '[PRE10]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will have to add a list of IP addresses inside the `forwarders` directive.
    This line tells the server where to look in order to find addresses not cached
    locally. For simplicity, we will add the Google public DNS servers, but feel free
    to use your `forwarders` directive to look like this:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要在`forwarders`指令中添加一组IP地址。这一行告诉服务器在哪里查找以找到没有被本地缓存的地址。为了简化操作，我们将添加Google公共DNS服务器，但你也可以自由地将你的`forwarders`指令写成如下形式：
- en: '[PRE11]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can also add a directive defining the `allow-query` spectrum. This line
    tells the server which networks can be accepted for DNS queries. You can add your
    local network address. In our case, it will be the following:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以添加一条指令来定义`allow-query`范围。这一行告诉服务器哪些网络可以进行DNS查询。你可以添加本地网络地址。在我们的案例中，它将是以下内容：
- en: '[PRE12]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There is also a `listen-on` directive, where you can specify the networks the
    DNS server will work for. This applies for IPv4 addresses and is shown in the
    following code snippet:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一条`listen-on`指令，你可以在其中指定DNS服务器将为哪些网络工作。这适用于IPv4地址，示例如下：
- en: '[PRE13]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After the added options, the code you added should appear as in the following
    screenshot:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在添加选项后，你添加的代码应如下面的截图所示：
- en: '![Figure 13.4 – The final form of /etc/bind/named.conf.options after adding
    new options](img/B19682_13_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图13.4 – 添加新选项后的/etc/bind/named.conf.options最终格式](img/B19682_13_04.jpg)'
- en: Figure 13.4 – The final form of /etc/bind/named.conf.options after adding new
    options
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4 – 添加新选项后的/etc/bind/named.conf.options最终格式
- en: Save the file and exit the editor. You can check the BIND9 configuration with
    the `named-checkconf` command. If there is no output, it means that the configuration
    of the file is correct. Restart the BIND9 service and optionally check its status.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并退出编辑器。你可以使用`named-checkconf`命令检查BIND9配置。如果没有输出，说明文件的配置是正确的。重新启动BIND9服务，并可选择检查其状态。
- en: 'Knowing that the BIND9 service is working fine, you can test the service from
    any other computer on the network with the `nslookup` command, as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 知道BIND9服务正常运行后，你可以通过任何其他网络上的计算机使用`nslookup`命令来测试该服务，如下所示：
- en: '![Figure 13.5 – Testing the BIND9 implementation](img/B19682_13_05.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图13.5 – 测试BIND9实现](img/B19682_13_05.jpg)'
- en: Figure 13.5 – Testing the BIND9 implementation
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5 – 测试BIND9实现
- en: We used the command with the host’s IP address, as seen in the previous screenshot.
    The output shows that the DNS service on our test machine is working fine. The
    test was conducted from a local ThinkPad on the same network.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了带有主机IP地址的命令，如前面的截图所示。输出结果显示，我们的测试机器上的DNS服务运行正常。该测试是通过同一网络上的本地ThinkPad进行的。
- en: You now have a working caching DNS server on your private network. In the next
    section, we will show you how to create a primary DNS server.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了一个在私有网络上工作的缓存DNS服务器。在下一节中，我们将展示如何创建主DNS服务器。
- en: Creating a primary DNS server
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主DNS服务器
- en: In order to configure a primary DNS server, we will need a domain name that
    it will serve. For this section’s purpose, we will use the `calcatinge.ro` domain
    name (when you try on your system, please use a domain name you own). We will
    have to create new zones for the BIND9 configuration, and we will add information
    to the `/etc/bind/named.conf.local` file about the ones we create. Right now,
    we will create a new zone for our `calcatinge.ro` domain.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置主DNS服务器，我们需要一个它将服务的域名。在本节中，我们将使用`calcatinge.ro`域名（当你在自己的系统上尝试时，请使用你拥有的域名）。我们需要为BIND9配置创建新区域，并将我们创建的区域信息添加到`/etc/bind/named.conf.local`文件中。现在，我们将为`calcatinge.ro`域名创建一个新的区域。
- en: Important note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'What is a **DNS zone**? The short answer is that it is a part of a domain namespace
    associated with an entity responsible for maintaining it. Zones also offer a granular
    take on administrating different components. For more information on DNS zones,
    please refer to the following link: [https://ns1.com/resources/dns-zones-explained](https://ns1.com/resources/dns-zones-explained).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**DNS区域**是什么？简短的回答是，它是与负责维护它的实体相关联的域名空间的一部分。区域还提供了一种更细致的管理不同组件的方法。有关DNS区域的更多信息，请参考以下链接：[https://ns1.com/resources/dns-zones-explained](https://ns1.com/resources/dns-zones-explained)。'
- en: 'In the following screenshot, you can see the contents of our configuration
    file, followed by details on each of the lines:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，你可以看到我们配置文件的内容，随后是每一行的详细说明：
- en: '![Figure 13.6 – New zone for our domain in /etc/bind/named.conf.local file](img/B19682_13_06.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图13.6 – 我们域名在/etc/bind/named.conf.local文件中的新区域](img/B19682_13_06.jpg)'
- en: Figure 13.6 – New zone for our domain in /etc/bind/named.conf.local file
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s explain the contents of a zone directive:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: First, we had to add the name of the domain that the zone will serve
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `type` of the zone is set as `master`, but there are other types to use,
    such as `slave`, `forward`, or `hint`
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `file` represents the path to the actual zone file that will be created
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `allow-transfer` list, the IPs of DNS servers that handle the zone are
    set
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `also-notify` list, the IPs of servers that will be notified about zone
    changes are indicated
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s create a new zone for our chosen domain:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how we copied the `db.local` file under another
    name and used it for a new zone:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Creating the zone file for our domain](img/B19682_13_07.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Creating the zone file for our domain
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to create the zone file, as indicated in the zone directive
    about `calcatinge.ro`. The details are shown in the preceding screenshot and as
    you can see, its location is `/etc/bind/`. Once the file is created using `db.local`
    as a template, you can open it with your favorite text editor and add information
    about your server IP and domain name. In the following screenshot, you can see
    the zone file for `calcatinge.ro` created on our machine:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Zone file information](img/B19682_13_08.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Zone file information
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'The DNS records are introduced at the end of the file. Here are some details
    about the contents of the file:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The table has a specific format that contains details about hostname (first
    column), class (second column), DNS record type (third column), and value (the
    last column).
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For the hostname, we entered `@`, which means that the entry of the record refers
    to the zone name from the file.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The class is `IN`, which indicates that the network is the internet.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS records types are `A`, `NS`, `MX`, `CNAME`, `TXT`, and `SOA`. `A` indicates
    the IP address of the domain name; `NS` indicates the IP address of the DNS server;
    `MX` is the address of the email server; `CNAME` is an alias (canonical name);
    and `TXT` has a custom entry, `SOA`, which indicates the authoritative name server
    for the zone, with details on the administrator, serial number, and refresh rates.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The value in the last column most often comprises of the IP address or the hostname.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next step is to restart the **Remote Name Daemon Control** (**RNDC**),
    which is a control utility inside BIND that controls the name server. The command
    to do that is shown here:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, you can check to see if the primary DNS server works. Try the `nslookup`
    command from another system on the network, as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The output of the preceding command will most certainly show that the local
    DNS server on the system with the indicated IP address has a working zone file.
    Your primary DNS server works as expected on your local network. Don’t forget
    to use your IP inside the command.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is always a good idea to create a secondary DNS server in case the first
    one stops working, which is why we will show you how to set up a second one in
    the following section.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a secondary DNS server
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It comes as no surprise that the secondary DNS server should be set up on different
    hardware from the primary one, but on the same network. If you do it inside a
    data center, use a VPS in the same network as the first one. If you plan to experiment
    with it on your home private network, make sure you have another system at your
    disposal.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: We will start another NUC system available that is also running Ubuntu Server
    22.04.2 LTS. We will need to know its IP address in order to use it in our configuration.
    In our case, the IP of the new system is `192.168.0.140`. This second machine
    needs to have BIND9 installed and configured too. Before setting up the secondary
    server, you will need to modify the configuration of the primary DNS server first.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the primary server configuration files
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To modify the configuration of the primary DNS server and allow it to send
    the zone details to the secondary server, follow these steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'You will have to open the `/etc/bind/named.conf.local` configuration file and
    add some new lines to it. We add the second server’s IP address inside the `allow-transfer`
    and `also-notify` directives, as shown in the following screenshot:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.9 – Adding the IP of the secondary DNS server](img/B19682_13_09.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – Adding the IP of the secondary DNS server
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Save the file and restart the BIND9 service.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also need to open the `/etc/bind/named.conf.options` configuration
    file and add an access list parameter (`acl "trusted"`) with all the accepted
    IP addresses on the network. In our case, the primary server has the address `192.168.0.113`,
    and the secondary server has the address `192.168.0.140`. Add this before the
    already existing `options` directive.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `options` directive block, below the comments, we also add the following
    directives:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.10 – Adding new directive inside /etc/bind/named.conf.options file](img/B19682_13_10.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – Adding new directive inside /etc/bind/named.conf.options file
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration is finished, and we will restart the BIND9 service using
    the `systemctl` command, as follows:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Before proceeding further, let’s understand the directives used. The `recursion`
    directive has a boolean value (`yes` | `no`) and defines whether recursion and
    caching are allowed or not on the server. The default is `yes`, and thus the server
    will require DNS query recursion by solving all the attempts.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '**Recursion** is also known as **recursive query**, which in the case of DNS
    refers to the way a name resolution is solved. The recursive mode represents the
    way a computer looks for a FQDN by inquiring first at the local cache data and
    the local DNS server. The request is clear and demands a precise answer, and the
    solution for that answer is the responsibility of the DNS server. Thus, the query
    initiated by the computer, which is a DNS client, to the DNS server is a recursive
    query.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'The `allow-recursion` directive is referenced to a list of matching addresses
    of clients, in our case specified by a `listen-on` directive specifies the IP
    on which the server listens. And we also used the `allow-transfer` directive that
    provides a list of hosts that are allowed to transfer zone information (in our
    case, none). For more information about configuration options, please refer to
    the following link: [https://bind9.readthedocs.io/en/latest/reference.html#](https://bind9.readthedocs.io/en/latest/reference.html#).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s learn how to configure the secondary server.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the secondary server
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the secondary server, as stated earlier, you will need to install BIND9
    too. Once it is installed, you will need to follow these steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `/etc/bind/named.conf.options` file and add the following lines in
    an `acl` directive, before the already existing `options` directive:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.11 – Adding an acl directive on the secondary server](img/B19682_13_11.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – Adding an acl directive on the secondary server
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, add the following lines inside the `options` directive:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.12 – Adding new directives inside options](img/B19682_13_12.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – Adding new directives inside options
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Now edit the `/etc/bind/named.conf.local` file and add the zones you want, but
    this time use the `secondary` type, as opposed to the `master` one used on the
    primary DNS server.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is a comparison between the two `/etc/bind/named.conf.local`
    files. On the left is the file on the primary DNS server, and on the right is
    the file on the secondary DNS server:'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.13 – Configuration files from primary (left) and secondary (right)
    servers](img/B19682_13_13.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – Configuration files from primary (left) and secondary (right)
    servers
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can restart the BIND9 service and make sure that the firewall is allowing
    DNS connections on the second server with the following commands:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now you have two DNS servers set up and working, one primary and one secondary.
    In the following section, we will show you how to set up a local DHCP server.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a DHCP server
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DHCP is a network service that is used to assign IP addresses to hosts on a
    network. The settings are enabled by the server, without any control from the
    host. Most commonly, the DHCP server provides the IP addresses and netmasks for
    clients, the default gateway IP, and the DNS server’s IP address.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the DHCP service on Ubuntu, use the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As a test system, we will use the same system on which we installed the DNS
    services in the previous section. After installation, we will configure two specific
    files. On an Ubuntu system, like ours, the default configuration will be set inside
    the `/etc/dhcp/dhcpd.conf` file, while the interfaces will be configured inside
    the `/``etc/default/isc-dhcp-server` file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first show you how to set up a basic local DHCP server. In this respect,
    we will alter the `/etc/dhcp/dhcpd.conf` file by adding the IP address pool. You
    can either uncomment one of the `subnet` directives already available inside the
    file, or you can add a new one, which is what we will do. Our existing subnet
    is `192.168.0.0/24`, and we will add a new one for this new DHCP server, as shown
    in the following screenshot (for a refresher on networking, please refer to [*Chapter
    7*](B19682_07.xhtml#_idTextAnchor139), *Networking* *with Linux*):'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.14 – Defining a new subnet in /etc/dhcp/dhcpd.conf](img/B19682_13_14.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: Figure 13.14 – Defining a new subnet in /etc/dhcp/dhcpd.conf
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Inside the same `/etc/dhcp/dhcpd.conf` file, you can uncomment the line that
    says `authoritative;`. The `authoritative` DHCP clause ensures that the server
    will automatically resolve any invalid IP numbers on the network and assign a
    new and valid IP to each new device registered without requiring the user’s manual
    interaction.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the options are modified, you must specify the network interface name
    in the `/etc/default/isc-dhcp-server` file. This is needed for the server to know
    which network device to use. To do this, open the file with your preferred editor
    and add the interface’s name. If you don’t remember your interface name, run the
    `ip addr show` command and select the appropriate interface. In our case, the
    system we use has both Ethernet and wireless interfaces, and we will choose the
    Ethernet interface for the DHCP server, which is `enp0s25`. Inside the `/etc/default/isc-dhcp-server`
    file, add the interface as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, save the changes to the file and restart the DHCP service with the following
    command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, you have a working DHCP server on your system of choice. A DHCP server
    gives you some advantages in managing your local network, but there are times
    when you might not need to create a new one, as all the network routers provide
    a fully working DHCP service right out of the box.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: To avoid conflicts, you might want to isolate the new DHCP server from your
    local network router. Your network router already has a fully functional DHCP
    server that will most likely conflict with the new one. In most cases, `isc-dhcp-server.service`
    will give you an error as an indication that it was not able to connect to any
    interface.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking the preceding note into consideration, when we check to see whether
    the DHCP service is running with the following command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We received an error, as shown in the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Error running the DHCP service](img/B19682_13_15.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – Error running the DHCP service
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Once you isolate the machine from your local network and use it as a single
    DHCP server, the service will be running as intended.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will show you how to set up an NFS server on your local
    network.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an NFS server
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NFS is a distributed filesystem used to share files over a network. To show
    you how it works, we will set up the NFS server on one of our machines on the
    network. We will use Ubuntu 22.04.2 LTS as the base for the NFS server. For more
    in-depth theoretical information about NFS, please refer to [*Chapter 7*](B19682_07.xhtml#_idTextAnchor139),
    *Networking* *with Linux*.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: The NFS filesystem type is supported by any Linux and/or Unix environment and
    also by Windows, but with some limitations. For mostly-Windows client environments,
    we recommend using the Samba/**Common Internet File System** (**CIFS**) protocol
    instead. Also, for those of you concerned about privacy and security, please keep
    in mind that the NFS protocol is not encrypted, thus any transfer of data is not
    protected by default.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the NFS server
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On our network, we will use an Ubuntu machine as a server and we will show
    you how to access the files from another Linux client. First, let’s install and
    configure the server, as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'We will install the `nfs-kernel-server` package using the following command:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: sudo systemctl start nfs-kernel-server.service
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sudo systemctl enable nfs-kernel-server.service
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '/home directory for all clients on the network, or you could make a dedicated
    shared directory from the start. You could create a new directory starting from
    the root, but you could also create your shared directory inside specific directories
    such as /var, /mnt, or /srv—it’s your choice.We will create a new directory called
    `/home/export/shares` inside our `/home` directory using the following commands
    (make sure that you are already inside your `/home` directory if you want to use
    the command as is):'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '/etc/exports file. There are three configuration files for NFS (/etc/default/nfs-kernel-server,
    /etc/default/nfs-common, and /etc/exports) but we will only alter one of them.
    In the following screenshot, you will see the two files inside /etc/default and
    the default contents of the /etc/exports configuration file:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![Figure 13.16 – The configuration files inside /etc/default and the contents
    of the /etc/exports configuration file](img/B19682_13_16.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – The configuration files inside /etc/default and the contents
    of the /etc/exports configuration file
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `/etc/exports` file with your preferred text editor and edit it according
    to your configuration. Inside the file, we will add lines for each shared directory.
    Before doing that, you might have noticed that inside the file there are two types
    of directives: one for NFS versions 2 and 3, and one for version 4\. For more
    details about the differences between those versions, we encourage you to consult
    the following document: [https://archive.fosdem.org/2018/schedule/event/nfs3_to_nfs4/attachments/slides/2702/export/events/attachments/nfs3_to_nfs4/slides/2702/FOSDEM_Presentation_Final_pdf.pdf](https://archive.fosdem.org/2018/schedule/event/nfs3_to_nfs4/attachments/slides/2702/export/events/attachments/nfs3_to_nfs4/slides/2702/FOSDEM_Presentation_Final_pdf.pdf).'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s start editing the configuration file. We will add a new line containing
    the directory, the IP address of the client, and configuration options. The general
    syntax is as follows:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We share only one directory, hence the single line added. If you want all clients
    on the network to access the shares, you can add the subnet class (for example,
    `192.168.0.0/24`). Or, if you want only specific clients to access the shares,
    you should add their IPs. More clients will be added on the same line, separated
    by spaces. There are many options that you can add, and for a full list, we advise
    that you consult [https://linux.die.net/man/5/exports](https://linux.die.net/man/5/exports)
    or the local manual file with the `man exports` command. In our file, we added
    the following options:'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`rw` for both read and write access'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sync` to force write changes to disk (this reduces the speed, though)'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no_subtree_check` to prevent subtree checking, which is mainly a check to
    see whether the file is still available before the request'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In a nutshell, here is the line we added to the file (please take into consideration
    that this is only a single line, with a space between `/home/export/shares` and
    the IP, and there is no space between the IP and the parentheses):'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After saving and closing the file, restart the service with the following command:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, apply the configuration with the following command:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once the service is restarted and running, you can set up a firewall to allow
    NFS access. For this, it is extremely useful to know that the port NFS is using
    port `2049` by default. As we allow all the systems from our network to access
    the shares, we will add the following new rule to the firewall:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now that the new firewall rule has been added, we can run the following command
    to make sure that it is running according to our needs:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If your firewall is not actively running, you can use the following command
    to activate it:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![Figure 13.17 – Showing the new firewall rule to allow NFS shares](img/B19682_13_17.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
- en: Figure 13.17 – Showing the new firewall rule to allow NFS shares
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, you can see that after adding the new rule using
    the `sudo ufw allow nfs` command, port `2049` was added to the list of allowed
    rules.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: The basic configuration of the server is now complete. In order to access the
    files, you will need to configure the clients too. We will show you how to do
    this in the next section.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the NFS client
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a client, we will use another system, a laptop running Debian GNU/Linux
    12 Bookworm. First, we will have to install NFS on the client by using the following
    command:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now that the needed packages are installed on the client too, we can create
    directories on the client to mount the shares to. We will create a new directory
    on the client, where the shares from the server will be mounted. This new directory
    will be `/home/shares`. We create it with the following command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now that the new directory is created, we can mount the location from the server:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'With the preceding command, we mounted the shares from the server on the client
    using the `mount` command. We gave the location on the server as the first argument,
    followed by the location on the client as the second argument. We can also check
    to see whether everything went well by using the `df -h` command. The new mount
    is shown last in the `df` command’s output. The following is a screenshot showing
    the commands used to create, mount, and check the new shares directory:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.18 – Mounting the new shares directory on the client](img/B19682_13_18.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: Figure 13.18 – Mounting the new shares directory on the client
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have finished the setup for the NFS shares. We now need to
    test the configuration to prove that it works.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Testing the NFS setup
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the setup is finished on both server and client, you can test to see if
    everything works according to your expectations. In our test, we created several
    files named `testing_files` using the `packt` user on the server, and a file called
    `file` using the regular user `alexandru` on the client machine. The following
    is the output showing the contents of the `/home/shares` directory on our Debian
    local system:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.19 – Testing the NFS on our local client](img/B19682_13_19.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: Figure 13.19 – Testing the NFS on our local client
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: There you have it, the NFS server and client are working just fine. You can
    use the **graphical user interface** (**GUI**) on the client (as shown in the
    previous screenshot), and also the **command-line interface** (**CLI**) to access
    the NFS shares.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will show you how to configure a Samba/CIFS share that
    can be accessed by Windows clients on the network.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Samba file server
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Samba server allows you to share files over a network where clients use
    different operating systems, such as Windows, macOS, and Linux. In this section,
    we will set up a Samba server on Ubuntu 22.04.2 LTS and access shares from different
    operating systems on the network. The SMB/CIFS protocol is developed by Microsoft;
    for more details, you can visit their developer pages at [https://docs.microsoft.com/en-us/windows/win32/fileio/microsoft-smb-protocol-and-cifs-protocol-overview](https://docs.microsoft.com/en-us/windows/win32/fileio/microsoft-smb-protocol-and-cifs-protocol-overview).
    Some information about the SMB/CIFS protocol can be found in [*Chapter 7*](B19682_07.xhtml#_idTextAnchor139),
    *Networking with Linux*, too. In the following sub-sections we will show you how
    to install and configure it on your local network.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Samba
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The installation procedure has the following steps:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will install Samba on the system using the following command:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Once Samba is installed, we can check whether the service is running as expected.
    We will run the following command for this:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '/etc/samba/smb.conf. The configuration file has two major sections: a [global]
    section with general configuration settings, and a [shares] section that configures
    the shares’ behavior. A safe practice is to back up the original configuration
    file before starting to modify it. We will do this with the following command:'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '![Figure 13.20 – The smb.conf global directive](img/B19682_13_20.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
- en: Figure 13.20 – The smb.conf global directive
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us briefly explain the content shown in the preceding screenshot:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: The first line sets a server name, in our case Local Samba File Server
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second line sets the `workgroup` name, in our case the Windows default name,
    `WORKGROUP`
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third line determines that it will not be necessary to have a Samba user
    account in order to access the shares (mapping the guest to `Bad User`)
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guest users are allowed on the fourth line
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then we set the interfaces used by Samba, which in our case will be the Ethernet
    connection (`eno1`) and the loopback (`lo`) interfaces (check your exact interface
    name with the `ip addr show` or `ip` `link` commands)
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will set the `server role` and the hosts allowed (from the local pool)
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last line sets the order the hostnames are checked, using the broadcast
    (`bcast`) method
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we will create the `[shares]` directive and add the necessary configuration
    options for the shares. We will add details about the shared directory on our
    server, user details, and permissions. See the following screenshot for details:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.21 – Adding information inside the shares.conf file](img/B19682_13_21.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
- en: Figure 13.21 – Adding information inside the shares.conf file
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us briefly explain the contents of this directive:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: We first set a name for the shares
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then we set the path of our local shared directory
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we set the default permissions for the directory and files
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also set the default mask values
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we set the shares as public, guest-user friendly, and writable
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the modifications are done, we restart the service with the following
    command:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Furthermore, we adjust the firewall rules to allow Samba using the following
    command:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![Figure 13.22 – Testing the Samba configuration](img/B19682_13_22.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
- en: Figure 13.22 – Testing the Samba configuration
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: The output shows `Loaded services file OK`, which means that the configuration
    files have no syntax errors.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: After the system is restarted and the firewall configured, we can proceed to
    setting up a Samba password for users who can access the shares. In the next section,
    we will create new Samba users and groups.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Creating Samba users
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each Samba server needs to have specific users that can access the shared directories
    and files. Those users need to be both Samba and system users, as this is necessary
    for users to be able to authenticate and to read and write system files. Let’s
    assume that you need to create a local share for your small business or family
    group.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'By creating local users specifically for using the Samba shares, you don’t
    need them to act like actual users as they only need to be able to access the
    shares. However, local Samba users need to be local system users. In our case,
    we will use our local `packt` user to create a new user for Samba:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following command to add the `packt` local user to Samba:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'alex using the following command:'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then we add it to Samba with the following command:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: valid users = @packt @alex
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Before testing the new user’s access to Samba, we will need to give the user
    `alex` access to the shared directory. To do this, we follow these steps:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 'We add the `acl` package in Ubuntu with the following command:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: sudo setfacl -R -m "u:alex:rwx" /home/packt/samba_shares
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In the next section, we will show you how to access the Samba shares from different
    systems on the network.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Samba shares
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On your network, you can access the shares from Linux, macOS, or Windows. To
    make everything a little bit challenging—worthy of a Linux master!—we will show
    you how to access the Samba shares in Linux using the CLI only. We will let you
    find out for yourselves how to access them from the GUI or from a Windows or macOS
    client. To access the shares from the CLI, use the `smbclient` tool.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Linux system, you need to install the Samba client `smbclient` first.
    We will assume that you will have an Ubuntu or Debian Linux client, but the steps
    are similar for other Linux distributions too. On Ubuntu/Debian, first install
    the Samba client with the following command, but make sure that your repositories
    are updated before you do this:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If you are running a Fedora/RHEL client, install the Samba client with the
    following command:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'For example, let’s access the shares of user `packt` from one of our local
    machines. Remember that the shares are on a local server running Ubuntu. We will
    use our local IP for the server and run the following code:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.23 – Accessing shares from a Linux CLI client](img/B19682_13_23.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
- en: Figure 13.23 – Accessing shares from a Linux CLI client
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, you can see that the Samba access was successful,
    and the user `packt` managed to access the Samba shares on the server. We used
    the `-U` option followed by the username to specify the name of the user we are
    connecting with. The location was given using the server’s local IP, followed
    by the Samba `samba shares` name. Furthermore, if we would like to see the Samba
    services available on the server, we could use the `-L` option with the `smbclient`
    command, as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.24 – Listing the available services on the Samba server](img/B19682_13_24.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
- en: Figure 13.24 – Listing the available services on the Samba server
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Here we are, at the end of this chapter on configuring Linux servers. The servers
    showcased were considered important and relevant for any Linux sysadmin to know.
    However, there are many other types of Linux servers not covered due to page-count
    constraints. Nevertheless, there are plenty of resources you can find online.
    As a base, you can start with the official documentation for RHEL, Ubuntu, or
    Debian, which will cover most of the Linux server types that you should know.
    One server type that will prove useful to know how to configure is the web server.
    Feel free to explore any other resources that you find relevant and might not
    be included in the *Further* *reading* list.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the installation and configuration processes for
    the most well-known services available for Linux. Knowing how to configure all
    the servers described in this chapter—from DNS to DHCP, Apache, and a printing
    server—is a minimum requirement for any Linux administrator.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: By going through this chapter, you learned how to provide essential services
    for any Linux server. You learned how to set up and configure a web server using
    the Apache package; how to provide networked printing services to a small office
    or home office; how to run an FTP server and share files over TCP; how to share
    files with Windows clients on your network using the Samba/CIFS protocol; how
    to share files over Unix and Linux systems using the NFS file-sharing protocol;
    how to set up NTP to show an accurate time; and how to configure DNS and local
    DHCP servers. In a nutshell, you learned a lot in this chapter, and yet we have
    barely scratched the surface of Linux server administration.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce you to cloud technologies.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have a clear view of how to manage some of the most widely used
    services in Linux, here are some exercises that will further contribute to your
    learning:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Try using a VPS for all the services detailed in this chapter, not on your local
    network.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try setting up a LEMP stack on Ubuntu.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test all the services described in this chapter using Fedora or RHEL-based distributions.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information about the topics covered in the chapter, you can refer
    to the following links:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'Official Ubuntu documentation: [https://ubuntu.com/server/docs](https://ubuntu.com/server/docs)'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL official docs: [https://www.redhat.com/sysadmin/install-apache-web-server](https://www.redhat.com/sysadmin/install-apache-web-server)'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NGINX official docs: [https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/](https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/)'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DigitalOcean official docs: [https://www.digitalocean.com/community/tutorials/how-to-install-the-apache-web-server-on-ubuntu-22-04](https://www.digitalocean.com/community/tutorials/how-to-install-the-apache-web-server-on-ubuntu-22-04)'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 4:Cloud Administration
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this fourth part, you will learn about advanced concepts related to cloud
    computing. By the end of this part, you will be proficient in using specific tools
    such as Kubernetes and Ansible and deploying Linux to the AWS and Azure clouds.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B19682_14.xhtml#_idTextAnchor299), *Short Introduction to* *Computing*'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B19682_15.xhtml#_idTextAnchor326), *Deploying to the Cloud with
    AWS and Azure*'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B19682_16.xhtml#_idTextAnchor342), *Deploying Applications with
    Kubernetes*'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B19682_17.xhtml#_idTextAnchor359), *Infrastructure and Automation
    with Ansible*'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

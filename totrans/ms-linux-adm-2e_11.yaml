- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Working with Virtual Machines
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用虚拟机
- en: In this chapter, you will learn about **virtual machines** (**VMs**) on Linux.
    For starters, you will learn how virtualization works and how to create and use
    VMs. You will learn about one of the most widely used virtualization and hypervisor
    technologies on Linux, called **Kernel-based Virtual Machine** (**KVM**). The
    topics in this chapter will prepare you for the future of Linux, as it is the
    foundation of every modern cloud technology. If you wish to remain up to date
    in a constantly changing landscape, this chapter will be an essential starting
    point for your journey.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你将了解Linux上的**虚拟机**（**VMs**）。首先，你将了解虚拟化的工作原理以及如何创建和使用虚拟机。你将学习Linux上最广泛使用的虚拟化和虚拟机监控技术之一——**基于内核的虚拟机**（**KVM**）。本章的主题将为你迎接Linux的未来做好准备，因为它是现代云技术的基础。如果你希望在不断变化的技术环境中保持与时俱进，本章将是你旅程中的一个重要起点。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要主题：
- en: Introduction to virtualization on Linux
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux上的虚拟化简介
- en: Understanding Linux KVM
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Linux KVM
- en: Working with basic KVM commands
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基本的KVM命令
- en: Advanced KVM management
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级KVM管理
- en: Provisioning VMs using cloud-init
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用cloud-init配置虚拟机
- en: Public key authentication with SSH
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SSH的公钥认证
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: No special technical requirements are needed, just a working installation of
    Linux on your system. We will mainly use Debian GNU/Linux 12 for our examples,
    but we will also show you how to install KVM in Fedora and openSUSE.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要特殊的技术要求，只需系统上有一个正常工作的Linux安装。我们将主要使用Debian GNU/Linux 12作为示例，但也会展示如何在Fedora和openSUSE中安装KVM。
- en: Introduction to virtualization on Linux
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux上的虚拟化简介
- en: '**Virtualization** is a way to make more efficient use of computer hardware.
    It is basically an abstraction layer that takes advantage of the computer’s resources.
    In this section, you will learn about the types of VMs, how they work on Linux,
    and how to deploy and manage them.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟化**是一种更有效利用计算机硬件的方式。它本质上是一个抽象层，利用计算机的资源。在本节中，你将学习虚拟机的类型、它们如何在Linux上工作以及如何部署和管理它们。'
- en: Efficiency in resource usage
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源使用效率
- en: The abstraction layer that virtualization uses is a software layer that allows
    more efficient use of all the computer’s components. This in turn allows better
    use of all the physical machine’s capabilities and resources.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化使用的抽象层是一个软件层，允许更高效地使用计算机的所有组件。这样可以更好地利用物理机器的所有能力和资源。
- en: Before going any further into virtualization, let’s give you an example. In
    our testing laboratory, we have several physical machines, in the form of laptops
    and small form factor desktop computers (Intel NUCs) that we use as servers. Each
    of the systems has significant resources available, more than enough to run the
    services we need. For instance, our least performant systems are a 5th-generation
    Intel NUC with an Intel i3 CPU with four processing cores and 16 GB of RAM and
    a 7th-generation Intel NUC with a four-core Intel Pentium and 12 GB of RAM. Those
    two systems have plenty of resources that could be more efficiently used by using
    VMs.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨虚拟化之前，让我们先给你一个例子。在我们的测试实验室中，我们有几台物理机器，以笔记本电脑和小型桌面计算机（Intel NUC）为主，这些机器用作服务器。每台系统都拥有足够的资源，足以运行我们需要的服务。例如，我们性能最差的系统是一台第五代Intel
    NUC，搭载Intel i3处理器，四个处理核心，16GB内存，以及一台第七代Intel NUC，搭载四核Intel Pentium处理器和12GB内存。这两台系统有足够的资源，可以通过使用虚拟机更加高效地利用。
- en: For running a local web service or any kind of server on our local network,
    those resources can be split between various VMs with ease. For example, each
    physical system could host four different VMs, each using a single CPU core, and
    at least 2 GB of memory and all the necessary storage capacities. This way, one
    single machine will work as if there were four different ones. This is way more
    efficient than using individual machines for separate tasks.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在本地网络上运行本地Web服务或任何类型的服务器，资源可以轻松地在多个虚拟机之间进行分配。例如，每个物理系统可以托管四个不同的虚拟机，每个虚拟机使用一个CPU核心，至少2GB内存和所有必要的存储容量。这样，一台机器将像四台不同的机器一样工作。这比使用独立机器处理单独任务更加高效。
- en: 'In the following diagram, we are comparing the load on a single computer versus
    the same load divided between several VMs. This way of using the same hardware
    resources is more efficient:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图示中，我们对比了单台计算机的负载与相同负载分配到多个虚拟机之间的情况。以这种方式使用相同的硬件资源更加高效：
- en: '![Figure 11.1 – Comparison between single computer use and using multiple VMs](img/B19682_11_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 单台计算机使用与使用多个虚拟机的对比](img/B19682_11_1.jpg)'
- en: Figure 11.1 – Comparison between single computer use and using multiple VMs
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 单台计算机使用与使用多个虚拟机的对比
- en: 'Nonetheless, as we will use the hypervisor on top of a host OS, we will have
    to keep some resources for the OS’s use, so the number of VMs will be smaller.
    Here is a diagram of how the VMs work on a host OS:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如我们将在宿主操作系统上使用虚拟机监控器一样，我们必须为操作系统保留一些资源，因此虚拟机的数量会较少。以下是虚拟机在宿主操作系统上工作的示意图：
- en: '![Figure 11.2 – How virtualization works on a host OS](img/B19682_11_2.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 虚拟化在宿主操作系统上的工作原理](img/B19682_11_2.jpg)'
- en: Figure 11.2 – How virtualization works on a host OS
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 虚拟化在宿主操作系统上的工作原理
- en: The preceding diagram shows the scheme of how virtualization works when used
    on a host OS. As we will see in the following sections, it is not the only type
    of virtualization.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上图展示了虚拟化在宿主操作系统上使用时的工作原理。如我们将在接下来的章节中看到的，这并不是唯一的虚拟化类型。
- en: It is important to note that efficiency is not related solely to the hardware
    resources used. A significant aspect of the efficient use of hardware in data
    centers is related to increased energy efficiency and a reduction of the carbon
    footprint. In this respect, virtualization has played a major role for many decades
    in changing the usage patterns of servers inside data centers. Overall, virtualization
    and containerization are significant players in the fight against climate change.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，效率不仅仅与使用的硬件资源相关。数据中心中硬件高效使用的一个重要方面是提高能源效率和减少碳足迹。在这方面，虚拟化在改变数据中心内部服务器使用模式方面已经发挥了几十年的重要作用。总体而言，虚拟化和容器化在应对气候变化的斗争中扮演着重要角色。
- en: In the following sections, we will give you a short introduction to hypervisors
    and VMs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将简要介绍虚拟机监控器和虚拟机。
- en: Introduction to hypervisors
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟机监控器介绍
- en: The software layer that virtualization is based on is called a **hypervisor**.
    The physical resources are divided and used as virtual computers, better known
    as VMs. By using VMs, the limits of physical hardware are overcome by the process
    of **emulation**. This has a lot of advantages, enabling the hardware to be used
    more effectively.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化所基于的软件层称为**虚拟机监控器**。物理资源被划分并作为虚拟计算机使用，更广为人知的是虚拟机（VM）。通过使用虚拟机，物理硬件的局限性通过**模拟**过程得以克服。这具有许多优点，使得硬件可以更高效地使用。
- en: Important note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: The process of emulation is basically an imitation process through which a piece
    of software replicates (or imitates) the functions of another system. In our case,
    the hypervisor (the virtualization software layer) is simulating the use of hardware
    as if it were a different system altogether. This allows the hardware resources
    a computer has to be used more effectively.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟过程本质上是一个模仿过程，通过该过程，一款软件复制（或模仿）另一个系统的功能。在我们的案例中，虚拟机监控器（虚拟化软件层）模拟硬件的使用，就好像它是一个完全不同的系统。这使得计算机拥有的硬件资源能够更加高效地利用。
- en: 'Hypervisors can be used either on top of an existing OS (*type 2*) or directly
    on bare metal (hardware) (*type 1*). For each of these types, there are various
    solutions that can be used, particularly on Linux. For a Linux OS, examples of
    each type are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机监控器可以运行在现有操作系统上（*类型 2*），也可以直接运行在裸金属硬件上（*类型 1*）。对于这两种类型的虚拟机监控器，特别是在 Linux
    上，有各种可用的解决方案。对于 Linux 操作系统，每种类型的示例如下：
- en: Examples of hypervisors that run on top of a host OS (type 2) are Oracle VirtualBox
    and VMware Workstation/Fusion
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行在宿主操作系统之上的虚拟机监控器（类型 2）示例包括 Oracle VirtualBox 和 VMware Workstation/Fusion。
- en: Examples of hypervisors that run directly on bare metal (type 1) are Citrix
    Xen Server and VMware ESXi
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接运行在裸金属硬件上的虚拟机监控器（类型 1）示例包括 Citrix Xen Server 和 VMware ESXi。
- en: KVM is mostly classified as a bare-metal hypervisor (type 1), while its underlying
    system is a full OS, thus it is classified as a host hypervisor at the same time
    (type 2)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KVM 通常被归类为裸金属虚拟机监控器（类型 1），而其底层系统是一个完整的操作系统，因此它也同时被归类为宿主虚拟机监控器（类型 2）。
- en: In this chapter, we will exclusively use KVM as the hypervisor of choice.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专门使用 KVM 作为首选虚拟机监控器。
- en: Understanding Linux KVMs
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Linux KVM
- en: A VM is similar to a standalone computer. It is a software-based emulator that
    has access to the host computer’s resources. It uses the host’s CPU, RAM, storage,
    networking interface(s), and ports. Not only that, but it is a virtual environment
    that has the same functions as a physical computer; it is also seen as a virtual
    computer.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机类似于一台独立的计算机。它是一种基于软件的模拟器，可以访问宿主计算机的资源。它使用宿主计算机的 CPU、内存、存储、网络接口和端口。不仅如此，它还是一个具有与物理计算机相同功能的虚拟环境；也被视为一台虚拟计算机。
- en: The resources for each VM are managed by the hypervisor. It can relocate resources
    between existing VMs or create new VMs. The VMs are isolated from each other and
    from the host computer. As multiple VMs can exist on a single computer, each VM
    can use different guest OSes. For example, if you use a Windows machine and want
    to try out Linux, a popular solution would be to create a VM with the Linux distribution
    that you want to try. The same goes for Mac users, too. An OS installed inside
    a VM runs similarly to an OS installed on bare metal. The user experience could
    vary from one hypervisor to the other, and so could the resource efficiency and
    response times. From our experience, we prefer running VMs from KVM rather than
    running from any other hypervisor, mainly because of the comprehensive **command-line
    interface** (**CLI**). However, use cases could be different from one user to
    another.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个虚拟机的资源由虚拟化技术管理。它可以在现有虚拟机之间重新分配资源或创建新的虚拟机。虚拟机之间相互隔离，并与宿主计算机隔离。由于多个虚拟机可以存在于一台计算机上，每个虚拟机可以使用不同的客户操作系统。例如，如果你使用的是
    Windows 计算机并想尝试 Linux，一个流行的解决方案是创建一个虚拟机来运行你想尝试的 Linux 发行版。Mac 用户也是一样。安装在虚拟机中的操作系统与直接安装在硬件上的操作系统运行方式相似。用户体验可能因虚拟化技术的不同而有所不同，资源效率和响应时间也可能不同。根据我们的经验，我们更倾向于使用
    KVM 来运行虚拟机，而不是使用其他虚拟化技术，主要因为其全面的**命令行界面**（**CLI**）。不过，使用场景因用户不同而有所不同。
- en: Choosing the hypervisor
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择虚拟化技术
- en: In this chapter, we chose the KVM hypervisor. As an optional solution, if you
    use the GNOME desktop environment, you will have access to GNOME Boxes. As both
    KVM and GNOME Boxes are directly available from Linux repositories, we consider
    them to be the better solutions for newcomers to Linux. Both KVM and GNOME Boxes
    share parts of `libvirt` and `qemu` code (to be detailed in the next section),
    and in this respect, we consider them to both be the same hypervisor, which is
    KVM.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们选择了 KVM 虚拟化技术。作为一个可选方案，如果你使用 GNOME 桌面环境，你可以使用 GNOME Boxes。由于 KVM 和 GNOME
    Boxes 都可以直接从 Linux 仓库获取，我们认为它们是 Linux 新手的较好选择。KVM 和 GNOME Boxes 共享部分 `libvirt`
    和 `qemu` 代码（将在下一节详细介绍），在这方面，我们认为它们都是相同的虚拟化技术，即 KVM。
- en: In [*Chapter 1*](B19682_01.xhtml#_idTextAnchor030), *Installing Linux*, you
    first encountered the use of a hypervisor to set up a Linux VM. We showed you
    how to use VMware solutions and VirtualBox to set up a Linux VM. The details used
    then should be sufficient for any user, whether they are experienced or a newbie.
    VirtualBox has several features that make it a fair candidate for your hypervisor
    solution, but in our opinion, it still lacks the finesse of KVM. In the next section,
    we will walk you through KVM.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 1 章*](B19682_01.xhtml#_idTextAnchor030)，*安装 Linux* 中，你第一次接触了使用虚拟化技术来设置
    Linux 虚拟机的方式。我们展示了如何使用 VMware 解决方案和 VirtualBox 来设置 Linux 虚拟机。那时提供的细节对于任何用户来说都应该足够，无论他们是经验丰富的用户还是新手。VirtualBox
    具有一些功能，使其成为虚拟化技术的一个不错的选择，但在我们看来，它仍然缺乏 KVM 的精细度。在下一节中，我们将带你深入了解 KVM。
- en: Using the KVM hypervisor
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 KVM 虚拟化技术
- en: The KVM hypervisor is an open source virtualization project available on all
    major Linux distributions. It is a modern hypervisor that uses specific kernel
    modules to take advantage of all the benefits that the Linux kernel has to offer,
    including memory support, scheduler, nested virtualization, GPU pass-through,
    and so on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: KVM 是一个开源虚拟化项目，适用于所有主要的 Linux 发行版。它是一种现代虚拟化技术，使用特定的内核模块来充分利用 Linux 内核所提供的所有优势，包括内存支持、调度器、嵌套虚拟化、GPU
    直通等。
- en: KVM in detail – QEMU and libvirt
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: KVM 详细介绍 – QEMU 和 libvirt
- en: KVM uses `libvirt`. The KVM’s interface with `libvirt`, specifically in GNOME,
    is `virt-manager`. The CLI for `libvirt` is called `virsh`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: KVM 使用 `libvirt`。KVM 与 `libvirt` 的接口，特别是在 GNOME 中，是 `virt-manager`。`libvirt`
    的命令行界面（CLI）叫做 `virsh`。
- en: The `libvirt` API provides a common library for managing VMs. It is the management
    layer for VM creation, modification, and provision. It is running in the background
    as a daemon called `libvirtd` that manages the connections with the hypervisor
    at the client’s request.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`libvirt` API 提供了一个通用的库用于管理虚拟机（VM）。它是用于虚拟机创建、修改和配置的管理层。它作为一个名为`libvirtd`的守护进程在后台运行，处理客户端请求时与虚拟化管理程序的连接。'
- en: QEMU is both an emulator and a virtualizer. When used as an emulator, QEMU uses
    **dynamic binary translation** methods to operate. This means that it can use
    different types of OS on the host machine, even if they are designed for different
    architectures. Dynamic binary translations are used in **software-based virtualization**,
    where hardware is emulated to execute instructions in virtualized environments.
    This way, QEMU emulates the machine’s CPU, using a specific binary translator
    method called **Tiny Code Generator** (**TCG**), which transforms the binary code
    for different types of architectures.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: QEMU 既是一个仿真器，也是一个虚拟化工具。当作为仿真器使用时，QEMU 使用**动态二进制翻译**方法来操作。这意味着它可以在宿主机上使用不同类型的操作系统，即使这些操作系统是为不同架构设计的。动态二进制翻译用于**基于软件的虚拟化**，其中硬件被仿真以在虚拟化环境中执行指令。通过这种方式，QEMU
    仿真机器的 CPU，使用一种特定的二进制翻译方法，叫做**Tiny Code Generator**（**TCG**），它将二进制代码转换为不同架构的机器代码。
- en: 'When used as a virtualizer, QEMU uses what is known as a **hardware-based virtualization**,
    where the binary translation is not used, because the instructions are executed
    directly on the host CPU. The differences between software- and hardware-assisted
    virtualization are shown in the following diagram:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为虚拟化工具使用时，QEMU 使用被称为**基于硬件的虚拟化**的方法，在这种情况下不使用二进制翻译，因为指令直接在宿主机的 CPU 上执行。软件虚拟化与硬件辅助虚拟化之间的差异如下面的图所示：
- en: '![Figure 11.3 – Comparison between software- and hardware-assisted virtualization](img/B19682_11_3.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – 软件虚拟化与硬件辅助虚拟化的比较](img/B19682_11_3.jpg)'
- en: Figure 11.3 – Comparison between software- and hardware-assisted virtualization
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 软件虚拟化与硬件辅助虚拟化的比较
- en: As you can see in the diagram, instructions have different paths when using
    software- and hardware-assisted virtualization. In software-assisted virtualization,
    when dynamic binary translations are used, the user’s unprivileged instructions
    are sent directly to the hardware, while the guest OS privileged instructions
    are first sent to the hypervisor before getting to the hardware. In hardware-assisted
    virtualization, the user’s unprivileged instructions are sent to the hypervisor
    first, and then sent to the hardware, while the privileged instructions from the
    guest OS have the same path as in software-assisted virtualization. This ensures
    a certain level of isolation for the guest OS, thereby achieving better performance
    and less complexity.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，在使用软件虚拟化和硬件辅助虚拟化时，指令有不同的执行路径。在软件辅助虚拟化中，当使用动态二进制翻译时，用户的非特权指令会直接发送到硬件，而来宾操作系统的特权指令则先发送到虚拟化管理程序，再发送到硬件。在硬件辅助虚拟化中，用户的非特权指令会先发送到虚拟化管理程序，再发送到硬件，而来宾操作系统的特权指令与软件辅助虚拟化中的路径相同。这确保了来宾操作系统的隔离性，从而实现了更好的性能和更少的复杂性。
- en: In the following section, we will show you how to install and configure QEMU
    on a Debian 12 machine. We consider Debian to be a sufficiently lightweight distribution,
    offering the necessary stability for a virtualization host OS. Some commands can
    be replicated on Ubuntu as well.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将向你展示如何在 Debian 12 机器上安装和配置 QEMU。我们认为 Debian 是一个足够轻量级的发行版，提供了虚拟化主机操作系统所需的稳定性。一些命令也可以在
    Ubuntu 上复制。
- en: Installing the hypervisor on major Linux distributions
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在主要的 Linux 发行版上安装虚拟化管理程序
- en: 'Installing QEMU is a straightforward task. All you need to do is to run the
    package installer utility of your distribution, with some specified package names.
    In our case, we will show you how to install it on major Linux distributions such
    as Debian/Ubuntu, Fedora, and openSUSE:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 QEMU 是一个简单的任务。你需要做的就是运行你的发行版的包安装工具，并指定一些包名称。在我们的示例中，我们将向你展示如何在主要的 Linux 发行版（如
    Debian/Ubuntu、Fedora 和 openSUSE）上安装 QEMU：
- en: '**Installing on** **Debian/Ubuntu Linux**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Debian/Ubuntu Linux 上安装**'
- en: 'Run the following command:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE0]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Installing on** **Fedora Linux**'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Fedora Linux 上安装**'
- en: 'Run the following command:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE1]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Installing on** **openSUSE Linux**'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 openSUSE Linux 上安装**'
- en: 'Run the following commands:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE2]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once all the necessary packages are installed, you can enable and start the
    `libvirtd` daemon with the following commands (valid for all Linux distributions
    showcased in this section):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有必要的软件包安装完成，你可以使用以下命令启用并启动`libvirtd`守护进程（适用于本节中展示的所有Linux发行版）：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the packages are installed and the daemon is started and enabled, a safe
    action to take is to check whether your machine is compatible with KVM requirements.
    To do this, use the `virt-host-validate` command as a root user or by using `sudo`.
    We are running the command on a Debian GNU/Linux 12 host, but it can be used on
    other Linux distributions as well:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完软件包并启动和启用守护进程后，下一步安全的操作是检查你的机器是否符合KVM的要求。要做到这一点，可以使用`virt-host-validate`命令，以root用户身份或通过`sudo`来运行。我们在一台Debian
    GNU/Linux 12主机上运行该命令，但它也可以在其他Linux发行版上使用：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the command is running, you may receive a couple of errors or warnings
    regarding QEMU or **Linux Containers** (**LXC**) – which is a technology used
    to run isolated systems, similar to how KVM works – depending on your system (there’s
    more on LXC in [*Chapter 12*](B19682_12.xhtml#_idTextAnchor257)). In our case,
    the output shows one error regarding LXC compatibility, as shown in the following
    screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令运行，你可能会收到一些关于QEMU或**Linux容器**（**LXC**）的错误或警告——LXC是一种用于运行隔离系统的技术，类似于KVM的工作方式——这些错误或警告取决于你的系统（更多关于LXC的内容可以参见[*第12章*](B19682_12.xhtml#_idTextAnchor257)）。在我们的案例中，输出显示了一个关于LXC兼容性的错误，如下图所示：
- en: '![Figure 11.4 – Running the host validation program](img/B19682_11_4.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图11.4 – 运行主机验证程序](img/B19682_11_4.jpg)'
- en: Figure 11.4 – Running the host validation program
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4 – 运行主机验证程序
- en: However, this error will not limit our use of `libvirt` and QEMU, so we do not
    intend to resolve it here.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个错误不会限制我们使用`libvirt`和QEMU，因此我们不打算在这里解决它。
- en: After seeing that there are no compatibility issues regarding QEMU, we can proceed
    to creating our first VM using the CLI. Thus, we will start using KVM-specific
    commands.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认没有关于QEMU的兼容性问题后，我们可以继续通过CLI创建我们的第一个虚拟机。因此，我们将开始使用KVM特定的命令。
- en: Working with basic KVM commands
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基本的KVM命令
- en: One of the first commands that you will use when working with KVM is the one
    used for creating a VM. Other commands, as shown in the following sections, are
    the ones used to start, stop, delete, or pause an already existing VM.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用KVM时，最先使用的命令之一是用于创建虚拟机（VM）的命令。其他命令，如接下来的章节所示，是用于启动、停止、删除或暂停已有虚拟机的命令。
- en: Creating a VM using the command line
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命令行创建虚拟机
- en: 'Before creating our first VM using `libvirt`, we must check and see whether
    our default bridge network configuration was created. We can verify this by using
    the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`libvirt`创建第一个虚拟机之前，我们必须检查并确认我们的默认桥接网络配置是否已创建。我们可以通过使用以下命令来验证：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This command shows if the default bridge configuration was created and if it
    is running. In our case, the bridge connection is not running, thus we will need
    to set it up ourselves. The command used to start the default bridge network is
    as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令显示是否已创建默认桥接配置以及它是否正在运行。在我们的案例中，桥接连接没有运行，因此我们需要自己进行设置。用于启动默认桥接网络的命令如下：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once it has been started, the network bridge is not set up for automatic start,
    thus we will use the following command to set it for automatic start:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它启动，网络桥接未设置为自动启动，因此我们将使用以下命令将其设置为自动启动：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, the output is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输出结果如下：
- en: '![Figure 11.5 – Enabling the default bridge connection](img/B19682_11_5.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图11.5 – 启用默认桥接连接](img/B19682_11_5.jpg)'
- en: Figure 11.5 – Enabling the default bridge connection
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5 – 启用默认桥接连接
- en: 'Now that the default bridge connection has been enabled and set for `autostart`,
    we can create our first VM. In order to create a VM, follow these steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，默认的桥接连接已启用并设置为`自动启动`，我们可以创建我们的第一个虚拟机。创建虚拟机的步骤如下：
- en: 'First, we will need to download the image file of the OS to use inside the
    VM. For our example, we will create a new VM with Ubuntu 22.04.2 LTS server edition.
    We can download the ISO image with the following command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要下载操作系统的镜像文件，以便在虚拟机内使用。以我们的示例为例，我们将创建一个新的虚拟机，使用Ubuntu 22.04.2 LTS服务器版。我们可以使用以下命令下载ISO镜像：
- en: '[PRE8]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once the Ubuntu image is downloaded, we will use the `virt-install` command
    to create the first VM on our host system. We will create one VM that will use
    a single `virt-install` command used is the following (run as root):'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Ubuntu镜像下载完成，我们将使用`virt-install`命令在主机系统上创建第一个虚拟机。我们将创建一个虚拟机，使用的单个`virt-install`命令如下（以root身份运行）：
- en: '[PRE9]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`--name`: The name of the new VM'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--name`：新虚拟机的名称'
- en: '`--memory`: The amount of RAM used by the VM'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--memory`：虚拟机使用的内存量'
- en: '`--vcpus`: The number of virtual CPUs used by the new VM'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--vcpus`：新虚拟机使用的虚拟 CPU 数量'
- en: '`--disk size`: The amount of storage used'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--disk size`：使用的存储量'
- en: '`--os-variant`: The type of guest OS'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--os-variant`：来宾操作系统的类型'
- en: '`--network`: The bridge network used'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--network`：使用的桥接网络'
- en: '`--cdrom`: The location of the guest OS ISO file'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--cdrom`：来宾操作系统 ISO 文件的位置'
- en: The command will start a new `virt-viewer` window, which will start the OS installation
    process. Similarly, by using the command with the `–graphics=vnc` argument, `virt-install`
    will start `virt-viewer`, which is the default tool for displaying the graphical
    console using the VNC protocol.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将启动一个新的 `virt-viewer` 窗口，开始操作系统安装过程。同样，通过使用带有 `–graphics=vnc` 参数的命令，`virt-install`
    将启动 `virt-viewer`，这是使用 VNC 协议显示图形控制台的默认工具。
- en: Simply knowing how to create a VM is not sufficient for a system administrator.
    This is why, in the next section, we will show you some basic VM management tools
    to use.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅知道如何创建虚拟机对系统管理员来说是不够的。这就是为什么在接下来的部分，我们将向您展示一些用于管理虚拟机的基本工具。
- en: Basic VM management
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本虚拟机管理
- en: The basic VM tasks can be done using the `virsh` command when using the CLI,
    or Virtual Machine Manager when using a graphical user interface. In the following,
    we will show you the basic commands to use while inside a CLI.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CLI 时，基本的 VM 操作可以通过 `virsh` 命令完成，或者在使用图形用户界面时，可以使用虚拟机管理器。在接下来的部分，我们将展示在 CLI
    中使用的基本命令。
- en: 'To list the existing VM guests, use the `virsh` `list` command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出现有的虚拟机来宾，请使用 `virsh` `list` 命令：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Be aware that listing the VMs cannot be done by just anyone. This is why the
    following note needs to be considered.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，列出虚拟机并非任何人都可以执行的操作。这就是为什么需要注意以下说明的原因。
- en: Important note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: When trying to list the existing guest VMs, you will not get a valid output
    when using a regular user. You will need to be logged in as `root` or use `sudo`
    to see the list of VMs.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试列出现有的来宾虚拟机时，普通用户无法获得有效的输出。您需要以 `root` 用户身份登录，或者使用 `sudo` 来查看虚拟机列表。
- en: 'The following screenshot shows some basic commands used to manage VMs, together
    with their output:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一些用于管理虚拟机的基本命令及其输出：
- en: '![Figure 11.6 – Commands for VM management](img/B19682_11_6.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6 – 虚拟机管理命令](img/B19682_11_6.jpg)'
- en: Figure 11.6 – Commands for VM management
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 虚拟机管理命令
- en: 'Here is a short explanation of the commands you see in the preceding figure.
    To change the state of a VM, such as starting, stopping, and pausing, use the
    following commands:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对您在前面图中看到的命令的简要说明。要更改虚拟机的状态，例如启动、停止和暂停，可以使用以下命令：
- en: '`sudo virsh` `destroy ubuntu-vm1`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo virsh` `destroy ubuntu-vm1`'
- en: '`sudo virsh` `reboot ubuntu-vm1`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo virsh` `reboot ubuntu-vm1`'
- en: '`sudo virsh` `suspend ubuntu-vm1`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo virsh` `suspend ubuntu-vm1`'
- en: '`sudo virsh` `start ubuntu-vm1`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo virsh` `start ubuntu-vm1`'
- en: '`sudo virsh` `resume ubuntu-vm1`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo virsh` `resume ubuntu-vm1`'
- en: '`sudo virsh` `undefine ubuntu-vm1`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo virsh` `undefine ubuntu-vm1`'
- en: 'For all the options available for `virsh`, please refer to the manual pages
    using the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 `virsh` 可用的所有选项，请使用以下命令查看手册页：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The command-line tools for managing VMs are powerful and offer various options.
    If we consider the fact that, most of the time, a system administrator will be
    using the CLI rather than the GUI, the ability to use command-line tools is of
    the utmost importance.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 用于管理虚拟机的命令行工具功能强大，提供了多种选项。如果我们考虑到系统管理员大多数时候会使用 CLI 而不是 GUI，那么能够使用命令行工具就显得尤为重要。
- en: In the following section, we will show you some advanced KVM management practices.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将向您展示一些高级的 KVM 管理实践。
- en: Advanced KVM management
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级 KVM 管理
- en: Using KVM is so much more than just creating VMs and starting or stopping them.
    VM management can be much more complex, starting with VM automated installation,
    storage and resources management, and up to VM orchestration. Some of these topics
    are out of the scope of this book, but we will still show you how to master your
    VMs on your Linux-powered systems.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 KVM 不仅仅是创建虚拟机并启动或停止它们。虚拟机管理可以更加复杂，从虚拟机自动化安装、存储和资源管理，到虚拟机编排。这些话题有些超出了本书的范围，但我们仍然会向您展示如何在
    Linux 系统上掌握虚拟机管理。
- en: 'By now, we only have one VM. For the purpose of the exercises in this section,
    we will create two more VMs, all running the same Ubuntu OS that we used for the
    first VM. We will create `ubuntu-vm2` and `ubuntu-vm3` VMs using the following
    commands:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只有一台虚拟机。为了本章节的练习，我们将创建另外两台虚拟机，所有虚拟机都运行与第一台虚拟机相同的 Ubuntu 操作系统。我们将使用以下命令创建
    `ubuntu-vm2` 和 `ubuntu-vm3` 两台虚拟机：
- en: 'For `ubuntu-vm2`:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `ubuntu-vm2`：
- en: '[PRE12]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: sudo virt-install --virt-type=kvm --name ubuntu-vm3 --vcpus=2 --memory=2048
    --os-variant=ubuntufocal --cdrom=/var/lib/libvirt/images/ubuntu-22.04.2-live-server-amd64.iso
    --network=default --disk size=20 --noautoconsole
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sudo virt-install --virt-type=kvm --name ubuntu-vm3 --vcpus=2 --memory=2048
    --os-variant=ubuntufocal --cdrom=/var/lib/libvirt/images/ubuntu-22.04.2-live-server-amd64.iso
    --network=default --disk size=20 --noautoconsole
- en: '[PRE13]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, we have three VMs running on our system and we can begin managing them.
    In the next section, we will show you how to find out the IP of a VM and how to
    connect to it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们系统上已经运行了三台虚拟机，可以开始管理它们了。在接下来的章节中，我们将向你展示如何找出虚拟机的 IP 地址以及如何连接到虚拟机。
- en: Connecting to a VM
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到虚拟机
- en: Most of the time, we would like to connect to a running VM from a terminal and
    not use the integrated console provided by the VM manager. In order to be able
    to do this, we will need to know the VM’s IP address. A simple run of the `ip
    neighbor` command will show us all the IP addresses on our local network, but
    this will not provide the relevant information we need, such as the VM’s name.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，我们希望从终端连接到正在运行的虚拟机，而不是使用虚拟机管理器提供的集成控制台。为了能够做到这一点，我们需要知道虚拟机的 IP 地址。简单运行
    `ip neighbor` 命令可以显示我们本地网络上的所有 IP 地址，但这并不能提供我们需要的相关信息，比如虚拟机的名称。
- en: 'On our system, when running the `ip neighbor` command, the output is as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统上，运行 `ip neighbor` 命令时，输出如下：
- en: '![Figure 11.7 – Viewing the IP addresses on the local network](img/B19682_11_7.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.7 – 查看本地网络上的 IP 地址](img/B19682_11_7.jpg)'
- en: Figure 11.7 – Viewing the IP addresses on the local network
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – 查看本地网络上的 IP 地址
- en: 'From the output, we can see that three of the IP addresses are from the default
    virtual network that is set up by KVM (`virbr0`). This is the first information
    that tells us the IP addresses used by our VMs. But which IP is which VM? To find
    out more information, we will use the following commands:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看到，三个 IP 地址来自由 KVM 设置的默认虚拟网络（`virbr0`）。这是我们得知虚拟机使用的 IP 地址的第一条信息。但是哪个 IP
    地址对应哪台虚拟机呢？为了找出更多信息，我们将使用以下命令：
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding command is used to list all the existing VMs. The output (as
    seen in *Figure 11**.8*) shows the names of the VMs. In order to see the IP addresses
    associated with each one, we will use the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令用于列出所有现有的虚拟机。输出（如 *图 11.8* 所示）显示了虚拟机的名称。为了查看与每台虚拟机关联的 IP 地址，我们将使用以下命令：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `[vm name]` represents one of the VM names from the `virsh list` command’s
    output. In the following screenshot, you can see the output of the previous commands:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`[vm name]` 代表 `virsh list` 命令输出中的虚拟机名称之一。在下图中，你可以看到之前命令的输出：'
- en: '![Figure 11.8 – Showing the IP addresses for VMs](img/B19682_11_8.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.8 – 显示虚拟机的 IP 地址](img/B19682_11_8.jpg)'
- en: Figure 11.8 – Showing the IP addresses for VMs
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – 显示虚拟机的 IP 地址
- en: 'Now that we know the IP addresses of every VM we created, we can connect to
    any of the VMs using SSH (more on installing and configuring SSH in [*Chapter
    13*](B19682_13.xhtml#_idTextAnchor276)). Considering that we already have openSSH
    installed on both our host system and the target VM, the simplest way to connect
    using SSH is as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了每台虚拟机的 IP 地址，可以使用 SSH 连接到任何一台虚拟机（关于安装和配置 SSH，请参考 [*第 13 章*](B19682_13.xhtml#_idTextAnchor276)）。考虑到我们已经在主机系统和目标虚拟机上安装了
    openSSH，使用 SSH 连接的最简单方法如下：
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the previous command, we used the `ssh` command, we specified the user (in
    our case `packt`) and the IP address of the VM (in our case, `192.168.122.129`,
    which is `ubuntu-vm1` that we created earlier). The prompt (as shown in the following
    figure) asks you for confirmation, saves the key to the list of known hosts, and
    then connects you to the machine:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的命令中，我们使用了 `ssh` 命令，并指定了用户（在我们的案例中是 `packt`）和虚拟机的 IP 地址（在我们的案例中是 `192.168.122.129`，即之前创建的
    `ubuntu-vm1`）。提示（如下图所示）要求你确认，并将密钥保存到已知主机列表中，然后连接到该机器：
- en: '![Figure 11.9 – Connect to a VM through SSH](img/B19682_11_9.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – 通过 SSH 连接到虚拟机](img/B19682_11_9.png)'
- en: Figure 11.9 – Connect to a VM through SSH
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 通过 SSH 连接到虚拟机
- en: 'Another way to connect to a VM is by using the `virt-viewer` command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种连接虚拟机的方法是使用 `virt-viewer` 命令：
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This command will open a new console window using the `virt-viewer` utility
    and connect to the VM you specify (in our case, `ubuntu-vm1` again) without using
    the SSH protocol:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将使用`virt-viewer`工具打开一个新的控制台窗口，并连接到您指定的虚拟机（在我们的案例中，仍然是`ubuntu-vm1`），而无需使用SSH协议：
- en: '![Figure 11.10 – Connecting to VM using virt-viewer](img/B19682_11_10.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图11.10 – 使用virt-viewer连接虚拟机](img/B19682_11_10.jpg)'
- en: Figure 11.10 – Connecting to VM using virt-viewer
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.10 – 使用virt-viewer连接虚拟机
- en: Important note
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The connection remains active inside the terminal where you initiated the command.
    Thus, if you press *Ctrl* + *C*, the connection will be terminated and the new
    console window will close. Take into consideration that only the connection will
    be terminated and the VM will still be running.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 连接在您发起命令的终端内保持活动状态。因此，如果您按*Ctrl* + *C*，连接将被终止，新的控制台窗口将关闭。请注意，只有连接会被终止，而虚拟机仍然会继续运行。
- en: 'We have shown you how to use the command line to create VMs, for basic management,
    and to connect to a virtual machine. However, you can also use GUI tools. All
    modern Linux distributions that use GNOME as the desktop environment will offer
    at least two useful tools: the Virtual Machine Manager and GNOME Boxes. The former
    is simply the GUI for `libvirt`, and the latter is a new and simple way to provision
    VMs for immediate use inside GNOME based on QEMU/KVM technology. We will let you
    discover these GUI tools as they are pretty straightforward and not difficult
    to use. You could start creating new VMs using the Virtual Machine Manager. In
    the next section, we will show you how to clone VMs.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经展示了如何使用命令行创建虚拟机、进行基本管理以及连接虚拟机。然而，您也可以使用GUI工具。所有现代Linux发行版，如果使用GNOME作为桌面环境，都至少会提供两个有用的工具：虚拟机管理器和GNOME
    Boxes。前者只是`libvirt`的GUI，而后者是基于QEMU/KVM技术，在GNOME环境中即时创建虚拟机的简易方式。我们将让您自己探索这些GUI工具，因为它们非常直观，不难使用。您可以开始使用虚拟机管理器创建新的虚拟机。在下一节中，我们将展示如何克隆虚拟机。
- en: Cloning VMs
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆虚拟机
- en: We have already created three different VMs on our host system. However, there
    are times when you might want to clone an existing VM instead of creating a new
    one.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在主机系统上创建了三个不同的虚拟机。然而，有时您可能希望克隆现有的虚拟机，而不是创建新的虚拟机。
- en: 'Before starting to clone a VM, we need to stop or suspend it. We will do this
    using the `suspend` or the `shutdown` commands. We will stop one of our VMs, as
    shown:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始克隆虚拟机之前，我们需要停止或挂起它。我们将使用`suspend`或`shutdown`命令来执行此操作。我们将停止其中一台虚拟机，如下所示：
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This command will shut down the `ubuntu-vm1` VM. In order to clone it, we will
    use the `virt-clone` command. Let’s say that we want to name the clone `ubuntu-vm1-clone1`.
    We will use the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将关闭`ubuntu-vm1`虚拟机。为了克隆它，我们将使用`virt-clone`命令。假设我们想将克隆命名为`ubuntu-vm1-clone1`。我们将使用以下命令：
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output of the command is shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下所示：
- en: '![Figure 11.11 – Cloning virtual machines using virt-clone](img/B19682_11_11.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图11.11 – 使用virt-clone克隆虚拟机](img/B19682_11_11.jpg)'
- en: Figure 11.11 – Cloning virtual machines using virt-clone
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.11 – 使用virt-clone克隆虚拟机
- en: Now that the clone has been created, we can start it using the `virsh start`
    command. Cloning a VM will also *transfer* all the original VM’s configuration
    regarding the number of vCPUs, RAM, bridge networking configuration, the same
    MAC address, and even the same IP address. This can become a real headache and
    needs to be solved.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在克隆已经创建，我们可以使用`virsh start`命令启动它。克隆虚拟机还会*传输*所有原虚拟机的配置，包括vCPU数量、内存、桥接网络配置、相同的MAC地址，甚至相同的IP地址。这可能会成为一个真正的麻烦，需要解决。
- en: One way to solve this is to directly connect to the VM’s console (not through
    SSH) and run the `ip addr show` command. This will enable the DHCP client to automatically
    assign an IP address to the host. In the next section, we will show you another
    useful way to manage cloning with VM templates.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此问题的一种方法是直接连接到虚拟机的控制台（不是通过SSH）并运行`ip addr show`命令。这将使DHCP客户端自动为主机分配IP地址。在下一节中，我们将展示另一种使用虚拟机模板管理克隆的有效方法。
- en: Creating VM templates
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建虚拟机模板
- en: Another useful way to overcome the issue described in the previous section is
    to first create a VM template before cloning. By creating a template, you make
    sure that all the configuration files will not persist, including MAC and IP configuration,
    user settings, or SSH host keys.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 解决上一节中描述的问题的另一种有效方法是在克隆之前先创建虚拟机模板。通过创建模板，您可以确保所有配置文件不会持久化，包括MAC和IP配置、用户设置或SSH主机密钥。
- en: 'To create a template, follow these steps:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模板，请按照以下步骤操作：
- en: 'We will use the `virt-sysprep` utility. In Debian 12, we will install the `libguestfs-tools`
    utility, which contains the `virt-sysprep`, using the following command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 `virt-sysprep` 工具。在 Debian 12 中，我们将使用以下命令安装包含 `virt-sysprep` 的 `libguestfs-tools`
    工具：
- en: '[PRE20]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now that the utility is installed, we will use it to create a template. But
    first, we will create a new VM running Ubuntu and use it as a template. We will
    use the following command to create the new VM:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在工具已经安装好，我们将用它来创建模板。但首先，我们将创建一台运行 Ubuntu 的新虚拟机，并将其用作模板。我们将使用以下命令来创建新虚拟机：
- en: '[PRE21]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: After finishing the OS installation, make sure that it is up to date with all
    the available packages.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成操作系统安装后，确保其已更新所有可用的包。
- en: 'Proceed only after ensuring that the VM is turned off. As a precautionary method,
    you could first copy the file with a different name:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有在确认虚拟机已关闭后才能继续操作。作为预防措施，你可以先将文件复制并更名：
- en: '[PRE22]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'virt-sysprep command is preparing the VM by resetting all the configuration
    files that might have been created. The following is an excerpt from the output:'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`virt-sysprep` 命令正在通过重置所有可能已创建的配置文件来准备虚拟机。以下是输出的摘录：'
- en: '[PRE23]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![Figure 11.12 – Creating a template with virt-sysprep](img/B19682_11_12.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.12 – 使用 virt-sysprep 创建模板](img/B19682_11_12.jpg)'
- en: Figure 11.12 – Creating a template with virt-sysprep
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – 使用 virt-sysprep 创建模板
- en: 'Now that the template is prepared, you can do either of the following:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在模板已经准备好，你可以选择以下任一操作：
- en: Undefine the domain by using the `virsh undefine` command. This command removes
    the configuration of the VM but leaves the `qcow2` file that it created so that
    you could use it when creating a new VM.
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `virsh undefine` 命令取消定义该域。此命令将删除虚拟机的配置，但会保留它创建的 `qcow2` 文件，这样你在创建新虚拟机时就可以使用它。
- en: Keep the VM (in our case, the one named `ubuntu-template`) and use it as a clone
    template, as intended.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留虚拟机（在我们的例子中是名为 `ubuntu-template` 的虚拟机），并按计划将其用作克隆模板。
- en: The choice is yours, but we are inclined towards the second option, as it is
    already configured and thus is much easier to use. When using only the `qcow2`
    file, you still have to configure (setting CPUs, RAM, networking, etc.) the VM
    prior to using it.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择权在你，但我们倾向于选择第二个选项，因为它已经配置好了，因此使用起来更加简单。当只使用 `qcow2` 文件时，你仍然需要先配置虚拟机（设置 CPU、内存、网络等）才能使用它。
- en: Now that you know how to clone a VM and how to create templates, let’s see other
    ways to manage VMs. In the next section, we will show you how to obtain information
    about the VMs you work with, from the command line.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何克隆虚拟机以及如何创建模板，接下来让我们看看管理虚拟机的其他方法。在下一部分中，我们将向你展示如何从命令行获取你所使用的虚拟机的信息。
- en: Obtaining VM and host resource information
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取虚拟机和主机资源信息
- en: 'When you’re working at the command line, some information is not as visible
    as when working with the GUI tools. To see if we still have the necessary sources
    for creating new VMs, we will need to use the `virsh nodeinfo` command to obtain
    information about the host machine:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在命令行工作时，一些信息不像使用 GUI 工具时那样明显。为了查看我们是否还有足够的资源来创建新虚拟机，我们需要使用 `virsh nodeinfo`
    命令来获取主机的信息：
- en: '![Figure 11.13 – Finding host information with the nodeinfo command](img/B19682_11_13.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.13 – 使用 nodeinfo 命令查找主机信息](img/B19682_11_13.jpg)'
- en: Figure 11.13 – Finding host information with the nodeinfo command
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – 使用 nodeinfo 命令查找主机信息
- en: 'In our case, as seen in the preceding image, the host has 16 vCPUs available
    and 48 GB of RAM, meaning that we still have resources available for some new
    VMs. We know that when we created the VMs we allocated 2 vCPUs and 2 GB of RAM
    for each one. As we now have five VMs (as shown in the following image), it means
    that we use 10 out of 16 vCPUs and 10 GB out of 48 GB RAM:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，如前面的图片所示，主机有 16 个 vCPU 和 48 GB 的 RAM，这意味着我们仍然有足够的资源来创建一些新的虚拟机。我们知道，在创建虚拟机时，我们为每台虚拟机分配了
    2 个 vCPU 和 2 GB 的内存。现在我们有五台虚拟机（如下面的图片所示），这意味着我们使用了 16 个 vCPU 中的 10 个和 48 GB RAM
    中的 10 GB：
- en: '![Figure 11.14 – Listing the existing VMs](img/B19682_11_14.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.14 – 列出现有的虚拟机](img/B19682_11_14.jpg)'
- en: Figure 11.14 – Listing the existing VMs
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – 列出现有的虚拟机
- en: 'But what if we do not know how many resources the existing VMs use? There is
    a command that can help us with that. It is called `virsh dominfo`. Let’s see
    the resources that one of our VMs is using, for example, `ubuntu-vm1`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们不知道现有虚拟机使用了多少资源呢？有一个命令可以帮助我们，它叫做 `virsh dominfo`。让我们查看其中一台虚拟机正在使用的资源，例如
    `ubuntu-vm1`：
- en: '![Figure 11.15 – Showing the VMs’ resource usage](img/B19682_11_15.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图11.15 – 显示虚拟机的资源使用情况](img/B19682_11_15.jpg)'
- en: Figure 11.15 – Showing the VMs’ resource usage
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.15 – 显示虚拟机的资源使用情况
- en: 'In the preceding image, you can see that our VM is using 2 vCPUs and 2 GB of
    RAM. You can check the resource usage for every VM that you manage. Besides vCPUs
    and RAM, you can also manage virtual disks for existing VMs. To see the disk usage
    for a VM you can use the `virt-df` command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图像中，您可以看到我们的虚拟机使用了2个vCPU和2GB的RAM。您可以检查每个虚拟机的资源使用情况。除了vCPU和RAM，您还可以管理现有虚拟机的虚拟磁盘。要查看虚拟机的磁盘使用情况，您可以使用`virt-df`命令：
- en: '![Figure 11.16 – Showing disk usage for a VM](img/B19682_11_16.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图11.16 – 显示虚拟机的磁盘使用情况](img/B19682_11_16.jpg)'
- en: Figure 11.16 – Showing disk usage for a VM
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.16 – 显示虚拟机的磁盘使用情况
- en: We have used the `-d` option for showing `libvirt` domain guests and the `-h`
    option to show the results in a human-readable format. The `virt-df` command is
    similar to the `df` command (see [*Chapter 6*](B19682_06.xhtml#_idTextAnchor124)).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`-d`选项来显示`libvirt`域客机，使用了`-h`选项来以人类可读的格式显示结果。`virt-df`命令类似于`df`命令（参见 [*第6章*](B19682_06.xhtml#_idTextAnchor124)）。
- en: Knowing the resource usage is the first step in managing the resources that
    you have. In the following section, we will show you how to change the amount
    of resources a VM is using.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 了解资源的使用情况是管理现有资源的第一步。在接下来的部分，我们将向您展示如何更改虚拟机使用的资源量。
- en: Managing VM resource usage
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理虚拟机资源使用
- en: 'As shown earlier, knowing how many resources a VM is using can prove of great
    value. You would need to be able to modify the resources already in use if you
    run out of resources. You have tools available to modify the amount of vCPUs and
    RAM an existing VM is using. For example, let’s change the resources for our `ubuntu-vm1-clone1`
    VM from 2 vCPUs to 1 vCPU and from 2 GB of RAM to 1 GB of RAM. The command we
    will use is `virsh setvcpus`, and we will use it as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，了解虚拟机使用了多少资源非常重要。如果资源不足，您需要能够修改已经使用的资源。您可以使用工具来修改现有虚拟机使用的vCPU和RAM。例如，我们将把`ubuntu-vm1-clone1`虚拟机的资源从2个vCPU更改为1个vCPU，并将2GB的RAM更改为1GB的RAM。我们将使用的命令是`virsh
    setvcpus`，具体操作如下：
- en: '![Figure 11.17 – Changing the vCPU count for a VM](img/B19682_11_17.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图11.17 – 更改虚拟机的vCPU数量](img/B19682_11_17.jpg)'
- en: Figure 11.17 – Changing the vCPU count for a VM
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.17 – 更改虚拟机的vCPU数量
- en: 'We can also change the amount of RAM used with the `virsh setmem` and `virsh`
    `setmaxmem` commands:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`virsh setmem`和`virsh setmaxmem`命令更改使用的RAM数量：
- en: '![Figure 11.18 – Changing the memory used by a VM](img/B19682_11_18.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图11.18 – 更改虚拟机使用的内存](img/B19682_11_18.jpg)'
- en: Figure 11.18 – Changing the memory used by a VM
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.18 – 更改虚拟机使用的内存
- en: 'We can now check the resources used by the `ubuntu-vm1-clone1` VM using the
    `virsh dominfo` command, as shown in the following screenshot:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`virsh dominfo`命令检查`ubuntu-vm1-clone1`虚拟机的资源，如下图所示：
- en: '![Figure 11.19 – Checking the resources for a VM](img/B19682_11_19.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图11.19 – 检查虚拟机的资源](img/B19682_11_19.jpg)'
- en: Figure 11.19 – Checking the resources for a VM
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.19 – 检查虚拟机的资源
- en: As you can see, the resources used by the VM have been changed according to
    your new settings. Now that you know how to manage KVMs, which is a required asset
    for a Linux system administrator. In the next section, we will show you how to
    automate KVM VM provisioning using **cloud-init**.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，虚拟机所使用的资源已经根据您的新设置进行了更改。现在，您已经知道如何管理KVM，这是Linux系统管理员必备的技能。在接下来的部分，我们将向您展示如何使用**cloud-init**自动化KVM虚拟机的配置。
- en: Provisioning VMs using cloud-init
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用cloud-init配置虚拟机
- en: When you’re dealing with only one VM, things can be relatively simple. But when
    we have to create hundreds of VMs, manual creation can be daunting. One useful
    tool you can use for such a task is **cloud-init**. Another tool that is suitable
    for this kind of task is **Ansible** (there’s more on Ansible in [*Chapter 17*](B19682_17.xhtml#_idTextAnchor359)).
    In this section, we will cover only cloud-init. It was developed by Canonical
    to be used as a tool for configuring VM instances on cloud platforms, and it is
    written in Python. Currently, it is considered an industry standard for provisioning
    cloud images. In the next subsection, we will briefly explain to you how cloud-init
    works.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当您只处理一个虚拟机时，事情可以相对简单。但当我们需要创建数百个虚拟机时，手动创建就变得令人望而生畏。你可以用来执行这类任务的一个有用工具是**cloud-init**。另一个适合这种任务的工具是**Ansible**（更多关于
    Ansible 的内容请见[*第17章*](B19682_17.xhtml#_idTextAnchor359)）。在本节中，我们只讨论 cloud-init。它是由
    Canonical 开发的，用作在云平台上配置虚拟机实例的工具，并且是用 Python 编写的。目前，它被视为云镜像配置的行业标准。在下一小节中，我们将简要解释
    cloud-init 的工作原理。
- en: Understanding how cloud-init works
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 cloud-init 的工作原理
- en: According to the official cloud-init documentation, it is based on several configuration
    sources, specific boot stages, user data formats, vendor data, and instance metadata.
    The concept of boot stages is specific to cloud-init architecture, as it configures
    the entire instance during specific stages of the boot process. It provides a
    way for managing completely working instances that have networking, boot sequence,
    and local configuration files configured.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 根据官方的 cloud-init 文档，它基于多个配置源、特定的启动阶段、用户数据格式、供应商数据和实例元数据。启动阶段的概念是 cloud-init
    架构特有的，因为它在启动过程的特定阶段配置整个实例。它提供了一种管理完全工作的实例的方法，这些实例已经配置了网络、启动顺序和本地配置文件。
- en: Cloud-init is available on most widely used Linux distributions, such as Ubuntu,
    Debian, Red Hat Enterprise Linux, Fedora, SUSE, and openSUSE. We will use one
    of our Debian 12 systems as a host and install and configure cloud-init on it.
    We will show you how in the following subsection.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud-init 可在大多数常用的 Linux 发行版上使用，例如 Ubuntu、Debian、Red Hat Enterprise Linux、Fedora、SUSE
    和 openSUSE。我们将使用其中一台 Debian 12 系统作为主机，并在其上安装和配置 cloud-init。我们将在下一个小节中向您展示如何操作。
- en: Installing and configuring cloud-init
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置 cloud-init
- en: 'Even if its main purpose is to be used for cloud deployments, cloud-init can
    also be used locally. We will use it to deploy VMs on our local system. As a prerequisite
    for using cloud-init, a hypervisor should already be installed on your system,
    such as KVM. For the guest image, cloud-init uses specific cloud images that are
    already available from almost every Linux distribution provider. For example,
    we are planning on deploying Ubuntu VMs, thus we will need Ubuntu-optimized cloud
    images, which are available at [https://cloud-images.ubuntu.com/](https://cloud-images.ubuntu.com/).
    Let’s look at the steps required to prepare the image for deployment:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 即使它的主要目的是用于云部署，cloud-init 也可以在本地使用。我们将使用它在本地系统上部署虚拟机。使用 cloud-init 的前提是您的系统上已经安装了虚拟化管理程序，例如
    KVM。对于客户机镜像，cloud-init 使用特定的云镜像，这些镜像几乎可以从每个 Linux 发行版提供商那里获得。例如，我们计划部署 Ubuntu
    虚拟机，因此我们需要 Ubuntu 优化的云镜像，可以在[https://cloud-images.ubuntu.com/](https://cloud-images.ubuntu.com/)找到。接下来，让我们看看为部署准备镜像所需的步骤：
- en: 'First, we will install the `cloud-image-utils` additional package and then
    the `cloud-init` package:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将安装`cloud-image-utils`附加包，然后安装`cloud-init`包：
- en: '[PRE24]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The next step is to create a new directory for the new cloud images:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是为新的云镜像创建一个新目录：
- en: '[PRE25]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The next step is to download the cloud image:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是下载云镜像：
- en: '[PRE26]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then we get details for the cloud image file:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们获取云镜像文件的详细信息：
- en: '[PRE27]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then we resize the image:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们调整镜像大小：
- en: '[PRE28]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'libvirt directory:'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: libvirt 目录：
- en: '[PRE29]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: meta-data file will not be populated just yet. We will edit the user-data file
    first.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: meta-data 文件暂时不会被填充。我们将首先编辑 user-data 文件。
- en: '[PRE30]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Important note
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: At this point, we will need a pair of SSH keys to use to connect with the new
    VM we plan to create. As we have not shown you yet how to work with SSH keys,
    we will provide you with the needed information in the next subsection. Go ahead
    and read the *Public key authentication with SSH* section, then get back to this
    point, where we will continue configuring our cloud-init files.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们需要一对 SSH 密钥来与我们计划创建的新虚拟机连接。由于我们还没有展示如何使用 SSH 密钥，我们将在下一小节中提供相关信息。请先阅读*使用
    SSH 的公钥认证*部分，然后返回此处，我们将继续配置我们的 cloud-init 文件。
- en: 'Let’s create the `user-data` file and add the following information:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建 `user-data` 文件并添加以下信息：
- en: '![Figure 11.20 – The user-data file contents](img/B19682_11_20.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.20 – user-data 文件内容](img/B19682_11_20.jpg)'
- en: Figure 11.20 – The user-data file contents
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.20 – user-data 文件内容
- en: 'After the `user-data` file editing is finished, we can continue and create
    a disk image that will contain the configuration files. We will use the `cloud-localds`
    command from the `cloud-image-utils` package we installed earlier:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成 `user-data` 文件编辑后，我们可以继续创建一个包含配置文件的磁盘镜像。我们将使用之前安装的 `cloud-image-utils` 包中的
    `cloud-localds` 命令：
- en: '[PRE32]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: sudo virt-install --name vm01 --virt-type kvm --vcpus 1 --memory 2048 --disk
    path=/var/lib/libvirt/images/ubuntu.qcow2,device=disk --disk path=/var/lib/libvirt/images/cloud-init/ubuntu-provisioning.qcow2,device=cdrom
    --os-type linux --os-variant generic --import --network network=default --noautoconsole
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sudo virt-install --name vm01 --virt-type kvm --vcpus 1 --memory 2048 --disk
    path=/var/lib/libvirt/images/ubuntu.qcow2,device=disk --disk path=/var/lib/libvirt/images/cloud-init/ubuntu-provisioning.qcow2,device=cdrom
    --os-type linux --os-variant generic --import --network network=default --noautoconsole
- en: '[PRE33]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If you get any errors regarding the network activation, you might have to use
    the following commands to activate the default network:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果遇到与网络激活相关的错误，可能需要使用以下命令来激活默认网络：
- en: '[PRE34]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![Figure 11.21 – Creating a new VM](img/B19682_11_21.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.21 – 创建新的虚拟机](img/B19682_11_21.jpg)'
- en: Figure 11.21 – Creating a new VM
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.21 – 创建新的虚拟机
- en: 'We now have deployed a new VM using cloud-init. We can verify that it is running
    by using the `sudo virsh list` command or by using the Virtual Manager GUI. We
    will verify if the VM is running, we will find out the IP address and connect
    to it using SSH. We will use the following commands: `sudo virsh list` to check
    the state of the VM, `sudo virsh domifaddr vm01` to find its IP, and `ssh packt@192.168.122.32`
    to connect to it. The output is shown in the following screenshot:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经使用 cloud-init 部署了一台新虚拟机。可以通过使用 `sudo virsh list` 命令或通过虚拟管理器 GUI 来验证虚拟机是否正在运行。我们将验证虚拟机的运行状态，找出它的
    IP 地址并通过 SSH 连接到它。我们将使用以下命令：`sudo virsh list` 查看虚拟机状态，`sudo virsh domifaddr vm01`
    查找其 IP 地址，以及 `ssh packt@192.168.122.32` 连接到它。输出如下截图所示：
- en: '![Figure 11.22 – Connecting to the new VM using SSH](img/B19682_11_22.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.22 – 使用 SSH 连接到新虚拟机](img/B19682_11_22.jpg)'
- en: Figure 11.22 – Connecting to the new VM using SSH
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.22 – 使用 SSH 连接到新虚拟机
- en: We have successfully created and connected to a new VM using cloud-init. After
    finishing this section, you now possess the ability to deploy VMs using cloud-init.
    However, we have only scratched the surface of what cloud-init can do, so if you
    feel like you would like to learn more about it, please use the official documentation
    or any of the titles provided in the *Further reading* section at the end of the
    chapter.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功创建并通过 cloud-init 连接到一台新虚拟机。在完成本节内容后，您现在具备了使用 cloud-init 部署虚拟机的能力。然而，我们仅仅触及了
    cloud-init 的表面，因此，如果您希望了解更多内容，请查阅官方文档或本章结尾的 *进一步阅读* 部分提供的书籍。
- en: In the next section, we will show you how to use public key authentication with
    SSH.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将展示如何使用 SSH 进行公钥认证。
- en: Public key authentication with SSH
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SSH 进行公钥认证
- en: '`.ssh` directory in your user’s home directory. To generate a new pair of keys,
    you will have to use the `ssh-keygen` command.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`.ssh` 目录位于用户的主目录中。要生成一对新的密钥，您需要使用 `ssh-keygen` 命令。'
- en: 'It can be used with options, the most relevant ones being: `-t` to specify
    the type of encryption algorithm used, `-b` to specify the number of bits. Used
    with no option, the `ssh-keygen` command will use the RSA encryption algorithm
    and a 3,072-bit key. The following is the output for using the command as is:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以与选项一起使用，其中最相关的选项包括：`-t` 用于指定加密算法类型，`-b` 用于指定位数。未指定选项时，`ssh-keygen` 命令将使用
    RSA 加密算法和 3,072 位的密钥。以下是直接使用该命令时的输出：
- en: '![Figure 11.23 – Using the ssh-keygen to create a pair of SSH keys](img/B19682_11_23.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.23 – 使用 ssh-keygen 创建一对 SSH 密钥](img/B19682_11_23.jpg)'
- en: Figure 11.23 – Using the ssh-keygen to create a pair of SSH keys
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.23 – 使用 ssh-keygen 创建一对 SSH 密钥
- en: 'As mentioned earlier, the two keys are stored inside the `.ssh` directory.
    One will be called `id_rsa` and the other `id_rsa.pub`. For our use case, configuring
    cloud-init, we will need to use the public key. Thus, we will need to concatenate
    the contents of the `id_rsa.pub` file and copy the key. In our case, the contents
    are as follows:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，两个密钥存储在 `.ssh` 目录中。其中一个名为 `id_rsa`，另一个名为 `id_rsa.pub`。对于我们的使用案例——配置 cloud-init，我们将需要使用公钥。因此，我们需要将
    `id_rsa.pub` 文件的内容合并并复制该密钥。在我们的情况下，内容如下：
- en: '![Figure 11.24 – The SSH public key](img/B19682_11_24.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.24 – SSH 公钥](img/B19682_11_24.jpg)'
- en: Figure 11.24 – The SSH public key
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.24 – SSH 公钥
- en: 'However, if we need to use those keys to connect to a cloud instance of a virtual
    private server or a VM, the public key needs to be safely copied to that machine
    or instance. For this, we will use the `ssh-copy-id` command. When using the command,
    we will need to provide a username and an IP address or hostname for the destination
    machine. For example, if we were to copy the SSH public key to a VM that has the
    IP `192.168.122.48` and a user `packt`, we would use the following command:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们需要使用这些密钥连接到云实例的虚拟私人服务器或虚拟机，则需要安全地将公钥复制到该机器或实例。为此，我们将使用 `ssh-copy-id`
    命令。使用该命令时，我们需要提供用户名以及目标机器的 IP 地址或主机名。例如，如果我们需要将 SSH 公钥复制到 IP 为 `192.168.122.48`，用户名为
    `packt` 的虚拟机，我们将使用以下命令：
- en: '[PRE35]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: More details on how to install and configure an SSH server will be provided
    in [*Chapter 13*](B19682_13.xhtml#_idTextAnchor276). The information shown here
    is sufficient for our cloud-init task.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如何安装和配置 SSH 服务器的更多细节将在[*第 13 章*](B19682_13.xhtml#_idTextAnchor276)中提供。这里展示的信息足以完成我们的
    cloud-init 任务。
- en: Virtualization is an important part of computing, providing the technology needed
    to take advantage of the tremendous computing power that modern systems provide.
    It gives you the ability to get the most out of your investment in hardware technology.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化是计算中的一个重要组成部分，它提供了充分利用现代系统所提供的巨大计算能力所需的技术。它使你能够最大化硬件技术的投资回报。
- en: Summary
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we emphasized the importance of virtualization on a Linux system.
    We showed you how to create and manage VMs using KVM. You know how to clone, template,
    and manage resources for VMs; and you know how virtualization works and how to
    install the QEMU/KVM hypervisor on Linux. With those assets, you are prepared
    to start your path into virtualization with no fears.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们强调了虚拟化在 Linux 系统中的重要性。我们向你展示了如何使用 KVM 创建和管理虚拟机。你现在知道如何克隆、模板化和管理虚拟机的资源；并且了解虚拟化的工作原理，以及如何在
    Linux 上安装 QEMU/KVM 虚拟机监控程序。有了这些技能，你可以无畏地开始你的虚拟化之路。
- en: In the next chapter, we will introduce you to Docker container technologies.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将向你介绍 Docker 容器技术。
- en: Exercises
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Here’s a brief quiz about some of the essential concepts that were covered
    in this chapter:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简短的测试，涵盖了本章介绍的一些基本概念：
- en: Enumerate and describe the types of hypervisors.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举并描述虚拟化监控程序的类型。
- en: Practice by installing a hypervisor on many Linux hosts.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在多个 Linux 主机上安装虚拟化监控程序进行实践。
- en: Verify whether your hypervisor is working correctly.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您的虚拟化监控程序是否正常工作。
- en: '`virt-host-validate`.'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`virt-host-validate`。'
- en: Can you think of significant differences between major hypervisors?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能想到主要虚拟化监控程序之间的显著差异吗？
- en: '**Hint**: Test KVM and VirtualBox for example, and make a comparison.'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**：例如，测试 KVM 和 VirtualBox，并进行比较。'
- en: How can you find the IP addresses of VMs?
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何查找虚拟机的 IP 地址？
- en: '`virsh` `domifaddr` command.'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`virsh` `domifaddr` 命令。'
- en: Further reading
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information on the topics covered in this chapter, you can refer to
    the following Packt books:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解本章讨论的主题，您可以参考以下 Packt 图书：
- en: '*Mastering KVM Virtualization – Second Edition*, Vedran Dakic, Humble Devassy
    Chirammal, Prasad Mukhedkar, Anil Vettathu'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*掌握 KVM 虚拟化 – 第二版*，Vedran Dakic、Humble Devassy Chirammal、Prasad Mukhedkar、Anil
    Vettathu'
- en: '*KVM Virtualization Cookbook*, Konstantin Ivanov'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*KVM 虚拟化食谱*，Konstantin Ivanov'
- en: For detailed information about the inner workings of cloud-init, visit the official
    documentation website at [https://cloudinit.readthedocs.io/en/latest/explanation/index.html](https://cloudinit.readthedocs.io/en/latest/explanation/index.html).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 cloud-init 内部工作原理的详细信息，请访问官方网站：[https://cloudinit.readthedocs.io/en/latest/explanation/index.html](https://cloudinit.readthedocs.io/en/latest/explanation/index.html)。

- en: Chapter 7. Compiling the Bootloader and Kernel Using a BSP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章 使用 BSP 编译引导加载程序和内核
- en: Sometimes, a special feature in the kernel is required that is not included
    in the precompiled binaries, or maybe some new piece of Allwinner-based hardware
    was obtained that is not yet supported in the existing list of precompiled files.
    To solve issues like these, you need to compile the bootloader or kernel from
    source. While it is perfectly possible to download and compile the bootloader
    and the kernel by itself, the linux-sunxi community developed a **board-support-package**
    (**BSP**) that allows you to compile all these components together.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，内核中需要某个特别的功能，但该功能并未包含在预编译的二进制文件中，或者可能获得了某个基于 Allwinner 的新硬件，而该硬件还没有在现有的预编译文件列表中得到支持。为了解决这些问题，需要从源代码编译引导加载程序或内核。虽然可以单独下载并编译引导加载程序和内核，但
    linux-sunxi 社区开发了一个**板支持包**（**BSP**），允许你将所有这些组件一起编译。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及以下主题：
- en: Installing a toolchain
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装工具链
- en: Obtaining and using the BSP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取并使用 BSP
- en: Compiling the bootloader
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译引导加载程序
- en: Compiling the kernel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译内核
- en: Creating a hardware pack
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建硬件包
- en: Prerequisites
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: Compiling things requires a compiler toolchain. Here, there are two options.
    Either compile on Cubieboard itself or cross compile on a regular PC. Getting
    a functional toolchain working on anything but Linux is up the reader to solve.
    The options are thus to use the installation created in the previous chapters
    and compile directly on Cubieboard or to have a (virtual) Linux machine available
    where a cross-compiler can be installed and used. In this chapter, both the methods
    will be described. Additionally, a working Internet connection on the device that
    is being used to compile on is initially required; this is to obtain the source
    code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 编译需要一个编译工具链。在这里，有两种选择。要么在 Cubieboard 上直接编译，要么在普通 PC 上进行交叉编译。除 Linux 外，其他系统上使工具链正常工作需要读者自行解决。因此，选择是使用前几章创建的安装环境，直接在
    Cubieboard 上编译，或者使用可用的（虚拟）Linux 机器，安装并使用交叉编译器。本章将描述这两种方法。此外，编译设备需要初始的互联网连接，用于获取源代码。
- en: Installing a toolchain
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装工具链
- en: A toolchain is a collection of tools, including a compiler, required to compile
    the source code into binary forms. In theory, just the compiler is enough, but
    various other bits and pieces are often used to help with the compilation. One
    such example might be well known, the `make` command. A combination of all the
    tools required to compile things is known as a toolchain. Installing a toolchain
    varies from distribution to distribution; we will only cover a few examples here.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 工具链是一组工具，包括一个编译器，必要时用于将源代码编译为二进制文件。从理论上讲，仅编译器就足够了，但通常还需要其他工具来辅助编译。一个常见的例子就是大家熟悉的
    `make` 命令。所有编译所需工具的集合被称为工具链。安装工具链在不同的发行版中有所不同；我们这里只介绍一些例子。
- en: Debian or Ubuntu
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Debian 或 Ubuntu
- en: For Debian, the toolchain is called `build-essential`, and when cross-compiling,
    the arm compiler needs to be installed on top of that; this package is called
    `gcc-arm-none-eabi`. Unfortunately, at the time of writing this book, the `gcc-arm-none-eabi`
    package did not exist in Debian wheezy. The version to be released after wheezy
    is jessie, which contains this cross compiler. One way to get it is to set up
    a virtual machine and install the testing version of Debian there.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Debian，工具链被称为 `build-essential`，当进行交叉编译时，需要在此基础上安装 arm 编译器；这个包名为 `gcc-arm-none-eabi`。遗憾的是，在编写本书时，`gcc-arm-none-eabi`
    包在 Debian wheezy 中并不存在。wheezy 之后发布的版本是 jessie，其中包含了这个交叉编译器。获取它的一个方法是设置虚拟机并在其中安装
    Debian 的测试版。
- en: Fedora
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fedora
- en: On Fedora, the installation is slightly different. Here, the `groupinstall`
    variant needs to be used to install the `Development Tools` and `Development Libraries`
    packages. To cross compile, install the `gcc-arm-linux-gnu` package in addition
    to that. It is necessary to use double quotes ("") due to the spaces in the meta
    packages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Fedora 上，安装过程稍有不同。这里需要使用 `groupinstall` 变体来安装 `Development Tools` 和 `Development
    Libraries` 包。为了进行交叉编译，还需要安装 `gcc-arm-linux-gnu` 包。由于元包中有空格，使用双引号（""）是必要的。
- en: Other distributions
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他发行版
- en: Fedora and Debian are of course only two distributions out of the potential
    hundreds. These two distributions, however, give you a very good indication of
    how most other distributions handle the installation of the toolchain. These two
    significant distributions do it differently. For the Gentoo distribution, there
    is a crossdev toolset, which will compile and install a cross-compiler toolchain.
    After installing crossdev, use `crossdev --target arm-pc-linux-gnueabi` to install
    the arm toolchain. The arch distribution has the `gcc-arm-linux-gnueabihf-bin`
    package in the **Arch User Repository** (**AUR**).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora和Debian当然只是潜在数百个发行版中的两个。然而，这两个发行版很好地指示了其他大多数发行版如何处理工具链的安装。这两个重要的发行版安装方式不同。对于Gentoo发行版，有一个crossdev工具集，它会编译并安装一个交叉编译器工具链。安装crossdev后，使用`crossdev
    --target arm-pc-linux-gnueabi`来安装arm工具链。Arch发行版在**Arch用户仓库**（**AUR**）中提供了`gcc-arm-linux-gnueabihf-bin`包。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are also vendor-supplied toolchains, such as the ones supplied by Linaro
    and CodeSourcery, for example. These are to be manually downloaded from the vendor
    site. Often, the toolchain comes in a tarball or a ZIP package and needs to be
    manually extracted. These toolchains are commonly used when no native arm-toolchain
    is available. Linaro even offers their cross-compiler for OSX and Windows; however,
    these two require an immense amount of work before you can start compiling.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些厂商提供的工具链，例如Linaro和CodeSourcery提供的工具链。这些工具链需要从厂商网站手动下载。通常，工具链以tarball或ZIP包的形式提供，并需要手动解压。这些工具链通常在没有本地arm-toolchain时使用。Linaro甚至为OSX和Windows提供了交叉编译器；然而，这两者需要大量的工作才能开始编译。
- en: Other required tools and packages
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他必需的工具和软件包
- en: Having obtained a complete toolchain, a few other packages are still required.
    Git is a tool used for source-code management; the package is named `git` on almost
    all distributions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 获取了完整的工具链后，仍然需要其他一些软件包。Git是用于源代码管理的工具；该软件包在几乎所有发行版中都被命名为`git`。
- en: Additionally, `u-boot-tools` is required. The package is also named `u-boot-tools`
    or `uboot-mkimage` on some distributions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还需要`u-boot-tools`。在某些发行版中，该软件包也被称为`u-boot-tools`或`uboot-mkimage`。
- en: On some distributions, when installing the toolchain, as described earlier,
    the **pkg-config** package sometimes doesn't get installed and needs to be installed
    on the distributions that lack it. The package is nearly always called pkg-config.
    To compile some of the tools, the `libusb` header files are required. The package
    name can vary between distributions. On Fedora, it is called **libusb-devel**.
    On Debian and Ubuntu, it is called **libusb-1.0-0-dev**. Please note that `libusb`
    is often available under several versions in many distributions. The version required
    is `1.0`, and other versions may cause the compilation to fail.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些发行版中，如前所述，在安装工具链时，**pkg-config**软件包有时没有被安装，需要在缺少该软件包的发行版上手动安装。该软件包几乎总是被称为pkg-config。为了编译某些工具，`libusb`头文件是必需的。该软件包的名称在不同的发行版中可能有所不同。在Fedora中，它被称为**libusb-devel**。在Debian和Ubuntu中，它被称为**libusb-1.0-0-dev**。请注意，`libusb`在许多发行版中通常有多个版本。所需版本是`1.0`，其他版本可能会导致编译失败。
- en: Finally, the *ncurses* header files and libraries are required; the package
    is called either **ncurses-dev** or **ncurses-devel**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，需要*ncurses*头文件和库；该软件包被称为**ncurses-dev**或**ncurses-devel**。
- en: Obtaining and maintaining the BSP
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取和维护BSP
- en: 'Whether the BSP is going to get cross-compiled or natively compiled, obtaining
    and using it is identical, and thus the instructions are common. All the code
    are stored on a git-server, and GitHub or Gitorious can and should be used as
    the main mirrors to obtain them from. Using Git, the repository can be cloned
    from one of the mirrors, as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 无论BSP是进行交叉编译还是本地编译，获取和使用的方式是相同的，因此说明也是通用的。所有代码都存储在git服务器上，可以并且应该使用GitHub或Gitorious作为主要镜像来获取代码。使用Git，可以从其中一个镜像克隆仓库，如下图所示：
- en: '![Obtaining and maintaining the BSP](img/1572OS_07_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![获取和维护BSP](img/1572OS_07_01.jpg)'
- en: 'After entering sunxi-bsp, the following list of files and directories will
    be visible:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 进入sunxi-bsp目录后，将会看到以下文件和目录列表：
- en: '![Obtaining and maintaining the BSP](img/1572OS_07_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![获取和维护BSP](img/1572OS_07_02.jpg)'
- en: 'Let us take a minute to quickly go over this list of file directories, of which
    some are actually separate Git repositories:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花一点时间快速浏览一下这些文件目录列表，其中有些实际上是独立的Git仓库：
- en: '`allwinner-tools`: This is a collection of files, drivers, and tools when working
    with the Allwinner-supplied material, such as livesuit. It is not of importance
    when working with the community tools.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allwinner-tools`：这是一个文件、驱动程序和工具的集合，用于处理全志提供的材料，如 livesuit。它在使用社区工具时并不重要。'
- en: '`rootfs`: These are the files to be placed into the generated root filesystem,
    commonly named `rootfs`.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rootfs`：这些是要放入生成的根文件系统中的文件，通常称为`rootfs`。'
- en: '`sunxi-boards`: These are the FEX files of the community-supported boards.
    Refer to [Appendix C](apc.html "Appendix C. The FEX Configuration File"), *The
    FEX Configuration File*, for more information about FEX.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sunxi-boards`：这些是社区支持的开发板的 FEX 文件。有关 FEX 的更多信息，请参见[附录 C](apc.html "附录 C. FEX
    配置文件")，*FEX 配置文件*。'
- en: '`u-boot-sunxi`: This is the community-developed bootloader.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`u-boot-sunxi`：这是社区开发的引导加载程序。'
- en: '`cedarx-libs`: These are proprietary libraries for the **Video Processing Unit**
    (**VPU**) supplied by Allwinner.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cedarx-libs`：这些是全志提供的专有**视频处理单元**（**VPU**）的库。'
- en: '`linux-sunxi`: This is the community-developed Linux kernel.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linux-sunxi`：这是社区开发的 Linux 内核。'
- en: '`scripts`: These are various scripts used by BSP.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scripts`：这些是 BSP 使用的各种脚本。'
- en: '`sunxi-tools`: These are community-developed tools to work with Allwinner hardware,
    including the FEX to a binary `script.bin` compiler.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sunxi-tools`：这些是与全志硬件一起使用的社区开发工具，包括将 FEX 文件编译成二进制 `script.bin` 的工具。'
- en: '`Makefile`: This is a file to control how to compile various repositories.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Makefile`：这是一个控制如何编译各种仓库的文件。'
- en: '`Configure`: This is a script to choose and configure the entire BSP.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Configure`：这是一个选择和配置整个 BSP 的脚本。'
- en: '`README.md`: This is a simple text file with some basic usage instructions.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`：这是一个简单的文本文件，包含一些基本的使用说明。'
- en: Updating the repositories
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新仓库
- en: 'Some of the directories within the BSP are not yet populated. The BSP is smart
    enough to populate the required repositories by itself as and when it needs them.
    If, however, one of the repositories is to be manually populated or more importantly,
    updated, Git can be used to do so. Adding the `–init` parameter after the update
    is required when updating the repository for the first time, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: BSP 中的一些目录尚未填充。BSP 足够智能，能够在需要时自动填充所需的仓库。然而，如果某个仓库需要手动填充或更重要的是更新，可以使用 Git 来进行操作。更新仓库时，第一次使用时需要添加`–init`参数，具体如下：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Omitting the last parameter, in this case, `sunxi-tools`, will update and populate
    all the Git subrepositories. However, this will not always yield the latest version
    of the repository. The BSP controls the version of each repository to use. It
    can be said that it locks each of the subrepositories to a certain version. The
    BSP itself can be updated using Git, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略最后一个参数，在这种情况下是`sunxi-tools`，将会更新并填充所有 Git 子仓库。然而，这并不总是会获得仓库的最新版本。BSP 控制每个仓库使用的版本。可以说，它将每个子仓库锁定到某个特定版本。可以通过
    Git 更新 BSP，具体如下：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If, however, the BSP is not updated or does not include the latest updates
    to subrepositories, the subrepositories can be manually updated. To update one
    of the repositories, enter it, and use the regular Git commands to update or check
    out a different branch as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 BSP 没有更新或没有包含子仓库的最新更新，可以手动更新子仓库。要更新某个仓库，进入该仓库并使用常规 Git 命令来更新或切换到不同的分支，具体如下：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Do note that this could potentially break the version control of the BSP itself.
    Or rather, the local BSP will no longer match the official BSP. To delete all
    changes made to the local subrepository and bring the BSP in sync with the upstream
    version, the following command can be used:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这可能会破坏 BSP 本身的版本控制。也就是说，本地的 BSP 将不再与官方 BSP 匹配。为了删除本地子仓库所做的所有更改，并使 BSP 与上游版本同步，可以使用以下命令：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Updating and modifying the submodules in Git is perfectly safe and is done frequently
    by developers. Do be careful when getting started and even more so when unfamiliar
    with Git.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 更新和修改 Git 中的子模块是完全安全的，开发者经常进行此操作。刚开始使用时需要小心，尤其是在不熟悉 Git 的情况下。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some experience with version control systems, especially Git, is strongly recommended
    before tinkering with the repositories. In case all else fails, feel assured that
    it is always possible to remove the BSP and start again.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议在修改仓库之前，具备一定的版本控制系统，特别是 Git 的经验。如果一切失败，放心，总是可以删除 BSP 并重新开始。
- en: Choosing a kernel
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择内核
- en: 'As discussed in [Chapter 6](ch06.html "Chapter 6. Updating the Bootloader and
    Kernel"), *Updating the Bootloader and Kernel*, there are a few different kernels
    available. These kernels are built from the various branches available in the
    Git repository. Listing these branches is done using the `git branch` command,
    with the addition of the `-a` parameter telling Git to show all the available
    branches. In the following screenshot, the kernels discussed in [Chapter 6](ch06.html
    "Chapter 6. Updating the Bootloader and Kernel"), *Updating the Bootloader and
    Kernel*, should be recognizable:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第6章](ch06.html "第6章. 更新引导加载程序和内核")中讨论的，*更新引导加载程序和内核*，有几个不同的内核可供选择。这些内核是根据Git仓库中可用的不同分支构建的。使用`git
    branch`命令可以列出这些分支，添加`-a`参数告诉Git显示所有可用的分支。在下面的截图中，讨论过的内核应该是[第6章](ch06.html "第6章.
    更新引导加载程序和内核")，*更新引导加载程序和内核*，可以识别出来：
- en: '![Choosing a kernel](img/1572OS_07_03.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![选择内核](img/1572OS_07_03.jpg)'
- en: 'The detached branch, in this case, is the kernel version that is linked to
    the BSP at the time of writing this book. Using `git checkout`, it is easy to
    switch to an alternative branch and eventually to a kernel. This can be seen in
    the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个分离的分支，在本书编写时，正是与BSP相关联的内核版本。使用`git checkout`，可以轻松切换到其他分支，最终切换到一个内核。这可以在下面的截图中看到：
- en: '![Choosing a kernel](img/1572OS_07_04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![选择内核](img/1572OS_07_04.jpg)'
- en: Compiling for a Cubieboard
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Cubieboard编译
- en: 'Before compiling for a Cubieboard, the BSP has to be configured first. Whenever
    building for a different development board, the BSP will have to be reconfigured.
    This however, is an easy task using the configure script. Running configure without
    a parameter will populate the `sunxi-boards` repository, as that repository contains
    a list of supported boards and prints a list of available boards, as shown in
    the following code. Take note of the prefix `./`, which is used to the configure
    the script. The output generated by configure is reduced here for clarity and
    convenience:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在为Cubieboard编译之前，必须首先配置BSP。每当为不同的开发板进行构建时，都必须重新配置BSP。然而，使用配置脚本，这是一项非常简单的任务。运行没有参数的configure会填充`sunxi-boards`仓库，因为该仓库包含一个受支持的开发板列表，并会打印出可用的板子列表，如以下代码所示。请注意前缀`./`，它用于配置脚本。为了清晰和方便，这里简化了configure的输出：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There are two variants for each board that are to be passed to the configure
    script; the Android variant is specifically used to build Android kernels. While
    Android is Linux, there are some small differences that need to be accounted for.
    In the following example, the BSP is configured to build for Cubieboard2:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每块开发板都有两个变体，需要传递给配置脚本；Android变体专门用于构建Android内核。虽然Android是Linux，但仍然有一些小差异需要考虑。在下面的示例中，BSP被配置为构建Cubieboard2：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, before running, as suggested by the BSP, one more thing needs to be mentioned.
    The BSP wants to know what compiler to use, and it knows this from the `CROSS_COMPILE=`
    parameter. By default, this parameter is forced to `arm-linux-gnueabihf-` via
    the Makefile, which is the prefix to the installed arm compiler. Thus `gcc` is
    expected to be named `arm-linux-gnueabihf-gcc`. Things get more interesting when
    compiling natively on one of these boards. This is because in theory, no cross-compiler
    is desired, `gcc` should just be called gcc. To remedy this, pass an empty `CROSS_COMPILE=`
    parameter to make, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在运行之前，按照BSP的建议，还有一件事情需要提到。BSP希望知道使用什么编译器，它通过`CROSS_COMPILE=`参数来判断。默认情况下，Makefile会强制此参数为`arm-linux-gnueabihf-`，这是已安装的arm编译器的前缀。因此，`gcc`预计会命名为`arm-linux-gnueabihf-gcc`。当在这些板子上本地编译时，情况变得更加有趣。这是因为理论上，不需要交叉编译器，`gcc`应该直接称为gcc。为了解决这个问题，可以传递一个空的`CROSS_COMPILE=`参数给make，如下所示：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Otherwise, the installed compiler prefix needs to be added, and yes, the dash
    at the end is a part of the prefix. If you are compiling on Debian, the following
    command can be used:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，需要添加已安装的编译器前缀，是的，末尾的破折号是前缀的一部分。如果在Debian上进行编译，可以使用以下命令：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Every distribution tends to name their cross-compiler differently; there is
    no right or wrong. Using arm- and double tab completion should yield the prefix
    for almost all distributions. Also, adding the correct cross-compiler prefix to
    the Makefile can be very helpful here.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每个发行版通常会使用不同的交叉编译器名称，这没有对错之分。使用arm-并双击Tab补全，几乎可以找到所有发行版的前缀。另外，向Makefile中添加正确的交叉编译器前缀也非常有帮助。
- en: Depending on the amount of memory and which system is used to perform the compilation,
    this could take from several minutes to an hour or two! If there are strange crashes
    or problems, before looking at [Appendix A](apa.html "Appendix A. Getting Help
    and Finding Other Helpful Online Resources"), *Getting Help and Other Helpful
    Online Resources*, about contacting the community for support, make sure that
    the chosen board is properly supported and supplied with adequate power. Quite
    often, overclocked memory or a lack of enough power will show up under the heavy
    stresses that a kernel compilation encompasses.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 根据内存大小以及所使用的系统来进行编译，这个过程可能需要从几分钟到一两个小时不等！如果出现奇怪的崩溃或问题，在查看[附录 A](apa.html "附录
    A. 获取帮助与寻找其他有用的在线资源")，*获取帮助与其他有用的在线资源*，以及如何联系社区寻求支持之前，请确保所选主板得到了充分的支持，并且电源供应充足。通常情况下，超频内存或电力不足会在内核编译的高负荷下表现出来。
- en: 'While it is nice to be able to compile the standard kernel, often, someone
    will want to compile a kernel due to customization, for example, with certain
    drivers or options added or removed. Even a custom patch is something that needs
    a custom-compiled kernel. Normally, the `menuconfig` command is used in a kernel
    directory. The BSP also allows this by passing the `linux-config` parameter to
    the `make` command, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然能够编译标准内核是件不错的事情，但通常情况下，有人会因为定制需求而编译内核，例如添加或移除某些驱动程序或选项。即使是定制补丁，也需要定制编译内核。通常情况下，`menuconfig`命令用于内核目录。BSP（板级支持包）也支持此操作，通过将`linux-config`参数传递给`make`命令，如下所示：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Following this will yield a standard `menuconfig` session.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随这些步骤会进入一个标准的`menuconfig`会话。
- en: Some other parameters to the `make` command are Linux or u-boot, which are used
    to compile only the Linux kernel or only u-boot. The resulting binaries will be
    located under the `sunxi-bsp/build` directory under their own respective trees.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`make`命令的其他一些参数有Linux或u-boot，它们仅用于编译Linux内核或仅编译u-boot。生成的二进制文件将位于`sunxi-bsp/build`目录下各自的子目录中。'
- en: When the compilation is completed, a so-called hwpack or hardware pack is created
    in the `sunxi-bsp/output` directory. The hardware pack is an archive containing
    three subdirectories. The first is called `bootloader` and contains the `u-boot-sunxi-with-spl.bin`
    bootloader.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成时，所谓的hwpack或硬件包将会在`sunxi-bsp/output`目录中创建。硬件包是一个包含三个子目录的归档文件。第一个子目录叫做`bootloader`，其中包含`u-boot-sunxi-with-spl.bin`引导加载程序。
- en: In the `kernel` subdirectory, the board-specific kernel, named `uImage`, lives
    combined with the board specific `script.bin` file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`kernel`子目录下，特定板子的内核名为`uImage`，与特定板子的`script.bin`文件一起存放。
- en: The final directory is the `rootfs` directory. This directory contains everything
    specific for the chosen target board. The content can and should be copied to
    the target root filesystem.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的目录是`rootfs`目录。这个目录包含了所有特定于所选目标板的内容。内容可以并且应该被复制到目标根文件系统中。
- en: Installing the files in the hwpack, specifically the bootloader, was described
    well in the [Chapter 6](ch06.html "Chapter 6. Updating the Bootloader and Kernel"),
    *Updating the Bootloader and Kernel*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章 更新引导加载程序和内核")中，已详细描述了安装hwpack中的文件，特别是引导加载程序，*更新引导加载程序和内核*。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, the basics of the BSP were covered. Using the BSP in combination
    with Git, which is a powerful tool to download and manage the various source repositories,
    you can compile various components and generate an easy-to-use device-specific
    hardware pack.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了BSP的基础知识。通过结合使用Git这个强大的工具来下载和管理各种源代码仓库，你可以编译各种组件，并生成一个易于使用的设备专用硬件包。
- en: The next chapter will cover **general purpose input output pins** (**GPIOs**).
    This can be useful to do various jobs, including blinking an LED!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍**通用输入输出引脚**（**GPIOs**）。这对于执行各种任务非常有用，包括让LED闪烁！

- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Managing Users and Groups
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理用户和用户组
- en: Linux is a multiuser, multitasking operating system, which means multiple users
    can access the operating system at the same time while sharing platform resources,
    with the kernel performing tasks for each user concurrently and independently.
    Linux provides the required isolation and security mechanisms to avoid multiple
    users accessing or deleting each other’s files.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 是一个多用户、多任务的操作系统，这意味着多个用户可以同时访问操作系统，并共享平台资源，内核为每个用户并发独立地执行任务。Linux 提供了所需的隔离和安全机制，以防止多个用户访问或删除彼此的文件。
- en: When multiple users are accessing the system, permissions come into play. We’ll
    learn how `root`) account, with complete access to the operating system resources.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当多个用户访问系统时，权限将发挥作用。我们将学习如何使用 `root` 帐户，完全访问操作系统资源。
- en: 'Along the way, we’ll take a hands-on approach to the topics learned, further
    deepening the assimilation of key concepts through practical examples. This chapter
    covers the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们将采取实践操作的方法来加深对关键概念的理解，通过实际示例进一步巩固所学内容。本章涵盖以下主题：
- en: Managing users
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理用户
- en: Managing groups
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理用户组
- en: Managing permissions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理权限
- en: We hope that by the end of the chapter, you will be comfortable with the command-line
    utilities for creating, modifying, and deleting users and groups, while proficiently
    handling file and directory permissions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在本章结束时，你能熟练使用命令行工具来创建、修改和删除用户和用户组，同时熟练处理文件和目录权限。
- en: Let’s take a quick look at the technical requirements for this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下本章的技术要求。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You need a working Linux distribution installed on either a **virtual machine**
    (**VM**) or a desktop platform. In case you don’t have one already, [*Chapter
    1*](B19682_01.xhtml#_idTextAnchor030), *Installing Linux*, will drive you through
    the related process. In this chapter, we’ll be using Ubuntu or Fedora, but most
    of the commands and examples used would pertain to any other Linux platform.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在 **虚拟机**（**VM**）或桌面平台上安装一个工作的 Linux 发行版。如果你还没有安装，可以参考 [*第一章*](B19682_01.xhtml#_idTextAnchor030)，*安装
    Linux*，它将引导你完成相关的过程。在本章中，我们将使用 Ubuntu 或 Fedora，但大部分命令和示例也适用于其他任何 Linux 平台。
- en: Managing users
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理用户
- en: In this context, a **user** is anyone using a computer or a system resource.
    In its simplest form, a Linux *user* or *user account* is identified by a name
    and a **unique identifier**, known as a **UID**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个上下文中，**用户**是指任何使用计算机或系统资源的人。最简单的形式下，Linux *用户* 或 *用户帐户* 是通过一个名称和一个 **唯一标识符**（即
    **UID**）来识别的。
- en: 'From a purely technical point of view, in Linux, we have the following types
    of users:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从纯粹的技术角度来看，Linux 中有以下几种类型的用户：
- en: '**Normal (or regular) users**: General-purpose, everyday user accounts, mostly
    suited for personal use and for common application and file management tasks,
    with limited access to system-wide resources. A regular user account usually has
    a *login* shell and a *home* directory.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**普通（或常规）用户**：通用的日常用户帐户，主要适用于个人使用和常见应用程序及文件管理任务，访问系统范围资源的权限有限。常规用户帐户通常具有 *登录*
    shell 和 *主目录*。'
- en: '`root` privileges. Consequently, possible vulnerabilities exposed through the
    web server would remain strictly isolated to the limited action realm of the associated
    system account.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root` 权限。因此，通过 web 服务器暴露的潜在漏洞将严格局限于相关系统帐户的操作范围。'
- en: '`root` user is an example of a superuser.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root` 用户是超级用户的一个例子。'
- en: In Linux, only the `root` user or users with `sudo` privileges (**sudoers**)
    can create, modify, or delete user accounts.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中，只有 `root` 用户或具有 `sudo` 权限的用户（**sudoers**）才能创建、修改或删除用户帐户。
- en: Understanding sudo
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 sudo
- en: The `root` user is the default superuser account in Linux, and it has the ability
    to do anything on a system. Ideally, acting as `root` on a system should generally
    be avoided due to safety and security reasons. With `sudo`, Linux provides a mechanism
    for *promoting* a regular user account to superuser privileges, using an additional
    layer of security. This way, a `sudo` user is generally used instead of `root`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`root` 用户是 Linux 中的默认超级用户帐户，具有在系统上执行任何操作的能力。理想情况下，由于安全和保护原因，应该尽量避免以 `root`
    身份在系统上操作。通过 `sudo`，Linux 提供了一种将普通用户帐户提升为超级用户权限的机制，并增加了安全层级。通过这种方式，通常使用 `sudo`
    用户，而不是 `root` 用户。'
- en: '`sudo` is a command-line utility that allows a permitted user to execute commands
    with the security privileges of a superuser or another user (depending on the
    local system’s security policy). `sudo` originally stood for *superuser do* due
    to its initial implementation of acting exclusively as the superuser, but has
    since been expanded to support not only the superuser but also other (restricted)
    user impersonations. Thus, it is also referred to as *substitute user do*. Yet,
    more often than not, it is perceived as *superuser do* due to its frequent use
    in Linux administrative tasks.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo` 是一个命令行工具，允许被授权的用户以超级用户或其他用户（取决于本地系统的安全策略）的权限执行命令。`sudo` 最初代表 *superuser
    do*，因为最初它仅作为超级用户使用，但后来扩展为支持不仅是超级用户，还有其他（受限）用户的身份模拟。因此，它也被称为 *substitute user do*。然而，由于它在
    Linux 管理任务中的频繁使用，它通常仍然被看作是 *superuser do*。'
- en: Most of the command-line tools for managing users in Linux require `sudo` privileges
    unless the related tasks are carried out by the `root` user. If we want to avoid
    using the root context, we can’t genuinely proceed with the rest of this chapter—and
    create a user in particular—before we have a user account with superuser privileges.
    So, let’s take this chicken-and-egg scenario out of the way first.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数用于管理 Linux 用户的命令行工具需要 `sudo` 权限，除非相关任务是由 `root` 用户执行。如果我们想避免使用 root 上下文，在我们拥有超级用户权限的用户帐户之前，不能真正继续本章的其余内容——特别是创建用户。因此，让我们先解决这个“先有鸡还是先有蛋”的问题。
- en: 'Most Linux distributions create an additional user account with superuser privileges,
    besides `root`, during installation. The reason, as noted before, is to provide
    an extra layer of security and safety for elevated operations. The simplest way
    to check whether a user account has `sudo` privileges is to run the following
    command in a terminal, while logged in with the related user account:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 发行版在安装过程中除了 `root` 用户外，还会创建一个具有超级用户权限的附加用户帐户。如前所述，这是为了在进行高级操作时提供额外的安全保护。检查用户帐户是否具有
    `sudo` 权限的最简单方法是，在终端中以相关用户帐户登录时运行以下命令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: According to the `sudo` manual (`man sudo`), the `-v` option causes `sudo` to
    update the user’s cached credentials and authenticate the user if the cached credentials
    expired.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `sudo` 手册（`man sudo`），`-v` 选项会使 `sudo` 更新用户的缓存凭证，并在缓存凭证过期时重新认证用户。
- en: 'If the user (for example, `julian`) doesn’t have superuser privileges on the
    local machine (for example, `neptune`), the preceding command yields the following
    (or a similar) error:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户（例如，`julian`）在本地机器上没有超级用户权限（例如，`neptune`），前面的命令将产生如下错误（或类似错误）：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: useradd [OPTIONS] USER
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: useradd [OPTIONS] USER
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: sudo useradd julian
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: sudo useradd julian
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: sudo cat /etc/passwd | grep julian
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: sudo cat /etc/passwd | grep julian
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: getent passwd julian
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: getent passwd julian
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: id julian
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: id julian
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: sudo useradd -m julian
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: sudo useradd -m julian
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: sudo useradd -m -c "Julian" julian
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: sudo useradd -m -c "Julian" julian
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: sudo passwd julian
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: sudo passwd julian
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: sudo getent shadow julian
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: sudo getent shadow julian
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: sudo cat /etc/shadow | grep julian
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: sudo cat /etc/shadow | grep julian
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: adduser [OPTIONS] USER
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: adduser [OPTIONS] USER
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: sudo adduser alex
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: sudo adduser alex
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: getent passwd alex
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: getent passwd alex
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: sudo usermod -aG sudo julian
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: sudo usermod -aG sudo julian
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: id julian
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: id julian
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: su - julian
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: su - julian
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'cat /etc/passwd | cut -d: -f1 | less'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 'cat /etc/passwd | cut -d: -f1 | less'
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'sudo cat /etc/shadow | cut -d: -f1 | less'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'sudo cat /etc/shadow | cut -d: -f1 | less'
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: getent passwd
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: getent passwd
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: sudo getent shadow
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: sudo getent shadow
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'sudo getent shadow | cut -d: -f1 | less | column'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 'sudo getent shadow | cut -d: -f1 | less | column'
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: usermod [OPTIONS] USER
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: usermod [OPTIONS] USER
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: sudo usermod -c "Julian" -d /local/julian -m -s /bin/bash julian
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: sudo usermod -c "Julian" -d /local/julian -m -s /bin/bash julian
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: getent passwd julian
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: getent passwd julian
- en: '[PRE25]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: sudo usermod -l "balog" julian
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: sudo usermod -l "balog" julian
- en: '[PRE26]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: sudo usermod -L julian
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: sudo usermod -L julian
- en: '[PRE27]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: sudo usermod -U julian
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: sudo usermod -U julian
- en: '[PRE28]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: sudo vipw
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: sudo vipw
- en: '[PRE29]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: julian:x:1001:1001:Julian,,,:/home/julian:/bin/bash
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: julian:x:1001:1001:Julian,,,:/home/julian:/bin/bash
- en: '[PRE30]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: sudo passwd julian
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: sudo passwd julian
- en: '[PRE31]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: sudo chage -M 30 julian
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chage -M 30 julian
- en: '[PRE32]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: sudo chage -d 0 julian
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chage -d 0 julian
- en: '[PRE33]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: userdel [OPTIONS] USER
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: userdel [OPTIONS] USER
- en: '[PRE34]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: sudo userdel -f -r julian
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: sudo userdel -f -r julian
- en: '[PRE35]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: sudo vipw
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: sudo vipw
- en: '[PRE36]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: julian:x:1001:1001:Julian,,,:/home/julian:/bin/bash
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: julian:x:1001:1001:Julian,,,:/home/julian:/bin/bash
- en: '[PRE37]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: sudo vipw -s
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: sudo vipw -s
- en: '[PRE38]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'julian:$6$xDdd7Eay/RKYjeTm$Sf.../:18519:0:99999:7:::'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 'julian:$6$xDdd7Eay/RKYjeTm$Sf.../:18519:0:99999:7:::'
- en: '[PRE39]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: sudo rm -rf /home/julian
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: sudo rm -rf /home/julian
- en: '[PRE40]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: groupadd [OPTIONS] GROUP
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: groupadd [OPTIONS] GROUP
- en: '[PRE41]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: sudo groupadd developers
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: sudo groupadd developers
- en: '[PRE42]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: cat /etc/group | grep developers
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: cat /etc/group | grep developers
- en: '[PRE43]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: getent group developers
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: getent group developers
- en: '[PRE44]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: sudo groupadd -g 1200 developers
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: sudo groupadd -g 1200 developers
- en: '[PRE45]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: sudo gpasswd developers
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: sudo gpasswd developers
- en: '[PRE46]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: groupmod [OPTIONS] GROUP
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: groupmod [OPTIONS] GROUP
- en: '[PRE47]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'sudo groupmod -g developers to devops, we invoke the -n, --new-name option,
    like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: sudo groupmod -g developers to devops，我们调用`-n, --new-name`选项，如下所示：
- en: '[PRE48]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: getent group devops
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: getent group devops
- en: '[PRE49]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: sudo gpasswd devops
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: sudo gpasswd devops
- en: '[PRE50]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: sudo gpasswd -r devops
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: sudo gpasswd -r devops
- en: '[PRE51]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: groupdel [OPTIONS] GROUP
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: groupdel [OPTIONS] GROUP
- en: '[PRE52]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: id julian
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: id julian
- en: '[PRE53]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: sudo usermod -g devops julian
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: sudo usermod -g devops julian
- en: '[PRE54]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: sudo usermod -g julian julian
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: sudo usermod -g julian julian
- en: '[PRE55]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: sudo groupdel devops
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: sudo groupdel devops
- en: '[PRE56]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: sudo vigr
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: sudo vigr
- en: '[PRE57]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: developers:x:1200:julian,alex
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: developers:x:1200:julian,alex
- en: '[PRE58]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: sudo vigr -s
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: sudo vigr -s
- en: '[PRE59]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: sudo groupadd -g 1100 admin
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: sudo groupadd -g 1100 admin
- en: sudo groupadd -g 1200 developers
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: sudo groupadd -g 1200 developers
- en: sudo groupadd -g 1300 devops
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: sudo groupadd -g 1300 devops
- en: '[PRE60]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: cat /etc/group | tail -n 5
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: cat /etc/group | tail -n 5
- en: '[PRE61]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: sudo useradd -g admin -G developers,devops alex2
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: sudo useradd -g admin -G developers,devops alex2
- en: sudo useradd -g admin -G developers,devops julian2
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: sudo useradd -g admin -G developers,devops julian2
- en: '[PRE62]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: id alex2
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: id alex2
- en: id julian2
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: id julian2
- en: '[PRE63]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: sudo groupadd -g 1400 managers
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: sudo groupadd -g 1400 managers
- en: '[PRE64]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: sudo usermod -a -G managers alex2
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: sudo usermod -a -G managers alex2
- en: '[PRE65]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: sudo usermod -G developers,devops,managers alex2
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: sudo usermod -G developers,devops,managers alex2
- en: '[PRE66]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: id alex2
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: id alex2
- en: '[PRE67]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'uid=1004(alex2) gid=1100(admin) groups attribute (highlighted) includes the
    related entry for the managers group: 1400(managers).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: uid=1004(alex2) gid=1100(admin) groups属性（高亮显示）包括与管理组相关的条目：1400(managers)。
- en: 'Similarly, if we wanted to *remove* the user `alex2` from the `developers`
    and `devops` secondary groups, to only be associated with the `managers` secondary
    group, we would run the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果我们想要*移除*用户`alex2`从`developers`和`devops`次要组，仅与`managers`次要组关联，我们将运行以下命令：
- en: '[PRE68]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'This is the output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 4.18 – Verifying the secondary groups for the user](img/Figure_04_18_B19682.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 验证用户的次要组](img/Figure_04_18_B19682.jpg)'
- en: Figure 4.18 – Verifying the secondary groups for the user
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 验证用户的次要组
- en: The `groups` tag now shows the primary group `admin` (by default) and the `managers`
    secondary group.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`groups`标签现在显示主组`admin`（默认）和次要组`managers`。'
- en: 'The command to remove the user `alex2` from all secondary groups is shown here:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 删除用户`alex2`所有次要组的命令如下所示：
- en: '[PRE69]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The `usermod` command has an empty string (`''''`) as the `-G, --groups` option
    parameter, to ensure no secondary groups are associated with the user. We can
    verify that the user `alex2` has no more secondary group memberships with the
    following command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`usermod`命令的`-G, --groups`选项参数为空字符串（`''''`），以确保用户没有关联任何次要组。我们可以通过以下命令验证用户`alex2`不再属于任何次要组：'
- en: '[PRE70]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'This is the output:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 4.19 – Verifying the user has no secondary groups](img/Figure_04_19_B19682.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – 验证用户没有次要组](img/Figure_04_19_B19682.jpg)'
- en: Figure 4.19 – Verifying the user has no secondary groups
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 验证用户没有次要组
- en: As we can see, the `groups` tag only contains the `1100(admin)` primary GID,
    which by default is always shown for a user.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`groups`标签仅包含`1100(admin)`主GID，这是默认情况下每个用户都会显示的主组。
- en: If an administrator chooses to remove the user `alex2` from a primary group
    or assign them to a different primary group, they must run the `usermod` command
    with the `-g, --gid` option parameter and specify the primary group name. A primary
    group is always mandatory for a user, and it must exist.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果管理员选择将用户`alex2`从主组中移除或将其分配到不同的主组，他们必须运行`usermod`命令并使用`-g, --gid`选项参数，指定新的主组名称。每个用户都必须有一个主组，而且主组必须存在。
- en: 'For example, to move the user `alex2` to the `managers` primary group, the
    administrator would run the following command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将用户`alex2`移到`managers`主组，管理员需要运行以下命令：
- en: '[PRE71]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The related user data can be obtained using the following command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的用户数据可以使用以下命令获得：
- en: '[PRE72]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The command yields the following output:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令输出如下：
- en: '![Figure 4.20 – Verifying the user has been assigned to the new primary group](img/Figure_04_20_B19682.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.20 – 验证用户已被分配到新的主组](img/Figure_04_20_B19682.jpg)'
- en: Figure 4.20 – Verifying the user has been assigned to the new primary group
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – 验证用户已被分配到新的主组
- en: 'The `gid` attribute of the user record in *Figure 4**.21* reflects the new
    primary group: `gid=1400(managers)`.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 用户记录中的`gid`属性在*图 4.21*中反映了新的主组：`gid=1400(managers)`。
- en: 'If the administrator chooses to configure the user `alex2` without a specific
    primary group, they must first create an exclusive *group* (named `alex2`, for
    convenience), and have the GID matching the UID of the user `alex2` (`1004`),
    as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果管理员选择为用户`alex2`配置没有特定主组的情况，他们必须首先创建一个专用的*组*（方便起见，命名为`alex2`），并确保该组的GID与用户`alex2`的UID（`1004`）匹配，如下所示：
- en: '[PRE73]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'And now, we can remove the user `alex2` from the current primary group (`managers`)
    by specifying the exclusive primary group we just created (`alex2`), like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过指定刚才创建的专属主组（`alex2`）来将用户`alex2`从当前主组（`managers`）中移除，命令如下：
- en: '[PRE74]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The related user record becomes this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的用户记录变为：
- en: '[PRE75]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'This is the output:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![Figure 4.21 – Verifying the user has been removed from primary groups](img/Figure_04_21_B19682.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – 验证用户已从主组中移除](img/Figure_04_21_B19682.jpg)'
- en: Figure 4.21 – Verifying the user has been removed from primary groups
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – 验证用户已从主组中移除
- en: 'The `gid` attribute of the user record reflects the exclusive primary group
    (matching the user): `gid=1004(alex2)`. Our user doesn’t belong to any other primary
    groups anymore.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 用户记录的`gid`属性反映了专属主组（与用户匹配）：`gid=1004(alex2)`。我们的用户不再属于任何其他主组。
- en: Adding, moving, and removing users across groups may become increasingly daunting
    tasks for a Linux administrator. Knowing at any time which users belong to which
    groups is valuable information, both for reporting purposes and user automation
    workflows. The following section provides a few commands for viewing user and
    group data.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 添加、移动和删除用户在组之间的操作可能成为Linux管理员日益棘手的任务。随时了解哪些用户属于哪些组，是非常有价值的信息，既用于报告目的，也用于用户自动化工作流。以下部分提供了一些查看用户和组数据的命令。
- en: Viewing users and groups
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 查看用户和组
- en: In this section, we will provide some potentially useful commands for retrieving
    group and group membership information. Before we get into any commands, we should
    keep in mind that group information is stored in the `/etc/group` and `/etc/gshadow`
    files. Among the two, the former has the information we’re most interested in.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将提供一些可能有用的命令，用于检索组和组成员信息。在进入具体命令之前，我们应当记住，组信息存储在`/etc/group`和`/etc/gshadow`文件中。两者中，前者包含我们最感兴趣的信息。
- en: 'We can parse the `/etc/group` file to retrieve all groups, as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以解析`/etc/group`文件来检索所有组，方法如下：
- en: '[PRE76]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The command yields the following output:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令产生以下输出：
- en: '![Figure 4.22 – Retrieving all group names](img/Figure_04_22_B19682.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.22 – 检索所有组名](img/Figure_04_22_B19682.jpg)'
- en: Figure 4.22 – Retrieving all group names
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 检索所有组名
- en: 'A similar command would use `getent`, which we can use like this:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的命令可以使用`getent`，我们可以像这样使用：
- en: '[PRE77]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The output of the preceding command is identical to the output shown in *Figure
    4**.22*. We can retrieve the information of an individual group (for example,
    `developers`) with the following command:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出与*图 4.22*中显示的输出完全相同。我们可以使用以下命令检索单个组（例如，`developers`）的信息：
- en: '[PRE78]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'This is the output:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![Figure 4.23 – Retrieving information for a single group](img/Figure_04_23_B19682.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.23 – 检索单个组的信息](img/Figure_04_23_B19682.jpg)'
- en: Figure 4.23 – Retrieving information for a single group
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.23 – 检索单个组的信息
- en: The output of the preceding command also reveals the members of the `developers`
    group (`julian2`).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出还显示了`developers`组的成员（`julian2`）。
- en: 'To list all groups a specific user is a member of, we can use the `groups`
    command. For example, the following command lists all groups the user `alex` is
    a member of:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出某个特定用户是哪些组的成员，我们可以使用`groups`命令。例如，以下命令列出用户`alex`是哪些组的成员：
- en: '[PRE79]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'This is the command output:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这是命令输出：
- en: '![Figure 4.24 – Retrieving group membership information of a user](img/Figure_04_24_B19682.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.24 – 检索用户的组成员信息](img/Figure_04_24_B19682.jpg)'
- en: Figure 4.24 – Retrieving group membership information of a user
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.24 – 检索用户的组成员信息
- en: The output of the previous command shows the groups for the user `alex`, starting
    with the primary group (`alex`).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出显示了用户`alex`的组，首先是主组（`alex`）。
- en: 'A user can retrieve their own group membership using the `groups` command-line
    utility without specifying a group name. The following command is executed in
    a terminal session of the user `packt`, who is also an administrator (superuser):'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以使用`groups`命令行工具检索自己的组成员信息，而无需指定组名。以下命令在用户`packt`的终端会话中执行，该用户也是管理员（超级用户）：
- en: '[PRE80]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The command yields this output:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如下：
- en: '![Figure 4.25 – The current user’s groups](img/Figure_04_25_B19682.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.25 – 当前用户的组](img/Figure_04_25_B19682.jpg)'
- en: Figure 4.25 – The current user’s groups
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.25 – 当前用户的组
- en: There are many other ways and commands to retrieve user- and group-related information.
    We hope that the preceding examples provide a basic idea about where and how to
    look for some of this information.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他方法和命令可以检索与用户和组相关的信息。我们希望前面的示例能为您提供一些关于如何查找这些信息的基本思路。
- en: Next, let’s look at how a user can switch or log in to specific groups.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看用户如何切换或登录到特定的组。
- en: Group login sessions
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 组登录会话
- en: When a user logs in to the system, the group membership context is automatically
    set to the user’s primary group. Once the user is logged in, any user-initiated
    task (such as creating a file or running a program) is associated with the user’s
    primary group membership permissions. A user may also choose to access resources
    in other groups where they are also a member (that is, supplementary or secondary
    groups). To switch the group context or log in with a new group membership, a
    user invokes the `newgrp` command-line utility.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录系统时，组成员身份上下文会自动设置为用户的主组。一旦用户登录，任何用户发起的任务（如创建文件或运行程序）都将与用户的主组成员权限相关联。用户还可以选择访问自己所属的其他组中的资源（即附加或次要组）。要切换组上下文或以新组成员身份登录，用户可以调用
    `newgrp` 命令行工具。
- en: 'The basic syntax for the `newgrp` command is this:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`newgrp` 命令的基本语法如下：'
- en: '[PRE81]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'In the following example, we assume a user (`julian`) is a member of multiple
    groups—`admin` as the primary group, and `developers`/`devops` as secondary groups:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们假设用户（`julian`）是多个组的成员——`admin` 为主组，`developers`/`devops` 为次要组：
- en: '[PRE82]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'This is the output:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.26 – A user with multiple group memberships](img/Figure_04_26_B19682.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.26 – 一个拥有多个组成员身份的用户](img/Figure_04_26_B19682.jpg)'
- en: Figure 4.26 – A user with multiple group memberships
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.26 – 一个拥有多个组成员身份的用户
- en: 'Let’s impersonate the user `julian` for a while. We are currently logged in
    as the user `packt`. To change to the user `julian`, we will use the following
    command:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时以 `julian` 用户身份进行操作。目前我们以 `packt` 用户登录。要切换到 `julian` 用户，我们将使用以下命令：
- en: '[PRE83]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Remember that the user `julian` needs to have their password set in order to
    authenticate.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，用户 `julian` 需要设置密码以进行身份验证。
- en: 'When logged in as `julian`, the default login session has the following user
    and group context:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当以 `julian` 用户登录时，默认的登录会话具有以下用户和组上下文：
- en: '[PRE84]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'In our case, this is the output:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，输出如下：
- en: '![Figure 4.27 – Getting the current user](img/Figure_04_27_B19682.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.27 – 获取当前用户](img/Figure_04_27_B19682.jpg)'
- en: Figure 4.27 – Getting the current user
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.27 – 获取当前用户
- en: 'The `whoami` command provides the current UID (see more details on the command
    with `man whoami` or `whoami --help`), as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`whoami` 命令提供当前的 UID（有关该命令的更多细节，请使用 `man whoami` 或 `whoami --help`），输出如下：'
- en: '[PRE85]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'This is the output:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.28 – Getting the current user’s groups](img/Figure_04_28_B19682.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.28 – 获取当前用户的组信息](img/Figure_04_28_B19682.jpg)'
- en: Figure 4.28 – Getting the current user’s groups
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.28 – 获取当前用户的组信息
- en: The `groups` command displays all groups that the current user is a member of
    (see more details on the command with `man groups` or `groups --help`).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`groups` 命令显示当前用户所属的所有组（有关该命令的更多细节，请使用 `man groups` 或 `groups --help`）。'
- en: 'The user can also view their IDs (user and GIDs) by invoking the `id` command,
    as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以通过调用 `id` 命令查看其 ID（用户和 GID），输出如下：
- en: '[PRE86]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'This is the output:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 4.29 – Viewing the current user and GID information](img/Figure_04_29_B19682.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.29 – 查看当前用户和 GID 信息](img/Figure_04_29_B19682.jpg)'
- en: Figure 4.29 – Viewing the current user and GID information
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.29 – 查看当前用户和 GID 信息
- en: 'There are various invocations of the `id` command that provide information
    on the current user and group session. The following command (with the `-g, --group`
    option) retrieves the ID of the current group session for the user:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`id` 命令有多种调用方式，可以提供当前用户和组会话的信息。以下命令（带有 `-g, --group` 选项）检索当前用户的组会话 ID：'
- en: '[PRE87]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: In our case, the preceding command shows `1100`—the GID corresponding to the
    user’s primary group, which is `admin` (see the `gid` attribute in *Figure 4**.30*).
    Upon login, the default group session is always the primary group corresponding
    to the user. If the user were to create a file, for example, the file permission
    attributes would reflect the primary group’s ID. We’ll look at the file permissions
    in more detail in the *Managing* *permissions* section.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，上述命令显示 `1100`——即用户的主要组对应的 GID，这个组是 `admin`（见 *图 4.30* 中的 `gid` 属性）。登录时，默认的组会话总是与用户对应的主要组。如果用户创建文件，举例来说，文件的权限属性将反映主要组的
    ID。在 *管理权限* 部分中，我们将更详细地查看文件权限。
- en: 'Now, let’s switch the group session for the current user to `developers`, as
    follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将当前用户的组会话切换为 `developers`，如下所示：
- en: '[PRE88]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The current group session yields this:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当前组会话如下：
- en: '[PRE89]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The GID corresponds to the `developers` secondary GID, as displayed by the
    `groups` attribute in *Figure 4**.30*: `1200(developers)`. If the user created
    any files now, the related file permission attributes would have the `developers`
    GID:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: GID 对应于 `developers` 的次要 GID，如 *图 4.30* 中的 `groups` 属性所显示的那样：`1200(developers)`。如果用户现在创建任何文件，相关的文件权限属性将具有
    `developers` GID：
- en: '![Figure 4.30 – Switching the group session](img/Figure_04_30_B19682.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.30 – 切换组会话](img/Figure_04_30_B19682.jpg)'
- en: Figure 4.30 – Switching the group session
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.30 – 切换组会话
- en: 'If the user attempts to log in to a group they are not a member of (for example,
    `managers`), the `newgrp` command prompts for the `managers` group’s password:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户尝试登录到他们不是成员的组（例如 `managers`），`newgrp` 命令会提示输入 `managers` 组的密码：
- en: '[PRE90]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: If our user had the `managers` group password, or if they were a superuser,
    the group login attempt would succeed. Otherwise, the user would be denied access
    to the `managers` group’s resources.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的用户拥有 `managers` 组的密码，或者他们是超级用户，则该组的登录尝试会成功。否则，用户将无法访问 `managers` 组的资源。
- en: We conclude here our topic of managing users and groups. The examples of the
    related administrative tasks used throughout this section are certainly all-encompassing.
    In many of these cases, there are multiple ways to achieve the same result, using
    different commands or approaches.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，我们总结管理用户和组的话题。本节中使用的相关行政任务示例无疑是全面的。在许多情况下，可以使用不同的命令或方法来实现相同的结果。
- en: By now, you should be relatively proficient in managing users and groups, and
    comfortable using the various command-line utilities for operating the related
    changes. Users and groups are managed in a relational fashion, where users belong
    to a group or groups are associated with users. We also learned that creating
    and managing users and groups requires superuser privileges. In Linux, user data
    is stored in the `/etc/passwd` and `/etc/shadow` files, while group information
    is found in `/etc/group` and `/etc/gshadow`. Besides using the dedicated command-line
    utilities, users and groups can also be altered by manually editing these files.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经相对熟练地管理用户和组，并且能够熟练使用各种命令行工具来操作相关的更改。用户和组是以关联的方式进行管理的，其中用户属于某个组，或者组与用户相关联。我们还学到，创建和管理用户及组需要超级用户权限。在
    Linux 中，用户数据存储在 `/etc/passwd` 和 `/etc/shadow` 文件中，而组信息则存储在 `/etc/group` 和 `/etc/gshadow`
    文件中。除了使用专用的命令行工具外，用户和组也可以通过手动编辑这些文件来修改。
- en: Next, we’ll turn to the security and isolation context of the multiuser group
    environment. In Linux, the related functionality is accomplished by a system-level
    access layer that controls the read, write, and execute permissions of files and
    directories, by specific users and groups.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将关注多用户组环境中的安全性和隔离上下文。在 Linux 中，相关功能通过一个系统级访问层来完成，该访问层控制特定用户和组对文件和目录的读、写和执行权限。
- en: The following section explores the management and administrative tasks related
    to these permissions.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将探讨与这些权限相关的管理和行政任务。
- en: Managing permissions
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 管理权限
- en: A key tenet of Linux is the ability to allow multiple users to access the system
    while performing independent tasks simultaneously. The smooth operation of this
    multiuser, multitasking environment is controlled via **permissions**. The Linux
    kernel provides a robust framework for the underlying security and isolation model.
    At the user level, dedicated tools and command-line utilities help Linux users
    and system administrators with related permission management tasks.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Linux的一个关键原则是允许多个用户同时访问系统并执行独立任务。这个多用户、多任务的环境通过**权限**来控制其顺畅运行。Linux内核提供了一个强大的框架，支撑着底层的安全性和隔离模型。在用户层面，专用的工具和命令行实用程序帮助Linux用户和系统管理员处理相关的权限管理任务。
- en: For some Linux users, especially beginners, Linux permissions may appear confusing
    at times. This section attempts to demystify some of the key concepts about file
    and directory permissions in Linux. You will learn about the basic permission
    *rights* of accessing files and directories—the *read*, *write*, and *execution*
    permissions. We explore some of the essential administrative tasks for viewing
    and changing permissions, using system-level command-line utilities.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些Linux用户，尤其是初学者，Linux权限有时可能会显得困惑。本节旨在解开一些关于Linux中文件和目录权限的关键概念。你将了解访问文件和目录的基本权限*权利*——*读取*、*写入*和*执行*权限。我们将探讨一些必要的管理任务，包括使用系统级命令行工具查看和更改权限。
- en: Most of the topics discussed in this section should be regarded closely with
    users and groups. The related idioms can be as simple as *a user can read or update
    a file*, *a group has access to these files and directories*, or *a user can execute*
    *this program*.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论的大多数主题应当与用户和组密切相关。相关的表达可以简单到*用户可以读取或更新文件*，*一个组可以访问这些文件和目录*，或者*用户可以执行* *这个程序*。
- en: Let’s start with the basics, introducing file and directory permissions.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 从基础开始，介绍文件和目录权限。
- en: File and directory permissions
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 文件和目录权限
- en: 'In Linux, permissions can be regarded as the *rights* or *privileges* to act
    upon a file or a directory. The basic rights, or *permission attributes*, are
    outlined here:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，权限可以看作是对文件或目录的*操作权利*或*特权*。基本的权利，或称*权限属性*，如下所示：
- en: '**Read**: A *read* permission of a file allows users to view the content of
    the file. On a directory, the read permission allows users to list the content
    of the directory.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取**：文件的*读取*权限允许用户查看文件内容。对于目录，读取权限允许用户列出目录中的内容。'
- en: '**Write**: A *write* permission of a file allows users to modify the content
    of the file. For a directory, the write permission allows users to modify the
    content of the directory by adding, deleting, or renaming files.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写入**：文件的*写入*权限允许用户修改文件内容。对于目录，写入权限允许用户通过添加、删除或重命名文件来修改目录内容。'
- en: '`cd` command).'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd`命令）。'
- en: First, let’s take a look at how to reveal the permissions for files and directories.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来看看如何显示文件和目录的权限。
- en: Viewing permissions
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 查看权限
- en: 'The most common way to view the permissions of a file or directory is by using
    the `ls` command-line utility. The basic syntax of this command is this:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 查看文件或目录权限的最常用方法是使用`ls`命令行工具。该命令的基本语法如下：
- en: '[PRE91]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Here is an example use of the `ls` command to view the permissions of the `/``etc/passwd`
    file:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`ls`命令查看`/etc/passwd`文件权限的一个示例：
- en: '[PRE92]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The command yields the following output:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如下：
- en: '[PRE93]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: The `-l` option of the `ls` command provides a detailed output by using the
    *long listing format*, according to the `ls` documentation (`man ls`).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls`命令的`-l`选项提供了详细的输出，使用*长列表格式*，根据`ls`文档（`man ls`）。'
- en: 'Let’s analyze the output, as follows:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下输出结果，如下所示：
- en: '[PRE94]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'We have nine segments, separated by single whitespace characters (delimiters).
    These are outlined here:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有九个部分，用空格分隔（分隔符）。这些如下所示：
- en: '`-rw-r--r--`: The file access permissions'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-rw-r--r--`：文件访问权限'
- en: '`1`: The number of hard links'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`：硬链接数量'
- en: '`root`: The *user* who is the owner of the file'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root`：文件的*所有者用户*'
- en: '`root`: The *group* that is the owner of the file'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root`：文件的*所属组*'
- en: '`2010`: The size of the file'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2010`：文件的大小'
- en: '`Mar`: The month the file was created'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mar`：文件创建的月份'
- en: '`9`: The day of the month the file was created'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`9`：文件创建的日期'
- en: '`08:57`: The time of day the file was created'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`08:57`：文件创建的时间'
- en: '`/etc/passwd`: The filename'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/passwd`：文件名'
- en: 'Let’s examine the file access permissions field (`-rw-r--r--`). File access
    permissions are defined as a 10-character field, grouped as follows:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看文件访问权限字段（`-rw-r--r--`）。文件访问权限定义为一个10个字符的字段，按如下方式分组：
- en: The first character (attribute) is reserved for the file type (see the *File*
    *types* section).
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个字符（属性）保留用于文件类型（参见*文件* *类型*部分）。
- en: 'The next 9 characters represent a 9-bit field, defining the effective permissions
    as 3 sequences of 3 attributes (bits) each: *user owner* permissions, *group owner*
    permissions, and *all other users’* permissions (see the *Permission* *attributes*
    section).'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来的9个字符表示一个9位字段，定义了有效权限，分为3组每组3个属性（位）：*用户所有者*权限、*组所有者*权限和*所有其他用户*权限（参见*权限*
    *属性*部分）。
- en: Let’s take a look at the file type attributes.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看文件类型属性。
- en: File type attributes
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 文件类型属性
- en: 'The file type attributes are listed here:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了文件类型属性：
- en: '`d`: Directory'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d`：目录'
- en: '`-`: Regular file'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-`：常规文件'
- en: '`l`: Symbolic link'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`：符号链接'
- en: '`p`: Named pipe—a special file that facilitates communication between programs'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p`：命名管道—一种特殊文件，便于程序之间的通信'
- en: '`s`: Socket—similar to a pipe but with bidirectional network communications'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`：套接字—类似管道，但具有双向网络通信'
- en: '`b`: Block device—a file that corresponds to a hardware device'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`：块设备—与硬件设备对应的文件'
- en: '`c`: Character device—similar to a block device'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`：字符设备—类似块设备'
- en: Let’s have a closer look at the permission attributes.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看权限属性。
- en: Permission attributes
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 权限属性
- en: 'As previously noted, the access permissions are represented by a 9-bit field,
    a group of 3 sequences, each with 3 bits, defined as follows:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，访问权限由一个9位字段表示，分为3组，每组3位，定义如下：
- en: '**Bits 1-3**: *User* owner permissions'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位 1-3**：*用户*所有者权限'
- en: '**Bits 4-6**: *Group* owner permissions'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位 4-6**：*组*所有者权限'
- en: '**Bits 7-9**: *All* other users’ (or *world*) permissions'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位 7-9**：*所有*其他用户（或*世界*）的权限'
- en: Each permission attribute is a bit flag in the binary representation of the
    related 3-bit sequence. They can be represented either as a character or as an
    equivalent numerical value, also known as the *octal* value, depending on the
    range of the bit they represent.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 每个权限属性都是与相关的3位序列的二进制表示中的一个位标志。它们可以表示为字符或等效的数值，也就是*八进制*值，具体取决于它们所代表的位的范围。
- en: 'Here are the permission attributes with their respective octal values:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是权限属性及其相应的八进制值：
- en: '`r`: *Read* permission; 2 ^ 2 = `4` (bit 2 set)'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`：*读取*权限；2 ^ 2 = `4`（位2设置）'
- en: '`w`: *Write* permission: 2 ^ 1 = `2` (bit 1 set)'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w`：*写入*权限：2 ^ 1 = `2`（位1设置）'
- en: '`x`: *Execute* permission: 2 ^ 0 = `1` (bit 0 set)'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`：*执行*权限：2 ^ 0 = `1`（位0设置）'
- en: '`-`: *No* permission: `0` (no bits set)'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-`：*无*权限：`0`（没有位被设置）'
- en: 'The resulting corroborated number is also known as the *octal value* of the
    file permissions (see the *File permission examples* section). Here’s an illustration
    of the file permission attributes:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 得到的校对数字也被称为文件权限的*八进制值*（参见*文件权限示例*部分）。以下是文件权限属性的示例：
- en: '![Figure 4.31 – The file permission attributes](img/Figure_04_31_B19682.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.31 – 文件权限属性](img/Figure_04_31_B19682.jpg)'
- en: Figure 4.31 – The file permission attributes
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.31 – 文件权限属性
- en: Next, let’s consider some examples.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看一些例子。
- en: File permission examples
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 文件权限示例
- en: 'Now, let’s go back and evaluate the file access permissions for `/etc/passwd`:
    `-rw-r--r--`, as follows:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回头看看`/etc/passwd`的文件访问权限：`-rw-r--r--`，如下所示：
- en: '`-`: The first character (byte) denotes the file type (a regular file, in our
    case)'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-`：第一个字符（字节）表示文件类型（在我们的例子中是常规文件）'
- en: '`rw-`: The next three-character sequence indicates the user owner permissions;
    (in our case, read (`r`); write (`w`); octal value = `4` (`r`) + `2` (`w`) = `6`
    (`rw`))'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rw-`：接下来的三字符序列表示用户所有者权限；（在我们的例子中，读（`r`）；写（`w`）；八进制值 = `4`（`r`） + `2`（`w`）
    = `6`（`rw`））'
- en: '`r--`: The next 3-byte sequence defines the group owner permissions (in our
    case, read (`r`); octal value = `4` (`r`))'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r--`：接下来的3字节序列定义了组所有者权限（在我们的例子中，读取（`r`）；八进制值 = `4`（`r`））'
- en: '`r--`: The last three characters denote the permissions for all other users
    in the system (in our case, read (`r`); octal value = `4` (`r`))'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r--`：最后三个字符表示系统中所有其他用户的权限（在我们的例子中，读取（`r`）；八进制值 = `4`（`r`））'
- en: 'According to the preceding information, the resulting octal value of the `/etc/passwd`
    file access permissions is `644`. Alternatively, we can query the octal value
    with the `stat` command, as follows:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的信息，`/etc/passwd` 文件的访问权限的八进制值为 `644`。另外，我们也可以通过 `stat` 命令查询八进制值，方法如下：
- en: '[PRE95]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'The command yields the following output:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出结果如下：
- en: '[PRE96]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: The `stat` command displays the file or filesystem status. The `--format` option
    parameter specifies the access rights in octal format (`'%a'`) for the output.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`stat` 命令显示文件或文件系统的状态。`--format` 选项指定以八进制格式（`''%a''`）输出访问权限。'
- en: 'Here are a few examples of access permissions, with their corresponding octal
    values and descriptions. The three-character sequences are intentionally delimited
    with whitespace for clarity. The leading file type has been omitted:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个访问权限的例子，带有相应的八进制值和描述。三个字符的权限序列有意用空格分隔，以便更清晰地查看。前导的文件类型已省略：
- en: '`rwx` (`777`): Read, write, and execute for all users including owner, group,
    and world'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rwx`（`777`）：所有用户，包括所有者、组和世界，均可读写执行'
- en: '`rwx r-x` (`755`): Read and execute for all users; the file owner has write
    permissions'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rwx r-x`（`755`）：所有用户可读执行；文件所有者具有写入权限'
- en: '`rwx r-x ---` (`750`): Read and execute for owner and group; the owner has
    write permissions while others have no access'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rwx r-x ---`（`750`）：所有者和组可读执行；所有者具有写入权限，其他用户没有访问权限'
- en: '`rwx --- ---` (`700`): Read, write, and execute for owner; everyone else has
    no permissions'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rwx --- ---`（`700`）：所有者可读写执行；其他人没有权限'
- en: '`rw- rw- rw-` (`666`): Read and write for all users; there are no execute permissions'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rw- rw- rw-`（`666`）：所有用户可读写；没有执行权限'
- en: '`rw- rw- r--` (`664`): Read and write for owner and group; read for others'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rw- rw- r--`（`664`）：所有者和组可读写；其他用户可读'
- en: '`rw- rw- ---` (`660`): Read and write for owner and group; others have no permissions'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rw- rw- ---`（`660`）：所有者和组可读写；其他没有权限'
- en: '`rw- r-- r--` (`644`): Read and write for owner; read for group and others'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rw- r-- r--`（`644`）：所有者可读写；组和其他用户可读'
- en: '`rw- r-- ---` (`640`): Read and write for owner; read for group; no permissions
    for others'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rw- r-- ---`（`640`）：所有者可读写；组可读；其他没有权限'
- en: '`rw- --- ---` (`600`): Read and write for owner; no permissions for group and
    others'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rw- --- ---`（`600`）：所有者可读写；组和其他没有权限'
- en: '`r-- --- ---` (`400`): Read for owner; no permissions for others'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r-- --- ---`（`400`）：所有者可读；其他没有权限'
- en: Read, write, and execute are the most common types of file access permissions.
    So far, we have mostly focused on permission types and their representation. In
    the next section, we will explore a few command-line tools used for altering permissions.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 读取、写入和执行是最常见的文件访问权限类型。到目前为止，我们主要关注权限类型及其表示方法。在接下来的部分，我们将探讨一些用于更改权限的命令行工具。
- en: Changing permissions
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 更改权限
- en: Modifying file and directory access permissions is a common Linux administrative
    task. In this section, we will learn about a few command-line utilities that are
    handy when it comes to changing permissions and ownership of files and directories.
    These tools are installed with any modern-day Linux distribution, and their use
    is similar across most Linux platforms.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 修改文件和目录的访问权限是常见的 Linux 管理任务。在本节中，我们将了解一些在更改文件和目录的权限及所有权时非常方便的命令行工具。这些工具在任何现代
    Linux 发行版中都会预安装，且其使用方式在大多数 Linux 平台中类似。
- en: Using chmod
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 chmod
- en: The `chmod` command is short for *change mode*, and it’s used to set access
    permissions on files and directories. The `chmod` command can be used by both
    the current user (owner) and a superuser.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod` 命令是 *change mode* 的缩写，用于设置文件和目录的访问权限。`chmod` 命令可以由当前用户（所有者）和超级用户使用。'
- en: 'Changing permissions can be done in two different modes: **relative** and **absolute**.
    Let’s take a look at each of them.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 更改权限可以通过两种模式完成：**相对模式**和**绝对模式**。让我们来看一下它们的区别。
- en: Using chmod in relative mode
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在相对模式下使用 chmod
- en: 'Changing permissions in **relative** mode is probably the easiest of the two.
    It is important to remember the following:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **相对** 模式下更改权限可能是两者中最简单的一种。记住以下几点很重要：
- en: '*To whom* we change permissions: `u` = user (owner), `g` = group, `o` = others'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我们改变权限的对象*：`u` = 用户（所有者），`g` = 组，`o` = 其他'
- en: '*How* we change permissions: `+` = add, `-` = remove, `=` = exactly as is'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我们如何改变权限*：`+` = 添加，`-` = 删除，`=` = 恢复原状'
- en: '*Which* permission we change: `r` = read, `w` = write, `x` = execute'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我们更改哪个权限*：`r` = 读取，`w` = 写入，`x` = 执行'
- en: Let’s explore a few examples of using `chmod` in relative mode.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探讨几个在相对模式下使用 `chmod` 的例子。
- en: 'In our first example, we want to add write (`w`) permissions for all *other*
    (`o`) users (*world*), to `myfile`, as follows:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个示例中，我们想要为所有*其他*（`o`）用户（*世界*）向`myfile`添加写（`w`）权限，如下所示：
- en: '[PRE97]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'The related command-line output is shown here:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的命令行输出如下所示：
- en: '![Figure 4.32 – Setting write permissions to all other users](img/Figure_04_32_B19682.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.32 – 为所有其他用户设置写权限](img/Figure_04_32_B19682.jpg)'
- en: Figure 4.32 – Setting write permissions to all other users
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.32 – 为所有其他用户设置写权限
- en: 'In the next example, we remove the read (`r`) and write (`w`) permissions for
    the current user owner (`u`) of `myfile`, as follows:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将为当前用户所有者（`u`）删除`myfile`的读取（`r`）和写入（`w`）权限，如下所示：
- en: '[PRE98]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The command-line output is shown here:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行输出如下所示：
- en: '![Figure 4.33 – Removing read-write permissions for owner](img/Figure_04_33_B19682.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.33 – 删除所有者的读写权限](img/Figure_04_33_B19682.jpg)'
- en: Figure 4.33 – Removing read-write permissions for owner
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.33 – 删除所有者的读写权限
- en: We did not use `sudo` in either of the preceding examples since we carried out
    the operations as the current owner of the file (`packt`).
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们没有使用`sudo`，因为我们以当前文件所有者（`packt`）的身份执行操作。
- en: 'In the following example, we assume that `myfile` has read, write, and execute
    permissions for everyone. Then, we carry out the following changes:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们假设`myfile`对所有人都有读取、写入和执行权限。然后，我们执行以下更改：
- en: Remove the read (`r`) permission for the owner (`u`)
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除所有者（`u`）的读取（`r`）权限
- en: Remove the write (`w`) permission for the owner (`u`) and group (`g`)
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除所有者（`u`）和组（`g`）的写入（`w`）权限
- en: Remove the read (`r`), write (`w`), and execute (`x`) permissions for everyone
    else (`o`)
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为所有其他用户（`o`）删除读取（`r`）、写入（`w`）和执行（`x`）权限
- en: 'This is illustrated in the following code snippet:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了这一点：
- en: '[PRE99]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'The command-line output is shown here:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行输出如下所示：
- en: '![Figure 4.34 – A relatively complex invocation of chmod in relative mode](img/Figure_04_34_B19682.jpg)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.34 – 以相对模式调用 chmod 的一个相对复杂的示例](img/Figure_04_34_B19682.jpg)'
- en: Figure 4.34 – A relatively complex invocation of chmod in relative mode
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.34 – 以相对模式调用 chmod 的一个相对复杂的示例
- en: 'Next, let’s look at a second way of changing permissions: using the `chmod`
    command-line utility in absolute mode, by specifying the octal number corresponding
    to the access permissions.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看另一种更改权限的方法：通过指定与访问权限相对应的八进制数字，使用`chmod`命令行工具进行绝对模式的操作。
- en: Using chmod in absolute mode
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 使用绝对模式的 chmod
- en: The `chmod` changes all permission attributes at once, using an *octal* number.
    The *absolute* designation of this method is due to changing permissions without
    any reference to existing ones, by simply assigning the octal value corresponding
    to the access permissions.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod`一次性更改所有权限属性，使用*八进制*数字。这种方法被称为*绝对*模式，因为它通过直接分配与访问权限相对应的八进制值来更改权限，而不参考现有的权限。'
- en: 'Here’s a quick list of the octal values corresponding to effective permissions:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有效权限对应的八进制值简要列表：
- en: '`7` `rwx`: Read, write, and execute'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`7` `rwx`：读取、写入和执行'
- en: '`6` `rw-`: Read and write'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`6` `rw-`：读和写'
- en: '`5` `r-w`: Read and execute'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`5` `r-w`：读取和执行'
- en: '`4` `r--`: Read'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4` `r--`：读取'
- en: '`3` `-wx`: Write and execute'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3` `-wx`：写和执行'
- en: '`2` `-``w-`: Write'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2` `-``w-`：写入'
- en: '`1` `--``x`: Execute'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1` `--``x`：执行'
- en: '`0` `---`: No permissions'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0` `---`：无权限'
- en: 'In the following example, we change the permissions of `myfile` to read (`r`),
    write (`w`), and execute (`x`) for everybody:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将`myfile`的权限更改为所有人可读（`r`）、可写（`w`）和可执行（`x`）：
- en: '[PRE100]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'The related change is illustrated by the following command-line output:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的更改通过以下命令行输出来展示：
- en: '![Figure 4.35 – The chmod invocation in absolute mode](img/Figure_04_35_B19682.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.35 – 以绝对模式调用 chmod](img/Figure_04_35_B19682.jpg)'
- en: Figure 4.35 – The chmod invocation in absolute mode
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.35 – 以绝对模式调用 chmod
- en: For more information about the `chmod` command, please refer to the related
    documentation (`man chmod`).
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解有关`chmod`命令的更多信息，请参阅相关文档（`man chmod`）。
- en: Let’s now look at our next command-line utility, specializing in file and directory
    ownership changes.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看下一个命令行工具，它专门用于文件和目录所有权的更改。
- en: Using chown
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 chown
- en: The `chown` command (short for *change owner*) is used to set the ownership
    of files and directories. Typically, the `chmod` command can only be run with
    *superuser* privileges (that is, by a *sudoer*). Regular users can only change
    the *group* ownership of their files, and only when they are a member of the target
    group.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 命令（即 *更改所有者*）用于设置文件和目录的所有权。通常，`chmod` 命令只能在 *超级用户* 权限下运行（也就是由 *sudoer*
    执行）。普通用户只能更改其文件的 *组* 所有权，而且只有在他们是目标组的成员时才行。'
- en: 'The syntax of the `chown` command is shown here:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 命令的语法如下所示：'
- en: '[PRE101]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Usually, we invoke the `chown` command with both user *and* group ownerships—for
    example, like this:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们使用 `chown` 命令同时设置用户 *和* 组所有权，例如如下所示：
- en: '[PRE102]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The related command-line output is shown here:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的命令行输出如下所示：
- en: '![Figure 4.36 – A simple invocation of the chown command](img/Figure_04_36_B19682.jpg)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.36 – 简单调用 chown 命令](img/Figure_04_36_B19682.jpg)'
- en: Figure 4.36 – A simple invocation of the chown command
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.36 – 简单调用 chown 命令
- en: 'One of the most common uses of `chown` is for *recursive mode* invocation,
    with the `-R, --recursive` option. The following example changes the ownership
    permissions of all files in `mydir` (directory), initially owned by `root`, to
    `julian`:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 最常见的用途之一是以 *递归模式* 调用，使用 `-R, --recursive` 选项。以下示例将 `mydir`（目录）中所有文件的所有权权限从最初由
    `root` 拥有更改为 `julian`：'
- en: '[PRE103]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'The related changes are shown in the following command-line output:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的更改显示在以下命令行输出中：
- en: '![Figure 4.37 – Invoking ls and chown in recursive mode](img/Figure_04_37_B19682.jpg)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.37 – 以递归模式调用 ls 和 chown](img/Figure_04_37_B19682.jpg)'
- en: Figure 4.37 – Invoking ls and chown in recursive mode
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.37 – 以递归模式调用 ls 和 chown
- en: For more information about the `chown` command, please refer to the related
    documentation (`man chown`).
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多关于 `chown` 命令的信息，请参考相关文档（`man chown`）。
- en: Next, let’s briefly look at a similar command-line utility that specializes
    exclusively in group ownership changes.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们简要了解一下专门用于更改组所有权的类似命令行工具。
- en: Using chgrp
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 chgrp
- en: The `chgrp` command (short for *change group*) is used to change the *group*
    ownership for files and directories. In Linux, files and directories typically
    belong to a user (owner) or a group. We can set user ownership by using the `chown`
    command-line utility, while group ownership can be set with `chgrp`.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`chgrp` 命令（即 *更改组*）用于更改文件和目录的 *组* 所有权。在 Linux 中，文件和目录通常属于一个用户（所有者）或一个组。我们可以使用
    `chown` 命令行工具设置用户所有权，而组所有权则可以通过 `chgrp` 设置。'
- en: 'The syntax for `chgrp` is shown here:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`chgrp` 的语法如下所示：'
- en: '[PRE104]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The following example changes the group ownership of `myfile` to the `developers`
    group:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将 `myfile` 的组所有权更改为 `developers` 组：
- en: '[PRE105]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'The changes are shown in the following output:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 更改显示在以下输出中：
- en: '![Figure 4.38 - Using chgrp to change group ownership](img/Figure_04_38_B19682.jpg)'
  id: totrans-429
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.38 - 使用 chgrp 更改组所有权](img/Figure_04_38_B19682.jpg)'
- en: Figure 4.38 - Using chgrp to change group ownership
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.38 - 使用 chgrp 更改组所有权
- en: The preceding command has been invoked with superuser privileges (`sudo`) since
    the current user (`packt`) is not an admin for the `developers` group.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 由于当前用户（`packt`）不是 `developers` 组的管理员，所以下面的命令以超级用户权限（`sudo`）调用。
- en: For more information about the `chgrp` utility, please refer to the tool’s command-line
    help (`chgrp --help`).
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多关于 `chgrp` 工具的信息，请参考工具的命令行帮助（`chgrp --help`）。
- en: Using umask
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 umask
- en: 'The `umask` command is used to view or set the default *file mode mask* in
    the system. The file mode represents the default permissions for any new files
    and directories created by a user. For example, the default file mode masks in
    Ubuntu are given here:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`umask` 命令用于查看或设置系统中的默认 *文件模式掩码*。文件模式表示用户创建的任何新文件和目录的默认权限。例如，Ubuntu 中的默认文件模式掩码如下所示：'
- en: '`0002` for a regular user'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0002` 用于普通用户'
- en: '`0022` for the `root` user'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0022` 用于 `root` 用户'
- en: 'As a general rule in Linux, the *default permissions* for new files and directories
    are calculated with the following formulas:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中的一般规则是，新的文件和目录的 *默认权限* 按照以下公式计算：
- en: '`0666 – umask`: For a new file created by a regular user'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0666 – umask`：对于普通用户创建的新文件'
- en: '`0777 – umask`: For a new directory created by a regular user'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0777 – umask`：对于普通用户创建的新目录'
- en: 'According to the preceding formula, on Ubuntu, we have the following default
    permissions:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前述公式，在 Ubuntu 中，我们有以下默认权限：
- en: 'File (regular user): `0666 – 0002 =` `0664`'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件（普通用户）：`0666 – 0002 =` `0664`
- en: 'File (`root`): `0666 – 0022 =` `0644`'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件（`root`）：`0666 – 0022 =` `0644`
- en: 'Directory (regular user): `0777 – 0002 =` `0775`'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录（普通用户）：`0777 – 0002 =` `0775`
- en: 'Directory (`root`): `0777 – 0022 =` `0755`'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录（`root`）：`0777 – 0022 =` `0755`
- en: 'In the following examples, run on Ubuntu, we create a file (`myfile`) and a
    directory (`mydir`), using the terminal session of a regular user (`packt`). Then,
    we query the `stat` command for each and verify that the default permissions match
    the values enumerated previously for regular users (file: `664`, directory: `775`).'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们在 Ubuntu 上运行，创建了一个文件（`myfile`）和一个目录（`mydir`），使用的是普通用户（`packt`）的终端会话。然后，我们查询每个文件的
    `stat` 命令，并验证默认权限是否与之前列出的普通用户权限（文件：`664`，目录：`775`）匹配。
- en: 'Let’s start with the default file permissions first, as follows:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先从默认文件权限开始，如下所示：
- en: '[PRE106]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The related output is shown here:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 相关输出如下所示：
- en: '[PRE107]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Next, let’s verify the default directory permissions, as follows:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们验证默认目录权限，如下所示：
- en: '[PRE108]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'The related output is shown here:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 相关输出如下所示：
- en: '[PRE109]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Here’s a list with the typical `umask` values for files and directories on
    Linux systems:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Linux 系统中文件和目录的典型 `umask` 值列表：
- en: '![Figure 4.39 – Typical umask values on Linux](img/Figure_04_39_B19682.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.39 – Linux 上典型的 umask 值](img/Figure_04_39_B19682.jpg)'
- en: Figure 4.39 – Typical umask values on Linux
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.39 – Linux 上典型的 umask 值
- en: For more information about the `umask` utility, please refer to the tool’s command-line
    help (`umask --help`).
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `umask` 工具的更多信息，请参阅该工具的命令行帮助（`umask --help`）。
- en: File and directory permissions are critical for a secure environment. Users
    and processes should operate exclusively within the isolation and security constraints
    controlled by permissions, to avoid inadvertent or deliberate interference with
    the use and ownership of system resources. There are cases, particularly in user
    impersonation situations, when the access rights may involve some special permission
    attributes. Let’s have a look at them.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 文件和目录权限对于安全环境至关重要。用户和进程应仅在由权限控制的隔离和安全约束内操作，以避免无意或故意干扰系统资源的使用和所有权。在一些情况下，特别是在用户伪装的情况下，访问权限可能涉及一些特殊的权限属性。让我们来看看它们。
- en: Special permissions
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊权限
- en: In Linux, the ownership of files and directories is usually determined by the
    UID and GID of the user—or group—who created them. The same principle applies
    to applications and processes—they are owned by the users who launch them. The
    special permissions are meant to change this default behavior when needed.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中，文件和目录的所有权通常由创建它们的用户或用户组的 UID 和 GID 决定。相同的原则适用于应用程序和进程——它们由启动它们的用户所拥有。特殊权限旨在在需要时更改这种默认行为。
- en: 'Here are the special permission flags, with their respective octal values:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些特殊权限标志及其相应的八进制值：
- en: '`setuid`: 2 ^ 2 = `4` (bit 2 set)'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setuid`：2 ^ 2 = `4`（位 2 设置）'
- en: '`setgid`: 2 ^ 1 = `2` (bit 1 set)'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setgid`：2 ^ 1 = `2`（位 1 设置）'
- en: '`sticky`: 2 ^ 0 = `1` (bit 0 set)'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sticky`：2 ^ 0 = `1`（位 0 设置）'
- en: When any of these special bits are set, the overall octal number of the access
    permissions will have an extra digit, with the leading (high-order) digit corresponding
    to the special permission’s octal value.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些特殊位中的任何一个被设置时，访问权限的整体八进制数字将有一个额外的数字，前导（高位）数字对应于特殊权限的八进制值。
- en: Let’s look at these special permission flags, with examples for each.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些特殊权限标志，并为每个标志提供示例。
- en: The setuid permission
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: setuid 权限
- en: With the `setuid` bit set, when an executable file is launched, it will run
    with the privileges of the file owner instead of the user who launched it. For
    example, if the executable is owned by `root` and launched by a *regular* user,
    it will run with `root` privileges. The `setuid` permission could pose a potential
    security risk when used inadequately, or when vulnerabilities of the underlying
    process could be exploited.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了 `setuid` 位时，当可执行文件启动时，它将以文件所有者的权限运行，而不是启动它的用户的权限。例如，如果可执行文件由 `root` 拥有并由普通用户启动，它将以
    `root` 权限运行。`setuid` 权限在不当使用时可能会带来潜在的安全风险，或者当底层进程的漏洞被利用时。
- en: 'In the file access permission field, the `setuid` bit could have either of
    the following representations:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件访问权限字段中，`setuid` 位可以有以下几种表示方式：
- en: '`s` *replacing* the corresponding executable bit (`x`) (when the executable
    bit is present)'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s` *替换* 相应的可执行位（`x`）（当可执行位存在时）'
- en: '`S` (the capital letter) for a non-executable file'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`S`（大写字母）表示不可执行文件'
- en: 'The `setuid` permission can be set via the following `chmod` command (for example,
    for the `myscript.sh` executable file):'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`setuid` 权限可以通过以下 `chmod` 命令设置（例如，对于 `myscript.sh` 可执行文件）：'
- en: '[PRE110]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'The resulting file permissions are shown here (including the octal value):
    `-``rwsrwxr-x` (`4775`).'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 结果文件权限如下所示（包括八进制值）：`-rwsrwxr-x` (`4775`)。
- en: 'Here is the related command-line output:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是相关的命令行输出：
- en: '![Figure 4.40 – The setuid permission](img/Figure_04_40_B19682.jpg)'
  id: totrans-476
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.40 – setuid权限](img/Figure_04_40_B19682.jpg)'
- en: Figure 4.40 – The setuid permission
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.40 – setuid权限
- en: In the preceding screenshot, you can see the difference in permissions. Before
    applying the `chmod` command, the permissions are `-rwxrwxr-x`, and after applying
    the `setuid` permission with the `chmod` command, an `s` (referring to `setuid`)
    is included in the user’s permission, `-rwsrwxr-x`. For more information on `setuid`,
    please visit [https://docs.oracle.com/cd/E19683-01/816-4883/secfile-69/index.html](https://docs.oracle.com/cd/E19683-01/816-4883/secfile-69/index.html)
    or refer to the `chmod` command-line utility documentation (`man chmod`).
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，你可以看到权限的差异。在应用`chmod`命令之前，权限为`-rwxrwxr-x`，在应用了`setuid`权限的`chmod`命令之后，用户权限中包含一个`s`（表示`setuid`），变为`-rwsrwxr-x`。关于`setuid`的更多信息，请访问[https://docs.oracle.com/cd/E19683-01/816-4883/secfile-69/index.html](https://docs.oracle.com/cd/E19683-01/816-4883/secfile-69/index.html)
    或参考`chmod`命令行工具文档（`man chmod`）。
- en: The setgid permission
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: setgid权限
- en: While `setuid` controls user impersonation privileges, `setgid` has a similar
    effect on group impersonation permissions.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`setuid`控制用户伪装权限，但`setgid`对组伪装权限有类似的作用。
- en: When an executable file has the `setgid` bit set, it runs using the permissions
    of the group that owns the file, rather than the group of the user who initiated
    it. In other words, the GID of the process is the same as the GID of the file.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个可执行文件设置了`setgid`位时，它将使用文件所属组的权限运行，而不是启动它的用户的组权限。换句话说，进程的GID与文件的GID相同。
- en: When used on a directory, the `setgid` bit changes the default ownership behavior
    so that files created within the directory will have group ownership of the parent
    directory instead of the group associated with the user who created them. This
    behavior could be adequate in file-sharing situations when files can be changed
    by all users associated with the parent directory’s owner group.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 当`setgid`用于目录时，它会改变默认的所有权行为，使得在目录内创建的文件将继承父目录的组所有权，而不是与创建它们的用户相关联的组。这种行为在文件共享场景中是足够的，当文件可以由父目录所有组中的所有用户更改时。
- en: 'The `setgid` permission can be set via the following `chmod` command (for example,
    for the `myscript.sh` executable file, the original file, before applying `setuid`
    to it):'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '`setgid`权限可以通过以下`chmod`命令设置（例如，对于`myscript.sh`可执行文件，应用`setuid`之前的原始文件）：'
- en: '[PRE111]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'The resulting file permissions are shown here (including the octal value):
    `-``rwxrwsr-x` (`2775`).'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 结果文件权限如下所示（包括八进制值）：`-rwxrwsr-x` (`2775`)。
- en: 'The command-line output is shown here:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行输出如下所示：
- en: '![Figure 4.41 – The setgid permission](img/Figure_04_41_B19682.jpg)'
  id: totrans-487
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.41 – setgid权限](img/Figure_04_41_B19682.jpg)'
- en: Figure 4.41 – The setgid permission
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.41 – setgid权限
- en: For more information on `setgid`, please visit [https://en.wikipedia.org/wiki/Setuid](https://en.wikipedia.org/wiki/Setuid)
    or refer to the `chmod` command-line utility documentation (`man chmod`).
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`setgid`的更多信息，请访问[https://en.wikipedia.org/wiki/Setuid](https://en.wikipedia.org/wiki/Setuid)
    或参考`chmod`命令行工具文档（`man chmod`）。
- en: The sticky permission
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: sticky权限
- en: The `sticky` bit has no effect on files. For a directory with the `sticky` permission,
    only the user owner or group owner of the directory can delete or rename files
    within the directory. Users or groups with write access to the directory, by way
    of user or group ownership, cannot delete or modify files in the directory. The
    `sticky` permission is useful when a directory is owned by a privileged group
    whose members share write access to files in that directory.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '`sticky`位对文件没有影响。对于具有`sticky`权限的目录，只有目录的用户所有者或组所有者可以删除或重命名该目录中的文件。通过用户或组所有权具有写入权限的用户或组，不能删除或修改目录中的文件。`sticky`权限在目录由一个特权组拥有，并且该组成员共享对目录中文件的写入访问权限时非常有用。'
- en: 'The `sticky` permission can be set via the following `chmod` command (for example,
    for the `mydir` directory):'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '`sticky`权限可以通过以下`chmod`命令设置（例如，对于`mydir`目录）：'
- en: '[PRE112]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The resulting directory permissions are shown here (including the octal value):
    `drwxrwxr-t` (`1775`).'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 结果目录权限如下所示（包括八进制值）：`drwxrwxr-t` (`1775`)。
- en: 'The command-line output is shown here:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行输出如下所示：
- en: '![Figure 4.42 – The sticky permission](img/Figure_04_42_B19682.jpg)'
  id: totrans-496
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.42 – sticky权限](img/Figure_04_42_B19682.jpg)'
- en: Figure 4.42 – The sticky permission
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.42 – 粘滞权限
- en: For more information on `sticky`, please visit [https://en.wikipedia.org/wiki/Setuid](https://en.wikipedia.org/wiki/Setuid)
    or refer to the `chmod` command-line utility documentation (`man chmod`).
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`sticky`的更多信息，请访问[https://en.wikipedia.org/wiki/Setuid](https://en.wikipedia.org/wiki/Setuid)或查阅`chmod`命令行工具文档（`man
    chmod`）。
- en: Interpreting permissions can be a daunting task. This section aimed to demystify
    some of the related intricacies, and we hope that you will feel more comfortable
    handling file and directory permissions in everyday Linux administration tasks.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 解读权限可能是一项艰巨的任务。本节旨在解开一些相关的复杂性，我们希望你在处理日常Linux管理任务中的文件和目录权限时会更加得心应手。
- en: Summary
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored some of the essential concepts related to managing
    users and groups in Linux. We learned about file and directory permissions and
    the different access levels of a multiuser environment. For each main topic, we
    focused on basic administrative tasks, providing various practical examples and
    using typical command-line tools for everyday user access and permission management
    operations.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了与Linux中用户和组管理相关的一些基本概念。我们了解了文件和目录权限，以及多用户环境中的不同访问级别。对于每个主要主题，我们重点介绍了基本的管理任务，提供了各种实际示例，并使用典型的命令行工具来执行日常的用户访问和权限管理操作。
- en: Managing users and groups, and the related filesystem permissions that come
    into play, is an indispensable skill of a Linux administrator. The knowledge gained
    in this chapter will, we hope, put you on track to becoming a proficient superuser.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 管理用户和组，以及相关的文件系统权限，是Linux管理员必备的技能。我们希望，本章获得的知识能帮助你踏上成为熟练超级用户的道路。
- en: In the following chapter, we continue our journey of mastering Linux internals
    by exploring processes, daemons, and **inter-process communication** (**IPC**)
    mechanisms. An important aspect to keep in mind is that processes and daemons
    are also *owned* by users or groups. The skills learned in this chapter will help
    us navigate the related territory when we look at *who runs what* at any given
    time in the system.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将继续探索Linux内部的掌握之旅，探讨进程、守护进程和**进程间通信**（**IPC**）机制。一个需要记住的重要方面是，进程和守护进程也由用户或组*拥有*。本章学习的技能将帮助我们在查看系统中任何时刻*谁运行了什么*时，顺利掌握相关领域。
- en: Questions
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 问题
- en: 'Here are a few thoughts and questions that sum up the main ideas covered in
    this chapter:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是总结本章主要内容的一些想法和问题：
- en: What is a superuser?
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是超级用户？
- en: '`sudo`'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo`'
- en: Think of a command-line utility for creating users. Can you think of another
    one?
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 想想创建用户的命令行工具，你还能想到其他的吗？
- en: '`adduser` and `useradd`'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '`adduser` 和 `useradd`'
- en: What is the octal value of the `-rw-rw-r—` access permission?
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-rw-rw-r—` 访问权限的八进制值是什么？'
- en: '`r`, `w`, and `x` are: `4`, `2`, and `1`'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '`r`，`w`，和 `x` 分别是：`4`，`2` 和 `1`'
- en: What is the difference between a primary group and a secondary (supplementary)
    group?
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主组和辅助（附加）组之间有什么区别？
- en: How do you change the ownership of a user’s home directory?
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何更改用户主目录的所有权？
- en: Can you remove a user from the system without deleting their home directory?
    How?
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能在不删除用户的主目录的情况下将其从系统中移除吗？怎么做？
- en: Further reading
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here are a few Packt titles that can help you with the task of user management:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可以帮助你进行用户管理的Packt书籍：
- en: '*Mastering Ubuntu Server – Fourth Edition*, *Jay LaCroix*'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Mastering Ubuntu Server – 第四版*，*Jay LaCroix*'
- en: '*Red Hat Enterprise Linux 9 Administration – Second Edition*, *Pablo Iranzo
    Gómez*, *Pedro Ibáñez Requena*, *Miguel Pérez Colino*, and *Scott McCarty*'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Red Hat Enterprise Linux 9 管理 – 第二版*，*Pablo Iranzo Gómez*，*Pedro Ibáñez Requena*，*Miguel
    Pérez Colino* 和 *Scott McCarty*'
- en: '[PRE113]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'

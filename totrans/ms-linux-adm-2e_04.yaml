- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing Users and Groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux is a multiuser, multitasking operating system, which means multiple users
    can access the operating system at the same time while sharing platform resources,
    with the kernel performing tasks for each user concurrently and independently.
    Linux provides the required isolation and security mechanisms to avoid multiple
    users accessing or deleting each other’s files.
  prefs: []
  type: TYPE_NORMAL
- en: When multiple users are accessing the system, permissions come into play. We’ll
    learn how `root`) account, with complete access to the operating system resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Along the way, we’ll take a hands-on approach to the topics learned, further
    deepening the assimilation of key concepts through practical examples. This chapter
    covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We hope that by the end of the chapter, you will be comfortable with the command-line
    utilities for creating, modifying, and deleting users and groups, while proficiently
    handling file and directory permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a quick look at the technical requirements for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need a working Linux distribution installed on either a **virtual machine**
    (**VM**) or a desktop platform. In case you don’t have one already, [*Chapter
    1*](B19682_01.xhtml#_idTextAnchor030), *Installing Linux*, will drive you through
    the related process. In this chapter, we’ll be using Ubuntu or Fedora, but most
    of the commands and examples used would pertain to any other Linux platform.
  prefs: []
  type: TYPE_NORMAL
- en: Managing users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this context, a **user** is anyone using a computer or a system resource.
    In its simplest form, a Linux *user* or *user account* is identified by a name
    and a **unique identifier**, known as a **UID**.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a purely technical point of view, in Linux, we have the following types
    of users:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Normal (or regular) users**: General-purpose, everyday user accounts, mostly
    suited for personal use and for common application and file management tasks,
    with limited access to system-wide resources. A regular user account usually has
    a *login* shell and a *home* directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`root` privileges. Consequently, possible vulnerabilities exposed through the
    web server would remain strictly isolated to the limited action realm of the associated
    system account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`root` user is an example of a superuser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Linux, only the `root` user or users with `sudo` privileges (**sudoers**)
    can create, modify, or delete user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding sudo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `root` user is the default superuser account in Linux, and it has the ability
    to do anything on a system. Ideally, acting as `root` on a system should generally
    be avoided due to safety and security reasons. With `sudo`, Linux provides a mechanism
    for *promoting* a regular user account to superuser privileges, using an additional
    layer of security. This way, a `sudo` user is generally used instead of `root`.
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo` is a command-line utility that allows a permitted user to execute commands
    with the security privileges of a superuser or another user (depending on the
    local system’s security policy). `sudo` originally stood for *superuser do* due
    to its initial implementation of acting exclusively as the superuser, but has
    since been expanded to support not only the superuser but also other (restricted)
    user impersonations. Thus, it is also referred to as *substitute user do*. Yet,
    more often than not, it is perceived as *superuser do* due to its frequent use
    in Linux administrative tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the command-line tools for managing users in Linux require `sudo` privileges
    unless the related tasks are carried out by the `root` user. If we want to avoid
    using the root context, we can’t genuinely proceed with the rest of this chapter—and
    create a user in particular—before we have a user account with superuser privileges.
    So, let’s take this chicken-and-egg scenario out of the way first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most Linux distributions create an additional user account with superuser privileges,
    besides `root`, during installation. The reason, as noted before, is to provide
    an extra layer of security and safety for elevated operations. The simplest way
    to check whether a user account has `sudo` privileges is to run the following
    command in a terminal, while logged in with the related user account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: According to the `sudo` manual (`man sudo`), the `-v` option causes `sudo` to
    update the user’s cached credentials and authenticate the user if the cached credentials
    expired.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user (for example, `julian`) doesn’t have superuser privileges on the
    local machine (for example, `neptune`), the preceding command yields the following
    (or a similar) error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: useradd [OPTIONS] USER
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: sudo useradd julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: sudo cat /etc/passwd | grep julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: getent passwd julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: id julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: sudo useradd -m julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: sudo useradd -m -c "Julian" julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: sudo passwd julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: sudo getent shadow julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: sudo cat /etc/shadow | grep julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: adduser [OPTIONS] USER
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: sudo adduser alex
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: getent passwd alex
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: sudo usermod -aG sudo julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: id julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: su - julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'cat /etc/passwd | cut -d: -f1 | less'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'sudo cat /etc/shadow | cut -d: -f1 | less'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: getent passwd
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: sudo getent shadow
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'sudo getent shadow | cut -d: -f1 | less | column'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: usermod [OPTIONS] USER
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: sudo usermod -c "Julian" -d /local/julian -m -s /bin/bash julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: getent passwd julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: sudo usermod -l "balog" julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: sudo usermod -L julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: sudo usermod -U julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: sudo vipw
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: julian:x:1001:1001:Julian,,,:/home/julian:/bin/bash
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: sudo passwd julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: sudo chage -M 30 julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: sudo chage -d 0 julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: userdel [OPTIONS] USER
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: sudo userdel -f -r julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: sudo vipw
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: julian:x:1001:1001:Julian,,,:/home/julian:/bin/bash
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: sudo vipw -s
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'julian:$6$xDdd7Eay/RKYjeTm$Sf.../:18519:0:99999:7:::'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: sudo rm -rf /home/julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: groupadd [OPTIONS] GROUP
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: sudo groupadd developers
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: cat /etc/group | grep developers
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: getent group developers
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: sudo groupadd -g 1200 developers
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: sudo gpasswd developers
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: groupmod [OPTIONS] GROUP
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'sudo groupmod -g developers to devops, we invoke the -n, --new-name option,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: getent group devops
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: sudo gpasswd devops
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: sudo gpasswd -r devops
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: groupdel [OPTIONS] GROUP
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: id julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: sudo usermod -g devops julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: sudo usermod -g julian julian
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: sudo groupdel devops
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: sudo vigr
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: developers:x:1200:julian,alex
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: sudo vigr -s
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: sudo groupadd -g 1100 admin
  prefs: []
  type: TYPE_NORMAL
- en: sudo groupadd -g 1200 developers
  prefs: []
  type: TYPE_NORMAL
- en: sudo groupadd -g 1300 devops
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: cat /etc/group | tail -n 5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: sudo useradd -g admin -G developers,devops alex2
  prefs: []
  type: TYPE_NORMAL
- en: sudo useradd -g admin -G developers,devops julian2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: id alex2
  prefs: []
  type: TYPE_NORMAL
- en: id julian2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: sudo groupadd -g 1400 managers
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: sudo usermod -a -G managers alex2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: sudo usermod -G developers,devops,managers alex2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: id alex2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'uid=1004(alex2) gid=1100(admin) groups attribute (highlighted) includes the
    related entry for the managers group: 1400(managers).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, if we wanted to *remove* the user `alex2` from the `developers`
    and `devops` secondary groups, to only be associated with the `managers` secondary
    group, we would run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Verifying the secondary groups for the user](img/Figure_04_18_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – Verifying the secondary groups for the user
  prefs: []
  type: TYPE_NORMAL
- en: The `groups` tag now shows the primary group `admin` (by default) and the `managers`
    secondary group.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command to remove the user `alex2` from all secondary groups is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The `usermod` command has an empty string (`''''`) as the `-G, --groups` option
    parameter, to ensure no secondary groups are associated with the user. We can
    verify that the user `alex2` has no more secondary group memberships with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Verifying the user has no secondary groups](img/Figure_04_19_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – Verifying the user has no secondary groups
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the `groups` tag only contains the `1100(admin)` primary GID,
    which by default is always shown for a user.
  prefs: []
  type: TYPE_NORMAL
- en: If an administrator chooses to remove the user `alex2` from a primary group
    or assign them to a different primary group, they must run the `usermod` command
    with the `-g, --gid` option parameter and specify the primary group name. A primary
    group is always mandatory for a user, and it must exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to move the user `alex2` to the `managers` primary group, the
    administrator would run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The related user data can be obtained using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The command yields the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.20 – Verifying the user has been assigned to the new primary group](img/Figure_04_20_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – Verifying the user has been assigned to the new primary group
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gid` attribute of the user record in *Figure 4**.21* reflects the new
    primary group: `gid=1400(managers)`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the administrator chooses to configure the user `alex2` without a specific
    primary group, they must first create an exclusive *group* (named `alex2`, for
    convenience), and have the GID matching the UID of the user `alex2` (`1004`),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, we can remove the user `alex2` from the current primary group (`managers`)
    by specifying the exclusive primary group we just created (`alex2`), like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'The related user record becomes this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Verifying the user has been removed from primary groups](img/Figure_04_21_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – Verifying the user has been removed from primary groups
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gid` attribute of the user record reflects the exclusive primary group
    (matching the user): `gid=1004(alex2)`. Our user doesn’t belong to any other primary
    groups anymore.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding, moving, and removing users across groups may become increasingly daunting
    tasks for a Linux administrator. Knowing at any time which users belong to which
    groups is valuable information, both for reporting purposes and user automation
    workflows. The following section provides a few commands for viewing user and
    group data.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing users and groups
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will provide some potentially useful commands for retrieving
    group and group membership information. Before we get into any commands, we should
    keep in mind that group information is stored in the `/etc/group` and `/etc/gshadow`
    files. Among the two, the former has the information we’re most interested in.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can parse the `/etc/group` file to retrieve all groups, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The command yields the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.22 – Retrieving all group names](img/Figure_04_22_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 – Retrieving all group names
  prefs: []
  type: TYPE_NORMAL
- en: 'A similar command would use `getent`, which we can use like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is identical to the output shown in *Figure
    4**.22*. We can retrieve the information of an individual group (for example,
    `developers`) with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.23 – Retrieving information for a single group](img/Figure_04_23_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.23 – Retrieving information for a single group
  prefs: []
  type: TYPE_NORMAL
- en: The output of the preceding command also reveals the members of the `developers`
    group (`julian2`).
  prefs: []
  type: TYPE_NORMAL
- en: 'To list all groups a specific user is a member of, we can use the `groups`
    command. For example, the following command lists all groups the user `alex` is
    a member of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the command output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.24 – Retrieving group membership information of a user](img/Figure_04_24_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.24 – Retrieving group membership information of a user
  prefs: []
  type: TYPE_NORMAL
- en: The output of the previous command shows the groups for the user `alex`, starting
    with the primary group (`alex`).
  prefs: []
  type: TYPE_NORMAL
- en: 'A user can retrieve their own group membership using the `groups` command-line
    utility without specifying a group name. The following command is executed in
    a terminal session of the user `packt`, who is also an administrator (superuser):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The command yields this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.25 – The current user’s groups](img/Figure_04_25_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.25 – The current user’s groups
  prefs: []
  type: TYPE_NORMAL
- en: There are many other ways and commands to retrieve user- and group-related information.
    We hope that the preceding examples provide a basic idea about where and how to
    look for some of this information.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s look at how a user can switch or log in to specific groups.
  prefs: []
  type: TYPE_NORMAL
- en: Group login sessions
  prefs: []
  type: TYPE_NORMAL
- en: When a user logs in to the system, the group membership context is automatically
    set to the user’s primary group. Once the user is logged in, any user-initiated
    task (such as creating a file or running a program) is associated with the user’s
    primary group membership permissions. A user may also choose to access resources
    in other groups where they are also a member (that is, supplementary or secondary
    groups). To switch the group context or log in with a new group membership, a
    user invokes the `newgrp` command-line utility.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax for the `newgrp` command is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following example, we assume a user (`julian`) is a member of multiple
    groups—`admin` as the primary group, and `developers`/`devops` as secondary groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.26 – A user with multiple group memberships](img/Figure_04_26_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.26 – A user with multiple group memberships
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s impersonate the user `julian` for a while. We are currently logged in
    as the user `packt`. To change to the user `julian`, we will use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the user `julian` needs to have their password set in order to
    authenticate.
  prefs: []
  type: TYPE_NORMAL
- en: 'When logged in as `julian`, the default login session has the following user
    and group context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, this is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.27 – Getting the current user](img/Figure_04_27_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.27 – Getting the current user
  prefs: []
  type: TYPE_NORMAL
- en: 'The `whoami` command provides the current UID (see more details on the command
    with `man whoami` or `whoami --help`), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.28 – Getting the current user’s groups](img/Figure_04_28_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.28 – Getting the current user’s groups
  prefs: []
  type: TYPE_NORMAL
- en: The `groups` command displays all groups that the current user is a member of
    (see more details on the command with `man groups` or `groups --help`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The user can also view their IDs (user and GIDs) by invoking the `id` command,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.29 – Viewing the current user and GID information](img/Figure_04_29_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.29 – Viewing the current user and GID information
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various invocations of the `id` command that provide information
    on the current user and group session. The following command (with the `-g, --group`
    option) retrieves the ID of the current group session for the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: In our case, the preceding command shows `1100`—the GID corresponding to the
    user’s primary group, which is `admin` (see the `gid` attribute in *Figure 4**.30*).
    Upon login, the default group session is always the primary group corresponding
    to the user. If the user were to create a file, for example, the file permission
    attributes would reflect the primary group’s ID. We’ll look at the file permissions
    in more detail in the *Managing* *permissions* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s switch the group session for the current user to `developers`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'The current group session yields this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The GID corresponds to the `developers` secondary GID, as displayed by the
    `groups` attribute in *Figure 4**.30*: `1200(developers)`. If the user created
    any files now, the related file permission attributes would have the `developers`
    GID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.30 – Switching the group session](img/Figure_04_30_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.30 – Switching the group session
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user attempts to log in to a group they are not a member of (for example,
    `managers`), the `newgrp` command prompts for the `managers` group’s password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: If our user had the `managers` group password, or if they were a superuser,
    the group login attempt would succeed. Otherwise, the user would be denied access
    to the `managers` group’s resources.
  prefs: []
  type: TYPE_NORMAL
- en: We conclude here our topic of managing users and groups. The examples of the
    related administrative tasks used throughout this section are certainly all-encompassing.
    In many of these cases, there are multiple ways to achieve the same result, using
    different commands or approaches.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you should be relatively proficient in managing users and groups, and
    comfortable using the various command-line utilities for operating the related
    changes. Users and groups are managed in a relational fashion, where users belong
    to a group or groups are associated with users. We also learned that creating
    and managing users and groups requires superuser privileges. In Linux, user data
    is stored in the `/etc/passwd` and `/etc/shadow` files, while group information
    is found in `/etc/group` and `/etc/gshadow`. Besides using the dedicated command-line
    utilities, users and groups can also be altered by manually editing these files.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll turn to the security and isolation context of the multiuser group
    environment. In Linux, the related functionality is accomplished by a system-level
    access layer that controls the read, write, and execute permissions of files and
    directories, by specific users and groups.
  prefs: []
  type: TYPE_NORMAL
- en: The following section explores the management and administrative tasks related
    to these permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Managing permissions
  prefs: []
  type: TYPE_NORMAL
- en: A key tenet of Linux is the ability to allow multiple users to access the system
    while performing independent tasks simultaneously. The smooth operation of this
    multiuser, multitasking environment is controlled via **permissions**. The Linux
    kernel provides a robust framework for the underlying security and isolation model.
    At the user level, dedicated tools and command-line utilities help Linux users
    and system administrators with related permission management tasks.
  prefs: []
  type: TYPE_NORMAL
- en: For some Linux users, especially beginners, Linux permissions may appear confusing
    at times. This section attempts to demystify some of the key concepts about file
    and directory permissions in Linux. You will learn about the basic permission
    *rights* of accessing files and directories—the *read*, *write*, and *execution*
    permissions. We explore some of the essential administrative tasks for viewing
    and changing permissions, using system-level command-line utilities.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the topics discussed in this section should be regarded closely with
    users and groups. The related idioms can be as simple as *a user can read or update
    a file*, *a group has access to these files and directories*, or *a user can execute*
    *this program*.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with the basics, introducing file and directory permissions.
  prefs: []
  type: TYPE_NORMAL
- en: File and directory permissions
  prefs: []
  type: TYPE_NORMAL
- en: 'In Linux, permissions can be regarded as the *rights* or *privileges* to act
    upon a file or a directory. The basic rights, or *permission attributes*, are
    outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Read**: A *read* permission of a file allows users to view the content of
    the file. On a directory, the read permission allows users to list the content
    of the directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write**: A *write* permission of a file allows users to modify the content
    of the file. For a directory, the write permission allows users to modify the
    content of the directory by adding, deleting, or renaming files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cd` command).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, let’s take a look at how to reveal the permissions for files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing permissions
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common way to view the permissions of a file or directory is by using
    the `ls` command-line utility. The basic syntax of this command is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example use of the `ls` command to view the permissions of the `/``etc/passwd`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'The command yields the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: The `-l` option of the `ls` command provides a detailed output by using the
    *long listing format*, according to the `ls` documentation (`man ls`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s analyze the output, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'We have nine segments, separated by single whitespace characters (delimiters).
    These are outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-rw-r--r--`: The file access permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: The number of hard links'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`root`: The *user* who is the owner of the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`root`: The *group* that is the owner of the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2010`: The size of the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mar`: The month the file was created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`9`: The day of the month the file was created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`08:57`: The time of day the file was created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/passwd`: The filename'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s examine the file access permissions field (`-rw-r--r--`). File access
    permissions are defined as a 10-character field, grouped as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first character (attribute) is reserved for the file type (see the *File*
    *types* section).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next 9 characters represent a 9-bit field, defining the effective permissions
    as 3 sequences of 3 attributes (bits) each: *user owner* permissions, *group owner*
    permissions, and *all other users’* permissions (see the *Permission* *attributes*
    section).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take a look at the file type attributes.
  prefs: []
  type: TYPE_NORMAL
- en: File type attributes
  prefs: []
  type: TYPE_NORMAL
- en: 'The file type attributes are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`d`: Directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-`: Regular file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l`: Symbolic link'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p`: Named pipe—a special file that facilitates communication between programs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: Socket—similar to a pipe but with bidirectional network communications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b`: Block device—a file that corresponds to a hardware device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c`: Character device—similar to a block device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s have a closer look at the permission attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Permission attributes
  prefs: []
  type: TYPE_NORMAL
- en: 'As previously noted, the access permissions are represented by a 9-bit field,
    a group of 3 sequences, each with 3 bits, defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bits 1-3**: *User* owner permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bits 4-6**: *Group* owner permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bits 7-9**: *All* other users’ (or *world*) permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each permission attribute is a bit flag in the binary representation of the
    related 3-bit sequence. They can be represented either as a character or as an
    equivalent numerical value, also known as the *octal* value, depending on the
    range of the bit they represent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the permission attributes with their respective octal values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`r`: *Read* permission; 2 ^ 2 = `4` (bit 2 set)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`w`: *Write* permission: 2 ^ 1 = `2` (bit 1 set)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x`: *Execute* permission: 2 ^ 0 = `1` (bit 0 set)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-`: *No* permission: `0` (no bits set)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The resulting corroborated number is also known as the *octal value* of the
    file permissions (see the *File permission examples* section). Here’s an illustration
    of the file permission attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.31 – The file permission attributes](img/Figure_04_31_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.31 – The file permission attributes
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s consider some examples.
  prefs: []
  type: TYPE_NORMAL
- en: File permission examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s go back and evaluate the file access permissions for `/etc/passwd`:
    `-rw-r--r--`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-`: The first character (byte) denotes the file type (a regular file, in our
    case)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rw-`: The next three-character sequence indicates the user owner permissions;
    (in our case, read (`r`); write (`w`); octal value = `4` (`r`) + `2` (`w`) = `6`
    (`rw`))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r--`: The next 3-byte sequence defines the group owner permissions (in our
    case, read (`r`); octal value = `4` (`r`))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r--`: The last three characters denote the permissions for all other users
    in the system (in our case, read (`r`); octal value = `4` (`r`))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'According to the preceding information, the resulting octal value of the `/etc/passwd`
    file access permissions is `644`. Alternatively, we can query the octal value
    with the `stat` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'The command yields the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: The `stat` command displays the file or filesystem status. The `--format` option
    parameter specifies the access rights in octal format (`'%a'`) for the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples of access permissions, with their corresponding octal
    values and descriptions. The three-character sequences are intentionally delimited
    with whitespace for clarity. The leading file type has been omitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rwx` (`777`): Read, write, and execute for all users including owner, group,
    and world'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rwx r-x` (`755`): Read and execute for all users; the file owner has write
    permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rwx r-x ---` (`750`): Read and execute for owner and group; the owner has
    write permissions while others have no access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rwx --- ---` (`700`): Read, write, and execute for owner; everyone else has
    no permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rw- rw- rw-` (`666`): Read and write for all users; there are no execute permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rw- rw- r--` (`664`): Read and write for owner and group; read for others'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rw- rw- ---` (`660`): Read and write for owner and group; others have no permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rw- r-- r--` (`644`): Read and write for owner; read for group and others'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rw- r-- ---` (`640`): Read and write for owner; read for group; no permissions
    for others'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rw- --- ---` (`600`): Read and write for owner; no permissions for group and
    others'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r-- --- ---` (`400`): Read for owner; no permissions for others'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read, write, and execute are the most common types of file access permissions.
    So far, we have mostly focused on permission types and their representation. In
    the next section, we will explore a few command-line tools used for altering permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Changing permissions
  prefs: []
  type: TYPE_NORMAL
- en: Modifying file and directory access permissions is a common Linux administrative
    task. In this section, we will learn about a few command-line utilities that are
    handy when it comes to changing permissions and ownership of files and directories.
    These tools are installed with any modern-day Linux distribution, and their use
    is similar across most Linux platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Using chmod
  prefs: []
  type: TYPE_NORMAL
- en: The `chmod` command is short for *change mode*, and it’s used to set access
    permissions on files and directories. The `chmod` command can be used by both
    the current user (owner) and a superuser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changing permissions can be done in two different modes: **relative** and **absolute**.
    Let’s take a look at each of them.'
  prefs: []
  type: TYPE_NORMAL
- en: Using chmod in relative mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Changing permissions in **relative** mode is probably the easiest of the two.
    It is important to remember the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*To whom* we change permissions: `u` = user (owner), `g` = group, `o` = others'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How* we change permissions: `+` = add, `-` = remove, `=` = exactly as is'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Which* permission we change: `r` = read, `w` = write, `x` = execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s explore a few examples of using `chmod` in relative mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our first example, we want to add write (`w`) permissions for all *other*
    (`o`) users (*world*), to `myfile`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'The related command-line output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.32 – Setting write permissions to all other users](img/Figure_04_32_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.32 – Setting write permissions to all other users
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next example, we remove the read (`r`) and write (`w`) permissions for
    the current user owner (`u`) of `myfile`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'The command-line output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.33 – Removing read-write permissions for owner](img/Figure_04_33_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.33 – Removing read-write permissions for owner
  prefs: []
  type: TYPE_NORMAL
- en: We did not use `sudo` in either of the preceding examples since we carried out
    the operations as the current owner of the file (`packt`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we assume that `myfile` has read, write, and execute
    permissions for everyone. Then, we carry out the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the read (`r`) permission for the owner (`u`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the write (`w`) permission for the owner (`u`) and group (`g`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the read (`r`), write (`w`), and execute (`x`) permissions for everyone
    else (`o`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is illustrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'The command-line output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.34 – A relatively complex invocation of chmod in relative mode](img/Figure_04_34_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.34 – A relatively complex invocation of chmod in relative mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s look at a second way of changing permissions: using the `chmod`
    command-line utility in absolute mode, by specifying the octal number corresponding
    to the access permissions.'
  prefs: []
  type: TYPE_NORMAL
- en: Using chmod in absolute mode
  prefs: []
  type: TYPE_NORMAL
- en: The `chmod` changes all permission attributes at once, using an *octal* number.
    The *absolute* designation of this method is due to changing permissions without
    any reference to existing ones, by simply assigning the octal value corresponding
    to the access permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a quick list of the octal values corresponding to effective permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`7` `rwx`: Read, write, and execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`6` `rw-`: Read and write'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`5` `r-w`: Read and execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4` `r--`: Read'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3` `-wx`: Write and execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2` `-``w-`: Write'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1` `--``x`: Execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0` `---`: No permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following example, we change the permissions of `myfile` to read (`r`),
    write (`w`), and execute (`x`) for everybody:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'The related change is illustrated by the following command-line output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.35 – The chmod invocation in absolute mode](img/Figure_04_35_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.35 – The chmod invocation in absolute mode
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the `chmod` command, please refer to the related
    documentation (`man chmod`).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look at our next command-line utility, specializing in file and directory
    ownership changes.
  prefs: []
  type: TYPE_NORMAL
- en: Using chown
  prefs: []
  type: TYPE_NORMAL
- en: The `chown` command (short for *change owner*) is used to set the ownership
    of files and directories. Typically, the `chmod` command can only be run with
    *superuser* privileges (that is, by a *sudoer*). Regular users can only change
    the *group* ownership of their files, and only when they are a member of the target
    group.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of the `chown` command is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Usually, we invoke the `chown` command with both user *and* group ownerships—for
    example, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'The related command-line output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.36 – A simple invocation of the chown command](img/Figure_04_36_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.36 – A simple invocation of the chown command
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most common uses of `chown` is for *recursive mode* invocation,
    with the `-R, --recursive` option. The following example changes the ownership
    permissions of all files in `mydir` (directory), initially owned by `root`, to
    `julian`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'The related changes are shown in the following command-line output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.37 – Invoking ls and chown in recursive mode](img/Figure_04_37_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.37 – Invoking ls and chown in recursive mode
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the `chown` command, please refer to the related
    documentation (`man chown`).
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s briefly look at a similar command-line utility that specializes
    exclusively in group ownership changes.
  prefs: []
  type: TYPE_NORMAL
- en: Using chgrp
  prefs: []
  type: TYPE_NORMAL
- en: The `chgrp` command (short for *change group*) is used to change the *group*
    ownership for files and directories. In Linux, files and directories typically
    belong to a user (owner) or a group. We can set user ownership by using the `chown`
    command-line utility, while group ownership can be set with `chgrp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for `chgrp` is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example changes the group ownership of `myfile` to the `developers`
    group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'The changes are shown in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.38 - Using chgrp to change group ownership](img/Figure_04_38_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.38 - Using chgrp to change group ownership
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command has been invoked with superuser privileges (`sudo`) since
    the current user (`packt`) is not an admin for the `developers` group.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the `chgrp` utility, please refer to the tool’s command-line
    help (`chgrp --help`).
  prefs: []
  type: TYPE_NORMAL
- en: Using umask
  prefs: []
  type: TYPE_NORMAL
- en: 'The `umask` command is used to view or set the default *file mode mask* in
    the system. The file mode represents the default permissions for any new files
    and directories created by a user. For example, the default file mode masks in
    Ubuntu are given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0002` for a regular user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0022` for the `root` user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a general rule in Linux, the *default permissions* for new files and directories
    are calculated with the following formulas:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0666 – umask`: For a new file created by a regular user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0777 – umask`: For a new directory created by a regular user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'According to the preceding formula, on Ubuntu, we have the following default
    permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'File (regular user): `0666 – 0002 =` `0664`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'File (`root`): `0666 – 0022 =` `0644`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Directory (regular user): `0777 – 0002 =` `0775`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Directory (`root`): `0777 – 0022 =` `0755`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following examples, run on Ubuntu, we create a file (`myfile`) and a
    directory (`mydir`), using the terminal session of a regular user (`packt`). Then,
    we query the `stat` command for each and verify that the default permissions match
    the values enumerated previously for regular users (file: `664`, directory: `775`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with the default file permissions first, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'The related output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s verify the default directory permissions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'The related output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a list with the typical `umask` values for files and directories on
    Linux systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.39 – Typical umask values on Linux](img/Figure_04_39_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.39 – Typical umask values on Linux
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the `umask` utility, please refer to the tool’s command-line
    help (`umask --help`).
  prefs: []
  type: TYPE_NORMAL
- en: File and directory permissions are critical for a secure environment. Users
    and processes should operate exclusively within the isolation and security constraints
    controlled by permissions, to avoid inadvertent or deliberate interference with
    the use and ownership of system resources. There are cases, particularly in user
    impersonation situations, when the access rights may involve some special permission
    attributes. Let’s have a look at them.
  prefs: []
  type: TYPE_NORMAL
- en: Special permissions
  prefs: []
  type: TYPE_NORMAL
- en: In Linux, the ownership of files and directories is usually determined by the
    UID and GID of the user—or group—who created them. The same principle applies
    to applications and processes—they are owned by the users who launch them. The
    special permissions are meant to change this default behavior when needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the special permission flags, with their respective octal values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setuid`: 2 ^ 2 = `4` (bit 2 set)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setgid`: 2 ^ 1 = `2` (bit 1 set)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sticky`: 2 ^ 0 = `1` (bit 0 set)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When any of these special bits are set, the overall octal number of the access
    permissions will have an extra digit, with the leading (high-order) digit corresponding
    to the special permission’s octal value.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at these special permission flags, with examples for each.
  prefs: []
  type: TYPE_NORMAL
- en: The setuid permission
  prefs: []
  type: TYPE_NORMAL
- en: With the `setuid` bit set, when an executable file is launched, it will run
    with the privileges of the file owner instead of the user who launched it. For
    example, if the executable is owned by `root` and launched by a *regular* user,
    it will run with `root` privileges. The `setuid` permission could pose a potential
    security risk when used inadequately, or when vulnerabilities of the underlying
    process could be exploited.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the file access permission field, the `setuid` bit could have either of
    the following representations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`s` *replacing* the corresponding executable bit (`x`) (when the executable
    bit is present)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`S` (the capital letter) for a non-executable file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `setuid` permission can be set via the following `chmod` command (for example,
    for the `myscript.sh` executable file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting file permissions are shown here (including the octal value):
    `-``rwsrwxr-x` (`4775`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the related command-line output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.40 – The setuid permission](img/Figure_04_40_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.40 – The setuid permission
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, you can see the difference in permissions. Before
    applying the `chmod` command, the permissions are `-rwxrwxr-x`, and after applying
    the `setuid` permission with the `chmod` command, an `s` (referring to `setuid`)
    is included in the user’s permission, `-rwsrwxr-x`. For more information on `setuid`,
    please visit [https://docs.oracle.com/cd/E19683-01/816-4883/secfile-69/index.html](https://docs.oracle.com/cd/E19683-01/816-4883/secfile-69/index.html)
    or refer to the `chmod` command-line utility documentation (`man chmod`).
  prefs: []
  type: TYPE_NORMAL
- en: The setgid permission
  prefs: []
  type: TYPE_NORMAL
- en: While `setuid` controls user impersonation privileges, `setgid` has a similar
    effect on group impersonation permissions.
  prefs: []
  type: TYPE_NORMAL
- en: When an executable file has the `setgid` bit set, it runs using the permissions
    of the group that owns the file, rather than the group of the user who initiated
    it. In other words, the GID of the process is the same as the GID of the file.
  prefs: []
  type: TYPE_NORMAL
- en: When used on a directory, the `setgid` bit changes the default ownership behavior
    so that files created within the directory will have group ownership of the parent
    directory instead of the group associated with the user who created them. This
    behavior could be adequate in file-sharing situations when files can be changed
    by all users associated with the parent directory’s owner group.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `setgid` permission can be set via the following `chmod` command (for example,
    for the `myscript.sh` executable file, the original file, before applying `setuid`
    to it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting file permissions are shown here (including the octal value):
    `-``rwxrwsr-x` (`2775`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The command-line output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.41 – The setgid permission](img/Figure_04_41_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.41 – The setgid permission
  prefs: []
  type: TYPE_NORMAL
- en: For more information on `setgid`, please visit [https://en.wikipedia.org/wiki/Setuid](https://en.wikipedia.org/wiki/Setuid)
    or refer to the `chmod` command-line utility documentation (`man chmod`).
  prefs: []
  type: TYPE_NORMAL
- en: The sticky permission
  prefs: []
  type: TYPE_NORMAL
- en: The `sticky` bit has no effect on files. For a directory with the `sticky` permission,
    only the user owner or group owner of the directory can delete or rename files
    within the directory. Users or groups with write access to the directory, by way
    of user or group ownership, cannot delete or modify files in the directory. The
    `sticky` permission is useful when a directory is owned by a privileged group
    whose members share write access to files in that directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `sticky` permission can be set via the following `chmod` command (for example,
    for the `mydir` directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting directory permissions are shown here (including the octal value):
    `drwxrwxr-t` (`1775`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The command-line output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.42 – The sticky permission](img/Figure_04_42_B19682.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.42 – The sticky permission
  prefs: []
  type: TYPE_NORMAL
- en: For more information on `sticky`, please visit [https://en.wikipedia.org/wiki/Setuid](https://en.wikipedia.org/wiki/Setuid)
    or refer to the `chmod` command-line utility documentation (`man chmod`).
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting permissions can be a daunting task. This section aimed to demystify
    some of the related intricacies, and we hope that you will feel more comfortable
    handling file and directory permissions in everyday Linux administration tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored some of the essential concepts related to managing
    users and groups in Linux. We learned about file and directory permissions and
    the different access levels of a multiuser environment. For each main topic, we
    focused on basic administrative tasks, providing various practical examples and
    using typical command-line tools for everyday user access and permission management
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Managing users and groups, and the related filesystem permissions that come
    into play, is an indispensable skill of a Linux administrator. The knowledge gained
    in this chapter will, we hope, put you on track to becoming a proficient superuser.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we continue our journey of mastering Linux internals
    by exploring processes, daemons, and **inter-process communication** (**IPC**)
    mechanisms. An important aspect to keep in mind is that processes and daemons
    are also *owned* by users or groups. The skills learned in this chapter will help
    us navigate the related territory when we look at *who runs what* at any given
    time in the system.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few thoughts and questions that sum up the main ideas covered in
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a superuser?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo`'
  prefs: []
  type: TYPE_NORMAL
- en: Think of a command-line utility for creating users. Can you think of another
    one?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adduser` and `useradd`'
  prefs: []
  type: TYPE_NORMAL
- en: What is the octal value of the `-rw-rw-r—` access permission?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`r`, `w`, and `x` are: `4`, `2`, and `1`'
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between a primary group and a secondary (supplementary)
    group?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you change the ownership of a user’s home directory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you remove a user from the system without deleting their home directory?
    How?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few Packt titles that can help you with the task of user management:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Mastering Ubuntu Server – Fourth Edition*, *Jay LaCroix*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Red Hat Enterprise Linux 9 Administration – Second Edition*, *Pablo Iranzo
    Gómez*, *Pedro Ibáñez Requena*, *Miguel Pérez Colino*, and *Scott McCarty*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE

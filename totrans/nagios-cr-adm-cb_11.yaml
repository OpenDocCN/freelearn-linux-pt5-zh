- en: Chapter 11. Automating and Extending Nagios Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Allowing and submitting passive checks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting passive checks from a remote host with NSCA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting passive checks in response to SNMP traps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an event handler script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking host and service states with Nagiosgraph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading status into a MySQL database with NDOUtils
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing customized Nagios Core reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting extra visualizations with NagVis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to being useful as a standalone monitoring framework, Nagios Core
    has a modular design that allows both interaction with and extension by other
    programs and tools, predominantly using its external command file for controlling
    the behavior of the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most useful ways of interacting with the Nagios Core server in this
    way is through the use of passive checks: submitting check results to the server
    directly, rather than as the result of the server''s own active checks.'
  prefs: []
  type: TYPE_NORMAL
- en: The simplest application of the idea of passive checks is for monitoring some
    process that might take an indeterminate amount of time to run, and hence resists
    active checking; instead of the service making active checks of its own, it accepts
    a check result submitted by another application, perhaps something like a backup
    script after it has completed its run. These can be sent and accepted via an addon
    called the **Nagios Service Check Acceptor** (**NSCA**). Similarly, just as plugins
    and notifications are actually scripted calls to external commands, such as `check_http`,
    and `mail`, event handlers can be configured to run a specified command every
    time a host or service changes state. This can be used for the supplementary recording
    of change state data, or automated attempts at actively resolving the problem,
    such as restarting a remote server. We also saw event handlers used in the *Setting
    up a redundant monitoring host* recipe in [Chapter 10](ch10.html "Chapter 10. Security
    and Performance"), *Security and Performance*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, this chapter also includes installation procedures and discussion
    of a few of the more popular extensions to Nagios Core:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nagiosgraph**: This is an advanced web-based graphing solution for Nagios
    Core, graphing both server performance and host and service status metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NagVis**: This is an advanced web-based visualization extension for Nagios
    Core data, especially well-suited for administrators who need something more comprehensive
    than Nagios Core''s built-in networking mapping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NDOUtils**: This applies the translations of Nagios Core data into a standard
    database system such as MySQL; very useful for performing advanced queries of
    the Nagios Core data for custom systems such as monitoring displays, or logging
    with change control systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll discuss NDOUtils, perhaps the most versatile Nagios Core extension of
    all, in two separate recipes; first by showing how to install it, and then some
    ideas on how to apply it to make custom Nagios Core reporting applications of
    our own, in the form of a **CLI report** written in **Perl**, and an **RSS feed**
    written in **PHP**.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing and submitting passive checks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn how to configure Nagios Core to accept passive checks
    for a service. This allows both users and external applications to directly submit
    the results of checks to Nagios Core, rather than having the application seek
    them out itself through polling with active checks, performed via plugins such
    as `check_http` or `check_ping`.
  prefs: []
  type: TYPE_NORMAL
- en: We'll show one simple example of a passive check, flagging a service called
    `BACKUP` for an existing host. We'll show how to do this via the web interface,
    which is very easy, and via the external commands file, which is slightly more
    complex but much more flexible and open to automation.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is that when a user or process receives confirmation that the backup
    process on a host has completed correctly, they are able to supply a check result
    of `OK` directly to the service, without Nagios Core needing to poll anything
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should be running a Nagios Core 3.0 or newer server. You should also already
    have a host configured for which you want to define a service that will accept
    passive checks. In this example, we''ll use the host `ithaca.naginet`, which might
    be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You will also need a working Nagios Core web interface to check that passive
    checks are enabled, and to try out the recipe's method of submitting passive checks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The recipe will be in two parts: enabling and configuring the service for passive
    checks only, and actually submitting a passive check via the web interface. In
    the *There''s more...* section, we''ll show how to submit a check result via the
    external commands file, which is a little more complicated, but allows advanced
    automation behavior.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can define a new `BACKUP` service that accepts passive checks only, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the web interface and ensure that passive checks are enabled. The
    **Tactical Overview** section shows a panel for it near the bottom. Check that
    it's green:![How to do it...](img/5566_11_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it's not green, you should be able to enable the checks again by clicking
    on the **Disabled** bar. In this case, you should also check the `/usr/local/nagios/etc/nagios.cfg`
    file to make sure that the `accept_passive_service_checks` option is set to `1`
    as well, so that Nagios Core allows passive checks on startup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Change to the Nagios Core `objects` configuration directory. If you're using
    the sample configuration, this will likely be `/usr/local/nagios/etc/objects`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `commands.cfg` file, and add a definition for the `check_dummy` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you already followed the *Monitoring individual nodes in a cluster* recipe
    in [Chapter 8](ch08.html "Chapter 8. Managing Network Layout"), *Understanding
    the Network Layout*, then you may already have defined this command, in which
    case you can skip this step, as the definition is the same.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Edit the file containing the definition for the existing host. In this example,
    the host is defined in a file called `ithaca.naginet.cfg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the following service definition to the end of the file, substituting the
    appropriate value for `host_name`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This example uses the `generic-service` template. You can use any service template
    you like; the important directives are `active_checks_enabled`, `passive_checks_enabled`,
    and `check_command`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Validate the configuration and restart the Nagios Core server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With this done, the Nagios Core web interface should show the service as accepting
    passive checks only in the **Services** listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It will remain in the `PENDING` state until a passive check result is submitted
    for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can submit a passive check result via the web interface as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the service's name in the **Services** listing, and click on **Submit
    passive check result for this service** menu item:![How to do it...](img/5566_11_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Complete the resulting form, with the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Host Name**: This is the host name for which the passive check result should
    be submitted. This should already be filled out for us.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service**: This is the service description for which the passive check result
    should be submitted. This should also already be filled out with `BACKUP`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Check Result**: This is the particular result you would like to submit for
    the check. In this case, we choose `OK` to signal that the backup completed successfully.
    We could just as easily submit a `CRITICAL` result if we wished.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Check Output**: This is a message to attach to the status. In this case,
    we choose the simple message **Nightly backups were successful**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance Data**: This is the optional extra detail about how the service
    being checked is performing. We can leave this blank.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Commit** to submit the passive check result:![How to do it...](img/5566_11_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a short delay, the detail for the service should show it as reflecting
    the result of the passive check, along with explicitly showing that active checks
    are disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The configuration added in the preceding section adds a new service called `BACKUP`
    to the existing `ithaca.naginet` host, and is designed to manage and report the
    status of backups for this host. In our example, this isn't something Nagios Core
    can check manually; no network service on `ithaca.naginet` can be checked to see
    if the backups have succeeded.
  prefs: []
  type: TYPE_NORMAL
- en: However, suppose as administrators we do receive a backup report in our inbox
    every morning, so we know whether the backups have succeeded or failed and would
    like to register that status in Nagios Core, perhaps for record-keeping purposes
    or to alert other administrators to problems.
  prefs: []
  type: TYPE_NORMAL
- en: To that end, we disable active checks for the service, and put in place a dummy
    check command, `check_dummy`, which we never expect to run. If for whatever reason
    an active check is run, it will always flag a `WARNING` state, with the message
    **Unwanted active check!**. The `check_dummy` command never actually checks anything;
    it is configured to always return the state and output defined in its two arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we enable passive checks for the service and submit the results manually.
    If the backups failed, we could just as easily record that with a passive check
    result of `WARNING` or `CRITICAL`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s also possible (and often desirable) to submit active checks via the external
    commands file, which is useful for automation purposes. We write details for the
    check in a single line into the commands file in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For our example, the line would be similar to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can write this directly to the external commands file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this context, the `<service_status>` field needs to be an integer corresponding
    to the appropriate state. If you use the text value `OK` or `WARNING`, the command
    will not work as expected.
  prefs: []
  type: TYPE_NORMAL
- en: '`0` for `OK`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1` for `WARNING`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2` for `CRITICAL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3` for `UNKNOWN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the syntax is correct, then the passive check will be registered just the
    same way as if it were submitted via the web interface. Writing to the command
    file thus allows us to submit passive check results with scripts and automated
    systems, with a little knowledge of an appropriate shell scripting language such
    as Bash or Perl.
  prefs: []
  type: TYPE_NORMAL
- en: We go into a little more detail about using external commands for passive check
    results, including a common application with the NSCA add-on, in the *Submitting
    passive checks from a remote host with NSCA* recipe in this chapter. If you don't
    want to input your passive checks manually, then you will most likely find this
    recipe of interest, along with its accompanying explanation of freshness checks.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Submitting passive checks from a remote host with NSCA*, *Submitting passive
    checks in response to SNMP traps*, and *Setting up an event handler script* recipes
    in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting passive checks from a remote host with NSCA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll show how to automate the submission of passive checks
    by a remote host, using the example of a monitored host, `ithaca.naginet`, submitting
    a passive check to a Nagios Core server with information about how its `BACKUP`
    service is performing.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the backup process completed successfully, we configure the
    monitored host to submit a passive check result specifying that the `BACKUP` service
    should have the status `OK`. However, if there were a problem with the backup,
    the monitored host could send a passive check result with a `WARNING` or `CRITICAL`
    status.
  prefs: []
  type: TYPE_NORMAL
- en: In both cases, Nagios Core does no checking of its own; it trusts the results
    submitted by its target host.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we'll use the NSCA add-on. We'll install the NSCA server on the
    Nagios Core server, and the NSCA client program `send_nsca` on the monitored host.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should already have followed the *Allowing and submitting passive checks*
    recipe in this chapter. In this recipe, we will be building on the configuration
    established in that recipe; specifically, we will assume that you already have
    a host with a service configured only to accept passive checks.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to be able to install the software on both the monitoring server
    (the NSCA server) and on the server that will submit passive checks (the NSCA
    client), and ideally be generally familiar with the `./configure`, `make`, and
    `make install` process for installing software from source on UNIX-like systems.
  prefs: []
  type: TYPE_NORMAL
- en: You should also be able to define any necessary firewall configuration to allow
    the NSCA client to send information to TCP port `5667` on the NSCA server. A firewall
    is absolutely necessary to protect the `nsca` daemon from abuse.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can set up the NSCA server on the monitoring server (in this example, `olympus.naginet`)
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest version of NSCA using `wget` or a similar tool. You can
    find download links on the Nagios Exchange page for NSCA at [http://exchange.nagios.org/directory/Addons/Passive-Checks/NSCA--2D-Nagios-Service-Check-Acceptor/details](http://exchange.nagios.org/directory/Addons/Passive-Checks/NSCA--2D-Nagios-Service-Check-Acceptor/details).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this example, we're downloading and compiling it in our home directory on
    the monitoring server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inflate the `.tar.gz` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move into the new `nsca-2.7.2` directory, and configure and compile the `nsca`
    daemon. Note that this process may prompt you to install the `libmcrypt` library
    and its headers, perhaps in `libmcrypt` and `libmcrypt-dev` packages in your system''s
    package manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the NSCA server files manually; you will likely need `root` privileges
    for this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the new file `/usr/local/nagios/etc/nsca.cfg`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Uncomment the `password` directive, and define it. A random password generated
    by a tool such as `pwgen` or `makepasswd` will work fine. Don't use the one below;
    it's just an example!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that the NSCA daemon runs with no errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If it does, you should add this command to an appropriate startup script, perhaps
    in `/etc/rc.local`, so that the daemon starts when the monitoring server boots.
    You should consult your system's documentation to find out the best place to add
    this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can set up the NSCA client on the monitored server (in this example, `ithaca.naginet`)
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, download and expand the latest version of NSCA, and configure and compile
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the NSCA client files manually; you will likely need `root` privileges
    for this, and may need to create the `/usr/local/bin` and `/usr/local/etc` directories
    beforehand:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the new file `/usr/local/etc/send_nsca.cfg`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Uncomment the `password` directive, and define it to be the same as the password
    given in `nsca.cfg` on the monitoring server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `send_nsca` program to try and submit a passive check result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Substitute the appropriate host names for the monitoring server (`olympus.naginet`),
    the monitored server (`ithaca.naginet`), and the service description `BACKUP`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that the fields are separated by `\t` characters, which expand to literal
    *Tab* characters with `echo -en`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If this worked correctly, you should see that the passive check result in the
    web interface was successfully read by the monitoring server and applied appropriately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `nsca` daemon installed on the monitoring server is designed to listen
    for submitted service checks from the `send_nsca` client, provided that the password
    is correct and the data is in the appropriate format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Our example passive check took this form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, as with locally submitted passive checks, `check_result` corresponds
    to a numeric value, to one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0` for `OK`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1` for `WARNING`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2` for `CRITICAL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3` for `UNKNOWN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once received by the `nsca` daemon on the monitoring server, this is translated
    into a passive check result command, written to the Nagios Core external commands
    file at `/usr/local/nagios/var/rw/nagios.cmd`, and processed in the same way as
    a locally submitted passive check would be.
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to include calls to `send_nsca` at the end of scripts such as
    those managing backups, to immediately and automatically send a passive check
    result corresponding to whether the backup script succeeded.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the NSCA daemon's very simple design and very basic security checks,
    it's important to apply a firewall policy to ensure that only the appropriate
    hosts can write to the NSCA port on the host monitoring system. A password as
    implemented here is a good first step, but is not sufficient to keep things secure.
    Make sure you read the `SECURITY` file included in the NSCA sources to ensure
    your configuration for the daemon is secure. Similar security guidelines apply
    to the installation of NRPE as discussed in [Chapter 6](ch06.html "Chapter 6. Enabling
    Remote Execution").
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To supplement this setup, it's often a good idea to also have Nagios Core check
    the freshness of its services. If we have a process that needs to run regularly,
    such as backups, we will likely want to be notified if we haven't received any
    passive checks from the host in a given period of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be managed by configuring the service to run an active check after
    a certain period of time has elapsed with no passive checks. The configuration
    might look similar to the following code snippet, adding values for `check_freshness`
    and `freshness_threshold`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In this case, `freshness_threshold` is 86400 seconds, or 24 hours; if there
    have been no passive checks submitted for 24 hours, `check_command` will be run,
    even though active checks are disabled. `check_command` is defined to flag a `WARNING`
    state for the service with an appropriate explanatory message using the `check_dummy`
    command and plugin, whenever it is actually run.
  prefs: []
  type: TYPE_NORMAL
- en: Check freshness is discussed in more detail in the Nagios Core documentation,
    in the section entitled *Service and Host Freshness Checks* at [http://nagios.sourceforge.net/docs/3_0/freshness.html](http://nagios.sourceforge.net/docs/3_0/freshness.html).
  prefs: []
  type: TYPE_NORMAL
- en: Note that there's no reason that the status of a service has to come from the
    same host. You can send a passive check from one host to submit information about
    another. In fact, this is the basis of a distributed monitoring setup; one host
    can submit check results for any number of other hosts.
  prefs: []
  type: TYPE_NORMAL
- en: This can be particularly useful for working around network connectivity or routing
    problems; if Nagios Core has no connectivity at all to a host it needs to monitor,
    but does have connectivity to an intermediate host, that host can be configured
    to submit checks on behalf of the unreachable host, a slightly complex but often
    necessary setup.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Allowing and submitting passive checks*, *Submitting passive checks in
    response to SNMP traps*, and *Setting up an event handler script* recipes in this
    chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using an alternative check command* recipe in [Chapter 2](ch02.html "Chapter 2. Working
    with Commands and Plugins"), *Working with Commands and Plugins*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting passive checks in response to SNMP traps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn how to configure Nagios Core to process **Simple
    Network Management Protocol** (**SNMP**) traps, information sent by monitored
    network devices to a central monitoring server.
  prefs: []
  type: TYPE_NORMAL
- en: Because SNMP traps often contain useful or urgent information about how a host
    is working, processing them in at least some way can be very helpful, particularly
    for firmware network devices that can't use `send_nsca` to submit a passive check
    result in a standard form, as explained in the *Submitting passive checks from
    a remote host with NSCA* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, most SNMP-capable hosts can be configured to send SNMP traps
    when one of their network interfaces changes state, perhaps due to a pulled network
    cable. These are known as `linkUp` and `linkDown` traps. Monitoring this particular
    kind of trap is especially useful for devices with a large number of interfaces,
    such as switches or routers.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping track of these events in Nagios Core is valuable for keeping a unified
    monitoring interface, rather than having to monitor SNMP traps with a separate
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are quite a few prerequisites for getting this recipe to work. It is among
    the most powerful but also most complex methods of Nagios Core monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, the recipe assumes some knowledge of SNMP. Unfortunately, SNMP
    is not very simple, despite its name! You should be familiar with the concepts
    of **SNMP checks** and **SNMP traps**. The documentation for **Net-SNMP** (the
    implementation of SNMP used for this example) may help ([http://www.net-snmp.org/docs/readmefiles.html](http://www.net-snmp.org/docs/readmefiles.html)).
  prefs: []
  type: TYPE_NORMAL
- en: On the same host as your Nagios Core server with version 3.0 or greater, you
    should have `snmptrapd` installed to collect `trap` information, and `snmptt`,
    the **SNMP Trap Translator** , to filter useful information from the traps and
    submit the information to Nagios Core in a workable format. Documentation for
    SNMPTT is available at [http://snmptt.sourceforge.net/docs/snmptt.shtml](http://snmptt.sourceforge.net/docs/snmptt.shtml).
  prefs: []
  type: TYPE_NORMAL
- en: Both systems are free software and relatively popular, so check to see if there
    are packages available for your particular system to save the hassle of compiling
    them from source. On Debian-derived systems such as Ubuntu, for example, they
    are available in the `snmpd` and `snmptt` packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use an event handler called `submit_check_result`, available in the
    Nagios Core distribution. You will therefore need to have access to the original
    sources handy. If you have misplaced them, you can download them again from Nagios''
    website: [http://www.nagios.org/download](http://www.nagios.org/download).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s also necessary to use values of `host_name` for your hosts that actually
    correspond to host names resolvable by DNS from the monitoring server. This is
    because when the SNMP trap is received by SNMPTT, the only way it can translate
    it to a host name is with DNS. `host_name` for your host might be `crete.naginet`,
    but the trap will arrive from an IP address such as `10.128.0.27`. The system
    will therefore need to be able to resolve this with reverse DNS lookup. An easy
    way to test this is working is to use `host` or `dig`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you should, of course, actually have a device configured to send SNMP
    traps to your monitoring server, which in turn is configured to listen for SNMP
    traps with the `snmpd` daemon. I don't really want to encourage you to unplug
    one of your core switches to test this, so we'll generate a trap manually with
    `snmptrap` on the monitored server to demonstrate the principle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can configure a new service to receive SNMP traps for an existing host as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the event handler script `contrib/eventhandlers/submit_check_result` from
    the Nagios Core source files into `/usr/local/nagios/libexec/eventhandlers`. You
    may need to create the target directory first. Your source files need not be in
    `/usr/local/src/nagios`; this is just an example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script should be made executable as whatever user the `snmptrapd` user
    runs as.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Change to the Nagios Core `objects` configuration directory on the monitoring
    server. For the default configuration, this is `/usr/local/nagios/etc/objects`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the file containing the definition for the SNMP-enabled monitored host.
    In this example, the definition for `crete.naginet` is in its own file, `crete.naginet.cfg`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The host definition might look similar to the following code snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a service definition for your existing host that accepts only passive checks,
    and is flagged as `volatile`. Here we have used the `generic-service` template
    included in the sample configuration. You may prefer to use a different template,
    but all of the values defined here are important.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the configuration and restart the Nagios Core server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the web interface, this service should now be visible in the **Services**
    section:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Check that the `submit_check_result` script actually works, by invoking it
    with a test string on the monitoring server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After a short delay, if this has worked correctly, we should see the service
    change state in the web interface to reflect the test:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We now need to configure `snmptrapd` and `snmpd` to receive traps, and call
    the `submit_check_result` script for us:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure `snmpd` to pass received traps to `snmptt` by changing its configuration
    file `/etc/snmp/snmptrapd.conf`. The following configuration may work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart `snmpd` to apply this change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure `snmptt` to convert the IP addresses to hostnames, by changing the
    value for `dns-enable` to `1` in `/etc/snmp/snmptt.ini`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure `snmptt` to use Net-SNMP at startup in `/etc/snmp/snmptt.ini`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure `snmptt` to respond to an SNMP event by defining it in `/etc/snmp/snmptt.conf`.
    Here we''ve used the generic `linkDown` event defined by the OID `.1.3.t6.1.6.3.1.1.5.3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Depending on your distribution, there may already be a definition for a `linkDown`
    event, in which case you may only need to change the `EXEC` field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the monitored host, fire a test trap for a `linkDown` event. Substitute
    `olympus.naginet` for the name or IP address of your monitoring host. This will
    require the `snmptrap` utility to be installed on that host, and may require `root`
    privileges.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we use the `public` community string here; your own will likely differ.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check the Nagios Core log file located at `/usr/local/nagios/var/nagios.log`
    to see if there''s new output from the event handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If so, the same state should be reflected for the `TRAP` service in the web
    interface:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: With this done, we've confirmed that SNMP traps from the `crete.naginet` host
    can be received and processed by the `olympus.naginet` server. We can apply the
    same setup for other hosts that generate SNMP traps in our network by configuring
    them to send their traps to the Nagios Core monitoring server, and adding appropriate
    handlers for the expected traps.
  prefs: []
  type: TYPE_NORMAL
- en: If this didn't work, the first thing to check should be that your monitoring
    server is actually listening for checks on the relevant IP address, as `snmptrap`
    does not throw errors when it can not deliver traps. On Debian-derived systems,
    you should check that the `snmptrapd` process is actually running; it may require
    a change to `/etc/defaults/snmp` and a restart of `snmpd`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When an SNMP trap is generated and delivered to the monitoring server by whatever
    means, the `snmpd` daemon will pass it to the `snmptt` program for processing.
  prefs: []
  type: TYPE_NORMAL
- en: The `snmptt` handler checks if the event OID matches any of the traps for which
    it has defined events in `snmptt.conf`. In our example, it finds a handler defined
    for the OID `.1.3.6.1.6.3.1.1.5.3`, which corresponds to the `linkDown` event,
    with the number of the relevant interface as an additional argument in `$1`.
  prefs: []
  type: TYPE_NORMAL
- en: Using this information, it fires the `submit_check_result` handler that we installed
    in the first part of the recipe, setting the state of the `TRAP` service to `WARNING`,
    and including the information `linkDown` for interface `1`, as specified by the
    final argument to `submit_check_result` in the `EXEC` handler. The service can
    be set to notify the appropriate contacts or contact groups, just as it would
    for an actively monitored service.
  prefs: []
  type: TYPE_NORMAL
- en: If a trap arrives on the Nagios Core server for a host that Nagios Core doesn't
    know about, even if it has an event handler defined for `snmptt`, it will simply
    ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to "clear" the state of the service and return it to `OK`, we can
    simply schedule an active check for it from the web interface, with **Force Check**
    selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/5566_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Because `check_command` is defined as `check-host-alive`, as long as the monitoring
    host is actually responding to `PING`, the service should assume an `OK` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/5566_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Submitting passive checks from a remote host with NSCA*, *Allowing and
    submitting passive checks*, and *Setting up an event handler scripts* recipes
    in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring the output of an SNMP query* and *Creating an SNMP OID to monitor*
    recipes in [Chapter 5](ch05.html "Chapter 5. Monitoring Methods"), *Monitoring
    Methods*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an event handler script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn how to set up an event handler script for Nagios
    Core. Event handlers are commands that are run on every state change for a host
    or service (whether for all hosts or services, or just particular ones). They
    are defined in a similar way to notification commands and check commands for plugins.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we'll implement a simple event handler that writes the date,
    the host state, and the number of check attempts to a separate file for a single
    host. This is a trivial example to demonstrate the concept; a more practical and
    complex application for the use of event handlers is given in the *Setting up
    a redundant monitoring host* recipe, in [Chapter 10](ch10.html "Chapter 10. Security
    and Performance").
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a server running Nagios Core 3.0 or higher. You should be familiar
    with defining new commands, as per the *Creating a new command* recipe in [Chapter
    2](ch02.html "Chapter 2. Working with Commands and Plugins") and the *Writing
    low-priority notifications to an MOTD* recipe in [Chapter 4](ch04.html "Chapter 4. Configuring
    Notifications"), *Configuring Notifications*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can set up a new event handler for the Nagios Core server as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to the `objects` configuration directory for Nagios Core. In the quick
    start guide installation, this is `/usr/local/nagios/etc/objects`. Edit the file
    `commands.cfg`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following command definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the file containing the definition for an existing host, in this example
    `delphi.naginet`. Add the `event_handler` directive with the value `record_host_data`
    to your host definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the configuration and restart the Nagios Core server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With this done, the next time the host changes state (whether to a `SOFT` or
    `HARD` state) it should log the information in the `/usr/local/nagios/var/states-delphi.naginet.log`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `event_handler` command we defined is configured to use `printf` to write
    a line of text to a file named after the host. Its definition is built out of
    four macros:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$LONGDATETIME$`: This specifies the date and time, in a human-readable format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$HOSTSTATE$`: This specifies the state of the host (`UP`, `DOWN`, or `UNREACHABLE`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$HOSTATTEMPT$`: This specifies the number of check attempts made so far for
    a host in a problem state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$HOSTNAME$`: This is the hostname itself (used to build the name of the file)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that this behavior is slightly different from notifications. Notification
    commands are only run when the number of `max_check_attempts` for a host or service
    has been exceeded, to alert somebody to the problem. Event handlers are run on
    `SOFT` changes as well as `HARD` changes, and hence can be used to keep more information
    about host performance that might be missed by the routine notifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Service event handlers can be defined in just the same way, by adding the `event_handler`
    directive to their definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we would probably want to use the macros for service states instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a shortcut, if there''s an event handler we want to run on all hosts or
    all services, we can use the `global_host_event_handler` and `global_service_event_handler`
    directives in `nagios.cfg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This will apply the appropriate event handlers to all hosts and services, therefore
    running whenever a host or service changes state.
  prefs: []
  type: TYPE_NORMAL
- en: A specialized case of event handler for recording detailed performance data
    of plugins and checks is also possible using Nagios Core's Performance Data feature,
    as documented in the manual at [http://nagios.sourceforge.net/docs/3_0/perfdata.html](http://nagios.sourceforge.net/docs/3_0/perfdata.html).
  prefs: []
  type: TYPE_NORMAL
- en: Performance data is written on every check rather than every state change, and
    is hence useful for assessing the performance of plugins and checks. Performance
    data is used by the **Nagiosgraph** utility, for example, discussed in the *Tracking
    host and service states with Nagiosgraph* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Tracking host and service states with Nagiosgraph* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a new command* recipe in [Chapter 2](ch02.html "Chapter 2. Working
    with Commands and Plugins"), *Working with Commands and Plugins*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Writing low-priority notifications to an MOTD* recipe in [Chapter 4](ch04.html
    "Chapter 4. Configuring Notifications"), *Configuring Notifications*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking host and service states with Nagiosgraph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn how to install and configure Nagiosgraph, a program
    that integrates with Nagios Core's performance data tools to produce graphs showing
    long-term information about how checks for hosts and services are performing.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to be running a Nagios Core 3.0 or later server. Nagiosgraph will
    probably still work with older versions of Nagios Core, but the configuration
    may be slightly different. The `INSTALL` document included in the source for Nagiosgraph
    explains the differences in detail.
  prefs: []
  type: TYPE_NORMAL
- en: You should have a thorough understanding of defining hosts, services, and commands,
    and be able to install new software as the `root` user on the monitoring server.
    You should also be at least familiar with the layout of your Apache HTTPD server
    on the monitoring system; this recipe will assume it is installed in `/usr/local/apache`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because Nagiosgraph has many Perl dependencies, you will need to have Perl
    installed on your server, and you will likely also need to install a few Perl
    modules as dependencies. The package manager for your system may include them,
    or you may need to download them using the **Comprehensive Perl Archive Network**
    (**CPAN**): [http://www.cpan.org/modules/INSTALL.html](http://www.cpan.org/modules/INSTALL.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The server will need to already be monitoring at least one host with at least
    one service for the graphs to be any use. Nagiosgraph includes rule sets that
    translate known performance data strings into usable statistics. This means that
    graphing will work well for familiar plugins with a predictable output format
    such as `check_ping` or `check_http`, but might not graph data for less commonly
    used plugins without a little custom configuration.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is not a comprehensive survey of everything you can do with Nagiosgraph;
    if you like what this does, make sure to check out Nagiosgraph's documentation
    online at [http://nagiosgraph.sourceforge.net/](http://nagiosgraph.sourceforge.net/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can get some basic Nagiosgraph functionality for our monitoring server as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest version of Nagiosgraph from its website at [http://nagiosgraph.sourceforge.net/](http://nagiosgraph.sourceforge.net/),
    directly onto your monitoring server, using a tool such as `wget`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inflate the `.tar.gz` file and change to the directory within it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As the `root` user, run the `install.pl` script with the `--check-prereq` option.
    This will give you a survey of any dependencies you may need to install via packages
    or CPAN. When you have installed all the prerequisites, the output should look
    similar to the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These are all reasonably standard Perl libraries, so don''t forget to check
    if packages are available for them before you resort to using CPAN. For example,
    I was able to install the RRDs and GD modules on my Debian system as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you are having trouble getting `install.pl` to find your Nagios Core or Apache
    HTTPD instances, then take a look at the output of `install.pl --help` to run
    an installation specific to your kind of system. This is documented in more detail
    in the `INSTALL` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As the `root` user, run the `install.pl` script with the `--install` argument.
    You will be prompted many times for directory layout options. The default is shown
    in square brackets and should be correct for a typical Nagios Core installation,
    so to start with, simply press *Enter* on each option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the preceding selections are all made, the files should be installed with
    appropriate permissions set. The final part of the output gives instructions for
    adding configuration to Nagios Core and Apache HTTPD, which we'll do next.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Change to the Nagios Core configuration directory. In the quick start guide
    installation, this is `/usr/local/nagios/etc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the core configuration file `nagios.cfg`, and add the following directives
    at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change to the Nagios Core `objects` configuration directory. In the quick start
    guide installation, this is `/usr/local/nagios/etc/objects`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `commands.cfg` file, and add the following command definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `httpd.conf` file for your Apache HTTPD server to include the following
    line at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In a local install of Apache HTTPD, this file is normally in `/usr/local/apache/conf/httpd.conf`,
    but its location varies by system. On Debian-derived systems it may be `/etc/apache2/apache2.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Validate the configuration of both the Apache HTTPD server and the Nagios Core
    server, and restart them both:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit [http://olympus.naginet/nagiosgraph/cgi-bin/showconfig.cgi](http://olympus.naginet/nagiosgraph/cgi-bin/showconfig.cgi)
    in your browser, substituting your own Nagios Core server's hostname, to test
    that everything's working. You should see a long page with configuration information
    for Nagiosgraph:![How to do it...](img/5566_11_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything is working up to this point, the only thing left to do is to define
    an action URL for the services that you want to graph, so that you can click to
    go directly to the graphs for that service from the Nagios Core web interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The tidiest and most straightforward way to do this is to define a service
    template:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, you can have the services you want graphed inherit from it, as well as
    from any other templates they use, by adding `nagiosgraph` to the value for the
    `use` directive:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should do this for all the services for which you want graphing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Validate the configuration and restart the Nagios Core server again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With this done, visiting the **Service** section of the web interface should
    include action icons after each graphed service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking one of these should bring up a graph interface; for example, a service
    using `check_ping` might show something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that it includes two line bars to show the thresholds for `CRITICAL` and
    `WARNING` state as well as the actual response time. Also note that the preceding
    graph is several days old; it will take a while to build up enough data to see
    a perceptible line, and you may not see any graphs until performance data has
    actually been received from Nagios by Nagiosgraph.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget that graphs won't work out of the box for every service. If Nagiosgraph
    doesn't know how to parse the performance data for a check, it will show a red
    error text instead of graphs. We'll mention an approach to fixing this in the
    *There's more...* section.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The configuration changes in the preceding section prompt Nagios Core to log
    performance data for every check on every service, using the `service_perfdata_file_processing_command`
    directive. This command, named `process-service-perfdata-for-nagiosgraph`, is
    defined to pass data to the `bin/insert.pl` script included in the new `/usr/local/nagiosgraph`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'This script in turn parses performance output, such as the following output
    from a typical service using `check_ping`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Nagiosgraph extracts numeric information from the performance data, according
    to the templates defined in `/usr/local/nagiosgraph/etc/map`, using Perl regular
    expressions. This data is recorded using Perl's bindings for the RRD library,
    and graphed using the GD2 library, with an appearance similar to graphs produced
    by MRTG.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `action_url` directive uses macros for each service to define a URL for
    each service that shows its graphs. In our example, for a service PING on host
    `corinth.naginet`, `action_url` would expand to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This isn't the only possible use of `action_url`, of course; it just happens
    to be a useful one in our case. You can make `action_url` go anywhere you'd like
    for a given host or service.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don't intend to define any other kind of action for services, you may
    like to change the `action.gif` image to something more descriptive than the default
    red splotch. The Nagiosgraph sources include a possible alternative icon, but
    you can use any GIF image you wish.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: You may well be running some kind of check that Nagiosgraph isn't able to graph,
    because it doesn't understand the format of the performance output, and can't
    extract numeric information from it. The default mapping rules cover output from
    quite a few standard plugins, but if you know a little about Perl, then you may
    be able to add more rules to `/usr/local/nagiosgraph/etc/map` to process other
    kinds of plugin output.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the examples in the map file, which include instructions for writing
    new output checks, there are more examples of such definitions included in the
    `/usr/local/nagiosgraph/examples/map_examples` file.
  prefs: []
  type: TYPE_NORMAL
- en: If you're comparing Nagios graphing solutions, another popular solution to try
    could be **PNP4Nagios**, available at [http://docs.pnp4nagios.org/pnp-0.6/start](http://docs.pnp4nagios.org/pnp-0.6/start).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Getting extra visualizations with NagVis* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring Nagios performance with Nagiostats* recipe in [Chapter 10](ch10.html
    "Chapter 10. Security and Performance"), *Security and Performance*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading status into a MySQL database with NDOUtils
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn how to install the **NDOUtils** extension to Nagios
    Core, in order to have all of Nagios Core's configuration and data written into
    a MySQL database. This allows easy development of custom reports and interfaces
    for Nagios Core data with languages, such as Perl and PHP, and their standard
    interfaces to the popular MySQL server, rather than needing to interact with Nagios
    Core's own logs or its data format. Some plugins, such as NagVis, use this format
    to read information about Nagios Core configuration and objects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a Nagios Core server version 3.0 or later. NDOUtils will probably
    still install and work on older versions of Nagios Core, but the installation
    process is slightly different; see the `INSTALL` file included in the NDO source
    for information on this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nagios Core uses its event broker functionality to write information to the
    socket for the MySQL database to pick up. You will need to have compiled Nagios
    Core with the `--enable-event-broker` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: If you are unsure whether you compiled with this flag, it is probably a good
    idea to recompile and reinstall Nagios Core from your original sources with this
    installed. Don't forget to back up your previous installation in case of problems.
  prefs: []
  type: TYPE_NORMAL
- en: In order to compile the `ndomod` part of NDOUtils, you will need to have the
    MySQL client libraries and headers installed on the Nagios Core server. You will
    also need to have a MySQL server ready to store the data. The MySQL server does
    not have to be running on the same host as Nagios Core, but the Nagios Core server
    should be able to connect to it.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you should take note of the opening paragraph of `README`, which at
    the time of writing points out that NDOUtils for Nagios Core 3.0 is still officially
    in beta; you should read the note and be aware of the risks in installing it.
    In my own experience, however, the code is very stable. There are also no guarantees
    at the time of writing that this procedure will work correctly with the unreleased
    Nagios 4.0.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can install the NDOUtils package for Nagios Core as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest NDOUtils `.tar.gz` from its Sourceforge site at [http://sourceforge.net/projects/nagios/files/ndoutils-1.x/](http://sourceforge.net/projects/nagios/files/ndoutils-1.x/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Unpack the `.tar.gz` file and change directory into it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `./configure` and build the software. Note that there is no install target;
    we will be performing the installation manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read the output of `./configure` carefully if the build fails, to determine
    if you are missing any dependencies on your system. The output of `./configure`
    should end with something similar to the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On the MySQL server, create a database to store the Nagios Core information,
    and a user to access it. In this example, the MySQL server is running on the same
    host as the Nagios Core server (`olympus.naginet`), so the access will be done
    from `localhost`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have used a random password after `IDENTIFIED BY`. You should generate your
    own secure password.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the `installdb` script in the source to create the various tables Nagios
    Core will use. Use the database details established in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Don''t be concerned about the following error message; it is because you are
    installing the extension for the first time:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the compiled `ndomod` module into the `/usr/local/nagios/bin` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the sample configuration for the module into `/usr/local/nagios/etc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure it is readable only by the `nagios` user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit your `nagios.cfg` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `broker_module` definition to the file, and check that the `event_broker_options`
    directive is set to `-1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the `broker_module` and `config_file` definitions should be on the
    same line, but `event_broker_options` should be on its own line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With this done, the broker module ought to be successfully installed, and we
    can move on to installing the `ndo2db` daemon.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Copy the `ndo2db` binary into the `/usr/local/nagios/bin` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the sample configuration for the daemon into `/usr/local/nagios/etc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure it is readable only by the `nagios` user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the configuration file as installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the values in `ndo2db.cfg` to reflect the database details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the `ndo2db` daemon by starting it and verifying it is running with `ps
    -e` or `pgrep`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If it works, you should add this command into your system's `init` scripts,
    so that the daemon is started at boot time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Validate the configuration and restart the Nagios Core server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With this done, inspecting the database tables in MySQL should show they have
    been filled with information from Nagios Core, for example the `nagios_services`
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NDOUtils is in fact a collection of components, two of which we installed in
    the previous sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ndomod` is used as a broker module, for writing events and data from Nagios
    Core to a UNIX socket in `/usr/local/nagios/var/ndo.sock`. It runs as a module
    of the Nagios Core server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ndo2db` is used as a database backend, for reading the events and data from
    the UNIX socket to which `ndomod` writes, and applying them as MySQL database
    operations. It runs independently as a daemon on the system, and performs the
    MySQL connection and transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broker_module` updates these tables as plugins are run, hosts and services
    change state, notifications are issued, and other Nagios Core behavior takes place.
    It covers most data of interest quite comprehensively. Note that it includes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details for types of Nagios Core objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties and current states of hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acknowledgement and scheduled downtime information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notification history and complete logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main reason to install NDOUtils is to put Nagios Core's data into a standardized
    format, so that it can be read and processed by external applications, whether
    in simple table-style reports or completely new application interfaces to the
    Nagios Core data. This tends to be much easier than custom building a Nagios Core
    CGI of your own!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another recipe in this chapter, *Writing customized Nagios Core reports*, applies
    NDOUtils after its installation by demonstrating some example MySQL queries for
    retrieving useful data and summaries from its tables, including an example of
    writing a report in Perl, and a simple RSS feed in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the most out of NDOUtils, it''s a good idea to take a look at its documentation,
    which includes a complete breakdown of the contents of the MySQL tables: [http://nagios.sourceforge.net/docs/ndoutils/NDOUtils.pdf](http://nagios.sourceforge.net/docs/ndoutils/NDOUtils.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Writing customized Nagios Core reports* and *Getting extra visualizations
    with NagVis* recipes in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing customized Nagios Core reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll explore some simple applications of the NDOUtils database
    by trying out some queries, and change one of them into both a simple report in
    Perl, and also into a PHP-based RSS feed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes you have NDOUtils already installed, and that your Nagios
    Core 3.0 (or later) server is monitoring at least a few hosts and services, so
    that the queries we try actually return some data. You should also have some means
    of executing MySQL queries on the database server. The `mysql` command-line client
    will work just fine; a tool such as phpMyAdmin might make the data a little easier
    to explore.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can explore some queries against the NDOUtils databases as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieve the content and date/time of the latest ten notifications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve the content and date/time of the latest ten host or service comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Count the number of hosts currently in the `OK` state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve the names of all hosts currently in scheduled downtime:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the syntax of this query assumes a MySQL version of at least 5.0.12.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Return a list of all host names and the number of services associated with
    them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We could implement a Perl script to print the latest ten notifications using
    the DBI module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Saved into a file `latest-notifications.pl`, we could run it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we could implement a crude RSS feed for notifications using PHP5
    with PDO MySQL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Saved in a file named `latest-notifications.php`, we could subscribe to this
    in our favorite RSS reader, such as **Life** **rea** ([http://liferea.sourceforge.net/](http://liferea.sourceforge.net/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The examples given in the preceding section are just to get you started with
    very simple reports; there is a wealth of data available in the NDOUtils database
    to explore. Here are some other possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: A breakdown of all the hosts in your system and their states, ordered by name,
    presented in an HTML table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of all the hosts that have been down more than once in a month
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The percentage of uptime for all hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Reading status into a MySQL database with NDOUtils* and *Getting extra
    visualizations with NagVis* recipes in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting extra visualizations with NagVis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll explore how to go beyond the default network map discussed
    in [Chapter 8](ch08.html "Chapter 8. Managing Network Layout"), to get a lot of
    visualization power with the extension NagVis. NagVis can use the NDOUtils backend
    to build custom maps in various styles.
  prefs: []
  type: TYPE_NORMAL
- en: '**NagVis** is most likely of interest to you if you''re interested in visualizing
    Nagios data more extensively, particularly if you''re having problems with the
    scalability of the included Nagios Core status map. The default status map works
    well for smaller networks, but can struggle with rendering larger ones in a timely
    fashion.'
  prefs: []
  type: TYPE_NORMAL
- en: A complete survey of NagVis' functions would not be possible in one recipe,
    but this one will walk you through downloading, installing, and configuring the
    extension to give you a simple **automap**, in order to get you started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a running Nagios Core server with version 3.0 or later, and
    have the NDOUtils backend successfully installed and populating a MySQL database
    to which you have administrative access. This is discussed in the *Reading status
    into a MySQL database with NDOUtils* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In order for the automap to be much use, you will need a network with at least
    a few parent-child relationships—see the *Creating a network host hierarchy* recipe
    in [Chapter 8](ch08.html "Chapter 8. Managing Network Layout") for details on
    how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: 'NagVis includes an installation script that deals quite well with different
    systems'' installations of Nagios Core. However, it still requires certain dependencies,
    specifically:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache with `mod_php` on the same server as Nagios Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PHP 5.3 or newer, with the following modules: `gd`, `gettext`, `mbstring`,
    `mysql`, `pdo`, `session`, `sqlite`, and `xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Graphviz graph visualization software, with the following modules: `circo`,
    `dot`, `fdp`, `neato`, `twopi`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may need to consult your system''s documentation to install all these dependencies;
    check your system''s package manager, if there is one. For Ubuntu and other Debian-derived
    systems, the following packages generally suffice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'On systems such as CentOS and Fedora, the following packages may work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: It is difficult to anticipate the exact packages needed for all systems; searching
    your package manager for keywords (for example `php sqlite`) may help.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can install NagVis with an NDO backend as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest sources for NagVis from [http://www.nagvis.org/downloads](http://www.nagvis.org/downloads):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inflate `.tar.gz` and change directory to within it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `install.sh` script as `root`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The script will attempt to find your Nagios Core installation, and will ask
    you to specify a location for the new NagVis files. In our case, the defaults
    are correct and acceptable, so we can simply press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The script will attempt to find all of the prerequisites needed and will alert
    you if any are not found. If this is the case, you should abort the installation
    with *Ctrl* + *C* and install them before trying again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The script will prompt you for an appropriate backend to configure as NagVis'
    data source. In this example, the only one we want is the `ndo2db` backend. Press
    *n* for all the others.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The script will attempt to detect your Apache HTTPD settings. It does a good
    job with most systems, but you should check the results are correct before you
    press *Enter*. It should also be safe to allow it to create an Apache configuration
    file for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The script will give you a summary of its intentions for installing the software,
    and will ask you to confirm. Do so by pressing *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the Apache HTTPD server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If all of the above goes correctly, once the installation is finished, you
    should be able to visit the NagVis configuration page on [http://olympus.naginet/nagvis/](http://olympus.naginet/nagvis/),
    substituting the hostname for your own Nagios Core server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can log in with the default username `admin` and the password `admin` to
    take a look at some of the demo maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a little more to go yet before we can get our automap working:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the server, edit the `/usr/local/nagvis/etc/nagvis.ini.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find and change the following directives under the `backend_ndomy_1` section,
    adding the values you used for your `ndo2db` installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that all the preceding values are uncommented (they should not be
    preceded by a semicolon).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Log in to the NagVis web interface, and click on **Manage Maps** under the **Options**
    menu:![How to do it...](img/5566_11_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under **Create Map**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Map name**, enter the value `Automap`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Map iconset**, choose **std_small**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave **Background** blank.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The page should refresh to a blank screen, because we have not yet elected a
    data source for the map.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Map Options** under the **Edit Map** menu.![How to do it...](img/5566_11_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the resulting dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **sources** checkbox, and change the value to `automap`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **backend_id** checkbox, and choose the value **ndomy_1**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the bottom and click on **Save**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: With this done, the page should refresh and show you a map of your network,
    automatically generated from your configuration, in a similar style to the Nagios
    Core web interface status map. You should also be able to hover over individual
    nodes to see their details.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5566_11_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NagVis' automap is generated from the data in the database that we established
    in the NDOUtils recipe. It generates the map in much the same way that the default
    status map does, but is more scalable for larger networks. The parent and child
    relationships defined in the configuration are included, to make a tree-style
    map.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The use of NagVis could fill an entire book in itself, and the automap is only
    one of many possible maps, including defining one's own backgrounds, icons, labels,
    and hover behavior. For more detail on how to make customized maps as well as
    other styles of automaps, consult the NagVis documentation at [http://www.nagvis.org/doc](http://www.nagvis.org/doc).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Reading status into a MySQL database with NDOUtils* and *Writing customized
    Nagios Core reports* recipes in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a network host hierarchy* and *Using the network map* recipes
    in [Chapter 8](ch08.html "Chapter 8. Managing Network Layout"), *Understanding
    the Network Layout*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

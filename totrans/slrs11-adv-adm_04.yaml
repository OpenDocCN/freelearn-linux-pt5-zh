- en: Chapter 4. Zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating, administering, and using a virtual network in a zone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing a zone using the resource manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a flow control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with migrations from physical Oracle Solaris 10 hosts to Oracle Solaris
    11 Zones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Oracle Solaris 11 Zones is a great framework that virtualizes and consolidates
    a system environment where there are many applications and physical machines running
    Oracle Solaris. Using a rough comparison, Oracle Solaris 11 zone is similar to
    other virtualization options offered by VMware ESX, Linux LXC, and FreeBSD Jails
    but presents some important differences such as not allowing either to perform
    a hardware emulation or run any other kind of operating system except Oracle Solaris
    11 or prior Oracle Solaris versions.
  prefs: []
  type: TYPE_NORMAL
- en: In Oracle Solaris Zones, the fundamental idea is to create different small operating
    system installations (children) inside the main operating system (parent) by sharing
    or dividing (using the resource manager) the existing resources between these
    children installations. Each installation will have its own init files and processes,
    although it shares the kernel with the parent operating system, resulting in a
    lesser overhead than previously quoted solutions. Using the Oracle Solaris 11
    terms, the parent is the global zone and children are non-global zones, as we'll
    see later.
  prefs: []
  type: TYPE_NORMAL
- en: Oracle Solaris zone offers application isolation, additional tiers of security,
    and reduced power requirements. This concern with security is necessary in order
    to prevent an application running inside a zone from crashing other applications
    in other zones. This is the reason why a non-global zone does not view other non-global
    zones, can contain additional software packages, and has a different product database
    that controls its own installed software.
  prefs: []
  type: TYPE_NORMAL
- en: Going into details of the previously mentioned features, zones make it possible
    for many applications to share host resources, therefore decreasing the cost of
    a deployment. This resource management allows us to assign specific resources
    to a non-global zone in order to create a limit of resource consumption (for example,
    CPU and memory) and to control how many resources will be used by a process, task,
    or project. Moreover, this resource control takes advantage of an available Oracle
    Solaris scheduler class **fair share scheduler** (**FSS**) in order to impose
    control over the CPU (using shares) and memory (using the `rcapd` daemon that
    limits the amount of physical memory) in a non-global zone.
  prefs: []
  type: TYPE_NORMAL
- en: Zone was introduced in Oracle Solaris Version 10, and it can be classified as
    the global zone (the physical machine installation that was presented as a parent
    previously) and non-global zone (informally named as *local zone* or just *zone*,
    which was presented as a child) where any application can be installed and administered
    and the right resource configuration can be performed.
  prefs: []
  type: TYPE_NORMAL
- en: The global zone (the parent zone) is a bootable zone that comes directly from
    the physical hardware, and it makes it possible to configure, install, administer,
    and remove non-global zones (children zones), given that it is also the only zone
    that is aware of all of the existing zones. Usually, non-global zones run the
    same operating system as the global zone, but Oracle Solaris 11 provides another
    zone type, named **branded zone**, which makes it feasible to create and install
    a non-global zone that runs Oracle Solaris 10, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Briefly, during a non-global zone installation, it''s requested to provide
    as input the directory where the zone will be installed, the network interface,
    and network information such as IP address and network mask. Additionally, it
    is also requested to provide the IP-type to be used with the network interface
    in the non-global zone. There are two options: shared-IP (used when the network
    interface is shared with the global zone) and exclusive-IP (used when the network
    interface is dedicated to the non-global zone).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the zone configuration is complete, the next step is to install the zone
    and administer it. It is advisable to know that non-global zones can have the
    following zone states:'
  prefs: []
  type: TYPE_NORMAL
- en: '**undefined**: This denotes whether the zone configuration is incomplete or
    deleted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**incomplete**: This denotes that the zone installation was aborted in between'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**configured**: This denotes whether the zone configuration is complete'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**installed**: This denotes that the zone packages and operating system were
    installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ready**: This denotes the almost-running zone with an associated zone ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**running**: This denotes that everything is working and getting executed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**down**: This denotes that the zone is halted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Honestly, on a daily basis, the more typical states are `configured`, `installed`,
    `running`, and `down`. The remaining states are transient states and we rarely
    have to be concerned about them.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the sequence of states is `undefined` | `configured` | `incomplete`
    | `installed` | `ready` | `running` | `down`.
  prefs: []
  type: TYPE_NORMAL
- en: There are professionals who usually ask me, "What are the differences between
    Oracle Solaris 11 and Oracle Solaris 10?" Truly, there are some relevant differences.
    Now, the `var` directory is a separated filesystem, the default zone brand is
    Solaris (previously, it was native), there is no concept of sparse zones anymore,
    and the default filesystem is ZFS and uses IPS as package manager. However, the
    most important zone difference in Oracle Solaris 11 is the introduction of network
    virtualization, which allows us to control the network zone resources using at
    least a network interface—**virtual network interfaces** (**VNICs**)—and virtual
    switch concepts. For example, a physical machine could have Oracle Solaris 11
    running in a global zone and five non-global zones (z1, z2, z3, z4, and z5), each
    of them with a dedicated VNIC connected to a virtual switch (`etherstub`) with
    the last one connected to the real network interface card. Additionally, the network
    flow control can be enforced and specific link properties can be configured to
    increase the bandwidth control and efficiency as well, which makes it possible
    to share a network resource across different VNICs.
  prefs: []
  type: TYPE_NORMAL
- en: The possible network flow can be created on a per-VNIC basis with specific attributes,
    isolating and classifying similar packets and with associated bound resources.
    Possible flow attributes include `maxbw` (which defines the bandwidth of the flow)
    and priority (which defines the packet priority in a flow as low, medium, and
    high).
  prefs: []
  type: TYPE_NORMAL
- en: 'All resource controls mentioned so far (CPU, memory, and network) are disabled
    by default, and they are controlled by two resource services: the default resource
    pool service (`svc:/system/pools:default`) and dynamic resource pool service (`svc:/system/pools/dynamic:default`).
    A configuration file named `pooladm.conf` under `etc` helps us define the pool
    creation and the resource management behavior, as it is used by a daemon named
    `poold` that controls the entire allocation controls and limits after associating
    the created pool with a non-global zone.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to learn about the next recipes on Oracle Solaris 11 Zones.
  prefs: []
  type: TYPE_NORMAL
- en: Creating, administering, and using a virtual network in a zone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I love this recipe because here, we are going to use the main feature of zones
    in Oracle Solaris 11 virtual networks. Concisely, we are going to create and configure
    the following scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '`zone1` | `vnic1` (`192.168.1.51`) | `vswitch1` (`etherstub`) | `net0` (`192.168.1.144`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zone2` | `vnic2` (`192.168.1.52`) | `vswitch1` (`etherstub`) | `net0` (`192.168.1.144`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each zone connects to its respective **virtual network interface** (**VNIC**),
    and both VNICs go to the same `etherstub` (a kind of a virtual switch). Because
    of this, `etherstub` requires a virtual interface (`vnic0`). Finally, `etherstub`
    connects to a real interface (`net0`). The zonepath property for each zone and
    other properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'zonepath zone1: `/myzones/zone1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'zonepath zone2: `/myzones/zone2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IP type: exclusive-IP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe requires a virtual machine (VirtualBox or VMware) that runs Oracle
    Solaris 11, with 4 GB (minimum) or 8 GB RAM (recommended), an extra disk with
    80 GB, and a processor with two or more cores configured for this virtual machine,
    as shown in the following screenshot that was extracted from my VirtualBox environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start the procedure, we have to gather all current and relevant information
    about the system by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The system has two network interfaces (`net0` and `net1`), but only `net0`
    will be considered. Additionally, the pool (`myzones`) has almost 80 GB free space
    (you can create the myzones pool using `zpool create myzones <disk>`), and there
    is no filesystem under it. Then, the first step is to create the pool and one
    filesystem for each zone (`zone1` and `zone2`) by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The storage requirements have been met and now, the next important part of
    this recipe is to prepare all network infrastructures. To accomplish this task,
    it will be necessary to create `etherstub` (`vswitch1`) and three VNICs: `vnic0`
    (`etherstub`), `vnic1` (`zone1`), and `vnic2` (`zone2`). Moreover, we have to
    connect all VNICs into `etherstub` (`vswitch1`). All these tasks are accomplished
    by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it''s time to create the first zone (`zone1`) using `ip-type=exclusive`
    (this is the default value) and `vnic1` as a physical network interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To configure `zone2`, almost the same steps (the zone info details were omitted)
    need to be followed by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To list the recently configured zones, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the previous recipe, during the first login that happens soon
    after installing the zone, it is required to provide interactively the system
    configuration information through eleven screens. To automate and make this simpler,
    it is feasible to create a system configuration file for each zone and provide
    it during each zone installation. To accomplish this task, some information will
    be asked from it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For `zone1`, the information is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Computer name: `zone1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ethernet network configuration: `Manually`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Network interface: `vnic1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IP address: `192.168.1.51`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DNS: `Do not configure DNS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alternate name server: `None`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Time zone: `(your time zone)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Date and time: `(your current date and time)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Root password: `(your choice)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your real name: `Alexandre Borges`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Username: `aborges1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: `hacker123!`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'E-mail: `anonymous@oracle.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Internet access method: `No proxy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For `zone2`, the information is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Computer name: `zone2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ethernet network configuration: `Manually`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Network interface: `vnic2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IP address: `192.168.1.52`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DNS: `Do not configure DNS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alternate name server: `None`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Time zone: `(your time zone)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Date and time: `(your current date and time)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Root password: `(your choice)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your real name: `Alexandre Borges`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Username: `aborges2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: `hacker123!`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'E-mail: `anonymous@oracle.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Internet access method: `No proxy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a directory that will hold the zone profiles as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a profile to `zone1` by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'By using the almost the same command, create a profile to `zone2` by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To visualize the system configuration content, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it is time to install `zone1` and `zone2` using their respective system
    configuration files, as configured previously. Therefore, to perform this task,
    we''ll be using our local repository (as learned in [Chapter 1](part0015_split_000.html#page
    "Chapter 1. IPS and Boot Environments"), *IPS and Boot Environments*) and executing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Initiate both zones by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'It is appropriate to check the network information before logging into zones
    by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can log into the zones and test them by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Everything is working. Zones are simply amazing!
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The great news from this recipe was that we configured a virtual switch (`etherstub`)
    and three virtual network interfaces. Afterwards, we used these objects to create
    two zones using the virtual network concept.
  prefs: []
  type: TYPE_NORMAL
- en: Managing a zone using the resource manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing and configuring Oracle Solaris 11 non-global zones is great, and
    as we have mentioned previously, it is a great technique that isolates and runs
    applications without disturbing other applications if anything goes wrong. Nonetheless,
    there's still a problem. Each non-global zone runs in a global zone as it were
    running alone, but an inconvenient effect comes up if one of these zones takes
    all resources (the processor and memory) for itself, leaving little or nothing
    for the other zones. Based on this situation, a solution named resource manager
    can be deployed to control how many resources are consumed for each zone.
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on the resource manager (without thinking about zones), there are many
    forms that enforce resource control in Oracle Solaris 11\. For example, we can
    use a project (`/etc/project`), which is composed by tasks and each one of these
    tasks contains one or more processes. A new project is created using the `projadd`
    command, and a new task can be created using the `newtask` command through a **Service
    Management Facility** (**SMF**) or even when a session is opened. Enabling the
    Resource Manager service and associating resources such as processors and memory
    to this project helps to create an upper limit of about how much of the resources
    (processors and memory) the processes bound to this project can use for themselves.
    Anyway, the existing project on Oracle Solaris 11 can be listed by running the
    `projects -l` command.
  prefs: []
  type: TYPE_NORMAL
- en: There are some methods that are available to associate resources with a project.
    The first way uses resource controls (the `rctladm` and `prctl` commands) to administer
    and view assigned controls to projects. The disadvantage of this method is that
    this approach restricts used resources by processes and prevents them from taking
    more processors or memory, if required. The other associated and possible problem
    is that the administrator has to know exactly how many resources are used by the
    application to make a good resource project, because if insufficient resources
    are assigned to a project or application, it can stop working.
  prefs: []
  type: TYPE_NORMAL
- en: The second good way to control how many resources can be taken by an application
    is to use the **fair share scheduler** (**FSS**) class that helps us moderate
    the resource allocation (the processor time) according to the resource requirement.
    A real advantage is that if an application is not using all assigned resources
    (the processor time), other applications can use the free resources from the first
    application. Therefore, this sharing of resources works like a dynamic resource
    control that spreads resources according to a plan (shares are assigned to applications)
    and changes its distribution based on demands. For example, when I personally
    use FSS, I normalize the available shares to 100 points in order to make a comparison
    with percentage easy. For project A, I grant 30 shares; for project B, I assign
    50 shares; and for project C, I assign 20 shares. In the end, the distribution
    of the time processor is that app A gets 30 percent, app B gets 50 percent, and
    app C gets 20 percent. This is simple, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: The third way to deploy a resource manager is by using resource pools. Fundamentally,
    the idea is to assign resources to a resource group (or pool) and afterwards,
    to associate this pool with a project or application. Similar to what we have
    explained for FSS, the processor sets (group of processors) are normally assigned
    to resource pools and the latter is assigned to a project. Resource pools present
    a better flexibility because they permit us to set a minimum and maximum number
    of processors to be used by the application based on the demand. For example,
    it would be possible to assign a range from one to eight cores (or processors)
    to a project, and according to the resource demand, fewer or more processors would
    be used. Moreover, a specific processor (or core) could be dedicated to a processor
    set, if required. A small disadvantage of using the resource pool is that the
    processor is restricted to the pool, and even if there is a free resource (the
    processor), it cannot be used by another application. Personally, I prefer to
    manage and work with FSS because its flexibility and reusability offers you the
    opportunity to free up resources that can be used by other applications or projects.
    Nonetheless, it is feasible to mix resource pools with FSS and projects and have
    an advantage by implementing the controlled environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, all of these techniques that control resources can be deployed in
    the zone context to limit the used resources by running applications, as we are
    going to learn in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine (VirtualBox or VMware) running on a processor
    with two or more cores, with 8 GB RAM and an 80 GB hard disk. To make the following
    procedure easier, we will take zones that were used in the previous recipe, and
    then the reader can assume that this recipe is a simple continuation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Basically, this recipe is composed of two parts. In the first part, the resource
    pools are configured, and in the second part, the existing resource pools are
    bound to zones.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, we have to gather information about the existing zones by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The resource pool services have probably been stopped. We can verify them by
    executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Checking for dependencies from each service is done by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As the `svc:/system/pools/dynamic:default` service depends on `svc:/system/pools:default`,
    it is recommended that you enable both of them by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When a resource pool control is enabled, a default pool (`pool_default`) and
    a default processor set (`default_pset`) including all resources from the system
    are created, as verified by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'According to this output, there is a default pool (`pool_default`); the real
    processor has four cores (range 0 to 3), and all of them consist of a processor
    set (`pset`). However, this resource pool configuration is in the memory and is
    not persistent in the disk. Therefore, to save this into a configuration file,
    execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: From this point, the following steps create a processor set (`pset`) with two
    cores, create a pool, and associate the processor set with this pool. Later, this
    pool will be assigned to the zone configuration, which can be shown as the processor
    set | pool | zone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, to create a processor set (`first_pset`) with one core at minimum (`pset.min=1`)
    and two cores (`pset.max=2`) at maximum, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can create a pool named `first_pool`, which initially has all resources
    (four core processors) bound to it, by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, assign the `first_pool` pool to the `first_pset` processor set by executing
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, everything has been working well. Now, we have to check whether this
    new pool already appears in the resource memory configuration by executing the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We have realized that the `first_pset` configuration is still not persistent
    in the pool configuration file. To validate (the -`n -c` option) and commit (the
    `-c` option) the new configuration, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything is ready. Nevertheless, it''s easy to verify that the configuration
    is active only in the memory (the kernel state) using the `-dc` option, but it
    isn''t saved in the resource pool configuration file (option `-c`) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To solve the problem of saving the resource pool configuration from the memory
    to disk, we can use the `-s` option by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'That is great! Listing the active resource pools is done by executing the `poolstat`
    command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Associating the recently created pool (`first_pool`) to non-global `zone1`
    is done by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'It is impossible to activate the bound resource pool without rebooting `zone1`,
    so execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it is time to log in to `zone1` and check whether the `first_pool` pool
    is active by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Perfect! Two cores were associated with `zone1`, and any application running
    inside this zone can use these core processors.
  prefs: []
  type: TYPE_NORMAL
- en: To change the resource type focus, a very interesting method that limits the
    used memory is resource capping, which helps us limit the physical, swap, and
    locked memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, using the same `zone1`, let''s change its configuration by executing
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the previous output, the physical memory from `zone1` is limited
    to 1 GB, and the used swap space is restricted to 500 MB. Furthermore, there is
    a strange line for maximum swap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The interpretation for this line is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`privileged`: This can be modified only by privileged users (root). Another
    possible value is `basic` (only the owner can modify it).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deny`: This can deny any requested resource for an amount above the limit
    value (500 MB). The other possibilities would be `none` (no action is taken even
    if the requested resource is above the limit) and `signal`, in which a signal
    is sent when the threshold value is exceeded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resource capping is a service implemented by the `rcapd` daemon, and this service
    can be enabled by the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Reboot `zone1` for memory capping to take effect. It would be feasible to enable
    the resource capping daemon without rebooting and starting the daemon now by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To monitor the action of the `rcap` daemon (`rcapd`), execute the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The used physical memory (RSS) is below the memory capping limit (1024 MB).
    If the physical memory is increased, its limit is 1024 MB. Nice!
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this example more attractive, some changes can be made. Let''s remove
    the `first_pool` resource pool (and any other existing pool) from `zone1`. Additionally,
    the `first_pool` pool will be deleted by the `pooladm -x` command. Obviously,
    the new pool configuration must be saved by the `pooladm -s` command. The following
    is the sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Everything has returned to the default status, and from this point, `zone1`
    doesn't have a special associated pool. This permits us to focus on FSS from now
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command checks what the current default kernel scheduling class
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'There is no default scheduling class. If we want to use FSS, then it would
    be appropriate to configure it on the global zone because this setting will be
    inherited by all non-global zones. To configure the FSS as explained, execute
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This setup only takes effect after a system is rebooted. After the system has
    been reinitiated, all processes will be classified as FSS. Nonetheless, to enforce
    it now without a reboot, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, all current processes are still running under other scheduling
    classes and only new processes will take the FSS setting. This can be verified
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, it''s unnecessary to wait for the next reboot. Therefore, all processes
    can be moved from their current scheduling classes to FSS by executing the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'When FSS is set up as the default scheduling class in the global zone, all
    non-global zones automatically take this configuration. To verify this, run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We can realize that all main processes from `zone1` are under the FSS class.
    Anyway, it is recommended that the FSS class be explicitly configured in the non-global
    settings in order to prevent possible mistakes in the future. Therefore, execute
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, it is the right moment to use the FSS class to configure some shares
    for each zone (`zone1` and `zone2`). This way, it is possible to share an amount
    (70 percent) from the CPU processing for `zone1` and the other amount (30 percent)
    from the CPU processing for `zone2`. The following is the procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This is excellent! Shares were assigned to `zone1` (70 shares) and `zone2`
    (30 shares) using the `zonecfg` command in a persistent way. For both the zones
    to take effect, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The processor time can be followed and monitored using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Surprisingly, it is feasible to change the `zone.cpu-shares` attribute dynamically
    without rebooting zones but in a non-persistent way (all the changes are lost
    after a reboot) by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To collect information about the memory and CPU from both zones in an interval
    of 5 seconds, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Keeping up with our approach about the resource manager, there''s a zone resource,
    named `dedicated-cpu`, where it is possible to specify a subset of processors
    (or cores) to a non-global zone. For example, the following example shows us that
    `zone1` can use one to four processors (`ncpus=1-4`) according to the demand,
    and this setting has an `importance` value equal to `8` when competing for resources
    against other zones or configurations. This smart setup creates a temporary pool
    including any necessary processor inside it. The following is the sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Amazing! To remove the `dedicated-cpu` resource from `zone1`, execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Before continuing, we must reboot the zone by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Another good technique to control zone resources is using the `capped-cpu`
    resource, which permits us to specify how big a percentage of a CPU the zone can
    use. The value to be specified means a percentage of CPUs, and this procedure
    can be performed by executing the following sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the previous configuration, the `ncpus=2.5` attribute means 250
    percent of CPUs or 2.5 CPUs. To remove the recently added resource, execute the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'After all the changes, we have to reboot the zone by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'This is outstanding! We have executed many trials with resource management,
    and all of them have worked! As `zone1` still has a resource capping (memory),
    it is time to remove it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the resource capping feature can be disabled by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way of disabling the resource capping feature would be to execute the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Perfect! Everything has returned to the initial setup.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section was very long, and we could learn lots of details about resource
    management controls and how to limit processors and the memory. In the next chapter,
    we are going to handle the network resource control.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a flow control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last subsection, we handled resource control on processors and memory.
    In Oracle Solaris 11, the network control has acquired importance and relevance,
    allowing us to set a network flow control based on TCP/IP services and ports.
    Read the next pages to learn a bit more.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine (VMware or VirtualBox) that runs Oracle
    Solaris 11 on one processor, with 4 GB RAM and one physical network interface.
    To make our life simpler, we are going to reuse the same environment as the one
    in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be able to follow the steps in this section, you need to check the current
    environment setup. Therefore, it is possible to gather information about existing
    virtual interfaces, virtual switches, and network interfaces by running the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'As the existing virtual interfaces are currently assigned to non-global zones,
    create a new **virtual interface** (**VNIC**) and associate it with the `vswitch`
    virtual switch by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Create two flow controls on `vnic5`: the first one controls the TCP flow in
    the port `80` and the second one controls UDP in the same port `80` by executing
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the previous output, we named the flow controls `http_tcp_1` and
    `http_udp_1`; both control the HTTP data and use TCP and UDP as the transport
    protocol, respectively. Therefore, it is appropriate to bind a new property to
    this HTTP flow to control the maximum possible bandwidth and limit it to 50 MBps.
    Thus, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'We have set the bandwidth limit for port `80` (TCP and UDP) to 50 MBps at maximum.
    A specific flow can be monitored in a two-second interval for the received packages
    (illustrated in our recipe) by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, it is recommended that you analyze a more complete view, including
    sent and received packets, by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to remove both flow controls from the system and the `vnic5` interface,
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe showed you how to implement, monitor, and unconfigure the flow over
    **virtual network interfaces** (**VNICs**), limiting the bandwidth to 50 MBps
    in port `80` for the TCP and UDP protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Working with migrations from physical Oracle Solaris 10 hosts to Oracle Solaris
    11 Zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two common questions arise when considering how to deploy Oracle Solaris 11\.
    First, what can we do with the previous Oracle Solaris 10 installation? Second
    (and worse), what is possible with Oracle Solaris 10 Zones?
  prefs: []
  type: TYPE_NORMAL
- en: 'Happily, Oracle Solaris 11 provides an optimal solution for both cases: the
    **physical to virtual** (**P2V**) migration where a physical Oracle Solaris 10
    installation is migrated to Oracle Solaris 11 Zone and the **virtual to virtual**
    (**V2V**) migration where an Oracle Solaris 10 native zone is migrated to a Solaris
    10 branded zone on Oracle Solaris 11.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires one virtual machine (VirtualBox or VMware) with Oracle
    Solaris 11 installed, 8 GB RAM, and enough free space on disk (about 10 GB). To
    make things easier, the pool myzone (from the previous recipe) will be used, and
    if you have deleted it, you should create it again using the `zpool create myzone
    <disks>` command. Furthermore, there must be an Oracle Solaris 10 virtual machine
    (2 GB RAM and a virtual disk with 15 GB at least) that should be used in this
    migration example. The installation of this Oracle Solaris 10 virtual machine
    will not be shown here. The Oracle Solaris 10 DVD for its installation and deployment
    can be downloaded from [http://www.oracle.com/technetwork/server-storage/solaris10/downloads/index.html?ssSourceSiteId=ocomau](http://www.oracle.com/technetwork/server-storage/solaris10/downloads/index.html?ssSourceSiteId=ocomau).
  prefs: []
  type: TYPE_NORMAL
- en: Our task is to migrate a physical (global zone) Oracle Solaris 10 host (without
    any non-global zones inside) to an Oracle Solaris 11 zone. The steps to migrate
    an Oracle Solaris 10 native zone to an Oracle Solaris 11 brand10 zone are very
    similar, and they will not be shown.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To migrate a physical Oracle Solaris 10 (global zone) to Oracle Solaris 11
    Solaris 10 branded zone, it''s advisable to collect any information (the hostname,
    host ID, amount of memory, operating system version, available disks, and so on)
    about Oracle Solaris 10 before executing the migration steps. From now, every
    time we see the `bash-3.2#` prompt, it will mean that we are working on Oracle
    Solaris 10\. The information can be collected by executing the following simple
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have already collected all the necessary information from the Oracle
    Solaris 10 virtual machine, the `zonep2vchk` command is executed to verify the
    P2V migration compatibility and whether this procedure is possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'There are no critical issues (it is recommended that you examine this report
    line by line) so we are able to proceed with the migration in order to create
    a zone configuration file by executing the following sequence of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'From this previous file, some changes were made as shown in the following command
    lines (in bold and self-explanatory). The new migrating configuration file looks
    like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Before continuing the procedure, we have to verify that there is only a global
    zone (our initial purpose is to migrate an Oracle Solaris 10 host without containing
    inside zones) by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'This is great! Now, it is time to create an image (`solaris10.flar`) from the
    original Oracle Solaris 10 global zone, excluding the directory where the image
    will be saved (`-x /migration`) in order to prevent a recursion effect by executing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'After some time, check the created file by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'This FLAR image will be used in the following steps from the Oracle Solaris
    11 machine, and it is important to share its directory by running the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Switching to another machine (`solaris11-1`), which is running Oracle Solaris
    11, it is necessary to create a ZFS filesystem to migrate the Oracle Solaris 10
    installation into this filesystem as a non-global zone. Therefore, execute the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'As the `solaris10.flar` image is going to be accessed in order to transfer
    the Oracle Solaris 10 content from the Oracle Solaris 10 physical host, the connection
    to the NFS share (`/migration`) from the Oracle Solaris 11 host (`solaris11-1`)
    has to be verified by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'It is time to execute the migration steps. Mount the NFS share in `/mnt` by
    running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the non-global zone in the Oracle Solaris 11 host (`solaris11-1`) using
    the saved Solaris 10 configuration file (`solaris10.cfg`) created in a previous
    step by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we install the zone using the `solaris10.flar` image by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'After the previous step, it is recommended that you verify whether the `solaris10`
    zone is installed and configured correctly by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'After booting the zone, check its status again by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Log in to the new zone and verify that it is an Oracle Solaris 10 installation,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: This is amazing! We have migrated the Oracle Solaris 10 host to a solaris10
    branded zone in the Oracle Solaris 11 host.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using no extra or external tools, we've learned how to migrate an Oracle Solaris
    10 physical host to a Oracle Solaris 11 non-global zone using the `zonep2vchk`,
    `flarcreate`, and `zonecfg` commands.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Oracle Solaris SDN and* *Network Virtualization* at [http://www.oracle.com/technetwork/server-storage/solaris11/technologies/networkvirtualization-312278.html](http://www.oracle.com/technetwork/server-storage/solaris11/technologies/networkvirtualization-312278.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Oracle Solaris 11.1 Administration: Oracle Solaris Zones, Oracle Solaris 10
    Zones, and Resource Management* ([http://docs.oracle.com/cd/E26502_01/html/E29024/toc.html](http://docs.oracle.com/cd/E26502_01/html/E29024/toc.html))
    at [http://docs.oracle.com/cd/E26502_01/html/E29024/z.conf.start-2.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E29024/z.conf.start-2.html#scrolltoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using Virtual Networks in Oracle Solaris 11.1* ([http://docs.oracle.com/cd/E26502_01/html/E28992/toc.html](http://docs.oracle.com/cd/E26502_01/html/E28992/toc.html))
    at [http://docs.oracle.com/cd/E26502_01/html/E28992/gdyss.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28992/gdyss.html#scrolltoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

- en: Chapter 3. Getting Started with systemd and fleet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover the basics of systemd and `fleet`, which includes
    system unit files. We will demonstrate how to use a `fleet` to launch Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with `systemd`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with `fleet`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with systemd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are going to learn what `systemd` is about and how to use `systemctl` to
    control `systemd` units.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of systemd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `systemd` is an init system used by CoreOS for starting, stopping, and managing
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, it is a system and service manager for CoreOS. On CoreOS, `systemd`
    will be used almost exclusively to manage the life cycle of Docker containers.
    The `systemd` records initialization instructions for each process in the unit
    file, which has many types, but we will mainly be covering the "service" unit
    file, as covering all of them is beyond the scope for this book.
  prefs: []
  type: TYPE_NORMAL
- en: The systemd unit files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `systemd` records initialization instructions/properties for each process
    in the "service" unit file we want to run. On CoreOS, unit files installed by
    the user manually or via cloud-init are placed at `/etc/systemd/system`, which
    is a read-write filesystem, as a large part of CoreOS has only read-only access.
    Units curated by the CoreOS team are placed in `/usr/lib64/system/system`, and
    ephemeral units, which exist for the runtime of a single boot, are located at
    `/run/system/system`. This is really good to know for debugging `fleet` services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s create a unit file to test `systemd`:'
  prefs: []
  type: TYPE_NORMAL
- en: Boot your CoreOS VM installed in the first chapter and log in to the host via
    `ssh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a simple unit file, `hello.service`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Press *I* and copy and paste the following text (or use the provided example
    file, `hello.service`):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Esc* and then type :`wq` to save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To start the new unit, run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Created a symlink from `/etc/systemd/system/multi-user.target.wants/hello.service`
    to `/etc/systemd/system/hello.service`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s verify that the `hello.service` unit got started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`#` You should see the unit''s output similar to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The systemd unit files](img/image00112.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Also, you can check out the list of containers running with `docker ps`.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous steps, we created the `hello.service` system unit, enabled and
    started it, and checked that unit's log file with `journalctl`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To read about more advanced use of the `systemd` unit files, go to [https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd](https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd).
  prefs: []
  type: TYPE_NORMAL
- en: An overview of systemctl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `systemctl` is used to control and provide an introspection of the state
    of the `systemd` system and its units.
  prefs: []
  type: TYPE_NORMAL
- en: It is like your interface to a system (similar to `supervisord`/`supervisordctl`
    from other Linux distribution), as all processes on a single machine are started
    and managed by `systemd`, which includes `docker` containers too.
  prefs: []
  type: TYPE_NORMAL
- en: We have already used it in the preceding example to enable and start the `hello.service`
    unit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some useful `systemctl` commands, with their purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Checking the status of the unit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see a similar output as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![An overview of systemctl](img/image00113.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Stopping the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You might need to kill the service, but that will not stop the `docker` container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see a similar output as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![An overview of systemctl](img/image00114.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'As you can see, the `docker` container is still running. Hence, we need to
    stop it with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restarting the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you have changed `hello.service`, then before restarting, you need to reload
    all the service files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Disabling the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `systemd` service units can only run and be controlled on a single machine,
    and they should better be used for simpler tasks, for example, to download some
    files on reboot and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You will continue learning about `systemd` in the next topic and in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with fleet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We use `fleet` to take advantage of `systemd` at the higher level. The `fleet`
    is a cluster manager that controls `systemd` at the cluster level. You can even
    use it on a single machine and get all the advantages of `fleet` there too.
  prefs: []
  type: TYPE_NORMAL
- en: It encourages users to write applications as small, ephemeral units that can
    be easily migrated around a cluster of self-updating CoreOS machines.
  prefs: []
  type: TYPE_NORMAL
- en: The fleet unit files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `fleet` unit files are regular `systemd` units combined with specific `fleet`
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: '![The fleet unit files](img/image00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: They are the primary interaction with `fleet`. As in the `systemd` units, the
    `fleet` units define what you want to do and how `fleet` should do it. The `fleet`
    will schedule a valid unit file to the single machine or a machine in a cluster,
    taking in mind the `fleet` special properties from the `[X-Fleet]` section, which
    replaces the `systemd` unit's `[Install]` section. The rest of `systemd` sections
    are same in `fleet` units.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s overview the specific options of `fleet` for the `[X-Fleet]` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MachineID`: This unit will be scheduled on the machine identified by a given
    string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MachineOf`: This limits eligible machines to the one that hosts a specific
    unit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MachineMetadata`: This limits eligible machines to those hosts with this specific
    metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Conflicts`: This prevents a unit from being collocated with other units using
    glob-matching on other unit names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Global`: Schedule this unit on all machines in the cluster. A unit is considered
    invalid if options other than MachineMetadata are provided alongside `Global=true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of how a `fleet` unit file can be written with the [X-Fleet] section
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'So, let''s see how `Conflicts=ping*` works. For instance, we have two identical
    `ping.1.service` and `ping.2.service` files, and we run on our cluster using the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will schedule two `fleet` units on two separate cluster machines. So, let's
    convert the `systemd` unit called `hello.service` that we previously used to `fleet`
    unit.
  prefs: []
  type: TYPE_NORMAL
- en: As usual, you need to log in to the host via `ssh` with `vagrant ssh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s create a simple unit file with the new name `hello1.service`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Press *I* and copy and paste the text as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Esc* and then type :`wq` to save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, we have the `[X-Fleet]` section empty for now because we have
    nothing to use there yet. We will cover that part in more detail in the upcoming
    chapters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, we need to submit our `fleet` unit :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s verify that our `fleet` unit files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![The fleet unit files](img/image00116.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To start the new unit, run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![The fleet unit files](img/image00117.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The preceding commands have submitted and started `hello1.service`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s verify that our new `fleet` unit is running:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![The fleet unit files](img/image00118.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Okay, it's now time to overview the `fleetctl` commands.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of fleetctl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `fleetctl` commands are very similar to `systemctl` commands— you can see
    this as follows—and we do not have to use `sudo` with `fleetctl`. Here are some
    tasks you can perform, listed with the required commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Checking the status of the unit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Stopping the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Viewing the service file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to just upload the unit file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Listing all running fleet units:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Listing fleet cluster machines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![An overview of fleetctl](img/image00119.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We see just one machine, as in our case, as we have only one machine running
    there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, if we want to see the `hello1.service` log output, we still use
    the same systemd `journalctl` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the unit''s output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of fleetctl](img/image00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can read more about these topics at the given URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**systemd unit files**: [https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd/](https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fleet unit files**: [https://coreos.com/docs/launching-containers/launching/fleet-unit-files/](https://coreos.com/docs/launching-containers/launching/fleet-unit-files/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about CoreOS's `systemd` init system. You also
    learned how to create and control system and `fleet` service units with `systemctl`
    and `fleetctl`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to set up and manage CoreOS clusters.
  prefs: []
  type: TYPE_NORMAL

- en: Chapter 3. Getting Started with systemd and fleet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：开始使用systemd和fleet
- en: In this chapter, we will cover the basics of systemd and `fleet`, which includes
    system unit files. We will demonstrate how to use a `fleet` to launch Docker containers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍`systemd`和`fleet`的基础知识，包括系统单元文件。我们将演示如何使用`fleet`来启动Docker容器。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Getting started with `systemd`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用`systemd`
- en: Getting started with `fleet`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用`fleet`
- en: Getting started with systemd
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用systemd
- en: You are going to learn what `systemd` is about and how to use `systemctl` to
    control `systemd` units.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习什么是`systemd`以及如何使用`systemctl`来控制`systemd`单元。
- en: An overview of systemd
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: systemd概述
- en: The `systemd` is an init system used by CoreOS for starting, stopping, and managing
    processes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemd`是CoreOS使用的初始化系统，用于启动、停止和管理进程。'
- en: Basically, it is a system and service manager for CoreOS. On CoreOS, `systemd`
    will be used almost exclusively to manage the life cycle of Docker containers.
    The `systemd` records initialization instructions for each process in the unit
    file, which has many types, but we will mainly be covering the "service" unit
    file, as covering all of them is beyond the scope for this book.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，它是CoreOS的系统和服务管理器。在CoreOS上，`systemd`几乎完全用于管理Docker容器的生命周期。`systemd`记录每个进程在单元文件中的初始化指令，单元文件有许多种类，但我们主要讨论"服务"单元文件，因为涵盖所有单元文件超出了本书的范围。
- en: The systemd unit files
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: systemd单元文件
- en: The `systemd` records initialization instructions/properties for each process
    in the "service" unit file we want to run. On CoreOS, unit files installed by
    the user manually or via cloud-init are placed at `/etc/systemd/system`, which
    is a read-write filesystem, as a large part of CoreOS has only read-only access.
    Units curated by the CoreOS team are placed in `/usr/lib64/system/system`, and
    ephemeral units, which exist for the runtime of a single boot, are located at
    `/run/system/system`. This is really good to know for debugging `fleet` services.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemd`记录每个进程在我们希望运行的"服务"单元文件中的初始化指令/属性。在CoreOS上，用户手动安装或通过cloud-init安装的单元文件放置在`/etc/systemd/system`，这是一个可读写的文件系统，因为CoreOS的大部分内容只有只读访问权限。由CoreOS团队策划的单元文件放在`/usr/lib64/system/system`，而临时单元文件仅在一次启动的运行时存在，存放在`/run/system/system`。这一点对于调试`fleet`服务非常有帮助。'
- en: 'Okay, let''s create a unit file to test `systemd`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们创建一个单元文件来测试`systemd`：
- en: Boot your CoreOS VM installed in the first chapter and log in to the host via
    `ssh`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你在第一章中安装的CoreOS虚拟机，并通过`ssh`登录主机。
- en: 'Let''s create a simple unit file, `hello.service`:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的单元文件`hello.service`：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Press *I* and copy and paste the following text (or use the provided example
    file, `hello.service`):'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按*I*键并复制粘贴以下文本（或者使用提供的示例文件`hello.service`）：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Press *Esc* and then type :`wq` to save the file.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Esc*键，然后输入:`wq`保存文件。
- en: 'To start the new unit, run this command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动新的单元，运行以下命令：
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Created a symlink from `/etc/systemd/system/multi-user.target.wants/hello.service`
    to `/etc/systemd/system/hello.service`.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`/etc/systemd/system/multi-user.target.wants/hello.service`创建了一个指向`/etc/systemd/system/hello.service`的符号链接。
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s verify that the `hello.service` unit got started:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们验证`hello.service`单元是否已启动：
- en: '[PRE4]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`#` You should see the unit''s output similar to this:'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`#` 你应该看到类似以下的单元输出：'
- en: '![The systemd unit files](img/image00112.jpeg)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![The systemd unit files](img/image00112.jpeg)'
- en: Also, you can check out the list of containers running with `docker ps`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可以查看通过`docker ps`运行的容器列表。
- en: In the previous steps, we created the `hello.service` system unit, enabled and
    started it, and checked that unit's log file with `journalctl`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的步骤中，我们创建了`hello.service`系统单元，启用了它并启动了它，然后用`journalctl`检查了该单元的日志文件。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To read about more advanced use of the `systemd` unit files, go to [https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd](https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`systemd`单元文件的高级用法，请访问[https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd](https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd)。
- en: An overview of systemctl
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: systemctl概述
- en: The `systemctl` is used to control and provide an introspection of the state
    of the `systemd` system and its units.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemctl`用于控制并提供`systemd`系统及其单元的状态检查。'
- en: It is like your interface to a system (similar to `supervisord`/`supervisordctl`
    from other Linux distribution), as all processes on a single machine are started
    and managed by `systemd`, which includes `docker` containers too.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 它就像是你与系统的接口（类似于其他 Linux 发行版中的 `supervisord` / `supervisordctl`），因为所有在单台机器上的进程都是由
    `systemd` 启动和管理的，包括 `docker` 容器。
- en: We have already used it in the preceding example to enable and start the `hello.service`
    unit.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前面的示例中使用它来启用并启动 `hello.service` 单元。
- en: 'The following are some useful `systemctl` commands, with their purposes:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的 `systemctl` 命令及其用途：
- en: 'Checking the status of the unit:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查单元的状态：
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should see a similar output as follows:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似的输出，如下所示：
- en: '![An overview of systemctl](img/image00113.jpeg)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![systemctl 概览](img/image00113.jpeg)'
- en: 'Stopping the service:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止服务：
- en: '[PRE6]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You might need to kill the service, but that will not stop the `docker` container:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能需要强制停止服务，但这并不会停止 `docker` 容器：
- en: '[PRE7]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should see a similar output as follows:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似的输出，如下所示：
- en: '![An overview of systemctl](img/image00114.jpeg)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![systemctl 概览](img/image00114.jpeg)'
- en: 'As you can see, the `docker` container is still running. Hence, we need to
    stop it with the following command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，`docker` 容器仍在运行。因此，我们需要使用以下命令停止它：
- en: '[PRE8]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Restarting the service:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启服务：
- en: '[PRE9]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you have changed `hello.service`, then before restarting, you need to reload
    all the service files:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你修改了 `hello.service`，那么在重启之前，你需要重新加载所有服务文件：
- en: '[PRE10]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Disabling the service:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用服务：
- en: '[PRE11]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `systemd` service units can only run and be controlled on a single machine,
    and they should better be used for simpler tasks, for example, to download some
    files on reboot and so on.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemd` 服务单元只能在单台机器上运行和控制，它们最好用于一些简单的任务，例如在重启时下载一些文件等。'
- en: You will continue learning about `systemd` in the next topic and in later chapters.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在下一个主题和后续章节中继续学习 `systemd`。
- en: Getting started with fleet
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 fleet
- en: We use `fleet` to take advantage of `systemd` at the higher level. The `fleet`
    is a cluster manager that controls `systemd` at the cluster level. You can even
    use it on a single machine and get all the advantages of `fleet` there too.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `fleet` 来充分利用 `systemd` 的高级功能。`fleet` 是一个集群管理器，在集群级别控制 `systemd`。你甚至可以在单台机器上使用它，并同样获得
    `fleet` 的所有优势。
- en: It encourages users to write applications as small, ephemeral units that can
    be easily migrated around a cluster of self-updating CoreOS machines.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 它鼓励用户将应用程序写成小而短暂的单元，这些单元可以轻松地在一个自我更新的 CoreOS 机器集群中迁移。
- en: The fleet unit files
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: fleet 单元文件
- en: The `fleet` unit files are regular `systemd` units combined with specific `fleet`
    properties.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`fleet` 单元文件是常规的 `systemd` 单元，并结合了特定的 `fleet` 属性。'
- en: '![The fleet unit files](img/image00115.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![fleet 单元文件](img/image00115.jpeg)'
- en: They are the primary interaction with `fleet`. As in the `systemd` units, the
    `fleet` units define what you want to do and how `fleet` should do it. The `fleet`
    will schedule a valid unit file to the single machine or a machine in a cluster,
    taking in mind the `fleet` special properties from the `[X-Fleet]` section, which
    replaces the `systemd` unit's `[Install]` section. The rest of `systemd` sections
    are same in `fleet` units.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是与 `fleet` 进行交互的主要方式。与 `systemd` 单元一样，`fleet` 单元定义了你想要做什么以及 `fleet` 如何做。`fleet`
    将会根据 `[X-Fleet]` 部分的 `fleet` 特殊属性，将有效的单元文件调度到单台机器或集群中的某台机器，这部分属性替代了 `systemd`
    单元中的 `[Install]` 部分。其余的 `systemd` 部分在 `fleet` 单元中是相同的。
- en: 'Let''s overview the specific options of `fleet` for the `[X-Fleet]` section:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们概览一下 `[X-Fleet]` 部分的 `fleet` 特定选项：
- en: '`MachineID`: This unit will be scheduled on the machine identified by a given
    string.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MachineID`：该单元将在由指定字符串识别的机器上调度。'
- en: '`MachineOf`: This limits eligible machines to the one that hosts a specific
    unit.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MachineOf`：此选项将机器限定为托管特定单元的机器。'
- en: '`MachineMetadata`: This limits eligible machines to those hosts with this specific
    metadata.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MachineMetadata`：这将使机器仅限于那些具有特定元数据的主机。'
- en: '`Conflicts`: This prevents a unit from being collocated with other units using
    glob-matching on other unit names.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Conflicts`：此选项可防止单元与其他单元一起部署，使用通配符匹配其他单元的名称。'
- en: '`Global`: Schedule this unit on all machines in the cluster. A unit is considered
    invalid if options other than MachineMetadata are provided alongside `Global=true`.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Global`：将此单元调度到集群中的所有机器。如果除了 `MachineMetadata` 以外提供了其他选项，则该单元被视为无效。'
- en: 'An example of how a `fleet` unit file can be written with the [X-Fleet] section
    is as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有 [X-Fleet] 部分的 `fleet` 单元文件的编写示例如下：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So, let''s see how `Conflicts=ping*` works. For instance, we have two identical
    `ping.1.service` and `ping.2.service` files, and we run on our cluster using the
    following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们看看 `Conflicts=ping*` 是如何工作的。例如，我们有两个相同的 `ping.1.service` 和 `ping.2.service`
    文件，并且我们在集群中运行以下代码：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will schedule two `fleet` units on two separate cluster machines. So, let's
    convert the `systemd` unit called `hello.service` that we previously used to `fleet`
    unit.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会在两台独立的集群机器上调度两个 `fleet` 单元。所以，让我们将之前使用的 `systemd` 单元 `hello.service` 转换为
    `fleet` 单元。
- en: As usual, you need to log in to the host via `ssh` with `vagrant ssh`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，您需要通过 `vagrant ssh` 登录到主机。
- en: 'Now let''s create a simple unit file with the new name `hello1.service`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个简单的单元文件，新的名称为 `hello1.service`：
- en: '[PRE14]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Press *I* and copy and paste the text as follows:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按下 *I* 并复制粘贴如下文本：
- en: '[PRE15]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Press *Esc* and then type :`wq` to save the file.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Esc* 然后输入 :`wq` 来保存文件。
- en: As you can see, we have the `[X-Fleet]` section empty for now because we have
    nothing to use there yet. We will cover that part in more detail in the upcoming
    chapters.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，当前我们的 `[X-Fleet]` 部分为空，因为我们暂时没有需要在那里使用的内容。我们将在接下来的章节中详细讲解这一部分。
- en: 'First, we need to submit our `fleet` unit :'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要提交我们的 `fleet` 单元：
- en: '[PRE16]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s verify that our `fleet` unit files:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们验证我们的 `fleet` 单元文件：
- en: '[PRE17]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![The fleet unit files](img/image00116.jpeg)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![舰队单元文件](img/image00116.jpeg)'
- en: 'To start the new unit, run this command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动新的单元，运行以下命令：
- en: '[PRE18]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![The fleet unit files](img/image00117.jpeg)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![舰队单元文件](img/image00117.jpeg)'
- en: The preceding commands have submitted and started `hello1.service`.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的命令已经提交并启动了 `hello1.service`。
- en: 'Let''s verify that our new `fleet` unit is running:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们验证我们的新 `fleet` 单元是否正在运行：
- en: '[PRE19]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![The fleet unit files](img/image00118.jpeg)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![舰队单元文件](img/image00118.jpeg)'
- en: Okay, it's now time to overview the `fleetctl` commands.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在是时候概览一下 `fleetctl` 命令了。
- en: An overview of fleetctl
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`fleetctl` 概览'
- en: 'The `fleetctl` commands are very similar to `systemctl` commands— you can see
    this as follows—and we do not have to use `sudo` with `fleetctl`. Here are some
    tasks you can perform, listed with the required commands:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`fleetctl` 命令与 `systemctl` 命令非常相似——您可以像下面这样看到这一点——而且我们不需要在 `fleetctl` 命令前使用
    `sudo`。以下是您可以执行的一些任务，并列出了所需的命令：'
- en: 'Checking the status of the unit:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查单元的状态：
- en: '[PRE20]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Stopping the service:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止服务：
- en: '[PRE21]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Viewing the service file:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看服务文件：
- en: '[PRE22]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you want to just upload the unit file:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您只想上传单元文件：
- en: '[PRE23]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Listing all running fleet units:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出所有正在运行的舰队单元：
- en: '[PRE24]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Listing fleet cluster machines:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出舰队集群机器：
- en: '[PRE25]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![An overview of fleetctl](img/image00119.jpeg)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![fleetctl 概览](img/image00119.jpeg)'
- en: We see just one machine, as in our case, as we have only one machine running
    there.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到只有一台机器，就像我们这种情况一样，因为我们只有一台机器在运行。
- en: 'Of course, if we want to see the `hello1.service` log output, we still use
    the same systemd `journalctl` command, as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果我们想查看 `hello1.service` 的日志输出，依然可以使用相同的 systemd `journalctl` 命令，如下所示：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You should see the unit''s output similar to this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似于以下的单元输出：
- en: '![An overview of fleetctl](img/image00120.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![fleetctl 概览](img/image00120.jpeg)'
- en: References
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'You can read more about these topics at the given URLs:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下给定的网址阅读更多相关主题：
- en: '**systemd unit files**: [https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd/](https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd/)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**systemd 单元文件**：[https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd/](https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd/)'
- en: '**fleet unit files**: [https://coreos.com/docs/launching-containers/launching/fleet-unit-files/](https://coreos.com/docs/launching-containers/launching/fleet-unit-files/)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**舰队单元文件**：[https://coreos.com/docs/launching-containers/launching/fleet-unit-files/](https://coreos.com/docs/launching-containers/launching/fleet-unit-files/)'
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about CoreOS's `systemd` init system. You also
    learned how to create and control system and `fleet` service units with `systemctl`
    and `fleetctl`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了 CoreOS 的 `systemd` 初始化系统。您还学习了如何使用 `systemctl` 和 `fleetctl` 创建和控制系统和
    `fleet` 服务单元。
- en: In the next chapter, you will learn how to set up and manage CoreOS clusters.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何设置和管理 CoreOS 集群。

- en: 'Section 2: Mastering File and Directory Access Control (DAC)'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2节：掌握文件和目录的访问控制（DAC）
- en: This section will talk about protecting sensitive files and directories by setting
    proper permissions and ownership, and by using **Extended Attributes** (**xattr**).
    Avoid security related problems with **Set User ID** (**SUID**) and **Set Group
    ID** (**SGID**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将讨论通过设置适当的权限和所有权、以及使用**扩展属性**（**xattr**）来保护敏感文件和目录。避免与**设置用户ID**（**SUID**）和**设置组ID**（**SGID**）相关的安全问题。
- en: 'The section contains the following chapters:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以下章节：
- en: '*Chapter 8*, *Mastering Discretionary Access Control*'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第8章*，*掌握自主访问控制*'
- en: '*Chapter 9*, *Access Control Lists and Shared Directory Management*'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第9章*，*访问控制列表和共享目录管理*'
- en: 8 Mastering Discretionary Access Control
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8 掌握自主访问控制
- en: Join our book community on Discord
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入我们的书籍社区，加入Discord
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/file57.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file57.png)'
- en: '**Discretionary Access Control** (**DAC**) really just means that each user
    has the ability to control who can get into their stuff. If I wanted to open my
    home directory so that every other user on the system can get into it, I could
    do that. Having done so, I could then control who can access each specific file.
    In the next chapter, we''ll use our DAC skills to manage shared directories, where
    members of a group might need different levels of access to the files within.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**自主访问控制**（**DAC**）实际上意味着每个用户都有能力控制谁可以访问他们的文件。如果我想让系统中的其他所有用户都能访问我的主目录，我可以这么做。完成后，我可以控制谁可以访问每个具体的文件。在下一章中，我们将使用我们的DAC技能来管理共享目录，其中组成员可能需要不同级别的文件访问权限。'
- en: At this point in your Linux career, you likely know the basics of controlling
    access by setting file and directory permissions. In this chapter, we'll review
    the basics, and then we'll look at some more advanced concepts.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在你Linux职业生涯的这个阶段，你可能已经了解了通过设置文件和目录权限来控制访问的基础知识。在本章中，我们将回顾这些基础知识，然后探讨一些更高级的概念。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Using `chown` to change the ownership of files and directories
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`chown`更改文件和目录的所有权
- en: Using `chmod` to set permissions on files and directories
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`chmod`设置文件和目录的权限
- en: What SUID and SGID settings can do for us on regular files
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SUID和SGID设置在常规文件上的作用
- en: The security implications of having the SUID and SGID permissions set on files
    that don't need them
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对不需要SUID和SGID权限的文件设置这些权限的安全影响
- en: How to use extended file attributes to protect sensitive files
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用扩展文件属性保护敏感文件
- en: Securing system configuration files
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护系统配置文件
- en: Using chown to change ownership of files and directories
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`chown`更改文件和目录的所有权
- en: Controlling access to files and directories really just boils down to ensuring
    that the proper users can access their own files and directories and that each
    file and directory has permissions set in such a way that only authorized users
    can access them. The `chown` utility covers the first part of this equation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 控制文件和目录的访问实际上就是确保合适的用户能够访问他们自己的文件和目录，并且每个文件和目录的权限设置得当，只有授权的用户能够访问它们。`chown`工具涵盖了这个方程式的第一部分。
- en: One unique thing about `chown` is that you must have `sudo` privileges to use
    it, even if you're working with your own files in your own directory. You can
    use it to change the user of a file or directory, the group that's associated
    with a file or directory, or both at the same time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown`的一个独特之处在于，即使你正在处理自己目录中的文件，你也必须拥有`sudo`权限才能使用它。你可以使用它更改文件或目录的用户、与文件或目录关联的组，或者同时更改两者。'
- en: 'First, let''s say that you own the `perm_demo.txt` file and that you want to
    change both the user and group association to that of another user. In this case,
    I''ll change the file ownership from me to `maggie`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，假设你拥有`perm_demo.txt`文件，并且你想将该文件的用户和组关联更改为另一个用户。在这种情况下，我将把文件的所有权从我自己更改为`maggie`：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first `maggie` in `maggie:maggie` is the user to whom you want to grant
    ownership. The second `maggie`, after the colon, represents the group that you
    want the file to be associated with. Since I was changing both the user and the
    group to `maggie`, I could have left off the second `maggie`, with the first `maggie`
    followed by a colon, and I would have achieved the same result:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`maggie:maggie`中的第一个`maggie`是你想要授予所有权的用户。冒号后的第二个`maggie`表示你希望文件与之关联的组。因为我正在将用户和组都更改为`maggie`，所以我可以省略第二个`maggie`，只写第一个`maggie`后加冒号，这样也能达到相同的结果：'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To just change the group association without changing the user, just list the
    group name, preceded by a colon:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 只改变组关联而不改变用户时，只需列出组名，前面加冒号：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, to just change the user without changing the group, list the username
    without the trailing colon:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，只改变用户而不改变组时，列出用户名时不需要冒号：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These commands work the same way on a directory as they do on a file. However,
    if you also want to change the ownership and/or the group association of the contents
    of a directory, while also making the change on the directory itself, use the
    `-R` option, which stands for *recursive*. In this case, I just want to change
    the group for the `perm_demo_dir` directory to `accounting`. Let''s see what we
    have to begin with:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令在目录上与在文件上的作用是一样的。然而，如果你还想改变目录内容的所有权和/或组关联，并且同时改变目录本身的权限，可以使用`-R`选项，表示*递归*。在这种情况下，我只想将`perm_demo_dir`目录的组更改为`accounting`。让我们看看我们最初的情况：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let''s run the command and look at the results:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行命令并查看结果：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That's all there is to `chown`. Next, let’s change some permissions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`chown`的全部内容。接下来，我们来改变一些权限。
- en: Using chmod to set permissions on files and directories
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`chmod`设置文件和目录的权限
- en: 'On Unix and Linux systems, you would use the `chmod` utility to set permissions
    values on files and directories. You can set permissions for the user of the file
    or directory, the group that''s associated with the file or directory, and more.
    The three basic permissions are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix和Linux系统上，你可以使用`chmod`工具来设置文件和目录的权限值。你可以为文件或目录的用户、与文件或目录关联的组等设置权限。三种基本权限如下：
- en: '**r**: This indicates a read permission.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**r**：表示读权限。'
- en: '**w**: This indicates a write permission.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**w**：表示写权限。'
- en: '**x**: This is the executable permission. You can apply it to any type of program
    file, or to directories. If you apply an executable permission to a directory,
    authorized people will be able to `cd` into it.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**x**：表示可执行权限。你可以将其应用于任何类型的程序文件或目录。如果你将可执行权限应用于目录，授权用户将能够`cd`进入该目录。'
- en: 'If you perform `ls -l` on a file, you''ll see something like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对一个文件执行`ls -l`，你会看到类似这样的内容：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The first character of this line indicates the type of file. In this case,
    we can see a dash, which indicates a regular file. (A regular file is pretty much
    every type of file that a normal user would be able to access in his or her daily
    routine.) The next three characters, `rw-`, indicate that the file has read and
    write permissions for the user, which is the person who owns the file. Then, we
    can see the `rw-` permissions for the group and the `r--` permissions for others.
    A program file would also have the executable permissions set:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行的第一个字符表示文件的类型。在这种情况下，我们可以看到一个破折号，表示这是一个普通文件。（普通文件几乎是普通用户在日常使用中能够访问的所有文件类型。）接下来的三个字符`rw-`表示文件对用户（即拥有文件的用户）具有读写权限。接着，我们可以看到组的`rw-`权限和其他用户的`r--`权限。程序文件也会有可执行权限：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we can see that the `xargs` program file has executable permissions set
    for everybody.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`xargs`程序文件为所有人设置了可执行权限。
- en: 'There are two ways that you can use `chmod` to change permissions settings:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`chmod`有两种方式来更改权限设置：
- en: The symbolic method
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号方法
- en: The numerical method
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字方法
- en: We'll cover these methods next.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将介绍这些方法。
- en: Setting permissions with the symbolic method
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用符号方法设置权限
- en: Whenever you create a file as a normal user, by default, it will have read/write
    permissions for the user and group, and read permission for others.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你以普通用户身份创建文件时，默认情况下，它会为用户和组设置读写权限，并为其他用户设置读权限。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first three commands add the executable permission for the user, the group,
    and others. The fourth command adds executable permissions for both the user and
    the group, while the last command adds executable permissions for everybody (`a`
    for all). You can also remove the executable permissions by replacing `+` with
    `-`. Finally, you can also add or remove the read or write permissions, as appropriate.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个命令为用户、组和其他用户添加了可执行权限。第四个命令为用户和组添加了可执行权限，而最后一个命令则为所有人添加了可执行权限（`a`表示所有人）。你还可以通过将`+`替换为`-`来移除可执行权限。最后，你还可以根据需要添加或移除读写权限。
- en: While this method can be handy at times, it also has a bit of a flaw; that is,
    it can only add permissions to what's already there, or remove permissions from
    what's already there. If you need to ensure that all of the permissions for a
    particular file get set to a certain value, the symbolic method can get a bit
    unwieldy. And for shell scripting, forget about it. In a shell script, you'd need
    to add all kinds of extra code just to determine which permissions have already
    been set. The numerical method can vastly simplify things for us.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法有时很方便，但也有一些缺陷；即它只能添加已经存在的权限，或者从已经存在的权限中移除权限。如果你需要确保某个特定文件的所有权限都被设置为某个特定值，那么符号方法可能会变得有些笨重。对于
    Shell 脚本来说，这几乎是不可能的。在 Shell 脚本中，你需要添加很多额外的代码来判断哪些权限已经设置好了。而数字方法则能极大地简化我们的工作。
- en: Setting permissions with the numerical method
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用数字方法设置权限
- en: 'With the numerical method, you''ll use an octal value to represent the permissions
    settings on a file or directory. For the `r`, `w`, and `x` permissions, you assign
    the numerical values `4`, `2`, and `1`, respectively. You would do this for the
    user, group, and others positions, and then add them all up to get the permissions
    value for the file or directory:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数字方法时，你会使用一个八进制值来表示文件或目录的权限设置。对于`r`、`w`和`x`权限，分别赋予数字值`4`、`2`和`1`。你需要为用户、组和其他用户设置这些权限值，然后将它们相加，得到文件或目录的权限值：
- en: '| **User** | **Group** | **Others** |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **用户** | **组** | **其他用户** |'
- en: '| rwx | rwx | rwx |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| rwx | rwx | rwx |'
- en: '| 421 | 421 | 421 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 421 | 421 | 421 |'
- en: '| 7 | 7 | 7 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 7 | 7 |'
- en: 'So, if you have all the permissions set for everybody, the file or directory
    will have a value of `777`. If I were to create a shell script file, by default,
    it would have the standard `664` permissions, meaning read and write for the user
    and group, and read-only for others:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果为所有人设置了所有权限，那么文件或目录的权限值将是`777`。如果我创建一个 Shell 脚本文件，默认情况下，它将具有标准的`664`权限，这意味着用户和组有读写权限，其他用户只有只读权限：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Tip**'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you create a file with root privileges, either with `sudo` or from the root
    user command prompt, you'll see that the default permissions setting is the more
    restrictive `644`.
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你使用 root 权限创建文件，无论是通过`sudo`还是通过 root 用户命令提示符，你会看到默认的权限设置是更为严格的`644`。
- en: 'Let''s say that I want to make this script executable, but I want to be the
    only person in the whole world who can do anything with it. To do this, I could
    do the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想让这个脚本可以执行，但我希望自己是全世界唯一可以对它做任何事情的人。为了实现这一点，我可以执行以下操作：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With this one simple command, I've removed all permissions from the group and
    from others, and set the executable permission for myself. This is the sort of
    thing that makes the numerical method so handy for writing shell scripts.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一条简单的命令，我已移除组和其他用户的所有权限，并为自己设置了可执行权限。这就是数字方法在编写 Shell 脚本时如此方便的原因。
- en: 'Once you''ve been working with the numerical method for a while, looking at
    a file and figuring out its numerical permissions value will become second nature.
    In the meantime, you can use `stat` with the `-c %a` option to show you the values.
    This can be done like so:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在使用数字方法一段时间后，看一个文件并计算它的数字权限值将变得像第二天性一样。与此同时，你可以使用`stat`命令并配合`-c %a`选项来查看文件的权限值。可以这样操作：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you want to view the numerical permissions of all the files at once, do
    this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想一次性查看所有文件的数字权限，可以这样做：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, you can see the wildcard (`*`) at the end of the command, indicating
    that you want to view the settings for all the files. `%n` indicates that you
    want to view the filenames, along with the permissions settings. Since we''re
    using two `-c` options, we have to enclose both of the options within a pair of
    single quotes. The only slight catch here is that this output doesn''t show which
    of these items are files, and which are directories. However, since directories
    require executable permissions so that people can `cd` into them, we can guess
    that `dropbear` is probably a directory. To be sure though, just use `ls -l`,
    like so:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到命令末尾的通配符（`*`），这表示你想查看所有文件的设置。`%n` 表示你想查看文件名及其权限设置。由于我们使用了两个 `-c` 选项，所以必须将这两个选项括在一对单引号中。唯一需要注意的地方是，这个输出并没有显示这些项目中哪些是文件，哪些是目录。然而，由于目录需要可执行权限才能让人们
    `cd` 进入，我们可以猜测 `dropbear` 可能是一个目录。不过，为了确保，可以使用 `ls -l`，如下所示：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, let's move on to a couple of very special permissions settings.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续讲解一些非常特殊的权限设置。
- en: Using SUID and SGID on regular files
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在常规文件上使用 SUID 和 SGID
- en: When a regular file has its SUID permission set, whoever accesses the file will
    have the same privileges as the user of the file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当常规文件设置了 SUID 权限时，任何访问该文件的人将拥有与文件所有者相同的权限。
- en: 'To demo this, let''s say that Maggie, a regular, unprivileged user, wants to
    change her own password. Since it''s her own password, she would just use the
    one-word `passwd` command, without using `sudo`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，假设 Maggie 是一个普通的、没有特权的用户，她想更改自己的密码。由于这是她自己的密码，她只需要使用单个命令 `passwd`，而不需要使用
    `sudo`：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To change a password, a person has to make changes to the `/etc/shadow` file.
    On my CentOS and AlmaLinux machines, the shadow file''s permissions look like
    this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改密码，用户必须修改 `/etc/shadow` 文件。在我的 CentOS 和 AlmaLinux 机器上，shadow 文件的权限如下所示：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'On an Ubuntu machine, they look like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在一台 Ubuntu 机器上，它们看起来是这样的：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Either way, the permissions settings don''t allow Maggie to directly modify
    the shadow file. However, by changing her password, she is able to modify the
    shadow file. So, what''s going on? To answer this, let''s go into the `/usr/bin/`
    directory and look at the permissions settings for the `passwd` executable file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，这些权限设置都不允许 Maggie 直接修改 shadow 文件。然而，通过更改她的密码，她能够修改 shadow 文件。那么，这是怎么回事呢？为了解答这个问题，让我们进入
    `/usr/bin/` 目录，查看 `passwd` 可执行文件的权限设置：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For the user permissions, you will see `rws` instead of `rwx`. The `s` indicates
    that this file has the SUID permission set. Since the file belongs to the root
    user, anyone who accesses this file has the same privileges as the root user.
    The fact that we see a lowercase `s` means that the file also has the executable
    permission set for the root user. Since the root user is allowed to modify the
    shadow file, whoever uses this `passwd` utility to change his or her own password
    can also modify the shadow file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户权限，你会看到 `rws` 而不是 `rwx`。`s` 表示这个文件具有 SUID 权限。由于该文件属于 root 用户，因此任何访问该文件的人都具有与
    root 用户相同的权限。我们看到小写字母 `s`，意味着该文件对 root 用户也设置了可执行权限。由于 root 用户被允许修改 shadow 文件，因此任何使用
    `passwd` 工具更改自己密码的人也可以修改 shadow 文件。
- en: 'A file with the SGID permission set has an `s` in the executable position for
    the group:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了 SGID 权限的文件，其组的可执行位置上会有一个 `s`：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `write` utility, which is associated with the `tty` group, allows users
    to send messages to other users via their command-line consoles. Having `tty`
    group privileges allows users to do this.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `tty` 组相关的 `write` 工具允许用户通过命令行控制台向其他用户发送消息。拥有 `tty` 组权限的用户可以执行此操作。
- en: The security implications of the SUID and SGID permissions
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SUID 和 SGID 权限的安全影响
- en: As useful as it may be to have SUID or SGID permissions on your executable files,
    we should consider it as just a necessary evil. While having SUID or SGID set
    on certain operating system files is essential for the operation of your Linux
    system, it becomes a security risk when users set SUID or SGID on other files.
    The problem is that, if intruders find an executable file that belongs to the
    root user and has the SUID bit set, they can use that to exploit the system. Before
    they leave, they might leave behind their own root-owned file with an SUID set,
    which will allow them to easily gain entry to the system the next time they encounter
    it. If the intruder's SUID file isn't found, the intruder will still have access,
    even if the original problem has been fixed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在可执行文件上设置 SUID 或 SGID 权限可能很有用，但我们应将其视为一种必要的恶习。虽然某些操作系统文件上设置 SUID 或 SGID 对
    Linux 系统的运行至关重要，但当用户在其他文件上设置 SUID 或 SGID 时，它会成为一种安全风险。问题在于，如果入侵者找到一个属于 root 用户并且设置了
    SUID 位的可执行文件，他们可以利用这个文件来攻击系统。在他们离开之前，他们可能会留下自己拥有 root 权限并且设置了 SUID 位的文件，这样下次遇到这个文件时，他们就能轻松重新进入系统。如果没有找到入侵者的
    SUID 文件，入侵者仍然可以访问系统，即使原始问题已经被修复。
- en: The numerical value for SUID is `4000`, and for SGID, it's `2000`. To set SUID
    on a file, you'd just add `4000` to whichever permissions value that you would
    set otherwise. For example, if you have a file with a permissions value of `755`,
    you'd set SUID by changing the permissions value to `4755`. (This would give you
    read/write/execute access for the user, read/execute for the group, and read/execute
    for others, with the SUID bit added on.)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: SUID 的数值是 `4000`，而 SGID 的数值是 `2000`。要在文件上设置 SUID，只需将 `4000` 添加到你本来会设置的权限值中。例如，如果你有一个权限值为
    `755` 的文件，可以通过将权限值更改为 `4755` 来设置 SUID。（这会为用户提供读/写/执行权限，为组提供读/执行权限，为其他人提供读/执行权限，并且添加了
    SUID 位。）
- en: Finding spurious SUID or SGID files
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找多余的 SUID 或 SGID 文件
- en: 'One quick security trick is to run the `find` command to take inventory of
    the SUID and SGID files on your system. You can also save the output to a text
    file so that you can verify whether anything has been added since you ran the
    command. Your command will look something like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一个快速的安全技巧是运行 `find` 命令来检查系统中的 SUID 和 SGID 文件。你还可以将输出保存到文本文件中，以便验证自运行命令以来是否添加了任何文件。你的命令看起来应该像这样：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here''s the breakdown:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是详细说明：
- en: '**/**: We''re searching through the entire filesystem. Since some directories
    are only accessible to someone with root privileges, we need to use `sudo`.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/**: 我们正在搜索整个文件系统。由于某些目录只有 root 用户才能访问，因此我们需要使用 `sudo`。'
- en: '**-type f**: This means that we''re searching for regular files, which includes
    executable program files and shell scripts.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-type f**: 这意味着我们正在搜索常规文件，包括可执行程序文件和 shell 脚本。'
- en: '**-perm 4000**: We''re searching for files with the `4000`, or SUID, permission
    bit set.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-perm 4000**: 我们正在寻找设置了 `4000`（即 SUID）权限位的文件。'
- en: '**-o**: The or operator.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-o**: 或操作符。'
- en: '**-perm 2000**: We''re searching for files with the `2000`, or SGID, permission
    bit set.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-perm 2000**: 我们正在寻找设置了 `2000`（即 SGID）权限位的文件。'
- en: '**>**: Here, we''re redirecting the output into the `suid_sgid_files.txt` text
    file with the `>` operator.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**>**: 这里，我们将输出重定向到 `suid_sgid_files.txt` 文本文件中，使用 `>` 操作符。'
- en: 'Note that the two `-perm` items need to be combined into a term that''s enclosed
    in a pair of parentheses. To prevent the Bash shell from interpreting the parenthesis
    characters incorrectly, we need to escape each one with a backslash. We also need
    to place a blank space between the first parenthesis character and the first `-perm`,
    and another between `2000` and the last backslash. Also, the **and** operator
    between `-type f` and the `-perm` term is understood to be there, even without
    inserting `-a`. The text file that you''ll create should look something like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，两个 `-perm` 项需要合并为一个用括号括起来的术语。为了防止 Bash shell 错误解释括号字符，我们需要使用反斜杠转义每个括号字符。同时，我们需要在第一个括号字符和第一个
    `-perm` 之间，以及在 `2000` 和最后一个反斜杠之间加上一个空格。另外，`-type f` 和 `-perm` 之间的 **and** 操作符，即使没有插入
    `-a`，也可以理解为存在。你将创建的文本文件应该如下所示：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Optionally, if you want to see details about which files are SUID and which
    are SGID, you can add the `-ls` option:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看哪些文件是 SUID 或 SGID，可以选择添加 `-ls` 选项：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Okay, you''re now saying, *Hey, Donnie, this is just too much to type*. And,
    I hear you. Fortunately, there''s a shorthand equivalent of this. Since `4000
    + 2000 = 6000`, we can create a single expression that will match either the SUID
    (`4000`) or the SGID (`2000`) value, like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你现在可能会说，*嘿，Donnie，这个实在是太多要输入的内容了*。我听懂了。幸运的是，有一个简写方式可以替代。由于`4000 + 2000 =
    6000`，我们可以创建一个单一的表达式，来匹配SUID（`4000`）或SGID（`2000`）值，像这样：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `/6000` in this command means that we're looking for either the `4000` or
    the `2000` value. For our purposes, these are the only two addends that can combine
    to make `6000`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令中的`/6000`表示我们正在寻找`4000`或`2000`值。就我们的目的而言，这两者是唯一可以组合成`6000`的加数。
- en: '**Tip**'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In some older references, you might see `+6000` instead of `/6000`. Using the
    `+` sign for this has been deprecated, and no longer works.
  id: totrans-110
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在一些旧的参考资料中，你可能会看到`+6000`而不是`/6000`。使用`+`符号已经被弃用，并且不再有效。
- en: 'Now, let''s say that Maggie, for whatever reason, decides to set the SUID bit
    on a shell script file in her home directory:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设Maggie因为某种原因决定在她家目录下的Shell脚本文件上设置SUID位：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the `find` command again, saving the output to a different text file. Then,
    perform a `diff` operation on the two files to see what changed:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行`find`命令，并将输出保存到另一个文本文件中。然后，对这两个文件执行`diff`操作，查看有哪些变化：
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The only difference is the addition of Maggie's shell script file.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是添加了Maggie的Shell脚本文件。
- en: Hands-on lab – searching for SUID and SGID files
  id: totrans-116
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 动手实验 – 查找SUID和SGID文件
- en: 'You can perform this lab on either of your virtual machines. You''ll save the
    output of the `find` command to a text file. Let''s get started:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在任意一台虚拟机上执行这个实验。你需要将`find`命令的输出保存到一个文本文件中。让我们开始吧：
- en: 'Search through the entire filesystem for all the files that have either SUID
    or SGID set before saving the output to a text file:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在整个文件系统中搜索所有设置了SUID或SGID的文件，然后将输出保存到一个文本文件中：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Log into any other user account that you have on the system and create a dummy
    shell script file. Then, set the SUID permission on that file and log back out
    and into your own user account:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你系统上的任何其他用户账户，创建一个虚拟的Shell脚本文件。然后，设置该文件的SUID权限，退出后再重新登录到你自己的用户账户：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Run the `find` command again, saving the output to a different text file:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`find`命令，并将输出保存到另一个文本文件中：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'View the difference between the two files:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看两个文件之间的差异：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: That's the end of the lab – congratulations!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 实验到此结束 – 恭喜你！
- en: Preventing SUID and SGID usage on a partition
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 防止在分区上使用SUID和SGID
- en: 'As we mentioned previously, you don''t want users to assign SUID and SGID to
    files that they create, because of the security risk that it presents. You can
    prevent SUID and SGID usage on a partition by mounting it with the `nosuid` option.
    So, the `/etc/fstab` file entry for the `luks` partition that I created in the
    previous chapter would look like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你不希望用户为他们创建的文件分配SUID和SGID权限，因为这会带来安全风险。你可以通过使用`nosuid`选项挂载分区来防止SUID和SGID的使用。因此，我在前一章节创建的`luks`分区在`/etc/fstab`文件中的条目应该如下所示：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Different Linux distributions have different ways of setting up default partition
    schemes during an operating system's installation. Mostly, the default way of
    doing business is to have all the directories, except for the `/boot/` directory,
    under the `/` partition. If you were to set up a custom partition scheme instead,
    you could have the `/home/` directory in its own partition, where you could set
    the `nosuid` option. Keep in mind that you don't want to set `nosuid` for the
    `/` partition; otherwise, you'll have an operating system that doesn't function
    properly.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的Linux发行版在操作系统安装期间有不同的默认分区方案设置方式。通常，默认的做法是除了`/boot/`目录外，所有目录都位于`/`分区下。如果你设置了自定义的分区方案，你可以将`/home/`目录放在单独的分区中，并在其中设置`nosuid`选项。请记住，你不希望为`/`分区设置`nosuid`，否则你将得到一个无法正常工作的操作系统。
- en: Using extended file attributes to protect sensitive files
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用扩展文件属性来保护敏感文件
- en: Extended file attributes are another tool that can help you protect sensitive
    files. They won't keep intruders from accessing your files, but they can help
    you prevent sensitive files from being altered or deleted. There are quite a few
    extended attributes, but we only need to look at the ones that deal with file
    security.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展文件属性是另一个帮助你保护敏感文件的工具。它们不能防止入侵者访问你的文件，但可以帮助你防止敏感文件被修改或删除。虽然有很多扩展属性，但我们只需要关注那些与文件安全相关的属性。
- en: 'First, let''s use the `lsattr` command to see which extended attributes we
    already have set. On a CentOS or AlmaLinux machine, your output would look something
    like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用`lsattr`命令查看我们已经设置了哪些扩展属性。在CentOS或AlmaLinux机器上，你的输出应该是这样的：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: So far, I don't have any extended attributes set on any of my files.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我的文件上还没有设置任何扩展属性。
- en: 'On an Ubuntu machine, the output would look more like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu机器上，输出看起来会更像这样：
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We won't worry about the `e` attribute because that only means that the partition
    is formatted with the **ext4** filesystem. CentOS and AlmaLinux don’t have that
    attribute set because their partitions are formatted with the **XFS** filesystem.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要担心`e`属性，因为它仅表示该分区采用**ext4**文件系统格式。CentOS和AlmaLinux没有设置这个属性，因为它们的分区是使用**XFS**文件系统格式化的。
- en: 'The two attributes that we''ll look at in this section are as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 本节我们将查看的两个属性如下：
- en: '**a**: You can append text to the end of a file that has this attribute, but
    you can''t overwrite it. Only someone with proper `sudo` privileges can set or
    delete this attribute.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**a**：你可以将文本追加到具有此属性的文件的末尾，但不能覆盖它。只有拥有适当`sudo`权限的人才能设置或删除此属性。'
- en: '**i**: This makes a file immutable, and only someone with proper `sudo` privileges
    can set or delete it. Files with this attribute can''t be deleted or changed in
    any way. It''s also not possible to create hard links to files that have this
    attribute.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**i**：这会使文件变为不可变，只有拥有适当`sudo`权限的人才能设置或删除它。具有此属性的文件无法以任何方式删除或更改。也无法为具有此属性的文件创建硬链接。'
- en: To set or delete attributes, you need to use the `chattr` command. You can set
    more than one attribute on a file, but only when it makes sense. For example,
    you wouldn't set both the `a` and the `i` attributes on the same file because
    the `i` will override the `a`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置或删除属性，你需要使用`chattr`命令。你可以在文件上设置多个属性，但只有在合理的情况下才能这样做。例如，你不会在同一个文件上同时设置`a`和`i`属性，因为`i`会覆盖`a`。
- en: 'Let''s start by creating the `perm_demo.txt` file, which contains the following
    text:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个名为`perm_demo.txt`的文件，其中包含以下文本：
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now, let's go ahead and set the attributes.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们继续设置属性。
- en: Setting the a attribute
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置a属性
- en: 'Now, I''ll set the `a` attribute:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将设置`a`属性：
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You use `+` to add an attribute and `-` to delete it. Also, it doesn't matter
    that the file belongs to me and is in my own home directory. I still need `sudo`
    privileges to add or delete this attribute.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用`+`来添加一个属性，使用`-`来删除它。并且，文件属于我且在我的主目录下并不重要。即便如此，我仍然需要`sudo`权限来添加或删除这个属性。
- en: 'Now, let''s see what happens when I try to overwrite this file:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看当我尝试覆盖这个文件时会发生什么：
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: With or without `sudo` privileges, I can't overwrite it. So, how about if I
    try to append something to it?
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是否拥有`sudo`权限，我都无法覆盖它。那么，如果我尝试向其中追加一些内容呢？
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'There''s no error message this time. Let''s see what''s in the file:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这次没有错误信息。我们来看看文件中的内容：
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In addition to not being able to overwrite the file, I''m also unable to delete
    it:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 除了无法覆盖文件外，我还无法删除它：
- en: '[PRE37]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'So, the `a` works. However, I''ve decided that I no longer want this attribute
    to be set, so I''ll remove it:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`a`属性生效了。然而，我决定不再需要这个属性了，因此我将把它移除：
- en: '[PRE38]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Setting the i attribute
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置i属性
- en: 'When a file has the `i` attribute set, the only thing you can do with it is
    view its contents. You can''t change it, move it, delete it, rename it, or create
    hard links to it. Let''s test this with the `perm_demo.txt` file:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件设置了`i`属性时，你唯一能做的事情就是查看它的内容。你不能更改它、移动它、删除它、重命名它，或者为它创建硬链接。我们来测试一下`perm_demo.txt`文件：
- en: '[PRE39]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now for the fun part:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是最有趣的部分：
- en: '[PRE40]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'There are a few more commands that I could try, but you get the idea. To remove
    the `i` attribute, do this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我还可以尝试几个其他命令，但你已经明白了思路。要移除`i`属性，执行如下操作：
- en: '[PRE41]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Hands-on lab – setting security-related extended file attributes
  id: totrans-167
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 实验室操作——设置与安全相关的扩展文件属性
- en: 'For this lab, you''ll need to create a `perm_demo.txt` file with some text
    of your choice. You''ll set the `i` and `a` attributes and view the results. Let''s
    get started:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，你需要创建一个`perm_demo.txt`文件，并填入你选择的文本。然后你将设置`i`和`a`属性，并查看结果。我们开始吧：
- en: Using your preferred text editor, create the `perm_demo.txt` file with a line
    of text.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的文本编辑器，创建`perm_demo.txt`文件并输入一行文本。
- en: 'View the extended attributes of the file:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看文件的扩展属性：
- en: '[PRE42]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the `a` attribute:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`a`属性：
- en: '[PRE43]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Try to overwrite and delete the file:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试覆盖并删除文件：
- en: '[PRE44]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, append something to the file:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向文件追加一些内容：
- en: '[PRE45]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Remove the `a` attribute and add the `i` attribute:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`a`属性并添加`i`属性：
- en: '[PRE46]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Repeat *Step 4*.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤4*。
- en: 'Additionally, try to change the filename and create a hard link to the file:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，尝试更改文件名并创建一个硬链接到文件：
- en: '[PRE47]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, try to create a symbolic link to the file:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，尝试为文件创建一个符号链接：
- en: '[PRE48]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note that the `i` attribute won't let you create hard links to a file, but it
    will let you create symbolic links.
  id: totrans-185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，`i`属性不能让你创建硬链接到文件，但它允许你创建符号链接。
- en: That's the end of the lab – congratulations!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 实验结束了 – 恭喜！
- en: Securing system configuration files
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保护系统配置文件
- en: 'If you look at the configuration files for any given Linux distro, you''ll
    see that most of them belong to either the root user or to a specified system
    user. You''ll also see that most of these files have read and write privileges
    for their respective owners, and read privileges for everyone else. This means
    that everybody and his brother can read most Linux system configuration files.
    Take, for example, this Apache web server configuration file:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看任何给定Linux发行版的配置文件，你会发现大多数文件属于root用户或某个指定的系统用户。你还会看到，这些文件大多数拥有所属用户的读写权限，并且其他人仅有读取权限。这意味着每个人及其兄弟都可以读取大多数Linux系统配置文件。例如，看看这个Apache
    web服务器配置文件：
- en: '[PRE49]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: With that `r` in the "others" position, everybody who logs in, regardless of
    their privilege level, can view the Apache configuration.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在“其他人”位置上有`r`权限时，所有登录的人，无论其权限级别如何，都可以查看Apache配置。
- en: So, is this a big deal? It really depends upon your circumstances. Some configuration
    files, especially ones for certain PHP-based **Content Management Systems** (**CMS**)
    on a web server, can contain plain text passwords that the CMS must be able to
    access. In these cases, it's quite obvious that you need to restrict access to
    these configuration files. But what about other configuration files that don't
    contain sensitive passwords?
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这重要吗？这实际上取决于你的具体情况。某些配置文件，特别是一些基于PHP的**内容管理系统**（**CMS**）的配置文件，可能包含明文密码，而CMS必须能够访问这些密码。在这种情况下，显然你需要限制对这些配置文件的访问。但是，其他那些不包含敏感密码的配置文件呢？
- en: For servers that only a chosen few administrators can access, this isn't such
    a big deal. But what about servers that normal, non-administrative users can access
    remotely via Secure Shell? If they don't have any `sudo` privileges, they can't
    edit any configuration files, but they can view them to see how your server has
    been configured. If they see how things are configured, would that help them in
    their efforts to compromise the system, should they choose to do so?
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 对于只有少数管理员能够访问的服务器，这并不是一个大问题。但如果是那些普通的、非管理员用户可以通过安全外壳（Secure Shell）远程访问的服务器呢？如果他们没有`sudo`权限，他们无法编辑任何配置文件，但他们可以查看配置文件，了解你的服务器是如何配置的。如果他们知道了配置情况，这会帮助他们在试图入侵系统时吗，如果他们决定这么做的话？
- en: I have to confess, this is something that I hadn't given much thought about
    until recently, when I became a Linux consultant for a company that specializes
    in the security of **Internet of Things** (**IoT**) devices. With IoT devices,
    you have a bit more to worry about than you do with normal servers. Normal servers
    are protected with a high degree of physical security, while IoT devices often
    have little to no physical security. You could go your entire IT career without
    actually seeing a server, unless you're one of the few who have been authorized
    to enter the inner sanctum of the server room. Conversely, IoT devices are generally
    out in the open.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须承认，直到最近，我才开始认真思考这个问题。当时，我成为了一家专注于**物联网**（**IoT**）设备安全的公司的Linux顾问。对于物联网设备，你需要担心的事情比普通服务器要多一些。普通服务器拥有高度的物理安全保护，而物联网设备通常几乎没有任何物理安全保护。你可能会在整个IT职业生涯中都没有亲眼见过一台服务器，除非你是那些被授权进入服务器机房内部的人之一。相反，物联网设备通常是暴露在外的。
- en: 'The IoT security company that I work with has a set of guidelines that help
    harden IoT devices against compromise and attack. One of them is to ensure that
    all the configuration files on the devices are set with the `600` permissions
    setting. This would mean that only the owner of the files – generally either the
    root user or a system account – can read them. However, there are a lot of configuration
    files, and you need an easy way to change the settings. You can do that with our
    trusty friend, the `find` utility. Here''s how you can do this:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我与一家物联网安全公司合作，该公司有一套指南，用于帮助加强物联网设备的防护，防止被攻击和泄露。其中一项要求是确保设备上的所有配置文件都设置为`600`权限。这意味着只有文件的所有者——通常是root用户或系统账户——可以读取这些文件。然而，配置文件非常多，你需要一个简便的方法来更改这些设置。你可以借助我们可信赖的伙伴——`find`工具来做到这一点。下面是操作方法：
- en: '[PRE50]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Here''s the breakdown:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是具体说明：
- en: '**sudo find / -iname ''*.conf''**: This does exactly what you would expect
    it to do. It performs a case-insensitive (`-iname`) search throughout the entire
    root filesystem (`/`) for all the files with the `.conf` filename extension. Other
    filename extensions you might look for include `.ini` and `.cfg`. Also, because
    `find` is inherently recursive, you don''t have to provide an option switch to
    get it to search through all the lower-level directories.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sudo find / -iname ''*.conf''**：这正是你所期望的操作。它会在整个根文件系统（`/`）中执行一个不区分大小写的（`-iname`）搜索，查找所有`.conf`扩展名的文件。你可能还会查找其他扩展名的文件，如`.ini`和`.cfg`。另外，由于`find`本身是递归的，你无需提供任何选项开关，就能让它搜索所有子目录。'
- en: '**-exec**: This is what performs the magic. It automatically executes the following
    command on each file that `find` finds, without prompting the user. If you''d
    rather answer *yes* or *no* for each file that `find` finds, use `-ok` instead
    of `-exec`.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-exec**：这就是执行魔法的部分。它会自动在`find`找到的每个文件上执行以下命令，无需提示用户。如果你更愿意对`find`找到的每个文件回答*yes*或*no*，可以使用`-ok`代替`-exec`。'
- en: '**chmod 600 {} \;**: `chmod 600` is the command that we want to perform. As
    `find` finds each file, its filename is placed within the pair of curly brackets
    (`{}`). Every `-exec` clause has to end with a semicolon. To prevent the Bash
    shell from interpreting the semicolon incorrectly, we have to escape it with a
    backslash.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**chmod 600 {} \;**：`chmod 600`是我们要执行的命令。当`find`找到每个文件时，文件名会被放置在一对大括号（`{}`）中。每个`-exec`语句都必须以分号结束。为了防止Bash
    shell错误地解释分号，我们需要用反斜杠对其进行转义。'
- en: 'If you decide to do this, test things thoroughly to ensure that you haven''t
    broken anything. Most things work just fine with their configuration files set
    to a `600` permissions setting, but some don''t. I''ve just performed this command
    on one of my virtual machines. Let''s see what happens when I try to ping an internet
    site:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定这么做，务必充分测试，确保没有破坏任何东西。大部分情况下，将配置文件设置为`600`权限是没问题的，但有些文件例外。我刚刚在我的一台虚拟机上执行了这个命令。让我们看看当我尝试ping一个互联网网站时会发生什么：
- en: '[PRE51]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'This looks bad, but the explanation is simple. It''s just that in order to
    have internet access, the machine has to be able to find a DNS server. DNS server
    information can be found in the `/etc/resolv.conf` file, from which I''ve just
    removed read permissions for others. Without the read permissions for others,
    only someone with root user privileges can access the internet. So, unless you
    want to restrict internet access to users with root or `sudo` privileges, you''ll
    need to change the `resolv.conf` permission setting back to `644`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很糟糕，但解释很简单。原因是为了能够访问互联网，机器必须能够找到DNS服务器。DNS服务器信息可以在`/etc/resolv.conf`文件中找到，而我刚刚已移除其他用户的读取权限。如果没有其他用户的读取权限，只有具有root用户权限的人才能访问互联网。所以，除非你想限制只有root或`sudo`权限的用户才能访问互联网，否则你需要将`resolv.conf`的权限设置恢复为`644`：
- en: '[PRE52]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Okay, let''s try this again:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们再试一次：
- en: '[PRE53]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'That looks much better. Now, let''s reboot the machine. When you do, you''ll
    get this output:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来好多了。现在，让我们重启机器。当你重启时，你将看到以下输出：
- en: '![](img/file58.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file58.png)'
- en: So, I also need to set the `/etc/locale.conf` file back to the `644` permission
    setting for the machine to boot properly. As I mentioned previously, be sure to
    test everything if you choose to set more restrictive permissions on your configuration
    files.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我还需要将`/etc/locale.conf`文件的权限设置恢复为`644`，以确保机器能够正常启动。正如我之前提到的，如果你选择对配置文件设置更严格的权限，务必先进行测试。
- en: As I've already stated, you might not always find it necessary to change the
    permissions of your configuration files from their default settings. But if you
    ever do find it necessary, you now know how to do it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前所说，你可能并不总是觉得有必要更改配置文件的默认权限设置。但如果你确实需要这样做，现在你已经知道如何操作了。
- en: '**Tip**'
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示**'
- en: ''
  id: totrans-211
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You definitely want to make friends with the `find` utility. It's useful both
    on the command line and within shell scripts, and it's extremely flexible. The
    man page for it is very well-written, and you can learn just about everything
    you need to know about `find` from it. To see it, just use the `man find` command.
  id: totrans-212
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你绝对想和`find`工具建立友谊。它在命令行和Shell脚本中都非常有用，而且极其灵活。它的man页面写得很好，你可以从中学到几乎所有关于`find`的知识。要查看它，只需使用`man
    find`命令。
- en: ''
  id: totrans-213
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Once you get used to `find`, you'll never want to use any of those fancy GUI-type
    search utilities again.
  id: totrans-214
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一旦你习惯了`find`，你就再也不想使用那些花哨的GUI类型的搜索工具了。
- en: Okay, I think that this wraps things up for this chapter.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我想这一章就到这里为止了。
- en: Summary
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we reviewed the basics of setting ownership and permissions
    for files and directories. Then, we covered what SUID and SGID can do for us when
    they're used properly, as well as the risk of setting them on our own executable
    files. After looking at the two extended file attributes that deal with file security,
    we wrapped things up with a handy, time-saving trick for removing world-readable
    permissions from your system configuration files.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们回顾了设置文件和目录所有权及权限的基础知识。然后，我们讨论了SUID和SGID在正确使用时的作用，以及将它们设置在我们自己的可执行文件上所带来的风险。接着，我们了解了两个与文件安全相关的扩展文件属性，最后介绍了一种便捷的省时技巧，用于删除系统配置文件中的全局可读权限。
- en: In the next chapter, we'll extend what we've learned here to more advanced file
    and directory access techniques. I'll see you there.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将扩展我们在这里学到的内容，探讨更高级的文件和目录访问技术。我们在那里见。
- en: Questions
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Which of the following partition mount options would prevent setting the SUID
    and SGID permissions on files?
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个分区挂载选项会阻止设置文件的SUID和SGID权限？
- en: A. `nosgid`
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: A. `nosgid`
- en: B. `noexec`
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: B. `noexec`
- en: C. `nosuid`
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: C. `nosuid`
- en: D. `nouser`
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: D. `nouser`
- en: Which of the following represents a file with read and write permissions for
    the user and the group, and read-only permissions for others?
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个选项表示一个对用户和组有读写权限、对其他人只有只读权限的文件？
- en: A. `775`
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: A. `775`
- en: B. `554`
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: B. `554`
- en: C. `660`
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: C. `660`
- en: D. `664`
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: D. `664`
- en: You want to change the ownership and group association of the `somefile.txt`
    file to Maggie. Which of the following commands would do that?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你想将`somefile.txt`文件的所有权和组关联更改为Maggie。以下哪个命令可以做到这一点？
- en: A. **sudo chown maggie somefile.txt**
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: A. **sudo chown maggie somefile.txt**
- en: B. **sudo chown :maggie somefile.txt**
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: B. **sudo chown :maggie somefile.txt**
- en: 'C. **sudo chown maggie: somefile.txt**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 'C. **sudo chown maggie: somefile.txt**'
- en: 'D. **sudo chown :maggie: somefile.txt**'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 'D. **sudo chown :maggie: somefile.txt**'
- en: Which of the following is the numerical value for the SGID permission?
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是SGID权限的数字值？
- en: A. `6000`
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: A. `6000`
- en: B. `2000`
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: B. `2000`
- en: C. `4000`
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: C. `4000`
- en: D. `1000`
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: D. `1000`
- en: Which command would you use to view the extended attributes of a file?
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令可以用来查看文件的扩展属性？
- en: A. `lsattr`
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: A. `lsattr`
- en: B. `ls -a`
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: B. `ls -a`
- en: C. `ls -l`
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: C. `ls -l`
- en: D. `chattr`
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: D. `chattr`
- en: Which of the following commands would search through the entire filesystem for
    regular files that have either the SUID or SGID permission set?
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令会在整个文件系统中搜索具有SUID或SGID权限设置的常规文件？
- en: A. **sudo find / -type f -perm \6000**
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: A. **sudo find / -type f -perm \6000**
- en: B. **sudo find / \( -perm -4000 -o -perm -2000 \)**
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: B. **sudo find / \( -perm -4000 -o -perm -2000 \)**
- en: C. **sudo find / -type f -perm -6000**
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: C. **sudo find / -type f -perm -6000**
- en: D. **sudo find / -type r -perm \6000**
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: D. **sudo find / -type r -perm \6000**
- en: Which of the following statements is true?
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种说法是正确的？
- en: A. Using the symbolic method to set permissions is the best method for all cases.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: A. 使用符号方法设置权限是所有情况中最好的方法。
- en: B. Using the symbolic method to set permissions is the best method to use in
    shell scripting.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: B. 使用符号方法设置权限是Shell脚本中最好的方法。
- en: C. Using the numeric method to set permissions is the best method to use in
    shell scripting.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: C. 使用数字方法设置权限是在Shell脚本中最好的方法。
- en: D. It doesn't matter which method you use to set permissions.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: D. 使用哪种方法设置权限并不重要。
- en: Which of the following commands would set the SUID permission on a file that
    has read/write/execute permissions for the user and group, and read/execute permissions
    for others?
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令会在一个用户和组拥有读/写/执行权限，其他人拥有读/执行权限的文件上设置SUID权限？
- en: A. **sudo chmod 2775 somefile**
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: A. **sudo chmod 2775 somefile**
- en: B. **sudo chown 2775 somefile**
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: B. **sudo chown 2775 somefile**
- en: C. **sudo chmod 1775 somefile**
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: C. **sudo chmod 1775 somefile**
- en: D. **sudo chmod 4775 somefile**
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: D. **sudo chmod 4775 somefile**
- en: Which of the following functions is served by setting the SUID permission on
    an executable file?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个功能是通过在可执行文件上设置SUID权限来实现的？
- en: A. It allows any user to use that file.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: A. 它允许任何用户使用该文件。
- en: B. It prevents accidental erasure of the file.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: B. 它防止文件被意外删除。
- en: C. It allows "others" to have the same privileges as the "user" of the file.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: C. 它允许“其他人”拥有与文件“用户”相同的权限。
- en: D. It allows "others" to have the same privileges as the group that's associated
    with the file.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: D. 它允许“其他人”拥有与与文件关联的组相同的权限。
- en: Why shouldn't users set the SUID or SGID permissions on their own regular files?
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么用户不应该在自己的常规文件上设置SUID或SGID权限？
- en: A. It unnecessarily uses more hard drive space.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: A. 它不必要地占用了更多硬盘空间。
- en: B. It could prevent someone from deleting the files if needed.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: B. 它可以防止在需要时删除文件。
- en: C. It could allow someone to alter the files.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: C. 它可能允许某人更改文件。
- en: D. It could allow an intruder to compromise the system.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: D. 这可能允许入侵者破坏系统。
- en: Which of the following `find` command options allows you to automatically perform
    a command on each file that `find` finds, without being prompted?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个`find`命令选项允许你在`find`找到的每个文件上自动执行命令，而无需提示？
- en: A. `-exec`
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: A. `-exec`
- en: B. `-ok`
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: B. `-ok`
- en: C. `-xargs`
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: C. `-xargs`
- en: D. `-do`
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: D. `-do`
- en: 'True/False: For the best security, always use the `600` permission setting
    for every `.conf` file on the system.'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断对错：为了获得最佳安全性，系统上的每个`.conf`文件都应该始终使用`600`权限设置。
- en: A. True
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: A. 正确
- en: B. False
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: B. 错误
- en: Which of the following is a true statement?
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是正确的陈述？
- en: A. Prevent users from setting SUID on files by mounting the `/` partition with
    the `nosuid` option.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: A. 通过使用`nosuid`选项挂载`/`分区，防止用户在文件上设置SUID。
- en: B. You must have the SUID permission set on certain system files for the operating
    system to function properly.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: B. 对某些系统文件必须设置SUID权限，操作系统才能正常工作。
- en: C. Executable files must never have the SUID permissions set.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: C. 可执行文件绝不应设置SUID权限。
- en: D. Executable files should always have the SUID permission set.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: D. 可执行文件应始终设置SUID权限。
- en: Which two of the following are security concerns for configuration files?
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪两项是配置文件的安全问题？
- en: A. With a default configuration, any normal user with command-line access can
    edit configuration files.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: A. 默认配置下，任何具有命令行访问权限的普通用户都可以编辑配置文件。
- en: B. Certain configuration files may contain sensitive information.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: B. 某些配置文件可能包含敏感信息。
- en: C. With a default configuration, any normal user with command-line access can
    view configuration files.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: C. 默认配置下，任何具有命令行访问权限的普通用户都可以查看配置文件。
- en: D. The configuration files on servers require more protection than the configuration
    files on IoT devices.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: D. 服务器上的配置文件需要比物联网设备上的配置文件更多的保护。
- en: Further reading
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'How to find files with SUID and SGID permissions in Linux: [https://www.tecmint.com/how-to-find-files-with-suid-and-sgid-permissions-in-linux/](https://www.tecmint.com/how-to-find-files-with-suid-and-sgid-permissions-in-linux/)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如何在Linux中查找具有SUID和SGID权限的文件: [https://www.tecmint.com/how-to-find-files-with-suid-and-sgid-permissions-in-linux/](https://www.tecmint.com/how-to-find-files-with-suid-and-sgid-permissions-in-linux/)'
- en: 'The Linux `find` command: [https://youtu.be/tCemsQ_ZjQ0](https://youtu.be/tCemsQ_ZjQ0)'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux `find`命令: [https://youtu.be/tCemsQ_ZjQ0](https://youtu.be/tCemsQ_ZjQ0)'
- en: 'Linux and Unix file permissions: [https://youtu.be/K9FEz20Zhmc](https://youtu.be/K9FEz20Zhmc)'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux和Unix文件权限: [https://youtu.be/K9FEz20Zhmc](https://youtu.be/K9FEz20Zhmc)'
- en: 'Linux file permissions: [https://www.linux.com/tutorials/understanding-linux-file-permissions/](https://www.linux.com/tutorials/understanding-linux-file-permissions/)'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux文件权限: [https://www.linux.com/tutorials/understanding-linux-file-permissions/](https://www.linux.com/tutorials/understanding-linux-file-permissions/)'
- en: '25 simple examples of the Linux `find` command: [https://www.binarytides.com/linux-find-command-examples/](https://www.binarytides.com/linux-find-command-examples/)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '25个Linux `find`命令的简单示例: [https://www.binarytides.com/linux-find-command-examples/](https://www.binarytides.com/linux-find-command-examples/)'
- en: '35 practical examples of the Linux `find` command: [https://www.tecmint.com/35-practical-examples-of-linux-find-command/](https://www.tecmint.com/35-practical-examples-of-linux-find-command/)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35个Linux `find`命令的实用示例：[https://www.tecmint.com/35-practical-examples-of-linux-find-command/](https://www.tecmint.com/35-practical-examples-of-linux-find-command/)
- en: Answers
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 答案
- en: C
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C
- en: D
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: D
- en: C
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C
- en: B
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: B
- en: A
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: A
- en: A
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: A
- en: C
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C
- en: D
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: D
- en: C
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C
- en: D
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: D
- en: A
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: A
- en: B
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: B
- en: B
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: B
- en: B, C
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: B, C

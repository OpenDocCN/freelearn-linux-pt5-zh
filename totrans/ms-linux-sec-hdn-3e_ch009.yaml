- en: 'Section 2: Mastering File and Directory Access Control (DAC)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section will talk about protecting sensitive files and directories by setting
    proper permissions and ownership, and by using **Extended Attributes** (**xattr**).
    Avoid security related problems with **Set User ID** (**SUID**) and **Set Group
    ID** (**SGID**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The section contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 8*, *Mastering Discretionary Access Control*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chapter 9*, *Access Control Lists and Shared Directory Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8 Mastering Discretionary Access Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Join our book community on Discord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file57.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Discretionary Access Control** (**DAC**) really just means that each user
    has the ability to control who can get into their stuff. If I wanted to open my
    home directory so that every other user on the system can get into it, I could
    do that. Having done so, I could then control who can access each specific file.
    In the next chapter, we''ll use our DAC skills to manage shared directories, where
    members of a group might need different levels of access to the files within.'
  prefs: []
  type: TYPE_NORMAL
- en: At this point in your Linux career, you likely know the basics of controlling
    access by setting file and directory permissions. In this chapter, we'll review
    the basics, and then we'll look at some more advanced concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `chown` to change the ownership of files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `chmod` to set permissions on files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What SUID and SGID settings can do for us on regular files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security implications of having the SUID and SGID permissions set on files
    that don't need them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use extended file attributes to protect sensitive files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing system configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using chown to change ownership of files and directories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Controlling access to files and directories really just boils down to ensuring
    that the proper users can access their own files and directories and that each
    file and directory has permissions set in such a way that only authorized users
    can access them. The `chown` utility covers the first part of this equation.
  prefs: []
  type: TYPE_NORMAL
- en: One unique thing about `chown` is that you must have `sudo` privileges to use
    it, even if you're working with your own files in your own directory. You can
    use it to change the user of a file or directory, the group that's associated
    with a file or directory, or both at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s say that you own the `perm_demo.txt` file and that you want to
    change both the user and group association to that of another user. In this case,
    I''ll change the file ownership from me to `maggie`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The first `maggie` in `maggie:maggie` is the user to whom you want to grant
    ownership. The second `maggie`, after the colon, represents the group that you
    want the file to be associated with. Since I was changing both the user and the
    group to `maggie`, I could have left off the second `maggie`, with the first `maggie`
    followed by a colon, and I would have achieved the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To just change the group association without changing the user, just list the
    group name, preceded by a colon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to just change the user without changing the group, list the username
    without the trailing colon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands work the same way on a directory as they do on a file. However,
    if you also want to change the ownership and/or the group association of the contents
    of a directory, while also making the change on the directory itself, use the
    `-R` option, which stands for *recursive*. In this case, I just want to change
    the group for the `perm_demo_dir` directory to `accounting`. Let''s see what we
    have to begin with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s run the command and look at the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: That's all there is to `chown`. Next, letâ€™s change some permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Using chmod to set permissions on files and directories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On Unix and Linux systems, you would use the `chmod` utility to set permissions
    values on files and directories. You can set permissions for the user of the file
    or directory, the group that''s associated with the file or directory, and more.
    The three basic permissions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r**: This indicates a read permission.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**w**: This indicates a write permission.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**x**: This is the executable permission. You can apply it to any type of program
    file, or to directories. If you apply an executable permission to a directory,
    authorized people will be able to `cd` into it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you perform `ls -l` on a file, you''ll see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The first character of this line indicates the type of file. In this case,
    we can see a dash, which indicates a regular file. (A regular file is pretty much
    every type of file that a normal user would be able to access in his or her daily
    routine.) The next three characters, `rw-`, indicate that the file has read and
    write permissions for the user, which is the person who owns the file. Then, we
    can see the `rw-` permissions for the group and the `r--` permissions for others.
    A program file would also have the executable permissions set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see that the `xargs` program file has executable permissions set
    for everybody.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways that you can use `chmod` to change permissions settings:'
  prefs: []
  type: TYPE_NORMAL
- en: The symbolic method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The numerical method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll cover these methods next.
  prefs: []
  type: TYPE_NORMAL
- en: Setting permissions with the symbolic method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Whenever you create a file as a normal user, by default, it will have read/write
    permissions for the user and group, and read permission for others.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The first three commands add the executable permission for the user, the group,
    and others. The fourth command adds executable permissions for both the user and
    the group, while the last command adds executable permissions for everybody (`a`
    for all). You can also remove the executable permissions by replacing `+` with
    `-`. Finally, you can also add or remove the read or write permissions, as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: While this method can be handy at times, it also has a bit of a flaw; that is,
    it can only add permissions to what's already there, or remove permissions from
    what's already there. If you need to ensure that all of the permissions for a
    particular file get set to a certain value, the symbolic method can get a bit
    unwieldy. And for shell scripting, forget about it. In a shell script, you'd need
    to add all kinds of extra code just to determine which permissions have already
    been set. The numerical method can vastly simplify things for us.
  prefs: []
  type: TYPE_NORMAL
- en: Setting permissions with the numerical method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'With the numerical method, you''ll use an octal value to represent the permissions
    settings on a file or directory. For the `r`, `w`, and `x` permissions, you assign
    the numerical values `4`, `2`, and `1`, respectively. You would do this for the
    user, group, and others positions, and then add them all up to get the permissions
    value for the file or directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **User** | **Group** | **Others** |'
  prefs: []
  type: TYPE_TB
- en: '| rwx | rwx | rwx |'
  prefs: []
  type: TYPE_TB
- en: '| 421 | 421 | 421 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | 7 | 7 |'
  prefs: []
  type: TYPE_TB
- en: 'So, if you have all the permissions set for everybody, the file or directory
    will have a value of `777`. If I were to create a shell script file, by default,
    it would have the standard `664` permissions, meaning read and write for the user
    and group, and read-only for others:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Tip**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you create a file with root privileges, either with `sudo` or from the root
    user command prompt, you'll see that the default permissions setting is the more
    restrictive `644`.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let''s say that I want to make this script executable, but I want to be the
    only person in the whole world who can do anything with it. To do this, I could
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: With this one simple command, I've removed all permissions from the group and
    from others, and set the executable permission for myself. This is the sort of
    thing that makes the numerical method so handy for writing shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve been working with the numerical method for a while, looking at
    a file and figuring out its numerical permissions value will become second nature.
    In the meantime, you can use `stat` with the `-c %a` option to show you the values.
    This can be done like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to view the numerical permissions of all the files at once, do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see the wildcard (`*`) at the end of the command, indicating
    that you want to view the settings for all the files. `%n` indicates that you
    want to view the filenames, along with the permissions settings. Since we''re
    using two `-c` options, we have to enclose both of the options within a pair of
    single quotes. The only slight catch here is that this output doesn''t show which
    of these items are files, and which are directories. However, since directories
    require executable permissions so that people can `cd` into them, we can guess
    that `dropbear` is probably a directory. To be sure though, just use `ls -l`,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's move on to a couple of very special permissions settings.
  prefs: []
  type: TYPE_NORMAL
- en: Using SUID and SGID on regular files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a regular file has its SUID permission set, whoever accesses the file will
    have the same privileges as the user of the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demo this, let''s say that Maggie, a regular, unprivileged user, wants to
    change her own password. Since it''s her own password, she would just use the
    one-word `passwd` command, without using `sudo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To change a password, a person has to make changes to the `/etc/shadow` file.
    On my CentOS and AlmaLinux machines, the shadow file''s permissions look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'On an Ubuntu machine, they look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Either way, the permissions settings don''t allow Maggie to directly modify
    the shadow file. However, by changing her password, she is able to modify the
    shadow file. So, what''s going on? To answer this, let''s go into the `/usr/bin/`
    directory and look at the permissions settings for the `passwd` executable file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For the user permissions, you will see `rws` instead of `rwx`. The `s` indicates
    that this file has the SUID permission set. Since the file belongs to the root
    user, anyone who accesses this file has the same privileges as the root user.
    The fact that we see a lowercase `s` means that the file also has the executable
    permission set for the root user. Since the root user is allowed to modify the
    shadow file, whoever uses this `passwd` utility to change his or her own password
    can also modify the shadow file.
  prefs: []
  type: TYPE_NORMAL
- en: 'A file with the SGID permission set has an `s` in the executable position for
    the group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `write` utility, which is associated with the `tty` group, allows users
    to send messages to other users via their command-line consoles. Having `tty`
    group privileges allows users to do this.
  prefs: []
  type: TYPE_NORMAL
- en: The security implications of the SUID and SGID permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As useful as it may be to have SUID or SGID permissions on your executable files,
    we should consider it as just a necessary evil. While having SUID or SGID set
    on certain operating system files is essential for the operation of your Linux
    system, it becomes a security risk when users set SUID or SGID on other files.
    The problem is that, if intruders find an executable file that belongs to the
    root user and has the SUID bit set, they can use that to exploit the system. Before
    they leave, they might leave behind their own root-owned file with an SUID set,
    which will allow them to easily gain entry to the system the next time they encounter
    it. If the intruder's SUID file isn't found, the intruder will still have access,
    even if the original problem has been fixed.
  prefs: []
  type: TYPE_NORMAL
- en: The numerical value for SUID is `4000`, and for SGID, it's `2000`. To set SUID
    on a file, you'd just add `4000` to whichever permissions value that you would
    set otherwise. For example, if you have a file with a permissions value of `755`,
    you'd set SUID by changing the permissions value to `4755`. (This would give you
    read/write/execute access for the user, read/execute for the group, and read/execute
    for others, with the SUID bit added on.)
  prefs: []
  type: TYPE_NORMAL
- en: Finding spurious SUID or SGID files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'One quick security trick is to run the `find` command to take inventory of
    the SUID and SGID files on your system. You can also save the output to a text
    file so that you can verify whether anything has been added since you ran the
    command. Your command will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '**/**: We''re searching through the entire filesystem. Since some directories
    are only accessible to someone with root privileges, we need to use `sudo`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-type f**: This means that we''re searching for regular files, which includes
    executable program files and shell scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-perm 4000**: We''re searching for files with the `4000`, or SUID, permission
    bit set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-o**: The or operator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-perm 2000**: We''re searching for files with the `2000`, or SGID, permission
    bit set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**>**: Here, we''re redirecting the output into the `suid_sgid_files.txt` text
    file with the `>` operator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that the two `-perm` items need to be combined into a term that''s enclosed
    in a pair of parentheses. To prevent the Bash shell from interpreting the parenthesis
    characters incorrectly, we need to escape each one with a backslash. We also need
    to place a blank space between the first parenthesis character and the first `-perm`,
    and another between `2000` and the last backslash. Also, the **and** operator
    between `-type f` and the `-perm` term is understood to be there, even without
    inserting `-a`. The text file that you''ll create should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, if you want to see details about which files are SUID and which
    are SGID, you can add the `-ls` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, you''re now saying, *Hey, Donnie, this is just too much to type*. And,
    I hear you. Fortunately, there''s a shorthand equivalent of this. Since `4000
    + 2000 = 6000`, we can create a single expression that will match either the SUID
    (`4000`) or the SGID (`2000`) value, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `/6000` in this command means that we're looking for either the `4000` or
    the `2000` value. For our purposes, these are the only two addends that can combine
    to make `6000`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In some older references, you might see `+6000` instead of `/6000`. Using the
    `+` sign for this has been deprecated, and no longer works.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now, let''s say that Maggie, for whatever reason, decides to set the SUID bit
    on a shell script file in her home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `find` command again, saving the output to a different text file. Then,
    perform a `diff` operation on the two files to see what changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The only difference is the addition of Maggie's shell script file.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab â€“ searching for SUID and SGID files
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'You can perform this lab on either of your virtual machines. You''ll save the
    output of the `find` command to a text file. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search through the entire filesystem for all the files that have either SUID
    or SGID set before saving the output to a text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Log into any other user account that you have on the system and create a dummy
    shell script file. Then, set the SUID permission on that file and log back out
    and into your own user account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `find` command again, saving the output to a different text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'View the difference between the two files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: That's the end of the lab â€“ congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: Preventing SUID and SGID usage on a partition
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As we mentioned previously, you don''t want users to assign SUID and SGID to
    files that they create, because of the security risk that it presents. You can
    prevent SUID and SGID usage on a partition by mounting it with the `nosuid` option.
    So, the `/etc/fstab` file entry for the `luks` partition that I created in the
    previous chapter would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Different Linux distributions have different ways of setting up default partition
    schemes during an operating system's installation. Mostly, the default way of
    doing business is to have all the directories, except for the `/boot/` directory,
    under the `/` partition. If you were to set up a custom partition scheme instead,
    you could have the `/home/` directory in its own partition, where you could set
    the `nosuid` option. Keep in mind that you don't want to set `nosuid` for the
    `/` partition; otherwise, you'll have an operating system that doesn't function
    properly.
  prefs: []
  type: TYPE_NORMAL
- en: Using extended file attributes to protect sensitive files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extended file attributes are another tool that can help you protect sensitive
    files. They won't keep intruders from accessing your files, but they can help
    you prevent sensitive files from being altered or deleted. There are quite a few
    extended attributes, but we only need to look at the ones that deal with file
    security.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s use the `lsattr` command to see which extended attributes we
    already have set. On a CentOS or AlmaLinux machine, your output would look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: So far, I don't have any extended attributes set on any of my files.
  prefs: []
  type: TYPE_NORMAL
- en: 'On an Ubuntu machine, the output would look more like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We won't worry about the `e` attribute because that only means that the partition
    is formatted with the **ext4** filesystem. CentOS and AlmaLinux donâ€™t have that
    attribute set because their partitions are formatted with the **XFS** filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two attributes that we''ll look at in this section are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**: You can append text to the end of a file that has this attribute, but
    you can''t overwrite it. Only someone with proper `sudo` privileges can set or
    delete this attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**i**: This makes a file immutable, and only someone with proper `sudo` privileges
    can set or delete it. Files with this attribute can''t be deleted or changed in
    any way. It''s also not possible to create hard links to files that have this
    attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To set or delete attributes, you need to use the `chattr` command. You can set
    more than one attribute on a file, but only when it makes sense. For example,
    you wouldn't set both the `a` and the `i` attributes on the same file because
    the `i` will override the `a`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating the `perm_demo.txt` file, which contains the following
    text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's go ahead and set the attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the a attribute
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now, I''ll set the `a` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You use `+` to add an attribute and `-` to delete it. Also, it doesn't matter
    that the file belongs to me and is in my own home directory. I still need `sudo`
    privileges to add or delete this attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see what happens when I try to overwrite this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: With or without `sudo` privileges, I can't overwrite it. So, how about if I
    try to append something to it?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s no error message this time. Let''s see what''s in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to not being able to overwrite the file, I''m also unable to delete
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the `a` works. However, I''ve decided that I no longer want this attribute
    to be set, so I''ll remove it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Setting the i attribute
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When a file has the `i` attribute set, the only thing you can do with it is
    view its contents. You can''t change it, move it, delete it, rename it, or create
    hard links to it. Let''s test this with the `perm_demo.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now for the fun part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few more commands that I could try, but you get the idea. To remove
    the `i` attribute, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Hands-on lab â€“ setting security-related extended file attributes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'For this lab, you''ll need to create a `perm_demo.txt` file with some text
    of your choice. You''ll set the `i` and `a` attributes and view the results. Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Using your preferred text editor, create the `perm_demo.txt` file with a line
    of text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View the extended attributes of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `a` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Try to overwrite and delete the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, append something to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the `a` attribute and add the `i` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Repeat *Step 4*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Additionally, try to change the filename and create a hard link to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, try to create a symbolic link to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `i` attribute won't let you create hard links to a file, but it
    will let you create symbolic links.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That's the end of the lab â€“ congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: Securing system configuration files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you look at the configuration files for any given Linux distro, you''ll
    see that most of them belong to either the root user or to a specified system
    user. You''ll also see that most of these files have read and write privileges
    for their respective owners, and read privileges for everyone else. This means
    that everybody and his brother can read most Linux system configuration files.
    Take, for example, this Apache web server configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: With that `r` in the "others" position, everybody who logs in, regardless of
    their privilege level, can view the Apache configuration.
  prefs: []
  type: TYPE_NORMAL
- en: So, is this a big deal? It really depends upon your circumstances. Some configuration
    files, especially ones for certain PHP-based **Content Management Systems** (**CMS**)
    on a web server, can contain plain text passwords that the CMS must be able to
    access. In these cases, it's quite obvious that you need to restrict access to
    these configuration files. But what about other configuration files that don't
    contain sensitive passwords?
  prefs: []
  type: TYPE_NORMAL
- en: For servers that only a chosen few administrators can access, this isn't such
    a big deal. But what about servers that normal, non-administrative users can access
    remotely via Secure Shell? If they don't have any `sudo` privileges, they can't
    edit any configuration files, but they can view them to see how your server has
    been configured. If they see how things are configured, would that help them in
    their efforts to compromise the system, should they choose to do so?
  prefs: []
  type: TYPE_NORMAL
- en: I have to confess, this is something that I hadn't given much thought about
    until recently, when I became a Linux consultant for a company that specializes
    in the security of **Internet of Things** (**IoT**) devices. With IoT devices,
    you have a bit more to worry about than you do with normal servers. Normal servers
    are protected with a high degree of physical security, while IoT devices often
    have little to no physical security. You could go your entire IT career without
    actually seeing a server, unless you're one of the few who have been authorized
    to enter the inner sanctum of the server room. Conversely, IoT devices are generally
    out in the open.
  prefs: []
  type: TYPE_NORMAL
- en: 'The IoT security company that I work with has a set of guidelines that help
    harden IoT devices against compromise and attack. One of them is to ensure that
    all the configuration files on the devices are set with the `600` permissions
    setting. This would mean that only the owner of the files â€“ generally either the
    root user or a system account â€“ can read them. However, there are a lot of configuration
    files, and you need an easy way to change the settings. You can do that with our
    trusty friend, the `find` utility. Here''s how you can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo find / -iname ''*.conf''**: This does exactly what you would expect
    it to do. It performs a case-insensitive (`-iname`) search throughout the entire
    root filesystem (`/`) for all the files with the `.conf` filename extension. Other
    filename extensions you might look for include `.ini` and `.cfg`. Also, because
    `find` is inherently recursive, you don''t have to provide an option switch to
    get it to search through all the lower-level directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-exec**: This is what performs the magic. It automatically executes the following
    command on each file that `find` finds, without prompting the user. If you''d
    rather answer *yes* or *no* for each file that `find` finds, use `-ok` instead
    of `-exec`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chmod 600 {} \;**: `chmod 600` is the command that we want to perform. As
    `find` finds each file, its filename is placed within the pair of curly brackets
    (`{}`). Every `-exec` clause has to end with a semicolon. To prevent the Bash
    shell from interpreting the semicolon incorrectly, we have to escape it with a
    backslash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you decide to do this, test things thoroughly to ensure that you haven''t
    broken anything. Most things work just fine with their configuration files set
    to a `600` permissions setting, but some don''t. I''ve just performed this command
    on one of my virtual machines. Let''s see what happens when I try to ping an internet
    site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'This looks bad, but the explanation is simple. It''s just that in order to
    have internet access, the machine has to be able to find a DNS server. DNS server
    information can be found in the `/etc/resolv.conf` file, from which I''ve just
    removed read permissions for others. Without the read permissions for others,
    only someone with root user privileges can access the internet. So, unless you
    want to restrict internet access to users with root or `sudo` privileges, you''ll
    need to change the `resolv.conf` permission setting back to `644`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, let''s try this again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'That looks much better. Now, let''s reboot the machine. When you do, you''ll
    get this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file58.png)'
  prefs: []
  type: TYPE_IMG
- en: So, I also need to set the `/etc/locale.conf` file back to the `644` permission
    setting for the machine to boot properly. As I mentioned previously, be sure to
    test everything if you choose to set more restrictive permissions on your configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: As I've already stated, you might not always find it necessary to change the
    permissions of your configuration files from their default settings. But if you
    ever do find it necessary, you now know how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You definitely want to make friends with the `find` utility. It's useful both
    on the command line and within shell scripts, and it's extremely flexible. The
    man page for it is very well-written, and you can learn just about everything
    you need to know about `find` from it. To see it, just use the `man find` command.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Once you get used to `find`, you'll never want to use any of those fancy GUI-type
    search utilities again.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Okay, I think that this wraps things up for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we reviewed the basics of setting ownership and permissions
    for files and directories. Then, we covered what SUID and SGID can do for us when
    they're used properly, as well as the risk of setting them on our own executable
    files. After looking at the two extended file attributes that deal with file security,
    we wrapped things up with a handy, time-saving trick for removing world-readable
    permissions from your system configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll extend what we've learned here to more advanced file
    and directory access techniques. I'll see you there.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which of the following partition mount options would prevent setting the SUID
    and SGID permissions on files?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `nosgid`
  prefs: []
  type: TYPE_NORMAL
- en: B. `noexec`
  prefs: []
  type: TYPE_NORMAL
- en: C. `nosuid`
  prefs: []
  type: TYPE_NORMAL
- en: D. `nouser`
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following represents a file with read and write permissions for
    the user and the group, and read-only permissions for others?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `775`
  prefs: []
  type: TYPE_NORMAL
- en: B. `554`
  prefs: []
  type: TYPE_NORMAL
- en: C. `660`
  prefs: []
  type: TYPE_NORMAL
- en: D. `664`
  prefs: []
  type: TYPE_NORMAL
- en: You want to change the ownership and group association of the `somefile.txt`
    file to Maggie. Which of the following commands would do that?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. **sudo chown maggie somefile.txt**
  prefs: []
  type: TYPE_NORMAL
- en: B. **sudo chown :maggie somefile.txt**
  prefs: []
  type: TYPE_NORMAL
- en: 'C. **sudo chown maggie: somefile.txt**'
  prefs: []
  type: TYPE_NORMAL
- en: 'D. **sudo chown :maggie: somefile.txt**'
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following is the numerical value for the SGID permission?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `6000`
  prefs: []
  type: TYPE_NORMAL
- en: B. `2000`
  prefs: []
  type: TYPE_NORMAL
- en: C. `4000`
  prefs: []
  type: TYPE_NORMAL
- en: D. `1000`
  prefs: []
  type: TYPE_NORMAL
- en: Which command would you use to view the extended attributes of a file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `lsattr`
  prefs: []
  type: TYPE_NORMAL
- en: B. `ls -a`
  prefs: []
  type: TYPE_NORMAL
- en: C. `ls -l`
  prefs: []
  type: TYPE_NORMAL
- en: D. `chattr`
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following commands would search through the entire filesystem for
    regular files that have either the SUID or SGID permission set?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. **sudo find / -type f -perm \6000**
  prefs: []
  type: TYPE_NORMAL
- en: B. **sudo find / \( -perm -4000 -o -perm -2000 \)**
  prefs: []
  type: TYPE_NORMAL
- en: C. **sudo find / -type f -perm -6000**
  prefs: []
  type: TYPE_NORMAL
- en: D. **sudo find / -type r -perm \6000**
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following statements is true?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. Using the symbolic method to set permissions is the best method for all cases.
  prefs: []
  type: TYPE_NORMAL
- en: B. Using the symbolic method to set permissions is the best method to use in
    shell scripting.
  prefs: []
  type: TYPE_NORMAL
- en: C. Using the numeric method to set permissions is the best method to use in
    shell scripting.
  prefs: []
  type: TYPE_NORMAL
- en: D. It doesn't matter which method you use to set permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following commands would set the SUID permission on a file that
    has read/write/execute permissions for the user and group, and read/execute permissions
    for others?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. **sudo chmod 2775 somefile**
  prefs: []
  type: TYPE_NORMAL
- en: B. **sudo chown 2775 somefile**
  prefs: []
  type: TYPE_NORMAL
- en: C. **sudo chmod 1775 somefile**
  prefs: []
  type: TYPE_NORMAL
- en: D. **sudo chmod 4775 somefile**
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following functions is served by setting the SUID permission on
    an executable file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. It allows any user to use that file.
  prefs: []
  type: TYPE_NORMAL
- en: B. It prevents accidental erasure of the file.
  prefs: []
  type: TYPE_NORMAL
- en: C. It allows "others" to have the same privileges as the "user" of the file.
  prefs: []
  type: TYPE_NORMAL
- en: D. It allows "others" to have the same privileges as the group that's associated
    with the file.
  prefs: []
  type: TYPE_NORMAL
- en: Why shouldn't users set the SUID or SGID permissions on their own regular files?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. It unnecessarily uses more hard drive space.
  prefs: []
  type: TYPE_NORMAL
- en: B. It could prevent someone from deleting the files if needed.
  prefs: []
  type: TYPE_NORMAL
- en: C. It could allow someone to alter the files.
  prefs: []
  type: TYPE_NORMAL
- en: D. It could allow an intruder to compromise the system.
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following `find` command options allows you to automatically perform
    a command on each file that `find` finds, without being prompted?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-exec`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-ok`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-xargs`
  prefs: []
  type: TYPE_NORMAL
- en: D. `-do`
  prefs: []
  type: TYPE_NORMAL
- en: 'True/False: For the best security, always use the `600` permission setting
    for every `.conf` file on the system.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. True
  prefs: []
  type: TYPE_NORMAL
- en: B. False
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following is a true statement?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. Prevent users from setting SUID on files by mounting the `/` partition with
    the `nosuid` option.
  prefs: []
  type: TYPE_NORMAL
- en: B. You must have the SUID permission set on certain system files for the operating
    system to function properly.
  prefs: []
  type: TYPE_NORMAL
- en: C. Executable files must never have the SUID permissions set.
  prefs: []
  type: TYPE_NORMAL
- en: D. Executable files should always have the SUID permission set.
  prefs: []
  type: TYPE_NORMAL
- en: Which two of the following are security concerns for configuration files?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. With a default configuration, any normal user with command-line access can
    edit configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: B. Certain configuration files may contain sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: C. With a default configuration, any normal user with command-line access can
    view configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: D. The configuration files on servers require more protection than the configuration
    files on IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How to find files with SUID and SGID permissions in Linux: [https://www.tecmint.com/how-to-find-files-with-suid-and-sgid-permissions-in-linux/](https://www.tecmint.com/how-to-find-files-with-suid-and-sgid-permissions-in-linux/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Linux `find` command: [https://youtu.be/tCemsQ_ZjQ0](https://youtu.be/tCemsQ_ZjQ0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux and Unix file permissions: [https://youtu.be/K9FEz20Zhmc](https://youtu.be/K9FEz20Zhmc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux file permissions: [https://www.linux.com/tutorials/understanding-linux-file-permissions/](https://www.linux.com/tutorials/understanding-linux-file-permissions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '25 simple examples of the Linux `find` command: [https://www.binarytides.com/linux-find-command-examples/](https://www.binarytides.com/linux-find-command-examples/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '35 practical examples of the Linux `find` command: [https://www.tecmint.com/35-practical-examples-of-linux-find-command/](https://www.tecmint.com/35-practical-examples-of-linux-find-command/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B, C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

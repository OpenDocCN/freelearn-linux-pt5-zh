- en: Chapter 1. IPS and Boot Environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Determining the current package publisher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing and collecting the information and dependencies of a package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a package, verifying its content, and fixing the package corruption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the IPS history and freezing and uninstalling packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering the IPS Package Manager interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating, activating, and destroying a boot environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing and renaming a boot environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring an IPS local repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a secondary IPS local repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing packages into a repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding big applications into a repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own package and publishing it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing an IPS publisher on Solaris 11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pinning publishers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the URI and enabling and disabling a publisher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a mirror repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a repository and changing the search order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing and creating a boot environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mounting, unmounting, installing, and uninstalling a package in an inactive
    boot environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating a boot environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a boot environment from an existing one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you already know, Oracle Solaris 11 has undergone many changes and now provides
    a framework to manage packages named **Image Packaging System** (**IPS**). This
    new framework makes an administrator's life easier when he or she needs to add,
    remove, collect, and administer any software packages. By default, Oracle offers
    a repository (a large group of packages) on the Web at [http://pkg.oracle.com/solaris/release/](http://pkg.oracle.com/solaris/release/),
    and this is the default Oracle Solaris 11 repository. Using this repository, we
    will be able to install any package from the Internet, and as we are going to
    learn soon, it's feasible to create a local repository (like the default one)
    on our own Oracle Solaris 11 installation to improve the security and performance
    of our environment. Moreover, we can configure Oracle Solaris 11 to hold more
    than one repository as the source of the packages.
  prefs: []
  type: TYPE_NORMAL
- en: Going beyond IPS, Oracle Solaris 11 uses **boot environments** (**BEs**) to
    assist us in making an Oracle Solaris 11 upgrade without any risk to current data,
    because the update process creates a new BE before proceeding to the package update
    process. This new BE will be shown in the next reboot on the GRUB menu, and from
    there, we will be able to choose either the new BE (updated Solaris) or the old
    one. BEs will come in handy in other areas when handling the Oracle Solaris 11
    administration.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the current package publisher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When administering IPS on a Solaris 11 system, the first thing we need to do
    is find out the current package publisher because initially, it will be the source
    that our system will install or update a package from.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we need to log in to this system as the root user and
    open a terminal.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list the existing publishers, we execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: According to the output, the Oracle package URI and repository ([http://pkg.oracle.com/solaris/release/](http://pkg.oracle.com/solaris/release/))
    is the source of the packages and updates (named as `origin`), and it isn't proxied
    (when `P` equals `F`, the proxy is set to false).
  prefs: []
  type: TYPE_NORMAL
- en: 'To collect additional information about the publisher of the packages, we type
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the main command, `pkg`, with the `publisher` keyword, we've found a list
    of publishers and that the `solaris` publisher is `online`, and a URI is enabled
    that points to the repository location, which is [http://pkg.oracle.com/solaris/release/](http://pkg.oracle.com/solaris/release/).
    Furthermore, there is no SSL digital certificate associated with the `solaris`
    publisher.
  prefs: []
  type: TYPE_NORMAL
- en: Listing and collecting the information and dependencies of a package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To demonstrate how simple it is to administer packages, let's explore a useful
    example where we install a package on Oracle Solaris 11.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to know which package we want to install. However, before installing
    any package, we need to confirm whether this package is already installed on the
    system by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, the `nmap` package (scanning tool) isn''t installed on Oracle
    Solaris 11; we can verify that this tool is available from the official source
    repository (`solaris`, according to the previous publisher list). Furthermore,
    before accomplishing this step, it''s suggested that we rebuild repository indexes
    (mainly if you don''t remember when a package was inserted or removed the last
    time) to speed up the lookup process later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s time to search for the `nmap` package. We do this with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can confirm that `nmap` is available and isn''t installed on the system,
    but a bit more information about the package won''t hurt us. An easy way to know
    whether the `nmap` package is installed or not is by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If the last column (`IFO`) doesn''t have an `i` flag, then we can verify that
    the package isn''t installed. We can also obtain complementary information about
    `nmap` by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This last command is important because we''ve collected valuable attributes
    about the `nmap` package, such as its state (`Not installed`) and size (`12.28
    MB`). The `-r` option is necessary because it references a package in the repository
    from registered publishers. We can show Nmap''s license agreement in the same
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, it''s advisable to know which packages are required to install a
    specific package (such as `nmap`) before you are able to try it. We can verify
    this by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also reach the same result by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `–t` option specifies `action.raw`, which is used to limit the search to
    a specific attribute, such as `depend`. The `–r` option matches packages based
    on the newest available version and gets information about noninstalled packages,
    and the `-o` option limits the columns to be shown in the output.
  prefs: []
  type: TYPE_NORMAL
- en: We have a list of required packages to install a new package such as `nmap`,
    and all the packages are shown as `require`; however, this command would have
    shown as `optional` if we were managing another package.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous commands have verified that if a specific package is already installed
    (`nmap`), it reindexes the package catalog (to speed up the search) and collects
    details about the package. Furthermore, we've listed the decencies of the `nmap`
    package. We will notice that the number of packages that were indexed (847) is
    very high, and that's the main reason this operation takes some time.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a package, verifying its content, and fixing the package corruption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This time, we have sufficient conditions to install a package and verify its
    contents, and if we find a problem with any package, we are able to fix it. This
    is an exciting section because it will introduce us to many useful commands, and
    all of them are used in day-to-day Solaris 11 administration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll learn the next procedure using the `nmap` package, but the same can be
    done using any other Solaris 11 package.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the output, Solaris 11 didn''t create a BE. Sure, it was a very
    simple package installation. However, if we had installed a Solaris patch, the
    scenario would have been very different. We can check our installation by typing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The last column shows us that the package has been installed, so to show the
    content of our installation, we type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use an alternative form, with presentation of additional information,
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, every package has an associated file named `manifest`, which
    describes details such as the package content, its attributes, and dependencies.
    We can view this `manifest` file of an installed package using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might wonder whether it is possible to check whether a package installation
    has kept its integrity. Yes, you can manage this issue using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a simple test where we break any file from the `nmap` package;
    afterwards, we check the package status by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We continue further by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Wow! The command used to detect the `nmap` package corruption detected the
    exact problem. We can fix this potential problem in a very simple and quick way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the `nmap` package installation, we realized that it takes 51.67 MB after
    it is installed and that it hasn't created a new BE. In the remaining commands,
    we found out a lot of information; for example, the files are contained in the
    `nmap` package, this package runs on x86 or SPARC, it comes from the Solaris repository
    and has been developed by [http://insecure.org](http://insecure.org), its source
    file is `nmap-5.51.tgz`, and it only runs on userland. Afterwards, we verified
    the `nmap` integrity, corrupted it, and fixed it.
  prefs: []
  type: TYPE_NORMAL
- en: Managing the IPS history and freezing and uninstalling packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Auditing is another current concern for companies, and most times, it's very
    helpful to know which package operations have happened recently. Furthermore,
    we're going to learn a way to drop the IPS command history.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To gather this information, we execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We don''t always need or want to keep the history of our actions; Oracle Solaris
    11 allows us to erase the history by running a simple command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'From time to time, Oracle Solaris 11 packages undergo updates, and we know
    it''s advisable to update packages when there''s a new version available. Updates
    can be checked using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Nonetheless, it needs to be highlighted that if we execute `pkg update`, the
    entire system will be updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a rare situation, we might be required to freeze a package to prevent an
    update. This intervention, although very unlikely, is suitable when we have to
    keep a very specific software version in the system even when it is executing
    an update command, such as `pkg update`, to modify this content. The following
    command is used for freezing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, we can change our mind and unfreeze the `nmap` package by
    executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Before we continue, we can use a nice trick to update Nmap again without using
    the `pkg update nmap` command. A facet represents an optional software component,
    such as the `locale` property, while variants represent a mutually exclusive software
    component (an x86 component against a SPARC component).
  prefs: []
  type: TYPE_NORMAL
- en: 'A package has an associated action and a facet is defined as a tag of the package''s
    action. So, when the `version.lock` facet is set to the `true` value (no matter
    the value that was set previously), the IPS framework checks whether a new version
    of the package is present on the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to learn more about variants and facets, refer to *Controlling Installation
    of Optional Components* from the *Adding and Updating Oracle Solaris 11.1 Software
    Packages* manual at [http://docs.oracle.com/cd/E26502_01/html/E28984/glmke.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28984/glmke.html#scrolltoc).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to finish our review of the IPS administration, an essential factor
    when administering packages is to know how to uninstall them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's possible to list all the actions performed by the administrator that have
    succeeded or failed on the IPS framework using the `pkg history` command, including
    the exact time when the `pkg` command was executed. This sure is a nice feature
    if we want to initiate an audit. There's a command called `pkg purge-history`
    that erases all history and must only be executed by the root user. We also learned
    about `pkg freeze`, which prevents Oracle Solaris 11 from updating a particular
    package. Finally, we've seen how easy it is to uninstall a package using `pkg
    uninstall`.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the IPS Package Manager interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some administrators prefer using GUI to administer areas of Oracle Solaris 11\.
    This might be your preference, as well, and for this, there's Package Manager
    GUI, which is a well-made interface that makes it possible to accomplish almost
    every package administration. Personally, I believe it's a very neat tool if you
    want to view all available packages from the repository; when I need to install
    many packages at once, it makes the job easier.
  prefs: []
  type: TYPE_NORMAL
- en: Although the Package Manager GUI has multiple handy features, we won't discuss
    any of these characteristics here. If you want to know more about the graphical
    interface, I'm sure you will be able to explore and learn it on your own.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To launch the Package Manager interface, we go to **System** | **Administrator**
    | **Package Manager**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Nice! We've done a basic review of the IPS administration. Now, we will proceed
    with another basic review of BEs.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The GUI is a wonderful way to manage IPS packages on an Oracle Solaris 11 system,
    and it's able to make the most of IPS administration tasks as well as BE administration
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating, activating, and destroying a boot environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I always like to ask this question with respect to BEs: what are the facts
    that make life easier when administering Oracle Solaris 11?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Maybe the answers aren''t so difficult; to prove this, let''s imagine a scenario.
    We are requested to update Oracle Solaris 11, and to do this, we need to reboot
    the system, insert the Oracle Solaris 11 installation DVD, and during the boot,
    we have to choose the upgrade option. Is the upgrade complete? Is there no further
    problem? Unfortunately, this is not true because there are some potential tradeoffs:'
  prefs: []
  type: TYPE_NORMAL
- en: We had to stop applications and reboot the operating system, and users had to
    stop work on their tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there was trouble upgrading the Oracle Solaris operating system, we'll lose
    all old installation because the upgrade process will have overwritten the previous
    version of Oracle Solaris; consequently, we won't be able to reboot the system
    and go back to the previous version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you will have realized, this is a big threat to administrators because in
    the first case, we had a working (but outdated) system, and in the second case,
    we risked losing everything (and our valuable job) if anything went wrong. How
    can we improve this situation?
  prefs: []
  type: TYPE_NORMAL
- en: 'In Oracle Solaris 11, when we are requested to upgrade a system, Oracle Solaris
    11 takes a BE automatically to help us during the process. The boot environment
    is a kind of clone that makes it possible to save the previous installation, and
    if anything goes wrong during the upgrade, the boot environment of Oracle Solaris
    11 lets us roll back the OS to the old state (installation). One of the biggest
    advantages of this procedure is that the administrator isn''t obliged to execute
    any command to create a BE to protect and save the previous installation. Oracle
    Solaris 11 manages the whole process. This has two advantages: the upgrade process
    gets finished without rebooting the operating system, and the boot environment
    enables us to roll back the environment if we encounter a problem.'
  prefs: []
  type: TYPE_NORMAL
- en: You should know that BEs aren't only used for upgrade operations. Indeed, we
    can deploy them to patch the system, install an application, or create a test
    environment. In all of these cases, the BE makes it possible to revert the system
    to the previous state. So, after we have taken care of these fundamentals, it's
    time to practice.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, professionals are making heavy use of the BE, and this is the true
    reason that creating, activating, and destroying BEs is most important when administering
    Oracle Solaris 11\. You can be sure that this knowledge will be fundamental to
    your understanding of Oracle Solaris 11 Advanced Administration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, our system must have access to the Internet. Some extra
    free space might be required.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Without any delay, we execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Oracle Solaris 11 automatically creates an entry in the GRUB list and makes
    it the default choice. However, it is relevant to note that another BE named `solaris-backup-b`
    is already present on the system from previous tests and it will be used in some
    steps ahead.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the `solaris-backup-1` BE, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the `Active` column from the last command. The flag for `solaris-backup-1`
    has changed to `R`, which means that it will be the active boot environment in
    the next boot. Therefore, it''s time to reboot the system and list all the BEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If we need to destroy a boot environment (not the current one, for sure), we
    can do so by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: What can we say about GRUB? There is no problem with it because Oracle Solaris
    11 automatically removed the BE entry from the existing GRUB configuration.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating a new BE is an excellent way to have an additional environment to initially
    test a new Oracle Solaris 11 patch or operating system upgrade from Oracle. If
    something goes wrong, we are able to switch back to the old environment without
    losing any data. Following the creation of the BE, we need to remember to activate
    the new BE before rebooting the system.
  prefs: []
  type: TYPE_NORMAL
- en: Listing and renaming a boot environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is surprising that little details can help us with day-to-day administration.
    We've been using some repository commands since the beginning of the chapter;
    now, it's time to learn more about related commands.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, our system must have access to the Internet and some extra
    free space on disk.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list existing boot environments is straightforward; we do this by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: According to the preceding output, the active BE is `solaris` (flag `N`), it'll
    be used in the next boot (flag `R`), its size is 4.99 gigabytes, and its `Mountpoint`
    is `/`. There is other information too, but that isn't so relevant now. In this
    specific example, there's another BE named `solaris-backup-1` (if the reader doesn't
    have a BE with the same name, it's fine to test using the existing solaris BE)
    that this time has taken up just 163 KB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Oracle Solaris 11 makes it simple to rename inactive boot environments with
    the execution of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The listing and renaming of a BE is fundamental to handling and managing it.
    The `beadm list` command shows us the directory that each BE is mounted on and
    the space that it takes. After Oracle Solaris 11 automatically creates a BE (the
    first one) during installation, we are able to find out when the operating system
    was installed. Renaming a BE is a complementary step that helps us comply with
    the name policy and makes administration easier.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an IPS local repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is convenient to install packages from the official Oracle repository, but
    access to the Internet could become very intensive if in the company, there are
    a lot of installed machines with Oracle Solaris 11 that repeat the same routine
    to install packages. In this case, it is very handy to create a local IPS repository
    with the same packages from the official repository but have them available on
    a local network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, our system must be able to access the Internet. There
    are further requirements, such as extra disk (physical or virtual), to create
    a **Z File System** (**ZFS**), and we have to download the repository image.
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the repository image, go to [http://www.oracle.com/technetwork/server-storage/solaris11/downloads/index.html](http://www.oracle.com/technetwork/server-storage/solaris11/downloads/index.html),
    click on **Create a Local Repository**, and download all the available parts (at
    the time of this writing, there are four parts). Extract and concatenate them
    by executing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can create the repository in a separated disk to get some performance and
    maintenance advantage. Indeed, we aren''t obliged to do this, but it is greatly
    recommended. To list the disks that are available (the `format` command), we create
    a new pool and then a new ZFS filesystem in this pool, and execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We realize that if the second disk (`c8t1d0`) doesn''t have any partitions,
    then the following sequence of commands creates a pool (the `zpool create` command).
    We list it (the `zpool list` command) and create a new ZFS filesystem (the `zfs
    create` command), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s time to use the repository image (`solaris-11-repo-full.iso` from the
    *Getting ready* section) to create our local repository, and to do this, we need
    to mount this image and copy all of its contents (about 6.8 GB) to the repository
    filesystem that we created. Therefore, in the first step, we create a mount point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we create a device file that points to the repository image using the
    `lofiadm` command and mount it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To copy the image content to the local repository, we run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Configure the repository server service in **Service Management Facility** (**SMF**).
    If you still aren't comfortable with SMF, I suggest reading [Chapter 5](part0069_split_000.html#page
    "Chapter 5. Playing with Oracle Solaris 11 Services"), *Playing with Oracle Solaris
    11 Services*, later. So, the use of the `svcprop` command makes it possible to
    verify some service properties. Likewise, the `svccfg` command is appropriate
    if you wish to change a specific property from a service.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify what the current repository directory is, we execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We change the repository directory and make it read-only by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We quickly check our changes by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To avoid a TCP port collision with any existing service that is configured
    on port `80`, we change it to `9999`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we reload the repository configuration, start it, and then index the repository
    catalog for a better package search operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We list the current configured publisher and configure Oracle Solaris 11 for
    a new one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: We need to take care. In the preceding command, the `-G` option removed any
    existing origins (repositories) of the `solaris` publisher, and the `-g` option
    set a new URI that points to the local repository of the same publisher (`solaris`).
    Furthermore, the URL, `solaris.example.com`, points to the local system address
    of the repository machine (it could be `127.0.0.1`).
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have the opportunity to test our new repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Wow! We''ve listed the configured publishers and changed the `solaris` publisher
    URI. Additionally, we are able to collect more information about the local repository
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We can change any attribute of the repository, and afterwards, verify our changes
    by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, we''ll need to update our local repository from a reliable and updated
    source (Oracle). We execute the following command to accomplish this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'By contrast, the most impressive fact is that we could have used this same
    command to copy the entire repository from the official Oracle repository at the
    beginning of this recipe instead of downloading the entire repository, concatenating
    the parts, creating a device using the `lofiadm` command, executing the `rsync`
    command, and so on. I had a personal experience when using this particular command
    in which, for some reason, there was a download error while I was getting packages.
    To continue with a download that was initially interrupted, we run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: It's almost the same command, but we use the `-c` option here instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some situations, we want to access our local repository to get some packages,
    but by using another interface. To interact with our own repository, we need to
    open a web browser and navigate to our local repository (in my test environment,
    the IP address is `192.168.1.133`—`solaris11.example.com`—and the port is `9999`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we searched for the `nmap` package, and the interface
    showed us that the specified package is already installed. If this is the case,
    we take a separate filesystem to improve the read/write performance.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Configuring a local repository is a suitable method to gain more control on
    package administration and speeding up IPS operations.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a secondary IPS local repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've configured only one local repository, but we could have two or
    more local repositories for distinguished goals, and this would be very useful
    for a company with independent production and training environments. Let's have
    a look at the example in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, our Solaris 11 system needs to have access to the Internet.
    Some extra free space on the disk will be required, as well as an Internet browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start with, we create a ZFS filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the ZFS filesystem is created, the following step is required to create
    a repository (an empty one—only the skeleton). We set a publisher and verify that
    everything went well using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add a new instance of the SMF `pkg/server` named `training` and two
    property groups (using the `addpg` parameter) with some predefined properties
    (more about services can be learned from [http://docs.oracle.com/cd/E26502_01/html/E29003/docinfo.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E29003/docinfo.html#scrolltoc)
    and their respective command manual pages). In the end, we enable the training
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'If you recall, we used the port `9999` in the first repository we configured.
    For this second repository, we configure the port `8888`, after which the repository
    path will be set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'As we did in the first repository, we need to update the index of the second
    repository and start the new repository instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We can access the repository using a browser at `http://solaris11.example.com:8888`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we learned how to create a second repository, which can be dedicated
    to accomplishing a different goal from the first repository rather than the one
    from the previous recipe. The main command from this recipe is `pkgrepo`, which
    creates a new local repository to store packages. After that, we configure the
    SMF framework to offer this new repository automatically and on a planned TCP
    port.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing packages into a repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Certainly, inserting packages into a local repository won't be a very frequent
    task, but surprisingly, this action saves time. Besides, this topic isn't hard;
    the process is very interesting because we will learn to handle complex programs
    such as Veritas Storage Foundations HA.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, it's preferable that our Solaris 11 system has access
    to the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can set the prefix that was previously marked `alexandreborges.org` to `training`
    to make our administration easier and more consistent with the name of the instance
    service that we chose when an SMF service entry was made for this repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'An interesting fact is that the repository is usually created as read-only,
    and to change it to read/write is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the previous command can be seen by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We now reload the configurations and start the repository services again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The new repository (training) doesn''t appear in the publisher list yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: What's this `solarisstudio` publisher? Where did this publisher line come from?
    Relax! I've installed the Oracle Solaris Studio 12.3 to execute some tests (not
    shown here), but you can disregard it. There's nothing related to the current
    explanation, but if you're a developer, you can try it from [http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/index.html](http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returning to the main subject, we need to add the publisher (`training`) that
    points to the secondary repository (`http://localhost:8888`) by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s pick two packages (`wireshark` and `wireshark-common`) from
    the `solaris` repository and include them in the secondary repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We can confirm our finished task by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Using another approach, we are able to obtain the same results in a detailed
    report from the Apache web server by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now open a web browser and go to the URL, `http://localhost:8888`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Fantastic! Wireshark packages are now available from the Apache web server and
    can be downloaded and installed anytime.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Insertion of a package into a local repository is a result of the previous recipe.
    This kind of operation is performed when a technical team needs to share a new
    package among its members. The key command is `pkgrecv`, which does most of the
    task for us.
  prefs: []
  type: TYPE_NORMAL
- en: Adding big applications into a repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some professionals might wonder whether it is possible to insert complex applications
    into repositories. Sure! For example, let's take the **Storage Foundation and**
    **Veritas Cluster Server High Availability Solutions** (both are available in
    version 6.01 at the time of this writing).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, the system must have access to the Internet, some extra
    space on the disk, and packages of Storage Foundation and Veritas Cluster Server
    High Availability Solutions, which can be downloaded from [http://www.symantec.com/products-solutions/trialware/?pcid=recently_released#](http://www.symantec.com/products-solutions/trialware/?pcid=recently_released#).
    The tarball is named `VRTS_SF_HA_Solutions_6.0.1_Solaris_x64.tar.gz`, and it is
    composed by Veritas Storage Foundation 6.0.1 and Veritas Cluster Server 6.0.1\.
    You can install them in keyless mode for 60 days to try it out.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After downloading the tarball into the home directory (`/root`), we extract
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next step, we find out which packages are included in the Storage Foundation
    HA application. Then, to list its contents, we execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We already know the content of the SFHA 6.0.1 software, and in the next step,
    we create a publisher named `Symantec` that has `/root/SFHA601/dvd2-sol_x64/sol11_x64/pkgs/VRTSpkgs.p5p/`
    as the repository location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'On listing the existing repositories, we''re able to see the new repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, it might come in handy to collect further information about this
    new repository named `Symantec`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Brilliant! A new publisher named `Symantec` has come up, which points to `/root/SFHA601/dvd2-sol_x64/sol11_x64/pkgs/VRTSpkgs.p5p/`.
    After all this work, we can install Veritas Volume Manager and Veritas Filesystem
    Packages. However, this is not the usual method to install Symantec Storage Foundation
    HA because Symantec recommends using the `installer` or `installsfha` script,
    which is contained inside a DVD. By the way, the following command is necessary
    to initiate the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The `--accept` keyword needs to comply with the Symantec license.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the repository (and its respective packages) we just made and configured
    as a publisher named `Symantec` is not available for network access, and unfortunately,
    it is not enough for our purposes. However, it''s relatively easy to make all
    these `Symantec` packages available through our previous `training` publisher;
    let''s do this with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we can check these uploaded packages by going to the URL, `http://localhost:8888/en/catalog.shtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This procedure is almost identical to the previous one, but we've tried to make
    things more practical. Moreover, Veritas Storage Foundation and Veritas Cluster
    Server are well-known programs, the value of which has already been proved with
    the response received from the market. Another good takeaway from this example
    is that Symantec provides a little database package (`VRTSpkgs.p5p`) to help us
    create the appropriate repository that contains all the package references.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own package and publishing it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've been working using packages provided from Oracle or another place,
    but it would be nice if we could create and publish our own package. This recipe
    requires that we have basic experience with compiling and installing free software.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. For example, we install a couple of packages such as `system/header`
    and `gcc-45` and `socat`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we need to do is install some required Oracle Solaris 11 packages,
    which will be necessary for the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The `gcc-45` package is probably already installed on the system, and it will
    optionally demand the `gcc-3` package; if this is the case, then we have to verify
    that the `gcc45` software is already installed and check its dependencies by running
    the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the last line in the previous command output, the `gcc-45` package
    depends, optionally (`type=optional`), on `gcc-3`, so we can install `gcc-3` with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We check the dependencies of the `gcc-3` package by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We list the `gcc-3` status and its details by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: To make this example more attractive, we can download the socat tarball application
    from [http://www.dest-unreach.org/socat/](http://www.dest-unreach.org/socat/).
    Socat is an amazing tool that is similar to the Netcat tool, but socat adds many
    additional features, such as the possibility to encrypt a connection to evade
    IPS systems. After downloading the `socat` tool, we're going to create a very
    simple, persistent backdoor to package it in the Oracle Solaris 11 format, to
    publish it into the secondary repository (`http://localhost:8888`) and install
    it on our own system. After we have completed all these steps, a practical example
    will be displayed using this backdoor.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing this procedure, I''ve downloaded socat Version 2.0.0-b6
    (`socat-2.0.0-b6.tar.gz`), copied it to `/tmp`, and opened the tarball:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create the `socat` binary. The usual step is to run the `configure`
    script to check all socat requirements on the system, so let''s execute it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Before compiling the socat application, we have to edit some source files and
    change some lines because the original socat files don''t compile on Oracle Solaris
    11\. In the same socat directory, we need to edit the `xioopts.c` file, go to
    lines 3998 and 4001, and change them according to the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines are the original content of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'After our change, the content looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it''s convenient to make it the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next step, we modify the `/root/.bashrc` profile in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'All the changes we have made so far enable us to execute the `socat` tool from
    anywhere and access its manual pages too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Socat is a command-line-based utility that establishes two bidirectional byte
    streams and transfers data between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the socat tool encrypts connections, we need to create a digital certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'At the server side, we''ve finished the procedure to configure socat. At the
    client side, it''s necessary to create a key too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: For the purpose of explanation and demonstration, I'm going to use the server
    as a client, but when handling a real-life situation, we need to execute the same
    command (`openssl req -new -key solaris11.key -x509 -days 9999 -out solaris11.crt`)
    on our client.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the same machine (client), we create a script that starts the socat tool
    in a persistent listening mode on port `3333`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Though the preceding script is extremely easy, we need to pay attention to
    the following deployed options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTEN:3333**: This is the port where socat is listening'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reuseaddr**: This allows other sockets to bind to an address even if the
    local port (`3333`) is already in use by socat'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fork**: After establishing a connection, this handles its channel in a child
    process and keeps the parent process attempting to produce more connections, either
    by listening or by connecting in a loop'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cert**: This is the digital certificate that we''ve made'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cafile**: This specifies the file with the trusted (root) authority certificates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EXEC**: This will be executed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Execute the following command to make it executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the socat configuration is complete, the next task is executed in
    the Oracle Solaris domain. In the first step, we create a manifest file, which
    is used to create an IPS package, because this manifest file contains all the
    required dependencies of our backdoor IPS package. The backdoor manifest file
    will be created in parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'The content from the manifest file is not so complex, and there are keywords
    (actions) that can be interesting to learn. Moreover, the syntax is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of these actions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**file**: This specifies a file installed by the package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**set**: This specifies information such as name and description'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dir**: This is the directory that is installed by the package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hardlink**: This points to a hardlink'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**link**: This determines a symbolic link'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**license**: This determines what kind of license is bound to the package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**depend**: This lists the dependencies that this package has on other software
    or tools'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**legacy**: This sets any required information that must be installed in the
    legacy package database to keep the compatibility'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Certainly, there are other complex manifests, but nothing that is complex enough
    to worry us. The following example adopts the ready manifest of the Netcat package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next step, we create a MOG file (which is a kind of metadata file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'As you will have realized, all the metadata information included in the `backdoor.mog`
    file was added at the end of the `manifest.level2` file. In the third step, we
    include dependencies into the manifest file and then execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the dependencies list is generated, we need to resolve the dependencies
    against packages that are installed on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Before proceeding, we need to change the previous file (`backdoor_manifest.level3.res`
    under `/tmp` directory) to install the backdoor package in the `/backdoor` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'We are almost there. Our final goal is to assemble the package and add it to
    the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Wow! We''ve done it! A good way to test this is to install our backdoor package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we test the functionality of the backdoor. In the first terminal,
    we type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: The second step should be performed from another Oracle Solaris 11 machine (our
    client). However, for test purposes, I've used the same host.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There's no question that this recipe is very interesting and complex because
    we created a backdoor using an encrypted connection and used different programs
    to accomplish our tasks. Furthermore, we learned that the package has a manifest
    that describes the attributes and dependencies of the associated package. It wouldn't
    be an exaggeration to say that the manifest is the soul of the package.
  prefs: []
  type: TYPE_NORMAL
- en: Managing an IPS publisher on Solaris 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maybe the administration of an IPS publisher doesn't seem so important compared
    to other activities, but it's a fundamental concept that can be used to explain
    other complex processes. It is surprising that these little details can help us
    with daily administration. So, as we've been using some repository commands since
    the beginning of the chapter, it's now time to learn more related commands.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a system (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list existing publishers, we execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'If we require more information about a specific publisher, we can gather it
    by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Among all these publishers, one is the preferential one. We display which one
    is preferential by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Needless to say, sometimes the administrator might have to change the preferred
    publisher; this task can be done by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'Returning to the old setting is straightforward. This is done using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main idea of this recipe was to change the primary publisher using the pkg
    `set-publisher` command. Sometimes, it's an advisable procedure to enforce or
    valorize such a repository.
  prefs: []
  type: TYPE_NORMAL
- en: Pinning publishers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's not rare when the system has many configured publishers and it becomes
    necessary to ensure that a package that was installed from one publisher is not
    updated from another.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I've seen some situations where an installed package from a very
    reliable repository was corrupted by an update from another, not-so-reliable repository.
    That's funny. The same package exists, and it can be installed from two different
    repositories, but one of these repositories is less reliable, and eventually,
    it can offer a bad package. This is where pinning becomes useful. I guarantee
    that a package installed from a source (repository) will always be updated from
    the same repository. Let's learn how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a system (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Access to the Internet is optional.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To pin a publisher, we type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Undoing the configuration is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any new publisher will be pinned by default.
  prefs: []
  type: TYPE_NORMAL
- en: From now on, every package will always be updated from its original repository
    even if an update is available from another one.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an interesting situation. Usually, an administrator needs a package
    offered by two different publishers, each one with a determined level of reliability.
    In this case, we need to choose one of these and create a "sticky channel" to
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the URI and enabling and disabling a publisher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another requirement can be to change the URI of a publisher and point it to
    a new repository. For example, we copied all the Oracle Solaris 11 packages to
    the `repo` directory under `/repo_pool/repoimage/`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a system (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Access to the Internet is recommended.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We alter a publisher to point to a different URI by typing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that the URI, `http://localhost:9999`, points to the repository, `/repo_pool/repoimage/repo`.
    To revert it, we execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'We list the publishers again by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, we might be forced to disable a publisher; this task can be executed
    according to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'To re-enable it, we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The handling of publishers is a very common task in Oracle Solaris 11, and we're
    probably going to be enabling and disabling publishers very often using the `pkg
    set-publisher` command.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mirror repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you remember, at the beginning of the chapter, we created a local repository
    with all the Oracle Solaris 11 packages and indexed this repository as being from
    the `solaris` publisher. Thus, we have two repositories; the first one refers
    to the Oracle website using the URI, [http://pkg.oracle.com/solaris/release/](http://pkg.oracle.com/solaris/release/),
    and the second one—which is referred by the URI, `http//localhost:9999`—is stored
    on disk (`/repo_pool/repoimage/repo`). Nonetheless, the publisher is the same:
    `solaris`. So, as both have the same contents, one of them is a mirror of the
    other and can be configured with the steps discussed in the next sections.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Access to the Internet is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to set a mirror repository by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: This output is very interesting because now there are two occurrences of the
    `solaris` publisher; the first is the original (`origin`), which contains the
    metadata and packages, and the second is the mirror, which contains only the contents
    of the packages. It is necessary to install a package because Oracle Solaris 11
    prefers the mirror to retrieve the contents of the packages, but IPS also downloads
    the meta information (the publisher's catalog) from the original.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can remove the URI that points to this mirror by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mirroring repositories is another way to say that if the primary repository
    is unavailable; there's a second place available to download the packages from.
    In other words, the same publisher offers its packages from two different locations.
    Additionally, mirrors offer an alternative to download the package contents without
    overloading the original repository.
  prefs: []
  type: TYPE_NORMAL
- en: Removing a repository and changing the search order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some good administrative commands to maintain the consistency of the
    repository configuration. However, the publisher doesn't always maintain its importance
    and priorities, and this gives us the flexibility to invert the order of the search.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Access to the Internet is optional.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We remove a publisher using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'We might still prefer that the search action look for a specific publisher
    before another one. This task can be executed using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This short recipe teaches us how we can change the search order of repositories
    according to our best interests.
  prefs: []
  type: TYPE_NORMAL
- en: Listing and creating a boot environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've learned that boot environments have a wide spectrum of application on
    Oracle Solaris 11, like patching a system, for example. This section lets us analyze
    the administration and management of a BE a bit more.
  prefs: []
  type: TYPE_NORMAL
- en: Without any question, listing and creating BEs is one of the more basic tasks
    when administering a boot environment. However, every BE administration starts
    from this point.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Access to the Internet is optional. Some extra space on the disk is
    important.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most basic command when administering a BE is to list the existing boot
    environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'The next natural step is to create a new boot environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we had a quick review of how to create boot environments. This
    recipe will be used a number of times in future procedures.
  prefs: []
  type: TYPE_NORMAL
- en: Mounting, unmounting, installing, and uninstalling a package in an inactive
    boot environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many times, we want to install a package in an inactive BE and later (maybe
    at night), boot this BE and test whether the programs are working. Furthermore,
    we can keep all BEs consistent with each other and have them contain the same
    packages without booting each one to install a new package.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the following commands to install a new package into a new BE (`solaris_test_1`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'We install the package in this mounted boot environment by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'The `unrar` package was installed into the new BE (`solaris_test_1`) and not
    into the current one (`solaris`). Proving this fact is easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The same package can be removed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the `unrar` package has been installed, we can unmount the BE by running
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This neat recipe taught us how to mount an inactive boot environment and install
    a package into this inactive BE by using the `-R` option to specify the mount
    point.
  prefs: []
  type: TYPE_NORMAL
- en: Activating a boot environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a system with multiple BEs, situations might arise when it becomes necessary
    to activate a BE to test a patch or a new package without running the risk of
    losing the production environment. Therefore, a new BE will have to be created,
    changed, and finally, tested. However, it will have to be activated first. So,
    in all cases, the following recipes will be suitable.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Some extra disk space might be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s activate the recently created BE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s reboot it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'After rebooting, let''s test the existing `unrar` package and command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s test our procedure by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Wonderful! The `unrar` package has appeared on the system in the way that we
    planned.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The act of activating and rebooting a BE are the final steps to be completed
    before we start using the BE. Likely, it's during this stage that we can test
    an installation package, an installation patch, or even an Oracle Solaris 11 upgrade
    without worrying about losing the whole system.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a boot environment from an existing one
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's an appropriate time to talk about the possibility of creating a new
    environment from an existing one.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Some extra disk space might be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform this recipe, we''re obliged to create a backup from the current
    BE (`solaris_test_1`), after which we should be successful in creating a new BE
    from this backup. The whole process uses snapshots. (In this case, we are using
    a logical snapshot, which uses pointers to leave the original image untouched.)
    Let''s create a snapshot by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now ready to create a new BE from another one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: At this point, it might be logical to activate this environment (`beadm activate
    solaris_test_2`) and boot it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, before finishing the chapter, we need to reactivate the original `solaris`
    boot environment, reboot the system, and remove all the remaining BEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This final recipe from the chapter has shown us a quick way to create a new
    BE based on an old one. To do this, we needed to take a backup first. Finally,
    we destroyed the existing BEs to clean up our system. Obviously, it's not appropriate
    to destroy the booted BE.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Adding and Updating Oracle Solaris 11.1 Software Packages* (*Oracle Solaris
    11.1 Information Library*) at [http://docs.oracle.com/cd/E26502_01/html/E28984/docinfo.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28984/docinfo.html#scrolltoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Copying and Creating* *Oracle Solaris 11.1 Package Repositories* at [http://docs.oracle.com/cd/E26502_01/html/E28985/index.html](http://docs.oracle.com/cd/E26502_01/html/E28985/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Publishing IPS Packages – Guide for Developers* (by Erick Reid and Brock Pytlik)
    at [http://www.oracle.com/technetwork/server-storage/solaris11/documentation/ips-packages-webinarseries-1666681.pdf](http://www.oracle.com/technetwork/server-storage/solaris11/documentation/ips-packages-webinarseries-1666681.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introducing the Basics of Image Packaging System (IPS) on Oracle Solaris 11*
    (by Glynn Foster) at [http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-083-ips-basics-523756.html](http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-083-ips-basics-523756.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Command Summary: Basic Operations with the Image Package System in Oracle
    Solaris 11* (by Ginny Henningsen) at [http://www.oracle.com/technetwork/articles/servers-storage-admin/command-summary-ips-1865035.html](http://www.oracle.com/technetwork/articles/servers-storage-admin/command-summary-ips-1865035.html)*Creating
    and Administering Oracle Solaris 11 Boot Environments* at [http://docs.oracle.com/cd/E23824_01/html/E21801/administer.html#scrolltoc](http://docs.oracle.com/cd/E23824_01/html/E21801/administer.html#scrolltoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to Publish Packages to the Imaging Packaging System* at [http://www.oracle.com/technetwork/systems/hands-on-labs/introduction-to-ips-1534596.html](http://www.oracle.com/technetwork/systems/hands-on-labs/introduction-to-ips-1534596.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Solaris 11 REPO - Configuration of Multiple Repositories Using Multiple Depot
    Server Instances* (by Steven ESSO) at [http://stivesso.blogspot.com.br/2012/11/solaris-11-repo-configuration-of.html](http://stivesso.blogspot.com.br/2012/11/solaris-11-repo-configuration-of.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to Create the Solaris 11 IPS Repository* (by Brad Hudson) at [http://bradhudsonjr.wordpress.com/2011/08/09/how-to-create-the-solaris-11-ips-repository/](http://bradhudsonjr.wordpress.com/2011/08/09/how-to-create-the-solaris-11-ips-repository/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to Create Multiple Internal Repositories for Oracle Solaris 11* (by Albert
    White) at [http://www.oracle.com/technetwork/articles/servers-storage-admin/int-s11-repositories-1632678.html](http://www.oracle.com/technetwork/articles/servers-storage-admin/int-s11-repositories-1632678.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to Create and Publish Packages to an IPS Repository on Oracle Solaris
    11* (by Glynn Foster) at [http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-097-create-pkg-ips-524496.html](http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-097-create-pkg-ips-524496.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Oracle Solaris 11 Cheat Sheet for the Image Packaging System* at [http://www.oracle.com/technetwork/server-storage/solaris11/documentation/ips-one-liners-032011-337775.pdf](http://www.oracle.com/technetwork/server-storage/solaris11/documentation/ips-one-liners-032011-337775.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Solaris 11: how to setup IPS repository* (by Alessio Dini) at [http://alessiodini.wordpress.com/2012/10/03/solaris-11-how-to-setup-ips-repository/](http://alessiodini.wordpress.com/2012/10/03/solaris-11-how-to-setup-ips-repository/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

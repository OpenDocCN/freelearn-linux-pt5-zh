- en: Chapter 1. IPS and Boot Environments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Determining the current package publisher
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing and collecting the information and dependencies of a package
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a package, verifying its content, and fixing the package corruption
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the IPS history and freezing and uninstalling packages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering the IPS Package Manager interface
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating, activating, and destroying a boot environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing and renaming a boot environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring an IPS local repository
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a secondary IPS local repository
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing packages into a repository
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding big applications into a repository
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own package and publishing it
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing an IPS publisher on Solaris 11
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pinning publishers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the URI and enabling and disabling a publisher
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a mirror repository
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a repository and changing the search order
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing and creating a boot environment
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mounting, unmounting, installing, and uninstalling a package in an inactive
    boot environment
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating a boot environment
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a boot environment from an existing one
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you already know, Oracle Solaris 11 has undergone many changes and now provides
    a framework to manage packages named **Image Packaging System** (**IPS**). This
    new framework makes an administrator's life easier when he or she needs to add,
    remove, collect, and administer any software packages. By default, Oracle offers
    a repository (a large group of packages) on the Web at [http://pkg.oracle.com/solaris/release/](http://pkg.oracle.com/solaris/release/),
    and this is the default Oracle Solaris 11 repository. Using this repository, we
    will be able to install any package from the Internet, and as we are going to
    learn soon, it's feasible to create a local repository (like the default one)
    on our own Oracle Solaris 11 installation to improve the security and performance
    of our environment. Moreover, we can configure Oracle Solaris 11 to hold more
    than one repository as the source of the packages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Going beyond IPS, Oracle Solaris 11 uses **boot environments** (**BEs**) to
    assist us in making an Oracle Solaris 11 upgrade without any risk to current data,
    because the update process creates a new BE before proceeding to the package update
    process. This new BE will be shown in the next reboot on the GRUB menu, and from
    there, we will be able to choose either the new BE (updated Solaris) or the old
    one. BEs will come in handy in other areas when handling the Oracle Solaris 11
    administration.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Determining the current package publisher
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When administering IPS on a Solaris 11 system, the first thing we need to do
    is find out the current package publisher because initially, it will be the source
    that our system will install or update a package from.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we need to log in to this system as the root user and
    open a terminal.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list the existing publishers, we execute the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出现有的发布者，我们执行以下命令：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: According to the output, the Oracle package URI and repository ([http://pkg.oracle.com/solaris/release/](http://pkg.oracle.com/solaris/release/))
    is the source of the packages and updates (named as `origin`), and it isn't proxied
    (when `P` equals `F`, the proxy is set to false).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据输出，Oracle软件包URI和仓库（[http://pkg.oracle.com/solaris/release/](http://pkg.oracle.com/solaris/release/)）是软件包和更新的来源（命名为`origin`），并且它没有被代理（当`P`等于`F`时，代理设置为false）。
- en: 'To collect additional information about the publisher of the packages, we type
    the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 若要收集有关软件包发布者的更多信息，我们可以输入以下命令：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: An overview of the recipe
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配方概览
- en: Using the main command, `pkg`, with the `publisher` keyword, we've found a list
    of publishers and that the `solaris` publisher is `online`, and a URI is enabled
    that points to the repository location, which is [http://pkg.oracle.com/solaris/release/](http://pkg.oracle.com/solaris/release/).
    Furthermore, there is no SSL digital certificate associated with the `solaris`
    publisher.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用主命令`pkg`并加上`publisher`关键字，我们找到了发布者列表，`solaris`发布者是`online`，并且启用了一个指向仓库位置的URI，即[http://pkg.oracle.com/solaris/release/](http://pkg.oracle.com/solaris/release/)。此外，`solaris`发布者没有与之关联的SSL数字证书。
- en: Listing and collecting the information and dependencies of a package
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出并收集软件包的信息和依赖关系
- en: To demonstrate how simple it is to administer packages, let's explore a useful
    example where we install a package on Oracle Solaris 11.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示管理软件包的简单性，让我们来看一个有用的例子，在Oracle Solaris 11上安装一个软件包。
- en: How to do it…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'First, we need to know which package we want to install. However, before installing
    any package, we need to confirm whether this package is already installed on the
    system by running the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要知道要安装哪个软件包。然而，在安装任何软件包之前，我们需要通过运行以下命令来确认该软件包是否已经安装在系统上：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As we can see, the `nmap` package (scanning tool) isn''t installed on Oracle
    Solaris 11; we can verify that this tool is available from the official source
    repository (`solaris`, according to the previous publisher list). Furthermore,
    before accomplishing this step, it''s suggested that we rebuild repository indexes
    (mainly if you don''t remember when a package was inserted or removed the last
    time) to speed up the lookup process later:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`nmap`软件包（扫描工具）没有安装在Oracle Solaris 11上；我们可以确认这个工具来自官方源仓库（根据之前的发布者列表是`solaris`）。此外，在执行此步骤之前，建议重新构建仓库索引（主要是如果你不记得上次添加或删除软件包的时间），以加速后续查找过程：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It''s time to search for the `nmap` package. We do this with the following
    command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候搜索`nmap`软件包了。我们可以通过以下命令来实现：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can confirm that `nmap` is available and isn''t installed on the system,
    but a bit more information about the package won''t hurt us. An easy way to know
    whether the `nmap` package is installed or not is by executing the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以确认`nmap`是可用的，并且尚未安装在系统上，但多了解一些关于该软件包的信息总是有帮助的。判断`nmap`软件包是否已安装的一个简单方法是执行以下命令：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If the last column (`IFO`) doesn''t have an `i` flag, then we can verify that
    the package isn''t installed. We can also obtain complementary information about
    `nmap` by typing the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果最后一列（`IFO`）没有`i`标志，那么我们可以确认该软件包没有安装。我们还可以通过输入以下命令来获取关于`nmap`的更多信息：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This last command is important because we''ve collected valuable attributes
    about the `nmap` package, such as its state (`Not installed`) and size (`12.28
    MB`). The `-r` option is necessary because it references a package in the repository
    from registered publishers. We can show Nmap''s license agreement in the same
    way:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令很重要，因为我们收集了关于`nmap`软件包的有价值属性，比如其状态（`未安装`）和大小（`12.28 MB`）。`-r`选项是必要的，因为它引用了来自注册发布者的仓库中的软件包。我们可以以相同的方式查看Nmap的许可证协议：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Sometimes, it''s advisable to know which packages are required to install a
    specific package (such as `nmap`) before you are able to try it. We can verify
    this by executing the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在尝试安装特定软件包（如`nmap`）之前，了解安装该软件包所需的依赖包是非常有用的。我们可以通过执行以下命令来验证：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can also reach the same result by executing the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过执行以下命令得到相同的结果：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `–t` option specifies `action.raw`, which is used to limit the search to
    a specific attribute, such as `depend`. The `–r` option matches packages based
    on the newest available version and gets information about noninstalled packages,
    and the `-o` option limits the columns to be shown in the output.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: We have a list of required packages to install a new package such as `nmap`,
    and all the packages are shown as `require`; however, this command would have
    shown as `optional` if we were managing another package.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous commands have verified that if a specific package is already installed
    (`nmap`), it reindexes the package catalog (to speed up the search) and collects
    details about the package. Furthermore, we've listed the decencies of the `nmap`
    package. We will notice that the number of packages that were indexed (847) is
    very high, and that's the main reason this operation takes some time.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Installing a package, verifying its content, and fixing the package corruption
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This time, we have sufficient conditions to install a package and verify its
    contents, and if we find a problem with any package, we are able to fix it. This
    is an exciting section because it will introduce us to many useful commands, and
    all of them are used in day-to-day Solaris 11 administration.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll learn the next procedure using the `nmap` package, but the same can be
    done using any other Solaris 11 package.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'According to the output, Solaris 11 didn''t create a BE. Sure, it was a very
    simple package installation. However, if we had installed a Solaris patch, the
    scenario would have been very different. We can check our installation by typing
    the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The last column shows us that the package has been installed, so to show the
    content of our installation, we type the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can use an alternative form, with presentation of additional information,
    by running the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Additionally, every package has an associated file named `manifest`, which
    describes details such as the package content, its attributes, and dependencies.
    We can view this `manifest` file of an installed package using the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might wonder whether it is possible to check whether a package installation
    has kept its integrity. Yes, you can manage this issue using the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s create a simple test where we break any file from the `nmap` package;
    afterwards, we check the package status by running the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We continue further by executing the following commands:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Wow! The command used to detect the `nmap` package corruption detected the
    exact problem. We can fix this potential problem in a very simple and quick way:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: An overview of the recipe
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the `nmap` package installation, we realized that it takes 51.67 MB after
    it is installed and that it hasn't created a new BE. In the remaining commands,
    we found out a lot of information; for example, the files are contained in the
    `nmap` package, this package runs on x86 or SPARC, it comes from the Solaris repository
    and has been developed by [http://insecure.org](http://insecure.org), its source
    file is `nmap-5.51.tgz`, and it only runs on userland. Afterwards, we verified
    the `nmap` integrity, corrupted it, and fixed it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装`nmap`软件包时，我们发现安装后占用51.67 MB的空间，并且没有创建新的BE。在接下来的命令中，我们发现了很多信息；例如，`nmap`软件包包含的文件，该软件包在x86或SPARC架构上运行，它来自Solaris软件仓库，由[http://insecure.org](http://insecure.org)开发，其源文件为`nmap-5.51.tgz`，并且仅在用户空间运行。之后，我们验证了`nmap`的完整性，损坏了它，并修复了它。
- en: Managing the IPS history and freezing and uninstalling packages
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理IPS历史记录以及冻结和卸载软件包
- en: Auditing is another current concern for companies, and most times, it's very
    helpful to know which package operations have happened recently. Furthermore,
    we're going to learn a way to drop the IPS command history.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 审计是公司当前的另一个关注点，通常情况下，了解最近发生了哪些软件包操作非常有帮助。此外，我们还将学习一种方法来删除IPS命令历史记录。
- en: How to do it…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'To gather this information, we execute the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集这些信息，我们执行以下命令：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We don''t always need or want to keep the history of our actions; Oracle Solaris
    11 allows us to erase the history by running a simple command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不总是需要或想要保留我们操作的历史记录；Oracle Solaris 11允许我们通过运行一个简单的命令来清除历史记录：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'From time to time, Oracle Solaris 11 packages undergo updates, and we know
    it''s advisable to update packages when there''s a new version available. Updates
    can be checked using the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 不时地，Oracle Solaris 11软件包会进行更新，我们知道，当有新版本可用时，最好更新软件包。可以使用以下命令检查是否有更新：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Nonetheless, it needs to be highlighted that if we execute `pkg update`, the
    entire system will be updated.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，必须强调的是，如果我们执行`pkg update`，整个系统将会被更新。
- en: 'In a rare situation, we might be required to freeze a package to prevent an
    update. This intervention, although very unlikely, is suitable when we have to
    keep a very specific software version in the system even when it is executing
    an update command, such as `pkg update`, to modify this content. The following
    command is used for freezing:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在极少数情况下，我们可能需要冻结一个软件包以防止其更新。这种干预虽然非常不可能发生，但当我们必须保持一个非常特定的软件版本在系统中时，即使它在执行类似`pkg
    update`的更新命令来修改内容时，也需要冻结。用于冻结的软件包的命令如下：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the same way, we can change our mind and unfreeze the `nmap` package by
    executing the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们可以改变主意，通过执行以下命令解冻`nmap`软件包：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Before we continue, we can use a nice trick to update Nmap again without using
    the `pkg update nmap` command. A facet represents an optional software component,
    such as the `locale` property, while variants represent a mutually exclusive software
    component (an x86 component against a SPARC component).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们可以使用一个巧妙的技巧来再次更新Nmap，而无需使用`pkg update nmap`命令。一个facet代表一个可选的软件组件，例如`locale`属性，而variants代表互斥的软件组件（例如x86组件与SPARC组件）。
- en: 'A package has an associated action and a facet is defined as a tag of the package''s
    action. So, when the `version.lock` facet is set to the `true` value (no matter
    the value that was set previously), the IPS framework checks whether a new version
    of the package is present on the repository:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一个软件包有一个关联的操作，而facet被定义为软件包操作的标签。所以，当`version.lock` facet被设置为`true`值时（无论之前设置的值是什么），IPS框架会检查软件仓库中是否有该软件包的新版本：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to learn more about variants and facets, refer to *Controlling Installation
    of Optional Components* from the *Adding and Updating Oracle Solaris 11.1 Software
    Packages* manual at [http://docs.oracle.com/cd/E26502_01/html/E28984/glmke.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28984/glmke.html#scrolltoc).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于variants和facets的信息，请参考*控制可选组件的安装*，该部分内容可以在[http://docs.oracle.com/cd/E26502_01/html/E28984/glmke.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28984/glmke.html#scrolltoc)的*添加和更新Oracle
    Solaris 11.1软件包*手册中找到。
- en: 'Finally, to finish our review of the IPS administration, an essential factor
    when administering packages is to know how to uninstall them:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了完成对IPS管理的复习，在管理软件包时一个重要的因素是知道如何卸载它们：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: An overview of the recipe
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作步骤概述
- en: It's possible to list all the actions performed by the administrator that have
    succeeded or failed on the IPS framework using the `pkg history` command, including
    the exact time when the `pkg` command was executed. This sure is a nice feature
    if we want to initiate an audit. There's a command called `pkg purge-history`
    that erases all history and must only be executed by the root user. We also learned
    about `pkg freeze`, which prevents Oracle Solaris 11 from updating a particular
    package. Finally, we've seen how easy it is to uninstall a package using `pkg
    uninstall`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the IPS Package Manager interface
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some administrators prefer using GUI to administer areas of Oracle Solaris 11\.
    This might be your preference, as well, and for this, there's Package Manager
    GUI, which is a well-made interface that makes it possible to accomplish almost
    every package administration. Personally, I believe it's a very neat tool if you
    want to view all available packages from the repository; when I need to install
    many packages at once, it makes the job easier.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Although the Package Manager GUI has multiple handy features, we won't discuss
    any of these characteristics here. If you want to know more about the graphical
    interface, I'm sure you will be able to explore and learn it on your own.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To launch the Package Manager interface, we go to **System** | **Administrator**
    | **Package Manager**:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00003.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: Nice! We've done a basic review of the IPS administration. Now, we will proceed
    with another basic review of BEs.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The GUI is a wonderful way to manage IPS packages on an Oracle Solaris 11 system,
    and it's able to make the most of IPS administration tasks as well as BE administration
    tasks.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Creating, activating, and destroying a boot environment
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I always like to ask this question with respect to BEs: what are the facts
    that make life easier when administering Oracle Solaris 11?'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'Maybe the answers aren''t so difficult; to prove this, let''s imagine a scenario.
    We are requested to update Oracle Solaris 11, and to do this, we need to reboot
    the system, insert the Oracle Solaris 11 installation DVD, and during the boot,
    we have to choose the upgrade option. Is the upgrade complete? Is there no further
    problem? Unfortunately, this is not true because there are some potential tradeoffs:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: We had to stop applications and reboot the operating system, and users had to
    stop work on their tasks
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there was trouble upgrading the Oracle Solaris operating system, we'll lose
    all old installation because the upgrade process will have overwritten the previous
    version of Oracle Solaris; consequently, we won't be able to reboot the system
    and go back to the previous version
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you will have realized, this is a big threat to administrators because in
    the first case, we had a working (but outdated) system, and in the second case,
    we risked losing everything (and our valuable job) if anything went wrong. How
    can we improve this situation?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所意识到的，这对管理员来说是一个重大威胁，因为在第一种情况下，我们拥有一个正常运行（但已过时）的系统，而在第二种情况下，如果出现问题，我们就有可能失去一切（以及我们宝贵的工作）。我们如何改进这种情况呢？
- en: 'In Oracle Solaris 11, when we are requested to upgrade a system, Oracle Solaris
    11 takes a BE automatically to help us during the process. The boot environment
    is a kind of clone that makes it possible to save the previous installation, and
    if anything goes wrong during the upgrade, the boot environment of Oracle Solaris
    11 lets us roll back the OS to the old state (installation). One of the biggest
    advantages of this procedure is that the administrator isn''t obliged to execute
    any command to create a BE to protect and save the previous installation. Oracle
    Solaris 11 manages the whole process. This has two advantages: the upgrade process
    gets finished without rebooting the operating system, and the boot environment
    enables us to roll back the environment if we encounter a problem.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Oracle Solaris 11 中，当我们需要升级系统时，Oracle Solaris 11 会自动创建一个 BE 来帮助我们完成该过程。引导环境是一种克隆，它使我们能够保存之前的安装，如果升级过程中出现任何问题，Oracle
    Solaris 11 的引导环境可以让我们将操作系统恢复到旧的状态（安装）。这种操作的最大优势之一是管理员无需执行任何命令来创建 BE 以保护并保存之前的安装。Oracle
    Solaris 11 会管理整个过程。这有两个好处：升级过程可以在不重启操作系统的情况下完成，并且引导环境让我们在遇到问题时可以回滚环境。
- en: You should know that BEs aren't only used for upgrade operations. Indeed, we
    can deploy them to patch the system, install an application, or create a test
    environment. In all of these cases, the BE makes it possible to revert the system
    to the previous state. So, after we have taken care of these fundamentals, it's
    time to practice.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该知道，BEs 不仅仅用于升级操作。事实上，我们可以使用它们来修补系统、安装应用程序或创建测试环境。在所有这些情况下，BE 使得将系统恢复到之前的状态成为可能。因此，在我们处理完这些基本内容后，就该开始实践了。
- en: Nowadays, professionals are making heavy use of the BE, and this is the true
    reason that creating, activating, and destroying BEs is most important when administering
    Oracle Solaris 11\. You can be sure that this knowledge will be fundamental to
    your understanding of Oracle Solaris 11 Advanced Administration.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，专业人员大量使用 BE，这也是在管理 Oracle Solaris 11 时，创建、激活和销毁 BEs 最为重要的真正原因。你可以确信，这些知识对你理解
    Oracle Solaris 11 高级管理至关重要。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, our system must have access to the Internet. Some extra
    free space might be required.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本配方，我们需要一台运行 Oracle Solaris 11 的机器（物理机或虚拟机）；我们以 root 用户身份登录系统并打开终端。此外，我们的系统必须能够连接到互联网。可能还需要一些额外的空闲空间。
- en: How to do it…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Without any delay, we execute the following commands:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不拖延地，执行以下命令：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Oracle Solaris 11 automatically creates an entry in the GRUB list and makes
    it the default choice. However, it is relevant to note that another BE named `solaris-backup-b`
    is already present on the system from previous tests and it will be used in some
    steps ahead.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Solaris 11 会自动在 GRUB 列表中创建一个条目，并将其设置为默认选择。然而，需要注意的是，名为 `solaris-backup-b`
    的另一个 BE 已经存在于系统中，这是之前测试时创建的，它将在后续的一些步骤中使用。
- en: 'To enable the `solaris-backup-1` BE, execute the following commands:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用 `solaris-backup-1` BE，请执行以下命令：
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Note the `Active` column from the last command. The flag for `solaris-backup-1`
    has changed to `R`, which means that it will be the active boot environment in
    the next boot. Therefore, it''s time to reboot the system and list all the BEs:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最后一条命令中的 `Active` 列。`solaris-backup-1` 的标记已经变为 `R`，这意味着它将在下一次启动时成为活动的引导环境。因此，现在是重启系统并列出所有
    BE 的时候了。
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If we need to destroy a boot environment (not the current one, for sure), we
    can do so by executing the following command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要销毁一个引导环境（当然不是当前的那个），可以通过执行以下命令来实现：
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: What can we say about GRUB? There is no problem with it because Oracle Solaris
    11 automatically removed the BE entry from the existing GRUB configuration.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们该如何看待 GRUB 呢？其实没有问题，因为 Oracle Solaris 11 会自动从现有的 GRUB 配置中移除 BE 条目。
- en: An overview of the recipe
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配方概览
- en: Creating a new BE is an excellent way to have an additional environment to initially
    test a new Oracle Solaris 11 patch or operating system upgrade from Oracle. If
    something goes wrong, we are able to switch back to the old environment without
    losing any data. Following the creation of the BE, we need to remember to activate
    the new BE before rebooting the system.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Listing and renaming a boot environment
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is surprising that little details can help us with day-to-day administration.
    We've been using some repository commands since the beginning of the chapter;
    now, it's time to learn more about related commands.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, our system must have access to the Internet and some extra
    free space on disk.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list existing boot environments is straightforward; we do this by running
    the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: According to the preceding output, the active BE is `solaris` (flag `N`), it'll
    be used in the next boot (flag `R`), its size is 4.99 gigabytes, and its `Mountpoint`
    is `/`. There is other information too, but that isn't so relevant now. In this
    specific example, there's another BE named `solaris-backup-1` (if the reader doesn't
    have a BE with the same name, it's fine to test using the existing solaris BE)
    that this time has taken up just 163 KB.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Oracle Solaris 11 makes it simple to rename inactive boot environments with
    the execution of the following commands:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: An overview of the recipe
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The listing and renaming of a BE is fundamental to handling and managing it.
    The `beadm list` command shows us the directory that each BE is mounted on and
    the space that it takes. After Oracle Solaris 11 automatically creates a BE (the
    first one) during installation, we are able to find out when the operating system
    was installed. Renaming a BE is a complementary step that helps us comply with
    the name policy and makes administration easier.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an IPS local repository
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is convenient to install packages from the official Oracle repository, but
    access to the Internet could become very intensive if in the company, there are
    a lot of installed machines with Oracle Solaris 11 that repeat the same routine
    to install packages. In this case, it is very handy to create a local IPS repository
    with the same packages from the official repository but have them available on
    a local network.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, our system must be able to access the Internet. There
    are further requirements, such as extra disk (physical or virtual), to create
    a **Z File System** (**ZFS**), and we have to download the repository image.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the repository image, go to [http://www.oracle.com/technetwork/server-storage/solaris11/downloads/index.html](http://www.oracle.com/technetwork/server-storage/solaris11/downloads/index.html),
    click on **Create a Local Repository**, and download all the available parts (at
    the time of this writing, there are four parts). Extract and concatenate them
    by executing the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载存储库镜像，请访问[http://www.oracle.com/technetwork/server-storage/solaris11/downloads/index.html](http://www.oracle.com/technetwork/server-storage/solaris11/downloads/index.html)，点击**创建本地存储库**，然后下载所有可用的部分（在撰写本文时，共有四个部分）。执行以下命令解压并连接它们：
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How to do it…
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can create the repository in a separated disk to get some performance and
    maintenance advantage. Indeed, we aren''t obliged to do this, but it is greatly
    recommended. To list the disks that are available (the `format` command), we create
    a new pool and then a new ZFS filesystem in this pool, and execute the following
    command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将存储库创建在一个独立的磁盘中，以获得一些性能和维护方面的优势。事实上，我们并不是必须这样做，但强烈推荐这么做。要列出可用的磁盘（`format`命令），我们在这个池中创建一个新的池，然后创建一个新的ZFS文件系统，并执行以下命令：
- en: '[PRE33]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We realize that if the second disk (`c8t1d0`) doesn''t have any partitions,
    then the following sequence of commands creates a pool (the `zpool create` command).
    We list it (the `zpool list` command) and create a new ZFS filesystem (the `zfs
    create` command), as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们意识到，如果第二块磁盘（`c8t1d0`）没有任何分区，则以下命令序列将创建一个池（`zpool create`命令）。我们列出它（`zpool list`命令）并创建一个新的ZFS文件系统（`zfs
    create`命令），如下所示：
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'It''s time to use the repository image (`solaris-11-repo-full.iso` from the
    *Getting ready* section) to create our local repository, and to do this, we need
    to mount this image and copy all of its contents (about 6.8 GB) to the repository
    filesystem that we created. Therefore, in the first step, we create a mount point:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候使用存储库镜像（来自*准备工作*部分的`solaris-11-repo-full.iso`）来创建我们的本地存储库了，为此，我们需要挂载该镜像并将其所有内容（约6.8
    GB）复制到我们创建的存储库文件系统中。因此，在第一步中，我们创建一个挂载点：
- en: '[PRE35]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, we create a device file that points to the repository image using the
    `lofiadm` command and mount it:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用`lofiadm`命令创建一个指向存储库镜像的设备文件并挂载它：
- en: '[PRE36]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To copy the image content to the local repository, we run the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要将镜像内容复制到本地存储库，我们执行以下命令：
- en: '[PRE37]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Configure the repository server service in **Service Management Facility** (**SMF**).
    If you still aren't comfortable with SMF, I suggest reading [Chapter 5](part0069_split_000.html#page
    "Chapter 5. Playing with Oracle Solaris 11 Services"), *Playing with Oracle Solaris
    11 Services*, later. So, the use of the `svcprop` command makes it possible to
    verify some service properties. Likewise, the `svccfg` command is appropriate
    if you wish to change a specific property from a service.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在**服务管理设施**（**SMF**）中配置存储库服务器服务。如果你还不熟悉SMF，我建议稍后阅读[第5章](part0069_split_000.html#page
    "Chapter 5. Playing with Oracle Solaris 11 Services")，*玩转Oracle Solaris 11服务*。因此，使用`svcprop`命令可以验证某些服务属性。同样，如果你希望更改服务的特定属性，`svccfg`命令是合适的选择。
- en: 'To verify what the current repository directory is, we execute the following
    command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证当前的存储库目录，我们执行以下命令：
- en: '[PRE38]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We change the repository directory and make it read-only by running the following
    command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过运行以下命令更改存储库目录并将其设为只读：
- en: '[PRE39]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We quickly check our changes by running the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过运行以下命令快速检查我们的更改：
- en: '[PRE40]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'To avoid a TCP port collision with any existing service that is configured
    on port `80`, we change it to `9999`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免与任何已配置在端口`80`上的服务发生TCP端口冲突，我们将其更改为`9999`：
- en: '[PRE41]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, we reload the repository configuration, start it, and then index the repository
    catalog for a better package search operation:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们重新加载存储库配置，启动它，然后对存储库目录进行索引，以提高软件包搜索操作的效率：
- en: '[PRE42]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We list the current configured publisher and configure Oracle Solaris 11 for
    a new one:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们列出当前配置的发布者，并为Oracle Solaris 11配置一个新的发布者：
- en: '[PRE43]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We need to take care. In the preceding command, the `-G` option removed any
    existing origins (repositories) of the `solaris` publisher, and the `-g` option
    set a new URI that points to the local repository of the same publisher (`solaris`).
    Furthermore, the URL, `solaris.example.com`, points to the local system address
    of the repository machine (it could be `127.0.0.1`).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要小心。在之前的命令中，`-G`选项移除了`solaris`发布者的任何现有源（存储库），而`-g`选项设置了一个新的URI，指向同一发布者（`solaris`）的本地存储库。此外，`solaris.example.com`
    URL指向存储库机器的本地系统地址（它可以是`127.0.0.1`）。
- en: 'We now have the opportunity to test our new repository:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有机会测试我们的新存储库：
- en: '[PRE44]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Wow! We''ve listed the configured publishers and changed the `solaris` publisher
    URI. Additionally, we are able to collect more information about the local repository
    by running the following command:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We can change any attribute of the repository, and afterwards, verify our changes
    by executing the following command:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Sometimes, we''ll need to update our local repository from a reliable and updated
    source (Oracle). We execute the following command to accomplish this task:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'By contrast, the most impressive fact is that we could have used this same
    command to copy the entire repository from the official Oracle repository at the
    beginning of this recipe instead of downloading the entire repository, concatenating
    the parts, creating a device using the `lofiadm` command, executing the `rsync`
    command, and so on. I had a personal experience when using this particular command
    in which, for some reason, there was a download error while I was getting packages.
    To continue with a download that was initially interrupted, we run the following
    command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: It's almost the same command, but we use the `-c` option here instead.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'In some situations, we want to access our local repository to get some packages,
    but by using another interface. To interact with our own repository, we need to
    open a web browser and navigate to our local repository (in my test environment,
    the IP address is `192.168.1.133`—`solaris11.example.com`—and the port is `9999`):'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00004.jpeg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we searched for the `nmap` package, and the interface
    showed us that the specified package is already installed. If this is the case,
    we take a separate filesystem to improve the read/write performance.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Configuring a local repository is a suitable method to gain more control on
    package administration and speeding up IPS operations.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a secondary IPS local repository
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've configured only one local repository, but we could have two or
    more local repositories for distinguished goals, and this would be very useful
    for a company with independent production and training environments. Let's have
    a look at the example in the following section.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, our Solaris 11 system needs to have access to the Internet.
    Some extra free space on the disk will be required, as well as an Internet browser.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start with, we create a ZFS filesystem:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Once the ZFS filesystem is created, the following step is required to create
    a repository (an empty one—only the skeleton). We set a publisher and verify that
    everything went well using the following commands:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, we add a new instance of the SMF `pkg/server` named `training` and two
    property groups (using the `addpg` parameter) with some predefined properties
    (more about services can be learned from [http://docs.oracle.com/cd/E26502_01/html/E29003/docinfo.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E29003/docinfo.html#scrolltoc)
    and their respective command manual pages). In the end, we enable the training
    instance:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'If you recall, we used the port `9999` in the first repository we configured.
    For this second repository, we configure the port `8888`, after which the repository
    path will be set:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'As we did in the first repository, we need to update the index of the second
    repository and start the new repository instance:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We can access the repository using a browser at `http://solaris11.example.com:8888`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00005.jpeg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: An overview of the recipe
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we learned how to create a second repository, which can be dedicated
    to accomplishing a different goal from the first repository rather than the one
    from the previous recipe. The main command from this recipe is `pkgrepo`, which
    creates a new local repository to store packages. After that, we configure the
    SMF framework to offer this new repository automatically and on a planned TCP
    port.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Publishing packages into a repository
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Certainly, inserting packages into a local repository won't be a very frequent
    task, but surprisingly, this action saves time. Besides, this topic isn't hard;
    the process is very interesting because we will learn to handle complex programs
    such as Veritas Storage Foundations HA.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, it's preferable that our Solaris 11 system has access
    to the Internet.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can set the prefix that was previously marked `alexandreborges.org` to `training`
    to make our administration easier and more consistent with the name of the instance
    service that we chose when an SMF service entry was made for this repository:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'An interesting fact is that the repository is usually created as read-only,
    and to change it to read/write is straightforward:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The result of the previous command can be seen by running the following command:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We now reload the configurations and start the repository services again:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The new repository (training) doesn''t appear in the publisher list yet:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: What's this `solarisstudio` publisher? Where did this publisher line come from?
    Relax! I've installed the Oracle Solaris Studio 12.3 to execute some tests (not
    shown here), but you can disregard it. There's nothing related to the current
    explanation, but if you're a developer, you can try it from [http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/index.html](http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/index.html).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'Returning to the main subject, we need to add the publisher (`training`) that
    points to the secondary repository (`http://localhost:8888`) by running the following
    command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Finally, let''s pick two packages (`wireshark` and `wireshark-common`) from
    the `solaris` repository and include them in the secondary repository:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We can confirm our finished task by executing the following command:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Using another approach, we are able to obtain the same results in a detailed
    report from the Apache web server by executing the following commands:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We can now open a web browser and go to the URL, `http://localhost:8888`:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00006.jpeg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
- en: Fantastic! Wireshark packages are now available from the Apache web server and
    can be downloaded and installed anytime.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Insertion of a package into a local repository is a result of the previous recipe.
    This kind of operation is performed when a technical team needs to share a new
    package among its members. The key command is `pkgrecv`, which does most of the
    task for us.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Adding big applications into a repository
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some professionals might wonder whether it is possible to insert complex applications
    into repositories. Sure! For example, let's take the **Storage Foundation and**
    **Veritas Cluster Server High Availability Solutions** (both are available in
    version 6.01 at the time of this writing).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Additionally, the system must have access to the Internet, some extra
    space on the disk, and packages of Storage Foundation and Veritas Cluster Server
    High Availability Solutions, which can be downloaded from [http://www.symantec.com/products-solutions/trialware/?pcid=recently_released#](http://www.symantec.com/products-solutions/trialware/?pcid=recently_released#).
    The tarball is named `VRTS_SF_HA_Solutions_6.0.1_Solaris_x64.tar.gz`, and it is
    composed by Veritas Storage Foundation 6.0.1 and Veritas Cluster Server 6.0.1\.
    You can install them in keyless mode for 60 days to try it out.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After downloading the tarball into the home directory (`/root`), we extract
    it:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In the next step, we find out which packages are included in the Storage Foundation
    HA application. Then, to list its contents, we execute the following:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'We already know the content of the SFHA 6.0.1 software, and in the next step,
    we create a publisher named `Symantec` that has `/root/SFHA601/dvd2-sol_x64/sol11_x64/pkgs/VRTSpkgs.p5p/`
    as the repository location:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'On listing the existing repositories, we''re able to see the new repository:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Moreover, it might come in handy to collect further information about this
    new repository named `Symantec`:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Brilliant! A new publisher named `Symantec` has come up, which points to `/root/SFHA601/dvd2-sol_x64/sol11_x64/pkgs/VRTSpkgs.p5p/`.
    After all this work, we can install Veritas Volume Manager and Veritas Filesystem
    Packages. However, this is not the usual method to install Symantec Storage Foundation
    HA because Symantec recommends using the `installer` or `installsfha` script,
    which is contained inside a DVD. By the way, the following command is necessary
    to initiate the installation:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The `--accept` keyword needs to comply with the Symantec license.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the repository (and its respective packages) we just made and configured
    as a publisher named `Symantec` is not available for network access, and unfortunately,
    it is not enough for our purposes. However, it''s relatively easy to make all
    these `Symantec` packages available through our previous `training` publisher;
    let''s do this with the following command:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Again, we can check these uploaded packages by going to the URL, `http://localhost:8888/en/catalog.shtml`:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00007.jpeg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
- en: An overview of the recipe
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This procedure is almost identical to the previous one, but we've tried to make
    things more practical. Moreover, Veritas Storage Foundation and Veritas Cluster
    Server are well-known programs, the value of which has already been proved with
    the response received from the market. Another good takeaway from this example
    is that Symantec provides a little database package (`VRTSpkgs.p5p`) to help us
    create the appropriate repository that contains all the package references.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own package and publishing it
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've been working using packages provided from Oracle or another place,
    but it would be nice if we could create and publish our own package. This recipe
    requires that we have basic experience with compiling and installing free software.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. For example, we install a couple of packages such as `system/header`
    and `gcc-45` and `socat`.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we need to do is install some required Oracle Solaris 11 packages,
    which will be necessary for the next steps:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The `gcc-45` package is probably already installed on the system, and it will
    optionally demand the `gcc-3` package; if this is the case, then we have to verify
    that the `gcc45` software is already installed and check its dependencies by running
    the following two commands:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'According to the last line in the previous command output, the `gcc-45` package
    depends, optionally (`type=optional`), on `gcc-3`, so we can install `gcc-3` with
    the following command:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We check the dependencies of the `gcc-3` package by executing the following
    command:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'We list the `gcc-3` status and its details by executing the following command:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: To make this example more attractive, we can download the socat tarball application
    from [http://www.dest-unreach.org/socat/](http://www.dest-unreach.org/socat/).
    Socat is an amazing tool that is similar to the Netcat tool, but socat adds many
    additional features, such as the possibility to encrypt a connection to evade
    IPS systems. After downloading the `socat` tool, we're going to create a very
    simple, persistent backdoor to package it in the Oracle Solaris 11 format, to
    publish it into the secondary repository (`http://localhost:8888`) and install
    it on our own system. After we have completed all these steps, a practical example
    will be displayed using this backdoor.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing this procedure, I''ve downloaded socat Version 2.0.0-b6
    (`socat-2.0.0-b6.tar.gz`), copied it to `/tmp`, and opened the tarball:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Let''s create the `socat` binary. The usual step is to run the `configure`
    script to check all socat requirements on the system, so let''s execute it:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Before compiling the socat application, we have to edit some source files and
    change some lines because the original socat files don''t compile on Oracle Solaris
    11\. In the same socat directory, we need to edit the `xioopts.c` file, go to
    lines 3998 and 4001, and change them according to the following illustration:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The following lines are the original content of the file:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'After our change, the content looks like the following:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now, it''s convenient to make it the following:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'In the next step, we modify the `/root/.bashrc` profile in the following way:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'All the changes we have made so far enable us to execute the `socat` tool from
    anywhere and access its manual pages too:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Note
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Socat is a command-line-based utility that establishes two bidirectional byte
    streams and transfers data between them.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the socat tool encrypts connections, we need to create a digital certificate:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'At the server side, we''ve finished the procedure to configure socat. At the
    client side, it''s necessary to create a key too:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: For the purpose of explanation and demonstration, I'm going to use the server
    as a client, but when handling a real-life situation, we need to execute the same
    command (`openssl req -new -key solaris11.key -x509 -days 9999 -out solaris11.crt`)
    on our client.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'On the same machine (client), we create a script that starts the socat tool
    in a persistent listening mode on port `3333`:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Though the preceding script is extremely easy, we need to pay attention to
    the following deployed options:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTEN:3333**: This is the port where socat is listening'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reuseaddr**: This allows other sockets to bind to an address even if the
    local port (`3333`) is already in use by socat'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fork**: After establishing a connection, this handles its channel in a child
    process and keeps the parent process attempting to produce more connections, either
    by listening or by connecting in a loop'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cert**: This is the digital certificate that we''ve made'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cafile**: This specifies the file with the trusted (root) authority certificates'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EXEC**: This will be executed'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Execute the following command to make it executable:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Now that the socat configuration is complete, the next task is executed in
    the Oracle Solaris domain. In the first step, we create a manifest file, which
    is used to create an IPS package, because this manifest file contains all the
    required dependencies of our backdoor IPS package. The backdoor manifest file
    will be created in parts:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The content from the manifest file is not so complex, and there are keywords
    (actions) that can be interesting to learn. Moreover, the syntax is straightforward:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Some of these actions are as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '**file**: This specifies a file installed by the package'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**set**: This specifies information such as name and description'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dir**: This is the directory that is installed by the package'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hardlink**: This points to a hardlink'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**link**: This determines a symbolic link'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**license**: This determines what kind of license is bound to the package'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**depend**: This lists the dependencies that this package has on other software
    or tools'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**legacy**: This sets any required information that must be installed in the
    legacy package database to keep the compatibility'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Certainly, there are other complex manifests, but nothing that is complex enough
    to worry us. The following example adopts the ready manifest of the Netcat package:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'In the next step, we create a MOG file (which is a kind of metadata file):'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'As you will have realized, all the metadata information included in the `backdoor.mog`
    file was added at the end of the `manifest.level2` file. In the third step, we
    include dependencies into the manifest file and then execute the following commands:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Once the dependencies list is generated, we need to resolve the dependencies
    against packages that are installed on the system:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Before proceeding, we need to change the previous file (`backdoor_manifest.level3.res`
    under `/tmp` directory) to install the backdoor package in the `/backdoor` directory:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'We are almost there. Our final goal is to assemble the package and add it to
    the repository:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Wow! We''ve done it! A good way to test this is to install our backdoor package:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Finally, we test the functionality of the backdoor. In the first terminal,
    we type the following:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: The second step should be performed from another Oracle Solaris 11 machine (our
    client). However, for test purposes, I've used the same host.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There's no question that this recipe is very interesting and complex because
    we created a backdoor using an encrypted connection and used different programs
    to accomplish our tasks. Furthermore, we learned that the package has a manifest
    that describes the attributes and dependencies of the associated package. It wouldn't
    be an exaggeration to say that the manifest is the soul of the package.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Managing an IPS publisher on Solaris 11
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maybe the administration of an IPS publisher doesn't seem so important compared
    to other activities, but it's a fundamental concept that can be used to explain
    other complex processes. It is surprising that these little details can help us
    with daily administration. So, as we've been using some repository commands since
    the beginning of the chapter, it's now time to learn more related commands.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a system (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list existing publishers, we execute the following command:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'If we require more information about a specific publisher, we can gather it
    by executing the following command:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Among all these publishers, one is the preferential one. We display which one
    is preferential by running the following command:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Needless to say, sometimes the administrator might have to change the preferred
    publisher; this task can be done by executing the following command:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Returning to the old setting is straightforward. This is done using the following
    command:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: An overview of the recipe
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main idea of this recipe was to change the primary publisher using the pkg
    `set-publisher` command. Sometimes, it's an advisable procedure to enforce or
    valorize such a repository.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: Pinning publishers
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's not rare when the system has many configured publishers and it becomes
    necessary to ensure that a package that was installed from one publisher is not
    updated from another.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I've seen some situations where an installed package from a very
    reliable repository was corrupted by an update from another, not-so-reliable repository.
    That's funny. The same package exists, and it can be installed from two different
    repositories, but one of these repositories is less reliable, and eventually,
    it can offer a bad package. This is where pinning becomes useful. I guarantee
    that a package installed from a source (repository) will always be updated from
    the same repository. Let's learn how to do this.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a system (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Access to the Internet is optional.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To pin a publisher, we type the following:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Undoing the configuration is simple:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Note
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any new publisher will be pinned by default.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: From now on, every package will always be updated from its original repository
    even if an update is available from another one.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an interesting situation. Usually, an administrator needs a package
    offered by two different publishers, each one with a determined level of reliability.
    In this case, we need to choose one of these and create a "sticky channel" to
    it.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Changing the URI and enabling and disabling a publisher
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another requirement can be to change the URI of a publisher and point it to
    a new repository. For example, we copied all the Oracle Solaris 11 packages to
    the `repo` directory under `/repo_pool/repoimage/`.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a system (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Access to the Internet is recommended.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We alter a publisher to point to a different URI by typing the following commands:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Remember that the URI, `http://localhost:9999`, points to the repository, `/repo_pool/repoimage/repo`.
    To revert it, we execute the following command:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'We list the publishers again by executing the following command:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Sometimes, we might be forced to disable a publisher; this task can be executed
    according to the following example:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'To re-enable it, we run the following command:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: An overview of the recipe
  id: totrans-403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The handling of publishers is a very common task in Oracle Solaris 11, and we're
    probably going to be enabling and disabling publishers very often using the `pkg
    set-publisher` command.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mirror repository
  id: totrans-405
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you remember, at the beginning of the chapter, we created a local repository
    with all the Oracle Solaris 11 packages and indexed this repository as being from
    the `solaris` publisher. Thus, we have two repositories; the first one refers
    to the Oracle website using the URI, [http://pkg.oracle.com/solaris/release/](http://pkg.oracle.com/solaris/release/),
    and the second one—which is referred by the URI, `http//localhost:9999`—is stored
    on disk (`/repo_pool/repoimage/repo`). Nonetheless, the publisher is the same:
    `solaris`. So, as both have the same contents, one of them is a mirror of the
    other and can be configured with the steps discussed in the next sections.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Access to the Internet is necessary.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to set a mirror repository by executing the following commands:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: This output is very interesting because now there are two occurrences of the
    `solaris` publisher; the first is the original (`origin`), which contains the
    metadata and packages, and the second is the mirror, which contains only the contents
    of the packages. It is necessary to install a package because Oracle Solaris 11
    prefers the mirror to retrieve the contents of the packages, but IPS also downloads
    the meta information (the publisher's catalog) from the original.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: 'We can remove the URI that points to this mirror by executing the following
    command:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: An overview of the recipe
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mirroring repositories is another way to say that if the primary repository
    is unavailable; there's a second place available to download the packages from.
    In other words, the same publisher offers its packages from two different locations.
    Additionally, mirrors offer an alternative to download the package contents without
    overloading the original repository.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: Removing a repository and changing the search order
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some good administrative commands to maintain the consistency of the
    repository configuration. However, the publisher doesn't always maintain its importance
    and priorities, and this gives us the flexibility to invert the order of the search.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Access to the Internet is optional.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We remove a publisher using the following commands:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'We might still prefer that the search action look for a specific publisher
    before another one. This task can be executed using the following commands:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: An overview of the recipe
  id: totrans-426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This short recipe teaches us how we can change the search order of repositories
    according to our best interests.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: Listing and creating a boot environment
  id: totrans-428
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've learned that boot environments have a wide spectrum of application on
    Oracle Solaris 11, like patching a system, for example. This section lets us analyze
    the administration and management of a BE a bit more.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: Without any question, listing and creating BEs is one of the more basic tasks
    when administering a boot environment. However, every BE administration starts
    from this point.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Access to the Internet is optional. Some extra space on the disk is
    important.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most basic command when administering a BE is to list the existing boot
    environments:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'The next natural step is to create a new boot environment:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: An overview of the recipe
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we had a quick review of how to create boot environments. This
    recipe will be used a number of times in future procedures.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: Mounting, unmounting, installing, and uninstalling a package in an inactive
    boot environment
  id: totrans-440
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many times, we want to install a package in an inactive BE and later (maybe
    at night), boot this BE and test whether the programs are working. Furthermore,
    we can keep all BEs consistent with each other and have them contain the same
    packages without booting each one to install a new package.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-442
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-444
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the following commands to install a new package into a new BE (`solaris_test_1`):'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'We install the package in this mounted boot environment by running the following
    command:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'The `unrar` package was installed into the new BE (`solaris_test_1`) and not
    into the current one (`solaris`). Proving this fact is easy:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Note
  id: totrans-451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The same package can be removed using the following command:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Once the `unrar` package has been installed, we can unmount the BE by running
    the following commands:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: An overview of the recipe
  id: totrans-456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This neat recipe taught us how to mount an inactive boot environment and install
    a package into this inactive BE by using the `-R` option to specify the mount
    point.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: Activating a boot environment
  id: totrans-458
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a system with multiple BEs, situations might arise when it becomes necessary
    to activate a BE to test a patch or a new package without running the risk of
    losing the production environment. Therefore, a new BE will have to be created,
    changed, and finally, tested. However, it will have to be activated first. So,
    in all cases, the following recipes will be suitable.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Some extra disk space might be necessary.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-462
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s activate the recently created BE:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Now, let''s reboot it:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'After rebooting, let''s test the existing `unrar` package and command:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Now, let''s test our procedure by executing the following command:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Wonderful! The `unrar` package has appeared on the system in the way that we
    planned.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  id: totrans-472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The act of activating and rebooting a BE are the final steps to be completed
    before we start using the BE. Likely, it's during this stage that we can test
    an installation package, an installation patch, or even an Oracle Solaris 11 upgrade
    without worrying about losing the whole system.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: Creating a boot environment from an existing one
  id: totrans-474
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's an appropriate time to talk about the possibility of creating a new
    environment from an existing one.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-476
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, it's necessary that we have a machine (physical or virtual)
    running Oracle Solaris 11; we log in to the system as the root user and open a
    terminal. Some extra disk space might be necessary.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-478
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform this recipe, we''re obliged to create a backup from the current
    BE (`solaris_test_1`), after which we should be successful in creating a new BE
    from this backup. The whole process uses snapshots. (In this case, we are using
    a logical snapshot, which uses pointers to leave the original image untouched.)
    Let''s create a snapshot by running the following command:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'We are now ready to create a new BE from another one:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: At this point, it might be logical to activate this environment (`beadm activate
    solaris_test_2`) and boot it.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, before finishing the chapter, we need to reactivate the original `solaris`
    boot environment, reboot the system, and remove all the remaining BEs:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: An overview of the recipe
  id: totrans-486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This final recipe from the chapter has shown us a quick way to create a new
    BE based on an old one. To do this, we needed to take a backup first. Finally,
    we destroyed the existing BEs to clean up our system. Obviously, it's not appropriate
    to destroy the booted BE.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-488
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Adding and Updating Oracle Solaris 11.1 Software Packages* (*Oracle Solaris
    11.1 Information Library*) at [http://docs.oracle.com/cd/E26502_01/html/E28984/docinfo.html#scrolltoc](http://docs.oracle.com/cd/E26502_01/html/E28984/docinfo.html#scrolltoc)'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Copying and Creating* *Oracle Solaris 11.1 Package Repositories* at [http://docs.oracle.com/cd/E26502_01/html/E28985/index.html](http://docs.oracle.com/cd/E26502_01/html/E28985/index.html)'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Publishing IPS Packages – Guide for Developers* (by Erick Reid and Brock Pytlik)
    at [http://www.oracle.com/technetwork/server-storage/solaris11/documentation/ips-packages-webinarseries-1666681.pdf](http://www.oracle.com/technetwork/server-storage/solaris11/documentation/ips-packages-webinarseries-1666681.pdf)'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introducing the Basics of Image Packaging System (IPS) on Oracle Solaris 11*
    (by Glynn Foster) at [http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-083-ips-basics-523756.html](http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-083-ips-basics-523756.html)'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Command Summary: Basic Operations with the Image Package System in Oracle
    Solaris 11* (by Ginny Henningsen) at [http://www.oracle.com/technetwork/articles/servers-storage-admin/command-summary-ips-1865035.html](http://www.oracle.com/technetwork/articles/servers-storage-admin/command-summary-ips-1865035.html)*Creating
    and Administering Oracle Solaris 11 Boot Environments* at [http://docs.oracle.com/cd/E23824_01/html/E21801/administer.html#scrolltoc](http://docs.oracle.com/cd/E23824_01/html/E21801/administer.html#scrolltoc)'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to Publish Packages to the Imaging Packaging System* at [http://www.oracle.com/technetwork/systems/hands-on-labs/introduction-to-ips-1534596.html](http://www.oracle.com/technetwork/systems/hands-on-labs/introduction-to-ips-1534596.html)'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Solaris 11 REPO - Configuration of Multiple Repositories Using Multiple Depot
    Server Instances* (by Steven ESSO) at [http://stivesso.blogspot.com.br/2012/11/solaris-11-repo-configuration-of.html](http://stivesso.blogspot.com.br/2012/11/solaris-11-repo-configuration-of.html)'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to Create the Solaris 11 IPS Repository* (by Brad Hudson) at [http://bradhudsonjr.wordpress.com/2011/08/09/how-to-create-the-solaris-11-ips-repository/](http://bradhudsonjr.wordpress.com/2011/08/09/how-to-create-the-solaris-11-ips-repository/)'
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to Create Multiple Internal Repositories for Oracle Solaris 11* (by Albert
    White) at [http://www.oracle.com/technetwork/articles/servers-storage-admin/int-s11-repositories-1632678.html](http://www.oracle.com/technetwork/articles/servers-storage-admin/int-s11-repositories-1632678.html)'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to Create and Publish Packages to an IPS Repository on Oracle Solaris
    11* (by Glynn Foster) at [http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-097-create-pkg-ips-524496.html](http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-097-create-pkg-ips-524496.html)'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Oracle Solaris 11 Cheat Sheet for the Image Packaging System* at [http://www.oracle.com/technetwork/server-storage/solaris11/documentation/ips-one-liners-032011-337775.pdf](http://www.oracle.com/technetwork/server-storage/solaris11/documentation/ips-one-liners-032011-337775.pdf)'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Solaris 11: how to setup IPS repository* (by Alessio Dini) at [http://alessiodini.wordpress.com/2012/10/03/solaris-11-how-to-setup-ips-repository/](http://alessiodini.wordpress.com/2012/10/03/solaris-11-how-to-setup-ips-repository/)'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

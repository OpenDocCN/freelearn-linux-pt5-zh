- en: Chapter 8. Running an Apache Web Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache on your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restarting Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Apache modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a static HTML site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a virtual host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting options for directories, files, and locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a password-protected website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a listing of files in a directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting incoming requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up encrypted websites with SSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging incoming requests and errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing logfiles using Webalizer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For most people, the Web is the Internet. Since it gained popularity in the
    1990s, the World Wide Web has become a part of the everyday life of nearly every
    person on this planet. Websites provide us with information; social media allow
    us to communicate with other people; and online retail allows us to shop all over
    the world. The humble **Hypertext Transfer Protocol** (**HTTP**) makes all these
    killer features of the Internet possible.
  prefs: []
  type: TYPE_NORMAL
- en: Modern web browsers are capable of much more than just displaying hypertext.
    Thanks to the inclusion of the JavaScript runtime, the web has become the most
    widespread computing platform available. Programmers who want to reach the broadest
    number of users don't have to dedicate resources to creating a version of their
    application for every operating system. Instead they can create a web application,
    which can run on every device with a capable browser.
  prefs: []
  type: TYPE_NORMAL
- en: This arrangement is also a boon for system administrators, who can choose to
    implement many services in the form of web applications and not worry about supporting
    software installed locally on many client computers. Come upgrade time, it's much
    more efficient to update one server than each client system.
  prefs: []
  type: TYPE_NORMAL
- en: There are many web servers to choose from but Apache is by far the most popular
    solution, and Webmin supports it very well. Another open source web server, which
    is currently gaining popularity, is Nginx, but Webmin's support for it is currently
    very limited.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover topics related to setting up Apache, configuring
    it to serve static websites, and analyzing logfiles. In [Chapter 11](ch11.html
    "Chapter 11. Running Web Applications"), *Running Web Applications*, we'll cover
    topics related to running dynamic sites and web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache on your system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some operating systems come bundled with the Apache web server as a matter of
    course. Others provide packages in their repositories, which allow you to quickly
    install Apache with a working default configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start by checking whether Apache is already installed on your system. If it
    is, Webmin should recognize it and place the **Apache Webserver** module in the
    **Servers** section of its menu.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up Apache on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow steps described in the recipe *Installing software packages* in [Chapter
    1](ch01.html "Chapter 1. Setting Up Your System"), *Setting Up Your System*, to
    find and install the Apache web server package. You should use the Apache 2 package
    if available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on your system, the Apache version 2 package may be named `apache2`
    or simply `httpd`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you're using the `iptables` firewall, follow steps described in the recipe
    *Allowing access to a service through the firewall* in [Chapter 3](ch03.html "Chapter 3. Securing
    Your System"), *Securing Your System*, to allow incoming connections on port `80`
    and, if you plan to use HTTPS, on port `443`.![How to do it...](img/5849_08_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver**, and click the **Start Apache**
    link to start the web server if it wasn't started automatically during installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To verify that Apache is working correctly, use your browser to visit the URL
    `http://your.server`, where `your.server` is either the domain name or the IP
    address of the machine you installed Apache on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Apache test page should greet you. It may simply state **It works!** or
    provide more information about running Apache on your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your operating system's package maintainers provide a working default configuration
    of Apache for your system. Installing the package and starting the HTTP server
    daemon should be sufficient to get a functional starting point for further customization.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP servers listen on ports 80 and 443 by default. When you point your browser
    at a web server it will try to connect to port 80 when making a standard `http://`
    request or to port 443 when making a secure `https://` request. You should make
    sure those connections to your server on these ports are not dropped by your system
    firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Apache can be configured to listen for connections on other ports, but the port
    number will then have to be entered in the URL field for each connection. This
    would be similar to connecting to Webmin, which runs an HTTP server on a non-standard
    port 10000.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We don't want to have to start Apache manually every time our server is restarted,
    so we should activate an `init` script included in the software package to start
    the service automatically. We should also monitor the server and allow it to alert
    us if the HTTP service becomes unavailable.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Apache to start at system boot time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to start Apache at system boot time:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Bootup and Shutdown**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the checkbox next to the init script for the Apache web server (it will
    be named `apache2`, `httpd`, or similarly).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Start On Boot** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitoring that Apache is up and running
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the HTTP server crashes users will be unable to connect to your website or
    use your web application. If this happens, you should be notified as soon as possible
    so that you can take appropriate action to restart and fix your server.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Monitoring Your System"), *Monitoring Your
    System*, covers topics related to monitoring the status of your server in detail.
    Take a look in particular at the recipes *Receiving an e-mail if a service stops
    running* and *Automatically restarting a service that goes down*. It''s also a
    good idea to monitor your server from a second machine so that you will be notified
    of trouble even if the entire server becomes unavailable. Take a look at the recipe
    *Monitoring a remote server* for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apache has a modular architecture, and installing and activating additional
    components can extend its functionality. Take a look at the recipe *Enabling Apache
    modules* in this chapter for more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restarting Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever you make changes to the configuration of the Apache web server, associated
    runtime environments (such as PHP), or web applications served by Apache through
    additional modules (such as `mod_wsgi`), you will need to restart the server daemon
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Restarting Apache using Webmin is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** link to restart the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Clicking on **Apply changes** in Webmin's Apache web server module causes Apache
    to restart gracefully. This causes Apache to finish processing all requests but
    to stop accepting new connections. When Apache finishes sending the last response,
    it restarts and resumes accepting connections. From the perspective of a user,
    this will cause some requests to take longer to complete, but otherwise the server
    restart should be transparent. After the restart, Apache will work in accordance
    with the new configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also restart Apache in a similar fashion using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Making Apache configuration changes through Webmin allows you to not worry about
    making syntax errors. Sometimes, however, you will need to make custom configuration
    changes manually. When you do, you should check configuration syntax before restarting
    the server because a syntax error will prevent Apache from coming back up after
    a restart.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying Apache configuration syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To check whether your configuration files contain no error, which would prevent
    Apache from starting, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If everything is fine, the command will return the message `Syntax OK`.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Apache modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Apache HTTP server employs a modular architecture. Additional functionality
    can be added to the server by including additional modules. While these modules
    can be compiled into the server itself, on most systems they are installed separately
    as shared libraries. Apache's configuration files decide which modules are loaded
    when the server starts.
  prefs: []
  type: TYPE_NORMAL
- en: Webmin provides a simple form to enable and disable Apache modules. In this
    recipe, we will activate the `mod_rewrite` module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to enable an Apache module:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Global configuration** |
    **Configure Apache Modules**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark the checkbox for the `rewrite` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Enable Selected Modules** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin adds a line to Apache's configuration, which loads the selected module.
    In Apache Version 1, the directive for loading modules is `AddModule`, while in
    Version 2 it is `LoadModule`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On some systems Apache2 doesn''t actually store the `LoadModule` lines in the
    main configuration file (`/etc/apache2/httpd.conf`) but instead stores a separate
    file for each module in the `/etc/apache2/mods-available/` directory. The modules
    are activated by making symbolic links to their activation files in the `/etc/apache2/mods-enabled`
    directory, from which all files are included in the configuration during server
    start. When using this form of configuration, special scripts are provided which
    take care of creating or deleting these symbolic links as needed. In effect, we
    can enable the `rewrite` module by issuing the following command and restarting
    Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The module can be disabled by using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apache HTTP server packages include most of the more commonly used modules,
    but additional modules can be installed as software packages or compiled from
    sources.
  prefs: []
  type: TYPE_NORMAL
- en: Installing additional modules from software packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to include an additional Apache module, which did not come bundled
    with the server, search for it in your system packages repositories. The name
    of the package with an Apache module may differ from distribution to distribution.
    For instance, if you wanted to install the `mod_wsgi` module, you could find it
    in a package named `libapache2-mod-wsgi`, `apache2-mod_wsgi` or simply `mod_wsgi`
    depending on your system. Follow the steps described in the recipe *Installing
    software packages* in [Chapter 1](ch01.html "Chapter 1. Setting Up Your System"),
    *Setting Up Your System*, to install the package.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a static HTML site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest task that an Apache server can perform is to serve a static website.
    When a browser sends an HTTP request to such a site, Apache processes the incoming
    URL, maps its path to a file on disk, and returns the contents of that file to
    the browser. If the file contains HTML code, a web page is rendered in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: A single Apache instance can serve multiple websites, but for this recipe, we
    will configure only a single website as Apache's default site. If this is your
    only configuration, it will be used regardless of what IP address or domain name
    is associated with the incoming request.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will configure Apache as a single-site server. It will respond
    to incoming requests with static files from the directory `/var/www/default`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to serve different websites under different domain names, you will
    have to create virtual host configurations for each domain. This topic is covered
    in the recipe *Creating a virtual host*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will instruct Apache to listen for all incoming requests on port 80 in order
    to create a single-site server as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver**. In the **Global configuration
    tab**, select **Networking and Addresses**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Listen on addresses and ports** to **All** addresses on **Port** `80`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the **Addresses for name virtual servers** field.![How to do it...](img/5849_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now set the server's root document directory, from which the files will
    be served.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a directory which will contain the HTML files of the static site: `/var/www/default`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a basic HTML page by creating a file named `/var/www/default/index.html`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to the configuration section of the default Apache server: **Servers**
    | **Apache Webserver** | **Existing virtual hosts**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon for the default virtual host. In most cases, this configuration
    will be called **Default Server**, but if your installation came with a **Virtual
    Server** configuration set to handle any address and automatically adjust to all
    server names as shown in the following screenshot, use this configuration instead:![How
    to do it...](img/5849_08_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Document Options**, and set **Document root directory** to `/var/www/default`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Point your browser to your server''s IP address or domain name: `http://your.server`.
    You should be greeted by the words **Hello World!** from the `index.html` file
    we just created.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now upload your entire static site to the `/var/www/default` directory
    and host it on your server.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Apache configuration is divided into three main sections: global settings,
    default server settings, and settings for virtual hosts. Virtual host settings
    are used if a request comes in with a host name or IP address that matches the
    name or address of a configured virtual web server. If no matching virtual host
    configuration is found, the request is passed on to the default host.'
  prefs: []
  type: TYPE_NORMAL
- en: In our configuration, we specified no virtual hosts, so the default host will
    handle every incoming request. We configured the default host to serve files from
    the `/var/www/default` directory, which is equivalent to setting the `DocumentRoot`
    directive in the main Apache configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apache is a very feature-rich web server, so there are many options to set,
    and Webmin can assist you with many of them. Browse through all the other recipes
    in this chapter for ways to customize your server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a virtual host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Apache server can host multiple websites at the same time. Each website can
    be hosted on a separate IP address if your server has multiple network interfaces,
    but more commonly all websites share the same IP address and are distinguished
    by the domain name associated with the site.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ability of a single web server to host multiple websites in different domains
    from the same IP address is an aspect of the HTTP protocol. When you type in the
    URL `http://example.com` into your address bar, the browser looks up the IP address
    of the server associated with the `example.com` domain and opens a connection
    to port 80 of a server at that IP. The name of the web host (`example.com`) is
    passed as the `Host:` header of the request.
  prefs: []
  type: TYPE_NORMAL
- en: A single Apache instance can support multiple configurations. The server checks
    the IP and `Host:` header of every incoming request and decides which configuration
    to use based on this information. If you have a special configuration (virtual
    host) associated with `example.com`, Apache will use it for all arriving requests
    addressed to `http://example.com`. If you don't have a configuration for that
    address, the default server configuration will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create a virtual server configuration for the domain
    `example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: You can configure a domain to point at your server by setting up a DNS entry
    with your domain provider. If your domain isn't pointed at your server yet, you
    can simulate this during tests by making an entry in the `/etc/hosts` file of
    the client computer from which you will be connecting to test your server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're using a Windows machine for testing, you will have to find the `hosts`
    file in the directory `%SystemRoot%\system32\drivers\etc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wikipedia provides the locations of `hosts` file on other systems: [http://en.wikipedia.org/wiki/Hosts_%28file%29#Location_in_the_file_system](http://en.wikipedia.org/wiki/Hosts_%28file%29#Location_in_the_file_system).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `hosts` file entry contains the IP address of your server and the host
    name you would like to point to that IP, separated by whitespace, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a virtual host:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory that will contain the HTML files of the static site `/var/www/example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a basic HTML page by creating a file named `/var/www/example.com/index.html`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to **Servers** | **Apache Webserver**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Create virtual host** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Document Root** to `/var/www/example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Server Name** to `example.com`.![How to do it...](img/5849_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create Now** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be able to use your browser to visit a new site at the URL `http://example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin creates a virtual server by adding the following section to your Apache
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding directive specifies that the server should listen to connections
    on port `80`, and if it encounters any requests directed at `Host: example.com`,
    it should use this configuration to serve them. The only other line in this `VirtualHost`
    section specifies which directory HTML files should be served from. Further options
    for this host will be added to this `VirtualHost` section to further customize
    the configuration of the virtual server.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An Apache virtual host is highly customizable. You can find the configuration
    screen of the newly created virtual server by navigating to **Servers** | **Apache
    Webserver** | **Existing virtual hosts** and clicking the icon next to the server
    with **Server Name example.com**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an IP-based virtual host
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Apache can also create separate virtual hosts at different IP addresses if
    your machine is equipped with multiple network interfaces. The procedure is very
    similar to the steps described previously, but instead of specifying **Server
    Name**, you should set **Handle** **connections to address** to **Specific address**
    and provide the IP for the virtual host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an IP-based virtual host](img/5849_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can create a virtual host, which will use the encrypted HTTPS protocol instead
    of standard HTTP. Take a look at the recipe *Setting Up encrypted websites with
    SSL*, for details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting options for directories, files, and locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache allows you to customize settings at the level of a directory or file.
    This means that requests matching a specific path on your server are treated differently
    from requests for other parts of the site.
  prefs: []
  type: TYPE_NORMAL
- en: Per-directory options can be set as part of Apache's configuration files using
    the `<Directory>` directive. Options set this way will apply to the chosen directory
    and all of its subdirectories. The `<Directory>` options set on a subdirectory
    will override the settings of a higher-level directory.
  prefs: []
  type: TYPE_NORMAL
- en: Local settings can also be specified by placing them in a special file (called
    `.htaccess` by default) placed in a directory. The `AllowOverride` option must
    be set on the directory for `.htaccess` files to have an effect.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a directory-specific configuration, which allows
    the usage of `.htaccess` files in that directory and its subdirectories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will set specific options on the directory `/var/www/default` inside of the
    **Default Server** configuration. Before you begin, note the full path to the
    directory you would like to set configuration directives for, and identify which
    virtual host serves files from that directory (if other then the default virtual
    server).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to set options for directories, files and locations:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Existing virtual hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the virtual host you want to customize, for instance, **Default Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Create Per-Directory, Files or Location Options** section, set **Type**
    to **Directory**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Exact match** and set **Path** as `/var/www/default`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You may also enter a wildcard path such as `/var/www/default/site*`. Options
    set this way will apply to all directories that match.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you require even more flexibility, you can select the **Match regexp** option
    and specify the path using a regular expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5849_08_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be brought to the **Virtual Server Options** screen, which will have
    a new entry in the **Per-Directory Options** section. Click the icon labeled **Directory
    /var/www/default**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the directory configuration screen, click the icon labeled **Document Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Options file can override** section,select **Selected below...** and
    check all the boxes.![How to do it...](img/5849_08_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we choose to set per-directory options, Webmin creates a `<Directory>`
    directive for us and fills it with the selected options. In the example we presented,
    we chose to allow all settings to be overridden by local `.htaccess` files. This
    created the following configuration section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If we chose to edit the Default Server, the `<Directory>` directive will be
    created in the main Apache settings file. These settings will always apply to
    the directory regardless of which virtual host is used to access it. If you wanted
    to create per-directory settings, which apply only to a selected virtual server,
    you would choose that server in the **Existing virtual hosts** tab. Settings created
    in this way would be saved within the particular `<VirtualHost`> section.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin allows you to set most local options available to your version of Apache
    through the **Per-Directory Options** user interface. Browse around to familiarize
    yourself with this section, and you will be able to tweak settings quickly when
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: Apache allows you to set local options by matching the filesystem path of a
    directory, but you can also match names of requested files or URL addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Setting options on files with names matching a pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Apache allows you to set specific options on files with names matching a particular
    pattern. For instance, it''s a bad idea to allow external users to read the contents
    of `.htaccess` and other local Apache configuration files. You can prevent access
    to all of these files (collectively matching the regular expression `^\.ht`) by
    following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Existing virtual hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Default Server** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Create Per-Directory, Files or Location Options** section, set **Type**
    to **Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Match regexp**, and set **Path** to the regular expression `^\.ht`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon labeled **Files regexp ^\.ht**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon labeled **Access Control**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Restrict access** section, set the only action to **Deny All Requests**.![Setting
    options on files with names matching a pattern](img/5849_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting options for specific URLs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may wish to apply custom settings to specific URLs, which don't necessarily
    match a particular underlying filesystem path or filename. Apache's `<Location>`
    directive can be used in such cases, and Webmin will assist you in its configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Let's use as an example the dynamically generated `/server-status` page that
    gives you an overview of your server if the `mod_status` module is enabled. There
    is no path on your disk called `server-status`, but you may still control requests
    to this URL by creating a location-based configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'You would want the server information to be available only to a limited group
    of users. Let''s limit access to this URL to requests coming from the localhost
    IP of `127.0.0.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Existing virtual hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Default Server** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Create Per-Directory, Files or Location Options** section, set **Type**
    to **Location**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Exact match**, and set **Path** to `/server-status`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon labeled **Location /server-status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon labeled **Access Control**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Restrict access** section, set **Access checking order** to **Allow
    then deny**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the only action to **Allow Request from IP..**, and specify `127.0.0.1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button, and enter **Access Control** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Webmin always provides one empty entry in the list. When you enter the section
    again, you will be able to add a second access restriction.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Restrict access** section, add a second action to **Deny All Requests**.![Setting
    options for specific URLs](img/5849_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing matching path or pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have already created a set of local settings, but need to change the
    path they are applied to, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Existing virtual hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon for the virtual host you want to customize.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Per-Directory Options**, click the icon of the local settings you want
    to relocate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the matching pattern in the **Options apply to** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting options using an .htaccess file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the `.htaccess` files is a convenient way to allow users without administrative
    privileges on your server to customize local settings of the Apache server at
    the level of a directory. As long as the user has the ability to modify the settings
    file, they can tweak the server without the need for support from an administrator.
    Changes in settings done through the `.htaccess` file do not require the server
    to be restarted.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should be aware that using the `.htaccess` files causes a reduction in Apache's
    performance as the server has to look for the settings file in the requested directory
    (and potentially also the `.htaccess` files in higher-level directories) during
    every request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps to create the `.htaccess` options file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Global configuration** |
    **Per-Directory Options Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the path to the directory that you would like to write an `.htaccess`
    file for, for example, `/var/www/example.com`, and click the **Create Options
    File** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will arrive at a screen that allows you to modify local settings through
    the `.htaccess` file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a password-protected website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The HTTP protocol provides a basic functionality for authenticating users. When
    a request is sent to a protected site, or a protected area within a site, the
    browser presents the user with a prompt for name and password. If the provided
    values match an authorized user, access to the site is granted.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The basic HTTP authentication method is simple to set up on Apache, especially
    with assistance from Webmin. The main drawback to this functionality is that it
    isn't very secure or customizable. If you plan to use this form of authentication
    on the open Internet, make sure you use it in combination with the encrypted HTTPS
    protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting, make sure that the module `auth_basic` is enabled in your Apache
    configuration. Take a look at the recipe *Enabling Apache modules* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform the following steps to create a password-protected website
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Existing virtual hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the virtual server you would like to protect with a password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you already have a settings section for the directory you would like to protect
    with a password, you can skip to step 7.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Create Per-Directory, Files or Location Options** section, set **Type**
    to **Directory**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Exact match**, and set **Path** to the root document of your site,
    for instance, `/var/www/example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can protect a subsection of your site with a password by creating the per-directory
    settings for a subdirectory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Per-Directory Options** section, click the link to the directory configuration
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon labeled **Access Control**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Authentication realm name** section, specify a description, which will
    be shown to the user when prompting for a password, for example, `Please enter
    your ISIS password`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Authentication type** to **Basic**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Restrict access by login** to **All valid users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Basic login user file types** to **Text file**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **User text file** to `/etc/apache2/htpasswd` or `/etc/httpd/htpasswd` depending
    on where your Apache configuration directory is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The passwords file should never be accessible through the web server. You should
    save it in a location outside of the document root. If you need to keep it within
    the document root directory, restrict access to it by following the steps described
    in the *Setting options on files with names matching a pattern* section of the
    *Setting options for directories, files, and locations* recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5849_08_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click the **Save** button, and restart Apache by clicking on the **Apply Changes**
    link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a user account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a user account:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter **Access Control** for the directory once again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the new link labeled **Edit users** in the **User text file** line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add a new user** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify a username and a password in plain text.![Creating a user account](img/5849_08_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin creates a password-protected site by creating a `<Directory>` directive
    in your Apache configuration with the appropriate instructions for the `auth_basic`
    module. For example, the instructions outlined earlier would add the following
    section to your Apache configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Webmin also helps you to create valid username and password pairs, which will
    be treated as valid users. This information is stored in the file specified by
    the `AuthUserFile` directive.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apache passwords are kept separate from your system's user account information.
    If you would like these accounts to be kept synchronized, Webmin can help you
    substantially by performing the task for you.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping Apache and system accounts synchronized
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to keep Apache and system accounts synchronized:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Existing virtual hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the virtual server, which is protected with a password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Per-Directory Options** section, click the link to the password-protected
    directory configuration section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon labeled **Access Control**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the new link labeled **Edit users** in the **User text file** line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark the checkboxes labeled **Add a user when a Unix user is added**, **Change
    the user when a Unix user is changed**, and **Delete the user when a Unix user
    is deleted**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to use HTTP Basic authentication on the Internet, make sure to combine
    it with SSL encryption of the connection. Take a look at the *Setting Up encrypted
    websites with SSL* recipe for details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also make sure that the `htpasswd` file is not accessible via the web server.
    Refer to the *Setting options for directories, files, and locations* recipe for
    ways to prevent access to its location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a listing of files in a directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A web server makes a great repository for downloadable files. This system of
    file distribution has for the most part replaced anonymous FTP as it offers a
    more seamless experience for users. If you would like to give users access to
    a directory of files with an automatically generated index, Apache is the right
    tool for the job.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In most cases, listing files in directories of a website is unnecessary, and
    in some cases it may even expose sensitive information to potential attackers.
    Use directory listings only where it makes sense.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will expose a listing of the directory `/var/www/example.com/downloads`,
    which is served by the virtual host named `example.com` from the URL `http://example.com/downloads`.
    Note the file path, virtual host name, and URL of your case and substitute appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to display a listing of files in a directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the directory `/var/www/example.com/downloads`, and place some files
    for download in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Existing virtual hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the virtual host, which will be serving files, for example, **Server
    Name example.com**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Create Per-Directory, Files or Location Options** section, set **Type**
    to **Directory**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Exact match**, and set **Path** to the root document of your site,
    for instance, `/var/www/example.com/downloads`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Per-Directory Options** section, click the link labeled **Directory
    /var/www/example.com/downloads**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link labeled **Document Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Directory options** to **Selected below**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Generate directory indexes** to **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button labeled **Directory Indexing**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Directory index options** to **Selected below**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark the checkbox labeled **Display fancy directory indexes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set your preferences for how the directory listing should be displayed using
    this form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be able to see a listing of files under the URL `http://example.com/downloads`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin creates a directory-listing configuration by making a `<Directory>`
    directive in your Apache configuration. For example, the steps outlined would
    add the following section to the virtual host configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, Apache's directory listings pages include a header containing the
    directory path and a footer containing information about the server and Apache.
    You can customize the content of the header and footer by placing files named
    `HEADER.html` and `README.html` inside the directory. Any HTML code placed in
    those files will be displayed on the file listing page. If you want to prevent
    Apache from listing these files, go to the **Directory Indexing** options screen,
    and type their names in the **Files to ignore in directory index** field (one
    filename per line).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about Apache directory indexing options, take a look at
    this manual page: [http://httpd.apache.org/docs/current/mod/mod_autoindex.html](http://httpd.apache.org/docs/current/mod/mod_autoindex.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting incoming requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use Apache's HTTP redirects to forward an incoming request to another
    address. This can be useful if the address of your webpage changes or you would
    like to create a memorable URL address, which will redirect to a longer address
    of a specific page.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that we used to host a number of articles at [http://oldsite.com/articles/](http://oldsite.com/articles/),
    and we decided to move our site to another domain, and the same articles will
    now be hosted at `http://example.com/info/`.
  prefs: []
  type: TYPE_NORMAL
- en: We can configure Apache at our old site to redirect all incoming requests to
    the new domain.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting, make sure that the module `alias` is enabled in your Apache
    configuration. Take a look at the recipe *Enabling Apache modules* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On your old server, follow these steps to create a redirect to your new domain:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Existing virtual hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the virtual host, which will perform the redirect, for example, **Default
    Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon labeled **Aliases and Redirects**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill out the **Regexp URL redirects** form with the following data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**From**: `/articles/(.*)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: `301`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**To**: `http://example.com/info/$1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The regular expression group marked by `(.*)` in the **From** field captures
    any string which comes after `/articles/` and the content of the captured group
    is placed in the `$1` placeholder of the **To** field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: An HTTP redirection status `301` means that the resource was moved permanently.
    If the redirection is temporary, status `302` is commonly used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin creates the redirect by adding a `RedirectMatch` directive in your virtual
    host''s configuration file. Steps in the preceding example would create the following
    instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we weren''t using regular expressions, a simpler `Redirect` directive would
    suffice, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An Apache module called `mod_alias` provides the `Redirect` directives. These
    directives allow you to create simple forwarding between addresses. Another module
    called `mod_rewrite` provides a much more sophisticated mechanism of redirecting
    incoming requests based on every part of the URL, filesystem tests, server and
    environment variables, HTTP headers, time stamps, and so on. Unfortunately, the
    syntax for `mod_rewrite` directives can be quite unique and complex, so editing
    its configuration by hand remains your best option.
  prefs: []
  type: TYPE_NORMAL
- en: 'More information can be found on the Apache website: [http://httpd.apache.org/docs/current/rewrite/](http://httpd.apache.org/docs/current/rewrite/).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a filesystem alias
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to serve files from a directory outside of your server's document
    root or you want to serve files from one directory in a number of locations, you
    can use local aliases instead of redirects. A redirect forwards the user to a
    different URL, while an alias is transparent to the user and it serves different
    content from the same URL.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can store site images in the directory `/var/www/resources/images`
    but use an alias to serve them from the URL `/images/`. The end user will see
    no difference between files served directly or through an alias.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to serve files located in `/var/www/resources/images` from
    URLs starting with `/images/`:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Existing virtual hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the virtual host, which will perform the redirect, for example, **Default
    Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon labeled **Aliases and Redirects**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill out the **Document directory aliases** form with the following data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**From**: `/images/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**To**: `/var/www/resources/images`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you can serve files from another filesystem location, you may need to
    create a directory-specific Apache configuration, which will allow the server
    to make these files publicly available. Take a look at the recipe *Setting options
    for directories, files, and locations* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up encrypted websites with SSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The HTTP protocol is transmitted over the Internet as plain text. This means
    that the communication can be intercepted and read by people other than the end
    user of the website and server administrator. In most cases, the exchanged information
    is public, and this security vulnerability is acceptable. In other cases, where
    passwords or other secret information is exchanged, simple HTTP should not be
    used. Thankfully, securing web communications is not very difficult thanks to
    the HTTPS protocol, which adds a layer of encryption.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SSL encryption that is used by HTTPS is added before the actual HTTP conversation
    is initiated. This means that name-based virtual servers, which are specified
    in HTTP headers, cannot be used with HTTPS. In practice, this means that each
    SSL-protected website has to be served from a dedicated IP address.
  prefs: []
  type: TYPE_NORMAL
- en: If you only plan to create a single HTTPS website on your server, you're fine.
    However, if you plan to create more secure websites, you will need to add a separate
    network interface with its own IP addresses to your server for each site.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your server has only one IP address, and you must serve multiple HTTPS sites,
    you have the option of using a technology called **Server Name Indication** (**SNI**).
    For more information take a look at this Wikipedia page: [http://en.wikipedia.org/wiki/Server_Name_Indication](http://en.wikipedia.org/wiki/Server_Name_Indication).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting, make sure that the module `ssl` is enabled in your Apache configuration.
    Take a look at the recipe *Enabling Apache modules* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: The next step will be obtaining a key and certificate, which will be used to
    sign and encrypt HTTPS communication. You have a choice of creating your own self-signed
    certificate or purchasing a signed certificate from a commercial certificate authority.
    You can generate a self-signed certificate quickly and for free, but visiting
    browsers will complain to users that your site cannot be fully trusted because
    an external authority did not certify the certificate used to encrypt communication.
    A third party could also potentially spoof a self-signed certificate, so it does
    not guarantee that someone else isn't pretending to be you.
  prefs: []
  type: TYPE_NORMAL
- en: A commercial certificate will be slightly harder to obtain and will cost a few
    dollars per year, but your users will be able to trust that they are connecting
    to your site and will see no warnings and a pleasing colorful padlock in the browser's
    address bar.
  prefs: []
  type: TYPE_NORMAL
- en: The process of creating an SSL certificate requires the `openssl` package to
    be installed on your system. Take a look at the recipe *Installing software packages*
    from [Chapter 1](ch01.html "Chapter 1. Setting Up Your System"), *Setting Up Your
    System*, if you need to install it. Keys and certificates don't have to be generated
    on the server; you can generate them on any machine that has the `openssl` command
    available.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a private key
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SSL is built around asymmetric cryptography, which uses two keys: one of which
    is public, and the other secret (or private). The public key is used to encrypt
    messages or verify their signature, while the private key is used to decrypt messages
    and create signatures. The private key should be known only to its owner and kept
    in a protected file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use this command to generate a strong RSA private key, and save it to the file
    `key.pem`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A person with your private key can pretend to be you even if you pay for a
    signed certificate. Change permissions on the key file so that only the root user
    can read it, and make sure it doesn''t fall into the wrong hands. Use the following
    command to change permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Making a self-signed certificate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can create a self-signed certificate using the next command. The certificate
    will be saved to the file `cert.pem`, it will be signed by your private key (from
    `key.pem`) and will be set to expire in 365 days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: When generating a certificate, you will be asked a series of questions, including
    country name, state or province, locality, organization, organization unit, and
    e-mail address. If you want to leave any of these fields blank, enter a single
    dot (`.`), and press *Enter*. You will also be asked to provide a **Common Name**
    for the certificate, which in this case will be the full domain name of your site
    (for example, `www.example.com`). Remember that the common name in a certificate
    must match your domain exactly, so a certificate generated for `www.example.com`
    will not work on `example.com` and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you need a certificate, which will work on multiple domains, you can prepare
    a **wildcard** certificate, or one with multiple domains specified in the **Subject
    Alt Name** field.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining a commercially signed certificate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to obtain a commercially signed certificate, you will need to generate
    a **certificate signing request** (**CSR**) file signed with your private key.
    You send this file to a commercial certificate authority that will verify your
    identity, process your payment, and then send you back a signed certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use this command to generate a CSR file (`csr.pem`) based on your private
    key (`key.pem`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You will be asked the same series of questions as when making a self-signed
    certificate. Make sure you specify this information precisely; any discrepancy
    between this data and information provided to the certificate authority can throw
    the certification process off course.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting certificate data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have a certificate (`cert.pem`), you can display information contained
    within by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up an SSL-protected HTTPS website run by Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepare the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A private key file (`key.pem`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A certificate file (`cert.pem`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An IP address that will be used with SSL (for example, `198.51.100.1`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A domain name which is specified as the common name in the certificate (for
    example, `www.example.com`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A path to directory containing website files (for example, `/var/www/www.example.com`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A path to the Apache configuration directory on your system (for example, `/etc/apache2`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `key.pem` and `cert.pem` files to the Apache configuration directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Under no circumstances should these files ever find their way to a publicly
    available document directory. Keep them in a secure location available only to
    the root user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make sure that permission flags on `key.pem` are set restrictively as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to **Servers** | **Apache Webserver** | **Create virtual host**, and
    prepare a virtual server with the following settings. Refer to the recipe Create
    a virtual host for more information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Handle connections to specific address: `198.51.100.1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port**: `443`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document Root**: `/var/www/www.example.com`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Name**: `www.example.com`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5849_08_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Navigate to the options screen of the newly created virtual server, and click
    the **SSL Options** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Enable SSL?** to **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Certificate/private key file** to `/etc/apache2/cert.pem`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Private key file** to `/etc/apache2/key.pem`.![How to do it...](img/5849_08_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now use your browser to connect to the HTTPS address of your site `https://www.example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin activates SSL by adding the following instructions to the configuration
    of an Apache virtual host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This basic configuration enables communication with the server using the HTTPS
    protocol. When a browser makes an HTTPS connection, the request is sent to the
    server's port 443\. Before the HTTP dialog begins, an SSL handshake is performed,
    and all subsequent communication is encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you prepare a virtual server that listens for HTTPS requests on port 443,
    clients will not be able to connect to it using standard HTTP requests to port
    80\. You may want to prepare a second virtual host for the same domain that will
    redirect all incoming traffic to URLs beginning with `https://`. Take a look at
    the recipe *Redirecting incoming requests* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Logging incoming requests and errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A server hosting a website on the Internet gets a lot of attention. It's visited
    by users, scanned by indexing search bots, and looked over by would-be attackers
    trying to see if it could be broken into. Your web server should record information
    about all this traffic, and you should look through it regularly to ascertain
    that everything is working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Apache keeps two types of logfiles: an access log, which contains
    information about each incoming request and an error log with information about
    encountered problems. You can configure Apache to keep a single pair of logfiles,
    but in most cases it''s more useful to keep a separate access and error log for
    each virtual server.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apache''s logging facility is highly customizable, and you can set your server
    to output log entries in many different ways. A few of the formats have become
    recognized as standard, and currently, the recommended logging standard is nicknamed
    *combined log format*. It logs many pieces of information, among which are:'
  prefs: []
  type: TYPE_NORMAL
- en: Remote IP or hostname (`%h`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote user if the request was authenticated (`%u`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The time (`%t`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first line of a request, which contains the HTTP method used and the requested
    path (`%r`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The HTTP response status: 200 for OK, 404 for not found, and so on (`%>s`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Response size in bytes (`%O`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page which initiated this request (`%{Referer}i`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User-agent string identifying the requesting browser type and version (`%{User-Agent}i`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All these fields form the combined log format denoted as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You should make sure that the format nicknamed combined is available in your
    server''s configuration. Here''s how you can add it in case it isn''t:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the configuration section of the default Apache server at **Servers**
    | **Apache Webserver** | **Existing virtual hosts** | **Default Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Log Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that the list contains a log format named `combined`. If this format
    is missing, add an entry with the nickname `combined` and the following format
    string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the **Default log** format to `combined`.![Getting ready](img/5849_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can find more information about Apache log formats in its documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://httpd.apache.org/docs/current/mod/mod_log_config.html](http://httpd.apache.org/docs/current/mod/mod_log_config.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will set logging for the virtual host serving the domain
    `example.com`. We''ll direct Apache to save access log entries in `/var/log/apache2/example.com-access.log`
    and errors in `/var/log/apache2/example.com-error.log`. If your system uses the
    `/var/log/httpd` or another directory for Apache logs, modify the path accordingly.
    Perform the following steps for logging incoming requests and errors:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Apache Webserver** | **Existing virtual hosts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the icon of the host you want to set logging options for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Log Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the **Error log to** to **File**, and enter the logfile path: `/var/log/apache2/example.com-error.log`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Error log level** to **Warning conditions (warn)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Default log format** to `combined`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Access log files** set **Format** to **default** and **Write to File
    with path** `/var/log/apache2/example.com-access.log`.![How to do it...](img/5849_08_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin configures logging for a virtual server by adding the following directives
    to its `<VirtualHost>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: These instructions tell Apache where to save this host's access and error logs,
    what format should be used for access logs (`LogFormat`), and how detailed the
    error reporting should be (`LogLevel`).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apache logfiles grow quickly on highly trafficked sites. Check out the recipe
    *Configuring logfile rotation* from [Chapter 5](ch05.html "Chapter 5. Monitoring
    Your System"), *Monitoring Your System*, for information about setting up `logrotate`
    to deal with growing logfiles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webmin can display collected logfiles messages for you; take a look at the recipe
    *Add other logfiles to Webmin* also in [Chapter 5,](ch05.html "Chapter 5. Monitoring
    Your System") *Monitoring Your System*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A program called Webalizer can help you make sense of your Apache logfiles.
    Check out the recipe *Analyzing logfiles using Webalizer* in this chapter for
    more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing logfiles using Webalizer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web server logfiles contain a lot of useful information, but they are too long
    and verbose to read. In order to get an overview of the state of your website,
    you will need a tool to analyze the contents of its access logfiles. One such
    tool is called **Webalizer**; it's easy to install and integrates well with Webmin.
    Webalizer parses your logfiles and generates a graphical report in HTML turning
    your logfiles into clear graphs and tables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps described in the recipe *installing software packages* in [Chapter
    1](ch01.html "Chapter 1. Setting Up Your System"), *Setting Up Your System*, to
    install the `webalizer` package on your system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make a note of the location of the Apache access logfile you want to analyze.
    In this recipe, we will prepare a Webalizer report for the website hosted at `example.com`
    with an access logfile stored in `/var/log/apache2/example.com-access.log`. Perform
    the following steps to analyze logfiles using Webalizer:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a directory to store the Webalizer reports for this website. A good location
    could be `/var/stats/example.com` for instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Webalizer Logfile Analysis**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add a new log file for analysis** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Base logfile path** to `/var/log/apache2/example.com-access.log`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Even if you rotate logs with `logrotate`, Webalizer will pick up the entire
    family of logfiles, including compressed backup log archives.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set **Write report to directory** to the report directory you created `/var/stats/example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Run webalizer as user** to `root`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Always re-process log files?** to **No**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Clear log file(s) after scheduled report?** to **No**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Report options** to **Use global options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Scheduled report generation** to **Enabled, at times chosen below**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a **Simple schedule** set to **Daily (at midnight)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new Webalizer analysis entry will appear in the list. If you don''t want
    to wait until the next day, you can generate a report immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the newly created log analysis entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Generate Report** button and then the **View completed report**
    link on the following screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From now on, you can always come to the **Servers** | **Webalizer Logfile Analysis**
    and click the link at the right-hand side of the screen to view a Webalizer report
    updated daily.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin creates a cron job, which executes the `webalizer` binary every night
    at midnight. Webalizer parses the specified logfile and generates a graphical
    report in the form of an HTML page. When you decide to view the report, Webmin
    displays the Webalizer-generated HTML page in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can customize certain aspects of the way Webalizer generates reports. You
    can edit the settings globally by going to the **Servers** | **Webalizer Logfile
    Analysis** page and clicking the **Edit Global Options** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also set custom settings for a report by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **Webalizer Logfile Analysis**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the name of the logfile for which you would like to customize the report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Report options** to **Custom options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back on the screen listing Webalizer reports click the name of the logfile again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the new **Edit Options** button at the bottom of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize report settings, and click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

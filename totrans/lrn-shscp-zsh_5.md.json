["```\nautoload -U compinit\ncompinit\n```", "```\n% ec <Tab>\n% echo \n\n```", "```\n% echo $HOM <Tab>\n% echo $HOME\n\n```", "```\n% echo $HO<Tab>\nCompleting parameter\nHOME  HOST\n\n```", "```\n% ls -<Tab>\n\n```", "```\n% echo `which zsh`<Tab>\n% echo /usr/local/bin/zsh\n\n```", "```\n:completion:function:completer:command:argument:tag\n```", "```\nzstyle ':completion:*' format %d\n```", "```\n% true<Tab>\nno argument or option\n\n```", "```\nunsetopt LIST_BEEP\n```", "```\nzstyle ':completion:*:descriptions' format '%B%d%b'\nzstyle ':completion:*:messages' format %d\nzstyle ':completion:*:warnings' format 'No matches for: %d'\n```", "```\nzstyle ':completion:*' group-name ''\n```", "```\nzstyle ':completion:*' menu select=1\n```", "```\nzstyle ':completion:*' completer _expand _complete _correct\n```", "```\n% prnti<Tab>\ncorrections (2 errors)\nprint   printf\noriginal\nprnti\n\n```", "```\n% setopt correct\n% prnti<Tab>\nzsh: correct 'prnti' to 'print' [nyae]?\n\n```", "```\nzstyle ':completion:*' verbose yes\n```", "```\n% print -<Tab>\n\n```", "```\n-- option --\n-C  -- print arguments in specified number of columns\n-D  -- substitute any arguments which are named directories using ~ notation\n-N  -- print arguments separated and terminated by nulls\n-O  -- sort arguments in descending order\n(list goes on...)\n\n```", "```\nzstyle ':completion:*' completer _expand _complete _correct\n```", "```\nzstyle ':completion::complete:*' use-cache on\n```", "```\n# One error for every three characters\nzstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) numeric )'\n```", "```\nzsh\n├── README.md\n├── Completion/\n├── Misc/\n├── Scripts/\n└── Util/\n```", "```\n% cd ../ <Tab>\ndirectory\nCompletion/\nMisc/\nScripts/\nUtil/\n\n```", "```\nzstyle ':completion:*:cd:*' ignore-parents parent pwd\n```", "```\n% cd ../ <Tab>\ndirectory\nMisc/\nScripts/\nUtil/\n\n```", "```\nzstyle ':completion:*' squeeze-slashes true\n```", "```\nhi() {\nprint 'Hello, world'\n}\n```", "```\n% hi() {\nfunction> print 'Hello, World!'\nfunction> }\n\n```", "```\n% hi\nHello, World!\n\n```", "```\n% touch ~/.zsh_functions\n\n```", "```\n% cat >> ~/.zsh_functions\ngreet() {\n print 'Hello, World!'\n}\n\n```", "```\n[[ -f ~/.zsh_functions ]] && source ~/.zsh_functions\n```", "```\n% print -l $fpath\n\n```", "```\n% cat >> _greet\necho 'Hello world!'\n\nautoload -Uz _greet\n\n```", "```\n_greet() {\n    echo \"Hello, World!\"\n}\n\n_meet() {\n    _greet\n    echo \"Ohai there $@\"\n}\n\n_meet \"$@\"\n```", "```\n% meet John\nHello, World!\nOhai there john\n\n```", "```\nfpath=(~/my_folder $fpath)\n```", "```\n#compdef md5sum\n\n_arguments -S \\\n  '(-b --binary)'{-b,--binary}'[read in binary mode]' \\\n  '(-c --check)'{-c,--check}'[read MD5 sums from the FILEs and check them]' \\\n  '(-t --text)'{-t,--text}'[read in text mode]' \\\n  '--status[no output, status code shows success]' \\\n  '(-w --warn)'{-w,--warn}'[warn about improperly formatted checksum lines]' \\\n  '--help[display help and exit]' \\\n  '--version[output version information and exit]' \\\n  '*:files:_files'\n```", "```\n'(optional exclusion list)'{options}'[help text in brackets]'\n```", "```\n'(-t --text)'{-t,--text}'[read in text mode]'\n```", "```\n'(-L -P)-H[with -R, follow symlinks on the command line]'\n```", "```\n'*:files:_files'\n```"]
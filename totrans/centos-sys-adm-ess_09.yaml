- en: Chapter 9. Puppet – Now You Are the Puppet Master
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 Puppet – 现在您是 Puppet Master
- en: 'Puppet from Puppet Labs allows for central administration of your Linux devices.
    The central Puppet server is known as the Puppet master, continuing the analogy
    with puppetry. This master device certainly allows you to control servers and
    desktops (nodes in Puppet terms) from a single device, albeit not in the marionette
    style with pieces of a string. The Puppet master specifies the desired state to
    each node, and every 30 minutes, the node connects to the Puppet master and sends
    facts about its resources; if it does not meet the desired state, then the node
    will fix itself to meet it. During the course of this chapter, we will investigate
    the Puppet configuration including:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 来自 Puppet Labs，允许集中管理您的 Linux 设备。中央 Puppet 服务器被称为 Puppet master，延续了木偶戏的类比。这个主设备当然可以让您通过单一设备控制服务器和桌面（在
    Puppet 术语中称为节点），尽管不需要用线操控木偶。Puppet master 向每个节点指定所需状态，每隔 30 分钟，节点会连接到 Puppet master
    并发送关于其资源的事实；如果不符合所需状态，节点将自行修复以达成目标。在本章过程中，我们将研究 Puppet 配置，包括：
- en: '**Installing the Puppet master**: We will install and configure the Puppet
    master from the Puppet Labs repository. The Puppet master will act as the central
    configuration server and store the desired configuration state for each node.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 Puppet master**：我们将从 Puppet Labs 仓库安装和配置 Puppet master。Puppet master 将作为中央配置服务器，并存储每个节点所需的配置状态。'
- en: '**Puppet resource**: We will use the `puppet resource` command to manually
    manage resources on the node. Resources represent the fundamental building blocks
    of a desired state and can include files, users, services, cron jobs, and software
    packages on the node.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Puppet 资源**：我们将使用 `puppet resource` 命令手动管理节点上的资源。资源代表所需状态的基本构建块，包括文件、用户、服务、定时任务和软件包等。'
- en: '**Managing packages, services, and file**s: These three resources represent
    the main trifecta in Puppet management, and if we can manage these, we can pretty
    much manage the node. We will create the resource declarations in manifest files
    and test them on local and remote puppet agents.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理软件包、服务和文件**：这三种资源代表了 Puppet 管理中的主要三要素，如果我们能管理这些，就几乎能够管理整个节点。我们将在清单文件中创建资源声明，并在本地和远程的
    Puppet 代理上进行测试。'
- en: Installing the Puppet master
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Puppet master
- en: 'As we know with many services that have to be installed on CentOS, we have
    to make sure that the plumbing is correct before we start. The plumbing, in the
    case of the Puppet master, means:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，许多必须在 CentOS 上安装的服务，开始之前我们必须确保基础配置正确。在 Puppet master 的情况下，基础配置包括：
- en: TCP port `8140` must be open through the firewall
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须通过防火墙开放 TCP 端口 `8140`
- en: The Puppet master should be resolvable by the hostname `puppet` by DNS or local
    hosts files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet master 应该能够通过 DNS 或本地主机文件解析为主机名 `puppet`
- en: Time should be synchronized
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间应同步
- en: A configured Puppet Labs yum repository
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置好的 Puppet Labs yum 仓库
- en: I've detailed these in the following sections.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我已在以下部分详细说明了这些内容。
- en: Configuring the firewall
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置防火墙
- en: 'I am not using a host-based firewall in the demonstration machine. This may
    not be the case on your systems, and if you are using a firewall, you will need
    to allow TCP port `8140` through the INPUT chain. The status of the firewall can
    be checked with the following command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我在演示机上没有使用基于主机的防火墙。您的系统可能不是这样，如果您使用防火墙，则需要允许 TCP 端口 `8140` 通过 INPUT 链。可以使用以下命令检查防火墙的状态：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will list the rules that are in place and the default policy. If there
    are no rules in place and the default policy is ACCEPT, then you will not have
    firewall-related issues, and you can relax.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出已设置的规则以及默认策略。如果没有规则且默认策略是 ACCEPT，则您将不会遇到与防火墙相关的问题，可以放心。
- en: DNS
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DNS
- en: 'Puppet agents are running on each client or node and will try and communicate
    with the Puppet master using the default hostname, `puppet`. This can be changed
    in the `/etc/puppet.conf` file. This change will need to be implemented on each
    agent so it is often the easiest way to create an ADDRESS record or CNAME record
    in the local DNS, which can resolve the host puppet to the IP address of your
    desired Puppet master host. In the demonstration lab, I have the correct CNAME
    record in place. Using the `ping` command, we can see that the hostname is resolvable,
    and the output is shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet代理在每个客户端或节点上运行，并将尝试使用默认主机名`puppet`与Puppet主服务器进行通信。此设置可以在`/etc/puppet.conf`文件中更改。此更改需要在每个代理上实施，因此通常最简单的方法是在本地DNS中创建一个ADDRESS记录或CNAME记录，以便将主机名puppet解析到你想要的Puppet主服务器的IP地址。在示范实验室中，我已经设置了正确的CNAME记录。使用`ping`命令，我们可以看到主机名是可解析的，输出如下所示：
- en: '![DNS](img/5920OS_09_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![DNS](img/5920OS_09_01.jpg)'
- en: Network Time Protocol
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络时间协议
- en: 'If you have not already configured the time on your Puppet master server and
    agent nodes, then you should do so using the **Network Time Protocol** (**NTP**).
    This will ensure that they all share the same accurate time. Accurate time is
    required across all devices, as the Puppet master will act as a certificate server
    issuing certificates to trusted nodes, and the timestamp on the certificate cannot
    be in the future. In setting up NTP on the Puppet master, we will first synchronize
    the time to an NTP server and then configure regular time updates using NTP and
    entries stored within the `/etc/ntp.conf` file, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尚未配置Puppet主服务器和代理节点的时间，那么你应该使用**网络时间协议**（**NTP**）进行配置。这将确保它们都共享相同的准确时间。所有设备都需要准确的时间，因为Puppet主服务器将作为证书服务器，向受信任的节点发放证书，并且证书上的时间戳不能位于未来。为了在Puppet主服务器上设置NTP，我们将首先将时间与NTP服务器同步，然后使用NTP和存储在`/etc/ntp.conf`文件中的条目配置定期更新时间，如下所示：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous command does a single, one-off update with a UK-based NTP server.
    This sets the time so that regular updates may take place. If this is not set,
    then it is possible that the time will not be synchronized as the NTP client must
    be within 1,000 seconds of the NTP server for regular updates to take place. We
    can now start the NTP service and configure it for autostart. If we do not make
    any changes to the configuration file, `/etc/ntp.conf`, then time will synchronize
    with servers from the NTP pool. If you have a local time server already up and
    running on your network, then it will be worthwhile to use that device as the
    time source as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令使用一个基于英国的NTP服务器进行了一次性更新时间。这将设置时间，以便可以进行定期更新。如果没有设置这一点，时间可能无法同步，因为NTP客户端必须与NTP服务器的时间误差不超过1000秒，才能进行定期更新。现在我们可以启动NTP服务并配置它为自动启动。如果我们没有对配置文件`/etc/ntp.conf`进行任何更改，那么时间将与来自NTP池的服务器进行同步。如果你已经在网络中有本地的时间服务器，那么使用该设备作为时间源是值得的，具体如下：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Puppet lab repository
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet实验室仓库
- en: The Puppet master is not available in the standard CentOS repositories, nor
    unfortunately, the EPEL repositories, which we have already configured. This requires
    us to add the Puppet Labs software repositories. These repositories will provide
    the latest Puppet agent and master software. The Puppet agent is required on all
    nodes and the master software on the server. We will create the YUM repository
    for Puppet directly by installing the RPM from a web URL. The RPM will define
    only the repository file in `/etc/yum.repos.d`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet主服务器在标准的CentOS仓库中不可用，也不幸地在我们已经配置的EPEL仓库中。这要求我们添加Puppet Labs软件仓库。这些仓库将提供最新的Puppet代理和主服务器软件。所有节点都需要安装Puppet代理，服务器则需要安装主服务器软件。我们将通过从Web
    URL安装RPM直接创建Puppet的YUM仓库。该RPM将仅在`/etc/yum.repos.d`中定义仓库文件。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will complete quickly, as the only file that it needs to create is the
    repository definition. With the repository set, we are now ready to install the
    Puppet master. The following command will install the Puppet master and agent
    to the latest version available from the Puppet Labs repositories:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程会很快完成，因为它只需要创建一个仓库定义文件。仓库设置好后，我们现在可以准备安装Puppet主服务器。以下命令将安装最新版本的Puppet主服务器和代理，版本来自Puppet
    Labs仓库：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As always, we should start the service and enable it for autostart. When this
    is done, we can use the `netstat` command to show that the Puppet master is listening
    on the TCP port `8140`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如常，我们应启动服务并启用自动启动。当完成此操作后，我们可以使用`netstat`命令显示Puppet主节点正在监听TCP端口`8140`：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Puppet resource
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet 资源
- en: 'Versions of Puppet from 2.6 and later (the current release is 3.6) use the
    single binary puppet with subcommands for specific tasks. The earlier version
    had separate binaries for all of the subcommands. In the previous set of commands,
    we used the traditional CentOS syntax to start the Puppet master and then to enable
    the service for autostart; we could achieve the same result using the `/usr/bin/puppet`
    command along with the `resource` subcommand:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从Puppet 2.6版本及以后的版本（当前版本为3.6）开始，使用单一的`puppet`二进制文件并通过子命令处理特定任务。早期版本为所有子命令提供了单独的二进制文件。在之前的命令集中，我们使用传统的CentOS语法启动Puppet主节点，并启用服务以实现自动启动；我们也可以通过`/usr/bin/puppet`命令和`resource`子命令实现相同的结果：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With this command, we direct our attention to the `puppetmaster` service, enable
    it for autostart (`enable=true`), and start it if required (`ensure=running`).
    This represents the very essence of how Puppet works. Of course, to manage many
    clients, we will create manifest files with similar resource rules to enforce
    the desired state. In itself though, we will configure the desired state of the
    node with the use of the `puppet resource` command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，我们将关注`puppetmaster`服务，启用它的自动启动（`enable=true`），并在需要时启动它（`ensure=running`）。这代表了Puppet工作的本质。当然，为了管理多个客户端，我们将创建具有类似资源规则的清单文件来强制执行期望状态。但就其本身而言，我们将通过使用`puppet
    resource`命令来配置节点的期望状态。
- en: 'Along with setting the desired state, we can view the state of all services
    or a single named service using very similar commands; the following are two such
    commands; the first command will display all services, and the second command
    will display only the `puppetmaster` service:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 除了设置期望状态外，我们还可以使用类似的命令查看所有服务或单个命名服务的状态；以下是两个这样的命令，第一个命令将显示所有服务，第二个命令将只显示`puppetmaster`服务：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output from the command specific to the `puppetmaster` service is shown
    in the following screen capture:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`puppetmaster`服务的命令输出如以下屏幕截图所示：'
- en: '![Puppet resource](img/5920OS_09_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet资源](img/5920OS_09_02.jpg)'
- en: 'As mentioned earlier in the introduction to this chapter, the three main resources
    that we manage with Puppet include:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在本章的介绍中，我们通过Puppet管理的三个主要资源包括：
- en: Service
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务
- en: Files
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件
- en: Packages
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件包
- en: 'Along with these main resources, we have others, which include the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些主要资源外，我们还有其他资源，包括以下内容：
- en: Users
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户
- en: Groups
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户组
- en: Cron jobs
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定时任务
- en: Notify
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知
- en: Yumrepo
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yum仓库
- en: '`ssh_authorized_key`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh_authorized_key`'
- en: Interface
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口
- en: To gain an understanding of how Puppet can manage these resources, we will work
    through an example using the `puppet resource` command to manually enforce a desired
    state on our node. Even though the node on which we run the command is the Puppet
    master, for all intents and purposes, we will only use the client, which is the
    Puppet agent at this stage. The example we used earlier with puppet resource demonstrates
    what can be achieved with Puppet before moving the desired state configuration
    into manifest files on the Puppet master.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解Puppet如何管理这些资源，我们将通过一个示例来演示，使用`puppet resource`命令手动强制将节点的状态设置为期望状态。即使我们运行命令的节点是Puppet主节点，但就目的而言，我们仅使用客户端，即在此阶段的Puppet代理。我们之前使用`puppet
    resource`的示例展示了使用Puppet可以实现的目标，然后将期望的状态配置移动到Puppet主节点的清单文件中。
- en: Using puppet resource user, we can ensure that a user account is present on
    a system, by referencing an account that does not exist, Puppet will create the
    account and set the given attribute's password. If we need to delete an account,
    we can use the `ensure=>absent` attribute.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`puppet resource user`，我们可以确保系统上存在某个用户帐户，通过引用一个不存在的帐户，Puppet会创建该帐户并设置给定属性的密码。如果需要删除一个帐户，我们可以使用`ensure=>absent`属性。
- en: 'To begin, we must obtain the encrypted password for the new user account. There
    are different mechanisms that can be used to do this, but here I will use Python
    from the command line to generate the password:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须获取新用户帐户的加密密码。可以使用不同的机制来实现这一点，但在这里我将使用命令行中的Python来生成密码：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output from this command will be the SHA-256 password to be used by the
    new user. We are now ready to use Puppet to create the user:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出将是新用户使用的SHA-256密码。我们现在准备好使用Puppet创建用户：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Blocks of code like these that describe the resource are known as **resource
    declarations**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样描述资源的代码块称为**资源声明**。
- en: This will create the user with the set of desired attribute values. The home
    directory for the user will be created along with the user account. This behavior
    is controlled with the `managehome` attribute; setting this to be `true` will
    create the directory.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用一组期望的属性值创建用户。用户的主目录将会与用户帐户一同创建。此行为由 `managehome` 属性控制；将其设置为 `true` 将创建目录。
- en: Although we would not want this set manually on all servers, as in this case,
    we could use a similar method to allow periodic password changes for the root
    account across all nodes as well as ensure other system accounts exist.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们不希望手动在所有服务器上设置这个集合，就像在这种情况下一样，但我们可以使用类似的方法来允许所有节点上的 root 账户定期更改密码，并确保其他系统账户存在。
- en: Managing packages, services, and files
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理软件包、服务和文件
- en: We will move on from this manual configuration and become familiar with Puppet
    as a central configuration server, whereby we can define settings within manifest
    files that will be distributed to the required nodes. To begin this, we will create
    the manifest file; these are just text files, and apply it locally on the Puppet
    master using `puppet apply`. Once we have verified that the manifest is working
    and enforcing the desired state, we will enlist the clients and see true Puppet
    automation at work.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从手动配置转向将 Puppet 作为中央配置服务器，并在清单文件中定义需要分发到所需节点的设置。为了开始这个过程，我们将创建清单文件；这些只是文本文件，并且在
    Puppet 主控服务器上使用 `puppet apply` 进行本地应用。一旦验证了清单的工作状态并强制执行所需状态，我们将注册客户端并看到真正的 Puppet
    自动化工作。
- en: The building blocks for Puppet start with the resource declarations that we
    have already looked at. These declarations are written to manifest files, which
    have the extension `.pp`. Within the manifest file, resources can be grouped together
    into classes. A class often represents related resources, such as the `openssh-server`
    package, the `sshd` service, and the `/etc/ssh/sshd_config` configuration file.
    It would seem reasonable to group these resources together in a class definition.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 的构建块始于我们已经查看过的资源声明。这些声明被写入具有扩展名 `.pp` 的清单文件中。在清单文件中，资源可以被分组成类。一个类通常表示相关的资源，例如
    `openssh-server` 软件包、`sshd` 服务以及 `/etc/ssh/sshd_config` 配置文件。将这些资源组合到类定义中似乎是合理的做法。
- en: 'We can view these building blocks by taking a look inside an example manifest
    file, as shown in the following diagram:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看示例清单文件的内部来查看这些构建块，如下图所示：
- en: '![Managing packages, services, and files](img/5920OS_09_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![管理软件包、服务和文件](img/5920OS_09_03.jpg)'
- en: Classes
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类
- en: 'Classes are reusable because a class can be used by multiple node definitions
    and are said to be `singleton` in the sense that once a given class is used on
    a node, it can only be used once and cannot be redeclared for that node. The class
    we have created here is named `ssh`. A class has to be first defined and then
    declared. The following code block is an example of a class definition:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 类是可重用的，因为一个类可以被多个节点定义使用，并且在某个节点上使用过给定类之后，它只能使用一次，不能重新声明。我们在这里创建的类名为 `ssh`。必须先定义类，然后才能声明。以下代码块是一个类定义的示例：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following example code shows the same class being declared:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例代码展示了同一类的声明方式：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Resource definition
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源定义
- en: Resource definitions, such as what we looked at earlier for the user resource,
    do not need to be enclosed within classes; however, related resources are often
    grouped together by means of the class for ease of assignment to nodes. In this
    example, we define a file resource and a service resource. The name of the service
    resource must match the name of the service on the node to which it will be assigned;
    in the case of CentOS, the OpenSSH server is the `sshd` service.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 资源定义，比如我们之前为用户资源所看到的内容，不需要被包含在类中；然而，通常通过类的方式将相关资源组合起来，以便于分配给节点。在这个例子中，我们定义了一个文件资源和一个服务资源。服务资源的名称必须与将要分配到的节点上的服务名称匹配；在
    CentOS 的情况下，OpenSSH 服务器是 `sshd` 服务。
- en: 'A resource in Puppet is an instance of a specific resource type. To list all
    the available types in CentOS, we can use the `describe` subcommand:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Puppet 中，资源是特定资源类型的实例。要列出 CentOS 中所有可用的类型，我们可以使用 `describe` 子命令：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A resource type has a defined schema that states which attributes are available.
    To list the schema details of a resource type, we can use the `describe` subcommand
    again:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 资源类型有一个定义的模式，说明了哪些属性是可用的。要列出资源类型的模式详细信息，我们可以再次使用 `describe` 子命令：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A short description is shown with and without the `-s` option; a full listing
    of the resource type schema is listed. In the previous commands, we display information
    for the `user` resource type.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `-s` 选项和不使用 `-s` 选项时都会显示简短描述；资源类型模式的完整列表将列出。在前面的命令中，我们显示了 `user` 资源类型的信息。
- en: 'Earlier in this chapter, we created a new user account from the command line
    using `puppet resource`. If we needed a system account on many nodes and wished
    that Puppet provision the account, we can create a `user` resource definition
    within a manifest file similar to the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章早些时候，我们通过命令行使用 `puppet resource` 创建了一个新用户账户。如果我们需要在多个节点上创建系统账户，并希望 Puppet
    为其配置账户，我们可以在类似于以下的清单文件中创建 `user` 资源定义：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Puppet facts
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet 事实
- en: 'In the example manifest we listed earlier, we defined a file resource for the
    `/etc/motd` file. This is displayed when a user logs into the system, be it locally
    or via a remote SSH connection. The Puppet agent will compare facts from the node''s
    configuration to see if it matches the desired state. These facts are gathered
    from the machine''s configuration using the `/usr/bin/facter` command. We can
    display these facts in the following way:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前列出的示例清单中，我们为 `/etc/motd` 文件定义了一个文件资源。当用户登录系统时，无论是本地登录还是通过远程 SSH 连接，都会显示该文件。Puppet
    代理将比较节点配置中的事实，以查看是否与期望的状态匹配。这些事实通过 `/usr/bin/facter` 命令从机器配置中收集。我们可以通过以下方式显示这些事实：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding command will display all the facts, whereas the following command
    will display just the IP address:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将显示所有事实，而以下命令仅显示 IP 地址：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can further expand the resource definition using additional attributes for
    the file and fill out the content with some facts as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用附加属性来进一步扩展资源定义，并用一些事实填充内容，如下所示：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If this resource definition was applied to a node, it would ensure that the
    file is of the type "file"; rather than a directory, the permission would be set
    to `rw- r-- r--`, and the contents would expand with three variables created from
    facts. This will create contents similar to the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此资源定义应用于某个节点，它将确保该文件类型为“文件”；而不是目录，权限将设置为 `rw- r-- r--`，并且内容将随着三个基于事实的变量扩展。这将创建如下所示的内容：
- en: '![Puppet facts](img/5920OS_09_04.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet 事实](img/5920OS_09_04.jpg)'
- en: Remember that we only need to create the resource definition once. On the Puppet
    server, this one definition will then be applied to all the nodes it is assigned
    to. However, using variables based on facts from each node, we can create unique
    content for each individual `/etc/motd` file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们只需要创建一次资源定义。在 Puppet 服务器上，这个定义将应用于所有分配给它的节点。然而，通过使用基于每个节点的事实的变量，我们可以为每个独立的
    `/etc/motd` 文件创建独特的内容。
- en: Using include
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 include
- en: 'The `include` statement declares the use of the class. If we define a class
    and do not use the `include` statement, then none of the resource definitions
    will be used. The class can be defined within the same manifest in which it is
    declared, but more often, classes are defined in separate manifest files created
    within the puppet module path. The `modulepath` defaults to the `/etc/puppet/modules`
    and `/usr/share/puppet/modules` directories. You can view the module path, which
    is colon delimited, using the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`include` 语句声明了类的使用。如果我们定义了一个类，但没有使用 `include` 语句，那么任何资源定义都不会被使用。类可以在声明它的同一个清单中定义，但更常见的是，类定义在单独的清单文件中，这些文件是通过
    Puppet 模块路径创建的。`modulepath` 默认指向 `/etc/puppet/modules` 和 `/usr/share/puppet/modules`
    目录。你可以使用以下命令查看模块路径，它是以冒号分隔的：'
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output from my CentOS system shows the default settings, as shown in the
    following screen capture:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 CentOS 系统上的输出显示了默认设置，如以下屏幕截图所示：
- en: '![Using include](img/5920OS_09_05.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![使用 include](img/5920OS_09_05.jpg)'
- en: Creating and testing manifests
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和测试清单
- en: 'Manifests are ASCII text files that have the `.pp` extension. These files contain
    class declarations and/or resource definitions. Classes are also defined and declared
    within manifests; however, as mentioned before, they are often defined in separate
    manifest files to those where they are declared. This allows for greater modularity
    of your code. The manifest file can be supplied as a local file and invoked via
    the `apply` subcommand of Puppet or, more often, from the Puppet master. We will
    apply the manifest locally using `puppet apply`. The file that we will create
    will be consistent with a client server deployment so that we can reuse the same
    file once we have tested it locally; for this, we will create the file as `/etc/puppet/manifests/site.pp`.
    Nodes, when connecting to the Puppet master, will look for the `site.pp` file
    for their configuration. The example manifest is shown in the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 清单是具有`.pp`扩展名的 ASCII 文本文件。这些文件包含类声明和/或资源定义。类也在清单中定义和声明；然而，正如前面所提到的，它们通常在与声明它们的清单文件不同的独立文件中定义。这允许代码具有更大的模块化。清单文件可以作为本地文件提供，并通过
    Puppet 的`apply`子命令调用，或者更常见的是通过 Puppet 主服务器进行调用。我们将使用`puppet apply`在本地应用清单。我们将创建的文件将与客户端-服务器部署一致，这样一旦在本地测试完成，我们可以重用相同的文件；为此，我们将创建文件`/etc/puppet/manifests/site.pp`。节点在连接到
    Puppet 主服务器时，将查找`site.pp`文件以获取其配置。示例清单如下所示：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With the manifest created and saved under `/etc/puppet/manifests/site.pp`,
    we can validate the syntax of the file with the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单已创建并保存在`/etc/puppet/manifests/site.pp`后，我们可以使用以下命令验证文件的语法：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If errors can be seen, then we can re-edit the file to correct these errors,
    and when the output is error free, we can manually apply the file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果看到错误，可以重新编辑文件以修正这些错误，当输出没有错误时，我们可以手动应用该文件：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Using the `cat` command, we can validate the contents of the `/etc/motd` file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`cat`命令，我们可以验证`/etc/motd`文件的内容：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If we now stop the `sshd` service and change the permissions of the file, we
    can see how Puppet ensures a consistent configuration:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在停止`sshd`服务并更改文件的权限，我们可以看到 Puppet 如何确保配置的一致性：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: With the changes made, we have diverged from the desired state and can now reapply
    the manifest; under normal client-server operations, the Puppet agent will check
    into the server every 30 minutes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所做的更改，我们已偏离所需的状态，现在可以重新应用清单；在正常的客户端-服务器操作中，Puppet 代理每 30 分钟会检查一次服务器。
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output should include notices similar to those in the following screenshot,
    indicating that the service has been started and the mode has been changed:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应包括类似以下截图的通知，表明服务已经启动并且模式已更改：
- en: '![Creating and testing manifests](img/5920OS_09_06.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![创建和测试清单](img/5920OS_09_06.jpg)'
- en: Enrolling remote puppet agents
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册远程 Puppet 代理
- en: As we saw, Puppet can be effective in maintaining a consistent configuration,
    but we do not want to create the manifests on each device and run the puppet commands
    manually. To see the real strength of Puppet as a central configuration server,
    we need to enroll clients and have the puppet agent run as a service. As we mentioned
    before, the agent will check its desired state every 30 minutes automatically
    when the agent service is running.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Puppet 在保持一致的配置方面非常有效，但我们不希望在每台设备上创建清单并手动运行 Puppet 命令。为了看到 Puppet 作为中央配置服务器的真正强大功能，我们需要注册客户端，并让
    Puppet 代理作为服务运行。正如我们之前提到的，当代理服务运行时，代理将每 30 分钟自动检查其期望的状态。
- en: 'From a remote CentOS 6.5 system, we will check whether we can resolve the hostname
    of the Puppet master, using the follow command line:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从远程 CentOS 6.5 系统，我们将使用以下命令检查是否能够解析 Puppet 主服务器的主机名：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As seen before, we will need to ensure that we have time synchronization on
    our remote node:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们需要确保在远程节点上进行时间同步：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will add the remote Puppet labs repository to the remote client CentOS system:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把远程 Puppet Labs 仓库添加到远程客户端 CentOS 系统：
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, we will install the Puppet agent on the client system and display
    the version of Puppet:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在客户端系统上安装 Puppet 代理并显示 Puppet 的版本：
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: At the time of writing this, the version of the Puppet Labs repository is 3.6.2.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Puppet Labs 仓库的版本为 3.6.2。
- en: 'We are now ready to test the client. The first step towards this is to start
    the agent manually so that we can enroll the node on the server. This will submit
    a certificate signing request to the Puppet master, as the node is not yet enrolled:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备测试客户端。第一步是手动启动代理，这样我们可以将节点注册到服务器。这将向Puppet主节点提交证书签名请求，因为该节点尚未注册：
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Returning now to the console of the Puppet master, we can check the certificate
    authority for agent signing request:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在返回到Puppet主节点的控制台，我们可以检查代理签名请求的证书颁发机构：
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We should see the request from the client machine on our lab setup; the client
    request shows `centos65.tup.com`. We can accept and sign this request using the
    following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能在我们的实验室设置中看到来自客户端机器的请求；客户端请求显示`centos65.tup.com`。我们可以使用以下命令接受并签署此请求：
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We will now return to the client machine and rerun the test agent; this will
    download the signed certificate, and the agent will then download and apply the
    `site.pp` manifest:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们返回到客户端机器并重新运行测试代理；这将下载签名证书，代理随后将下载并应用`site.pp`清单：
- en: '[PRE32]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can now check the contents of the `/etc/motd` file. We should have the content
    we saw before, but with the IP address of this node. Using the `cat` command from
    the remote client machine, the output will look similar to the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以检查`/etc/motd`文件的内容。我们应该能看到之前看到的内容，但加上了该节点的IP地址。从远程客户端机器使用`cat`命令，输出将类似于以下截图：
- en: '![Enrolling remote puppet agents](img/5920OS_09_07.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![注册远程Puppet代理](img/5920OS_09_07.jpg)'
- en: Now that we have installed the signed certificate onto the client, we can start
    the agent service and leave the system to manage itself; we can have even more
    time on the golf course now!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在客户端安装了签名证书，可以启动代理服务并让系统自我管理；现在我们可以有更多时间去高尔夫球场了！
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: On CentOS, the agent service is just Puppet and with the service running, the
    agent will check the configuration every 30 minutes.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS上，代理服务就是Puppet，并且在服务运行时，代理每30分钟检查一次配置。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how we can implement central configuration management
    using Puppet. Although we only looked at it on CentOS, the configuration can work
    across many operating systems including Linux, Windows, and Unix. The main server
    is the Puppet master and agents connected on the TCP port `8140` to download the
    site manifest. This manifest can include other classes but will determine the
    desired configuration for a node.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们探讨了如何使用Puppet实现中央配置管理。虽然我们仅在CentOS上进行了演示，但该配置可以在多个操作系统上工作，包括Linux、Windows和Unix。主服务器是Puppet主节点，代理通过TCP端口`8140`连接以下载站点清单。该清单可以包括其他类，但会确定节点的期望配置。
- en: As we move onto the next chapter, we will look at how we can use **pluggable
    authentication modules** (**PAM**) to help harden the CentOS host, as well as
    venture into the world of SELinux.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一个章节时，我们将探讨如何使用**可插拔认证模块**（**PAM**）来帮助强化CentOS主机，并进一步了解SELinux的世界。

- en: Chapter 3. Securing Your System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Linux firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing access to a service through the firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying your firewall by port scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning off unnecessary services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying the strength of passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling root login over SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting Webmin access to a specific IP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to Webmin securely over an SSH tunnel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closing inactive Webmin sessions automatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some people say that the only secure machine is one that is switched off. This
    may be true, but that machine is not very useful. If you want to make your server
    more functional, you'll have to turn it on and most likely expose it to the curious
    eyes of the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Online computer security is a topic large enough to deserve its own book. In
    fact, a whole shelf of such books is readily available. In this chapter, we will
    learn basic techniques, which will allow you to secure your server before putting
    it up online. If your server is exposed to the Internet, it will be a good idea
    to follow up by doing more in-depth security research and monitor what's happening
    to your machine on a day-to-day basis. Because this is a book on Webmin, we will
    only address topics in which Webmin can assist you.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter is divided into three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll begin by running through a basic checklist of security issues that every
    system administrator should keep in mind. We'll point to the recipes in this book
    if Webmin can assist you with these topics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first six recipes in this chapter cover topics related to general system
    security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remaining recipes refer to securing Webmin itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server security checklist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of basic security precautions that you should undertake on
    any computer system exposed on the Internet. This list is not comprehensive; there
    are other things you might probably want to do, but it's a good starting point
    and you shouldn't be ignoring these areas.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping your system up-to-date
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Software is never perfect and mistakes are discovered every day. Some of these
    mistakes are merely inconvenient, but others have the potential to be exploited
    by nefarious people to break into your machine. It's a critical part of an online
    system's maintenance to be up-to-date with security patches and system updates.
    Refer to the *Updating the installed packages to the latest versions* and *Getting
    an e-mail when new versions of packages become available* recipes from [Chapter
    1,](ch01.html "Chapter 1. Setting Up Your System") *Setting Up Your System*, for
    information about keeping yourself updated.
  prefs: []
  type: TYPE_NORMAL
- en: Turning off unnecessary services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A security flaw in your FTP server software will not be very dangerous if this
    service is not running. It's a good idea to switch off all the unessential services
    to minimize your system's exposure. Refer to the *Turning off unnecessary services*
    and *Verifying your firewall by port scanning* recipes in this chapter for more
    information on this topic.
  prefs: []
  type: TYPE_NORMAL
- en: Building a firewall around your system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use packet-filtering software to restrict access to your system. You
    can decide whether you want to allow only people from certain parts of the Internet
    to connect, which ports should accept connections, or whether some services will
    be available only locally. Refer to the *Setting up a Linux firewall* and *Allowing
    access to a service through the firewall* recipes in this chapter for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Performing backups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case something does go wrong, it's important to keep a backup copy of all
    your essential data, preferably on another system in another location. Refer to
    [Chapter 7](ch07.html "Chapter 7. Backing Up Your System"), *Backing Up Your System*,
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring your system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If something goes wrong on your server, it's important that you are the first
    one to know about it. Keep an eye on your system's logs and set up your system
    to send you automated e-mails with log updates. If someone breaks into your system,
    they may tamper with the logs. So, it's a good idea to keep logs on a separate
    dedicated logging server. For more information, look at [Chapter 5](ch05.html
    "Chapter 5. Monitoring Your System"), *Monitoring Your System*.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the strength of your passwords
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No matter how tight your security is otherwise, if you leave your root password
    set to `root` or `admin`, your server is sure to get hacked. Likewise, the strength
    of your users' passwords should be periodically verified. See the *Verifying the
    strength of passwords* recipe in this chapter. It's actually a good idea to disable
    root's login over SSH altogether. For this, take a look at the *Disabling root
    login over SSH* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the system security and setting up intrusion detection and prevention
    software
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following topics go beyond the scope of this book. However, if you want
    to make sure that your server is as secure as possible, you should implement the
    following processes:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform regular security audits (using tools such as Nessus).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up intrusion detection and prevention systems (OSSEC, Bro Network Security
    Monitor, or Snort).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scan for viruses and malware (ClamAV and Linux Malware Detect).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for rootkits (chkrootkit and rkhunter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More information about the following systems can be found on their web pages:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Nessus**: [http://www.tenable.com/products/Nessus](http://www.tenable.com/products/Nessus).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**OSSEC** : [http://www.ossec.net](http://www.ossec.net).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Bro** : [http://www.bro.org](http://www.bro.org).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Snort** : [http://www.snort.org](http://www.snort.org).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**ClamAV** : [http://www.clamav.net](http://www.clamav.net).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Linux Malware Detect** : [https://www.rfxn.com/projects/linux-malware-detect/](https://www.rfxn.com/projects/linux-malware-detect/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**chkrootkit** : [http://www.chkrootkit.org](http://www.chkrootkit.org).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**rkhunter** : [http://rkhunter.sourceforge.net](http://rkhunter.sourceforge.net).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Backtrack is a Linux distribution that comes with a wide range of preinstalled
    security tools. It's a good starting point for security testing and auditing your
    servers. More information is available online at [http://www.backtrack-linux.org](http://www.backtrack-linux.org).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Setting up a Linux firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux systems have a firewall software built right into the kernel. This packet-filtering
    framework is called **netfilter** (since Linux 2.4). It is controlled by a tool
    called `iptables`, which instructs the kernel what to do with incoming and outgoing
    network packets.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will begin with an empty `iptables` configuration (firewall
    disabled) and configure it to drop any incoming packets except those we specifically
    allow. Before we set up a firewall, we should review some basic concepts related
    to network communication and the organization of `iptables`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some basic packet-filtering concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Packets**: The Internet is a packet-switched network. This means that all
    communication is facilitated by breaking up the content into small blocks called
    packets, which are routed from one computer on the network to another.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP address**: The adresses of machines on the Internet are specified by numerical
    IP addresses, such as `93.184.216.119` (IPv4) or `2606:2800:220:6d:26bf:1447:1097:aa7`
    (IPv6).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port number**: Most common applications use the TCP or UDP transport protocols
    that require a specific port number to distinguish between different services
    running on the same machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packet header**: Each packet passing through the network contains a header,
    which specifies where it is coming from and where it''s travelling. This allows
    routers on the Internet to guide the packets in the right direction or send error
    messages back to the sender.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packet filtering**: The firewall software is able to inspect packet headers
    and decide whether a particular packet should be allowed to proceed on its way
    or should be dropped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some iptables terminology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `iptables` tool is capable of performing quite a complex set of operations
    on packets. The rules used to make decisions about a packet''s fate are grouped
    into several levels of organization, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table**: This is the highest level of organization. The `iptables` tool allows
    you to filter network packets (using the `filter` table), set up a network address
    translation system (using the `nat` table), or modify the packets (using the `mangle`
    table). We will focus only on the packet filtering functionality (`filter`) to
    create a firewall.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chain**: Each table contains a number of chains of rules, which are applied
    in specific situations. The chains that are built into the `filter` table are
    called `INPUT` (applied to the packets coming into our system), `OUTPUT` (applied
    to the packets originating on our system), and `FORWARD` (applied to the packets
    coming into our system, but which are destined for another system). In this recipe,
    we will focus on incoming traffic and the `INPUT` chain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rule**: Any packet that passes through the firewall is compared to the rules
    in the appropriate chain. The rules may be configured to match a specific source
    or destination IP addresses or port numbers. They may also match packets on a
    specific network interface, protocol, or connection state. Rules are tried in
    a specific order and the first rule that matches the packet can decide if the
    packet is accepted or dropped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default policy**: If the packet doesn''t match any rules, its fate will be
    decided by the chain''s default policy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will set up a firewall configuration from scratch and reset
    any configuration that your system may have come with. This is not necessary,
    and if you know how `iptables` work, you may build on your system's default firewall
    configuration. In this case, you may wish to skip ahead to the recipe *Allowing
    access to a service through the firewall*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Webmin also provides a series of predefined configurations that you may use
    to initialize your firewall. These configurations will become available after
    enabling the firewall or by navigating to **Networking** | **Linux Firewall**
    and clicking **Reset Firewall**. Webmin''s predefined firewall configuration choices
    are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5849OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table describes what Webmin''s predefined firewall configurations
    do:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Allow all traffic** | This is a configuration without any rules, which
    allows all traffic by default. |'
  prefs: []
  type: TYPE_TB
- en: '| **Block all incoming connections on external interface** | This prevents
    connections to your server from the network and allows only established connections
    and basic DNS and ICMP packets through. |'
  prefs: []
  type: TYPE_TB
- en: '| **Block all except SSH and IDENT on external interface** | This is the same
    as *Block all incoming connections on external interface*, but allows incoming
    SSH connections and, unfortunately, requests of the **Identification Protocol**
    (**IDENT**). Permitting the latter is not recommended. |'
  prefs: []
  type: TYPE_TB
- en: '| **Block all except SSH, IDENT, ping and high ports on interface** | This
    is the same as *Block all except SSH and IDENT on external interface*, but also
    allows your server to respond to the ping command and allows requests to most
    ports in the range 1024 to 65535\. These high ports may be used to accept connections
    by processes started by non-root users. This configuration should not be used
    on the open Internet. |'
  prefs: []
  type: TYPE_TB
- en: '| **Block all except ports used for virtual hosting, on interface** | This
    allows incoming connections to most commonly used services, such as SSH, HTTP,
    mail, FTP, and DNS. This also allows connections to Webmin, Usermin, and unfortunately
    IDENT. |'
  prefs: []
  type: TYPE_TB
- en: '| **Do network address translation on external interface** | This sets the
    Masquerade rule on the POSTROUTING chain. This allows your server to act as a
    network gateway for other computers on your network. |'
  prefs: []
  type: TYPE_TB
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to set up a firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: Check if your system already has an `iptables` firewall set up. This can be
    done by navigating to **Networking** | **Linux Firewall**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your firewall is set up, you will see a list of rules in the chains of the
    filter table. Create a new firewall configuration by clicking **Reset Firewall**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the option **Allow all traffic**, check the **Enable firewall at boot
    time?** box, and click **Setup Firewall**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that Webmin is showing the table for **Packet filtering (filter)**
    and that no rules are set up yet. Your screen should resemble the following screenshot:![How
    to do it...](img/5849OS_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now create the basic set of rules that will allow your firewall to function
    properly. The first rule will allow incoming packets that are part of an already
    established connection. Add the first rule to the `INPUT` chain by clicking **Add
    Rule** in the **Incoming Packets** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the following options:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set **Action to take** to **Accept**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Connection states**, select **Equals** and both **ESTABLISHED** and **RELATED**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, click the **Create** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The second rule will allow incoming network diagnostics (ICMP) packets (`ping`,
    `traceroute`, and so on). Click **Add Rule** again and set the following options
    before clicking **Create**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Action to take** to **Accept**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Network protocol**, select **Equals** and **ICMP**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The third rule will allow any connection originating from our own machine via
    the local loopback interface. Create the rule as described in the preceding step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Action to take** to **Accept**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Incoming interface**, select **Equals** and **lo**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding rules are sufficient to make your network interface behave properly
    in most cases. We can now add rules that are specific to our particular needs.
    Let''s make a rule to allow incoming SSH connections. Create a rule with the following
    options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Action to take** to **Accept**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Network protocol**, select **Equals** and **TCP**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Destination TCP or UDP port**, select **Equals** and set **Port(s)** to
    `22`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Connection states**, select **Equals** and **NEW**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Our final rules will allow incoming Webmin connections. Create a rule with the
    same options as for SSH. However, instead of 22 select port 10000.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Webmin also uses UDP port 10000 to discover other servers that are running Webmin
    on your network. If you plan to use Webmin's clustering functions, you should
    also add a rule for port 10000 and **Network protocol** **UDP**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, let's set the chain's default policy to drop packets that don't match
    any of our rules. Select the default action to **Drop** and click the **Set Default
    Action To** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You may choose to *drop* or *reject* packets. When packets are dropped, your
    server sends no response, and when they are rejected, it sends a friendly *port
    closed* response.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At this stage, your firewall configuration should resemble the following screenshot.
    Verify that you haven't made any mistakes.![How to do it...](img/5849OS_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A firewall configuration that allows incoming SSH and Webmin connections, but
    drops all others.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To activate your new firewall, click the **Apply Configuration** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Modifying the firewall configuration using a network tool such as Webmin is
    a little tricky; if you make a mistake, you could potentially lock yourself out.
    In case of emergency, you can disable the firewall temporarily by logging in through
    the system console and issuing the following commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first command flushes (removes) all rules from the `INPUT` chain and the
    second sets its default policy to `ACCEPT` incoming packets. These changes will
    be temporary and the default configuration will be reset after a system reboot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin really helps us out here, especially if your system doesn't come with
    a default firewall configuration. Webmin issues a long series of commands to create
    an empty but valid `iptables` configuration. It then saves this configuration
    to a file and allows us to add rules to it. When we ask Webmin to enable the firewall
    at boot time, it also adds the appropriate commands to the system's network configuration
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is quite a bit more that `iptables` can do for you. For instance, it would
    be a good idea to limit access to Webmin only to yourself and perhaps some of
    your administrator colleagues. Other people on the Internet don't even need to
    know that you are running Webmin. In order to achieve this, you can restrict access
    to a list of IP addresses or Internet subnets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the rule you created for Webmin access and add another condition.
    Set source address or network to the IP of the machine you''re connecting from.
    If you''d like to grant access to the whole network segment, also specify the
    subnet mask after a slash character (/). For instance, if you would like to restrict
    the access to requests coming from IPs in the range 10.10.10.0 to 10.10.10.255,
    use the following address and mask: `10.10.10.0/255.255.255.0`'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we only set up rules that filter incoming network traffic. Firewalls
    can also control outgoing traffic from your server to the Internet. It may be
    a good idea to block outgoing connections on machines that could potentially be
    compromised by user-installed malware.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can verify that your firewall works as expected by scanning the ports. Refer
    to the *Verifying your firewall by port scanning* recipe for more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're interested in learning more about what `iptables` can do, check out
    its documentation at [http://www.netfilter.org/documentation/](http://www.netfilter.org/documentation/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about Webmin's firewall module functions, take a look at
    its Wiki page at [http://doxfer.com/Webmin/LinuxFirewall](http://doxfer.com/Webmin/LinuxFirewall).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing access to a service through the firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once your firewall is set up, all unauthorized traffic coming into your server
    will be dropped. If you decide to add a service to your server, you'll need to
    add another firewall rule to allow the incoming traffic to reach the service.
    Otherwise, external users will not be able to access the new service. In fact,
    they will not even be able to see that the service is running and their connections
    will simply time out.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that your firewall is set up. Refer to the *Setting up a Linux firewall*
    recipe for more information. Make sure you know which port numbers and protocols
    are used by the service to which you want to allow access. Common port numbers
    such as 80 and 443 for a web server and 20 and 21 for FTP are listed in the file
    `/etc/services`. Usermin uses the port 20000 by default.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps for accessing a service through firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Networking** | **Linux Firewall**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add rule** button in the **Incoming packets (INPUT)** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Action to take** to **Accept**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Network protocol**, select **Equals** and **TCP** (or **UDP** if your
    service requires it)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Destination TCP or UDP port**, select **Equals** and set **Port(s)** to
    the port number required
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Connection states**, select **Equals** and **NEW**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `iptables` rules are applied in a specific order. This is the order in which
    the rules are listed in Webmin from top to bottom. If a rule to accept or drop
    matches a packet, other rules further down the list will have no effect. When
    you make a rule to accept a certain type of packet, make sure it's placed before
    a more general rule that would cause this packet to be dropped or rejected. Use
    the grey upward arrows to move rules up the chain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Apply Configuration** button to activate the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a new firewall rule that allows packets to come in if, and only if,
    they are using the protocol we specified (TCP or UDP), the port number we selected,
    and they are packets initiating the connection (NEW state).
  prefs: []
  type: TYPE_NORMAL
- en: Webmin adds our rule to the `iptables` configuration file and loads the new
    firewall configuration. From now on, packets with the specified port will be allowed
    a safe passage into your system.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may wish to run services on your system that will only be accessible internally
    from the same machine. A database server for your web application may be a good
    example of such a case. If you wish to allow access to a service only locally,
    you can create a firewall rule that will allow incoming request only if they are
    coming in over the local loopback interface.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a service accessible only from the internal network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to create a local-only service, follow the same steps as described
    in this recipe, but add another condition to the rule. Under **Incoming interface**,
    select **Equals** and **lo** (the name of the local loopback interface).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our default firewall configuration, which is described in the *Setting up a
    Linux firewall* recipe, allows all locally initiated requests to come in. You
    may disable this behavior by removing its rule and allow local access to specific
    services only.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about how the `iptables` firewall works, refer to the *Setting
    up a Linux firewall* recipe of this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying your firewall by port scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After your firewall is configured, you may wish to check that you haven't unintentionally
    left any unnecessary open doors. A good way to do this is to initiate a scan from
    another machine that will tell you what open ports it discovered on your server.
    Only ports associated with services that you want to make publicly accessible
    should be found.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using two machines in this recipe. One will be the scanner machine
    and the other will be the server we want to scan.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap is a great and widely available port scanner. Let's start by installing
    it on the scanner machine. You can install it from the repositories of most Linux
    distributions, from ports on BSD and from Homebrew on OS X. You can also download
    an installer for Windows from [http://nmap.org/download.html](http://nmap.org/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to verify your firewall by port scanning:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On your scanner machine, open up a terminal window and type the following command
    (here, `webmin.host` is the IP address or domain name of the server you wish to
    scan):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output lists the open ports discovered on your server. Among them, you will
    find port 22 for SSH connections and port 10000 for Webmin. If you find ports
    that you didn't expect in the scan, you may need to go back to the firewall configuration
    to close them down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Some ISPs may block outgoing scan packets before they reach the server that
    you're testing. For instance, packets addressed to port 25 are quite commonly
    blocked to fight against spam e-mail.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can verify that the scan you're performing is actually working by running
    it against the server with its firewall temporarily disabled. When the server
    has no active firewall, your remote scan should give results similar to executing
    the following command on the server itself. This `netstat` command enumerates
    the open ports on the server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Take a look at the *Turning off unnecessary services* recipe in this chapter
    for more information about using `netstat`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With its default options, Nmap scans will send a SYN packet (the first part
    of an initial connection handshake) to the 1,000 most commonly used ports on the
    machine you specify. If the machine is accepting connections on any port, it will
    send an SYN/ACK packet back, acknowledging that it is ready to open a connection.
    From this, Nmap can determine that the port is open.
  prefs: []
  type: TYPE_NORMAL
- en: Connections to those ports that your firewall is set to drop will be marked
    as `filtered` because they don't return any information at all. Ports that your
    firewall is set to reject will return a port unreachable message and will be marked
    as `closed` in your scan.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nmap has a wide variety of options. It can be used to perform a scan of the
    whole network, scan every port of a machine, or perform a scan that doesn't require
    administrative privileges on the scanning machine.
  prefs: []
  type: TYPE_NORMAL
- en: Host discovery with Nmap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to know what computers are active on your segment of the network,
    type in the following command, specifying the range of IP addresses that you want
    to scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Scanning all ports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Nmap scans only the 1,000 most commonly used port numbers. If you
    want to be more thorough and scan every single port, use the following command
    (with the `-p-` argument). Note that such a scan may take a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Scanning without administrative privileges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap''s standard port scanning technique requires administrative access on
    the scanning computer, because it uses raw sockets to perform only the first part
    of a connection (sending the SYN packet). If you don''t have administrative privileges,
    you can perform a different type of scan that initiates a normal connection by
    issuing the following command (with the `-sP` argument):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information, take a look at the Nmap Reference Guide on [http://nmap.org/book/man.html](http://nmap.org/book/man.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning off unnecessary services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to avoid potential security issues with services you're not actively
    using is to disable them. This recipe will list the steps to identify the running
    system services that have open network ports and disable them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by identifying the processes that open network ports on your systems.
    This can be done with the help of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **Command Shell**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the command `netstat -tulpen` and click **Execute command**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a list of server processes with active network connections.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Local Address` column, you will see entries such as `0.0.0.0:22`. This
    means that a process is listening on port 22\. The `PID/Program name` column will
    tell you which process is responsible for opening this port.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you identify a process that you are not using and you know that it isn''t
    essential to your system, you can disable it with the help of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Bootup and Shutdown**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the startup entry associated with the process and check the box next to
    its name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Disable Now and On Boot** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to **Others** | **Command Shell**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the `netstat -tulpen` command again and check that the process no longer
    appears on the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `netstat` command allows you to display information about the network connections.
    The arguments written as `-tulpen` are a mnemonic (*tulpen* means tulips in German)
    for the options that you need to verbosely list the servers with open ports listening
    for connections. The parameters serve the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-t` lists TCP connections'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-u` lists UDP connections'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-l` lists only connections that are listening (servers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p` will display the process ID and program name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-e` will give you extended information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-n` will display data as numbers instead of resolving it to names'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying the strength of passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you allow administrative users to log into your system using their username
    and password, your system is only as secure as the passwords used by those users.
    It's a good idea to periodically attempt to crack all the passwords on your system.
    If you find passwords that are easy to guess or crack through brute force, you
    should ask users to change them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the password-cracking program called John
    the Ripper. Start by installing the package named `john`. Refer to the *Installing
    software packages* recipe from [Chapter 1](ch01.html "Chapter 1. Setting Up Your
    System"), *Setting Up Your System*, for more details.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: John the Ripper tries to crack passwords by brute force, which means it will
    try every word and combination of characters. If any user on your system has a
    strong password (long and complex), John will not be able to crack it in a reasonable
    amount of time. You should let the cracking run for a couple of days and then
    decide that the remaining passwords are strong enough.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: John the Ripper tries to be a good system citizen and uses only spare CPU cycles
    that would otherwise go unused. It may nevertheless reduce the responsiveness
    of your system. So, if your system is under heavy load or its speed is mission
    critical, you may choose to crack passwords on a different machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to identify weak passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Scheduled Commands** and create a new command to
    run as root 5 minutes from now in the `/root` directory. Set the `john /etc/shadow`command
    for execution. Refer to the *Setting a command to be executed in the future* recipe
    in [Chapter 4](ch04.html "Chapter 4. Controlling Your System"), *Controlling Your
    System*, for more information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a couple of hours, you can check how many passwords were cracked. Navigate
    to **Others** | **Command Shell** and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will show you any passwords that are already cracked and the information
    about how many John the Ripper is still trying to guess. You can go back to the
    second step at any time to check the progress in cracking.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should reset the passwords for users whose passwords were cracked and inform
    them about the situation. Refer to the *Changing a user's password* recipe in
    [Chapter 2](ch02.html "Chapter 2. User Management"), *User Management*, for details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If some passwords remain uncracked after a couple of days, you may decide that
    they are strong enough and stop John the Ripper with the help of following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Running Processes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **CPU** option to **Display** processes ordered by processor usage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the top of the list, you will see `john`. Click its PID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Process information** screen, click the **Terminate** button to stop
    this cracking session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may resume the stopped cracking session by issuing the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the same procedure as in the first step to schedule its execution in the
    background.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you decide to finish password cracking, you should remove files created
    by John the Ripper. They will be stored in the `/root/.john` directory. It's especially
    important to remove the `john.pot` file as it contains all the passwords that
    were cracked and can be read by all users who have administrative privileges.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You provide John the Ripper with password hashes of your system users. The `john`
    program first determines which hashing techniques and salts your system uses.
    It then proceeds to apply the same hashing algorithm to every word in a wordlist
    file. If a hash it generates is identical to a password hash stored for one of
    your users, then this particular word was used as the password—the password is
    cracked. After trying every word in the wordlist, John the Ripper proceeds to
    try every letter combination possible. This part of the process takes a long time
    and uses a lot of CPU power. If you find that John is taking a very long time
    (more then a few days) to crack your passwords, you may decide that they are strong
    enough and stop.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling root login over SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Allowing the root user to log in over SSH is a potential security vulnerability.
    An attacker may try to break into your system by trying every password for the
    root user. It's recommended to disallow the root user's access over SSH and to
    log in as another user with the `sudo` privileges to perform administrative tasks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to disable root login:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Servers** | **SSH Server** | **Authentication**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **No** to the **Allow login by root?** question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back on the **SSH Server** module screen, click **Apply Changes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin updates the SSH configuration file (`/etc/ssh/sshd_config`) by setting
    `PermitRootLogin` to `no`. From now on, SSH will treat every password entered
    for the root user as incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting Webmin access to a specific IP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The firewall is your first line of defense, but you should take additional precautions
    while running Webmin on an Internet-connected server. Webmin allows you to restrict
    access to a list of specific IP addresses and networks. It's a good idea to protect
    Webmin this way; otherwise, an attacker can try to guess your password and take
    over your system.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will configure Webmin to accept connections only from your
    IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start, you should determine the IP address you are currently using
    to connect to Webmin. In order to do this, log into Webmin and navigate to **Webmin**
    | **Webmin Users** | **View Login Sessions**. Your active login session will be
    marked in bold and your address will be listed in the **IP address** column.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For restricting Webmin access, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Webmin** | **Webmin Configuration** | **IP Access Control**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Allowed IP addresses** to **Only allow from listed addresses**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your IP address in the text area below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Save**. Webmin will save changes and restart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From now on, you will be able to connect from the specified IP. However, users
    trying to connect to Webmin from other computers will receive an **HTTP 403 error
    (Access denied)**.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin stores information about which hosts are allowed to connect in its server
    configuration file (`/etc/webmin/miniserv.conf` by default). The line that allows
    host access starts with the keyword `allow`, and specifies a list of IP addresses
    and ranges separated with a space character. For instance, it may look like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Whenever a client tries to connect, Webmin consults this configuration to determine
    whether to allow the incoming connection or not.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin's IP access control module is quite flexible and allows you to specify
    sets of IP addresses in a number of ways.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing access from multiple IP addresses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The simplest way to allow access to Webmin from multiple locations is to add
    multiple IP addresses to the text area in the **IP Access Control** module. You
    can add as many IP addresses as needed, just place each one on a separate line.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing access from a dynamically allocated IP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many Internet providers allocate IP addresses dynamically. This type of address
    may change at some point in the future, which could leave you unable to connect
    to Webmin. If you're using a dynamic IP, you may consider signing up for dynamic
    DNS. A dynamic DNS service will provide you with a hostname that automatically
    updates to match your changing IP. Keeping this information up-to-date requires
    the setting up of a daemon process on your computer or network router.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are many providers of dynamic DNS; some also offer a basic free service.
    Take a look at the following or search for Dynamic DNS Providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DynamicDNS**: [http://dyn.com](http://dyn.com).'
  prefs: []
  type: TYPE_NORMAL
- en: '**NoIP**: [http://noip.com](http://noip.com).'
  prefs: []
  type: TYPE_NORMAL
- en: '**FreeDNS**: [http://freedns.afraid.org](http://freedns.afraid.org).'
  prefs: []
  type: TYPE_NORMAL
- en: For Webmin to grant access to your dynamically allocated IP address, go to the
    **IP Access Control** module and enter the hostname provided by your dynamic DNS
    provider.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing access from an IP range
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If all your Webmin users use the same Internet provider, they are probably
    using a shared network. If you know the range of IP addresses shared by this subnet,
    you can specify the range by using the subnet address/mask or address/mask bits
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both of the preceding lines are equivalent and specify all IP addresses between
    `192.0.2.0` and `192.0.2.255`. Don't be overly broad while specifying the IP range.
    Using the entire range of public IPs that is used by your Internet provider would
    not be a very good idea, because a potential attacker may have control of a computer
    connected to the Internet from the same provider.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing access from the local network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your server is available via your local network, you can tell Webmin to allow
    all the connections coming from within the LAN. In order to do this, follow the
    steps in this recipe, but also check the box marked as **Include local network
    in list**.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to Webmin securely over an SSH tunnel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your server is connected to the Internet and you use SSH to connect to it,
    you can secure it by disallowing Webmin from accepting any remote connections.
    You can then use an SSH tunnel to connect to Webmin. This lowers the potential
    attack surface of your machine and protects you against possible security vulnerabilities
    in Webmin itself. Any attacker would have to break into your SSH account or otherwise
    gain local access to your system to connect to Webmin.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you begin, you should follow the *Restricting Webmin access to a specific
    IP* recipe of this chapter and add the IP address `127.0.0.1` to the list of hosts
    allowed to connect to Webmin.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll be using the command line version of SSH that is available
    on most systems, but it is not available on Windows. Look in the *There's more...*
    section of this recipe for instructions specific to Windows.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to securely connect to Webmin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the client machine, open a terminal window and issue the following command.
    However, substitute `username` with your username and `webmin.host` with the IP
    address or host name of your server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter your SSH username and password to establish the connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the client machine, open a browser and navigate to the URL `https://localhost:15000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be able to use Webmin through an SSH tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can open an SSH tunnel by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'An SSH tunnel connects machines as listed in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/5849OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you open a tunnel, the SSH client opens a network port on the machine on
    which it is running (`client_port`). This port will now accept connections and
    all incoming packets will be intercepted by the SSH client program. The SSH client
    will encrypt them and send them using the SSH protocol to the SSH server machine.
    The SSH server will decrypt the packets and forward them to the remote machine
    (`remote_host:remote_port`). Responses sent by the remote machine will also be
    encrypted and traverse the tunnel in the opposite direction.
  prefs: []
  type: TYPE_NORMAL
- en: The tunnel we use to connect to Webmin is simpler because only two machines
    are involved. The local machine is also the SSH client machine, while the remote
    machine is also the SSH server.
  prefs: []
  type: TYPE_NORMAL
- en: When we issue the command
  prefs: []
  type: TYPE_NORMAL
- en: '`$ ssh -L 15000:localhost:10000 username@webmin.host`,'
  prefs: []
  type: TYPE_NORMAL
- en: we are opening port 15000 on our computer and the SSH server on `webmin.host`
    will forward all the packets to its own machine's Webmin port (`localhost:10000`).
    In effect, by connecting to our own computer's port 15000, we will have access
    to the remote Webmin interface as if we were connecting to that machine directly.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will cover two more things in this recipe: giving access to the SSH tunnel
    to other machines and creating an SSH tunnel on Windows using Putty.'
  prefs: []
  type: TYPE_NORMAL
- en: Sharing the SSH tunnel with other machines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, the SSH client will only allow tunneling of connections originating
    on the same machine. You can override this by using the `-g` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This command will allow all the computers that can connect to the SSH client
    machine on port 15000 access to Webmin on the remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a tunnel on Windows using Putty
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're running Windows, download the Putty SSH client from [http://www.chiark.greenend.org.uk/~sgtatham/putty/](http://www.chiark.greenend.org.uk/~sgtatham/putty/).
  prefs: []
  type: TYPE_NORMAL
- en: In order to create an SSH tunnel on Windows, start Putty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Session** section, provide the hostname or IP address of your Webmin
    host machine in the **Host Name (or IP address)** field as shown in the following
    screenshot:![Creating a tunnel on Windows using Putty](img/5849OS_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the configuration section by navigating to **Connection** | **SSH** | **Tunnels**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify port `15000` as **Source port**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify `localhost:10000` as **Destination**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the radio button labelled as **Local** as shown in the following screenshot:![Creating
    a tunnel on Windows using Putty](img/5849OS_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Open** to open the connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide your SSH username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the client machine, open a browser and navigate to `https://localhost:15000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be able to use Webmin through an SSH tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you are able to establish tunneled connections to Webmin, you will no longer
    need to provide remote access to it. You can remove Webmin's entry from the firewall
    configuration and instruct Webmin to listen for connections only on the local
    IP 127.0.0.1.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Setting up a Linux firewall* recipe of this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the *Specifying the IP address on which Webmin listens* section of
    the *Connecting to Webmin* recipe from [Chapter 1](ch01.html "Chapter 1. Setting
    Up Your System"), *Setting Up Your System*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closing inactive Webmin sessions automatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webmin's login sessions are not set to expire by default. This causes a potential
    security risk. If a user leaves his or her computer unattended while logged into
    Webmin, an attacker could potentially use the situation to harm your system or
    disable its security. Fortunately, this situation is easily remedied by changing
    a Webmin setting.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to close inactive Webmin sessions automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Webmin** | **Webmin Configuration** | **Authentication**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick the checkbox marked as **Auto-logout** and set the automatic logout to
    happen after 10 minutes of inactivity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin stores authentication options in its server configuration file (`/etc/webmin/miniserv.conf`
    by default). The line defining inactivity time after which users will be automatically
    logged out starts with the keyword `logouttime` and specifies the time in minutes.
    For instance, it may look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Whenever a client tries to connect, Webmin checks in the session database when
    this user was last connected. Webmin consults its configuration to determine whether
    the time elapsed is not higher then allowed. If the user wants to perform an action
    after the allowed inactivity time elapses, he or she is asked to log in again.
  prefs: []
  type: TYPE_NORMAL

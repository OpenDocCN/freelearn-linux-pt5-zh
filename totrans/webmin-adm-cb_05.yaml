- en: Chapter 5. Monitoring Your System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing and searching through system logfiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving Syslog messages to a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding other logfiles to Webmin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring logfile rotation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing recent logins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving an e-mail when a service stops running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically restarting a service that goes down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring a remote server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While your server is running, it keeps a record of the actions it performs.
    A log entry is made whenever a service is started or stopped, a cron job runs,
    a mail message is sent and especially whenever some action produces an unexpected
    result or error.
  prefs: []
  type: TYPE_NORMAL
- en: Log messages help you fix problems on your server. If something isn't working,
    there is probably a log message somewhere explaining what's happening and what
    the problem is. Log messages also allow you to detect unusual situations, such
    as attempts to break into your server. It's important to review your system logs
    regularly.
  prefs: []
  type: TYPE_NORMAL
- en: Each log message is useful for a limited time. After a couple of weeks or months,
    old log messages can be removed to prevent logs from growing too large and filling
    up your disk space.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will demonstrate how Webmin can be used as a convenient
    tool for viewing your system logfiles, how it can assist you in rotating logs
    to keep an archive and delete old entries. We will also demonstrate how Webmin
    can monitor your system by performing regular tests and how it can alert you to
    problems or even try to fix some of them automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing and searching through system logfiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can configure Webmin's System Logs module to be a one-stop source for all
    logging information about your system. In this recipe, we'll demonstrate how easy
    it is to quickly view and scan through logfiles using Webmin's interface. In the
    two recipes following this one, we'll show you how to add other logfiles to this
    module to create a comprehensive overview of your system's activity.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we'll inspect the `auth.log` file at `/var/log/`, which keeps
    a log of messages related to authentication and authorization. This file is present
    by default on most systems from the Debian family, but if you're using a different
    system, you may not find it. You can add this file to your system by following
    the recipe, *Saving Syslog messages to a file*.
  prefs: []
  type: TYPE_NORMAL
- en: You can, of course, follow the same steps to view any other file listed in the
    System Logs module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to view log messages:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **System Logs**. You will be presented with a list
    of logfiles available through Webmin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **View...** link in the line for the `/var/log/auth.log` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, Webmin will display the last 20 messages (lines) from this logfile.
    To view more lines, type in `40` in the field, **Last [ ] lines of file**, and
    click the **Refresh** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `auth.log` file will show you information about users logging in. We can
    filter the display to show only messages associated with Webmin. Type `webmin`
    in the field, **Only show lines with text**, and click **Refresh**:![How to do
    it...](img/5849OS_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now test that new messages appear in the log. Use another browser to
    log into Webmin, and then come back and click **Refresh** again to see a new message
    about the login attempt appear in the log.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Behind the scenes, Webmin uses the `tail` command to display the last lines
    of your system log. If you want to achieve a similar view at the terminal, you
    could use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to filter the log to include only lines containing the word, `webmin`,
    combine the `tail` command with `grep`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When debugging a problem on your system, it's often useful to watch the logfile
    messages appear as you're performing the task, which ends in an error. Webmin
    can automatically refresh the log display to show new messages as they come in.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring system logs to refresh automatically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to configure system logs to refresh automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **System Logs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Module Config** link in the top-left-hand side corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Seconds between log view refreshes** to `10`, and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, when you display a log, it will automatically refresh your view, filters
    and all, every 10 seconds. You can keep this window open while you're performing
    a debugging task, and watch as messages are output to the log.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Depending on your browser, Webmin''s automatic refresh functionality may be
    disabled by a security mechanism, which checks each incoming HTTP request for
    a correct referrer header. You can disable this mechanism by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Webmin** | **Webmin Configuration** | **Trusted Referrers**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answer **No** to **Referrer checking enabled?**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Save**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also follow the output as it is added to a file by using the `tail`
    command''s `-f` option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we discussed how to view and filter a logfile. In the following
    two recipes: *Saving Syslog messages to a file* and *Adding other logfiles to
    Webmin*, we will demonstrate how you can add other log messages to this interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving Syslog messages to a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The standard logging protocol on Unix and related systems is called Syslog.
    Most modern Linux distributions use an implementation such as **Rsyslog** or **Syslog-NG**.
    They all perform the same tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Allow software running on your system to send Syslog messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separate incoming messages by type and priority and save them to different files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most system utilities send log messages to Syslog, but other server software
    (such as Apache, MySQL, or PostgreSQL), by default, save messages directly to
    files on disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Webmin allows you to control Syslog and decide which messages get saved to
    which files. In order to understand how Syslog separates messages, we need to
    explain two concepts: **facilities** and **priorities**.'
  prefs: []
  type: TYPE_NORMAL
- en: Each message sent to Syslog is described by a facility level and priority level.
    Based on these properties, you can decide which messages to discard, which to
    save, and where.
  prefs: []
  type: TYPE_NORMAL
- en: 'A facility level describes what type of message this is. Since programs usually
    send all messages with the same facility, it usually specifies what type of program
    sent the message. The following table lists various facility levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Facility | Associated messages |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `auth` and `authpriv` | Messages associated with user authorization or security.
    These may contain sensitive information (especially `authpr` `iv`) and should
    be accessible only to trusted system users. |'
  prefs: []
  type: TYPE_TB
- en: '| `cron` | Messages associated with the execution of scheduled commands. |'
  prefs: []
  type: TYPE_TB
- en: '| `daemon` | Messages output by background processes (system daemons). |'
  prefs: []
  type: TYPE_TB
- en: '| `ftp` | Messages associated with the FTP server. |'
  prefs: []
  type: TYPE_TB
- en: '| `kern` | Messages generated by the system kernel. |'
  prefs: []
  type: TYPE_TB
- en: '| `local0` to `local7` | You can configure your local programs to send log
    messages to Syslog using these facilities. |'
  prefs: []
  type: TYPE_TB
- en: '| `lpr` | Messages associated with printing. |'
  prefs: []
  type: TYPE_TB
- en: '| `mail` | Messages associated with the mail server. |'
  prefs: []
  type: TYPE_TB
- en: '| `mark` | A special facility, which generates a timestamp at regular intervals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `news` | Obsolete. |'
  prefs: []
  type: TYPE_TB
- en: '| `syslog` | Messages associated with Syslog itself. |'
  prefs: []
  type: TYPE_TB
- en: '| `user` | Messages associated with user processes. This is also the default
    facility if no other was specified when sending the message. |'
  prefs: []
  type: TYPE_TB
- en: '| `uucp` | Obsolete. |'
  prefs: []
  type: TYPE_TB
- en: '| `*` | All of the above. |'
  prefs: []
  type: TYPE_TB
- en: 'The priority (severity) level describes how important a log message is. You
    can use this description to specify which messages to discard and which to keep.
    Priority levels have a specific order, so you can choose, for example, to log
    all messages with the priority, `warning`, and above. The following table lists
    priority levels from highest to lowest:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Priority | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `emerg` | Emergency—system is unstable. This is the highest possible priority
    level. |'
  prefs: []
  type: TYPE_TB
- en: '| `alert` | Alert—action must be taken immediately. |'
  prefs: []
  type: TYPE_TB
- en: '| `crit` | Critical—system is in a critical condition. Action should be taken.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `err` | Error—an error occurred and should be fixed. |'
  prefs: []
  type: TYPE_TB
- en: '| `warning` | Warning—something is not working as expected. Check configuration.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `notice` | Notice—system performed a significant action. |'
  prefs: []
  type: TYPE_TB
- en: '| `info` | Information—messages with information about the system''s normal
    functions. |'
  prefs: []
  type: TYPE_TB
- en: '| `debug` | Debugging—verbose messages used primarily for setting services
    up and debugging problems. |'
  prefs: []
  type: TYPE_TB
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use Webmin to instruct our Syslog daemon to save all
    log messages associated with user authorization to the file, `auth.log` at `/var/log/`.
    If you're using a Debian-based system, you will probably already have this file
    on your system. In this case, you can save these messages to a second file called
    `auth2.log` for practice and remove the configuration later.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to save Syslog messages to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **System Logs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add a new system log** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Log to File**, and specify `/var/log/auth.log` as the filename.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that **Logging active?** is set to **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under **Facilities**, choose **Many**, and enter both facility names associated
    with authentication (separated by a comma): `auth,authpriv`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Priorities**, choose **All**:![How to do it...](img/5849OS_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Apply Changes** button at the bottom of the **System Logs** module
    screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: On some systems, the **Apply Changes** button may not be visible or will have
    no effect. In this case, you'll need to restart the Syslog service manually.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If your system uses Rsyslog, you can restart it with this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refer to the recipe, *Executing a command on the server,* in [Chapter 4](ch04.html
    "Chapter 4. Controlling Your System"), *Controlling Your System* for information
    about executing commands via Webmin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now view the `/var/log/auth.log` file as described in the recipe, *Viewing
    and searching through system logfiles*.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the choices you make, Webmin updates your Syslog configuration file
    and restarts the service. Your Syslog daemon reads in the new configuration; if
    necessary, creates a new output file for log messages; and sends the selected
    messages there.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After you change your Syslog configuration, you may want to check if log messages
    are routed correctly to their intended destinations. You can send a log message
    to Syslog by executing the logger command. The command''s syntax is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, if you want to send a message `Hello Syslog` with a priority
    `info` and facility `auth`, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Check the `auth.log` file to see your log entry.
  prefs: []
  type: TYPE_NORMAL
- en: Adding other logfiles to Webmin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Server daemons, which do not use Syslog, save their log messages directly to
    files on your disk. Webmin allows you to view, search, and monitor all logfiles
    in ways described in this chapter's first recipe. For easy reference, you can
    add commonly viewed logfiles to the list in System Logs module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log messages you need to debug your problem are in there somewhere; you just
    need to know where to look. Before you can add them to Webmin, you need to find
    the logfile's full path.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Linux, logs are typically stored in the `/var/log` directory. The following
    table lists the default locations of log messages of some commonly used services:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Daemon | Default log file location |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Apache 2 | Messages may be output to: `/var/log/apache2/access.log`,`/var/log/apache2/error.log`,
    and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| MySQL | Messages may be output to: `/var/log/mysql/mysql.log`.or go to Syslog
    with the `daemon` facility. |'
  prefs: []
  type: TYPE_TB
- en: '| PostgreSQL | Messages may be output to: `/var/log/pgsql_log`.or go to Syslog
    with the `local0` facility. |'
  prefs: []
  type: TYPE_TB
- en: '| PHP | PHP does not specify a default log location. If PHP is running as an
    Apache module, messages may appear in Apache logs. Check your `php.ini` file to
    see if logging is enabled. |'
  prefs: []
  type: TYPE_TB
- en: '| Webmin | Messages may be output to: `/var/webmin/webmin.log` and other files
    in `/var/webmin`. |'
  prefs: []
  type: TYPE_TB
- en: Because every system distribution may configure your services in a slightly
    different way, check your service's configuration file to determine the location
    of its logs if you cannot find it in its default place.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll add the Apache access log (`/var/log/apache2/access.log`)
    and error log (`/var/log/apache2/error.log`) to Webmin's System Logs module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To monitor additional logfiles through Webmin, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **System Logs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Module Config** link in the top left-hand side corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the path to each logfile followed by a space and description in the **Other
    log files to show** field. Place each entry on a separate line as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/5849OS_05_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The files you added will now appear in the System Logs list.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The additional file definitions are stored in a configuration file (`/etc/webmin/syslog/config`).
    Webmin inspects this file each time it prepares the System Logs module page and
    adds the files to its listing.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also use Webmin to check a logfile once, without adding it to System
    Logs permanently. The following are the steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **System Logs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the path to the logfile into the **View log file** field. You can also
    use the file chooser by clicking on the ellipsis (**…**) button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **View** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring logfile rotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Log messages are very useful for debugging problems, analyzing usage patterns
    of your system, and checking if attempts were made to compromise your server.
    Each message is useful for a limited time, however, and old logs can be deleted
    to reclaim disk space.
  prefs: []
  type: TYPE_NORMAL
- en: Log rotation is a strategy that ensures that the most recent log messages are
    always readily available while older messages are stored in separate files, which
    can be compressed to save space. After a few weeks or months, depending on the
    log type, the oldest messages can be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Webmin allows you to control the `logrotate` utility that performs automatic
    logfile rotation for you. Most packages that you will install will come with their
    own `logrotate` configuration files, which they will place in the `/etc/logrotate.d`
    directory. Placing a configuration file in this directory ensures that files will
    fall under log rotation control. Webmin gives you a graphical interface to easily
    create and modify these files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before creating a log rotation routine, make sure that the `logrotate` package
    is installed on your system. Refer to the recipe, *Installing software packages*
    in [Chapter 1](ch01.html "Chapter 1. Setting Up Your System"), *Setting Up Your
    System*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a `logrotate` configuration for a logfile called
    `custom.log`, which contains the log output of a daemon called `customd`. We will
    schedule a weekly rotation of the logfile, storing four weeks worth of past logs,
    and compressing all but the latest log archive. We will instruct Webmin to restart
    the daemon after log rotation, so it starts writing to the new file.
  prefs: []
  type: TYPE_NORMAL
- en: When creating a `logrotate` configuration, you will need the logfile path as
    well as the syntax of the command, which restarts the logging daemon. Some software
    have a special command designed to inform the daemon that logs were rotated, which
    does not require a full restart. Refer to the daemon documentation to find it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a `logrotate` configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Log File Rotation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link marked **Add a new log file to rotate**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Log file paths**, enter the full path to the file you want to rotate.
    You can specify multiple files on separate lines or include the content of a whole
    directory by specifying the directory path followed by an asterisk. In our case,
    we want to rotate one file, so we should enter: `/var/log/custom.log`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the **Rotation schedule** as **Weekly**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Number of old logs to keep** to **4**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **Yes** to the **Compress old log files?** question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **Yes** to the **Delay compression till next cycle?** question. This
    will ensure that the most recent archival logfile is not compressed, which makes
    it easier to view at the expense of some disk space.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **Yes** to the **Re-create log file after rotation?** question. If you
    leave the **mode**, **owner**, and **group** fields blank, `logrotate` will create
    the file with the same ownership and permissions as the original logfile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Commands to run after rotation** field, enter the command to restart
    the service, which writes to the logfile. In our contrived example, it would be:
    `service customd restart`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin creates a `logrotate` configuration file in the `/etc/logrotate.d` directory,
    which places the logfiles you specify under rotation.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin's interface has a number of other features to control `logrotate`.
  prefs: []
  type: TYPE_NORMAL
- en: Rotating logfiles on demand
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Rotation of logfiles is triggered by a command scheduled with cron to run once
    a day. If you wish to rotate the logfiles sooner, you can trigger rotation manually
    at any time:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Log File Rotation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button marked **Force Log Rotation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Editing default options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Webmin allows you to set the default options, which apply to all log rotation
    routines if not overridden. Perform the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Log File Rotation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button marked **Edit Global Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sending logfiles by email when rotating
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`logrotate` can be set to send you a copy of your logfile when rotating it:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Log File Rotation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the link with the name of the file under rotation. This will allow
    you to edit an existing log rotation configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **Yes** to **Email log file before deleting?** and specify an e-mail
    address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You could specify whether you wanted to be e-mailed the newest logfile archive,
    which was just created, or the oldest archive, which was about to be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Listing recent logins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every time a user logs into your system or logs out, information about this
    is stored in a log of interactive login sessions. You can use Webmin to inspect
    this log.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to list recent logins:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Users and Groups**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the form at the bottom of the screen. Select the radio button marked **Only
    user**, and enter the username of the user whose logins you're interested in.
    You can also select **All** to list logins by all users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button marked **Displays Logins By**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a list of logins by the selected user since the logfile was last
    rotated.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin inspects the standard Unix file named `wtmp`, usually stored in `/var/log/wtmp`,
    which stores the history of all logins and logouts on the system. This is a binary
    file, so you can't inspect it using standard text log parsing tools. If you wanted
    to view login history at the command line, you would use the `last` command, for
    example, `last root` to show logins of the root user.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the other related commands as listed:'
  prefs: []
  type: TYPE_NORMAL
- en: The `lastlog` command displays a list of all users along with the time they
    last logged in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `sudo lastb` command displays information about failed login attempts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `who` command displays a list of currently logged in users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webmin also allows you to check which users are logged in currently:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Users and Groups**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button marked **Show Logged In Users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Receiving an e-mail when a service stops running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You put your server up to perform a specific service: running a website, hosting
    a database, or exchanging e-mail. If that service stops working, your visitors,
    clients, or co-workers will complain, so in case of problems you should always
    be the first to know.'
  prefs: []
  type: TYPE_NORMAL
- en: Webmin provides a capable monitoring system, which can periodically check the
    status of your server and send you an e-mail if something is out of the ordinary.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin's monitoring service will send an e-mail alert using your local e-mail
    server. Refer to [Chapter 12](ch12.html "Chapter 12. Setting Up an E-mail Server"),
    *Setting Up an E-mail Server* for instructions on setting it up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can use Webmin''s monitoring functionality, you''ll need to activate
    it. Follow these steps to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **System and Server Status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button marked **Scheduled Monitoring**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **Yes** to the **Scheduled checking enabled?** question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Send email when** to **When a service goes down** to receive a single
    message when a monitor test fails. If you prefer to be spammed, you can choose
    to receive an e-mail **Any time service is down**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the option **E-mail status report to**, and provide your e-mail address:![Getting
    ready](img/5849OS_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should receive e-mail alerts when a monitor has something to report. You
    should set up a test monitor, which you know will fail to check whether these
    e-mails reach you.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll set up a monitor that checks whether the Apache web server
    is running. Refer to [Chapter 8](ch08.html "Chapter 8. Running an Apache Web Server"),
    *Running an Apache Web Server*, for information about setting up Apache.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to receive e-mail alerts when a service stops running on
    your server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use a monitor, which checks if a service started by a given command
    is still running. The first thing to check is the name of the command that started
    the service. We can do this by navigating to the **System** | **Running Processes**
    module. In case of Apache on Debian, the command is: `/usr/sbin/apache2 -k start`.
    The string `apache2` is unique and appears only in processes associated with this
    server, so we''ll set up our test to scan for this string in the table of running
    processes. If no process matching this string is found, our test will fail. Make
    a note of how many processes Apache is running. In my configuration, there are
    six processes associated with the web server.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Others** | **System and Server Status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the drop-down list, select **Check Process** as the monitor type, and click
    the **Add monitor of type:** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify `Apache Process` as the description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer **Yes** to the **Check on schedule?** question, and select when you want
    to be notified, for example, **Yes, and report on status changes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box marked **Email** in the **Notification methods** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Command to check for** text field, enter a regular expression that
    matches the name of the command that started Apache. The string, `apache2`, will
    work, but you have the power of Perl regular expressions if you want to be more
    precise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the number from step 1 in the field marked **Number of process that must
    exist for monitor to consider them running**. In our configuration, Apache is
    running six processes, so that is the number we'll specify. If any of these processes
    fail, we'll be notified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now receive an e-mail if any of Apache's processes stop running.
    To test the monitor, stop Apache for five minutes, and check if you received an
    e-mail report.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you activate Webmin's monitoring facility, it creates a cron job, which
    runs the monitor scripts on a schedule. Each monitor test can return a success
    or failure status. If a failure status is returned by a test, Webmin will send
    out alert e-mails to the address specified in the Scheduled Monitoring configuration.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin's monitoring is quite feature rich, and we will cover aspects of it in
    this section and in the following dedicated recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting monitor history
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Webmin keeps a history of the status of all monitors, allowing you to check
    when a given monitor passed and when it failed its test:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **System and Server Status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the name of a chosen monitor, for example, the **Apache Webserver** monitor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unfold the **Status history** section at the bottom of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If your monitor just started running, you may not have a history to inspect
    yet. Check back after a few monitoring cycles have been completed. If the history
    fails to appear at all, it suggests that your monitor is not set up correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using predefined monitors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this recipe, we created a custom monitor, which checked whether the Apache
    process was running. In fact, Webmin has quite a few predefined monitor types
    that require no configuration, they only need to be activated. For instance, to
    use a predefined monitor for Apache, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **System and Server Status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the drop-down list, select **Apache Webserver** as the monitor type, and
    click the **Add monitor of type:** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize the reporting settings as required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitoring system load
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to checking if a given piece of software is running, Webmin can
    also monitor other system resources. For instance, you can be notified when your
    system is pegging its CPU. This could indicate heavy traffic on your server, but
    may also indicate a runaway process stuck in an infinite loop, which should probably
    be killed, or an on-going denial of service attack. Perform the following steps
    to monitor system load:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **System and Server Status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the drop-down list, select **Load Average** as the monitor type, and click
    the **Add monitor of type:** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize the reporting settings as required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select 15 minute for **Load average to check**, so we don't get information
    about short bursts of normal activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a rule of thumb, the value for **Maximum load average** should be the number
    of CPU cores your machine has.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have a single CPU, a load average higher then 1 for the last 15 minutes
    indicates that your system is overloaded. On a 2-core machine, a load below 2
    indicates that the system is not overloaded. Different operating systems calculate
    this value in slightly different ways, so you may need to test your server with
    the `uptime` command during normal operation to check what load average is normal
    for your system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You may find more information about system load on Wikipedia: [http://en.wikipedia.org/wiki/Load_(computing)](http://en.wikipedia.org/wiki/Load_(computing)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitoring disk space
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Your server will come to a screeching halt if it completely runs out of disk
    space. Because this situation must be avoided, you should monitor your system
    and react if file space usage reaches a high value, such as 90 percent. Perform
    the following steps to monitor disk space:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **System and Server Status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the drop-down list, select **Disk Space** as the monitor type, and click
    the **Add monitor of type:** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the root filesystem (`/`) from the **Filesystem to check** drop-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the option, **Percentage of total**, and set it to 90 percent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Beyond sending you an e-mail when a system monitor test fails, Webmin can also
    try to react automatically. Take a look at the next recipe, *Automatically restarting
    a service that goes down*, for more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information about Webmin''s monitoring capabilities may be found on its
    wiki: [http://doxfer.webmin.com/Webmin/SystemAndServerStatus](http://doxfer.webmin.com/Webmin/SystemAndServerStatus).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically restarting a service that goes down
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webmin's monitoring functionality can alert you to problems detected on your
    system, but it can also automatically react to detected problems by executing
    commands. For instance, if a service goes down, you can try to restart it automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is an extension of the previous one, *Receiving e-mail when a service
    stops running*. Make sure you follow the setup steps in that recipe before you
    start this one.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll tell Webmin to monitor Apache and restart it automatically
    if it stops running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to automatically restart a service that goes down:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **System and Server Status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link for the **Apache Webserver** monitor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Commands to run** section, enter the command to start Apache in the
    **If monitor goes down, run command** text field. The command on most Linux distributions
    is `service apache2 start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin creates a cron job, which runs its monitors on a regular schedule. If
    a monitor changes state from success to failure, Webmin will execute any commands
    you preset. The commands may be used to restart a service that stopped running,
    thus automatically reacting and correcting your system's state.
  prefs: []
  type: TYPE_NORMAL
- en: This is a good strategy for services such as a web server, mail server, or application
    server. This may not be the best idea for a service such as a database, which
    may require your intervention when restarting to fix problems such as corrupt
    database tables.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring a remote server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may use Webmin's monitoring facility to periodically check the state of
    a remote server that does not run Webmin itself. Since we only have limited access
    to a remote server, we can only test its externally visible state. Nevertheless,
    this is a very useful tool, which can tell us whether any other server is up and
    running a network service on a specific port. If a service on the remote server
    goes down, Webmin will notify us by an e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is an extension of the recipe, *Receiving e-mail when a service stops running*.
    Make sure you follow the setup steps in that recipe before you start this one.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll tell Webmin to periodically check if a remote web server
    is running and returning an expected HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to monitor a remote server:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **System and Server Status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the drop-down list, select **Remote HTTP Service** as the monitor type,
    and click the **Add monitor of type:** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **URL to request** field, enter the URL of a webpage you expect to find
    on the remote server, for instance: `http://example.com/index.php`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **HTTP request method** to **GET**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Page must match regexp** field, enter a string containing a fragment
    of the HTML code you expect the web server to respond with. This could be the
    page title or other text that does not change frequently on the remote website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For example, if we were to monitor [https://en.wikipedia.org/wiki/Main_Page](https://en.wikipedia.org/wiki/Main_Page),
    we could check for the string, `Wikipedia, the free encyclopedia`, which we expect
    to appear as the title of a properly generated page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin creates a cron job, which runs its monitors on a regular schedule. The
    remote HTTP service monitor tries to establish a connection to the web server
    configured to respond under a given URL. If the connection is established, Webmin
    requests the specified web page and scans it in search of our regular expression.
  prefs: []
  type: TYPE_NORMAL
- en: If the monitor cannot establish a connection, or the returned webpage does not
    match our regular expression; the test will fail; and the monitor will change
    its state and send an e-mail alert message.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webmin is able to monitor remote web servers, but it can also be used to monitor
    other services remotely.
  prefs: []
  type: TYPE_NORMAL
- en: Checking that a remote server is up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The remote server you are running may be a firewall or another piece of network
    infrastructure that does not expose any network services. Even such a secure server
    should still respond to ICMP ping echo requests. Webmin can send ping packets
    to the remote server to determine that it is reachable via the network. Perform
    the following steps to check if a remote server is up:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **System and Server Status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the drop-down list, select **Remote Ping** as the monitor type, and click
    the **Add monitor of type:** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Host to ping** field, enter the IP address or domain name of the remote
    server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking that a remote server is running a network service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use Webmin to test virtually any network service on the remote server
    if you know the port number it's supposed to be listening on. Webmin will send
    a TCP connection request to the remote server on a specific port. If the remote
    server responds, Webmin will immediately close the connection. If the server fails
    to respond, an alert message will be sent.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Others** | **System and Server Status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the drop-down list, select **Remote TCP Service** as the monitor type,
    and click the **Add monitor of type:** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Host to connect to** field, enter the IP address or domain name of
    the remote server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the service port in the **Port to connect to** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

- en: 7 SSH Hardening
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7 SSH 强化
- en: Join our book community on Discord
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入我们的书籍社区，和我们一起在 Discord 上讨论
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/file49.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file49.png)'
- en: The **Secure Shell** (**SSH**) suite is one of those must-have tools for Linux
    administrators. It allows you to take care of Linux servers from the comfort of
    your cubicle, or even from the comfort of your own home. Either way, it's a lot
    better than having to don your parka and jump through security hoops to enter
    a cold server room. The *secure* in Secure Shell means that everything that you
    either type or transfer gets encrypted. That eliminates the possibility of someone
    obtaining sensitive data by plugging a sniffer into your network.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全外壳**（**SSH**）套件是 Linux 管理员必备的工具之一。它使你能够在自己的办公桌前，甚至在家中，轻松管理 Linux 服务器。无论怎样，总比穿上大衣、绕过安保检查进入冰冷的服务器房间要好得多。**安全**外壳中的“安全”意味着你输入或传输的所有内容都会被加密，这就消除了通过插入嗅探器到你的网络中获取敏感数据的可能性。'
- en: By this stage in your Linux career, you should already know how to use Secure
    Shell, or SSH, to do remote logins and remote file transfers. What you may not
    know is that the default configuration of SSH is actually quite insecure. In this
    chapter, we'll look at how to harden the default configuration in various ways.
    We'll look at how to use encryption algorithms that are stronger than the default,
    how to set up passwordless authentication, and how to set up a jail for users
    of the Secure File Transfer Protocol (SFTP). As a bonus, we'll look at how to
    scan SSH servers to find vulnerable configurations and how to share a remote directory
    via **Secure Shell Filesystem** (**SSHFS**).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在你的 Linux 生涯中，你应该已经知道如何使用安全外壳（SSH）进行远程登录和远程文件传输。你可能不知道的是，SSH 的默认配置其实是相当不安全的。在本章中，我们将探讨如何通过各种方式强化默认配置。我们将讨论如何使用比默认更强的加密算法，如何设置无密码认证，以及如何为安全文件传输协议（SFTP）的用户设置一个“监狱”。作为额外内容，我们还将探讨如何扫描
    SSH 服务器，查找易受攻击的配置，以及如何通过 **安全外壳文件系统**（**SSHFS**）共享远程目录。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主题：
- en: Ensuring that SSH protocol 1 is disabled
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保禁用 SSH 协议 1
- en: Creating and managing keys for passwordless logins
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理无密码登录的密钥
- en: Disabling root user login
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用 root 用户登录
- en: Disabling username/password logins.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用用户名/密码登录
- en: Enabling two-factor authentication
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用双因素认证
- en: Configuring Secure Shell with strong encryption algorithms
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置带有强加密算法的安全外壳
- en: Setting system-wide encryption policies on RHEL 8/9-type systems
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 RHEL 8/9 类型的系统上设置系统范围的加密策略
- en: FIPS mode on RHEL 8/9-type systems
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RHEL 8/9 类型系统上的 FIPS 模式
- en: Configuring more detailed logging
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置更详细的日志记录
- en: Access control with whitelists and TCP Wrappers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用白名单和 TCP Wrappers 进行访问控制
- en: Configuring automatic logouts and security banners
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置自动注销和安全横幅
- en: Other miscellaneous security settings
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他杂项安全设置
- en: Setting up different configurations for different hosts
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为不同的主机设置不同的配置
- en: Setting up different configurations for different users and groups
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为不同的用户和组设置不同的配置
- en: Scanning an SSH server
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描 SSH 服务器
- en: Setting up a chroot environment for SFTP users
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 SFTP 用户设置 chroot 环境
- en: Setting up shared directories with SSHFS
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SSHFS 设置共享目录
- en: Remotely connecting from Windows desktops
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Windows 桌面远程连接
- en: So, if you're ready, let's get started.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你准备好了，让我们开始吧。
- en: Ensuring that SSH protocol 1 is disabled
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保禁用 SSH 协议 1
- en: In the two previous editions of this book, I told you about how Version 1 of
    the SSH protocol is severely flawed, and how you should always ensure that it’s
    not enabled in the `/etc/ssh/sshd_config` file. Nowadays you don’t have to worry
    about that, because SSH protocol 1 is now gone, and is nothing but a thing of
    the past. So, yee-haw! It’s time to celebrate.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的前两版中，我曾告诉过你 SSH 协议版本 1 存在严重缺陷，应该始终确保它在 `/etc/ssh/sshd_config` 文件中没有启用。如今，你不需要再担心这个问题，因为
    SSH 协议 1 已经消失，成了过去的事。所以，庆祝一下吧！
- en: Creating and managing keys for passwordless logins
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和管理无密码登录的密钥
- en: 'The Secure Shell suite is a great set of tools for communications with remote
    servers. You can use the `ssh` component to remotely log into the command line
    of a remote machine, and you can use either `scp` or `sftp` to securely transfer
    files. The default way to use any of these SSH components is to use the username
    of a person''s normal Linux user account. So, logging into a remote machine from
    the terminal of my OpenSUSE workstation would look something like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Secure Shell套件是一个非常棒的远程服务器通信工具集。你可以使用`ssh`组件远程登录到远程机器的命令行界面，也可以使用`scp`或`sftp`来安全地传输文件。使用这些SSH组件的默认方式是使用一个人正常的Linux用户帐户的用户名。所以，从我的OpenSUSE工作站的终端登录到远程机器会是这样的：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: While it's true that the username and password go across the network in an encrypted
    format, making it hard for malicious actors to intercept, it's still not the most
    secure way of doing business. The problem is that attackers have access to automated
    tools that can perform brute-force password attacks against an SSH server. Botnets,
    such as the Hail Mary Cloud, perform continuous scans across the Internet to find
    Internet-facing servers with SSH enabled.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然确实用户名和密码是以加密格式通过网络传输，使得恶意行为者很难拦截，但这仍然不是最安全的做法。问题在于，攻击者可以使用自动化工具对SSH服务器执行暴力破解密码攻击。僵尸网络，如Hail
    Mary Cloud，会在互联网上进行持续扫描，寻找启用了SSH的互联网-facing服务器。
- en: If a botnet finds that the servers allow SSH access via username and password,
    it will launch a brute-force password attack. Sadly, such attacks have been successful
    quite a few times, especially when the server operators allow the root user to
    log in via SSH.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个僵尸网络发现服务器允许通过用户名和密码进行SSH访问，它将发起暴力破解密码攻击。不幸的是，这种攻击已经成功过很多次，尤其是在服务器管理员允许root用户通过SSH登录时。
- en: 'This older article provides more details about the Hail Mary Cloud botnet:
    [http://futurismic.com/2009/11/16/the-hail-mary-cloud-slow-but-steady-brute-force-password-guessing-botnet/](http://futurismic.com/2009/11/16/the-hail-mary-cloud-slow-but-steady-brute-force-password-guessing-botnet/).'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这篇较旧的文章提供了更多关于Hail Mary Cloud僵尸网络的细节：[http://futurismic.com/2009/11/16/the-hail-mary-cloud-slow-but-steady-brute-force-password-guessing-botnet/](http://futurismic.com/2009/11/16/the-hail-mary-cloud-slow-but-steady-brute-force-password-guessing-botnet/)。
- en: 'In the next section, we''ll look at two ways to help prevent these types of
    attacks:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将讨论两种方法来帮助防止这些类型的攻击：
- en: Enabling SSH logins through an exchange of public keys
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过公钥交换启用SSH登录
- en: Disabling the root user login through SSH
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用root用户通过SSH登录
- en: Now, let's create some keys.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一些密钥。
- en: Creating a user's SSH key set
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户的SSH密钥集
- en: Each user has the ability to create his or her own set of private and public
    keys. It doesn't matter whether the user's client machine is running Linux, macOS,
    Cygwin on Windows, or Bash Shell for Windows. In all cases, the procedure is exactly
    the same.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户都有能力创建自己的私钥和公钥集。无论用户的客户端机器运行的是Linux、macOS、Windows上的Cygwin，还是Windows上的Bash
    Shell，都不影响。所有情况下，步骤都是完全一样的。
- en: There are several different types of keys that you can create, and 3072-bit
    RSA keys are normally the default. Until very recently, 2,048-bit RSA keys were
    considered strong enough for the foreseeable future. But now, the most recent
    guidance from the US **National Institute of Standards and Technology** (**NIST**)
    says to use either an RSA key of at least 3,072 bits or an **Elliptic Curve Digital
    Signature Algorithm** (**ECDSA**) key of at least 384 bits. (You'll sometimes
    see these ECDSA keys referred to as *P-384.*) Their reasoning is that they want
    to get us ready for quantum computing, which will be so powerful that it will
    render any weaker encryption algorithms obsolete. Of course, quantum computing
    isn't practical yet, and so far, it seems to be one of those things that's always
    just ten years off in the future, regardless of what year it is. But even if we
    discount the whole quantum thing, we still have to acknowledge that even our current,
    non-quantum computers keep getting more and more powerful. So, it's still not
    a bad idea to start going with stronger encryption standards.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建几种不同类型的密钥，3072 位 RSA 密钥通常是默认选项。直到最近，2048 位的 RSA 密钥被认为在可预见的未来足够强大。但现在，美国**国家标准与技术研究院**（**NIST**）的最新指导建议使用至少
    3072 位的 RSA 密钥或至少 384 位的 **椭圆曲线数字签名算法**（**ECDSA**）密钥。（你有时会看到这些 ECDSA 密钥被称为 *P-384*。）他们的理由是，想要让我们为量子计算做准备，因为量子计算将变得如此强大，以至于会使任何较弱的加密算法变得过时。当然，量子计算目前还不实际可行，而且到目前为止，它似乎总是被预测为“十年后”的事情，不管现在是什么年份。但即使我们忽略量子问题，我们依然必须承认，即使是我们现在的非量子计算机，也在不断变得更强大。因此，采用更强的加密标准还是一个不错的选择。
- en: To see the NIST list of recommended encryption algorithms and the recommended
    key lengths, go to [https://cryptome.org/2016/01/CNSA-Suite-and-Quantum-Computing-FAQ.pdf](https://cryptome.org/2016/01/CNSA-Suite-and-Quantum-Computing-FAQ.pdf).
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要查看 NIST 推荐的加密算法和推荐的密钥长度，请访问 [https://cryptome.org/2016/01/CNSA-Suite-and-Quantum-Computing-FAQ.pdf](https://cryptome.org/2016/01/CNSA-Suite-and-Quantum-Computing-FAQ.pdf)。
- en: 'For these next few demos, let''s switch over to an Ubuntu 22.04 client. To
    create a 3072 RSA key pair, just do this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几个演示，我们切换到 Ubuntu 22.04 客户端。要创建一个 3072 位的 RSA 密钥对，只需执行以下操作：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We didn’t have to use any option switches, because the command will already
    create a 3072-bit RSA pair by default. When prompted for the location and name
    of the keys, I'll just hit the **Enter** key to accept the defaults. You could
    just leave the private key with a blank passphrase, but that's not a recommended
    practice.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要使用任何选项切换，因为命令默认会创建一个 3072 位的 RSA 密钥对。当提示输入密钥的存储位置和名称时，我只需按下 **Enter** 键接受默认设置。你也可以将私钥设置为空白密码，但这并不是推荐的做法。
- en: Note that if you choose an alternative name for your key files, you'll need
    to type in the entire path to make things work properly. For example, in my case,
    I could specify the path for `donnie_rsa` keys as `/home/donnie/.ssh/donnie_rsa`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你为密钥文件选择了不同的名称，你需要输入完整的路径才能正常工作。例如，在我的情况下，我可以指定 `donnie_rsa` 密钥的路径为 `/home/donnie/.ssh/donnie_rsa`。
- en: 'You''ll see your new keys in the `.ssh` directory:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在 `.ssh` 目录中看到你的新密钥：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `id_rsa` key is the private key, with read and write permissions only for
    me. The `id_rsa.pub` public key has to be world-readable. For ECDSA keys, the
    default length is 256 bits. If you choose to use ECDSA instead of RSA, do the
    following to create a strong 384-bit key:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`id_rsa` 密钥是私钥，仅对我具有读写权限。`id_rsa.pub` 公钥必须是全局可读的。对于 ECDSA 密钥，默认长度为 256 位。如果你选择使用
    ECDSA 而非 RSA，可以按照以下步骤创建一个强度为 384 位的密钥：'
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Either way, when you look in the `.ssh` directory, you''ll see that the ECDSA
    keys are named differently from the RSA keys:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，当你查看 `.ssh` 目录时，会发现 ECDSA 密钥的命名方式与 RSA 密钥不同：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The beauty of elliptic curve algorithms is that their seemingly short key lengths
    are just as secure as RSA keys with longer key lengths. And, even the largest
    ECDSA keys require less computing power than RSA keys. The maximum key length
    you can do with ECDSA is 521 bits. (Yes, you read that correctly. It's 521 bits,
    not 524 bits.) So, you may be thinking, *Why don't we just go for the gusto with
    521-bit keys?* Well, it's mainly because 521-bit keys aren't recommended by NIST.
    There's some fear that they may be subject to **padding attacks**, which could
    allow the bad guys to break your encryption and steal your data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 椭圆曲线算法的美妙之处在于，它们看似较短的密钥长度，与 RSA 长密钥的安全性相当。而且，即使是最大的 ECDSA 密钥，也比 RSA 密钥消耗更少的计算能力。你能使用的
    ECDSA 最大密钥长度为 521 位。（是的，你没看错，是 521 位，不是 524 位。）那么，你可能会想，*为什么我们不直接使用 521 位密钥呢？*
    其实，主要原因是 521 位密钥不被 NIST 推荐。有些人担心它们可能会受到**填充攻击**，这可能会让坏人破解加密并窃取你的数据。
- en: If you take a gander at the man page for `ssh-keygen`, you'll see that you can
    also create an `Ed25519` type of key, which you'll sometimes see referred to as
    `curve25519`. This one isn't included in the NIST list of recommended algorithms
    and also isn’t allowed by the FIPS regulations, but there are a couple of reasons
    why some people like to use it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 `ssh-keygen` 的手册页，你会看到你也可以创建一种 `Ed25519` 类型的密钥，这种密钥有时会被称为 `curve25519`。这种密钥没有被列入
    NIST 推荐的算法列表，也不被 FIPS 法规允许，但仍然有一些人喜欢使用它。
- en: RSA and DSA can leak private key data when creating signatures if the random
    number generator of the operating system is flawed. `Ed25519` doesn't require
    a random number generator when creating signatures, so it's immune to this problem.
    Also, `Ed25519` is coded in a way that makes it much less vulnerable to side-channel
    attacks. (A side-channel attack is when someone tries to exploit weaknesses in
    the underlying operating system, rather than in the encryption algorithm.)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作系统的随机数生成器存在缺陷，RSA 和 DSA 在创建签名时可能会泄露私钥数据。而 `Ed25519` 在创建签名时不需要随机数生成器，因此不会受到这个问题的影响。此外，`Ed25519`
    的编码方式使其在面对侧信道攻击时更为安全。（侧信道攻击是指攻击者试图利用操作系统中的漏洞，而非加密算法本身的漏洞。）
- en: The second reason why some folk like `Ed25519` is precisely because it's *not*
    on the NIST list. These are the folk who, rightly or wrongly, don't trust the
    recommendations of government agencies.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一些人喜欢 `Ed25519` 的第二个原因恰恰是因为它*不*在 NIST 的推荐列表上。这些人或多或少不信任政府机构的推荐，可能有他们的理由。
- en: 'Quite a few years ago, in the early part of this century, there was a bit of
    a scandal that involved the **Dual Elliptic Curve Deterministic Random Bit Generator**
    (**Dual_EC_DRBG**). This was a random number generator that was meant for use
    in elliptic curve cryptography. The problem was that, early on, some independent
    researchers found that it had the capability to have *back doors* inserted by
    anyone who knew about this capability. And, it just so happened that the only
    people who were supposed to know about this capability were the folk who work
    at the U.S. **National Security Agency** (**NSA**). At the NSA''s insistence,
    NIST included Dual_EC_DRBG in their NIST list of recommended algorithms, and it
    stayed there until they finally removed it in April 2014\. You can get more details
    about this at the following links:'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 很多年前，在本世纪初，曾经有一起丑闻涉及**双椭圆曲线确定性随机比特生成器**（**Dual_EC_DRBG**）。这是一个用于椭圆曲线密码学的随机数生成器。问题在于，早期一些独立研究者发现，它有能力被任何了解该能力的人插入*后门*。恰好，唯一被允许了解这种能力的人是美国**国家安全局**（**NSA**）的工作人员。在
    NSA 的坚持下，NIST 将 Dual_EC_DRBG 列入了推荐算法列表，并且一直保留到 2014 年 4 月才被移除。你可以通过以下链接了解更多细节：
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://www.pcworld.com/article/2454380/overreliance-on-the-nsa-led-to-weak-crypto-standard-nist-advisers-find.html](https://www.pcworld.com/article/2454380/overreliance-on-the-nsa-led-to-weak-crypto-standard-nist-advisers-find.html)'
  id: totrans-58
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://www.pcworld.com/article/2454380/overreliance-on-the-nsa-led-to-weak-crypto-standard-nist-advisers-find.html](https://www.pcworld.com/article/2454380/overreliance-on-the-nsa-led-to-weak-crypto-standard-nist-advisers-find.html)'
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[http://www.math.columbia.edu/~woit/wordpress/?p=7045](http://www.math.columbia.edu/~woit/wordpress/?p=7045)'
  id: totrans-60
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[http://www.math.columbia.edu/~woit/wordpress/?p=7045](http://www.math.columbia.edu/~woit/wordpress/?p=7045)'
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can read the details about Ed25519 here: [https://ed25519.cr.yp.to/](https://ed25519.cr.yp.to/).'
  id: totrans-62
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以在这里阅读有关 Ed25519 的详细信息：[https://ed25519.cr.yp.to/](https://ed25519.cr.yp.to/)。
- en: 'There''s only one key size for `Ed25519`, which is 256 bits. So, to create
    a `curve25519` key, just do this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ed25519`只有一种密钥大小，那就是256位。所以，要创建一个`curve25519`密钥，只需这样做：'
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here are the keys that I''ve created:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我创建的密钥：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There are, however, some potential downsides to `ed25519`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`ed25519`也有一些潜在的缺点：
- en: First, it isn't supported by older SSH clients. However, if everyone on your
    team is using current operating systems that use current SSH clients, this shouldn't
    be a problem.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，它不被旧版SSH客户端支持。然而，如果你团队中的每个人都在使用当前操作系统并且使用最新的SSH客户端，这应该不是问题。
- en: The second is that it only supports one certain set key length, which is the
    equivalent of either 256-bit elliptic curve algorithms or 3,000-bit RSA algorithms.
    So, it might not be quite as future-proof as the other algorithms that we've covered.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二点是，它只支持一种特定的密钥长度，这相当于256位椭圆曲线算法或3000位RSA算法。因此，它可能不像我们之前讲解的其他算法那样具有未来适应性。
- en: Lastly, you can't use it if your organization is required to remain compliant
    with either NIST recommendations or FIPS requirements.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，如果你的组织需要遵循NIST的推荐或FIPS的要求，你就不能使用它。
- en: Okay, there is one other type of key that we haven't covered. That's the old-fashioned
    DSA key, which `ssh-keygen` will still create if you tell it to. But, don't do
    it. The DSA algorithm is old, creaky, and very insecure by modern standards. So,
    when it comes to DSA, just say *No*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，还有一种密钥类型我们没有讲过。那就是传统的DSA密钥，如果你告诉`ssh-keygen`，它仍然会创建这种密钥。但不要这么做。DSA算法已经老旧、笨拙，并且按照现代标准非常不安全。因此，面对DSA，直接说*不*。
- en: Transferring the public key to the remote server
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将公钥传输到远程服务器
- en: 'Transferring my public key to a remote server allows the server to readily
    identify both me and my client machine. Before I can transfer the public key to
    the remote server, I need to add the private key to my session keyring. This requires
    two commands. (One command invokes `ssh-agent`, while the other actually adds
    the private key to the keyring):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 将我的公钥传输到远程服务器，使得服务器可以轻松识别我和我的客户端机器。在我将公钥传输到远程服务器之前，我需要将私钥添加到我的会话密钥环中。这需要两条命令。（一条命令启动`ssh-agent`，另一条命令则将私钥实际添加到密钥环中）：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, I can transfer my public key(s) to my AlmaLinux 9 server, which is
    at address `192.168.0.17`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我可以将我的公钥传输到我的AlmaLinux 9服务器，其地址为`192.168.0.17`：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Normally, you would only create one pair of keys of whichever type you choose.
    As you can see here, I've created three key pairs, one pair of each type. All
    three private keys were added to my session keyring, and all three public keys
    were transferred to the remote server.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你只会为你选择的任何类型创建一对密钥。正如你在这里看到的，我已经创建了三对密钥，每种类型一对。所有三个私钥都被添加到了我的会话密钥环中，所有三个公钥也都被传输了到远程服务器。
- en: 'The next time that I log in, I''ll use the key exchange, and I won''t have
    to enter a password:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下次我登录时，我将使用密钥交换，不需要输入密码：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As I mentioned previously, you would normally only create one key pair per machine.
    However, there are exceptions to this rule. Some administrators prefer to use
    a different key pair for each server that they administer, rather than using the
    same key pair for all servers. A handy way to do this is to create keys with filenames
    that match the hostnames of the respective servers. Then, you can use the `-i`
    option to specify which key pair that you want to use.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，通常你会为每台机器只创建一对密钥。然而，也有例外。有些管理员更喜欢为他们管理的每个服务器使用不同的密钥对，而不是为所有服务器使用相同的密钥对。一个方便的做法是，创建与各自服务器主机名匹配的密钥文件名。然后，你可以使用`-i`选项来指定你想使用的密钥对。
- en: 'In this example, I only have one server, but I have multiple keys for it. Let''s
    say that I prefer to use the `Ed25519` keys:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我只有一个服务器，但我为它准备了多个密钥。假设我更喜欢使用`Ed25519`密钥：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'So, now you''re wondering, *How is that secure if I can log in without entering
    my password?* The answer is that once you close the client machine''s terminal
    window that you used for logging in, the private key will be removed from your
    session keyring. When you open a new terminal and try to log in to the remote
    server, you''ll see this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在你可能在想，*如果我可以不输入密码就登录，那怎么保证安全？* 答案是，一旦你关闭了用于登录的客户端机器的终端窗口，私钥就会从你的会话密钥环中移除。当你打开一个新的终端并尝试登录远程服务器时，你会看到这个：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, every time I log into this server, I'll need to enter the passphrase for
    my private key, until I add it back to the session keyring with the two commands
    that I showed you in the preceding section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次我登录到这个服务器时，都需要输入私钥的密码短语，直到我按照上一节中展示的两个命令将其重新添加到会话密钥环中。
- en: Hands-on lab – Creating and transferring SSH keys
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实验操作 – 创建和传输 SSH 密钥
- en: In this lab, you'll use one virtual machine (VM) as your client, and one VM
    as the server. Alternatively, if you're using a Windows host machine, you can
    use Cygwin, PowerShell, or the built-in Windows Bash shell for the client. (Be
    aware, though, that PowerShell and the Windows Bash shell store the key files
    in alternate locations.) If you're on either a Mac or a Linux host machine, you
    can use the host machine's native command-line terminal as the client. In any
    case, the procedure will be the same.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，你将使用一台虚拟机（VM）作为客户端，另一台虚拟机作为服务器。或者，如果你使用的是 Windows 主机，你可以使用 Cygwin、PowerShell
    或内置的 Windows Bash shell 作为客户端。（不过需要注意，PowerShell 和 Windows Bash shell 会将密钥文件存储在不同的位置。）如果你使用的是
    Mac 或 Linux 主机，你可以使用主机自带的命令行终端作为客户端。无论哪种情况，过程都是一样的。
- en: For the server VM, use either Ubuntu 22.04 or CentOS 7.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于服务器虚拟机（VM），使用 Ubuntu 22.04 或 CentOS 7。
- en: This procedure does work the same on AlmaLinux 8 and 9\. However, we'll be using
    this same VM for the next few labs, and AlmaLinux has some special considerations
    that we'll look at later.
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个过程在 AlmaLinux 8 和 9 上同样适用。然而，我们将在接下来的实验中继续使用这台虚拟机，而 AlmaLinux 有一些特殊的考虑事项，我们稍后会进一步了解。
- en: 'Let''s get started:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: 'On the client machine, create a pair of 384-bit elliptic curve keys. Accept
    the default filename and location and create a passphrase:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端机器上，创建一对 384 位的椭圆曲线密钥。接受默认的文件名和位置，并创建一个密码短语：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Observe the keys, taking note of the permissions settings:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看密钥，注意权限设置：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add your private key to your session keyring. Enter your passphrase when prompted:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的私钥添加到会话密钥环中。提示时，输入你的密码短语：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Transfer the public key to the server VM. When prompted, enter the password
    for your user account on the server VM. (Substitute your own username and IP address
    in the following command.):'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将公钥传输到服务器虚拟机。当提示时，输入你在服务器虚拟机上的用户账户密码。（在以下命令中替换你自己的用户名和 IP 地址。）
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Log into the server VM as you normally would:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照通常的方式登录到服务器虚拟机：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Observe the `authorized_keys` file that was created on the server VM:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在服务器虚拟机上创建的 `authorized_keys` 文件：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Log out of the server VM and close the terminal window on the client. Open another
    terminal window and try to log into the server again. This time, you should be
    prompted to enter the passphrase for your private key.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从服务器虚拟机登出，并关闭客户端的终端窗口。打开另一个终端窗口，尝试重新登录到服务器。这次，你应该会被提示输入私钥的密码短语。
- en: 'Log back out of the server VM and add your private key back to the session
    keyring of your client. Enter the passphrase for your private key when prompted:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新从服务器虚拟机登出，并将你的私钥重新添加到客户端的会话密钥环中。提示时，输入私钥的密码短语：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As long as you keep this terminal window open on your client, you'll be able
    to log into the server VM as many times as you want without having to enter a
    password. However, when you close the terminal window, your private key will be
    removed from your session keyring.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你保持客户端的这个终端窗口打开，你就能随时登录到服务器虚拟机，而无需输入密码。然而，当你关闭终端窗口时，你的私钥会被从会话密钥环中移除。
- en: Keep your server VM, because we'll do more with it in a bit.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留你的服务器虚拟机，因为稍后我们还会用到它。
- en: You've reached the end of the lab – congratulations!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你已完成实验 – 恭喜！
- en: What we've done here is good, but it's still not quite enough. One flaw is that
    if you go to another client machine, you'll still be able to use the normal username/password
    authentication to log in. That's okay; we'll fix that in a few moments.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们到目前为止所做的很好，但还是不完全够。一个问题是，如果你换到另一台客户端机器，你仍然可以使用正常的用户名/密码认证进行登录。没关系，我们稍后会解决这个问题。
- en: Disabling root user login
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用 root 用户登录
- en: 'A few years ago, there was a somewhat celebrated case where malicious actors
    had managed to plant malware on quite a few Linux servers somewhere in southeast
    Asia. There were three reasons that the bad guys found this so easy to do:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，有一个相对著名的案例，恶意行为者成功地在东南亚某些地区的多个 Linux 服务器上植入了恶意软件。坏人能这么轻松地做到这一点，主要有三个原因：
- en: The Internet-facing servers involved were set up to use username/password authentication
    for SSH.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涉及的面向互联网的服务器设置为使用用户名/密码认证进行 SSH 登录。
- en: The root user was allowed to log in through SSH.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许root用户通过SSH登录。
- en: User passwords, including the root user's password, were incredibly weak.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户密码，包括root用户的密码，异常弱。
- en: All this meant that it was easy for the Hail Mary botnet to brute-force its
    way in.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切意味着，Hail Mary僵尸网络轻松通过暴力破解进入。
- en: 'Different distros have different default settings for root user login. In the
    `/etc/ssh/sshd_config` file of your CentOS 7 or AlmaLinux 8 machine, you''ll see
    this line:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的发行版对root用户登录有不同的默认设置。在你CentOS 7或AlmaLinux 8机器的`/etc/ssh/sshd_config`文件中，你会看到这一行：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Unlike what you have in most configuration files, the commented-out lines in
    `sshd_config` define the default settings for the Secure Shell daemon. So, this
    line indicates that the root user is indeed allowed to log in through SSH. To
    change that, I''ll remove the comment symbol and change the setting to `no`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数配置文件不同，`sshd_config`中的注释行定义了安全外壳守护进程的默认设置。因此，这一行表示允许root用户通过SSH登录。要更改这一点，我将去掉注释符号并将设置更改为`no`：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To make the new setting take effect, I''ll reload the SSH daemon, which is
    named `sshd` on CentOS and AlmaLinux, and is named `ssh` on Ubuntu:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使新的设置生效，我将重新加载SSH守护进程，在CentOS和AlmaLinux上该进程名为`sshd`，而在Ubuntu上是`ssh`：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'On the Ubuntu machine, the default setting looks a bit different:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu机器上，默认设置看起来略有不同：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This means that the root user is allowed to log in, but only via a public key
    exchange. This is probably secure enough if you really need to allow the root
    user to log in. But in most cases, you'll want to force admin users to log in
    with their normal user accounts and use `sudo` for their admin needs. So, in most
    cases, you still want to change this setting to `no`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着root用户被允许登录，但仅通过公钥交换。如果你确实需要允许root用户登录，这可能足够安全。但是在大多数情况下，你会希望强制管理员用户使用他们的正常用户帐户登录，并使用`sudo`进行管理员操作。因此，在大多数情况下，你仍然希望将此设置更改为`no`。
- en: On your AlmaLinux 9 machine, you’ll see that it also has `PermitRootLogin` set
    to `prohibit-password` by default.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的AlmaLinux 9机器上，你会看到其`PermitRootLogin`默认设置为`prohibit-password`。
- en: Be aware that if you deploy a Linux instance on a cloud service, such as Rackspace
    or Vultr, the service owners will have you log into the VM with the root user
    account. The first thing you'll want to do is create your own normal user account,
    log back in with that account, disable the root user account, and disable the
    root user login in `sshd_config`. Microsoft Azure is one exception to this rule
    because it automatically creates a non-privileged user account for you.
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，如果你在云服务（如Rackspace或Vultr）上部署Linux实例，服务提供商会让你使用root用户帐户登录虚拟机。你需要做的第一件事是创建自己的普通用户帐户，使用该帐户重新登录，禁用root用户帐户，并在`sshd_config`中禁用root用户登录。Microsoft
    Azure是这个规则的一个例外，因为它会为你自动创建一个非特权用户帐户。
- en: You'll be able to practice this in just a few moments, in the next section.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在接下来的几分钟内练习这个操作。
- en: Disabling username/password logins
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用用户名/密码登录
- en: This is something that you'll only want to do after you've set up the key exchange
    with your clients. Otherwise, clients will be locked out of doing remote logins.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你只有在与客户端设置了密钥交换之后才应该做的事情。否则，客户端将无法进行远程登录。
- en: Hands-on lab – disabling root login and password authentication
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实践实验 - 禁用root登录和密码验证
- en: 'For this lab, use the same server VM that you used for the previous lab. Let''s
    get started:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，使用上一个实验中用过的相同服务器虚拟机。我们开始吧：
- en: 'On either an Ubuntu, CentOS, or AlmaLinux 8 server VM, look for this line in
    the `sshd_config` file:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Ubuntu、CentOS或AlmaLinux 8服务器虚拟机上，查找`sshd_config`文件中的这一行：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Remove the comment symbol, change the parameter value to `no`, and reload the
    SSH daemon. The line should now look like this:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除注释符号，将参数值更改为`no`，并重新加载SSH守护进程。现在该行应该像这样：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, when the botnets scan your system, they'll see that doing a brute-force
    password attack would be useless. They'll then just go away and leave you alone.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当僵尸网络扫描你的系统时，它们会发现暴力破解密码攻击毫无用处。然后它们就会离开，不再打扰你。
- en: 'Look for either of these two lines, depending on whether the server is an Ubuntu
    or a CentOS 7/AlmaLinux 8 VM:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找以下两行中的一行，具体取决于服务器是Ubuntu还是CentOS 7/AlmaLinux 8虚拟机：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Uncomment the line and change it to the following:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消注释这一行，并将其更改为以下内容：
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Reload the SSH daemon so that it will read in the new changes. On Ubuntu, do
    this:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载SSH守护进程，使其读取新的更改。在Ubuntu上，操作如下：
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'On CentOS/AlmaLinux, do this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS/AlmaLinux上，操作如下：
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Attempt to log into the server VM from the client that you used in the previous
    lab.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试从你在上一个实验中使用的客户端登录服务器虚拟机。
- en: Attempt to log into the server VM from another client on which you haven't created
    a key pair. (You shouldn't be able to.)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试从你没有创建密钥对的另一个客户端登录服务器虚拟机。（你应该无法登录。）
- en: As before, keep the server VM, because we'll do more with it in a bit.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 和之前一样，保留服务器虚拟机，因为稍后我们会继续使用它。
- en: You've reached the end of the lab – congratulations!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你已完成实验——恭喜！
- en: Now that we've covered how to create a private/public key pair on the client
    side and how to transfer the public key to the server, let’s talk about setting
    up two-factor authentication.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讲解了如何在客户端创建公私钥对以及如何将公钥传输到服务器，接下来讲讲如何设置双重身份验证。
- en: Enabling two-factor authentication
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用双重身份验证
- en: 'Two-factor authentication can give an extra layer of protection. If you own
    a smart phone, you can set this up with **Google Authenticator**, which will present
    you with a **one-time password** for logging in at the local terminal, invoking
    a `sudo` command, or logging in remotely via SSH. Before we get started though,
    there are a few caveats that you need to understand:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 双重身份验证可以提供额外的保护层。如果你拥有智能手机，可以通过**Google Authenticator**来设置，它会为你提供一个**一次性密码**，用于在本地终端登录、执行`sudo`命令或通过SSH远程登录。在开始之前，然而，有几点注意事项你需要理解：
- en: To make this work on a Linux machine, you’ll need to install a PAM module that
    isn’t supplied by Google. It’s in the repositories for some, but not all, Linux
    distros. (Of course, you could download the source code from the Github repository
    and compile it yourself, but that’s beyond the scope of this book.)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在Linux机器上使其工作，你需要安装一个Google未提供的PAM模块。它在一些Linux发行版的仓库中可以找到，但并非所有发行版都包含。（当然，你也可以从GitHub仓库下载源代码并自行编译，但这超出了本书的范围。）
- en: The creator of this PAM module has created some semblance of documentation,
    but it’s not very useful. If you search for documentation, you’ll find some blog
    posts with procedures that are worse than useless, because they *will* break your
    system if you follow them.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个PAM模块的创建者写了一些文档，但并不太有用。如果你搜索文档，你会发现一些博客文章，其中的步骤比没有文档更糟糕，因为如果你照做，*它们会*破坏你的系统。
- en: You can set up your machine to require Google Authentication for either global
    usage, or for just logging in via SSH. (Global usage means that an Authenticator
    code will be needed for logging in at the local terminal, using `sudo`, *and*
    logging in remotely via SSH.)
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将机器设置为要求Google身份验证用于全局使用，或者仅仅用于通过SSH登录。（全局使用意味着在本地终端登录、使用`sudo`、*以及*通过SSH远程登录时都需要输入Authenticator代码。）
- en: If you’re dealing with multiple users, each user will need to set up Google
    Authenticator for his or her own user account, with his or her own smart phone.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在处理多个用户，每个用户都需要为自己的账户设置Google Authenticator，并使用自己的智能手机。
- en: 'Now, with that out of the way, let’s set up our Ubuntu 22.04 server with Google
    Authenticator for local log-ins and sudo:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经解决了这个问题，接下来让我们为Ubuntu 22.04服务器设置Google Authenticator，以用于本地登录和`sudo`命令：
- en: Note that this PAM module is in the normal Ubuntu repository and in the EPEL
    repository for RHEL 8-type distros. It’s not available at all for RHEL 9-type
    distros.
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，这个PAM模块在普通的Ubuntu仓库中有，而在RHEL 8类型的发行版的EPEL仓库中也有。它在RHEL 9类型的发行版中完全不可用。
- en: Hands-on lab--Setting up two-factor authentication on Ubuntu 22.04
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实验操作——在Ubuntu 22.04上设置双重身份验证
- en: For this lab, start with a fresh Ubuntu 22.04 virtual machine that’s not set
    up for public key authentication. (That will save a lot of confusion when going
    through this procedure.)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本实验，从一个全新的Ubuntu 22.04虚拟机开始，该虚拟机未设置公钥认证。（这样可以避免在执行此过程时出现很多困惑。）
- en: Install Google Authenticator on your smart phone. (It’s in the normal app stores
    for both Android and iPhone.)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的智能手机上安装Google Authenticator。（它在Android和iPhone的常规应用商店中都有提供。）
- en: 'On your Ubuntu VM, install the `libpam-google-authenticator` package, like
    this:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Ubuntu虚拟机上，安装`libpam-google-authenticator`包，如下所示：
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For this step, if you haven’t already, use SSH to remotely log into the Ubuntu
    VM from the GUI-type terminal of your host machine. (That’s because you might
    need to resize things to make the next step work.) Now, from this GUI-type terminal,
    run the `google-authenticator` app, like so:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于此步骤，如果你尚未操作，请使用SSH通过主机机器的GUI类型终端远程登录Ubuntu虚拟机。（这是因为你可能需要调整窗口大小以使下一步操作生效。）现在，从这个GUI类型终端，运行`google-authenticator`应用，操作如下：
- en: '[PRE30]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: A big QR code will now show up on your screen. If the whole code graphic isn’t
    visible, use your GUI terminal controls to zoom out until the whole graphic is
    visible.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕上会显示一个大的二维码。如果整个二维码图形没有显示出来，使用图形界面终端的控制按钮进行缩小，直到整个图形可见为止。
- en: Bring up the Google Authenticator app on your smart phone, and touch the `+`
    sign in the lower right-hand corner of the screen. Choose the **Scan a QR code**
    option, and then take a picture of your QR code.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你智能手机上的 Google Authenticator 应用，并点击屏幕右下角的 `+` 符号。选择 **扫描二维码** 选项，然后拍摄你的二维码图片。
- en: On your smart phone, note that a new entry for your Ubuntu VM has been added
    to the list. On the Ubuntu VM, enter the verification code that shows up with
    that entry.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的智能手机上，注意到 Ubuntu 虚拟机的新条目已经添加到列表中。在 Ubuntu 虚拟机上，输入与该条目一起显示的验证码。
- en: The next thing you’ll see on the Ubuntu terminal is your emergency scratch codes.
    Copy them down and store them in a safe location. (If you lose your mobile phone,
    you’ll use these scratch codes to log in.)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你会在 Ubuntu 终端上看到紧急的备用验证码。把它们抄下来并保存在安全的地方。（如果你丢失了手机，你将使用这些备用验证码来登录。）
- en: Next, you’ll be asked series of questions. Just enter `y` for everything.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你会被问到一系列问题。对于所有问题，输入 `y`。
- en: 'In this step, you’ll set up two-factor authentication for logging in at the
    local terminal and for using `sudo`. Open the `/etc/pam.d/common-auth` file in
    your favorite text editor. Add the `auth required pam_google_authenticator.so`
    line as the first parameter. The top portion of the file should now look something
    like this:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，你将为本地终端登录和 `sudo` 操作设置双重身份验证。用你喜欢的文本编辑器打开 `/etc/pam.d/common-auth` 文件。将
    `auth required pam_google_authenticator.so` 行作为第一个参数添加进去。文件的顶部部分现在应该是这样的：
- en: '[PRE31]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Certain blog posts that you’ll find tell you to add this line to the *end* of
    the file. Be aware that if you do that, you *will* get locked out of your machine,
    and you’ll need to perform an emergency procedure to get back in to fix it. Any
    time you edit a PAM file, it’s vitally important that you place the directives
    in the proper order. (In case you’re wondering, I’ll show you the emergency procedure
    in *Chapter 16*, *Security Tips & Tricks for the Busy Bee*.)
  id: totrans-172
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 某些博客文章告诉你将这一行添加到文件的*末尾*。请注意，如果你这么做，你*将*会被锁定在机器外面，届时需要执行紧急程序才能重新进入并修复它。每次编辑 PAM
    文件时，确保按照正确的顺序放置指令是至关重要的。（如果你想知道，我将在*第16章*，*忙碌小蜜蜂的安全技巧与窍门* 中展示这个紧急程序。）
- en: At the local terminal of the Ubuntu VM, log out and then log back in. When prompted,
    enter the verification code from your smart phone app.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Ubuntu 虚拟机的本地终端上，登出然后重新登录。当提示时，输入来自智能手机应用的验证码。
- en: 'Perform a command that requires `sudo` privileges. You should see something
    like this:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行一个需要 `sudo` 权限的命令。你应该看到类似这样的提示：
- en: '[PRE32]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note that you won’t be required to enter a verification code again until the
    `sudo` timer times out.
  id: totrans-176
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，直到 `sudo` 定时器超时之前，你不会再需要输入验证码。
- en: From either your host machine or another virtual machine, remotely log into
    the Ubuntu VM via SSH. You should still be able to do that, because we haven’t
    yet configured the `/etc/ssh/sshd_config` file. Open the `sshd_config` file in
    your text editor, and change the `KbdInteractiveAuthentication no` line to `KbdInteractiveAuthentication
    yes`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的主机或其他虚拟机，通过 SSH 远程登录到 Ubuntu 虚拟机。你仍然能够这样做，因为我们还没有配置 `/etc/ssh/sshd_config`
    文件。用文本编辑器打开 `sshd_config` 文件，将 `KbdInteractiveAuthentication no` 行改为 `KbdInteractiveAuthentication
    yes`。
- en: 'Reload the Secure Shell configuration:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载安全外壳配置：
- en: '[PRE33]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Try logging in again from either your host machine or another virtual machine.
    This time, you should be prompted to enter your verification code.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次尝试从你的主机或其他虚拟机登录。这时，你应该会被提示输入你的验证码。
- en: Now, let’s say that your organization needs two-factor authentication for remote
    SSH logins, but doesn’t need it for either local logins or `sudo` operations.
    Let’s change the configuration so that only remote users will need to enter a
    code. Open the `/etc/pam.d/common-auth` file in your text editor, and remove the
    line that you inserted in Step 9.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，假设你的组织需要为远程 SSH 登录设置双重身份验证，但不需要为本地登录或 `sudo` 操作设置双重身份验证。让我们修改配置，使得只有远程用户需要输入验证码。用文本编辑器打开
    `/etc/pam.d/common-auth` 文件，移除在第 9 步中插入的那一行。
- en: 'Open the `/etc/pam.d/sshd` file in your text editor, and add that line just
    under the `@include common-auth` line at the top of the file. The top portion
    of the file should now look like this:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用文本编辑器打开`/etc/pam.d/sshd`文件，并在文件顶部的`@include common-auth`行下方添加该行。文件的顶部部分现在应该如下所示：
- en: '[PRE34]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You should now be able to log in to the local terminal and perform `sudo` actions
    without having to enter a verification code. Instead, you should only have to
    enter a verification code when logging in remotely.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该可以登录到本地终端并执行`sudo`操作，而无需输入验证码。相反，你只需要在远程登录时输入验证码。
- en: End of lab.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验结束。
- en: Next, let’s look at using Google Authenticator together with key exchange on
    our Ubuntu machine.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下如何在我们的 Ubuntu 机器上使用 Google Authenticator 配合密钥交换。
- en: Hands-on lab--Using Google Authenticator with key exchange on Ubuntu
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实操实验--在 Ubuntu 上使用 Google Authenticator 配合密钥交换
- en: For this lab, use the same Ubuntu virtual machine that you used for the previous
    lab.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本实验，请使用与上一个实验相同的 Ubuntu 虚拟机。
- en: On either your host machine or another virtual machine, create a pair of keys
    and transfer them to the Ubuntu virtual machine, as you did in the *Creating and
    transferring SSH keys* lab. This time, you should be prompted to enter a verification
    code when you execute the `ssh-copy-id` command.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机或另一台虚拟机上，创建一对密钥并将其传输到 Ubuntu 虚拟机，就像在*创建和传输 SSH 密钥*实验中那样。这次，在执行`ssh-copy-id`命令时，系统应该会提示你输入验证码。
- en: 'On the Ubuntu virtual machine, open the `/etc/ssh/sshd_config` file in your
    text editor. This time, instead of changing the `#PasswordAuthentication yes`
    line, add this line below the `KbdInteractiveAuthentication yes` line:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Ubuntu 虚拟机上，用文本编辑器打开`/etc/ssh/sshd_config`文件。这次，不是修改`#PasswordAuthentication
    yes`这一行，而是在`KbdInteractiveAuthentication yes`这一行下方添加以下这一行：
- en: '[PRE35]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: After reloading the SSH configuration, you’ll see that you’ll be able to remotely
    log in by using key exchange if you’re logging in from a machine that has that
    set up. If you’re logging in from a machine that doesn’t have key exchange set
    up, you’ll still be able to log in with a password and a verification code. So,
    we don’t have true two-factor authentication just yet.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载 SSH 配置后，你会发现，如果你从已设置密钥交换的机器登录，就可以通过密钥交换进行远程登录。如果从没有设置密钥交换的机器登录，你仍然可以使用密码和验证码进行登录。所以，目前我们还没有实现真正的双因素认证。
- en: 'To require both key-based authentication and Google Authenticator verification,
    change the above line to look like this:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要要求同时使用密钥认证和 Google Authenticator 验证，请将上述行更改为如下所示：
- en: '[PRE36]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: After reloading the SSH configuration, you’ll only be allowed to log in from
    machines for which you’ve set up key exchange. You now effectively have three-factor
    authentication, because you’ll still be prompted to enter your normal login password.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载 SSH 配置后，你只允许从已设置密钥交换的机器登录。现在你实际上拥有了三因素认证，因为你仍然会被要求输入常规登录密码。
- en: To disable the password login so that you’ll only be using key exchange and
    a verification code, open the `/etc/pam.d/sshd` file in your text editor. At the
    very top of the file, find the `@include common-auth` line and change it to `#@include
    common-auth`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要禁用密码登录，以便只使用密钥交换和验证码，请用文本编辑器打开`/etc/pam.d/sshd`文件。在文件的最顶部，找到`@include common-auth`行并将其更改为`#@include
    common-auth`。
- en: Verify that the key exchange works by trying to log in from a virtual machine
    on which you haven’t performed the key exchange setup. (You shouldn’t be allowed
    to.)
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过尝试从没有进行密钥交换设置的虚拟机登录，来验证密钥交换是否有效。（你应该无法登录。）
- en: That’s it. End of lab.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这些。实验结束。
- en: Now, let’s see what we can do with AlmaLinux 8.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们能在 AlmaLinux 8 上做些什么。
- en: Hands-on lab--Setting up two-factor authentication on AlmaLinux 8
  id: totrans-200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实操实验--在 AlmaLinux 8 上设置双因素认证
- en: For this lab, I assume that you’ve already installed the Google Authenticator
    app on your smart phone.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本实验，我假设你已经在智能手机上安装了 Google Authenticator 应用。
- en: The Authenticator PAM module isn’t in any of the repositories for the RHEL 9
    distros, but it is in the EPEL repository for the RHEL 8 distros. (That might
    change by the time you read this, so it won’t hurt to check if you want to try
    this on AlmaLinux 9.) So, fire up a fresh AlmaLinux 8 VM, and let’s get started.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Authenticator PAM 模块不在 RHEL 9 发行版的任何软件库中，但它在 RHEL 8 发行版的 EPEL 软件库中。（在你阅读本文时，这可能会发生变化，因此，如果你想在
    AlmaLinux 9 上尝试此操作，检查一下也无妨。）所以，启动一个新的 AlmaLinux 8 虚拟机，让我们开始吧。
- en: 'Install the PAM module like this:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以这种方式安装 PAM 模块：
- en: '[PRE37]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note that you need the `qrencode-libs` package in order to produce a QR code.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'From the GUI terminal of your host machine, use SSH to remotely log into the
    AlmaLinux 8 VM. This will allow you to resize the QR code image so that you can
    take a picture of it with your smart phone. Then, run the `google-authenticator`
    app, like this:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This time, we’re creating the `google_authenticator` file within the `.ssh`
    directory, because AlmaLinux is set up to use SELinux. When you try to log in
    remotely with Authenticator enabled, the SSH daemon will try to write to the `google_authenticator`
    file. SELinux prevents SSH from writing to files that are outside of the `.ssh`
    directory. (We’ll talk more about SELinux in *Chapter 10*, *Implementing Mandatory
    Access Control with SELinux and AppArmor*.)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow through on the Authenticator setup, the same as you did in Steps 4 through
    8 of the *Setting up two-factor authentication on Ubuntu 22.04* lab.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `/etc/pam.d/sshd` file in your text editor. Add this line to the very
    bottom of the file:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: (Note that the line wraps around on the printed page.)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Open the `/etc/ssh/sshd_config` file in your text editor. Find the line that
    says `#ChallengeResponseAuthentication no` and change it to `ChallengeResponseAuthentication
    yes`.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reload or restart the `sshd` service:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Set the proper SELinux security context on the google_authenticator file that
    you created:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Log out of the remote session, and try logging back in. This time, you should
    be prompted to enter a verification code.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let’s set AlmaLinux up for using key exchange.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Hand-on lab--Using Google Authenticator with key exchange on AlmaLinux 8
  id: totrans-220
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This will mostly be the same as it was for Ubuntu, with only a few differences.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Transfer the public key from your host machine to the AlmaLinux 8 machine as
    you did in the *Creating and transferring SSH keys* lab.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `/etc/ssh/sshd_config` file, change the `#PasswordAuthentication yes`
    line to `PasswordAuthentication no`, and reload the SSH configuration. Now, you’ll
    only be using key exchange to log in, which will completely bypass the Authenticator.
    Let’s fix things so that you’ll be using both.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `/etc/ssh/sshd_config` file, add the following line just beneath the
    `PasswordAuthentication no` line:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: After reloading the SSH configuration, you’ll have three-factor authentication,
    because you’ll need to enter both your password and a verification code along
    with the key exchange.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If desired, you can easily disable the password prompt and just use the key
    exchange and verification code. In the `/etc/pam.d/sshd` file, find the `auth
    substack password-auth` line at the top of the file, and change it to `#auth substack
    password-auth`.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s all there is to Google Authenticator.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, let’s make sure that we’re only using the strongest encryption
    algorithms.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Secure Shell with strong encryption algorithms
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As I mentioned previously, the current set of NIST recommendations, the **Commercial
    National Security Algorithm Suite** (**CNSA Suite**), involves using stronger
    algorithms and longer keys than what we needed to use previously. I''ll summarize
    the new recommendations here in this table:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '| **Algorithm** | **Usage** |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
- en: '| RSA, 3,072 bits or larger | Key establishment and digital signatures |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
- en: '| Diffie-Hellman (DH), 3,072 bits or larger | Key establishment |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
- en: '| ECDH with NIST P-384 | Key establishment |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
- en: '| ECDSA with NIST P-384 | Digital signatures |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
- en: '| SHA-384 | Integrity |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
- en: '| AES-256 | Confidentiality |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
- en: In other publications, you might see that NIST Suite B is the recommended standard
    for encryption algorithms. Suite B is an older standard that has been replaced
    by the CNSA Suite.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Another cryptographic standard that you might have to work with is the **Federal
    Information Processing Standard** (**FIPS**), which is also promulgated by the
    U.S. government. The current version is FIPS 140-3, which gained its final approval
    on September 22, 2019.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Understanding SSH encryption algorithms
  id: totrans-241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'SSH works with a combination of symmetric and asymmetric cryptography, similar
    to how Transport Layer Security works. The SSH client starts the process by using
    the public key method to set up an asymmetric session with an SSH server. Once
    this session has been set up, the two machines can agree on and exchange a secret
    code, which they''ll use to set up a symmetric session. (As we saw previously
    with TLS, we want to use symmetric cryptography for performance reasons, but we
    need an asymmetric session to perform the secret key exchange.) To perform this
    magic, we need four classes of encryption algorithms, which we''ll configure on
    the server side. These are:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '**Ciphers**: These are the symmetric algorithms that encrypt the data that
    the client and server exchange with each other.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HostKeyAlgorithms**: This is the list of host key types that the server can
    use.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KexAlgorithms**: These are the algorithms that the server can use to perform
    the symmetric key exchange.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MAC**: Message Authentication Codes are hashing algorithms that cryptographically
    sign the encrypted data in transit. This ensures data integrity and will let you
    know if someone has tampered with your data.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The best way to get a feel for this is to look at the `sshd_config` man page,
    like this:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: I could use any VM to demo this. For now, though, I'm going with CentOS 7, unless
    I state otherwise. (The lists of default and available algorithms will be different
    for different Linux distributions and versions.) Also, note that to demo this,
    we want to look at in the `sshd_config` man page to see the lists of algorithms
    that are **available** and **enabled**. The **enabled** list is in the man pages
    for CentOS 7 and AlmaLinux 8, but not in the man page for AlmaLinux 9.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s look at the list of supported ciphers. Scroll down the man page
    until you see them:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'However, not all of these supported ciphers are enabled. Just below this list,
    we can see the list of ciphers that are enabled by default:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Next, in alphabetical order, are the **HostKeyAlgorithms**. The list on CentOS
    7 looks like this:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Next, scroll down to the **KexAlgorithms** (short for **Key Exchange Algorithms**)
    section. You''ll see a list of supported algorithms, which looks like this:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Be aware that this list can vary from one distribution to the next. For example,
    RHEL 8/AlmaLinux 8 supports three additional algorithms that are newer and stronger.
    Its list looks like this:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You’ll see the same list on an AlmaLinux 9 machine, except that the `sntrup761x25519-sha512@openssh.com`
    algorithm has been added.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you''ll see the list of algorithms that are enabled by default:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This list can also vary from one Linux distribution to another. (In this case,
    though, there's no difference between CentOS 7 and AlmaLinux 8.)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we have the MAC algorithms. The default list of enabled algorithms
    looks like this on CentOS 7:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To see the list of algorithms that your particular system supports, either
    look at the `sshd_config` man page for that machine or perform the following `ssh
    -Q` commands:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: When you look in the `/etc/ssh/sshd_config` file, you won't see any lines that
    configure any of these algorithms. That's because the default list of algorithms
    is hard coded into the SSH daemon. The only time you'll configure any of these
    is if you want to either enable an algorithm that isn't enabled or disable one
    that is. Before we do that, let's scan our system to see what is enabled and see
    if the scanner can make any recommendations.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Scanning for enabled SSH algorithms
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have two good ways to scan an SSH server. If your server is accessible via
    the Internet, you can go to the SSHCheck site at [https://sshcheck.com/](https://sshcheck.com/).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Then, just type in either the IP address or hostname of your server. If you've
    changed the port from the default port `22`, enter the port number as well. When
    the scan completes, you'll see the list of enabled algorithms, along with recommendations
    on which ones to either enable or disable.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: If the machine that you want to scan isn't accessible from the Internet, or
    even if it is, you can use a local scanning tool. In the previous edition of this
    book, we used the **ssh_scan** tool. Sadly, this tool is no longer supported,
    and it doesn’t work on newer Linux distros that come with OpenSSL version 3\.
    So instead, let’s try this with the Nmap scripting engine.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – Scanning with Nmap
  id: totrans-273
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For this lab, you can use any of your virtual machines. Let''s get started:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install the `nmap` package from your normal distro repository. On Ubuntu
    do:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'On CentOS 7, do this:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'On AlmaLinux 8 or 9, do this:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Use `nmap` with the `ssh2-enum-algos.nse` script to scan the server VM that
    you created and configured in the previous labs. Substitute your own IP address
    for the one I''m using here. Note that even if you haven''t created a key pair
    on the scanner machine, the scan still works against machines that have had username/password
    authentication disabled. (But, of course, you won''t be able to log in from the
    scanner machine):'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Note that if you’re scanning a machine with an enabled firewall, you might
    get an error message about how the scan has been blocked. If that happens, try
    adding the `-Pn` switch, so that the command will look like this:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Repeat the scan, but this time, save the output to a normal text file, like
    so:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Open the text file in a normal text editor or pager. You'll see a complete list
    of all of the algorithms that are enabled. Compare your results with the standards
    that are applicable to your circumstances, such as NIST's CNSA standard, to be
    sure you enable or disable the right things.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On either your host machine or a VM with a desktop interface, visit the Shodan
    website at [https://www.shodan.io](https://www.shodan.io). Type `ssh` into the
    search window and observe the list of Internet-facing SSH servers that comes up.
    Click on different IP addresses until you find an SSH server that's *not* running
    on the default port `22`. Observe the list of enabled algorithms for that device.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scan the device, using the `-p` switch to scan the different port, like so:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Note that in addition to the list of enabled algorithms that you saw on Shodan,
    you now have a list of weak ones that the owner of this device needs to disable.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep both this scanner and this server VM handy, because we'll use them again
    after we disable some algorithms.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You've reached the end of the lab – congratulations!
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let's disable some of the creaky, old, and weak stuff.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: Disabling weak SSH encryption algorithms
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As I said before, we want to compare our scan results against the NIST recommendations,
    and configure things accordingly. Understand though, that the list of available
    algorithms differs from one Linux distro to the next. To make things less confusing,
    I'll present two hands-on procedures in this section. One is for Ubuntu 22.04,
    while the other is for CentOS 7\. AlmaLinux 8 and 9 have their own unique way
    of doing business, so I'm saving that for the next section.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – disabling weak SSH encryption algorithms – Ubuntu 22.04
  id: totrans-297
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For this lab, you''ll need the VM that you''ve been using as a scanner, and
    another Ubuntu 22.04 VM to scan and configure. Let''s get started:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: 'If you haven''t done so already, scan the Ubuntu 22.04 VM and save the output
    to a file:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Count the number of lines in the file by doing:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'On the target Ubuntu 22.04 VM, open the `/etc/ssh/sshd_config` file in your
    preferred text editor. Toward the top of the file, find these two lines:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Beneath those two lines, insert these three lines:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In the `Ciphers` and `MACs` lines, you see a comma-separated list of algorithms
    that were disabled by the preceding `-` sign. (You only need one `-` to disable
    all the algorithms in the list.) In the `KexAlgorithms` line, there's no `-` sign.
    This means that the algorithm that's listed on that line is the only one that
    is enabled.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the file and restart the SSH daemon. Verify that it started correctly:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Scan the Ubuntu 22.04 VM again, saving the output to a different file:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Count the number of lines in the new file:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'On the scanner VM, use `diff` to compare the two files. You should see fewer
    algorithms than you saw previously:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The sharp-eyed among you will notice that we left one Cipher that isn't on the
    NIST CNSA list. `chacha20-poly1305@openssh.com` is a lightweight algorithm that's
    good for use with low-powered, hand-held devices. It's a good, strong algorithm
    that can replace the venerable **Advanced Encryption Standard** (**AES**) algorithm,
    but with higher performance. However, if you have to remain 100% compliant with
    the NIST CNSA standard, then you might have to disable it.
  id: totrans-316
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You've reached the end of the lab – congratulations!
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's work with CentOS 7.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – disabling weak SSH encryption algorithms – CentOS 7
  id: totrans-319
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You''ll notice two things when you start working with CentOS 7:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '**More algorithms enabled**: A default SSH configuration on CentOS 7 has a
    lot more enabled algorithms than what Ubuntu 22.04 has. This includes some really
    ancient stuff that you really don''t want to see anymore. I''m talking about things
    such as Blowfish and 3DES, which should have been retired years ago.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A different configuration technique**: On CentOS, placing a `-` sign in front
    of a list of algorithms that you want to disable doesn''t work. Instead, you''ll
    need to list all of the algorithms that you want to enable.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this lab, you''ll need a CentOS 7 VM and the same scanner VM that you''ve
    been using. With that in mind, let''s get to work:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 'Scan the CentOS 7 VM and save the output to a file. Note that due to the CentOS
    7 firewall, you’ll need to add the `-Pn` option:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Count the number of lines in the output file:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'On the target CentOS 7 VM, open the `/etc/ssh/sshd_config` file in your preferred
    text editor. Toward the top of the file, find these two lines:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Beneath those two lines, insert these three lines:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: As I mentioned previously, with CentOS, using `-` to disable algorithms doesn't
    work. Instead, we have to list all of the algorithms that we do want to enable.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the file and reload the SSH daemon. Verify that it started correctly:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Scan the CentOS 7 VM again, saving the output to a different file:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Count the number of lines in the new output file:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'On the scanner VM, use `diff` to compare the two files. You should see fewer
    algorithms than you saw previously:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: As before, I left the `chacha20-poly1305@openssh.com` algorithm enabled. If
    you have to remain 100% compliant with the NIST CNSA standard, then you might
    have to disable it.
  id: totrans-341
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You've reached the end of the lab – congratulations!
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at a handy new feature that comes with the RHEL 8 and 9 families.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: Setting system-wide encryption policies on RHEL 8/9 and AlmaLinux 8/9
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In *Chapter 6*, *Encryption Technologies*, we briefly looked at how to set
    system-wide encryption policies on AlmaLinux 8 and 9\. With this cool feature,
    you no longer have to configure crypto policies for each individual daemon. Instead,
    you just run a couple of simple commands, and the policy is instantly changed
    for multiple daemons. To see which daemons are covered, look in the `/etc/crypto-policies/back-ends/`
    directory. Here''s a partial view of what''s there:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'As you see, this directory contains symbolic links to text files that contain
    directives about which algorithms to either enable or disable for the `DEFAULT`
    configuration. One level up, in the `/etc/crypto-policies/` directory, there''s
    the `config` file. Open it, and you''ll see that this is where the system-wide
    configuration is set:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Scanning this VM with its `DEFAULT` configuration shows that quite a few older
    algorithms are still enabled. To get rid of them, we can change to either `FUTURE`
    mode or to `FIPS` mode.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  id: totrans-350
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-351
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At the time of this writing, the EPEL repository uses a security certificate
    that’s not compatible with `FUTURE` mode. This will prevent you from updating
    or installing any software packages from the EPEL repository. If you need to set
    your machine with both `FUTURE` mode and the EPEL repository, be aware that you’ll
    need to set the machine back to `DEFAULT` mode before you can either fully update
    your system or install packages from EPEL. (Of course, this problem could be fixed
    by the time you read this.)
  id: totrans-352
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: To show you how this works, let's get our hands dirty with another lab.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – setting encryption policies on AlmaLinux 9
  id: totrans-354
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Start with a fresh AlmaLinux 9 VM and the scanner VM that you''ve been using.
    Now, follow these steps:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: 'On a AlmaLinux 9 VM, use the `update-crypto-policies` utility to verify that
    it''s running in `DEFAULT` mode:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Scan the AlmaLinux 9 VM in its `DEFAULT` configuration and save the output
    to a file:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'On the AlmaLinux 9 VM, set the system-wide crypto policy to `FUTURE`:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'In the `/etc/ssh/` directory, remove the current host machine keys:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: (Don’t worry. New keys will get created when you reboot the machine.)
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reboot the VM:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: On the scanner VM, open the `~/.ssh/known_hosts` file in your text editor. Delete
    the entry that was previously made for the AlmaLinux VM and save the file. (We
    have to do this because the public key fingerprint on the AlmaLinux VM will have
    changed because of the new policy.)
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scan the AlmaLinux VM again, saving the output to a different file:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Compare the two output files. You should now see fewer enabled algorithms than
    you did previously.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Look at the files in the `/etc/crypto-policies/back-ends/` directory:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: You'll now see that the symbolic links point to files in the `FUTURE` directories.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at the host keys in the `/etc/ssh/` directory, and see if they differ
    from what you had before:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Scan the AlmaLinux 9 VM that you set up in `FIPS` mode for the lab in *Chapter
    6*, *Encryption Technologies*. Compare the results with the `DEFAULT` and `FUTURE`
    mode scans.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: End of lab
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Tip**'
  id: totrans-379
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-380
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If `FUTURE` mode hasn’t disabled enough algorithms for you, you can always
    just create your own custom policy. See the details here:'
  id: totrans-381
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-382
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening#customizing-system-wide-cryptographic-policies-with-subpolicies_using-the-system-wide-cryptographic-policies](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening#customizing-system-wide-cryptographic-policies-with-subpolicies_using-the-system-wide-cryptographic-policies)'
  id: totrans-383
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: You now know how to configure SSH to use only the most modern, most secure algorithms.
    Next, let's look at logging.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Configuring more detailed logging
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In its default configuration, SSH already creates log entries whenever someone
    logs in via SSH, SCP, or SFTP. On Debian/Ubuntu systems, the entry is made in
    the `/var/log/auth.log` file. On Red Hat/CentOS/AlmaLinux systems, the entry is
    made in the `/var/log/secure` file. Either way, the log entry looks something
    like this:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Open the `sshd_config` man page and scroll down to the `LogLevel` item. There,
    you''ll see the various settings that provide different levels of detail for logging
    SSH messages. The levels are as follows:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '**QUIET**'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FATAL**'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ERROR**'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**INFO**'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VERBOSE**'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DEBUG** or **DEBUG1**'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DEBUG2**'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DEBUG3**'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Normally, the only two of these we would care about are `INFO` and `VERBOSE`.
    `INFO` is the default setting, while `VERBOSE` is the only other one that we would
    use under normal circumstances. The various `DEBUG` levels might come in handy
    for troubleshooting, but the man page warns us that using `DEBUG` in production
    settings would violate users' privacy.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead and get our hands dirty, just to get a feel for what gets logged
    with the various levels.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – configuring more verbose SSH logging
  id: totrans-399
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For this lab, use the same VM that you''ve been using for the previous labs.
    That way, you''ll get a better picture of what a complete `sshd_config` file should
    look like when it''s fully locked down. Remotely log into the target VM via SSH
    and follow these steps:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the main log file and scroll down to where you see the entry that was
    made due to your login and observe what it says. For Ubuntu, do:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'For CentOS or AlmaLinux, do:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'As I mentioned previously, you never want to run a production machine with
    the SSH log level set to any of the `DEBUG` levels. But, just so you can see what
    it does log, set your machine to `DEBUG` now. Open the `/etc/ssh/sshd_config`
    file in your favorite text editor. Find the line that says the following:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Change it to the following:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'After saving the file, reload SSH. On Ubuntu, do:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'On CentOS or AlmaLinux, do this:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Log out of the SSH session, and then log back in. View the system log file to
    see the new entries from this new login.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `/etc/ssh/sshd_config` file for editing. Change the `LogLevel DEBUG3`
    line to the following:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: After saving the file, reload or restart the SSH daemon. Log out of the SSH
    session, log back in, and look at the entries in the system log file.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Tip**'
  id: totrans-417
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-418
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The main benefit of `VERBOSE` mode is that it will log the fingerprints of any
    key that was used to log in. This can be a big help with key management.
  id: totrans-419
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: You've reached the end of the lab – congratulations!
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: So, you've just seen how to get more information about SSH logins in your system
    logs. Next, let's talk a bit about access control.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: Configuring access control with whitelists and TCP Wrappers
  id: totrans-422
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve already locked things down pretty well just by requiring that clients
    authenticate via key exchange, rather than by username and password. When we prohibit
    password authentication, the bad guys can do brute-force password attacks against
    us until the cows come home, and it won''t do them any good. (Although, in truth,
    they''ll just give up as soon as they find that password authentication has been
    disabled.) For an extra measure of security, we can also set up a couple of access
    control mechanisms that will allow only certain users, groups, or client machines
    to log in to an SSH server. These two mechanisms are:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: Whitelists within the `sshd_config` file
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP Wrappers, via the `/etc/hosts.allow` and `/etc/hosts.deny` files
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Okay, you're now saying, *But what about firewalls? Isn't that a third mechanism
    that we can use?* And yeah, you're right. But, we already covered firewalls in
    *Chapter 4*, *Securing Your Server with a Firewall - Part 1*, and *Chapter 5*,
    *Securing Your Server with a Firewall - Part 2*, so I won't repeat any of that
    here. You can also place access control directives in your systemd unit files
    for SSH. For our present discussion though, I’d rather avoid the complexities
    of explaining how to edit a systemd unit file. At any rate, these are the ways
    of controlling access to your SSH server. You can use all of them together if
    you really want to, or you can just use one of them at a time. (It really depends
    on just how paranoid you really are.)
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: There are two competing philosophies about how to do access control. With blacklists,
    you specifically prohibit access by certain people or machines. That's difficult
    to do because the list could get very long, and you still won't block everybody
    that you need to block. The preferred and easier method is to use whitelists,
    which specifically allow access by certain people or machines.
  id: totrans-427
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: First, let's look at creating whitelists within `sshd_config` with a hands-on
    lab.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: Configuring whitelists within sshd_config
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The four access control directives that you can set within `sshd_config` are
    as follows:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '**DenyUsers**'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AllowUsers**'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DenyGroups**'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AllowGroups**'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each directive, you can specify more than one username or group name, separating
    them with a blank space. Also, these four directives are processed in the order
    that I've listed them here. In other words, if a user is listed with both the
    `DenyUsers` and the `AllowUsers` directives, `DenyUsers` takes precedence. If
    a user is listed with `DenyUsers` and is a member of a group that's listed with
    `AllowGroups`, `DenyUsers` again takes precedence. To demonstrate this, let's
    do a lab.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – configuring whitelists within sshd_config
  id: totrans-436
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This lab will work on any of your VMs. Follow these steps:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 'On the VM that you wish to configure, create user accounts for Frank, Charlie,
    and Maggie. On Ubuntu, do it like this:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'On CentOS or AlmaLinux, do it like this:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Create the `webadmins` group and add Frank to it:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: From either your host machine or from another VM, have the three users log in.
    Then, log them back out.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `/etc/ssh/sshd_config` file in your favorite text editor. At the bottom
    of the file, add an `AllowUsers` line with your own username, like so:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Then, restart or reload the SSH service and verify that it has started correctly:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Repeat *step 3*. This time, these three kitties shouldn''t be able to log in.
    Open the `/etc/ssh/sshd_config` file in your text editor. This time, add an `AllowGroups`
    line to the bottom of the file for the `webadmins` group, like so:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Restart the SSH service and verify that it started properly.
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From either your host machine or another VM, have Frank try to log in. You'll
    see that even though he's a member of the `webadmins` group, he'll still be denied.
    That's because the `AllowUsers` line with your own username takes precedence.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: Open `sshd_config` in your text editor and remove the `AllowUsers` line that
    you inserted in *step 4*. Restart the SSH service and verify that it started properly.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to log into your own account, and then try to log into the accounts of all
    the other users. You should now see that Frank is the only one who is allowed
    to log in. The only way that any of the other users can now log into the VM is
    from the VM's local console.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log into your own account at the VM's local console. Delete the `AllowGroups`
    line from `sshd_config` and restart the SSH service.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You've reached the end of the lab – congratulations!
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: You've just seen how to configure a whitelist on the daemon level, using the
    SSH daemon's own configuration file. Next, we'll look at configuring whitelists
    at the network level.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: Configuring whitelists with TCP Wrappers
  id: totrans-458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's a strange name, but a simple concept. TCP Wrappers – singular, not plural
    – listens to incoming network connections and either allows or denies connection
    requests. Whitelists and blacklists are configured in the `/etc/hosts.allow` file
    and the `/etc/hosts.deny` file. Both of these files work together. If you create
    a whitelist in `hosts.allow` without adding anything to `hosts.deny`, nothing
    will be blocked. That's because TCP Wrappers consults `hosts.allow` first, and
    if it finds a whitelisted item there, it will just skip over looking in `hosts.deny`.
    If a connection request comes in for something that isn't whitelisted, TCP Wrappers
    will consult `hosts.allow`, find that there's nothing there for the source of
    this connection request, and then will consult `hosts.deny`. If nothing is in
    `hosts.deny`, the connection request will still go through. So, after you configure
    `hosts.allow`, you have to also configure `hosts.deny` in order to block anything.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: You’ll want to note that the Red Hat folk have stripped TCP Wrappers from RHEL
    8/9 and their offspring. So, if you decide to practice with the techniques that
    I present here, you can do so with either your Ubuntu or CentOS 7 VMs, but not
    on your AlmaLinux 8/9 VMs. (The Red Hat folk now recommend doing access control
    via firewalld, rather than TCP Wrappers.)
  id: totrans-460
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-461
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can read about it here: [https://access.redhat.com/solutions/3906701](https://access.redhat.com/solutions/3906701).'
  id: totrans-462
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-463
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (You'll need a Red Hat account to read the whole article. If you don't need
    to pay for Red Hat support, you can open a free-of-charge developers' account.)
  id: totrans-464
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, here's something that's extremely important. Always, *always*, configure
    `hosts.allow` before you configure `hosts.deny`. That's because as soon as you
    save either one of these files, the new configuration immediately takes effect.
    So, if you configure the blocking rule in `hosts.deny` while logged in remotely,
    your SSH connection will break just as soon as you save the file. The only way
    to get back in will be to enter the server room and reconfigure things from the
    local console. Your best bet is to get used to the idea of always configuring
    `hosts.allow` first, even when you're working from the local console. That way,
    you'll always be sure. (Amazingly, though, there are other TCP Wrappers tutorials
    out there that tell you to configure `hosts.deny` first. What *are* these guys
    thinking?)
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: You can do some rather fancy tricks with TCP Wrappers, but for now, I just want
    to keep things simple. So, let's look at some of the most-used configurations.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: 'To whitelist a single IP address, place a line like this into the `/etc/hosts.allow`
    file:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Then, place this line into the `/etc/hosts.deny` file:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Now, if you try to log in from anywhere else besides the IP address that's listed
    in `hosts.allow`, you will be denied access.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: You can also list either multiple IP addresses or network addresses in `hosts.allow`.
    For details on how to do this, see the `hosts.allow` man page.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned previously, you can do some fancy things with TCP Wrappers. But,
    now that the Red Hat folk have deprecated it, you should probably get used to
    the idea of either setting up firewall rules or configuring the `sshd_config`
    file. On the other hand, TCP Wrappers could come in handy whenever you need to
    configure an access control rule very quickly, provided that you’re on a machine
    that supports it.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: Configuring automatic logouts and security banners
  id: totrans-474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Best security practice dictates that people log out of their computers before
    they walk away from their desks. This is especially important when an administrator
    uses his or her cubicle computer to remotely log into a sensitive server. By default,
    SSH allows a person to remain logged in forever without complaining. However,
    you can set it up to automatically log out idle users. We'll look at two quick
    methods for doing that.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: Configuring automatic logout for both local and remote users
  id: totrans-476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This first method will automatically log out idle users who are logged on either
    at the local console or remotely via SSH. Go into the `/etc/profile.d/` directory
    and create the `autologout.sh` file with the following contents:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: This sets a timeout value of 100 seconds. (`TMOUT` is a Linux environmental
    variable that sets timeout values.)
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the executable permission for everybody:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Log out and then log back in. Then, let the VM sit idle. After 100 seconds,
    you should see that the VM is back at the login prompt. Note, though, that if
    any users are already logged in at the time you create this file, the new configuration
    won't take effect for them until they log out and then log back in.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: Configuring automatic logout in sshd_config
  id: totrans-483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second method only logs out users who are logged in remotely via SSH. Instead
    of creating the `/etc/profile.d/autologout.sh` file, look for these two lines
    in the `/etc/ssh/sshd_config` file:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Change them to the following:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Then, restart or reload the SSH service to make the change take effect.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: I've been using 100 seconds for the timeout value in both of these examples.
    However, you can set the timeout value to suit your own needs.
  id: totrans-489
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You now know how to automatically log out your users. Now, let's look at setting
    up security banners.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pre-login security banner
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In *Chapter 3*, *Securing Normal User Accounts*, I showed you how to create
    a security message that shows up *after* a user has logged in. You do this by
    inserting a message into the `/etc/motd` file. But, when you think about it, wouldn't
    it be better for people to see a security banner *before* they log in? You can
    do that with `sshd_config`.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create the `/etc/ssh/sshd-banner` file, with the following contents:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'In the `/etc/ssh/sshd_config` file, look for this line:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Change it to this:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'As always, restart or reload the SSH service. Now, whoever logs in remotely
    will see something like this:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: So, will this banner keep your system safe and secure from the bad guys? No,
    but it could be useful if you ever have to take a case to court. Sometimes, it's
    important to show a judge and jury that the intruders knew that they were going
    where they don't belong.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to set up security banners and automatic logouts, let's
    look at a few miscellaneous settings that don't fit neatly into any one category.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: Configuring other miscellaneous security settings
  id: totrans-503
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our SSH configuration is a lot more secure than it used to be, but we can still
    make it better. Here are a few little tricks that you might not have seen elsewhere.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: Disabling X11 forwarding
  id: totrans-505
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you SSH into a server in the normal manner, as we''ve been doing, you
    can only run text-mode programs. If you try to remotely run any GUI-based program,
    such as Firefox, you''ll get an error message. But, when you open the `sshd_config`
    file of pretty much any Linux distribution, you''ll see this line:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'This means that with the right option switch, you can remotely run GUI-based
    programs. Assuming that you''re logging into a machine that has a graphical desktop
    environment installed, you can use either the `-Y` or the `-X` option when logging
    in, like so:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: or
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The problem here is that the X11 protocol, which powers graphical desktop environments
    on most Linux and Unix systems, has a few security weaknesses that make it somewhat
    dangerous to use remotely. The bad guys have ways of using it to compromise an
    entire system. Your best bet is to disable it by changing the `X11Forwarding`
    line to look like this:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: As usual, restart or reload the SSH service to make it read in the new configuration.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know about X11 forwarding, let's dig some tunnels.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: Disabling SSH tunneling
  id: totrans-516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SSH tunneling, or as it''s sometimes called, SSH port forwarding, is a handy
    way to protect non-secure protocols. For example, by tunneling normal HTTP through
    an SSH tunnel, you can access a non-secure website in a secure fashion. Here’s
    what that looks like:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: I had to use `sudo` here because all network ports below port `1024` are **privileged
    ports**. If I were to change the web server configuration to listen on a non-privileged
    high-number port, I wouldn't need `sudo`.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to connect to this site in a secure manner, I can just open the web browser
    on my local machine and type in the following URL:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost`'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: Yeah, it seems strange to access a remote machine by typing in `localhost`,
    but that's the designator I used when I logged in with SSH. I could have used
    another name, but `localhost` is the name you traditionally see in SSH tutorials,
    so I'm following suit here. Now, as soon as I log out of the SSH session, my connection
    to the web server will break.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though this sounds like a good idea, it actually creates a security problem.
    Let''s say that your corporate firewalls are set up to prevent people from going
    home and remotely logging into their company workstations. That''s a good thing,
    right? Now, let''s say that the company firewall has to allow outbound SSH connections.
    A user could create an SSH tunnel from his or her company workstation to a computer
    at another location, then go to that location and create a reverse tunnel back
    to the company workstation. So, if it isn''t possible to block outgoing SSH traffic
    at the firewall, then your best bet is to disable SSH tunneling. In your `sshd_config`
    file, ensure that you have lines that look like this:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Restart or reload the SSH service, as always. Now, port tunneling will be disabled.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to disable SSH tunneling, let's talk about changing the
    default port.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: Changing the default SSH port
  id: totrans-527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, SSH listens on port `22/TCP`. If you've been around for a while,
    you've surely seen plenty of documentation about how important it is to use some
    other port in order to make it harder for the bad guys to find your SSH server.
    But, I must say, this notion is a bit controversial.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first place, if you enable key authentication and disable password authentication,
    then changing the port has limited value. When a scanner bot finds your server
    and sees that password authentication is disabled, it will just go away and won''t
    bother you anymore. In the second place, if you were to change the port, the bad
    guys'' scanning tools can still find it. If you don''t believe me, just go to
    Shodan.io and search for `ssh`. In this example, someone thought they were smart
    by changing to port `2211`:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file50.png)'
  id: totrans-530
  prefs: []
  type: TYPE_IMG
- en: '*Yeah, smarty-pants. That didn''t hide things so well, now, did it?*'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, security expert Daniel Miessler says that it's still useful
    to change the port, in case someone tries to leverage a zero-day exploit against
    SSH. He recently published the results of an informal experiment that he did,
    in which he set up a public server that listens for SSH connections to both port
    `22` and port `24`, and observed the number of connection attempts to each port.
    He said that over a single weekend, there were 18,000 connections to port `22`
    and only five to port `24`. But, although he doesn't explicitly say, it appears
    that he left password authentication enabled. To have truly scientifically accurate
    results, he needs to conduct the same study with password authentication disabled.
    He also needs to conduct the study on separate servers that have SSH enabled for
    either port `22` or port `24`, instead of having both ports enabled on a single
    machine. My hunch is that when the scanner bots found that port `22` was open,
    they didn't bother to scan for any other open SSH ports.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read about his experiment here: [https://danielmiessler.com/study/security-by-obscurity/](https://danielmiessler.com/study/security-by-obscurity/).'
  id: totrans-533
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Anyway, if you do want to change ports, just uncomment the `#Port 22` line in
    `sshd_config`, and change the port number to whatever you want.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's talk about key management.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: Managing SSH keys
  id: totrans-536
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Earlier, I showed you how to create a pair of keys on your local workstation,
    and then transfer the public key to a remote server. This allows you to disable
    username/password authentication on the server, making it much harder for the
    bad guys to break in. The only problem with this that we didn't address is that
    the public key goes into an `authorized_keys` file that's in the user's own home
    directory. So, the user can manually add extra keys to the file, which would allow
    the user to log in from other locations besides the one that's been authorized.
    And, there's also the problem of having `authorized_keys` files all over the place,
    in every user's home directory. That makes it a bit hard to keep track of everyone's
    keys.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to handle this is to move everyone''s `authorized_keys` file to one
    central location. Let''s take Vicky, my 15-year old solid gray kitty. The administrator
    created an account on the server that she needs to access and allowed her to create
    and transfer her key to it before disabling password authentication. So, Vicky
    now has her `authorized_keys` file in her home directory on that server, as we
    see here:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Vicky owns the file, and she has both read and write permissions on it. So,
    even though she can''t transfer other keys to it the normal way once the administrator
    has disabled password authentication, she can still transfer key files manually,
    and manually edit the `authorized_keys` file to include them. To thwart her efforts,
    our intrepid administrator will create a directory within the `/etc/ssh/` directory
    to hold everyone''s `authorized_keys` files, like so:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Our intrepid administrator''s full admin privileges allow him to log into the
    root user''s shell, which allows him to go into the directories of all other users:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'The next step is to move Vicky''s `authorized_keys` file to the new location,
    changing its name to `vicky`, like so:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Now, we have a bit of a conundrum. As you see here, the file still belongs
    to Vicky, and she has both read and write privileges. So, she can still edit the
    file without any administrator privileges. Removing the write privilege won''t
    work, because since the file belongs to her, she could just add the write privilege
    back. Changing ownership to the root user is part of the answer, but that will
    prevent Vicky from being able to read the file, which will prevent her from logging
    in. To see the whole solution, let''s see what I''ve already done with my own
    `authorized_keys` file:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'The eagle-eyed among you have surely noticed what''s going on with the `donnie`
    file. You have seen that I changed ownership to the root user and then added an
    access control list, as indicated by the `+` sign. Let''s do the same for Vicky:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Looking at the permissions settings, we see that Vicky has read access to the
    `vicky` file:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'While we''re at it, let''s look at her access control list:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Vicky can now read the file so that she can log in, but she can't change it.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step is to reconfigure the `sshd_config` file, and then restart or
    reload the SSH service. Open the file in your text editor and look for this line:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Change it to this:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: The `%u` at the end of the line is a mini-macro that tells the SSH service to
    look for a keys file that has the same name as the user who's logging in. Now,
    even if the users were to manually create their own `authorized_keys` files in
    their own home directories, the SSH service would just ignore them. Another benefit
    is that having the keys all in one place makes it a bit easier for an administrator
    to revoke someone's access, should the need arise.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that there's a lot more to managing SSH keys than what I've been able
    to present here. One problem is that while there are a few different free open
    source software solutions for managing public keys, there aren't any for managing
    private keys. A large corporation could have thousands or perhaps even millions
    of private and public keys in different places. Those keys never expire, so they'll
    be around forever unless they get deleted. If the wrong people get hold of a private
    key, your whole system could become compromised. As much as I hate to say it,
    your best bet for managing SSH keys is to go with a commercial solution, such
    as ones from SSH.com and CyberArk.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the key management solutions from SSH.com here: [https://www.ssh.com/academy/iam/ssh-key-management](https://www.ssh.com/academy/iam/ssh-key-management).'
  id: totrans-561
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-562
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Head here for CyberArk''s key management solutions: [https://www.cyberark.com/resources/blog/ssh-keys-the-powerful-unprotected-privileged-credentials](https://www.cyberark.com/resources/blog/ssh-keys-the-powerful-unprotected-privileged-credentials).'
  id: totrans-563
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-564
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Full disclosure: I have no connection with either SSH.com or CyberArk, and
    receive no payment for telling you about them.'
  id: totrans-565
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: You've learned several cool tricks here for beefing up your server security.
    Now, let's look at how to create different configurations for different users
    and groups.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: Setting different configurations for different users and groups
  id: totrans-567
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the server side, you can use the `Match User` or `Match Group` directive
    to set up custom configurations for certain users or groups. To see how it''s
    done, look at the example at the very bottom of the `/etc/ssh/sshd_config` file.
    There, you''ll see the following:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Of course, this has no effect since it''s commented out, but that''s okay.
    Here''s what we see for user `anoncvs`:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: He can't do **X11 Forwarding**.
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: He can't do **TCP Forwarding**.
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: He won't have the use of a command terminal.
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As soon as he logs in, he'll be starting the **Concurrent Versioning Service**
    (**CVS**) server. By not having use of the terminal, `anoncvs` can start the CVS
    server, but can't do anything else.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: You can set up different configurations for as many users as you need to. Anything
    that you put in the custom configurations will override the global settings. To
    set up a custom configuration for a group, just replace `Match User` with `Match
    Group`, and supply a group name instead of a user name.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: Creating different configurations for different hosts
  id: totrans-576
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For a change of pace, let''s look at the client''s end now. This time, we''ll
    look at a handy trick to help ease the pain of logging into different servers
    that require different keys or SSH options. All you have to do is go into the
    `.ssh` directory in your own home directory and create a `config` file. To demonstrate
    this, let''s say that we''ve created either a DNS record or an `/etc/hosts` file
    entry for our servers so that we don''t have to remember so many IP addresses.
    Let''s also say that we''ve created a separate pair of keys for each server that
    we need to access. In the `~/.ssh/config` file, we can add a stanza that looks
    something like this:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Here''s the breakdown:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: '**IdentityFile**: This specifies the key that goes with this server.'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IdentitiesOnly yes**: If you happen to have more than one key loaded into
    your session keyring, this forces your client to only use the key that''s specified
    here.'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ForwardX11 yes**: We want this client to use *X11* forwarding. (Of course,
    this will only be effective if the server has been configured to allow it.)'
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cipher aes256-gcm@openssh.com**: We want to use this algorithm, and *only*
    this algorithm, to perform our encryption.'
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create custom configurations for other hosts, just add a stanza for each
    one to this file.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: After you save the file, you have to change its permissions settings to a value
    of `600`. If you don't, you'll get an error when you try to log into any of the
    servers that are configured in the file.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know about custom configurations, let's talk about SFTP, where
    we'll make good use of the `Match Group` directive that we just looked at.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a chroot environment for SFTP users
  id: totrans-587
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Secure File Transfer Protocol** (**SFTP**) is a great tool for performing
    secure file transfers. There is a command-line client, but users will most likely
    use a graphical client, such as FileZilla. With a default SSH setup, anyone who
    has a user account on a Linux machine can log in through either SSH or SFTP and
    can navigate through the server''s entire filesystem. What we really want for
    SFTP users is to prevent them from logging into a command prompt via SSH, and
    to confine them to their own designated directories.'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  id: totrans-589
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-590
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One good use for this trick would be to set up SFTP configurations for web site
    creators. Instead of allowing these users to transfer files to and from only their
    own home directories, just allow them to transfer files to and from the web site
    content directories.
  id: totrans-591
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Creating a group and configuring the sshd_config file
  id: totrans-592
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the exception of the slight difference in user-creation commands, this
    procedure works the same on any of your VMs.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll begin by creating an `sftpusers` group:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Create the user accounts and add them to the `sftpusers` group. We''ll do both
    operations in one step. On your CentOS or AlmaLinux machine, the commands for
    creating Max''s account would look like this:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'On your Ubuntu machine, it would look like this:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Open the `/etc/ssh/sshd_config` file in your favorite text editor. Find the
    line that says this:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Change it to this:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: This setting allows you to disable normal SSH login for certain users.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the `sshd_config` file, add a `Match Group` stanza:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: An important consideration here is that the `ChrootDirectory` has to be owned
    by the root user, and it can't be writable by anyone other than the root user.
    When Max logs in, he'll be in the `/home/` directory, and will then have to `cd`
    into his own directory. This also means that you want all your users' home directories
    to have the restrictive `700` permissions settings, in order to keep everyone
    out of everyone else's stuff.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the file and restart the SSH daemon. Then, try to log on as Max through
    normal SSH, just to see what happens:'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Okay, so he can''t do that. Now, let''s have Max try to log in through SFTP
    and verify that he is in the `/home/` directory:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Now, let''s see him try to `cd` out of the `/home/` directory:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: So, our chroot jail does indeed work.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – setting up a chroot directory for the sftpusers group
  id: totrans-615
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For this lab, you can use either the CentOS VM or the Ubuntu VM. You''ll add
    a group, then configure the `sshd_config` file to allow group members to only
    be able to log in via SFTP, and then confine them to their own directories. For
    the simulated client machine, you can use the terminal of your macOS or Linux
    desktop machine, or any of the available Bash shells from your Windows machine.
    Let''s get started:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `sftpusers` group:'
  id: totrans-617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Create a user account for Max and add him to the `sftpusers` group. On CentOS
    or AlmaLinux, do this:'
  id: totrans-619
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'On Ubuntu, do this:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'For Ubuntu, ensure that the users'' home directories are all set with read,
    write, and execute permissions for only the directory''s user. If that''s not
    the case, do this:'
  id: totrans-623
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Open the `/etc/ssh/sshd_config` file in your preferred text editor. Find the
    line that says the following:'
  id: totrans-625
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Change it to the following:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'At the end of the `sshd_config` file, add this stanza:'
  id: totrans-629
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Reload the SSH configuration. On CentOS or AlmaLinux, do this:'
  id: totrans-631
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'On Ubuntu, do this:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Have Max try to log in through normal SSH, to see what happens:'
  id: totrans-635
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Now, have Max log in through SFTP. Once he''s in, have him try to `cd` out
    of the `/home/` directory:'
  id: totrans-637
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: You've reached the end of the lab – congratulations!
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to securely configure SFTP, let's look at how to securely
    share a directory.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: Sharing a directory with SSHFS
  id: totrans-641
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several ways to share a directory across a network. In enterprise
    settings, you'll find the **Network Filesystem** (**NFS**), **Samba**, and various
    distributed filesystems. **SSHFS** isn't used in enterprises quite as much, but
    it can still come in handy. The beauty of it is that all of its network traffic
    is encrypted by default, unlike with NFS or Samba. And, other than installing
    the SSHFS client program and creating a local mount-point directory, it doesn't
    require any configuration beyond what you've already done. It's especially handy
    for accessing a directory on a cloud-based **Virtual Private Server** (**VPS**)
    because it allows you to just create files in the shared directory rather than
    using `scp` or `sftp` commands to transfer the files. So, if you're ready, let's
    jump in.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – sharing a directory with SSHFS
  id: totrans-643
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this lab, we''ll use two VMs. For the server, you can use any of your virtual
    machines. The same is true of the client, except that each distro has the the
    SSHFS client in a different repository. Here’s what I’m talking about:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
- en: The client is in the normal Ubuntu repositories, so you don’t have to do anything
    special to get it.
  id: totrans-645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For CentOS 7 and AlmaLinux 9, you’ll need to install the `epel-release` package
    with the normal `yum install` or `dnf install` command.
  id: totrans-646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AlmaLinux 8 has the SSHFS client in its own PowerTools repository, which isn’t
    enabled by default. To enable it, open the `/etc/yum.repos.d/almalinux-powertools.repo`
    file in your favorite text editor. In the `[powertools]` section, find the line
    that says `enabled=0`, and change it to `enabled=1`.
  id: totrans-647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have all that straight, let''s get started:'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: Boot up one VM for a server. (That's all you need to do for the server end.)
  id: totrans-649
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the other VM that you''ll use as a client, create a mount-point directory
    within your own home directory, like so:'
  id: totrans-650
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'On the client VM, install the SSHFS client. On Ubuntu, do this:'
  id: totrans-652
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'On CentOS 7, do this:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'On AlmaLinux 8 or 9, do this:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'From the client machine, mount your own home directory that''s on the server:'
  id: totrans-658
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Note that if you don't specify a directory to share, the default is to share
    the home directory of the user account that's being used for logging in.
  id: totrans-660
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Verify that the directory was mounted properly with the `mount` command. You
    should see your new shared mount at the bottom of the output:'
  id: totrans-661
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '`cd` into the `remote` directory and create some files. Verify that they actually
    do show up on the server.'
  id: totrans-663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the local console of the server VM, create some files in your own home directory.
    Verify that they show up in the `remote/` directory of your client VM.
  id: totrans-664
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You've reached the end of the lab – congratulations!
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: 'With this lab, I just showed you how to mount your own home directory from
    a remote server. You can also mount other server directories by specifying them
    in the `sshfs` command. For example, let''s say that I want to mount the `/maggie_files/`
    directory, with the `~/remote3/` directory as my local mount-point. (I chose that
    name because Maggie cat is sitting here in front of me where my keyboard should
    be.) Just do it like this:'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: You can also make the remote directory automatically mount every time you boot
    your client machine by adding an entry to the `/etc/fstab` file. But, that's generally
    not a good idea. If the server isn't available when you boot the client machine,
    it could cause the boot process to hang up.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so you've seen how to use SSHFS to create an encrypted connection with
    a shared remote directory. Let's now log into the server from a Windows desktop
    machine.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: Remotely connecting from Windows desktops
  id: totrans-670
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I know, all of us Penguinistas would like to use Linux, and nothing but Linux.
    But, in an enterprise environment, things just don't always work that way. There,
    you'll most likely have to administer your Linux servers from a Windows 10/11
    desktop machine that's sitting on your cubicle desk. In *Chapter 1*, *Running
    Linux in a Virtual Environment*, I showed you how to use either Cygwin or the
    new Windows 10/11 shell to remotely connect to your Linux VMs. You can also use
    these techniques to connect to actual Linux servers.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: But, some shops require that admins use a terminal program, rather than a full-blown
    Bash Shell such as Cygwin. Normally, these shops will require that you use **PuTTY**
    on your Windows machine.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: 'PuTTY is a free program that you can download from here: [https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html](https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html).'
  id: totrans-673
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Installation is simple. Just double-click the installer file and follow through
    the installer screens:'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file51.png)'
  id: totrans-675
  prefs: []
  type: TYPE_IMG
- en: 'You can open the PuTTY user manual from your Windows 10/11 Start menu:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file52.png)'
  id: totrans-677
  prefs: []
  type: TYPE_IMG
- en: 'Connecting to a remote Linux machine is easy. Just enter the machine''s IP
    address and click on **Open**:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file53.png)'
  id: totrans-679
  prefs: []
  type: TYPE_IMG
- en: 'Note that this also gives you the option to save your sessions. So, if you
    have to administer multiple servers, you can open PuTTY and just click on the
    name of the server that you want to connect to, and then click on **Open**:'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file54.png)'
  id: totrans-681
  prefs: []
  type: TYPE_IMG
- en: As you can see, this is a lot handier than having to manually type in the `ssh`
    command every time you need to log into a server, and it prevents you from having
    to remember a whole list of IP addresses for multiple servers. (But of course,
    you can accomplish the same thing with either Cygwin or a Windows 10 shell by
    creating a login shell script for each Linux machine that you need to administer.)
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: 'Either way, you''ll end up at the remote machine''s Bash Shell:'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file55.png)'
  id: totrans-684
  prefs: []
  type: TYPE_IMG
- en: 'To set up key-exchange authentication, use PuTTYgen to create the key pair.
    The only slight catch is that you''ll have to transfer the public key to the server
    by manually copying and pasting the key into the server''s `authorized_keys` file:'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file56.png)'
  id: totrans-686
  prefs: []
  type: TYPE_IMG
- en: I've given you the basics about PuTTY. You can read the PuTTY manual to get
    the nitty-gritty details.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: Okay, I think that that about wraps things up for our discussion of the Secure
    Shell suite.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-689
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we've seen that a default configuration of Secure Shell isn't
    as secure as we'd like it to be, and we've seen what to do about it. We've looked
    at how to set up key-based authentication and two-factor authentication, and we've
    looked at lots of different options that can lock down the SSH server. We also
    looked at how to disable weak encryption algorithms, and at how the new system-wide
    crypto policies on RHEL 8/CentOS 8 and RHEL 9/AlmaLinux 9 make doing that really
    easy. Along the way, we looked at setting up access controls, and at creating
    different configurations for different users, groups, and hosts. After demoing
    how to confine SFTP users to their own home directories, we used SSHFS to share
    a remote directory. We wrapped up this chapter by presenting a handy way to log
    into our Linux servers from a Windows desktop machine.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: Conspicuous by their absence are a couple of technologies that you may have
    seen recommended elsewhere. Port knocking and Fail2Ban are two popular technologies
    that can help control access to an SSH server. However, they're only needed if
    you allow password-based authentication to your SSH server. If you set up key-based
    authentication, as I've shown you here, you won't need the added complexity of
    those other solutions.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll take an in-depth look at the subject of discretionary
    access control. I'll see you there.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-693
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which of the following statements is true?
  id: totrans-694
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. Secure Shell is completely secure in its default configuration.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: B. It's safe to allow the root user to use Secure Shell to log in across the
    Internet.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: C. Secure Shell is insecure in its default configuration.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: D. The most secure way to use Secure Shell is to log in with a username and
    password.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: Which three of the following things would you do to conform with the best security
    practices for Secure Shell?
  id: totrans-699
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. Make sure that all users are using strong passwords to log in via Secure
    Shell.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: B. Have all users create a public/private key pair, and transfer their public
    keys to the server to which they want to log in.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: C. Disable the ability to log in via username/password.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: D. Ensure that the root user is using a strong password.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: E. Disable the root user's ability to log in.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: Which one of the following lines in the `sshd_config` file will cause botnets
    to not scan your system for login vulnerabilities?
  id: totrans-705
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `PasswordAuthentication no`
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: B. `PasswordAuthentication yes`
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: C. `PermitRootLogin yes`
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: D. `PermitRootLogin no`
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: How would you confine a user of SFTP to his or her own specified directory?
  id: totrans-710
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. Ensure that proper ownership and permissions are set on that user's directory.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: B. In the `sshd_config` file, disable that user's ability to log in via normal
    SSH and define a `chroot` directory for that user.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: C. Define the user's limitations with TCP Wrappers.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: D. Use whole-disk encryption on the server so that SFTP users will only be able
    to access their own directories.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: Which two of the following commands would you use to add your private SSH key
    to your session keyring?
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `ssh-copy-id`
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: B. `exec /usr/bin/ssh-agent`
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: C. `exec /usr/bin/ssh-agent $SHELL`
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
- en: D. `ssh-agent`
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: E. `ssh-agent $SHELL`
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: F. `ssh-add`
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following is *not* on NIST's list of recommended algorithms?
  id: totrans-722
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `RSA`
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: B. `ECDSA`
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: C. `Ed25519`
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following is the correct directive for creating a custom configuration
    for Katelyn?
  id: totrans-726
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `User Match katelyn`
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: B. `Match katelyn`
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: C. `Match Account katelyn`
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: D. `Match User katelyn`
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: When creating a `~/.ssh/config` file, what should the permissions value on that
    file be?
  id: totrans-731
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `600`
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: B. `640`
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: C. `644`
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: D. `700`
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following crypto policies provides the strongest encryption on
    RHEL 8/9-type distros?
  id: totrans-736
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `LEGACY`
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: B. `FIPS`
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: C. `DEFAULT`
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: D. `FUTURE`
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following standards defines NIST's current recommendations for
    encryption algorithms?
  id: totrans-741
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. FIPS 140-2
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: B. FIPS 140-3
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: C. CNSA
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: D. Suite B
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-746
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How to set up SSH keys on Debian 10 Buster: [https://devconnected.com/how-to-set-up-ssh-keys-on-debian-10-buster/](https://devconnected.com/how-to-set-up-ssh-keys-on-debian-10-buster/)'
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How to configure the OpenSSH Server: [https://www.ssh.com/academy/ssh/sshd_config](https://www.ssh.com/academy/ssh/sshd_config)'
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Setting up passwordless SSH: [https://www.redhat.com/sysadmin/passwordless-ssh](https://www.redhat.com/sysadmin/passwordless-ssh)'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenSSH best practices for Unix, Linux, and BSD: [https://www.cyberciti.biz/tips/linux-unix-bsd-openssh-server-best-practices.html](https://www.cyberciti.biz/tips/linux-unix-bsd-openssh-server-best-practices.html)'
  id: totrans-750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Different SSH configurations for different hosts: [https://www.putorius.net/how-to-save-per-user-per-host-ssh-client-settings.html](https://www.putorius.net/how-to-save-per-user-per-host-ssh-client-settings.html)'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SSH Query at Shodan: [https://www.shodan.io/search?query=ssh](https://www.shodan.io/search?query=ssh)'
  id: totrans-752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mozilla OpenSSH Security Guide: [https://infosec.mozilla.org/guidelines/openssh](https://infosec.mozilla.org/guidelines/openssh)'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Execute commands on a remote system over SSH: [https://www.2daygeek.com/execute-run-linux-commands-remote-system-over-ssh/](https://www.2daygeek.com/execute-run-linux-commands-remote-system-over-ssh/)'
  id: totrans-754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CNSA Suite and Quantum Cryptography: [https://cryptome.org/2016/01/CNSA-Suite-and-Quantum-Computing-FAQ.pdf](https://cryptome.org/2016/01/CNSA-Suite-and-Quantum-Computing-FAQ.pdf)'
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FIPS 140-3: [https://csrc.nist.gov/projects/fips-140-3-transition-effort](https://csrc.nist.gov/projects/fips-140-3-transition-effort)'
  id: totrans-756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ChaCha20 and Poly1305: [https://tools.ietf.org/html/rfc7539](https://tools.ietf.org/html/rfc7539)'
  id: totrans-757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'System-wide cryptographic policies on Red Hat Enterprise Linux 8: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening#system-wide-crypto-policies_using-the-system-wide-cryptographic-policies](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening#system-wide-crypto-policies_using-the-system-wide-cryptographic-policies)'
  id: totrans-758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How to log out inactive users in Linux: [https://www.ostechnix.com/auto-logout-inactive-users-period-time-linux/](https://www.ostechnix.com/auto-logout-inactive-users-period-time-linux/)'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure host-specific SSH settings: [https://www.putorius.net/how-to-save-per-user-per-host-ssh-client-settings.html](https://www.putorius.net/how-to-save-per-user-per-host-ssh-client-settings.html)'
  id: totrans-760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How to use SSHFS to mount remote directories over SSH: [https://linuxize.com/post/how-to-use-sshfs-to-mount-remote-directories-over-ssh/](https://linuxize.com/post/how-to-use-sshfs-to-mount-remote-directories-over-ssh/)'
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers
  id: totrans-762
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: C
  id: totrans-763
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B, C, E
  id: totrans-764
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  id: totrans-765
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  id: totrans-766
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C, F
  id: totrans-767
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  id: totrans-768
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-769
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  id: totrans-770
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-771
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  id: totrans-772
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

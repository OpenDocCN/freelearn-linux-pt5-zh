- en: Part III. Porting and Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分. 移植与调试
- en: '[*Porting Apps to Tizen*](ch10.html "Chapter 10. Porting Apps to Tizen")'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[*将应用移植到 Tizen*](ch10.html "第 10 章. 将应用移植到 Tizen")'
- en: '[*Debugging Apps in Tizen*](ch11.html "Chapter 11. Debugging Apps in Tizen")'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[*在 Tizen 中调试应用*](ch11.html "第 11 章. 在 Tizen 中调试应用")'
- en: '[*Porting Tizen to Hardware Devices*](ch12.html "Chapter 12. Porting Tizen
    to Hardware Devices")'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[*将 Tizen 移植到硬件设备*](ch12.html "第 12 章. 将 Tizen 移植到硬件设备")'
- en: Chapter 10. Porting Apps to Tizen
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章. 将应用移植到 Tizen
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Porting web apps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移植 web 应用
- en: Installing the PhoneGap or Cordova SDK
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 PhoneGap 或 Cordova SDK
- en: Creating Tizen web applications with PhoneGap or Cordova
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PhoneGap 或 Cordova 创建 Tizen web 应用
- en: Deploying Cordova and PhoneGap applications to the Tizen device or Emulator
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Cordova 和 PhoneGap 应用部署到 Tizen 设备或模拟器
- en: Bringing Android apps to Tizen
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Android 应用带到 Tizen
- en: Porting the Android UI to Tizen UI Framework
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Android UI 移植到 Tizen UI 框架
- en: Setting Qt for Tizen
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Tizen 设置 Qt
- en: Deploying Qt applications on Tizen
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Tizen 上部署 Qt 应用
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter provides options and hints for porting the existing Web (Firefox
    OS, Chrome OS, webOS, and so on), Android, or Qt apps to Tizen. Tutorials for
    running Android applications on Tizen using the compatibility layer as well as
    for complete porting of Android applications to HTML5 are included.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了将现有的 Web（Firefox OS、Chrome OS、webOS 等）、Android 或 Qt 应用移植到 Tizen 的选项和提示。教程包括如何使用兼容性层在
    Tizen 上运行 Android 应用以及如何将 Android 应用完全移植到 HTML5。
- en: Details about the community port Qt for Tizen that allows deployment of existing
    Qt mobile applications for Android, iOS, MeeGo/Harmattan, Symbian, SailfishOS,
    and BlackBerry 10 on Tizen devices will also be covered in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还将介绍社区移植的 Qt for Tizen，它允许将现有的 Qt 移动应用程序部署到 Android、iOS、MeeGo/Harmattan、Symbian、SailfishOS
    和 BlackBerry 10 设备上。
- en: Tizen is among the supported platforms of the leading developer tool vendors
    such as Marmalade, Appcelerator Titanium, Intel XDK, Project Anarchy, Sencha Touch,
    and many more. The tools and technologies provided by these vendors simplify the
    development process and allow cross-platform compatibility. The latest information
    regarding partner tools for Tizen is available at [https://www.tizen.org/about/partner-tools](https://www.tizen.org/about/partner-tools).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen 是领先开发工具厂商（如 Marmalade、Appcelerator Titanium、Intel XDK、Project Anarchy、Sencha
    Touch 等）支持的平台之一。这些厂商提供的工具和技术简化了开发过程，并支持跨平台兼容性。关于 Tizen 合作伙伴工具的最新信息，请访问 [https://www.tizen.org/about/partner-tools](https://www.tizen.org/about/partner-tools)。
- en: Porting web apps
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移植 web 应用
- en: Web applications are first-class citizens in Tizen as well on several other
    popular mobile platforms such as Firefox OS, webOS, Chrome, and BlackBerry 10\.
    Although it must be clarified that on BlackBerry 10, the native applications are
    created with C++ and Qt/QML. Despite this, BlackBerry WebWorks also provides all
    the required tools to develop and deploy an HTML5 application with a native look
    and feel on BlackBerry 10 devices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Web 应用在 Tizen 中是一级公民，同样在 Firefox OS、webOS、Chrome 和 BlackBerry 10 等多个流行的移动平台上也具有重要地位。虽然需要明确的是，在
    BlackBerry 10 上，本地应用是使用 C++ 和 Qt/QML 创建的。尽管如此，BlackBerry WebWorks 仍然提供了所有必要的工具，用于在
    BlackBerry 10 设备上开发和部署具有原生外观和感觉的 HTML5 应用。
- en: On the other hand, Android and iOS do not provide generic tools for packaging
    HTML5 applications for distribution through application stores. Third-party software
    such as Cordova or PhoneGap can be used to create a hybrid application and to
    deploy HTML5 projects as standalone applications on Android and iOS (iPhone, iPad)
    devices.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Android 和 iOS 并未提供用于通过应用商店分发 HTML5 应用的通用工具。可以使用 Cordova 或 PhoneGap 等第三方软件来创建混合应用，并将
    HTML5 项目部署为 Android 和 iOS（iPhone，iPad）设备上的独立应用。
- en: 'Depending on the technologies and the development tools, we can divide web
    applications for mobile devices into three categories: packaged web applications,
    hosted web applications, and hybrid web applications.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 根据技术和开发工具的不同，我们可以将移动设备上的 web 应用分为三类：打包 web 应用、托管 web 应用和混合 web 应用。
- en: The main focus of this recipe is on hosted web applications. We will go through
    the most common challenges when an HTML5 application built for another platform
    is ported to Tizen. From the subsequent two recipes, you can learn in detail the
    process of setting and porting hybrid (Cordova and PhoneGap) web applications
    to Tizen.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的主要重点是托管的 Web 应用程序。我们将讨论当一个为其他平台构建的 HTML5 应用移植到 Tizen 时，最常见的挑战。在接下来的两个教程中，您可以详细了解将混合（Cordova
    和 PhoneGap）Web 应用移植到 Tizen 的过程。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Before you start porting a web application to Tizen, take a moment and explore
    the existing structure and source code of your application. A good analysis at
    the beginning can save you a lot of time and help you solve issues easily during
    the porting process.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始将 Web 应用移植到 Tizen 之前，请花些时间查看您现有应用的结构和源代码。开始时的良好分析可以节省大量时间，并帮助您在移植过程中轻松解决问题。
- en: 'As you already know, the extension of the Tizen web application installation
    package is `wgt`. Different platforms have different package formats and file
    extensions, as detailed in the following list:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知道的，Tizen Web 应用安装包的扩展名为 `wgt`。不同平台有不同的包格式和文件扩展名，具体见下表：
- en: '`xpi` for Mozilla''s FirefoxOS'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xpi` 用于 Mozilla 的 FirefoxOS'
- en: '`crx` for Google''s Chrome OS'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crx` 用于 Google 的 Chrome OS'
- en: '`ipk` for webOS'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipk` 用于 webOS'
- en: '`bar` for BlackBerry 10'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bar` 用于 BlackBerry 10'
- en: '`xap` for web applications for Windows Phone'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xap` 用于 Windows Phone 的 Web 应用'
- en: 'Each Tizen web application has two mandatory components: a configuration file
    and a main file (`index.html`). Optionally, an icon can be set with the recommended
    filename `icon``.``png` as well as the following directories:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Tizen Web 应用都有两个必需的组件：一个配置文件和一个主文件（`index.html`）。可选地，还可以设置图标，推荐的文件名为 `icon``.``png`，以及以下目录：
- en: '`js` for string JavaScript files'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`js` 用于字符串 JavaScript 文件'
- en: '`css` to store CSS files'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css` 用于存储 CSS 文件'
- en: '`img` to store images'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`img` 用于存储图片'
- en: The configurations are described in the XML file, which has to be called `config.xml`.
    It is possible to set custom names of all of the optional resources at the configuration
    file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 配置在 XML 文件中描述，该文件必须命名为 `config.xml`。可以在配置文件中设置所有可选资源的自定义名称。
- en: If you are using Cordova or PhoneGap, you should not worry because these tools
    will automatically generate an appropriate structure for packaging when you enable
    Tizen support. Otherwise, explore the structure of your existing application and
    locate the corresponding files. You may need to modify them manually to meet the
    requirements for packaging Tizen web applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 Cordova 或 PhoneGap，您不需要担心，因为这些工具会在启用 Tizen 支持时自动生成适当的打包结构。否则，请查看您现有应用程序的结构，并找到相应的文件。您可能需要手动修改它们，以满足打包
    Tizen Web 应用的要求。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following guidelines specify the required actions to port an existing standalone
    web application to Tizen:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下指南指定了将现有独立 Web 应用移植到 Tizen 的必需操作：
- en: Create a `config.xml` file and set all settings as well as any permissions that
    your application needs to work on Tizen devices.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `config.xml` 文件并设置所有设置以及应用程序在 Tizen 设备上运行所需的任何权限。
- en: Note
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are porting an application from Firefox OS, then `config.xml` is equivalent
    to `manifest.webapp`. The name of the configuration file for Chrome applications
    is `manifest.json`. On webOS, it is `appinfo.json`, `package.appxmanifest` on
    Windows Phone applications, and `config.xml` for BlackBerry WebWorks applications.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您正在将应用从 Firefox OS 移植，则 `config.xml` 相当于 `manifest.webapp`。Chrome 应用的配置文件名称为
    `manifest.json`。在 webOS 上为 `appinfo.json`，Windows Phone 应用为 `package.appxmanifest`，BlackBerry
    WebWorks 应用为 `config.xml`。
- en: 'If your applications communicate with a server, specify their domains in the
    configuration file. For example, the following setting allows the Tizen web application
    to access [www.google.com](http://www.google.com):'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的应用程序与服务器通信，请在配置文件中指定其域名。例如，以下设置允许 Tizen Web 应用访问 [www.google.com](http://www.google.com)：
- en: '[PRE0]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Although it is not highly recommended, due to security reasons, you can also
    allow access to any server by adding the following line:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管不推荐，但出于安全原因，您也可以通过添加以下行来允许访问任何服务器：
- en: '[PRE1]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Add any permission that your application needs to use `config.xml`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `config.xml` 中添加您的应用程序所需的任何权限。
- en: Create an icon following the Tizen guideline for icons at [https://developer.tizen.org/documentation/ux-guide/visual-style/icons](https://developer.tizen.org/documentation/ux-guide/visual-style/icons).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照 Tizen 图标指南 [https://developer.tizen.org/documentation/ux-guide/visual-style/icons](https://developer.tizen.org/documentation/ux-guide/visual-style/icons)
    创建一个图标。
- en: Build and run your application on the Tizen device or Emulator. Keep in mind
    that inconsistent behavior and bugs in the user interfaces might appear. Carefully
    test the application. You might need to debug and adjust the HTML, CSS, and JavaScript
    files.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Tizen 设备或模拟器上构建并运行你的应用程序。请记住，用户界面中可能会出现不一致的行为和错误。请仔细测试应用程序。你可能需要调试并调整 HTML、CSS
    和 JavaScript 文件。
- en: See also
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: In general, it is highly recommended to rely only on HTML5 specifications in
    the platform documentation. However, in certain cases, you may find it useful,
    especially for hosted web applications, to compare HTML5 of different platforms
    and their browsers at [http://html5test.com/](http://html5test.com/).
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般来说，强烈建议仅依赖平台文档中的 HTML5 规范。然而，在某些情况下，尤其是对于托管 Web 应用程序，你可能会觉得比较不同平台及其浏览器的 HTML5
    规范有用，具体可以参考 [http://html5test.com/](http://html5test.com/)。
- en: Installing the PhoneGap or Cordova SDK
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 PhoneGap 或 Cordova SDK
- en: 'PhoneGap and Cordova are popular tools for development of cross-platform HTML5
    applications for mobile devices. The main advantage is that multiple mobile platforms
    are targeted with a single code base. All of the most popular mobile operating
    systems are supported: Android, iOS, Windows Phone, BlackBerry 10, and of course
    Tizen. Even older platforms that are not popular nowadays such as Symbian and
    webOS are supported.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: PhoneGap 和 Cordova 是用于开发跨平台 HTML5 移动应用程序的流行工具。其主要优点是通过单一的代码库即可面向多个移动平台。所有最流行的移动操作系统都受到支持：Android、iOS、Windows
    Phone、BlackBerry 10，当然还有 Tizen。即使是如今不再流行的老旧平台，如 Symbian 和 webOS，也受到支持。
- en: Additionally, PhoneGap and Cordova allow web developers to use their existing
    knowledge and to develop high quality mobile applications without learning Java,
    Objective C, or C++.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，PhoneGap 和 Cordova 允许 Web 开发人员利用他们现有的知识，开发高质量的移动应用程序，而无需学习 Java、Objective
    C 或 C++。
- en: Both Cordova and PhoneGap are open source projects. Cordova is available under
    Apache 2.0 License. PhoneGap is a fork of Cordova, and since 2011, it is owned
    and maintained by Adobe. Because of this, sometimes Cordova is referenced as an
    engine behind PhoneGap or as an Adobe distribution of Cordova.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova 和 PhoneGap 都是开源项目。Cordova 在 Apache 2.0 许可下发布。PhoneGap 是 Cordova 的一个分支，自
    2011 年起，由 Adobe 拥有和维护。因此，有时 Cordova 被称为 PhoneGap 背后的引擎，或作为 Adobe 发行版的 Cordova。
- en: The mobile applications developer with PhoneGap and Cordova are bundled as standard
    installation packages that are deployed on mobile devices. For example, installation
    files for Android have the extension `.apk` and for Tizen, it is `.wgt`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PhoneGap 和 Cordova 的移动应用程序开发人员将其捆绑为标准安装包，这些安装包会部署到移动设备上。例如，Android 的安装文件扩展名为
    `.apk`，而 Tizen 的扩展名为 `.wgt`。
- en: In this recipe, you will learn how to install PhoneGap or Cordova and in the
    subsequent recipe, you will learn how to set up and deploy applications for Tizen.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，你将学习如何安装 PhoneGap 或 Cordova，在随后的食谱中，你将学习如何为 Tizen 设置和部署应用程序。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that you have successfully installed Tizen SDK by following the instructions
    in the first chapter. Both PhoneGap and Cordova rely on its tools to build and
    package applications for Tizen. Also make sure that you have installed **npm**
    (Node Package Manager) before proceeding further.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经按照第一章中的说明成功安装了 Tizen SDK。PhoneGap 和 Cordova 都依赖其工具来为 Tizen 构建和打包应用程序。在继续之前，还需要确保你已经安装了**npm**（Node
    包管理器）。
- en: 'If you are using Ubuntu, run the following commands to add a repository for
    Cordova and to ensure that the information for all repositories is up to date:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Ubuntu，请运行以下命令添加 Cordova 的软件库，并确保所有软件库的信息是最新的：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The installation of both Cordova and PhoneGap is very simple. Open a terminal
    and execute the following command to install the latest version of Cordova:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Cordova 和 PhoneGap 非常简单。打开终端并执行以下命令来安装最新版本的 Cordova：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you have probably noticed, both commands contain a parameter, `-g`. It specifies
    that this is a global installation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，两个命令都包含一个参数`-g`。它指定这是一个全局安装。
- en: How it works
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: The installation of both Cordova and PhoneGap is done through Node Package Manager,
    which is a software for management of Node.js packages. It is written entirely
    using JavaScript and the Node.js platform.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova 和 PhoneGap 的安装是通过 Node 包管理器完成的，Node 包管理器是用于管理 Node.js 包的软件。它完全使用 JavaScript
    和 Node.js 平台编写。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Node.js and npm are open source projects. Node.js is available under MIT license,
    but it is provided bundled with components under other open source licenses. The
    source code of Node Package Manager is available under the Apache License 2.0.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 和 npm 是开源项目。Node.js 在 MIT 许可证下提供，但它与其他开源许可证下的组件一起捆绑提供。Node 包管理器的源代码可以在
    Apache 许可证 2.0 下获取。
- en: See also
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The following recipes provide instructions on how to integrate PhoneGap and/or
    Cordova with the Tizen SDK as well as how to create and deploy applications to
    Tizen.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下食谱提供了如何将 PhoneGap 和/或 Cordova 与 Tizen SDK 集成的说明，并介绍了如何创建和部署应用程序到 Tizen。
- en: Creating Tizen web applications with PhoneGap or Cordova
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PhoneGap 或 Cordova 创建 Tizen Web 应用程序
- en: In this recipe, you will learn how to create web applications for Tizen with
    PhoneGap and Cordova through the Tizen IDE.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将学习如何通过 Tizen IDE 使用 PhoneGap 和 Cordova 创建 Tizen 的 Web 应用程序。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that you have already installed the Tizen SDK as well as Cordova or
    PhoneGap. Instructions on the Tizen SDK installation are available in the first
    chapter of the book. Tutorials for setting up Cordova and PhoneGap are provided
    in the previous recipe.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您已经安装了 Tizen SDK 以及 Cordova 或 PhoneGap。有关 Tizen SDK 安装的说明请参见本书的第一章。关于设置 Cordova
    和 PhoneGap 的教程，请参考之前的食谱。
- en: 'Version 3.5 or older of both Cordova and PhoneGap do not provide support for
    Tizen of the command-line-interface (CLI). Several of the provided with Cordova
    and PhoneGap sample applications are used as templates to create Tizen projects.
    Ensure that you have these samples on your computer. You can obtain their latest
    version from the Apache public Git server. Type the following command to clone
    them on your computer:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova 和 PhoneGap 版本 3.5 或更早的版本不支持 Tizen 的命令行界面（CLI）。通过 Cordova 和 PhoneGap
    提供的一些示例应用程序被用作模板来创建 Tizen 项目。请确保您在计算机上拥有这些示例。您可以从 Apache 公共 Git 服务器获取它们的最新版本。输入以下命令将它们克隆到您的计算机上：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to create a Cordova or PhoneGap application for Tizen using
    the Tizen IDE:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤，使用 Tizen IDE 为 Tizen 创建 Cordova 或 PhoneGap 应用程序：
- en: Launch the Tizen IDE.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Tizen IDE。
- en: Navigate to **File | Import | Tizen Web Project** and click on **Next**.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **文件 | 导入 | Tizen Web 项目**，然后点击 **下一步**。
- en: Click on **Browse...** to browse the root directory of a sample Cordova project.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **浏览...** 浏览示例 Cordova 项目的根目录。
- en: Select **Copy projects into workspace**:![How to do it...](img/1908OS_10_01.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **将项目复制到工作区**：![如何操作...](img/1908OS_10_01.jpg)
- en: Importing a Cordova sample application into the Tizen IDE
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 Cordova 示例应用程序导入 Tizen IDE
- en: Click on **Finish**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **完成**。
- en: How it works
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: The main purpose of projects such as Cordova and PhoneGap is to provide easy-to-use
    tools for development of mobile applications with the web technologies HTML, CSS,
    and JavaScript. Web applications are first class citizens in Tizen, so it is a
    very appropriate platform for Cordova and PhoneGap projects as well.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova 和 PhoneGap 等项目的主要目的是提供易于使用的工具，以使用 Web 技术 HTML、CSS 和 JavaScript 开发移动应用程序。Web
    应用程序是 Tizen 中的第一类公民，因此它是一个非常适合 Cordova 和 PhoneGap 项目的平台。
- en: The Tizen IDE can be used directly to import, develop, debug, and deploy Cordova
    or PhoneGap applications. On the third step of the preceding tutorial, the sample
    Cordova application is used as a template. It is important to make sure that the
    **Copy project into workspace** option is checked as described in the fourth step.
    The IDE will duplicate the application and save it in the current workspace.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen IDE 可以直接用于导入、开发、调试和部署 Cordova 或 PhoneGap 应用程序。在前面教程的第三步中，示例 Cordova 应用程序被用作模板。重要的是要确保在第四步中所述的
    **将项目复制到工作区** 选项已被勾选。IDE 将复制该应用程序并将其保存在当前工作区。
- en: See also
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Have a look at the next recipe to learn how to deploy applications created with
    Cordova or PhoneGap to the Tizen device or Emulator. Have a look at the official
    documentation of PhoneGap for more details on Tizen applications at [http://docs.phonegap.com/en/edge/guide_platforms_tizen_index.md.html#Tizen%2520Platform%2520Guide](http://docs.phonegap.com/en/edge/guide_platforms_tizen_index.md.html#Tizen%2520Platform%2520Guide).
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看下一个配方，了解如何将使用 Cordova 或 PhoneGap 创建的应用程序部署到 Tizen 设备或模拟器。查看 PhoneGap 的官方文档，了解更多关于
    Tizen 应用程序的详细信息，[http://docs.phonegap.com/en/edge/guide_platforms_tizen_index.md.html#Tizen%2520Platform%2520Guide](http://docs.phonegap.com/en/edge/guide_platforms_tizen_index.md.html#Tizen%2520Platform%2520Guide)。
- en: Deploying Cordova and PhoneGap applications to the Tizen device or Emulator
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Cordova 和 PhoneGap 应用程序部署到 Tizen 设备或模拟器
- en: After creating or importing a new or existing Cordova/PhoneGap application into
    the workspace Tizen IDE, it is time to deploy it. In this recipe, you will learn
    how to use the options of the Tizen IDE to deploy a Cordova or PhoneGap application
    to a Tizen device or Emulator.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Tizen IDE 工作空间中创建或导入新的或现有的 Cordova/PhoneGap 应用程序后，是时候部署它了。在本配方中，你将学习如何使用 Tizen
    IDE 的选项将 Cordova 或 PhoneGap 应用程序部署到 Tizen 设备或模拟器。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'My preferred way for building and deploying Cordova application on an Android
    device or Emulator is by typing in the console the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我首选的在 Android 设备或模拟器上构建和部署 Cordova 应用程序的方法是通过控制台输入以下命令：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Unfortunately, at the time of the writing of this book, the command-line interface
    (CLI) was not available for Tizen in both PhoneGap and Cordova. As you can see,
    regarding these circumstances, the easiest way to develop and deploy Cordova or
    PhoneGap applications for a Tizen device or Emulator is through the user interface
    of the IDE.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在写这本书时，Tizen 的命令行界面（CLI）在 PhoneGap 和 Cordova 中都不可用。如你所见，考虑到这些情况，开发和部署 Cordova
    或 PhoneGap 应用程序到 Tizen 设备或模拟器的最简单方法是通过 IDE 的用户界面。
- en: Before you proceed, make sure that you have connected a Tizen device to your
    computer or you have launched a Tizen Emulator on it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，确保你已将 Tizen 设备连接到计算机，或者在计算机上启动了 Tizen 模拟器。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these simple instructions to deploy and run your Cordova or PhoneGap
    application on a Tizen Emulator:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些简单的指示，将 Cordova 或 PhoneGap 应用程序部署并运行在 Tizen 模拟器上：
- en: Navigate to the **Project Explorer** view in the Tizen IDE.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Tizen IDE 中导航到 **项目资源管理器** 视图。
- en: Right-click on the project.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击项目。
- en: Navigate to **Run As** | **Tizen Web Simulator Application**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至 **以此方式运行** | **Tizen Web 模拟器应用程序**。
- en: 'The process for deployment of the application on a real device is almost the
    same. Make sure that the Tizen device is successfully connected to the computer
    and perform the following actions to run the application:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实设备上部署应用程序的过程几乎相同。确保 Tizen 设备已成功连接到计算机，然后执行以下操作以运行应用程序：
- en: Navigate to the **Project Explorer** view in the Tizen IDE.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Tizen IDE 中导航到 **项目资源管理器** 视图。
- en: Right-click on the right mouse button over the project.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目上右键点击鼠标右键。
- en: Navigate to **Run As** | **Tizen Web Application**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至 **以此方式运行** | **Tizen Web 应用程序**。
- en: How it works
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: The Tizen IDE is convenient for manual work but it might be an obstacle if you
    want to create continuous integration and testing of a Tizen web application created
    with Cordova and PhoneGap. The Tizen IDE relies on Tizen-centric tools such as
    SDB to deploy the application. In rare cases, when you have to deploy the application
    through the console instead of typing `cordova run`, use `sdb install` followed
    by the full name of the `wgt` file of the application.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen IDE 适合手动操作，但如果你想创建持续集成并测试使用 Cordova 和 PhoneGap 创建的 Tizen Web 应用程序，它可能会成为障碍。Tizen
    IDE 依赖于以 Tizen 为中心的工具，如 SDB 来部署应用程序。在极少数情况下，当你需要通过控制台而不是输入 `cordova run` 来部署应用程序时，使用
    `sdb install`，然后输入应用程序 `wgt` 文件的完整名称。
- en: See also
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: If you are looking for options on how to deploy a Cordova or PhoneGap application
    on the Tizen device and Emulator through the console, refer to the recipe about
    Smart Development Bridge in the first chapter of the book for more details about
    SDB usage.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在寻找如何通过控制台将 Cordova 或 PhoneGap 应用程序部署到 Tizen 设备和模拟器的选项，请参阅本书第一章中的 Smart
    Development Bridge 配方，以了解更多关于 SDB 使用的细节。
- en: Bringing Android apps to Tizen
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Android 应用程序移植到 Tizen
- en: The Tizen smartphone has similar capabilities and hardware buttons as Android
    devices. The user interface of Tizen smartphones manufactured by Samsung is similar
    to TouchWiz—the frontend touch interface of the existing Samsung devices powered
    by Android
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen智能手机的功能和硬件按钮与安卓设备相似。由三星制造的Tizen智能手机的用户界面与TouchWiz相似——这是现有三星安卓设备的前端触摸界面。
- en: Android has been ruling the smartphone market for several years and millions
    of Android mobile applications exist. Several alternative platforms such as BlackBerry
    10 and SailfishOS offer runtime for running an Android application. The same approach
    allows us to run Android applications on Tizen as well. The most popular solution
    in the Tizen ecosystem is the **Application Compatibility Layer** (**ACL**) provided
    by OpenMobile. In this recipe, the basic steps that are required to get started
    with ACL will be revealed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓已经在智能手机市场占据主导地位多年，数以百万计的安卓应用存在。像BlackBerry 10和SailfishOS这样的替代平台提供了运行安卓应用的运行时环境。相同的方式也能让我们在Tizen上运行安卓应用。Tizen生态系统中最流行的解决方案是OpenMobile提供的**应用兼容层**（**ACL**）。在本教程中，将揭示开始使用ACL所需的基本步骤。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Please prepare the `APK` (application package file) file of your Android application.
    Make sure that you have a valid bank account or a PayPal account if you plan to
    submit a paid application.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请准备好您的安卓应用的`APK`（应用程序包文件）。如果您计划提交付费应用，请确保您拥有有效的银行账户或PayPal账户。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to sign up for OpenMobile Developer Program and to
    port your Android applications to Tizen using their services:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明注册OpenMobile开发者计划，并通过他们的服务将您的安卓应用移植到Tizen：
- en: Visit the website OpenMobile and register as an AppMall content provider at
    [http://www.openmobileww.com/#!content-provider-registration/cuwc](http://www.openmobileww.com/#!content-provider-registration/cuwc).
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问OpenMobile网站并注册成为AppMall内容提供商：[http://www.openmobileww.com/#!content-provider-registration/cuwc](http://www.openmobileww.com/#!content-provider-registration/cuwc)。
- en: You will receive an e-mail with your username and password within 24 hours.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在24小时内收到包含用户名和密码的电子邮件。
- en: After receiving the e-mail, log in to [http://manager.openmobileappmall.com](http://manager.openmobileappmall.com).
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收到电子邮件后，登录到[http://manager.openmobileappmall.com](http://manager.openmobileappmall.com)。
- en: Click on the **Profile** form and enter your preferred payment methods. Payments
    through PayPal and wire transfer are supported.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**个人资料**表单，输入您偏好的支付方式。支持通过PayPal和银行转账进行支付。
- en: Go to **My Apps** and click on **Add App**:![How to do it...](img/1908OS_10_02.jpg)
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**我的应用**并点击**添加应用**：![如何操作...](img/1908OS_10_02.jpg)
- en: Add new application to OpenMobile AppMall
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向OpenMobile AppMall添加新应用
- en: Fill all the details in the **Overview** tab.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**概述**标签页中填写所有详细信息。
- en: Go to the tab **Version / Files** and upload your Android application:![How
    to do it...](img/1908OS_10_03.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**版本 / 文件**标签页，上传您的安卓应用程序：![如何操作...](img/1908OS_10_03.jpg)
- en: Uploading the APK file
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上传APK文件
- en: How it works
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: The Application Compatibility Layer of OpenMobile is based on Google's **Android
    Open Source Project** (**AOSP**). Based on this, the ACL integrates the graphical
    stacks, the media, the **Inter-Process Communication** (**IPC**) and notifications
    of Android applications with Tizen. Using ACL, Android applications can be launched
    from the Tizen desktop just like any other Tizen web or native application. Just
    like all other applications, the Android applications on Tizen are also shown
    in the Task Manager of the operating system.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: OpenMobile的应用兼容层基于Google的**Android开源项目**（**AOSP**）。基于此，ACL集成了安卓应用的图形堆栈、媒体、**进程间通信**（**IPC**）和通知系统与Tizen的兼容性。通过使用ACL，安卓应用可以像其他Tizen的网页或本地应用一样从Tizen桌面启动。与其他应用一样，Tizen上的安卓应用也会显示在操作系统的任务管理器中。
- en: OpenMobile will convert your `apk` to `tpk`, validate, and publish it to Tizen
    Store. OpenMobile will also sign `tpk` and handles the whole administration of
    the application at Tizen Store Seller Office. Application download reports as
    well as revenues will be shared with the developer regularly.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: OpenMobile会将您的`apk`转换为`tpk`，进行验证，并发布到Tizen商店。OpenMobile还会对`tpk`进行签名，并在Tizen商店卖家办公室处理应用程序的全部管理工作。应用下载报告以及收入将定期与开发者共享。
- en: See also
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: More information and details regarding the terms of use of OpenMobile are available
    at [http://www.openmobileww.com/](http://www.openmobileww.com/).
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多有关OpenMobile使用条款的信息和详情请访问[http://www.openmobileww.com/](http://www.openmobileww.com/)。
- en: Porting an Android UI to Tizen UI Framework
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Android UI 移植到 Tizen UI 框架
- en: The information provided in this recipe will be useful if you decide to port
    an Android application to a Tizen web application. Pay attention that a lot of
    development will be required because you will have to rewrite from scratch your
    Java code to HTML5 and JavaScript. This chapter provides an overview and comparison
    of Android and Tizen widgets. It should be a good starting point for developers
    who intend to port Android applications.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 本文提供的信息在你决定将 Android 应用移植到 Tizen Web 应用时会非常有用。请注意，由于你需要将 Java 代码重写为 HTML5 和
    JavaScript，因此需要大量开发工作。本章概述并比较了 Android 和 Tizen 组件，应该是计划移植 Android 应用程序的开发人员的一个良好起点。
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The complete port of an application developed with Android SDK to HTML5 requires
    a lot of work and the following actions must be performed:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用 Android SDK 开发的应用完全移植到 HTML5 需要大量的工作，必须执行以下操作：
- en: Completely rewrite the user interface using HTML5.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完全使用 HTML5 重写用户界面。
- en: Port the existing Java source code to JavaScript.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的 Java 源代码移植到 JavaScript。
- en: 'Build and debug the application on the Tizen device or Emulator. The following
    is a list of the most popular Android UI components from the Java package `android.widget`
    and brief instructions on how to replace them in a Tizen web application, which
    relies on Tizen Web UI Framework:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Tizen 设备或模拟器上构建和调试应用。以下是 Android UI 组件（来自 Java 包 `android.widget`）的常见组件列表，以及如何在
    Tizen Web 应用中使用 Tizen Web UI Framework 替代它们的简要说明：
- en: '`Button`: Tizen Web UI Framework offers a widget with the same name and behavior.
    There are several ways to create it. Here is an approach using the `a` element
    and `data-role="button"`:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Button`：Tizen Web UI Framework 提供了一个同名且具有相同行为的组件。创建它有几种方法。以下是使用 `a` 元素和 `data-role="button"`
    的一种方法：'
- en: '[PRE6]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`EditText`: This is an editable text field. In Tizen web applications, the
    same user experience for gathering information from the user can be achieved using
    text inputs, for example:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EditText`：这是一个可编辑的文本框。在 Tizen Web 应用中，收集用户信息时可以通过文本输入字段获得相同的用户体验，例如：'
- en: '[PRE7]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`CheckBox`: Both the Tizen UI framework and jQuery Mobile offer a component
    `Checkbox`, which allows to replace the Android component in an HTML5 application.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CheckBox`：Tizen UI 框架和 jQuery Mobile 都提供了 `Checkbox` 组件，可以在 HTML5 应用中替代 Android
    组件。'
- en: '`ToggleButton`: This type of button allows the user to quickly change a setting
    from one state to another. Notice that only two states are allowed. Tizen Web
    UI Framework offers the same feature at the component Flip Toggle Switch. It can
    be created as shown in the following code snippet:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ToggleButton`：这种按钮允许用户快速在两种状态之间切换。请注意，只允许两种状态。Tizen Web UI Framework 提供了一个相同功能的组件——Flip
    Toggle Switch。它可以通过以下代码片段创建：'
- en: '[PRE8]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`Spinner`: This Java class provides a component for quick selection of a value
    from a list in Android. In an HTML5 application, it can be replaced with a `select`
    component with multiple options.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Spinner`：这个 Java 类提供了一个组件，用于在 Android 中快速从列表中选择一个值。在 HTML5 应用中，可以用 `select`
    组件和多个选项来替代它。'
- en: '`DatePicker` and `TimePicker`: Tizen Web UI Framework offers the following
    widgets for gathering user input about date and time: Date Picker, Time Picker,
    and Date Time Picker. For example, a Tizen widget for date selection can be achieved
    with the following HTML:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DatePicker` 和 `TimePicker`：Tizen Web UI Framework 提供了以下组件，用于收集用户关于日期和时间的输入：日期选择器、时间选择器和日期时间选择器。例如，Tizen
    的日期选择组件可以通过以下 HTML 实现：'
- en: '[PRE9]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![How to do it...](img/1908OS_10_04.jpg)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/1908OS_10_04.jpg)'
- en: A sample Tizen web application with date picker
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个带有日期选择器的示例 Tizen Web 应用
- en: '`Toast`: In Android, this component is used to show messages to the user in
    a small pop up, which does not require any interaction. In Tizen web applications,
    it can be replaced by the `Notification` widget.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Toast`：在 Android 中，这个组件用于向用户展示消息，以小弹窗的形式，不需要任何交互。在 Tizen Web 应用程序中，可以用 `Notification`
    组件来替代它。'
- en: '`AlertDialog`: This pop up widget should be used in Tizen web applications
    as a replacement of the `AlertDialog` in Android. Use a `div` element with the
    attribute `data-role="popup"` to create it.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AlertDialog`：这个弹出组件应该在 Tizen Web 应用程序中用来替代 Android 中的 `AlertDialog`。使用带有属性
    `data-role="popup"` 的 `div` 元素来创建它。'
- en: How it works
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: After creating the user interface with HTML, you will need to rewrite the logic
    of the application. The following is a comparison between a Java code snippet
    for handling button clicks in an Android application and a JavaScript code for
    the same use case in Tizen web applications.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 HTML 创建用户界面后，你需要重写应用程序的逻辑。以下是一个对比，展示了在 Android 应用中处理按钮点击的 Java 代码片段与在 Tizen
    Web 应用中处理相同用例的 JavaScript 代码。
- en: 'The sample Java source code from Android applications handles button clicks
    with the ID `myBtn`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Android 应用的示例 Java 源代码处理 ID 为 `myBtn` 的按钮点击事件：
- en: '[PRE10]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following JavaScript code handles the `click` event of a button with the
    ID `myBtn`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 JavaScript 代码处理 ID 为 `myBtn` 的按钮的 `click` 事件：
- en: '[PRE11]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, the concept is the same but there are major differences in the
    syntax because of the nature of the Java and JavaScript programming languages.
    In both cases, the button has ID myBtn and from a user's perspective, a click
    on it in the Tizen web application will work just like the one in the Android
    application.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，概念是相同的，但由于 Java 和 JavaScript 编程语言的特性，语法上有很大的差异。在这两种情况下，按钮的 ID 都是 myBtn，从用户的角度看，点击
    Tizen Web 应用中的按钮与点击 Android 应用中的按钮效果是一样的。
- en: See also
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Refer to [Chapter 3](ch03.html "Chapter 3. Building a UI"), *Building a UI*,
    as well as the official Tizen documentation to explore the widgets provided by
    Tizen Web UI Framework. A list of all available widgets is available at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_reference.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_reference.htm).
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅 [第 3 章](ch03.html "第 3 章：构建用户界面")，*构建用户界面*，以及官方 Tizen 文档，探索 Tizen Web UI
    框架提供的小部件。所有可用小部件的列表可以在 [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_reference.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.uiwidget.apireference/html/widgets/widget_reference.htm)
    找到。
- en: Setting Qt for Tizen
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Qt for Tizen
- en: '**Qt** is a popular cross-platform framework for development of applications,
    primarily fascinating graphical user interfaces. The main programming languages
    are C++ and QML but other programming languages such as Python can also be used
    through language bindings.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**Qt** 是一个流行的跨平台应用程序开发框架，主要用于开发迷人的图形用户界面。主要的编程语言是 C++ 和 QML，但通过语言绑定也可以使用其他编程语言，如
    Python。'
- en: The Qt project has a long story. Its development started in 1991 in Sweden and
    until 2008, the framework was developed by Trolltech. After that, Nokia bought
    Qt. Initially, Qt was available under commercial and GPL licenses. In 2009, Qt
    also became available under LGPL. Two years later, Nokia sold the commercial licensing
    business with Qt to Digia.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 项目有着悠久的历史。它的开发始于 1991 年的瑞典，直到 2008 年，该框架由 Trolltech 开发。之后，诺基亚收购了 Qt。最初，Qt
    仅提供商业和 GPL 许可。2009 年，Qt 也开始提供 LGPL 许可。两年后，诺基亚将 Qt 的商业许可业务出售给了 Digia。
- en: The latest major version of the project is Qt 5 and it was released at the end
    of 2012\. A year later, Tomasz Olszak and Jarosław Staniek founded an open source
    project for porting Qt 5 to Tizen. I am proud that Philippe Coval, who is a reviewer
    of this book, and, I were among the first contributors of the project and we were
    able to help the leading developer of the project, Tomasz Olszak, with the testing
    of Qt for Tizen on different reference devices and code reviews.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的最新主要版本是 Qt 5，它于 2012 年底发布。一年后，Tomasz Olszak 和 Jarosław Staniek 创建了一个开源项目，旨在将
    Qt 5 移植到 Tizen。我很自豪，作为本书的评审，**Philippe Coval** 和我也是该项目的首批贡献者之一，我们能够帮助项目的主要开发者
    Tomasz Olszak 在不同的参考设备上进行 Qt for Tizen 的测试以及代码审查。
- en: In this recipe, you will learn how to install and configure the development
    environment to build Qt applications for Tizen mobile devices.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中，你将学习如何安装和配置开发环境，以便为 Tizen 移动设备构建 Qt 应用程序。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The tutorial provided in this recipe has been tested only on Ubuntu. Ensure
    that you have fulfilled the following four requirements before proceeding with
    the next section of the recipe.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程仅在 Ubuntu 上进行过测试。在继续下一个部分之前，请确保你已经满足以下四个要求。
- en: Ensure that you have successfully installed Tizen SDK. The process for setting
    up Qt for Tizen requires Qt to be built from source and to install Qt Creator
    so please make sure that you have at least 5 GB free disk space.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你已成功安装 Tizen SDK。设置 Qt for Tizen 需要从源代码构建 Qt，并安装 Qt Creator，因此请确保至少有 5 GB
    的空闲磁盘空间。
- en: 'Run `apt-get` and make sure that the packages from the following long list
    are installed because they are needed to build Qt:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Install GBS. The first step you should do is to add a Tizen repository that
    corresponds to your distribution to `/etc/apt/sources.list`. After that, run the
    following commands:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: An up-to-date installation guide for Tizen development tools is available at
    [https://source.tizen.org/documentation/developer-guide/getting-started-guide/installing-development-tools](https://source.tizen.org/documentation/developer-guide/getting-started-guide/installing-development-tools).
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure that you have a valid author certificate. Please refer to the recipe
    *Setting Active Secure Profile* from the first chapter for more details.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following instructions explain how to install Tizen development tools, build
    Qt from source, install Qt Creator, and to set up the Tizen plugin for it.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory to store the source code of Qt.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the source code to your computer by cloning it from the Git repository
    of the project:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Go to the desktop directory and build Qt:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Replace the number of threads with a number that matches the count of cores
    of the processor.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Alternatively, you can include the following commands, which will retrieve
    the number of cores automatically:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`MAX_THREAD=$(grep ''Core'' /proc/cpuinfo | wc -l ) ./downloadAndBuildAll.sh`'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to the `emulator` directory and prepare the emulator of Qt for Tizen:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Change the current directory again but this time to directory mobile. Prepare
    Qt to make Tizen run on devices:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Visit [http://qt-project.org/downloads#qt-creator](http://qt-project.org/downloads#qt-creator)
    and download Qt Creator.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install Qt Creator. On Linux, the installation can be started through the command
    line using the following command:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Build the Tizen plugin for Qt Creator:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There's more...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to integrate the Tizen SDK into Qt Creator:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Launch Tizen **Emulator Manager**.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch Qt Creator.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Tools** | **Options**.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Tizen**.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Tizen SDK Path**, click on **Browse** to find Tizen SDK installation
    directory, and after that click on **OK**.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Author certificate** and again click on **Browse** to select a
    certificate. The default path for storing author certificates on Linux is `$HOME/tizen-sdk-data/keystore/author/`.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the password of the certificate.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You are almost done. Now, you have to configure the Tizen Emulator for Qt Creator:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Devices** from the **Options** dialog and select **tizen**.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the name that will help you in future to easily distinguish that this is
    Tizen Emulator.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From **Options**, go to **Build & Run**, select the tab **Qt Versions** and
    click on **Add**.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **qmake** for Tizen Emulator builds and click on **Apply**. By default,
    the path should be `$HOME/dev/src/tizenbuildtools/emulator/qt5CrossCompileTools/bin/qmake`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the tab **Kits**, click on **Add**, and type the appropriate name, for
    example, `Tizen Emulator`.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add**.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Tizen Device** as a **Device type**, **Tizen GCC (x86)** for the **Compiler**,
    and the Qt version for Emulator in the **Qt Version** field.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Apply**.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The development of Qt for Tizen is entirely transparent. To get in contact with
    Tomasz, Jarosław or any other contributor, please use the communication channels
    described at [http://qt-project.org/wiki/Tizen](http://qt-project.org/wiki/Tizen).
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on building Qt for Tizen, refer to the latest version of
    the official guidelines at Qt's wiki [http://qt-project.org/wiki/Build-Qt-for-Tizen](http://qt-project.org/wiki/Build-Qt-for-Tizen).
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Qt applications on Tizen
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will explain how to prepare, build, and deploy Qt application on
    Tizen Emulator or devices.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start, ensure that you have successfully set up Qt for Tizen on your
    computer. As we already discussed at the beginning of the book for Tizen, smartphones
    support both native applications created with C++ and extension `.tpk`, as well
    as web applications with extension `.wgt`. Qt is a framework based on C++, so
    the port for Tizen relies on the tools for `.tpk` files.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these step-by-step instructions to develop new or port existing Qt applications
    to Tizen using Qt Creator:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory with the name `tizen` in the project of your Qt application.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `manifest.xml` from the `helloworld` project, which is provided with `qtquickcontrols-tizen`
    to the directory that you have created in the previous step.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit `manifest.xml` and set the application ID in it.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `.pro` file of the application and enable Tizen support by adding
    the following rules:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open `main.cpp` and implement the following source code for the method `OspMain()`,
    which is the entry point for Tizen native applications:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe has been tested on the Tizen mobile profile. It will not work on
    Tizen IVI and other profiles on which native application development is not present.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the application and deploy it to Tizen Emulator or device through Qt Creator.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `helloworld` application provided with `qtquickcontrols-tizen` is used as
    a template. Actually, the first step of this recipe is almost the same as the
    first step for creating Tizen applications with Cordova or PhoneGap. Although
    these technologies create web applications, the first step for them is to import
    and use a sample application as a template.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: The second and the third steps are dedicated to `manifest.xml`. This is a configuration
    file. Each Tizen native application must have just a single manifest file that
    must comply with the XML standard.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: The next step is again dedicated to editing the configuration file. The `.pro`
    extension is specific for the project files of Qt applications. This file must
    contain all the information required by **qmake** to build the application.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: In the fifth step, the method that acts as an entry point of Tizen native applications
    is instructed to run the main method of the Qt application. All arguments provided
    to `OspMain()` are provided to `main()`. The prefix of `OspMain()` stands for
    Open Service Platform and its origins lead to Bada that was merged into Tizen
    2.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tomasz Olszak, the co-founder and the leading developer of Qt for Tizen, maintains
    an article at Qt wiki about development of Qt applications for Tizen. For more
    information, visit [http://qt-project.org/wiki/Creating-Hello-World-Application](http://qt-project.org/wiki/Creating-Hello-World-Application).
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tutorials and documentation related to Qt 5 are available at [http://qt-project.org/](http://qt-project.org/).
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A good starting point if you are not familiar with QML is [http://qt-project.org/doc/qt-5/qml-tutorial.html](http://qt-project.org/doc/qt-5/qml-tutorial.html).
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 11. Debugging Apps in Tizen
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Running an application in Tizen Web Simulator
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an application in Tizen Emulator
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an application on a device
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging in Tizen Web Simulator
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging in Tizen Emulator
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging on a device
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Samsung Remote Test Lab
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking JavaScript bugs
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with QUnit
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quality assurance is among the most important processes during the development
    of an application because it ensures less issues and better user experience for
    end users. A lot of great mobile applications have failed to achieve commercial
    success due to bugs. Even if an application has a great user interface and offers
    good user experience, it is not enough to be sure that it will be successful.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: In general, users have low tolerance to bugs. A user might never open your application
    again if it has crashed just once.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter bring ideas and tutorials on how to test applications
    and to provide good quality. In this chapter, you will learn about how to run
    and debug Tizen applications, as well as exploring JavaScript unit testing of
    web applications.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also includes a recipe on Samsung **Remote Test Lab** (**RTL**)
    with a tutorial on how to deploy and test applications on physical Tizen devices
    located remotely. Although there is no separate recipe for Selenium, you might
    consider using this tool for functional and user acceptance testing of web applications
    compatible with Tizen. To get started with it, please visit [http://www.seleniumhq.org/](http://www.seleniumhq.org/).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Running an application in Tizen Web Simulator
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should be already familiar with Tizen Web Simulator for web applications,
    which was revealed in the first chapter of this book. In this recipe, you will
    learn in detail how to use it.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Tizen web application can be launched in the simulator from the Tizen IDE.
    All you have to do has been explained in the first chapter of the book, but it
    is summarized here:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Select the project in the **Project Explorer** view. Right-click on the project
    to activate the context menu and navigate to **Run As** | **Tizen Web Simulator
    Application**.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to the **Run** menu of the Tizen IDE and navigate to **Run As** | **Tizen
    Web Simulator Application**.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatively, just click on the **Run** button from the toolbar of the Tizen
    IDE.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is possible to configure the device information and the system settings
    of the simulator. Follow these instructions to configure the Simulator:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Simulator using any of the three available options.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Configuration** button in the right-upper corner of the Simulator.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the device, system, and network settings, as shown in the following screenshot:![How
    to do it...](img/1908OS_11_01.jpg)
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuration settings of Tizen Web Simulator
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Furthermore, you can adjust the visible panels by clicking on the **Panel Settings**
    button that is located next to the **Configuration** button.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tizen Web Simulator offers numerous panels to simulate various events. These
    are the available panels listed in their order of appearance in the simulator:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '**Orientation and zooming**: This panel allows you to change the orientation
    of the simulator from portrait to landscape and vice versa. As an additional feature,
    you can adjust the zoom level from the same panel.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System summary**: This panel provides basic information about the system
    and the application.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notification**: A list of the received notifications is available in this
    panel.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sensors**: This panel is extremely valuable for the simulation of events
    related to the accelerometer and the gyroscope. It offers options for the adjustment
    of the position of the device as well as to the simulator.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geolocation**: This panel is used for setting the current time zone, location,
    and routes. It is useful for testing location-based Tizen web applications without
    a real GPS device in the simulator.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application configuration**: This panel shows information regarding the application
    configuration and its installation package. Basically, it displays the content
    of the `config.xml` file.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Communications**: From this panel, the developer can simulate the handling
    of calls and messages as well as reception of push notifications.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Power manager**: This panel changes the battery level and simulates low battery.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network management**: This panel controls the network units of the simulator:
    NFC, Bluetooth, Wi-Fi, and cellular network.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download**: This panel manages the download resources of the simulator.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packages and applications**: This panel shows the list of installed packages
    and applications on the simulator. Furthermore, this panel provides the capability
    to delete the installed package or application.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Specifications of all available features of the simulator can be found at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/ide_sdk_tools/simulator_features.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/ide_sdk_tools/simulator_features.htm).
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an application in Tizen Emulator
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using this recipe, you will recall how to launch Tizen Emulator and you will
    learn how to run applications and to simulate events using **Event Injector**.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A couple of options are available to start Tizen Emulator. Both of them have
    already been presented in the first chapter of the book with instructions on how
    to create a virtual Tizen device. Before you proceed, make sure that you have
    already set a virtual machine.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to start Tizen Emulator from a user''s point of view is using
    the Emulator Manager. The following is a quick recap of the required actions:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Start the application Tizen Emulator, which comes with the installation of the
    Tizen SDK.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the desired configuration and click on the **Play** button to launch
    it.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An alternative option for launching Tizen Emulator is to type the following
    command in the terminal:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once the emulator is running, you can install and launch the Tizen application
    in it directly from the Tizen IDE. There are three ways to do this. Pick the one
    that suits you the best:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Project Explorer** view, open a project, right-click on it, and navigate
    to **Run As | Tizen Web Application**
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate to the **Run** menu in the Tizen IDE and navigate to **Run As** | **Tizen
    Web Application**
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **Run** button in the toolbar of the Tizen IDE
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While your application is running on the emulator, you can simulate various
    events to test it using Event Injector. The following events can be created and
    sent to the emulator through the Event Injector view in the Tizen IDE or through
    the console:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '**Sensor**: This event indicates values related to any of the following sensors:
    acceleration, magnetic, gyro, proximity, or light.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Motion**: This event simulates motion events such as shake.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Battery**: This event adjusts the current battery level as well as the state
    of the charger.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Earjack**: This event controls the state of the headset.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**USB**: This event manages the state of the USB connector of the virtual device.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RSSI (Received signal strength indication)**: This event simulates different
    signal strength. Note that if you set the RSSI to `0`, then the events for text
    messaging and calls will not work.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SD card**: This event sets the state of the indicator for the SD card.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: This event simulates a fake position of the device for testing
    purposes.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SMS**: This event simulates sending text messages.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Call**: This event handles simulated calls.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NFC**: This event manages NFC tags, for example, NDEF messages, NFC tags,
    and so on.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The official documentation shipped with the SDK reveals all the capabilities
    of the Event Injector at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.gettingstarted/html/dev_env/event_injec.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.gettingstarted/html/dev_env/event_injec.htm).
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also possible to inject events through the console. This feature is extremely
    valuable for scripts used in automated testing. A user's guide of this console
    tool is available at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.gettingstarted/html/dev_env/using_event_injector.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.gettingstarted/html/dev_env/using_event_injector.htm).
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, the official documentation offers basic instructions for running
    application on the emulator at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/running_widget_emulator.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/running_widget_emulator.htm).
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an application on a device
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters of the book, we have already discussed SDB and how
    applications can be run on an emulator or devices. The purpose of this recipe
    is to consolidate this knowledge.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following actions to set the run configuration of a connected device:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the Tizen device is successfully connected to the computer and
    that it is recognized in the **Connection Explorer** of the Tizen IDE.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Adjust the configurations before the first start of the application using any
    of the following approaches:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Run** | **Run Configurations** from the main menu of the Tizen
    IDE.
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Locate the project in the **Project Explorer** view. Right-click on the project
    and from the context menu and navigate to **Run As** | **Run Configurations**.
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure that you have adjusted the run configuration and used any of the
    following methods to run the application on a connected Tizen device:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Project Explorer** view, mark the project, and right-click
    on it. A context menu will appear. Select **Run As** | **Tizen Web Application**.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Tizen IDE menu, go to **Run** | **Run As** | **Tizen Web Application**.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Run** button from the toolbar of the Tizen IDE.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No matter which method you choose, you will get the same result. Use the method
    that suits you best.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The algorithm for running an application on a Tizen device includes five major
    steps. The first step is to build the application. After that, it must be packaged
    as `.wgt` if it is a web application, or `.tpk` if it is a native application.
    In the third step, the package is transferred to the connected device. The next
    step is to install the package and finally to launch the application on the device.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Complete guidelines for connecting a Tizen device and running an application
    through the Tizen IDE on it are available as part of the official documentation
    of the SDK at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/running_widget_target.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/running_widget_target.htm).
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging in Tizen Web Simulator
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe offers guidelines on how to run and debug a Tizen web application
    using the Web Simulator and its web inspector.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to run a Tizen web application in the Web Simulator
    and to debug it:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Launch the application in the simulator following any of the methods described
    in the recipe *Running an application in the simulator*.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hit *F12* to open the Web Inspector.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Console** to have a look at the log messages.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Sources**, select some JavaScript, and set and control the breakpoints
    for debugging of the application.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tizen Web Simulator works in a Google Chrome browser. When you start it from
    Tizen IDE, it automatically launches a new Chrome window and loads a local URL
    in it. All debugging tools of Chrome are available in the simulator.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about the simulator and its usage, visit [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/running_widget_simulator.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/running_widget_simulator.htm)
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging in Tizen Emulator
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to install and run Tizen applications in
    the debug mode on the emulator and how to debug them with the **Remote Inspector**.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tool for debugging applications in the emulator is called Remote Inspector
    and it requires Google Chrome. Ensure that you have successfully installed Chrome
    on the computer that is used for development before you proceed.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to debug Tizen applications using the Emulator:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE and Tizen Emulator.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the application from the **Project Explorer** and use any of the following
    methods to launch it on the emulator:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the project and navigate to **Debug as** | **Tizen web application**
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **Debug** button on the toolbox of the Tizen IDE
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From the menu of the Tizen IDE, navigate to **Run** | **Debug As** | **Tizen
    Web Application**
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The emulator provides the full stacks of the platform and it is convenient for
    testing Tizen native and web applications. It is well integrated with the Tizen
    IDE. The application gets copied to the emulator. After that, it is automatically
    installed and launched. A new Chrome window is opened for the Remote Inspector.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-359
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A tutorial about the usage of the Remote Inspector is available in the subsequent
    recipe about tracking JavaScript bugs. More information about the process of launching
    applications on emulator can be found in the previous recipes as well in the official
    documentation available at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/running_widget_emulator.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/running_widget_emulator.htm).
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging on a device
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging on a real Tizen device is almost the same as on an emulator. This
    recipe will only reveal the minor differences of the process when it is performed
    with a device.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The requirements for debugging Tizen applications on a real device are the same
    as for emulator. Google Chrome must be installed on your development machine because
    it is required by the Remote Inspector.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to install and debug applications on the Tizen device
    through the Tizen IDE:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Tizen IDE.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the device and make sure that it is recognized and displayed in **Connection
    Explorer** in the Tizen IDE.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the application on the device in the debug mode using any of these methods:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the project and choose **Debug as** | **Tizen web application**
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **Debug** button in the toolbox of the Tizen IDE
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From the menu of the Tizen IDE, navigate to **Run** | **Debug As** | **Tizen
    Web Application**
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see from the preceding tutorial, the steps are almost the same as
    for debugging applications on Tizen Emulator.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building, copying, and installing an application to the Tizen device can be
    an annoying process if you have to do it hundred of times each day. Do you want
    to save the development time and accelerate your debugging process?
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: Tizen **Rapid Development Support** (**RDS**) to the rescue! Using it, the application
    is fully packaged, copied, and installed on the device only at its first run.
    After that, the step for packaging is skipped and only the modified files are
    transferred to the device. RDS has a built-in watchdog that monitors the process
    and if it fails then normal installation of the application is performed.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, RDS is enabled. If you need to disable it, go to the **Windows**
    menu of the Tizen IDE and select **Preferences** | **Tizen SDK** | **Rapid Development
    Support**:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more](img/1908OS_11_02.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
- en: Enable or disable Rapid Development Support
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More information about RDS is available at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/rapid_dev_support.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/rapid_dev_support.htm)
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore the next recipe to learn how to take advantage of the Remote Inspector
    or dig into the official documentation about it at [https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/debugging_widget.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/debugging_widget.htm)
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Samsung Remote Test Lab
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Samsung offers a free service for remote testing of applications on mobile and
    wearable devices with Android and Tizen. The service is called Samsung **Remote
    Test Lab** (**RTL**). It is a convenient and affordable way to try out an application
    on a physical device without having a real hands-on experience with it.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to be a registered Samsung developer to take the advantage of RTL.
    If you do not have an account, you can sign up for free at [http://developer.samsung.com/signup](http://developer.samsung.com/signup).
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: 'RTL has several technical requirements that you must fulfill:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: A modern web browser (Firefox v2+,Internet Explorer v7+, Opera v9.6+, Chrome
    7+, or Safari v3+)
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript, enabled in the web browser
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Web Start
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Getting ready](img/1908OS_11_03.jpg)'
  id: totrans-391
  prefs: []
  type: TYPE_IMG
- en: Requirements for Remote Test Lab
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: The service can be used on computers with GNU/Linux, Mac OS X, and Microsoft
    Windows. You should also prepare the installation file of your application.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow this step-by-step guide to access a Tizen device using RTL and to launch
    your application on it:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: Sign in using your Samsung Developer credentials at [https://account.samsung.com/account/check.do](https://account.samsung.com/account/check.do).
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit Samsung Remote Test Lab at [http://developer.samsung.com/remotetestlab/rtlDeviceList.action](http://developer.samsung.com/remotetestlab/rtlDeviceList.action).
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Tizen** tab and select the device, OS version, and duration of the
    reservation.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Start** and wait until the RTL client loads.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the top of the RTL client and navigate to **Test** | **Install
    Application**, as shown in the following screenshot:![How to do it...](img/1908OS_11_04.jpg)
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing a Tizen application
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Upload the installation file of your application and click on **Install**.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Upon success, the following message will be displayed: **App was successfully
    installed.**'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The RTL client application has been installed on your computer and provides
    an environment and a connection to a physical Tizen device that can be used remotely.
    The devices are situated in different locations around the world: South Korea,
    Poland, India, UK, US, and Russia.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: If there is a free device, you can use it immediately. Alternatively, you can
    make a reservation and use it later. Although the service is free, there are some
    limitations and you need credit to use a device. Each Samsung developer receives
    20 credits per day. One credit allows you to use a device for 15 minutes and the
    minimal reservation period is half an hour (2 credits).
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: 'You should leave the device in the same condition as you found it, so keep
    in mind that you have to remove all the applications that you have installed.
    You may choose the screen quality: **Low**, **Normal**, and **High**. It is recommended
    to use low quality if your Internet connection is slow. The RTL client also allows
    you to change the device orientation through its context menu. Other useful features
    are the options to capture a screenshot and to record a video.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information, sign in with your Samsung Developers'' account and refer
    to the following article:'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.samsung.com/remotetestlab/rtlHelpDevice.action](http://developer.samsung.com/remotetestlab/rtlHelpDevice.action)'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking JavaScript bugs
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss two different techniques for tracking JavaScript
    bugs. Tutorials about the JavaScript log console and debugging by break points
    in the Remote Inspector will be revealed.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most primitive and easy debugging approach is to write messages in the
    console. The following methods of the JavaScript object `console` can be used:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log`'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console.info`'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console.warn`'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console.error`'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console.debug`'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messages logged with any of the preceding methods will be displayed in the JavaScript
    Log Console of the Tizen IDE. It starts automatically with the launch of a Tizen
    web application.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: The technique to debug through logging in the console is not efficient in all
    cases. Debugging the code with breakpoints is more useful in many cases.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these instructions to launch the Remote Inspector and to track JavaScript
    bugs by setting breakpoints in the source code:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Remote Inspector for a Tizen web application that runs on Tizen Emulator
    and device. Instructions on how this step is provided in the previous recipes.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Sources** button from the main toolbar:![How to do it...](img/1908OS_11_05.jpg)
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Sources button in the Remote Inspector
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the button in the left-upper corner below the main toolbar to show
    the navigator.
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select and open a JavaScript file.
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the line number to set a breakpoint. Multiple breakpoints can be defined.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the control buttons to navigate through the breakpoints and the source of
    the application:![How to do it...](img/1908OS_11_06.jpg)
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Buttons to manage and move through breakpoints in the Remote Inspector
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For example, have a look at the following screenshot, which has been taken
    during the debugging of the Hello World application in Tizen Emulator. Three breakpoints
    have been set in the `main.js` file to track the behavior of the hardware back
    button, as shown in the following screenshot:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1908OS_11_07.jpg)'
  id: totrans-432
  prefs: []
  type: TYPE_IMG
- en: Tracking JavaScript bugs with Tizen Emulator and Remote Inspector
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Remote Inspector is integrated in the Tizen IDE. As you have seen, it provides
    powerful tools for debugging Tizen web applications running on Tizen Emulators
    and devices. With this tool, you can not only debug JavaScript, but also inspect
    the resources, the styles, and the DOM structure of the HTML files.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: The Remote Inspector is based on WebKit Web Inspector but it includes additional
    features for remote debugging. A separate window of the Chrome browser opens automatically
    when the Remote Inspector is launched. The communication between Tizen Emulator
    and the Remote Inspector for debugging Tizen web applications goes entirely through
    HTTP.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information, visit the following links and visit the following pages:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/ide_sdk_tools/javascript_log_console.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/ide_sdk_tools/javascript_log_console.htm)'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/debugging_widget.htm](https://developer.tizen.org/dev-guide/2.2.1/org.tizen.web.appprogramming/html/app_dev_process/debugging_widget.htm)'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with QUnit
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing is an approach for automated verification of the software by testing
    individual units of it. Unit testing is the backbone of the concept for test-driven
    development according to which tests must be written before the source code of
    the application.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: A lot of JavaScript frameworks for unit testing are available under an open
    source license but in this recipe, we will focus on QUnit. It is a jQuery unit
    testing framework that makes it very appropriate for Tizen web applications built
    with Tizen Web UI Framework or jQuery Mobile. Another advantage of QUnit is its
    license, because it is available under MIT license.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: This recipe reveals the required steps to integrate QUnit in a Tizen web application
    and to create several basic tests.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visit and get the latest version of QUnit. At the time of writing this book,
    the latest version was Version 1.14.0.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-447
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow these instructions on how to create a new Tizen web application from
    scratch and to integrate QUnit in it. After that, based on the knowledge gained
    in this tutorial, you will be able to perform unit tests in any other Tizen web
    application.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: Launch Tizen IDE and create a new Tizen web application.
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the application in the **Project Explorer** and right-click on it. From
    the context menu that will appear, navigate to **New** | **Folder**.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `tests` as the name of the new folder and click on **Finish**.
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the downloaded QUnit file inside the new folder.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, right-click on the name of the project in the **Project Explorer** view
    and this time navigate to **New** | **File**.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file `tests.js` in the folder `tests`.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `tests.js` and insert a couple of test cases:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: By following the same procedure, create another file called `tests.html` and
    place it in the root directory of the project.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `tests.html` and insert the following code:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The following line must be included in the source code of the frontend to guarantee
    that the test results will fit into the size of the screen on Tizen Emulator or
    device.
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Edit `config.xml` and set `tests.html` as the main page by changing the value
    of the `content` tag:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Launch the application in the emulator or device to see the results of the tests.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-465
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Test results are directly displayed on the screen of the device or emulator
    when the application is launched. This is caused by the changed HTML for the entry
    at tenth step of the tutorial.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: 'We have created only two basic test cases in `tests.js`. The first test case
    verifies that `1` is equal by value to `"1"` in JavaScript. The second test case
    shows the usage of the `equal()` assert method. Both unit tests will pass successfully;
    so, on the screen, a report similar to the one in the following screenshot will
    be displayed:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_11_08.jpg)'
  id: totrans-468
  prefs: []
  type: TYPE_IMG
- en: A QUnit report on Tizen Emulator with successfully completed tests
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a minor change in the first test case to demonstrate the QUnit
    report with the failed test. Change the test by replacing `==` with `===`, so
    its code will become:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This minor modification completely changes the relation. In JavaScript, the
    comparison operator `===` checks not only the values but also the types. This
    time the test will fail because the operand on the left is numeric and the one
    of the right side is a string. Have a look at the following screenshot to see
    how a failed test case is reported:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/1908OS_11_09.jpg)'
  id: totrans-473
  prefs: []
  type: TYPE_IMG
- en: A QUnit report on Tizen Emulator with a failed test
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, only two assert methods have been used. The full list of all
    assert methods is available at [http://api.qunitjs.com/category/assert/](http://api.qunitjs.com/category/assert/).
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: Along with this book, you can find a sample Tizen web application with integrated
    unit tests using QUnit. It is created by following the tutorial provided in this
    recipe. Import it in the Tizen IDE and run it to see the test results of the screen
    of your emulator or device.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-477
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the examples in this recipe, you have taken a sneak peek in QUnit; so,
    you can continue by exploring the resources available in its API documentation
    at [http://api.qunitjs.com/](http://api.qunitjs.com/).
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Furthermore, the QUnit cookbook is an excellent article for getting started.
    It is available online at [http://qunitjs.com/cookbook/](http://qunitjs.com/cookbook/).
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep in mind that a lot of other good tools for creating JavaScript unit tests
    exist. Facebook recently published on GitHub the source code of their product
    for painless unit testing called Jest at [http://facebook.github.io/jest/](http://facebook.github.io/jest/).
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 12. Porting Tizen to Hardware Devices
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a platform development environment
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing development tools in Ubuntu or Debian
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing development tools in openSUSE
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing development tools in Fedora and CentOS
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building Tizen platform images
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flashing a Tizen image to mobile devices
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling 3D acceleration and OpenGL
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Booting Tizen on Intel NUC
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Booting Tizen on Allwinner devices
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hacking a tablet and booting Tizen on it
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-493
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You made it to the last chapter of this book! So far, we have
    covered Tizen application development and kept the focus on web applications.
    I hope you had fun. It's time to move to the next level—Tizen platform development.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: This chapter offers just a sneak peek into the enormous possibilities that Tizen
    platform development opens for both individual developers and companies. I hope
    your Tizen journey will not finish with the last recipe of this chapter and you
    will continue experimenting with the platform.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: This is definitely the most advanced and complex chapter of the book. It offers
    guidelines to build embedded control systems powered by Tizen. Brief tutorials
    to build Tizen platform images and booting them on ARM and x86 devices are included.
    The information provided is useful for the development or porting of new or existing
    embedded control systems, such as IVI or home automation, to the Tizen software
    platform. Based on all the recipes in this chapter, you should be able to start
    the development of your own wearable devices and the Internet of Things powered
    by Tizen.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a platform development environment
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tizen project uses the online code review system Gerrit and the version
    control system Git. This recipe reveals how to obtain access to and configure
    both systems.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-499
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you still do not have a user account for [https://www.tizen.org/](https://www.tizen.org/),
    complete the registration form at [https://www.tizen.org/user/register](https://www.tizen.org/user/register).
    An Internet connection and a Linux computer are also needed for this recipe. Tizen
    is a Linux-based platform, and the tools for platform development are compatible
    with popular Linux distributions.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you have installed Git. If it is not present on your system, you
    can use the following commands to install it:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ubuntu or Debian, use the following command:'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'On Fedora or CentOS, use the following command:'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'On OpenSUSE, use the following command:'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How to do it...
  id: totrans-508
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to configure SSH for Gerrit access:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate RSA keys by running the following command in a terminal and follow
    the onscreen instructions:'
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Using your favorite text editor, for example, vim, create an SSH configuration
    file at `~/.ssh/config`, and place it inside the following settings:'
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note
  id: totrans-514
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not forget to replace `<username>` with your Gerrit account name.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the entire content of the file generated in the previous step to the clipboard.
    By default, the file is stored at `~/.ssh/id_rsa.pub`.
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a web browser, and log in to [http://review.tizen.org/gerrit/](http://review.tizen.org/gerrit/).
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on your username in the upper-right corner of the web pages, and select
    **Settings**.
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **SSH Public Keys** from the menu of the **Settings** page, which is
    as follows:![How to do it...](img/1908OS_12_01.jpg)
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gerrit settings
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Paste the content of `~/.ssh/id_rsa.pub` from the clipboard to the input box
    with the label **Add SSH Public Key**, and click on the button **Add**, as follows:![How
    to do it...](img/1908OS_12_02.jpg)
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that you have successfully configured SSH for Gerrit access by running
    the following command in the terminal:'
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Upon successful access, you should see a welcome message as follows:'
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After that, proceed to the next part of the recipe, and configure Git for Gerrit
    access by performing the following actions after the last two steps:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace `First_Name` and `Last_Name` shown in the following command, and execute
    it to configure the username for Git:'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Replace `<Email>` with the e-mail that you used to register at [tizen.org](http://tizen.org),
    and run the following command to set it for Git:'
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works
  id: totrans-531
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source code of the Tizen project is hosted using the distributed version
    control system Git. This is an open source solution initially created by Linux
    Torvalds in 2005 as a tool for the development of the Linux kernel. It quickly
    became popular and its usage spread among the majority of open source projects.
    The services provided by GitHub and Gitorious played an important role in the
    Git penetration among developers.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: The last two steps of this recipe are dedicated to the global options of Git.
    The `git config` command takes two arguments. The first argument is the setting,
    which should be updated, and the second argument is a new value.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: The other system that was configured in this recipe is Gerrit. This is another
    open source tool. It is a web-based code review system that is tightly integrated
    with Git. Gerrit is very convenient for large projects, because it enables more
    centralized usage of Git. Some of the other well-known, large open source projects
    that rely on Git and Gerrit are Qt, Android, CyanogenMod, Eclipse, LibreOffice,
    and MediaWiki.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-535
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information as well as instructions on how to configure a working environment
    through proxy, take a look at [https://source.tizen.org/documentation/developer-guide/environment-setup](https://source.tizen.org/documentation/developer-guide/environment-setup).
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing development tools in Ubuntu or Debian
  id: totrans-537
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen platform development tools are available for several Linux distributions.
    Their installation is different for each distribution, but it is done using their
    standard installation mechanisms. This recipe provides a step-by-step installation
    guide for Ubuntu and Debian using `apt-get`.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-539
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions if you are using Ubuntu or Debian:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file `/etc/apt/sources.list` in a text editor with appropriate permissions,
    for example:'
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Append the repository for Tizen development tools that corresponds to the version
    of Ubuntu or Debian that you are using. For example, the repository for Ubuntu
    14.04 is:'
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note
  id: totrans-545
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note the slash at the end of the line, and do not forget to write it
    when you specify the repository. The full list of available repositories for the
    different Linux distributions can be browsed at [http://download.tizen.org/tools/latest-release/](http://download.tizen.org/tools/latest-release/).
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following command to update the index of the packages and to synchronize
    with the repository that was added in the previous step:'
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Install the mandatory development tools, GBS and MIC, with the following command:'
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How it works
  id: totrans-551
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Debian is known as a stable distribution with an enormous database of supported
    packages. Ubuntu is built on Debian and recently has become the third most used
    platform (in the terms of operating systems) behind Mac OS X and Microsoft Windows.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: The powerful command-line tool for package management `apt-get` is used in both
    Debian and Ubuntu. Packages can be installed, upgraded, or removed with it. The
    whole process in this recipe is absolutely standard, as it follows the common
    workflow for package installation on Ubuntu and Debian. The first and second steps
    are Tizen-specific, because the URL of the appropriate repository of the development
    tools must be set.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-554
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is highly recommended that you keep the version of the Tizen development
    tools up to date. In Ubuntu and Debian, it is possible to obtain the latest version
    of all packages by executing `apt-get` with the following parameters:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Alternatively, a single package or a list of packages can be upgraded to the
    newest version with the following command:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: See also
  id: totrans-559
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This article is based on the information from the developer guide at [tizen.org](http://tizen.org).
    Visit the following link for more information:'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://source.tizen.org/documentation/developer-guide/getting-started-guide/installing-development-tools](https://source.tizen.org/documentation/developer-guide/getting-started-guide/installing-development-tools)'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing development tools in openSUSE
  id: totrans-562
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenSUSE is a free, Linux-based general purpose operating system. The development
    of this distribution is pushed forward by a community project with the same name
    that is sponsored by SUSE. The mission of this recipe is to facilitate openSUSE
    users with the installation of a Tizen development tool.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-564
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform these steps to install GBS and MIC on openSUSE:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a repository of Tizen development tools that matches the version of your
    openSUSE. For example, the following commands add a repository compatible with
    openSUSE 13.1:'
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Note
  id: totrans-568
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using a different version of openSUSE, browse and find an appropriate
    Tizen developer tools repository for it at [http://download.tizen.org/tools/latest-release/](http://download.tizen.org/tools/latest-release/).
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Download the metadata of the repository that has just been added as follows:'
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Download and install GBS and MIC using the following command:'
  id: totrans-572
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works
  id: totrans-574
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The installation process on openSUSE is similar to the one for Ubuntu and Debian,
    but the commands are different. In openSUSE, the name of the command-line tool
    for package management is Zypper. The algorithm for the installation is still
    the same as in the previous recipe but requires even fewer manual interactions.
    The first step is to add a repository, and the second step is to update the metadata
    of the new repository. The last step is to install GBS, MIC, or any of the other
    tools.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-576
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following commands if Tizen development tools on your computer are
    outdated and you want to get the latest version:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Replace `<package>` with the name of the package that you want to upgrade. For
    example, `gbs` or `mic`.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-580
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tizen development tools can be also installed on Ubuntu, Debian, Fedora, and
    CentOS. Check out the preceding recipe and the next recipe if you want to install
    these tools on other distributions, or have a look at the official guides at [https://source.tizen.org/documentation/developer-guide/getting-started-guide/installing-development-tools](http://https://source.tizen.org/documentation/developer-guide/getting-started-guide/installing-development-tools).
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing development tools in Fedora and CentOS
  id: totrans-582
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have already seen how to install Tizen development tools on Ubuntu, Debian,
    and openSUSE from the previous recipes. Now, it is time to discuss Fedora and
    CentOS. The installation processes on these Linux distributions are the same,
    because both Fedora and CentOS are based on **Red Hat Enterprise Linux** (**RHEL**).
    Both distributions use RPM packages, which are managed by the command-line tool
    **YUM** (Yellowdog Updater, Modified).
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: Fedora is owned by Red Hat, but the project is supported by the community, and
    a lot of volunteers are involved in the development and the maintenance of the
    source code. New versions of Fedora are released every six months.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Fedora, the governance of CentOS is independent from Red Hat although
    it is sponsored by the company. The first edition of CentOS was released in May
    2004.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-586
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please follow the steps in the following tutorial to install Tizen development
    tools on Fedora or CentOS using YUM:'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the repository of Tizen development tools by downloading it using `wget`
    to `/etc/yum.repos.d`. Let''s add the repository for Fedora 20 as an example:'
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note
  id: totrans-590
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are using CentOS or another version of Fedora, please browse and retrieve
    the repo file that matches your operating system at: [http://download.tizen.org/tools/latest-release/](http://download.tizen.org/tools/latest-release/)'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Execute the following command to update the metadata of the repositories:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Install GBS and MIC as follows:'
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: How it works
  id: totrans-596
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have read the previous two recipes, you will already be familiar with
    the algorithm of the installation. The same procedure with different tools is
    specific for Fedora and CentOS.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: Just as in the case of Ubuntu, Debian, and openSUSE, the first step again is
    to add the repository of the Tizen development tools. After that, the metadata
    of the new repository has to be downloaded. Finally, the packages from this repository
    are downloaded with `yum`.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-599
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To keep Tizen development tools up to date and to upgrade them to the latest
    version, please run the following commands:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Replace `<Package>` with the exact name of the package that has to be upgraded,
    for example, `gbs` or `mic`.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-603
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The official guide for the installation of Tizen development tools is available
    at [https://source.tizen.org/documentation/developer-guide/getting-started-guide/installing-development-tools](https://source.tizen.org/documentation/developer-guide/getting-started-guide/installing-development-tools).
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building Tizen platform images
  id: totrans-605
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe reveals the ingredients and the steps required to cook Tizen platform
    images. A step-by-step tutorial as well as a lot of external links are provided.
    Based on this information, you will be able to build Tizen platform images and,
    after that, to boot them on compatible devices, you will need to follow the instructions
    in the following recipes.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-607
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are about to start a time-consuming process. Make sure that you have a powerful
    computer to build Tizen platform images; otherwise, prepare to wait for a long
    time. Although Tizen platform images can also be built on systems with less impressive
    specifications, my personal experience shows that the recommended system requirements
    are a new Intel Core i7 processor and 8 GB RAM.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: A platform development environment should be set, and the platform development
    tools should be properly installed as explained in the previous recipes.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-610
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these guidelines to build a Tizen platform image from scratch:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory, `~/bin/` ,and include it in `PATH` as follows:'
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Download the repo script, and add permissions for its execution by running
    the following commands:'
  id: totrans-614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create a new directory where the Tizen source code will be downloaded as follows:'
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Note
  id: totrans-618
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The name of the directory in the preceding example is `tizen`. Set a name of
    the directory that suits you best.
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace `<user>` with your Gerrit username, and execute the following two commands
    to download the source code of Tizen Common over SSH:'
  id: totrans-620
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Note
  id: totrans-622
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Change the manifest to `ivi.xml` to download the source code of the IVI profile
    or to `mobile.xml` for the mobile profile. The full list of available branches
    and remote repositories can be found at [https://source.tizen.org/documentation/developer-guide/getting-started-guide/building-packages-locally-gbs#available-branches-and-the-corresponding-remote-repos](https://source.tizen.org/documentation/developer-guide/getting-started-guide/building-packages-locally-gbs#available-branches-and-the-corresponding-remote-repos).
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `.gbs.conf` in your favorite text editor, and configure it. For example,
    this is the default configuration for Tizen Common:'
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Select one of the following options, and remove `#` from the beginning of its
    line to enable it:'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Note
  id: totrans-628
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The default configurations for the IVI and the mobile profile are available
    at [https://source.tizen.org/documentation/developer-guide/getting-started-guide/building-packages-locally-gbs](https://source.tizen.org/documentation/developer-guide/getting-started-guide/building-packages-locally-gbs).
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Build all packages using GBS with a command that matches the targeted CPU architecture
    as follows:'
  id: totrans-630
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For i586, use the following:'
  id: totrans-631
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-632
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Note
  id: totrans-633
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are building a Tizen 2 platform image, append `--exclude=gcc,cmake,filesystem,aul,libmm-sound,libtool`
    to the preceding command.
  id: totrans-634
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For armv7l, use the following commands:'
  id: totrans-635
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-636
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Download an appropriate kickstart file from [http://download.tizen.org](http://download.tizen.org).
    For example, the following command will download the kickstart file to build Tizen
    2.2.1 for RD-PQ:'
  id: totrans-637
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Edit the repo section, and change the value of the `--baseurl` argument to point
    to the local builds. In this case, the value must start with the prefix `file://`
    followed by the absolute path.
  id: totrans-639
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, run the following command to create a Tizen image using the kickstart
    file:'
  id: totrans-640
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Note
  id: totrans-642
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Append `--tmpfs` as an additional argument if more than 4 GB RAM is available
    on the system.
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works
  id: totrans-644
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tizen is an open source software platform, and anyone can download its source
    code for free and build it from scratch. The process is time-consuming, but it
    is not that difficult.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: The main tools used are **Git Build System** (**GBS**) and **MeeGo Image Creator**
    (**MIC**). GBS is a command-line tool to build Tizen packages. MIC is a tool inherited
    from MeeGo to create images. Nowadays, its features are embedded into GBS, and
    images can be created directly by running `gbs createimage`. Alternatively, you
    can still invoke MIC directly with the `create` argument.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: The steps of this recipe are pretty much self-explanatory. First, you must get
    the source code, then build packages, and finally prepare a Tizen image with MIC
    and an appropriate kickstart file.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: Tizen images can be built for both ARMv7 and i586 compatible processors. Depending
    on the targeted device, you need to use an appropriate configuration as shown
    in the sixth step.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-649
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tizen platform development contains a lot of hidden gems. To build Tizen platform
    images, this recipe covers only the basics. For more information and advanced
    tutorials, please explore the resource available at [https://source.tizen.org/](https://source.tizen.org/).
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailed instructions to clone the source code of different Tizen versions and
    profiles are available at [https://source.tizen.org/documentation/developer-guide/getting-started-guide/cloning-tizen-source](https://source.tizen.org/documentation/developer-guide/getting-started-guide/cloning-tizen-source).
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visit the following link to learn more about building packages with GBS on your
    computer at [https://source.tizen.org/documentation/developer-guide/getting-started-guide/building-packages-locally-gbs](https://source.tizen.org/documentation/developer-guide/getting-started-guide/building-packages-locally-gbs).
  id: totrans-652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details regarding the final step in creating images from the local packages
    built with GBS can be found at [https://source.tizen.org/documentation/developer-guide/getting-started-guide/creating-tizen-images-mic](https://source.tizen.org/documentation/developer-guide/getting-started-guide/creating-tizen-images-mic).
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about Tizen packaging guidelines is available at [https://wiki.tizen.org/wiki/Packaging/Guidelines](https://wiki.tizen.org/wiki/Packaging/Guidelines).
  id: totrans-654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flashing a Tizen image to mobile devices
  id: totrans-655
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first Tizen reference device was RD-210, and it was announced at the Tizen
    Developer Conference in 2012\. Nowadays, it is outdated, and new versions of the
    Tizen mobile profile are no longer released for it. Its successor was released
    a year later under the code name RD-PQ, and as of the time of this writing, it
    is still compatible with all the latest Tizen releases. RD-PQ is based on Samsung
    Galaxy S3, and it has similar hardware specifications.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: This recipe provides guidelines to flash both of these Tizen reference devices.
    Please note that the flashing process is simple but potentially risky. Read carefully
    all instructions as well as the information in the links provided before performing
    any actions on the device.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-658
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The flashing process is very delicate. Prepare well, because even a minor mistake
    may lead to permanent poor results, and in the worst case to brick the device.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you have a Tizen-compatible device and that its battery is fully
    charged. Also, you will require a USB cable that will be used to connect the device
    to the computer.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: 'A personal computer with Linux distribution is required. The flashing process
    depends on a tool called `lthor`. Ensure that you can set up resource a Tizen
    development tools repository successfully on your distribution, and run the following
    commands to install `lthor`:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: As a precaution, it is highly recommended that you use a computer with backup
    power supply, for example, a laptop with a fully charged battery, to minimize
    the risk of electrical outage during the flashing process.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-664
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following tutorial describes the flashing process of Tizen reference devices,
    such as RD-PQ and RD-210:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: Build an appropriate Tizen image for your device, or download it from [http://download.tizen.org/releases/](http://download.tizen.org/releases/).
  id: totrans-666
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn off the device.
  id: totrans-667
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the volume down and the power hardware buttons simultaneously to boot
    the device into the download mode.
  id: totrans-668
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the device to a computer via a USB cable.
  id: totrans-669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Flash the image to the device by replacing `<Tizen image>` with the name of
    the downloaded file in the following command, and execute it:'
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Note
  id: totrans-672
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Additional actions are required if you are planning to update RD-210 with Tizen
    1.0 Larkspur to a newer version. Please refer to the following link for more information:
    [https://source.tizen.org/documentation/reference/flash-device#RD-PQ_RD-210](https://source.tizen.org/documentation/reference/flash-device#RD-PQ_RD-210).'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-674
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On Ubuntu, the last step of the flashing process may fail due to any of the
    following errors:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: 'A handshake failed error:'
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'A port open error:'
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Both issues have been discussed numerous times during the Tizen mailing list.
    They are caused by `modemmanager`, which tries to communicate with the attached
    device on the USB port and prevents the normal work of `lthor`.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: 'If you experience any of the preceding errors, please uninstall `modemmanager`
    from your computer using the following command and `lthor` again:'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Alternatively, if you want to keep `modemmanager`, please perform the following
    actions:'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove or move to another location the configuration file of the D-BUS service
    for `modemmanager` as follows:'
  id: totrans-684
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Terminate all instances of `modemmanager` that are running at the moment via
    the following commands:'
  id: totrans-686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: For more troubleshooting tips and tricks related to `lthor`, visit [https://wiki.tizen.org/wiki/Troubleshooting_lthor_on_Ubuntu](https://wiki.tizen.org/wiki/Troubleshooting_lthor_on_Ubuntu).
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-689
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Up-to-date information and details about flashing Tizen reference mobile devices
    are available at [https://source.tizen.org/documentation/reference/flash-device#RD-PQ_RD-210](https://source.tizen.org/documentation/reference/flash-device#RD-PQ_RD-210).
  id: totrans-690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling 3D acceleration and OpenGL
  id: totrans-691
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will guide you on how to enable 3D acceleration and OpenGL on Tizen
    devices with Mali GPU immediately after flashing Tizen on them.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-693
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have a flashed Tizen reference device, for example, RD-PQ, upon following
    the instructions in the previous recipe, you will notice a warning immediately
    after booting the platform as shown in the following screenshot:'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/1908OS_12_03.jpg)'
  id: totrans-695
  prefs: []
  type: TYPE_IMG
- en: Compositor warning after booting Tizen 2 for the first time on RD-PQ
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: The warning is displayed due to missing drivers for 3D acceleration and OpenGL.
    It affects a lot of built-in applications and interferes with their normal work.
    Third-party drivers for Mali DDK have to be installed to solve the issue.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: The installation process is fairly easy. It requires a computer with an installed
    Tizen SDB, an Internet connection, and of course, the Tizen device.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-699
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several ways to install Mali DDK. The final result is the same no
    matter which way you choose. The following methodology to enable hardware acceleration
    is pretty straightforward:'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the Mali DDK compatible with the version of Tizen that has been flashed
    on the devices. The following Mali DDK versions are available for Tizen 2:'
  id: totrans-701
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tizen 2.0 ([https://source.tizen.org/mali-ddk](https://source.tizen.org/mali-ddk))
  id: totrans-702
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen 2.1 ([http://source.tizen.org/mali-ddk-2.1](http://source.tizen.org/mali-ddk-2.1))
  id: totrans-703
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tizen 2.2 ([http://source.tizen.org/mali-ddk-2.2](http://source.tizen.org/mali-ddk-2.2))
  id: totrans-704
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-705
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code of Mali DDK is not open. Visit [https://source.tizen.org/](https://source.tizen.org/)
    to find out the binaries of the latest available versions.
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Extract the downloaded files on your computer, for example:'
  id: totrans-707
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Connect the Tizen device to your computer, and copy the extracted files in
    it using SDB. The commands in the following example will copy the files to `/home/`
    directory:'
  id: totrans-709
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Log in to the devices, and go to the directory where you have copied the files,
    for example, `/home/`, as follows:'
  id: totrans-711
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Remove old packages as follows:'
  id: totrans-713
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Install new packages to enable hardware acceleration as follows:'
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Finally, flush the filesystem buffers, and reboot the Tizen device by executing
    the following commands:'
  id: totrans-717
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Alternatively, you can even decrease the manual interactions of the described
    process if you first copy the downloaded tarball and directly extract it on the
    Tizen device.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-720
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Tizen reference device RD-PQ has Mali 400-MP4 GPU. Its drivers are provided
    as a tarball of RPM files, because Tizen, as a platform, uses the RMP package
    manager. SDB is required to copy the files to the device and, after that, to install
    the packages. The changes take effect only after the device has been rebooted.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-722
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More information about enabling 3D acceleration and OpenGL on Tizen devices
    is available on the Tizen wiki page at [https://wiki.tizen.org/wiki/Enable_3D_Acceleration_on_Tizen](https://wiki.tizen.org/wiki/Enable_3D_Acceleration_on_Tizen)
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Booting Tizen on Intel NUC
  id: totrans-724
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen is a software platform that supports both ARM and x86 architectures. Intel,
    as one of the leading contributors of the Tizen project, is putting in a lot of
    effort for the support of x86 architecture, which powers their processors. This
    architecture was introduced more than 40 years ago, in the late 70s. The 64-bit
    version of x86 was released in 2003.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is dedicated to the process of flashing Tizen images compatible
    with the x86 architecture on devices with Intel processors. There are a lot of
    compatible devices on the market, but the focus of this recipe is on Intel NUC
    with the Intel Atom processor, model E3815.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-727
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A tool to flash Tizen images is required for this recipe. It is provided by
    the package `bmap-tools`. Install it by following the guidelines for the installation
    of Tizen development tools. For example, on Ubuntu, it can be installed using
    the following command:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: You will also need a USB memory stick with at least 4 GB disk space and a compatible
    computer, such as Intel NUC. A Tizen image will be flashed on the USB memory stick,
    and all other data will be completely erased from it. To prevent any loss of data,
    please make sure that you have a backup of the data from your USB memory stick
    before you proceed.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-731
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the described actions to create a bootable USB memory stick with Tizen:'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: Plug the USB memory stick into your computer.
  id: totrans-733
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the device using `fdisk -l` or by going through the log of `dmesg`.
  id: totrans-734
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Unmount the device. On Unix-based systems, this can be achieved as follows.
    Replace `X` with the ID of the USB memory device:'
  id: totrans-735
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Use `bmaptool` to download a Tizen image, and copy it on the USB drive. If
    you are not sure which image to download, bet on milestone release, as follows:'
  id: totrans-737
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Replace `<Tizen>` with the image present on your local drive or with the URL
    to an image.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have a bootable USB memory stick with Tizen, you can proceed to booting
    it on a compatible device with an Intel processor:'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: Plug the USB memory stick into Intel NUC.
  id: totrans-741
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on the device.
  id: totrans-742
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter its BIOS by hitting *F2*.
  id: totrans-743
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the boot order, and set the USB memory stick with the highest priority.
  id: totrans-744
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save changes and proceed. If everything works fine, Tizen will boot shortly.
  id: totrans-745
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-746
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tizen is divided into several profiles. Tizen IVI and Common are preferred for
    Intel architectures. In this recipe, we have used a milestone release of Tizen
    Common. This type of release should be stable, and it is recommended that you
    rely on them if you are not sure which version to pick.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-748
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By following the preceding process, you created a bootable USB memory stick
    with Tizen, which you can copy to the persistent memory of the device.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: The following tutorial describes one of the ways to copy Tizen to the built-in
    storage of Intel NUC. A second USB stick will be needed.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: Plug in the second memory stick in your computer, and copy the same Tizen image
    as a raw file on it. After that, unplug this USB stick.
  id: totrans-751
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plug the second USB memory stick into Intel NUC while Tizen is running from
    the first USB stick.
  id: totrans-752
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the Tizen terminal and log in as root.
  id: totrans-753
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detect the second USB memory stick and the internal eMMC storage using `fdisk
    –l`.
  id: totrans-754
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unmount the internal eMMC storage using `umount`.
  id: totrans-755
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the Tizen image from the second USB memory stick to the eMMC. Use the
    following command, and replace `<Tizen image>` with the file from the second USB
    memory stick, and replace `<storage>` with the eMMC, for example, `/dev/mmcblk0`:'
  id: totrans-756
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Turn off the device, unplug all the USB memory sticks and boot it again.
  id: totrans-758
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the device will boot from the internal memory, and if everything
    works fine, Tizen will boot shortly.
  id: totrans-759
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, instead of using a second USB memory stick, you can boot Tizen
    on Intel NUC and enable a network connection. After that, you can copy a Tizen
    image to the USB memory stick on which the operating system runs.
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-761
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about booting Tizen on Intel devices, you can visit[https://source.tizen.org/documentation/reference/flash-device#intel](https://source.tizen.org/documentation/reference/flash-device#intel)
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Booting Tizen on Allwinner devices
  id: totrans-763
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Allwinner is a Chinese company, the core business of which is related to the
    development of SoC. The company was established in 2007, and it became popular
    worldwide in 2010 with the launch of their SoC with Cortex-A8 processor, which
    is known as A10\. In 2013, Allwinner released A20, which features a dual core
    Cortex-A7 ARM processor.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: In April 2013, Allwinner received the ARM award for being the number one in
    Android tablet AP shipment worldwide. A lot of popular single-board computers,
    such as OLinuXino, Cubieboard, and Banana Pi also use Allwinner processors with
    ARMv7 compatible architecture. All devices with Allwinner processors are also
    called Sunxi.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: Because of their low prices, Sunxi devices with Android have excellent penetration
    on the market. They are important for the Tizen ecosystem as well, because they
    open the road to a lot of owners of Sunxi devices. Additionally, open source hardware
    devices with Allwinner processors, such as the boards from the OLinuXino series,
    provide excellent opportunities for innovation to start-up companies and enthusiasts
    with limited budgets.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
- en: This recipe provides a complete guideline to port Tizen to Sunxi devices. Please
    note that there are thousands of devices with Allwinner SoCs. Each device has
    different specifications, so you should adjust the tutorial depending on your
    device and the version of Tizen that you use.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-768
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prepare for the most advanced recipe in this book. The provided instructions
    are generic for Sunxi devices. Adapt them to match the exact specifications of
    the vendor of the devices that you target.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial is provided as is, without warranty of any kind. Do it at your
    own risk. Read all the instructions very carefully and obey the recommendations
    and guidelines of the hardware vendors. Be aware that any mistake may brick the
    device or cause other unwanted behavior.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: 'To successfully complete this recipe, you need a Linux computer, Sunxi device
    with a slot for microSD card, and you must have the following:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: Tizen platform development environment setup
  id: totrans-772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installed Tizen platform development tools
  id: totrans-773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Tizen image for ARMv7 compatible devices
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you fail to comply with any of the preceding requirements, refer to the previous
    recipes.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-776
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following tutorial is about building a Linux-sunxi kernel, U-Boot loader,
    flashing Tizen on a microSD card, and booting it on a Sunxi device:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up the tool chain to build kernel and bootloader by running the following
    commands:'
  id: totrans-778
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Note
  id: totrans-780
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Debian users might need to add the repositories from [http://www.emdebian.org/debian](http://www.emdebian.org/debian)
    to `/etc/apt/sources.list`.
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make a directory and download in it the source code of the U-Boot loader using
    Git:'
  id: totrans-782
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Note
  id: totrans-784
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is highly recommended that you use a revision of the source code that has
    been verified by the vendor of your device.
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the directory that has been created by `git clone`:'
  id: totrans-786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Build a U-Boot loader from scratch using the GNU `make` utility. For example,
    the following command will build U-Boot using a **makefile** for the open source
    hardware development board, A20-OLinuXino-MICRO:'
  id: totrans-788
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Check whether the files `spl/sunxi-spl.bin u-boot.bin u-boot-sunxi-with-spl.bin`
    exist to verify that the build of U-Boot loader was successful.
  id: totrans-790
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the major directory, and prepare to build the Linux-sunxi kernel
    by downloading its source code.
  id: totrans-791
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Enter the directory `linux-sunxi`, and build the kernel using appropriate `<defconfig>`
    for the targeted platform with the following command:'
  id: totrans-793
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Note
  id: totrans-795
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: All defconfig files included in the project are located in the directory `linux-sunxi/arch/arm/configs/`.
    It is recommended that you place any third-party defconfig files in the same directories.
    Some vendors, such as Olimex, provide their own defconfig files.
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Optionally, you can build kernel modules using the following commands:'
  id: totrans-797
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Insert a microSD card into your computer and identify it. Pay attention to the
    fact that all the information on the microSD card will be erased completely, and
    Tizen will be overwritten on it.
  id: totrans-799
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace `<X>` with the ID of the microSD card, and launch `fdisk`:'
  id: totrans-800
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Retrieve the total size of the microSD card by running the `p` command in `fdisk`.
    This is a sample output for a 4 GB microSD card:'
  id: totrans-802
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Calculate the number of cylinders by dividing the size retrieved in the previous
    step by the size of a single cylinder, which is equal to the number of heads multiplied
    by the number of sectors and the size of a single sector.
  id: totrans-804
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-805
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The size of a single cylinder with 255 heads, 63 sectors, and 512 bytes per
    sector is 8225280 bytes. So, if, for example, the total size of the microSD card
    is 4026531840 bytes, then the number of cylinders is 489.
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Delete the existing partition with the `d` command at `fdisk` as shown in the
    following example. Repeat the action until all partitions are deleted:'
  id: totrans-807
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Configure the heads, sectors, and cylinders of the microSD card as follows;
    replace `<cylinders>` with the value calculated in step 12:'
  id: totrans-809
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Create a boot partition, and leave the rest for Linux partitions:'
  id: totrans-811
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Set the FAT32 filesystem for the boot partition:'
  id: totrans-813
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Verify that the partitions are correct by running the `p` command again.
  id: totrans-815
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save all changes using the `w` command:'
  id: totrans-816
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Replace `<X>` with the identifier of the microSD card, and format the partitions
    as follows:'
  id: totrans-818
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Unmount the microSD card and write the bootloader as follows:'
  id: totrans-820
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'After that, mount the microSD card, and copy the Linux-sunxi kernel and configuration
    files, such as `script.bin`, which, in most cases, are provided by the hardware
    vendors to the boot partition. Here is an example:'
  id: totrans-822
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Make sure that all partitions of the microSD card are unmounted as follows:'
  id: totrans-824
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Copy each Tizen image to the appropriate partition. Replace `<image>` with
    the Tizen image, `<X>` with the identifier of the microSD card, and `<N>` with
    the partition number in the following command:'
  id: totrans-826
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Optionally, you can mount the boot (FAT32) partition again and create `uEnv.txt`,
    which allows the hot swap of some configurations, such as the display output.
    Change `disp.screen0_output_type` to `1` for LCD display, `3` for HDMI, and `4`
    for VGA. The following is an example configuration to enable HDMI display at `uEnv.txt`:'
  id: totrans-828
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Unmount and unplug the microSD card from the computer. Plug into the Sunxi device,
    and start it to boot Tizen.
  id: totrans-830
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-831
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe had three main ingredients: boot loader, kernel, and the Tizen
    image.'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: U-Boot is a universal boot loader for embedded devices with ARM, PowerPC, MIPS,
    and other processors. It is preferred for Sunxi devices, and a fork adapted for
    them resides at GitHub. On the second step of the recipe, the source code of U-Boot
    is cloned from GitHub, and it is built in the previous steps.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: Linux-sunxi is the fork of the Linux kernel, which is hosted at GitHub. It is
    adapted for devices with Allwinner SoCs. Its build process is explained in the
    instructions provided from steps 6 to 8.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: The final and most tricky part of the recipe is the setting up of the bootable
    microSD card. This starts at step 9\. The first partition is with FAT32 filesystems,
    which means that it can easily be mounted and edited on computers with different
    operating systems. This is convenient, because you might want to change a binary
    file or edit `uEnv.txt` on a Microsoft Windows computer.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
- en: The recipe contains a lot of Linux commands. If you are unsure how they work
    or if you just want to see details about them, please check the corresponding
    Linux Man Pages. For example, type `man dd` to learn more about this command.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-837
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is based on several important sources. The information about the
    microSD card partitions is similar to the process for booting Tizen on PandaBoard,
    and more details can be found on the Tizen wiki at [https://wiki.tizen.org/wiki/Tizen_IVI_Getting_Started_Guide_For_PandaBoard](https://wiki.tizen.org/wiki/Tizen_IVI_Getting_Started_Guide_For_PandaBoard).
  id: totrans-838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Linux-sunxi project is available in GitHub at [https://github.com/linux-sunxi/](https://github.com/linux-sunxi/),
    and more information can also be found at wiki ([http://linux-sunxi.org/Main_Page](http://linux-sunxi.org/Main_Page)).
  id: totrans-839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a community-driven initiative to port Tizen to Allwinner devices, and
    all resources of this project are also stored in GitHub at [https://github.com/leon-anavi/tizen-sunxi](https://github.com/leon-anavi/tizen-sunxi).
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tizen-sunxi is being developed and tested primarily on open source hardware
    devices manufactured by Olimex. Information about building Linux-kernel and U-Boot
    loader for their most popular single-board computers with Allwinner processors
    can be found on their blog. The following links are useful for:'
  id: totrans-841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A20-OLinuXino-MICRO ([http://olimex.wordpress.com/2013/11/05/building-the-ultimate-debian-sd-card-for-linux-with-kernel-3-4-for-a20-olinuxino-micro/](http://olimex.wordpress.com/2013/11/05/building-the-ultimate-debian-sd-card-for-linux-with-kernel-3-4-for-a20-olinuxino-micro/))
  id: totrans-842
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A10-OLinuXino-LIME ([http://olimex.wordpress.com/2014/06/23/a10-olinuxino-lime-debian-build-with-kernel-3-4-90/](http://olimex.wordpress.com/2014/06/23/a10-olinuxino-lime-debian-build-with-kernel-3-4-90/))
  id: totrans-843
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A13-OLinuXino ([http://olimex.wordpress.com/2014/07/18/a13-olinuxino-wifi-debian-build-with-kernel-3-4-90/](http://olimex.wordpress.com/2014/07/18/a13-olinuxino-wifi-debian-build-with-kernel-3-4-90/))
  id: totrans-844
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A10S-OLinuXino-MICRO ([http://olimex.wordpress.com/2013/10/28/building-debian-sd-card-for-linux-with-kernel-3-4-from-scratch-for-a10s-olinuxino-micro/](http://olimex.wordpress.com/2013/10/28/building-debian-sd-card-for-linux-with-kernel-3-4-from-scratch-for-a10s-olinuxino-micro/)
  id: totrans-845
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional information about Tizen, ARM devices, and porting guidelines reside
    on the Tizen wiki. A good starting point is [https://wiki.tizen.org/wiki/ARM](https://wiki.tizen.org/wiki/ARM).
  id: totrans-846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hacking a tablet and booting Tizen on it
  id: totrans-847
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Allwinner processors can be found in numerous devices on the market. According
    to their product catalog, Allwinner shipped the most ARM processors for Android
    tablets in 2013.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: The previous recipe has already proved that Tizen runs on development boards
    with Allwinner processors, and the next step is to boot Tizen on existing Android
    tablets on the market. This recipe provides guidelines on how to retrieve the
    binary configuration files of tablets using reverse engineering.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-850
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please make sure that the following prerequisites are met:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: An Android tablet (or eventually smartphone) with a slot for a microSD card
    and an Allwinner ARMv7 compatible processor, such as A20, A13, A10, A10, and so
    on
  id: totrans-852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer with installed **Android Debug Bridge** (**ADB**), which comes with
    the Android SDK
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bootable microSD card with a Tizen image prepared following the tutorial in
    the preceding recipe
  id: totrans-854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-855
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these guidelines to retrieve the binary configuration files of the tablet,
    to put them on the Tizen image, and to boot it from the microSD card on the tablet.
    Pay attention to the fact that the instructions are provided as is. The process
    is complex, and you must do it at your risk:'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: Turn on the tablet, wait until its Android stock image loads, and after that,
    enable **USB debugging** from **Settings** | **Developer options**.
  id: totrans-857
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the tablet to a computer in the developer mode.
  id: totrans-858
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter remote shell on the tablet by executing the following command:'
  id: totrans-859
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Mount and access the NAND memory of the tablet as follows:'
  id: totrans-861
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Exit the shell, and copy `script.bin` to the computer using `adb` as follows:'
  id: totrans-863
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Plug the microSD card into the computer.
  id: totrans-865
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Overwrite `script.bin` on the FAT32 partition of the microSD card, and remove
    `uEnv.txt` if it is present.
  id: totrans-866
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Eject the microSD card from the computer.
  id: totrans-867
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn off the tablet.
  id: totrans-868
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plug the microSD card into the tablet.
  id: totrans-869
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on the tablet again. If everything works as expected, Tizen will be booted
    directly from the microSD card.
  id: totrans-870
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  id: totrans-871
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This command-line tool Android Debug Bridge is used to connect to an Android
    tablet with Allwinner and copy its binary configuration files. It is a client-server
    program that has exactly the same purpose as SDB but for Android devices.
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
- en: The internal storage of Sunxi tablets, also known as their NAND flash memory,
    is present as a device that can be mounted as shown in step 4\. After that, direct
    access to the files is obtained, and they can be transferred to the computer.
    This trick allows easy reverse engineering of configuration files and simplifies
    the booting process of other platforms such as Tizen and Linux distributions such
    as Debian.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: The ADB command `pull` is used to download `script.bin` from the Android tablet
    to the computer. The first argument of the `pull` command is the location of the
    file on the device, and the second argument is the destination on the computer
    where it must be saved.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-875
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To read its configurations, the binary file that has been copied from Android
    must be converted to a `fex` file. The open source project Linux-sunxi, which
    is hosted at GitHub, provides a simple command-line tool for this job. Perform
    the following simple operations to convert `script.bin` to the `fex` file:'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the source code of sunxi-tools using `git` as follows:'
  id: totrans-877
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Build from the source `bin2fex` as follows:'
  id: totrans-879
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Run `bin2fex` to convert `script.bin` to `script.fex`, for example:'
  id: totrans-881
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-882
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: See also
  id: totrans-883
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe was inspired by the article about A10 devices available at [http://elinux.org/Hack_A10_devices](http://elinux.org/Hack_A10_devices)
  id: totrans-884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about Android Debug Bridge and its commands is available at
    [http://developer.android.com/tools/help/adb.html](http://developer.android.com/tools/help/adb.html)
  id: totrans-885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

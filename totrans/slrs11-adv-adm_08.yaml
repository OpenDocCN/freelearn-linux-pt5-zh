- en: Chapter 8. Administering and Monitoring Processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring and handling process execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing processes' priority on Solaris 11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring FSS and applying it to projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working with Oracle Solaris 11, many of the executing processes compose
    applications, and even the operating system itself runs many other processes and
    threads, which takes care of the smooth working of the environment. So, administrators
    have a daily task of monitoring the entire system and taking some hard decisions,
    when necessary. Furthermore, not all processes have the same priority and urgency,
    and there are some situations where it is suitable to give higher priority to
    one process than another (for example, rendering images). Here, we introduce a
    key concept: scheduling classes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Oracle Solaris 11 has a default process scheduler (`svc:/system/scheduler:default`)
    that controls the allocation of the CPU for each process according to its scheduling
    class. There are six important scheduling classes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Timesharing** (**TS**): By default, all processes or threads (non-GUI) are
    assigned to this class, where the priority value is dynamic and adjustable according
    to the system load (-60 to 60). Additionally, the system scheduler switches a
    process/thread with a lower priority from a processor to another process/thread
    with higher priority.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive** (**IA**): This class has the same behavior as the TS class
    (dynamic and with an adjustable priority value from -60 to 60), but the IA class
    is suitable for GUI processes/threads that have an associated window. Additionally,
    when the mouse focuses on a window, the bound process or thread receives an increase
    of 10 points of its priority. When the mouse focus is taken off the window, the
    bound process loses the same 10 points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** (**FX**): This class has the same behavior as that of TS, except
    that any process or thread that is associated with this class has its priority
    value fixed. The value range is from 0 to 59, but the initial priority of the
    process or thread is kept from the beginning to end of the life process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System** (**SYS**): This class is used for kernel processes or threads where
    the possible priority goes from 60 to 99\. However, once the kernel process or
    thread begins processing, it''s bound to the CPU until the end of its life (the
    system scheduler doesn''t take it off the processor).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Realtime** (**RT**): Processes and threads from this class have a fixed priority
    that ranges from 100 to 159\. Any process or thread of this class has a higher
    priority than any other class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fair share scheduler** (**FSS**): Any process or thread managed by this class
    is scheduled based on its share value (and not on its priority value) and in the
    processor''s utilization. The priority range goes from -60 to 60.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually, the FSS class is used when the administrator wants to control the resource
    distribution on the system using processor sets or when deploying Oracle zones.
    It is possible to change the priority and class of any process or thread (except
    the system class), but it is uncommon, such as using FSS. When handling a processor
    set (a group of processors), the processes bound to this group must belong to
    only one scheduling class (FSS or FX, but not both). It is recommended that you
    don't use the RT class unless it is necessary because RT processes are bound to
    the processor (or core) up to their conclusion, and it only allows any other process
    to execute when it is idle.
  prefs: []
  type: TYPE_NORMAL
- en: The FSS class is based on shares, and personally, I establish a total of 100
    shares and assign these shares to processes, threads, or even Oracle zones. This
    is a simple method to think about resources, such as CPUs, using percentages (for
    example, 10 shares = 10 percent).
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring and handling process execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Oracle Solaris 11 offers several methods to monitor and control process execution,
    and there isn't one best tool to do this because every technique has some advantages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine (VirtualBox or VMware) running Oracle
    Solaris 11 installed with a 2 GB RAM at least. It's recommended that the system
    has more than one processor or core.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A common way to monitor processes on Oracle Solaris 11 is using the old and
    good `ps` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'According to the output shown in the previous screenshot, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '**S** (status)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UID** (user ID)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PID** (process ID)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ZsONE** (zone)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CLS** (scheduling class)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PRI** (priority)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VSZ** (virtual memory size)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RSS** (resident set size)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TIME** (the time that the process runs on the CPU)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**COMMAND** (the command used to start the process)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, possible process statuses are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: O (running on a processor)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: S (sleeping—waiting for an event to complete)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R (runnable—process is on a queue)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: T (process is stopped either because of a job control signal or because it is
    being traced)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Z (zombie—process finished and parent is not waiting)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: W (waiting—process is waiting for the CPU usage to drop to the CPU-caps enforced
    limit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not get confused between the **virtual memory size** (**VSZ**) and **resident
    set size** (**RSS**). The VSZ of a process includes all information on a physical
    memory (RAM) plus all mapped files and devices (swap). On the other hand, the
    RSS value only includes the information in the memory (RAM).
  prefs: []
  type: TYPE_NORMAL
- en: 'Other important command to monitor processes on Oracle Solaris 11 is the `prstat`
    tool. For example, it is possible to list the threads of each process by executing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `LWPID` column shows the number of threads of each process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other good options are `–J` (summary per project), `-Z` (summary per zone),
    and `–mL` (includes information about thread microstates). To collect some information
    about processes and projects, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Pay attention to the last column (`PROJECT`) from the second part of the output.
    It is very interesting to know that Oracle Solaris already works using projects
    and some of them are created by default. By the way, it is always appropriate
    to remember that the structure of a project is project | tasks | processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Collecting information about processes and zones is done by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: According to the output, there is a `global` zone and two other nonglobal zones
    (`zone1` and `zone2`) in this system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to gather information about processes and their respective microstate
    information, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The output from `prtstat –mL` (gathering microstates information) is very interesting
    because it can give us some clues about performance problems. For example, the
    `LAT` column (latency) indicates the percentage of time wait for the CPU (possible
    problems with the CPU) and in this case, a constant value above zero could mean
    a CPU performance problem.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing the explanation, a possible problem with the memory can be highlighted
    using the `TFL` (the percentage of time the process has spent processing text
    page faults) and `DFL` columns (the percentage of time the process has spent processing
    data page faults), which shows whether and how many times (in percentage) a thread
    is waiting for memory paging.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a complementary manner, when handling processes, there are several useful
    commands, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Objective | Command |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| To show the stack process |'
  prefs: []
  type: TYPE_TB
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| To kill a process |'
  prefs: []
  type: TYPE_TB
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| To get the process ID of a process |'
  prefs: []
  type: TYPE_TB
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| To list the opened files by a process |'
  prefs: []
  type: TYPE_TB
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| To get a memory map of a process |'
  prefs: []
  type: TYPE_TB
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| To list the shared libraries of a process |'
  prefs: []
  type: TYPE_TB
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| To show all the arguments of a process |'
  prefs: []
  type: TYPE_TB
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| To trace a process |'
  prefs: []
  type: TYPE_TB
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| To reap a zombie process |'
  prefs: []
  type: TYPE_TB
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to find out which shared libraries are used by the `top` command,
    execute the following sequence of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To find the top-most stack, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify which files are opened by an application as the Firefox browser,
    we have to execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Another excellent command from the previous table is `pmap`, which shows information
    about the address space of a process. For example, to see the address space of
    the current shell, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `pmap` output shows us the following essential information:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Address`: This is the starting virtual address of each mapping'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Kbytes`: This is the virtual size of each mapping'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RSS`: The amount of RAM (in KB) for each mapping, including shared memory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Anon`: The number of pages of anonymous memory, which is usually and roughly
    defined as the sum of heap and stack pages without a counterpart on the disk (excluding
    the memory shared with other address spaces)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Lock`: The number of pages locked in the mapping'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Permissions: Virtual memory permissions for each mapping. The possible and
    valid permissions are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x` Any instructions inside this mapping can be executed by the process'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`w` The mapping can be written by the process'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r` The mapping can be read by the process'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s` The mapping is shared with other processes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`R` There is no swap space reserved for this process'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mapped File: The name for each mapping such as an executable, a library, and
    anonymous pages (heap and stack)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, there is an excellent framework, DTrace, where you can get information
    on processes and anything else related to Oracle Solaris 11.
  prefs: []
  type: TYPE_NORMAL
- en: What is DTrace? It is a clever instrumentation tool that is used for troubleshooting
    and, mainly, as a suitable framework for performance and analysis. DTrace is composed
    of thousands of probes (sensors) that are scattered through the Oracle Solaris
    kernel. To explain this briefly, when a program runs, any touched probe from memory,
    CPU, or I/O is triggered and gathers information from the related activity, giving
    us an insight on where the system is spending more time and making it possible
    to create reports.
  prefs: []
  type: TYPE_NORMAL
- en: DTrace is nonintrusive (it does not add a performance burden on the system)
    and safe (by default only the root user has enough privileges to use DTrace) and
    uses the Dscript language (similar to AWK). Different from other tools such as
    `truss`, `apptrace`, `sar`, `prex`, `tnf`, `lockstat`, and `mdb`, which allow
    knowing only the problematic area, DTrace provides the exact point of the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fundamental structure of a DTrace probe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous probe is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`provider`: These are libraries that instrument regions of the system, such
    as `syscall` (system calls), `proc` (processes), `fbt` (function boundary tracing),
    `lockstat`, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module`: This represents the shared library or kernel module where the probe
    was created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`function`: This is a program, process, or thread function that contains the
    probe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is the probe''s name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using DTrace, for each probe, it is possible to associate an action that
    will be executed if this probe is touched (triggered). By default, all probes
    are disabled and don't consume CPU processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'DTrace probes are listed by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the previous command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The number of available probes on Oracle Solaris 11 are reported by the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: DTrace is a very interesting and massive subject. Certainly, we could dedicate
    entire chapters or even a whole book to explain DTrace's world.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this brief introduction to DTrace, we can use it for listing any new
    processes (including their respective arguments) by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: There are very useful one-line tracers, as shown previously, available from
    Brendan Gregg's website at [http://www.brendangregg.com/DTrace/dtrace_oneliners.txt](http://www.brendangregg.com/DTrace/dtrace_oneliners.txt).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is feasible to get any kind of information using DTrace. For example, get
    the system call count per program by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the total number of read bytes per process, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the number of write bytes by process, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To know the number of pages paged-in by process, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To list the disk size by process, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'From Brendan Gregg''s website ([http://www.brendangregg.com/dtrace.html](http://www.brendangregg.com/dtrace.html)),
    there are other good and excellent scripts. For example, `prustat.d` (which we
    can save in our home directory) is one of them and its output is self-explanatory;
    it can be obtained using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'From the DTraceToolkit website ([http://www.brendangregg.com/dtracetoolkit.html](http://www.brendangregg.com/dtracetoolkit.html)),
    we can download and save the `topsysproc.d` script in our home directory. Then,
    by executing it, we are able to find which processes execute more system calls,
    as shown in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You learned how to monitor processes using several tools such as `prstat`, `ps`,
    and `dtrace`. Furthermore, you saw several commands that explain how to control
    and analyze a process.
  prefs: []
  type: TYPE_NORMAL
- en: Managing processes' priority on Solaris 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Oracle Solaris 11 allows us to change the priority of processes using the `priocntl`
    command either during the start of the process or after the process is run.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine (VirtualBox or VMware) running Oracle
    Solaris 11 with 2 GB RAM at least. It is recommended that the system have more
    than one processor or core.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the *Introduction* section, we talked about scheduling classes and this
    time, we will see more information on this subject. To begin, list the existing
    and active classes by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: When handling priorities, which we learned in this chapter, only the positive
    part is important and we need to take care because the values shown in the previous
    output have their own class as the reference. Thus, they are not absolute values.
  prefs: []
  type: TYPE_NORMAL
- en: 'To show a simple example, start a process with a determined class (FX) and
    priority (55) by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen previously, the process is using exactly the class and priority
    that we have chosen. Moreover, it is appropriate to explain some options such
    as `-e` (to execute a specified command), `-c` (to set the class), `-p` (the chosen
    priority inside the class), and `-m` (the maximum limit that the priority of a
    process can be raised to).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next exercise is to change the process priority after it starts. For example,
    by executing the following command, the `top` tool will be executed in the FX
    class with an assigned priority equal to 40, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to change the priority that is running, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This is perfect! The `-s` option is used to change the priorities' parameters,
    and the `–p` option assigns the new priority to the process.
  prefs: []
  type: TYPE_NORMAL
- en: If we tried to use the TS class, the results would not have been the same because
    this test system does not have a serious load (it's almost idle) and in this case,
    the priority would be raised automatically to around 59.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You learned how to configure a process class as well as change the process priority
    at the start and during its execution using the `priocntl` command.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring FSS and applying it to projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The FSS class is the best option to manage resource allocation (for example,
    CPU) on Oracle Solaris 11\. In this section, we are going to learn how to use
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine (VirtualBox or VMware) running Oracle
    Solaris 11 with 4 GB RAM at least. It is recommended that the system has only
    one processor or core.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Oracle Solaris 11, the default scheduler class is TS, as shown by the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This default configuration comes from the `/etc/dispadmin.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If we need to verify and change the default scheduler, we can accomplish this
    task by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, this new setting only takes effect for newly created processes
    that are run after the command, but current processes still are running using
    the previously configured classes (TS and IA), as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To change the settings from all current processes (the `-i` option) to using
    FSS (the `-c` option) without rebooting the system, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s almost done, but the `init` process (PID equal to 1) was not changed
    to the FSS class, unfortunately. This change operation is done manually, by executing
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: From here, it would be possible to use projects (a very nice concept from Oracle
    Solaris), tasks, and FSS to make an attractive example. It follows a quick demonstration.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should know that one project can have one or more tasks, and each task
    has one or more processes (as shown previously in this chapter). From an initial
    installation, Oracle Solaris 11 already has some default projects, as shown by
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In this exercise, we are going to create four new projects: `ace_proj_1`, `ace_proj_2`,
    `ace_proj_3`, and `ace_proj_4`. For each project will be associated an amount
    of shares (40, 30, 20, and 10 respectively). Additionally, it will create some
    useless but CPU-consuming tasks by starting a Firefox instance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, execute the following commands to perform the tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is where the trick comes in. The FSS class only starts to act when:'
  prefs: []
  type: TYPE_NORMAL
- en: The total CPU consumption by all processes is over 100 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sum of processes from defined projects is over the current number of CPUs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Thus, to be able to see the FSS effect, as explained previously, we have to
    repeat the next four commands several times (using the Bash history is suitable
    here), shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'As time goes by and the number of tasks increase, each project will be approaching
    the FSS share limit (40 percent, 30 percent, 20 percent, and 10 percent of processor,
    respectively). We can follow this trend by executing the next command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `prstat` command with the `–J` option shows a summary of the existing projects,
    and `–R` requires the kernel to execute the `prstat` command in the RT scheduling
    class. If the reader faces some problem getting the expected results, it is possible
    to swap the `firefox` command with the `dd if=/dev/zero of=/dev/null &` command
    to get the same results.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to highlight that while not all projects take their full share
    of the CPU, other projects can borrow some shares (percentages). This is the reason
    why `ace_proj_4` has 11 percent, because `ace_proj_1` has taken only 35 percent
    (the maximum is 40 percent).
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you learned how to change the default scheduler from TS to
    FSS in a temporary and persistent way. Finally, you saw a complete example using
    projects, tasks, and FSS.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Solaris Performance and Tools: DTrace and MDB Techniques for Solaris 10 and
    OpenSolaris*; *Brendan Gregg*, *Jim Mauro*, *Richard McDougall*; *Prentice Hall*;
    ISBN-13: 978-0131568198'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DTraceToolkit website at [http://www.brendangregg.com/dtracetoolkit.html](http://www.brendangregg.com/dtracetoolkit.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dtrace.org website at [http://dtrace.org/blogs/](http://dtrace.org/blogs/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

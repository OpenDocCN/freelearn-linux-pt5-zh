- en: Chapter 8. Administering and Monitoring Processes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 管理和监控进程
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Monitoring and handling process execution
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控和处理进程执行
- en: Managing processes' priority on Solaris 11
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理Solaris 11中的进程优先级
- en: Configuring FSS and applying it to projects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置FSS并应用于项目
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'When working with Oracle Solaris 11, many of the executing processes compose
    applications, and even the operating system itself runs many other processes and
    threads, which takes care of the smooth working of the environment. So, administrators
    have a daily task of monitoring the entire system and taking some hard decisions,
    when necessary. Furthermore, not all processes have the same priority and urgency,
    and there are some situations where it is suitable to give higher priority to
    one process than another (for example, rendering images). Here, we introduce a
    key concept: scheduling classes.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Oracle Solaris 11时，许多执行中的进程组成了应用程序，甚至操作系统本身也运行着许多其他进程和线程，确保环境的平稳运行。因此，管理员每天都需要监控整个系统，并在必要时做出一些艰难的决策。此外，并非所有进程的优先级和紧迫性都相同，某些情况下需要给某个进程更高的优先级（例如，渲染图像）。在这里，我们引入了一个关键概念：调度类。
- en: 'Oracle Solaris 11 has a default process scheduler (`svc:/system/scheduler:default`)
    that controls the allocation of the CPU for each process according to its scheduling
    class. There are six important scheduling classes, as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Solaris 11有一个默认的进程调度器（`svc:/system/scheduler:default`），它根据每个进程的调度类来控制CPU的分配。以下是六个重要的调度类：
- en: '**Timesharing** (**TS**): By default, all processes or threads (non-GUI) are
    assigned to this class, where the priority value is dynamic and adjustable according
    to the system load (-60 to 60). Additionally, the system scheduler switches a
    process/thread with a lower priority from a processor to another process/thread
    with higher priority.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间共享**（**TS**）：默认情况下，所有进程或线程（非GUI）都分配到此类别，其优先级值是动态的，并且可以根据系统负载进行调整（范围为-60到60）。此外，系统调度程序会将优先级较低的进程/线程从处理器切换到优先级较高的另一个进程/线程。'
- en: '**Interactive** (**IA**): This class has the same behavior as the TS class
    (dynamic and with an adjustable priority value from -60 to 60), but the IA class
    is suitable for GUI processes/threads that have an associated window. Additionally,
    when the mouse focuses on a window, the bound process or thread receives an increase
    of 10 points of its priority. When the mouse focus is taken off the window, the
    bound process loses the same 10 points.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互式**（**IA**）：此类的行为与TS类相同（动态的，优先级值范围为-60到60），但IA类适用于具有相关窗口的GUI进程/线程。此外，当鼠标聚焦在窗口上时，绑定的进程或线程的优先级会增加10分。当鼠标焦点移开窗口时，绑定的进程会失去这10分。'
- en: '**Fixed** (**FX**): This class has the same behavior as that of TS, except
    that any process or thread that is associated with this class has its priority
    value fixed. The value range is from 0 to 59, but the initial priority of the
    process or thread is kept from the beginning to end of the life process.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定**（**FX**）：此类的行为与TS类相同，不同之处在于与此类相关联的任何进程或线程都有固定的优先级值。值范围为0到59，但进程或线程的初始优先级从开始到结束都保持不变。'
- en: '**System** (**SYS**): This class is used for kernel processes or threads where
    the possible priority goes from 60 to 99\. However, once the kernel process or
    thread begins processing, it''s bound to the CPU until the end of its life (the
    system scheduler doesn''t take it off the processor).'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统**（**SYS**）：此类用于内核进程或线程，其优先级范围为60到99。然而，一旦内核进程或线程开始处理，它会被绑定到CPU直到其生命周期结束（系统调度器不会将其移出处理器）。'
- en: '**Realtime** (**RT**): Processes and threads from this class have a fixed priority
    that ranges from 100 to 159\. Any process or thread of this class has a higher
    priority than any other class.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时**（**RT**）：此类的进程和线程具有固定的优先级，范围为100到159。此类的任何进程或线程优先级都高于其他任何类。'
- en: '**Fair share scheduler** (**FSS**): Any process or thread managed by this class
    is scheduled based on its share value (and not on its priority value) and in the
    processor''s utilization. The priority range goes from -60 to 60.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公平共享调度器**（**FSS**）：由此类管理的任何进程或线程根据其共享值进行调度（而非优先级值），并根据处理器的使用情况来安排。优先级范围为-60到60。'
- en: Usually, the FSS class is used when the administrator wants to control the resource
    distribution on the system using processor sets or when deploying Oracle zones.
    It is possible to change the priority and class of any process or thread (except
    the system class), but it is uncommon, such as using FSS. When handling a processor
    set (a group of processors), the processes bound to this group must belong to
    only one scheduling class (FSS or FX, but not both). It is recommended that you
    don't use the RT class unless it is necessary because RT processes are bound to
    the processor (or core) up to their conclusion, and it only allows any other process
    to execute when it is idle.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当管理员希望使用处理器集来控制系统上的资源分配或在部署 Oracle 区域时，会使用 FSS 类。可以更改任何进程或线程的优先级和类（系统类除外），但这种情况并不常见，例如使用
    FSS。处理器集（处理器组）在处理时，绑定到该组的进程必须仅属于一个调度类（FSS 或 FX，但不能同时是两者）。除非必要，否则不建议使用 RT 类，因为
    RT 进程绑定到处理器（或核心），直到其结束，并且只有在处理器空闲时才允许其他进程执行。
- en: The FSS class is based on shares, and personally, I establish a total of 100
    shares and assign these shares to processes, threads, or even Oracle zones. This
    is a simple method to think about resources, such as CPUs, using percentages (for
    example, 10 shares = 10 percent).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: FSS 类是基于份额的，个人来说，我建立了总共 100 份，并将这些份额分配给进程、线程，甚至是 Oracle 区域。这是一种简单的资源分配方式，可以将
    CPU 资源看作百分比（例如，10 份 = 10%）。
- en: Monitoring and handling process execution
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控和处理进程执行
- en: Oracle Solaris 11 offers several methods to monitor and control process execution,
    and there isn't one best tool to do this because every technique has some advantages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Solaris 11 提供了多种方法来监控和控制进程执行，没有一个最好的工具，因为每种方法都有其优点。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe requires a virtual machine (VirtualBox or VMware) running Oracle
    Solaris 11 installed with a 2 GB RAM at least. It's recommended that the system
    has more than one processor or core.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程需要一台运行 Oracle Solaris 11 的虚拟机（VirtualBox 或 VMware），并且至少安装了 2GB 的内存。建议系统具有多个处理器或核心。
- en: How to do it…
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'A common way to monitor processes on Oracle Solaris 11 is using the old and
    good `ps` command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Oracle Solaris 11 中，监控进程的常用方法是使用传统的 `ps` 命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![How to do it…](img/00027.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00027.jpeg)'
- en: 'According to the output shown in the previous screenshot, we have:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面截图中显示的输出，我们有：
- en: '**S** (status)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S**（状态）'
- en: '**UID** (user ID)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UID**（用户 ID）'
- en: '**PID** (process ID)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PID**（进程 ID）'
- en: '**ZsONE** (zone)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ZsONE**（区域）'
- en: '**CLS** (scheduling class)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CLS**（调度类）'
- en: '**PRI** (priority)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PRI**（优先级）'
- en: '**VSZ** (virtual memory size)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VSZ**（虚拟内存大小）'
- en: '**RSS** (resident set size)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RSS**（常驻集大小）'
- en: '**TIME** (the time that the process runs on the CPU)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TIME**（进程在 CPU 上运行的时间）'
- en: '**COMMAND** (the command used to start the process)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**COMMAND**（启动进程的命令）'
- en: 'Additionally, possible process statuses are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可能的进程状态如下：
- en: O (running on a processor)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: O（正在处理器上运行）
- en: S (sleeping—waiting for an event to complete)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S（睡眠——等待事件完成）
- en: R (runnable—process is on a queue)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R（可运行——进程在队列中）
- en: T (process is stopped either because of a job control signal or because it is
    being traced)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: T（进程被停止，可能是由于作业控制信号或正在被追踪）
- en: Z (zombie—process finished and parent is not waiting)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Z（僵尸——进程已完成且父进程未等待）
- en: W (waiting—process is waiting for the CPU usage to drop to the CPU-caps enforced
    limit)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: W（等待——进程正在等待 CPU 使用率降至执行的 CPU 限制）
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not get confused between the **virtual memory size** (**VSZ**) and **resident
    set size** (**RSS**). The VSZ of a process includes all information on a physical
    memory (RAM) plus all mapped files and devices (swap). On the other hand, the
    RSS value only includes the information in the memory (RAM).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将**虚拟内存大小**（**VSZ**）与**常驻集大小**（**RSS**）混淆。进程的 VSZ 包括所有物理内存（RAM）上的信息，以及所有映射的文件和设备（交换区）。另一方面，RSS
    值仅包括内存（RAM）中的信息。
- en: 'Other important command to monitor processes on Oracle Solaris 11 is the `prstat`
    tool. For example, it is possible to list the threads of each process by executing
    the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 监控 Oracle Solaris 11 进程的另一个重要命令是 `prstat` 工具。例如，可以通过执行以下命令列出每个进程的线程：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `LWPID` column shows the number of threads of each process.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`LWPID` 列显示每个进程的线程数量。'
- en: 'Other good options are `–J` (summary per project), `-Z` (summary per zone),
    and `–mL` (includes information about thread microstates). To collect some information
    about processes and projects, execute the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 其他不错的选项有`–J`（按项目汇总）、`-Z`（按区域汇总）和`–mL`（包括线程微状态信息）。要收集有关进程和项目的一些信息，请执行以下命令：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Pay attention to the last column (`PROJECT`) from the second part of the output.
    It is very interesting to know that Oracle Solaris already works using projects
    and some of them are created by default. By the way, it is always appropriate
    to remember that the structure of a project is project | tasks | processes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意输出第二部分的最后一列（`PROJECT`）。很有趣的是，Oracle Solaris 已经通过项目来工作，并且一些项目是默认创建的。顺便提一句，记住项目的结构是：项目
    | 任务 | 进程。
- en: 'Collecting information about processes and zones is done by executing the following
    command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 收集有关进程和区域的信息是通过执行以下命令完成的：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: According to the output, there is a `global` zone and two other nonglobal zones
    (`zone1` and `zone2`) in this system.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 根据输出，该系统中有一个`global`区域和另外两个非全局区域（`zone1`和`zone2`）。
- en: 'Finally, to gather information about processes and their respective microstate
    information, execute the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要收集有关进程及其相应微状态信息，请执行以下命令：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The output from `prtstat –mL` (gathering microstates information) is very interesting
    because it can give us some clues about performance problems. For example, the
    `LAT` column (latency) indicates the percentage of time wait for the CPU (possible
    problems with the CPU) and in this case, a constant value above zero could mean
    a CPU performance problem.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 来自`prtstat –mL`（收集微状态信息）的输出非常有趣，因为它可以给我们一些关于性能问题的线索。例如，`LAT`列（延迟）指示等待CPU的时间百分比（可能是CPU问题），在这种情况下，常量值大于零可能表示CPU性能问题。
- en: Continuing the explanation, a possible problem with the memory can be highlighted
    using the `TFL` (the percentage of time the process has spent processing text
    page faults) and `DFL` columns (the percentage of time the process has spent processing
    data page faults), which shows whether and how many times (in percentage) a thread
    is waiting for memory paging.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 继续解释，可能的内存问题可以通过`TFL`（进程处理文本页面故障的时间百分比）和`DFL`（进程处理数据页面故障的时间百分比）列来突出显示，显示线程是否以及多少次（以百分比表示）等待内存分页。
- en: 'In a complementary manner, when handling processes, there are several useful
    commands, as shown in the following table:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以互补的方式，在处理进程时，有几个有用的命令，如下表所示：
- en: '| Objective | Command |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 目标 | 命令 |'
- en: '| --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| To show the stack process |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 显示堆栈进程 |'
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| To kill a process |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 杀死一个进程 |'
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| To get the process ID of a process |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 获取进程的进程ID |'
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| To list the opened files by a process |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 列出进程打开的文件 |'
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| To get a memory map of a process |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 获取进程的内存映射 |'
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| To list the shared libraries of a process |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 列出进程的共享库 |'
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| To show all the arguments of a process |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 显示进程的所有参数 |'
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| To trace a process |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 跟踪一个进程 |'
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| To reap a zombie process |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 收割僵尸进程 |'
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'For example, to find out which shared libraries are used by the `top` command,
    execute the following sequence of commands:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要查找`top`命令使用的共享库，请执行以下命令序列：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To find the top-most stack, execute the following command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找最上层的堆栈，请执行以下命令：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To verify which files are opened by an application as the Firefox browser,
    we have to execute the following commands:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证一个应用程序（如 Firefox 浏览器）打开了哪些文件，我们必须执行以下命令：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Another excellent command from the previous table is `pmap`, which shows information
    about the address space of a process. For example, to see the address space of
    the current shell, execute the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个来自前表的优秀命令是`pmap`，它显示关于进程地址空间的信息。例如，要查看当前 shell 的地址空间，执行以下命令：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `pmap` output shows us the following essential information:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`pmap`输出向我们展示了以下关键信息：'
- en: '`Address`: This is the starting virtual address of each mapping'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Address`：这是每个映射的起始虚拟地址'
- en: '`Kbytes`: This is the virtual size of each mapping'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Kbytes`：这是每个映射的虚拟大小'
- en: '`RSS`: The amount of RAM (in KB) for each mapping, including shared memory'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RSS`：每个映射的内存占用量（以KB为单位），包括共享内存'
- en: '`Anon`: The number of pages of anonymous memory, which is usually and roughly
    defined as the sum of heap and stack pages without a counterpart on the disk (excluding
    the memory shared with other address spaces)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Anon`：匿名内存的页面数量，通常大致定义为堆和栈页面的总和，这些页面在磁盘上没有对应的副本（不包括与其他地址空间共享的内存）。'
- en: '`Lock`: The number of pages locked in the mapping'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Lock`：映射中锁定的页面数量。'
- en: 'Permissions: Virtual memory permissions for each mapping. The possible and
    valid permissions are as follows:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限：每个映射的虚拟内存权限。有效权限如下：
- en: '`x` Any instructions inside this mapping can be executed by the process'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x` 该映射中的任何指令都可以由进程执行。'
- en: '`w` The mapping can be written by the process'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w` 该映射可以被进程写入。'
- en: '`r` The mapping can be read by the process'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r` 该映射可以被进程读取。'
- en: '`s` The mapping is shared with other processes'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s` 该映射与其他进程共享。'
- en: '`R` There is no swap space reserved for this process'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`R` 该进程没有预留交换空间。'
- en: 'Mapped File: The name for each mapping such as an executable, a library, and
    anonymous pages (heap and stack)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射文件：每个映射的名称，如可执行文件、库文件和匿名页面（堆和栈）。
- en: Finally, there is an excellent framework, DTrace, where you can get information
    on processes and anything else related to Oracle Solaris 11.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有一个非常优秀的框架，DTrace，可以让你获取有关进程及其他与 Oracle Solaris 11 相关的信息。
- en: What is DTrace? It is a clever instrumentation tool that is used for troubleshooting
    and, mainly, as a suitable framework for performance and analysis. DTrace is composed
    of thousands of probes (sensors) that are scattered through the Oracle Solaris
    kernel. To explain this briefly, when a program runs, any touched probe from memory,
    CPU, or I/O is triggered and gathers information from the related activity, giving
    us an insight on where the system is spending more time and making it possible
    to create reports.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 DTrace？它是一个巧妙的仪器工具，用于故障排除，主要作为性能分析的合适框架。DTrace 由成千上万的探针（传感器）组成，这些探针分布在 Oracle
    Solaris 内核中。简而言之，当程序运行时，内存、CPU 或 I/O 中的任何触发的探针都会激活并收集相关活动的信息，从而让我们洞察系统在哪些地方花费了更多时间，并能够生成报告。
- en: DTrace is nonintrusive (it does not add a performance burden on the system)
    and safe (by default only the root user has enough privileges to use DTrace) and
    uses the Dscript language (similar to AWK). Different from other tools such as
    `truss`, `apptrace`, `sar`, `prex`, `tnf`, `lockstat`, and `mdb`, which allow
    knowing only the problematic area, DTrace provides the exact point of the problem.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: DTrace 是非侵入式的（不会对系统增加性能负担），并且是安全的（默认情况下，只有 root 用户具有足够的权限使用 DTrace），它使用 Dscript
    语言（类似 AWK）。与其他工具（如 `truss`、`apptrace`、`sar`、`prex`、`tnf`、`lockstat`、`mdb`）不同，这些工具只能让你知道问题区域，DTrace
    则提供了问题的准确位置。
- en: 'The fundamental structure of a DTrace probe is as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: DTrace 探针的基本结构如下：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The previous probe is explained as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个探针的解释如下：
- en: '`provider`: These are libraries that instrument regions of the system, such
    as `syscall` (system calls), `proc` (processes), `fbt` (function boundary tracing),
    `lockstat`, and so on'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`provider`：这些是系统的仪器库，如 `syscall`（系统调用）、`proc`（进程）、`fbt`（函数边界跟踪）、`lockstat`
    等。'
- en: '`module`: This represents the shared library or kernel module where the probe
    was created'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module`：表示创建探针的共享库或内核模块。'
- en: '`function`: This is a program, process, or thread function that contains the
    probe'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function`：这是包含探针的程序、进程或线程函数。'
- en: '`name`: This is the probe''s name'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是探针的名称。'
- en: When using DTrace, for each probe, it is possible to associate an action that
    will be executed if this probe is touched (triggered). By default, all probes
    are disabled and don't consume CPU processing.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 DTrace 时，可以为每个探针关联一个操作，当该探针被触发时，操作会被执行。默认情况下，所有探针都被禁用，并且不会消耗 CPU 处理能力。
- en: 'DTrace probes are listed by executing the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: DTrace 探针可以通过执行以下命令列出：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output of the previous command is shown in the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出如下所示：
- en: '![How to do it…](img/00028.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/00028.jpeg)'
- en: 'The number of available probes on Oracle Solaris 11 are reported by the following
    command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Oracle Solaris 11 中，以下命令会报告可用探针的数量：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: DTrace is a very interesting and massive subject. Certainly, we could dedicate
    entire chapters or even a whole book to explain DTrace's world.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: DTrace 是一个非常有趣且庞大的主题。当然，我们可以专门 dedicate 整个章节甚至一本书来解释 DTrace 的世界。
- en: 'After this brief introduction to DTrace, we can use it for listing any new
    processes (including their respective arguments) by running the following command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在简短介绍DTrace之后，我们可以使用它来列出任何新进程（包括其相应的参数），只需运行以下命令：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There are very useful one-line tracers, as shown previously, available from
    Brendan Gregg's website at [http://www.brendangregg.com/DTrace/dtrace_oneliners.txt](http://www.brendangregg.com/DTrace/dtrace_oneliners.txt).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多非常有用的单行追踪器，如之前所示，可从Brendan Gregg的网站[http://www.brendangregg.com/DTrace/dtrace_oneliners.txt](http://www.brendangregg.com/DTrace/dtrace_oneliners.txt)下载。
- en: 'It is feasible to get any kind of information using DTrace. For example, get
    the system call count per program by executing the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用DTrace获取任何种类的信息都是可行的。例如，通过执行以下命令获取每个程序的系统调用计数：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To get the total number of read bytes per process, execute the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取每个进程读取字节的总数，执行以下命令：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To get the number of write bytes by process, run the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取按进程写入字节的数量，运行以下命令：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To know the number of pages paged-in by process, execute the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要知道按进程换入的页面数量，执行以下命令：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To list the disk size by process, run the following command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出按进程划分的磁盘大小，运行以下命令：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'From Brendan Gregg''s website ([http://www.brendangregg.com/dtrace.html](http://www.brendangregg.com/dtrace.html)),
    there are other good and excellent scripts. For example, `prustat.d` (which we
    can save in our home directory) is one of them and its output is self-explanatory;
    it can be obtained using the following commands:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 从Brendan Gregg的网站([http://www.brendangregg.com/dtrace.html](http://www.brendangregg.com/dtrace.html))，我们还可以找到其他优秀的脚本。例如，`prustat.d`（我们可以将其保存在主目录中）就是其中之一，其输出不言自明；可以通过以下命令获得：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'From the DTraceToolkit website ([http://www.brendangregg.com/dtracetoolkit.html](http://www.brendangregg.com/dtracetoolkit.html)),
    we can download and save the `topsysproc.d` script in our home directory. Then,
    by executing it, we are able to find which processes execute more system calls,
    as shown in the following commands:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 从DTraceToolkit网站([http://www.brendangregg.com/dtracetoolkit.html](http://www.brendangregg.com/dtracetoolkit.html))，我们可以下载并将`topsysproc.d`脚本保存在主目录中。然后，通过执行它，我们可以找出哪些进程执行更多的系统调用，正如以下命令所示：
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: An overview of the recipe
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配方概述
- en: You learned how to monitor processes using several tools such as `prstat`, `ps`,
    and `dtrace`. Furthermore, you saw several commands that explain how to control
    and analyze a process.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何使用多个工具（如`prstat`、`ps`和`dtrace`）来监控进程。此外，你还看到了几个命令，解释了如何控制和分析一个进程。
- en: Managing processes' priority on Solaris 11
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理Solaris 11中的进程优先级
- en: Oracle Solaris 11 allows us to change the priority of processes using the `priocntl`
    command either during the start of the process or after the process is run.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Solaris 11允许我们使用`priocntl`命令更改进程的优先级，无论是在进程启动时还是进程运行后。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe requires a virtual machine (VirtualBox or VMware) running Oracle
    Solaris 11 with 2 GB RAM at least. It is recommended that the system have more
    than one processor or core.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方要求至少有2GB RAM的虚拟机（如VirtualBox或VMware）运行Oracle Solaris 11。建议系统有多个处理器或核心。
- en: How to do it…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In the *Introduction* section, we talked about scheduling classes and this
    time, we will see more information on this subject. To begin, list the existing
    and active classes by executing the following command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在*引言*部分，我们讨论了调度类，这次我们将看到关于这个主题的更多信息。首先，通过执行以下命令列出现有的和活动的类：
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: When handling priorities, which we learned in this chapter, only the positive
    part is important and we need to take care because the values shown in the previous
    output have their own class as the reference. Thus, they are not absolute values.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理优先级时，我们在本章中学到的，只有正值部分是重要的，我们需要小心，因为前面输出中的值有它们自己的类别作为参考。因此，它们不是绝对值。
- en: 'To show a simple example, start a process with a determined class (FX) and
    priority (55) by executing the following commands:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示一个简单的例子，通过执行以下命令，启动一个具有特定类别（FX）和优先级（55）的进程：
- en: '[PRE30]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As can be seen previously, the process is using exactly the class and priority
    that we have chosen. Moreover, it is appropriate to explain some options such
    as `-e` (to execute a specified command), `-c` (to set the class), `-p` (the chosen
    priority inside the class), and `-m` (the maximum limit that the priority of a
    process can be raised to).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所见，过程正在使用我们选择的确切类和优先级。此外，适当地解释一些选项，如`-e`（执行指定命令）、`-c`（设置类）、`-p`（类内选择的优先级）和`-m`（进程优先级可以提升到的最大限制）。
- en: 'The next exercise is to change the process priority after it starts. For example,
    by executing the following command, the `top` tool will be executed in the FX
    class with an assigned priority equal to 40, as shown in the following command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个练习是改变进程启动后的优先级。例如，通过执行以下命令，`top` 工具将以 FX 类运行，分配的优先级为 40，如下所示：
- en: '[PRE31]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, to change the priority that is running, execute the following command:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了更改正在运行的优先级，执行以下命令：
- en: '[PRE32]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This is perfect! The `-s` option is used to change the priorities' parameters,
    and the `–p` option assigns the new priority to the process.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这很完美！`-s`选项用于更改优先级的参数，`–p`选项将新的优先级分配给进程。
- en: If we tried to use the TS class, the results would not have been the same because
    this test system does not have a serious load (it's almost idle) and in this case,
    the priority would be raised automatically to around 59.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试使用 TS 类，结果就不会一样，因为该测试系统没有严重的负载（几乎是空闲的），在这种情况下，优先级会自动提高到大约 59。
- en: An overview of the recipe
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配方概述
- en: You learned how to configure a process class as well as change the process priority
    at the start and during its execution using the `priocntl` command.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学习了如何配置进程类，以及如何使用 `priocntl` 命令在启动时和执行过程中更改进程的优先级。
- en: Configuring FSS and applying it to projects
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 FSS 并将其应用到项目中
- en: The FSS class is the best option to manage resource allocation (for example,
    CPU) on Oracle Solaris 11\. In this section, we are going to learn how to use
    it.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: FSS 类是管理 Oracle Solaris 11 中资源分配（例如，CPU）的最佳选择。在本节中，我们将学习如何使用它。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe requires a virtual machine (VirtualBox or VMware) running Oracle
    Solaris 11 with 4 GB RAM at least. It is recommended that the system has only
    one processor or core.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方需要一台运行 Oracle Solaris 11 的虚拟机（VirtualBox 或 VMware），并且至少需要 4 GB 的内存。建议系统只有一个处理器或核心。
- en: How to do it…
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In Oracle Solaris 11, the default scheduler class is TS, as shown by the following
    command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Oracle Solaris 11 中，默认的调度程序类是 TS，如以下命令所示：
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This default configuration comes from the `/etc/dispadmin.conf` file:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个默认配置来自 `/etc/dispadmin.conf` 文件：
- en: '[PRE34]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If we need to verify and change the default scheduler, we can accomplish this
    task by running the following commands:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要验证和更改默认的调度程序，我们可以通过运行以下命令来完成此任务：
- en: '[PRE35]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Unfortunately, this new setting only takes effect for newly created processes
    that are run after the command, but current processes still are running using
    the previously configured classes (TS and IA), as shown in the following command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这个新设置只对在命令执行后新创建的进程生效，但当前的进程仍然使用先前配置的类（TS 和 IA），如下所示：
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To change the settings from all current processes (the `-i` option) to using
    FSS (the `-c` option) without rebooting the system, execute the following command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改所有当前进程的设置（`-i` 选项）以使用 FSS（`-c` 选项），并且无需重启系统，执行以下命令：
- en: '[PRE37]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'It''s almost done, but the `init` process (PID equal to 1) was not changed
    to the FSS class, unfortunately. This change operation is done manually, by executing
    the following commands:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 快完成了，但不幸的是，`init` 进程（PID 等于 1）没有被更改为 FSS 类。这个更改操作是手动进行的，通过执行以下命令：
- en: '[PRE38]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: From here, it would be possible to use projects (a very nice concept from Oracle
    Solaris), tasks, and FSS to make an attractive example. It follows a quick demonstration.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，可以使用项目（Oracle Solaris 的一个非常好的概念）、任务和 FSS 来创建一个有吸引力的示例。接下来是一个快速演示。
- en: 'You should know that one project can have one or more tasks, and each task
    has one or more processes (as shown previously in this chapter). From an initial
    installation, Oracle Solaris 11 already has some default projects, as shown by
    the following commands:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该知道，一个项目可以有一个或多个任务，每个任务可以有一个或多个进程（如本章前面所示）。从初始安装开始，Oracle Solaris 11 已经有一些默认项目，如以下命令所示：
- en: '[PRE39]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In this exercise, we are going to create four new projects: `ace_proj_1`, `ace_proj_2`,
    `ace_proj_3`, and `ace_proj_4`. For each project will be associated an amount
    of shares (40, 30, 20, and 10 respectively). Additionally, it will create some
    useless but CPU-consuming tasks by starting a Firefox instance.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建四个新的项目：`ace_proj_1`、`ace_proj_2`、`ace_proj_3` 和 `ace_proj_4`。每个项目将关联一定数量的份额（分别为
    40、30、20 和 10）。此外，它还将通过启动 Firefox 实例来创建一些无用但占用 CPU 的任务。
- en: 'Therefore, execute the following commands to perform the tasks:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，执行以下命令来执行这些任务：
- en: '[PRE40]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Here is where the trick comes in. The FSS class only starts to act when:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是技巧的关键。FSS 类只有在以下情况下才开始起作用：
- en: The total CPU consumption by all processes is over 100 percent
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有进程的 CPU 总消耗超过 100%
- en: The sum of processes from defined projects is over the current number of CPUs
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义项目的所有进程的总和超过当前的 CPU 数量
- en: 'Thus, to be able to see the FSS effect, as explained previously, we have to
    repeat the next four commands several times (using the Bash history is suitable
    here), shown as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了能够看到 FSS 效果，如前所述，我们必须重复执行以下四个命令几次（使用 Bash 历史命令在这里非常合适），命令如下：
- en: '[PRE41]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'As time goes by and the number of tasks increase, each project will be approaching
    the FSS share limit (40 percent, 30 percent, 20 percent, and 10 percent of processor,
    respectively). We can follow this trend by executing the next command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移和任务数量的增加，每个项目将接近 FSS 份额的限制（分别为 40%、30%、20% 和 10% 的处理器）。我们可以通过执行以下命令来跟踪这一趋势：
- en: '[PRE42]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `prstat` command with the `–J` option shows a summary of the existing projects,
    and `–R` requires the kernel to execute the `prstat` command in the RT scheduling
    class. If the reader faces some problem getting the expected results, it is possible
    to swap the `firefox` command with the `dd if=/dev/zero of=/dev/null &` command
    to get the same results.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 `–J` 选项的 `prstat` 命令显示现有项目的摘要，`–R` 选项要求内核在 RT 调度类中执行 `prstat` 命令。如果读者遇到无法获得预期结果的问题，可以将
    `firefox` 命令替换为 `dd if=/dev/zero of=/dev/null &` 命令来获得相同的结果。
- en: It is important to highlight that while not all projects take their full share
    of the CPU, other projects can borrow some shares (percentages). This is the reason
    why `ace_proj_4` has 11 percent, because `ace_proj_1` has taken only 35 percent
    (the maximum is 40 percent).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特别强调的是，虽然并非所有项目都使用其完整的 CPU 份额，但其他项目可以借用一些份额（百分比）。这就是为什么 `ace_proj_4` 使用了 11%
    的原因，因为 `ace_proj_1` 仅使用了 35%（最大为 40%）。
- en: An overview of the recipe
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方案概述
- en: In this section, you learned how to change the default scheduler from TS to
    FSS in a temporary and persistent way. Finally, you saw a complete example using
    projects, tasks, and FSS.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学会了如何以临时和持久的方式将默认调度器从 TS 更改为 FSS。最后，您看到了一个使用项目、任务和 FSS 的完整示例。
- en: References
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: '*Solaris Performance and Tools: DTrace and MDB Techniques for Solaris 10 and
    OpenSolaris*; *Brendan Gregg*, *Jim Mauro*, *Richard McDougall*; *Prentice Hall*;
    ISBN-13: 978-0131568198'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Solaris 性能与工具：DTrace 和 MDB 技术用于 Solaris 10 和 OpenSolaris》*；*Brendan Gregg*，*Jim
    Mauro*，*Richard McDougall*；*Prentice Hall*；ISBN-13：978-0131568198'
- en: DTraceToolkit website at [http://www.brendangregg.com/dtracetoolkit.html](http://www.brendangregg.com/dtracetoolkit.html)
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DTraceToolkit 网站在 [http://www.brendangregg.com/dtracetoolkit.html](http://www.brendangregg.com/dtracetoolkit.html)
- en: Dtrace.org website at [http://dtrace.org/blogs/](http://dtrace.org/blogs/)
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dtrace.org 网站在 [http://dtrace.org/blogs/](http://dtrace.org/blogs/)

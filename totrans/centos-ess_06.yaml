- en: Chapter 6. Building a Deployment Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to set up a local CoreOS environment
    for development on a personal computer and a Test and Staging environment cluster
    on Google Cloud's Compute Engine VM instances.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover how to deploy code from the GitHub repository
    to our Test and Staging servers, and how to set up the Docker builder and Docker
    private registry worker for Docker image building and distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Code deployment on Test and Staging servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Docker builder and private Docker registry machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code deployment on Test and Staging servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to set up your Test and Staging environment
    on Google Cloud and deploy your web servers there. In this section, we will see
    how to deploy code to our web servers on Test and Staging environments.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying code on servers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To deploy code on our `Test1` and `Staging1` servers, we run the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying code on servers](img/image00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying code on servers](img/image00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now open the `tsc-test1` and `tsc-staging1` VM instance external IPs, copying
    them to your browser (you can check out the IPs at GC Console, Compute Engine,
    VM Instance).
  prefs: []
  type: TYPE_NORMAL
- en: The output you see depends on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Test server, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying code on servers](img/image00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is what you will see for the Staging server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying code on servers](img/image00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see what has happened here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we used `gcloud compute` to change the permissions for our `home/core/share/nginx/html`
    folder, as we need to be able to copy files there. We copied a single `index.html`
    file there.
  prefs: []
  type: TYPE_NORMAL
- en: In real-life scenarios, `git pull` should be used there to pull from the Test
    and Staging branches.
  prefs: []
  type: TYPE_NORMAL
- en: To automate releases to the `Test1/Staging1` servers, for example, Strider-CD
    can be used, but this is beyond the scope of this book. You can read about Strider-CD
    at [https://github.com/Strider-CD/strider](https://github.com/Strider-CD/strider)
    and practice implementing it.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Docker builder and private Docker registry worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have successfully deployed code (`index.html` in our case) in our Test/Staging
    environment on the cloud with the help of `gcloud compute`, by running it in a
    simple shell script.
  prefs: []
  type: TYPE_NORMAL
- en: Let's set up a new server in our Test/Staging environment on the cloud. It will
    build Docker images for us and store them in our private Docker Registry so that
    they can be used on our production cluster (you will learn how to set this up
    in the next chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Server setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As both Docker builder and Private Docker Registry fleet units will run on the
    same server, we are going to deploy one more server on the Test/Staging environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install a new server, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s install our new server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Server setup](img/image00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see what happened during the process of script installation:'
  prefs: []
  type: TYPE_NORMAL
- en: A new `server tsc-registry-cbuilder1` was created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The static IP's `10.200.4.1` forward route for the `tsc-registry-cbuilder1`
    instance was created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The external port `5000` was opened for the new server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File `reg-dbuilder1.sh` from the `files` folder got copied to `~/coreos-tsc-gce/bin`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `dbuilder.service` and `registry.service` fleet units from the `fleet` folder
    got copied to `~/coreos-tsc-gce/fleet`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we check out the GCE VM Instances at the GC console, we should see our new
    instance there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Server setup](img/image00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We now need to verify that our new server is working fine, so we perform `ssh`
    on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Server setup](img/image00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Very good! Our new server is up-and-running. Press *Ctrl* + *D* to exit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to verify that our server is connected to our cluster. So, run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The script''s output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Server setup](img/image00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Perfect! We can see that our new server has successfully connected to our cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Server setup](img/image00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Okay, now let''s install those two new fleet units:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Server setup](img/image00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s list the fleet units:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Server setup](img/image00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you see `activating start-pre`, give the `fleet` units a few minutes to pull
    the remote Docker images.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the status of the `fleet` units using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Server setup](img/image00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Suppose we try again in a couple of minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Server setup](img/image00158.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Then we can see that we've successfully got two new `fleet` units on our new
    `tsc-registry-cbuilder1` server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might remember from the previous chapter that the `set_cluster_access.sh`
    script does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It sets `PATH` to the `~/coreos-tsc-gce/bin` folder so that we can access executable
    files and scripts stored there from any folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It sets `FLEETCTL_TUNNEL` to our `control/etcd` machine's external IP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It prints machines at the cluster with `fleetctl list-machines`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It prints units at the cluster with `fleetctl list-units`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows us to work with a remote `etcd` cluster via a local `fleetctl` client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to deploy code on a remote Test/Staging cluster
    on GCE, and set up the Docker builder and private Docker registry machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following chapter, we will cover these topics: using our Staging and
    Docker builder and private registry servers to deploy code from Staging to production,
    building Docker images, and deploying them on production servers.'
  prefs: []
  type: TYPE_NORMAL

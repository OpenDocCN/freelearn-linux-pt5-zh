- en: Configuring a Secure and Optimized Kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The kernel is the core of any operating system, be it Windows or Linux. Linux
    is technically the kernel and not the complete operating system. Being the core
    of any operating system, the kernel is installed first and usually requires no
    manual configuration. Even if there are some kernel level updates to be installed,
    on a Linux system, it can be installed as a regular application. However, in some
    situations, compiling the kernel from source with some specific changes might
    be needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there might be a few situations where you need to compile the kernel
    yourself, from the source. These situations include:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling experimental features in the kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling new hardware support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging the kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the kernel source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before you can start building the Linux kernel, you must ensure that a working
    boot media exists for the Linux system. This can be used to boot into the Linux
    system, if the boot loader is not configured properly. You will learn how to create
    USB boot media, kernel source retrieving, configure and build a kernel, and installing
    and booting from a kernel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating USB boot media
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving the kernel source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and building the kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and booting from a kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel testing and debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the console for debugging using Netconsole
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging kernel boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking kernel parameters using Lynis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating USB boot media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A USB boot media can be created on any USB media device that is formatted as
    ext2, ext3, or VFAT format. Also, ensure that enough free space is available on
    the device, varying from 4 GB for transferring a distribution DVD image, 700 MB
    in case of a distribution CD image, or just 10 MB to transfer a minimal boot media
    image. Learning how to create a boot media will be beneficial for readers who
    are not very experienced with Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting the steps, you need to have an image file of a Linux installation
    disk, which you can name as `boot.iso`, and a USB storage device, as specified
    before.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start the procedure of creating the USB boot media, you need to perform
    the following commands as root:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Syslinux on your system, simply execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to install the Syslinux boot loader by executing the following command
    on the USB storage device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create mount points each for the `boot.iso` file and the USB storage device
    by executing this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, mount the `boot.iso` file on the mount point created for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the previous command, `-o loop` option is used for creating a pseudo device
    that acts as a block-based device. It treats a file as a block device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, mount the USB storage device on the mount point created for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once both `boot.iso` and USB storage device are mounted, copy the Isolinux files
    from `boot.iso` to the USB storage device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run the command to use the `isolinux.cfg` file from `boot.iso` as the
    `syslinux.cfg` file for the USB storage device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once done with the previous command, unmount `boot.iso` and the USB storage
    device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now reboot the system and then try to boot with the USB boot media to verify
    that you are able to boot with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you copy the required files from the `boot.iso` file to the USB storage
    media and use the `isolinux.cfg` file from `boot.iso` in the USB storage media
    as the `syslinux.cfg` file, it converts the USB storage media into a bootable
    media device that can be used to boot into the Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the kernel source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the Linux distributions include the kernel sources in them. However,
    these sources may tend to be a bit out of date. Because of this, you may need
    to get the latest sources when building or customizing the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the Linux kernel developer community uses the **Git** tool for source
    code management. Even Ubuntu has integrated Git for its own Linux kernel source
    code, hence enabling the kernel developers to interact better with the community.
    You can install the Git package using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Linux kernel source code can be downloaded from various sources, and here
    we will talk about the methods used to download from these sources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can find the Linux source code as a complete tarball and also as an incremental
    patch at the official webpage of the Linux kernel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://www.kernel.org](http://www.kernel.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: It is always recommended you use the latest version, unless you have a specific
    reason to work with an older version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ubuntu''s kernel source can be found under Git. Each release code of the kernel
    is separately maintained on `kernel.ubuntu.com` in its own Git repository, which
    is located at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`git://kernel.ubuntu.com/ubuntu/ubuntu-<release>.git`'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s located here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://kernel.ubuntu.com/git-repos/ubuntu/`'
  prefs: []
  type: TYPE_NORMAL
- en: You can clone the repository, using Git, to get a local copy. The command will
    get modified as per the Ubuntu release you are interested in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To obtain the precise tree, insert the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8d530ca-60e3-40cf-961b-bc07dfe1bfe4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To download any other tree, the syntax of the command will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The downloaded file will be in either GNU ZIP (`gzip`) format or `bzip2` format.
    After downloading the source file, you need to uncompress it. If the tarball is
    in `bzip2`, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If it is compressed GNU ZIP format, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the different methods mentioned here, you are able to download the source
    code of Linux kernel. Using any option depends on the user's choice and preference.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and building kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The need to configure the kernel could arise for many reasons. You may want
    to resize the kernel to run only the necessary services or you may have to patch
    it to support new hardware not supported earlier by the kernel. It could be a
    daunting task for any system administrator and in this section, you will see how
    you can configure and build the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is always recommended you have ample space for kernels in the boot partition
    in any system. You should either choose the whole disk install option or set aside
    a minimum of 3 GB disk space for boot partition. Once you are done with the installation
    of your Linux distribution and have configured the required development packages,
    enable sudo for your user account. Now update the system, before you start with
    installing any packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, you need to install a few packages before getting started. This
    includes the packages mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: Latest version of `gcc`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ncurses development package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages needed for cross-compiling Linux kernels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package to run make menuconfig
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To do so, use the command given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: These packages are used while configuring and compiling the Linux kernel on
    an `x86_64` system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you are done with the steps in the *Getting ready* section, you can move
    on to the process of configuring and building the kernel. This process will take
    a lot of time, so be prepared:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the Linux kernel by visiting[ http://www.kernel.org](http://www.kernel.org)
    as shown in the screenshot here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9777a2d3-8ff1-4bd2-b024-1e9fa1f90d4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Or you can use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/9864d311-835c-49f0-974d-ea46271f55c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the download is completed, move to the folder where the download has been
    saved. The command to do this will be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**![](img/1151a91e-8c8d-4cea-b134-0774a069b4be.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now extract the downloaded tar file to `/usr/src/` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/284325cd-e7c7-4e2a-a933-e49453ef86f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, change to the folder where the files have been extracted.:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f80d916-2e50-4992-adfe-b8a0a39ae3da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now run the command to configure the Linux kernel for compiling and installing
    on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0628c2cd-007e-406e-bf4b-f850af828070.png)'
  prefs: []
  type: TYPE_IMG
- en: You may have to use `sudo` before the command if your account doesn't have admin
    privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the previous command is executed, a pop-up window will appear containing
    lots of menus, as shown here. Select the items of the new configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a73f181-5f9b-4084-9ad2-3046ea5f6611.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You need to check for the filesystems menu, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1d33636-aa1c-4ace-9d9e-5058649cdb2d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under the menu, check whether `ext4` has been chosen or not, as shown in the
    screenshot. If it is not selected, you need to select it now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23002b47-a21f-439a-82c2-0bd4ff72da3e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And then provide a name and save the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86d05651-8a37-4e5f-bc5e-9e4c605b4c15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now compile the Linux kernel. The compile process will take around 40 to 50
    minutes to complete, depending on the system configuration. Run the command as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding command is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5070db44-4f22-466b-859f-4bc8de0e608a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You first download the Linux kernel source and then, after extracting it to
    a particular location, you configure the kernel for the compilation process.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and booting from a kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After having spent a lot of time configuring and compiling the kernel, you can
    now start the process of installing the kernel to the local system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting with the installation of the kernel, make sure you back up all
    your important data on the system. Also make a copy of `/boot/` onto external,
    storage which is formatted in the FAT32 filesystem. This will help repair the
    system if the installation process fails for any reason.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the kernel is compiled, you can start following the commands here to proceed
    with installing the kernel:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the drivers by running the command, if activated as modules. The command
    will copy the modules to a sub-directory of `/lib/modules`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4317fad9-bc0b-4bc0-a3ee-48bb623fb200.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now run the following command to install the actual kernel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will show the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ea1de45-8e6f-46c8-851a-5eb2af16b026.png)'
  prefs: []
  type: TYPE_IMG
- en: This command executes `/sbin/installkernel`. The new kernel will be installed
    into `/boot/vmlinuz-{version}`. If a symbolic link already exists for `/boot/vmlinuz`,
    it will be refreshed by linking `/boot/vmlinuz` to the new kernel. The previously
    installed kernel will be available as `/boot/vmlinuz.old.` The same will happen
    for the config and `System.map` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, copy the kernel to `/boot` directory by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will show the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/deca58cc-a89d-44b4-b703-28f49ef2fef3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now make an initial RAM disk:![](img/2ed5305c-9d31-4a41-b031-f2f1f5819135.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to copy `System.map`, which contains the list of kernel symbols
    and their corresponding address. Run the given command to do this appending the
    kernel's name in the destination file:![](img/57756179-2cb7-45d8-9be4-123c6a0612ab.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a `symlink /boot/System.map` file, which will point to `/boot/System.map-YourKernelName`,
    if `/boot` is on a filesystem that supports `symlinks`:![](img/40c27f8a-0fcd-4836-9b4a-72be98718abe.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `/boot` is on a filesystem that does not support symlinks, just run `cp /boot/System.map-YourKernelName
    /boot/System.map`
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the kernel is configured and compiled, it can be installed on the system.
    The first command will copy the modules to a sub-directory of `/lib/modules`.
    The second command executes `/sbin/installkernel`. Also, the new kernel will be
    installed into `/boot/vmlinuz-{version}`. While doing this, if a symbolic link
    already exists for `/boot/vmlinuz`, it will get refreshed by linking `/boot/vmlinuz`
    to the new kernel. And the previously installed kernel will be available as `/boot/vmlinuz.old`.
    The same will happen for the config and `System.map` files. Once everything is
    done, we can reboot the system to boot from the new kernel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e74b13e-2b3f-4eb5-ae30-49d2ca3c6184.png)'
  prefs: []
  type: TYPE_IMG
- en: Kernel testing and debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important part of any open or closed software development cycle is testing
    and debugging. And the same applies to the Linux kernel. The end goal of testing
    and debugging is to ensure that the kernel is working in the same way as earlier,
    even after installing a new kernel source code.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring console for debugging using netconsole
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the biggest issues with the Linux kernel is kernel panic. It is similar
    to the *Blue Screen of Death* for Microsoft Windows operating systems. If the
    kernel panics, it will dump a lot of information on the screen and just stay there.
    It is very difficult to trace a kernel panic if the system is rebooted as no logs
    are created for it. To solve this issue, we can use Netconsole. It is a kernel
    module that helps by logging kernel `printk` messages over UDP. This is helpful
    with debugging problems when logging on disk fails.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before starting with the configuration of Netconsole, you need to know the
    MAC address of the system, where the UDP packets will be sent. This system can
    be called the receiver and it may be in the same subnet or a different one. These
    two cases are described here. Let''s look at the first case, when receiver is
    in the same subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: The IP address of the receiver in this example is `192.168.1.4`. We will send
    the UDP packets to this IP address using this command:![](img/e58fe079-3eec-4960-8007-f1a224a30f46.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's find the MAC address of the receiver system by executing the following
    command. Here, the IP address is of the receiver system:![](img/30f22507-aac8-4fc3-8696-295ec4590484.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see in the previous example, `90:00:4e:2f:ac:ef` is the MAC address
    we need. Let's look at the second case, when receiver is not in the same subnet.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we need to first find the default gateway. To do so, run the command
    shown here:![](img/d6d1bcfc-a459-4073-9cf5-f56a0f53e67e.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, the default gateway is `192.168.1.1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to find the MAC address of the default gateway. First, send a packet
    to the default gateway:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/40ad101a-e4b0-482a-bf4d-8fe00df53d0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's find the MAC address:![](img/345dffb0-ced9-42e1-89dd-a97ffd388cdc.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, `c0:3f:0e:10:c6:be` is the MAC address of the default gateway that we
    need. Now that we have the MAC address of the receiver, we can start with the
    configuration process of Netconsole.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin with, you need to change the kernel options at the boot time. If you
    are using GRUB as the bootloader, it will by default boot the kernel with the **quiet
    splash** option. However, you don''t want that to happen, so you need to change
    the kernel options:'
  prefs: []
  type: TYPE_NORMAL
- en: First, create a backup of `/etc/default/grub`:![](img/5566afb3-6e7a-48dc-9ffd-7dc05e7d4e41.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open any editor of your choice to edit `/etc/default/grub`:![](img/5c483e39-1732-4a8d-bc64-881b0fc9a18a.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the line `GRUB_CMDLINE_LINUX_DEFAULT="quiet splash` and replace it with
    `GRUB_CMDLINE_LINUX_DEFAULT="debug ignore_loglevel"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7acfcab7-3b60-4f79-932c-d606086f70fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Now run the command to update GRUB accordingly:![](img/a68f99fe-9625-4ee6-9c1d-feb2241a1f6e.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you are done with these commands, you need to initialize Netconsole at
    boot time. For this, we first need to know the IP address and the interface of
    the *sender* system. This can be done by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bd1732a0-7104-4683-9428-80bce6e8925a.png)'
  prefs: []
  type: TYPE_IMG
- en: You also need the IP address and MAC address of the receiver system, which we
    have already got in the *Getting ready* section.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's start initializing Netconsole. First, let's get Net­con­sole to load
    on boot by adding the mod­ule to `/etc/modules`:![](img/e6d3648c-b7ad-4054-b4c0-3dc4821d2170.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, make sure that it has the proper options configured as well. For this,
    add the module options to the `/etc/modprobe.d/netconsole.conf` file and run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5735fb3-d161-4e38-a35e-038bde21e7b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the previous command, the part that starts with `netconsole` has the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We have used `6666` for both the `<LOCAL_PORT>` and `<REMOTE_PORT>`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to set up the *receiver.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Depending on which version of Linux is being used as receiver, the command
    to set up the receiver may vary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Or try it without the IP address, if the previous command doesn''t work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If you are using a different variant of Linux that has a different version of
    Netcat, the following error message will be printed when you try the previous
    commands:![](img/dd9ea211-32b0-49bd-8832-87a4db9cf93c.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you get the error message, you can try this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5831298f-33eb-4113-8055-efc90227018f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let the previous command keep running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, you need to check whether everything is working properly. Reboot the
    sender system and then execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/47bcf300-b319-485c-926a-04435d1047ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you need to check the receiver system to see whether the kernel messages
    have been received or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once everything is done, press *Ctrl* + *C.* Then you can check for the messages
    in `~/netconsole.log`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To capture kernel panic messages, we configure Netconsole, which logs the messages
    over the network. To do this, we need one more system on the network, which serves
    as receiver. Firstly, we try to find the MAC address of the receiver system. Then
    we change the kernel boot options. After updating GRUB, we start initializing
    Netconsole on the sender system that we want to debug. Finally, we set up the
    receiver system to start receiving the kernel messages.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using a Windows system as receiver, then we can use Netcat for Windows
    as well, which is available at `http://joncraton.org/files/nc111nt.zip`.
  prefs: []
  type: TYPE_NORMAL
- en: Download the file from the given link and extract it somewhere like `C:\Users\Tajinder\Downloads\nc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open Command Prompt (Start | `Run` | `cmd`). Then move to the folder where
    you have extracted Netcat:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/324cadb2-8bae-45d8-8650-5931b0f8cef0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9deec73-612a-46ec-ac0e-0b5973b0fc1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, `192.168.1.3` is the same as `<RECEIVER_IP_ADDRESS>`. Let the previous
    command run and continue with the commands in step 9\. Once it's done, press *Ctrl*
    + *C*. You will find the messages in `netconsole.txt.`
  prefs: []
  type: TYPE_NORMAL
- en: Debugging kernel boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes your system might fail to boot due to changes within the kernel. Hence
    it is important that when creating reports about these failures, all the appropriate
    information about debugging is included. This will be useful for the kernel team
    in resolving the issue.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are trying to capture error messages that appear during boot, then it
    is better to boot the kernel with the `quiet` and `splash` options removed. This
    helps you see the messages, if any, that appear on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To edit boot option parameters, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Boot the machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the BIOS screen, press the *Shift *key and hold it down. You should see
    the GRUB menu after the BIOS loads:![](img/ed56ecff-eea0-4099-aedf-026449a44811.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the kernel entry you want to boot and press *e*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then remove the `quiet`and `splash`keywords (found in the line starting with
    `linux`).![](img/2e712f2b-4c42-48ef-a0df-2e59b3e94867.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl + X* to boot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can see the error messages, if any, on the screen. Depending on the type
    of error messages you encounter, there are other boot options you could try. For
    example, if you notice ACPI errors, try booting with the `acpi=off`boot option.
  prefs: []
  type: TYPE_NORMAL
- en: Kernel errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kernel panic or kernel error is a term used when a Linux system has come to
    halt and seems unresponsive. When the kernel detects an abnormal situation, it
    voluntarily halts the system activity. When the Linux system detects an internal
    fatal error from which it cannot recover safely, it generates a kernel panic.
  prefs: []
  type: TYPE_NORMAL
- en: Causes of kernel errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Linux, a kernel error can be caused due to various reasons. Here we will
    discuss a few of the reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware – Machine Check Exceptions**: This type of kernel error is caused
    when a component failure is detected and reported by the hardware through an exception.
    This typically looks like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Error Detection and Correction (EDAC):** If any memory chip and PCI transfer
    error is detected, the hardware mechanism reports it causing EDA errors. This
    error gets reported in `/sys/devices/system/edac/{mc/,pci}` and typically looks
    like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Non-Maskable Interrupts (NMIs)**: When a standard operating system mechanism
    is unable to ignore or mask out an interrupt, it is called a **Non-Maskable Interrupt**
    (**NMI**). It is generally used for critical hardware errors. A sample NMI error
    appearing in `/var/log/messages` would look like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Software – The BUG() macro**: When any abnormal situation is seen indicating
    a programming error, kernel code causes this kind of kernel error. It typically
    looks like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Software – Pseudo-hangs**: These type of errors are commonly encountered,
    when the system appears to be hung, and could have several reasons for this kind
    of behavior such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Livelock**: When running a real-time kernel, if application load is too high,
    it could lead the system to a situation where it becomes unresponsive. The system
    is not completely hung, but appears to be as it is moving so slowly.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A sample error message getting logged in `/var/log/messages`, when the system
    is frequently hung, looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**Software – Out-of-Memory killer**: This type of error or panic is triggered
    when some memory needs to be released by killing a few processes, when a case
    of memory starvation occurs. This error typically looks like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Whenever a kernel panic or error occurs, you may have to analyze these errors
    to diagnose and troubleshoot them. This can be done using the Kdump utility. Kdump
    can be configured using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install `kexec-tools`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the `/etc/grub.conf` file, and insert `crashkernel=<reservered-memory-setting>` at
    the end of kernel line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit `/etc/kdump.conf` and specify the destination for sending the output of
    `kexec`, that is `vmcore`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Discard unnecessary memory pages and compress only the ones that are needed
    by configuring the Core collector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking kernel parameters using Lynis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any operating system is as strong as its weakest link. In the case of Linux,
    any weakness in its kernel would imply a total compromise of the system. Hence
    it is necessary to check the security configuration of the Linux kernel.
  prefs: []
  type: TYPE_NORMAL
- en: In this topic, we will see how to use Lynis to check for kernel parameters automatically.
    Lynis has several predefined key pairs to look for in kernel configuration and
    accordingly provide advice.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To view or edit any security related parameter of Linux kernel, there is the
    `/etc/sysctl.conf` file. All the parameters are stored in this file and this is
    read during boot time. If you wish to see the available kernel parameters in this
    file, you can do so by running the `command:sysctl -a`. This command will display
    an extensive list of configuration settings. The kernel security parameters are
    also in this list. Lynis helps check the kernel security parameters in this file
    automatically, thus avoiding the hassle of checking each parameter manually. To use
    Lynis, write access to `/tmp` is needed by the user account running the tool.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lynis is an open source security tool that helps with audits of systems running
    UNIX derivatives such as Linux, macOS, BSD, Solaris, AIX, and others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the list of following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step to using Lynis is to download its package. This can be done
    from this link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://cisofy.com/downloads/lynis/](https://cisofy.com/downloads/lynis/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0018eb17-54da-4764-9e45-3aae1f9de4b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you click on download, you will get a tarball file to save. Save it in
    any folder on your system:![](img/d11f2c79-6fdf-4952-b8f2-3601b41dfd8e.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to extract the content from the tar file. You do this by running
    this command:![](img/8781ba0c-d30c-430b-a75f-eb54292914d6.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the extraction is complete, you will get a directory named `lynis` in the
    same directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Move inside the `lynis` directory and list the files present inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52b1e1c5-4731-468c-8444-4ca5e3684091.png)'
  prefs: []
  type: TYPE_IMG
- en: Inside the `lynis` directory, among other files, you see an executable file
    again named `lynis`. Once you run this file, you will be able to see all the options
    available for using the lynis tool. So you run the tool as shown:![](img/d219f67e-c7f2-417a-9f91-85e1b48ceecc.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To audit the kernel parameters you use the `audit system` parameter. Once you
    run Lynis using this parameter, it will start auditing the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/643312f5-24d3-4016-a60e-1925bc5bff8b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Among the results, you will also get the list of kernel parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba9b0b36-87b9-4504-a586-0a1e644efa3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The kernel parameters will be displayed in the results, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/84f24478-2d19-4430-b4a3-3e31704e657d.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on the OS and kernel version, the number of parameters may change. If
    any parameter is incorrectly configured, Lynis will inform you and provide suggestions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

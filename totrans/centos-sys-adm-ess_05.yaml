- en: Chapter 5. Herding Cats – Taking Control of Processes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。驯猫术 – 控制进程
- en: 'All too often, Linux administrators without the insight that you have, will
    leave services running as shipped after a Vanilla install of CentOS. We know how
    important it is to be able to justify each running process and service on systems
    that we manage, and in this chapter, you will gain the insight to manage this.
    While we are here, we will take a look at the new Upstart services that are replacing
    the System V scripts, which we have become so accustomed to. Here is a list of
    sections we will go through in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 很多 Linux 管理员，如果没有你这样的洞察力，通常会在 CentOS 的原生安装后就直接运行服务，而没有进行适当的配置。我们知道，能够证明我们所管理系统中的每个运行进程和服务的重要性是至关重要的，在这一章中，你将获得管理这些服务的深刻理解。与此同时，我们将看看替代了我们习惯使用的
    System V 脚本的新 Upstart 服务。以下是我们将在本章中讨论的章节列表：
- en: '**Managing services with Upstart**: Investigate how to control services in
    CentOS 6.5 using Upstart and the `/etc/init` and `/etc/event.d` directories'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Upstart 管理服务**：研究如何在 CentOS 6.5 中使用 Upstart 和 `/etc/init` 与 `/etc/event.d`
    目录来控制服务'
- en: '**Creating your own Upstart script**: Learn how to create custom startup script
    for Upstart to manage your own needs at system boot'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建你自己的 Upstart 脚本**：学习如何为 Upstart 创建自定义启动脚本，以便在系统启动时管理你自己的需求'
- en: '**Managing processes**: Gain practice with the p series of tools from the package
    procps to manage running processes: ps, pstree, pgrep, pmap, and pkill'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理进程**：通过练习来自 procps 包的一系列工具来管理运行中的进程：ps、pstree、pgrep、pmap 和 pkill'
- en: Managing services with Upstart
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Upstart 管理服务
- en: For many years now, we have become used to managing services with System V init
    scripts that date back many years. However, without the desire to improve and
    the dedicated meliorism of so many in the open source community, we would not
    move on and improve. In CentOS 6.5, we now see some services being managed from
    the configurations within the `/etc/init` directory. These services make use of
    Upstart. This may be short-lived, as the beta release of Red Hat Enterprise Linux
    7 uses a similar service manager, systemd, which is likely to prevail over Upstart.
    That said, both Upstart and systemd are managed in a very similar way, so visiting
    Upstart here is not an issue.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，我们一直习惯于使用 System V 初始化脚本来管理服务，这些脚本可以追溯到很多年前。然而，如果没有开放源代码社区中那么多人的努力和持续改进的精神，我们就无法前进和提升。在
    CentOS 6.5 中，我们现在看到一些服务通过 `/etc/init` 目录中的配置来管理。这些服务使用了 Upstart。虽然这可能是短期的，因为 Red
    Hat Enterprise Linux 7 的测试版版本使用了类似的服务管理器 systemd，systemd 很可能会取代 Upstart。不过，Upstart
    和 systemd 的管理方式非常相似，因此在这里讨论 Upstart 并没有问题。
- en: 'Firstly, we can check to see that we are indeed using `upstart` using the following
    command:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以通过以下命令检查是否正在使用 `upstart`：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output from the preceding command should list the package as being installed.
    The service uses the `/etc./init` directory for its configuration and from here,
    we can see the services that utilize Upstart. Using the `rpm` command, we can
    check which package created this directory:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出应该会列出安装的包。该服务使用 `/etc./init` 目录作为其配置，我们可以在这里查看使用 Upstart 的服务。通过 `rpm`
    命令，我们可以检查哪个包创建了这个目录：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The output shows the directory belonging to the `upstart` package. On CentOS,
    we have just a few services that are controlled via Upstart; however, we will
    see that it is very easy to configure our own services as required using this
    mechanism.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示该目录属于 `upstart` 包。在 CentOS 中，我们只有少数几个服务是通过 Upstart 管理的；然而，我们会发现，使用这种机制配置自己的服务非常容易。
- en: 'Within the `/etc/init` directory, we can see that the consoles screens are
    managed by `upstart` with the `tty.conf` file, and we can also see the `splash-manager.conf`
    file. This service is enabled for reboot and poweroff, runlevel 0 and 6, to request
    the Plymouth splash screens (remember Plymouth from [Chapter 2](ch02.html "Chapter 2. Cold
    Starts"), *Cold Starts*). The beauty of both Upstart and systemd is that we do
    not need to manage the symbolic links in the run control directories the way we
    required with older System V scripts. Taking a look inside the `/etc/init/spash-manager.conf`
    file, we can see when the service will run and that this is provided directly
    without reference to the old symbolic links. The following is an example of an
    Upstart directive:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/etc/init`目录中，我们可以看到控制台屏幕由`upstart`通过`tty.conf`文件进行管理，还可以看到`splash-manager.conf`文件。该服务启用了重启和关机功能，在运行级别0和6时，请求Plymouth启动画面（记得Plymouth来自于[第2章](ch02.html
    "第2章 冷启动")，*冷启动*）。Upstart和systemd的一个优点是，我们不再需要像旧的System V脚本那样管理运行控制目录中的符号链接。查看`/etc/init/spash-manager.conf`文件，我们可以看到服务何时启动，而且这一切都直接提供，而不依赖于旧的符号链接。以下是一个Upstart指令的示例：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding line states that Upstart will run the scripts contained in the
    configuration file on starting and on changing to runlevel 0 and 6\. It is as
    simple as that. The configuration may also contain everything that is required
    to run the service; this file becomes the autonomous service we have been looking
    for, self-contained in the single configuration file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上述行表示，Upstart将在启动时以及切换到运行级别0和6时执行配置文件中的脚本。就这么简单。配置文件也可以包含运行服务所需的所有内容；这个文件成为我们寻找的独立服务，所有内容都包含在这个单一的配置文件中。
- en: Creating your own Upstart script
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您自己的Upstart脚本
- en: 'One of the best ways in which you can learn about these services is to create
    your own configuration file containing the Upstart script and all the associated
    conditions for our service. The configuration file will require the extension
    of `.conf` and has to be created in the `/etc/init` directory. For the purpose
    of this demonstration, we will create a simple service with the well-researched
    and inventive name: `sample`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 学习这些服务的最佳方法之一是创建自己的配置文件，包含Upstart脚本和与服务相关的所有条件。配置文件需要以`.conf`扩展名结尾，并且必须在`/etc/init`目录中创建。为了演示，我们将创建一个简单的服务，名称为经过充分研究和富有创意的`sample`。
- en: 'Using the text editor vi to create the `/etc/init/sample.conf` file, the service
    begins to take shape:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文本编辑器vi创建`/etc/init/sample.conf`文件，服务开始初具雏形：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The service itself does nothing other than use the logger program to write to
    the syslog daemon; we can read the output from the `/var/log/messages` logfile.
    You, of course, could adjust the service to do more; however, this acts as a great
    start in demonstrating how compact the services can be.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务本身仅使用logger程序写入syslog守护进程；我们可以从`/var/log/messages`日志文件中读取输出。当然，您可以调整服务以做更多的事情；但是，这为我们展示了服务如何简洁。
- en: 'We can test the service using the `/sbin/initctl` command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`/sbin/initctl`命令来测试服务：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The service can be manually started as we have shown here, if not manually started,
    it will start automatically, or at least send the message to the logfile when
    the system enters runlevel 3 or 5.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果像我们这里展示的那样，服务可以手动启动，如果没有手动启动，它将自动启动，或者至少在系统进入运行级别3或5时，发送消息到日志文件。
- en: '![Creating your own Upstart script](img/5920OS_05_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![创建您自己的Upstart脚本](img/5920OS_05_01.jpg)'
- en: 'Along with the script option that we used here, we can additionally run pre
    or post scripts, especially useful where the service is a binary and we need to
    endure a certain environment in which it can run. There is an `exec` directive
    that can be used in place of the `script` directive where a single binary should
    run in place of the script. The full life cycle of an upstart service includes:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们在这里使用的脚本选项外，我们还可以运行前置或后置脚本，尤其在服务是二进制文件时非常有用，我们需要确保它可以在某些环境中运行。可以使用`exec`指令来代替`script`指令，单个二进制文件将在脚本的位置运行。Upstart服务的完整生命周期包括：
- en: Pre-start
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pre-start
- en: Post-start
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Post-start
- en: Main (using exec or script)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主体（使用exec或script）
- en: Pre-stop
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pre-stop
- en: Post-stop
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Post-stop
- en: The advantages that we gain from using Upstart and/or systemd is that we are
    no longer restricted to only starting services for given runlevels; we can also
    start these services for events such as disks (or block devices) being added or
    other services being started. Many of these event driven services can be found
    in the `/etc/event.d` directory.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Upstart和/或systemd的优势在于，我们不再仅仅局限于为给定的运行级别启动服务；我们还可以为诸如磁盘（或块设备）添加或其他服务启动等事件启动这些服务。许多基于事件的服务可以在`/etc/event.d`目录中找到。
- en: 'We can control Upstart services using the `/sbin/initctl` command. To view
    the options available, the following command can be used with the `help` option:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`/sbin/initctl`命令来控制Upstart服务。要查看可用的选项，可以使用带有`help`选项的以下命令：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output will show that the `version` option can be used to check the version
    of Upstart in use, as seen in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示可以使用`version`选项检查正在使用的Upstart版本，如下图所示：
- en: '![Creating your own Upstart script](img/5920OS_05_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![创建自己的Upstart脚本](img/5920OS_05_02.jpg)'
- en: Managing processes
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理进程
- en: The bulk of this chapter will visit the `procps` package and the p series commands
    that we can use to manage our processes to make sure that we can fully appreciate
    the power that these tools can offer from the command line.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的大部分内容将介绍`procps`软件包和一系列我们可以使用的p命令，以帮助我们管理进程，确保我们能充分理解这些工具从命令行中提供的强大功能。
- en: Many administrators are accustomed to using the `ps` command to determine the
    running process, and often the output is then piped to `grep` to search for a
    given process name. Although there is nothing incorrect with this as such, we
    may prefer to use tools that streamline these steps and are specifically designed
    tools for the purpose. For the moment, we will ignore the `/ps` command in preference
    of more specific tools with a real purpose to their binary lives.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 许多管理员习惯使用`ps`命令来确定正在运行的进程，并且经常将输出通过管道传递给`grep`来搜索给定的进程名称。虽然这样做没有错，但我们可能更倾向于使用能简化这些步骤、专门为此目的设计的工具。目前，我们将忽略`/ps`命令，而倾向于使用具有明确用途的更专业工具。
- en: Using the pgrep command
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`pgrep`命令
- en: 'The `/usr/bin/pgrep` command really does become a snap-in replacement for the
    `ps` and `grep` pipelines we use all too often. For example, if I start my Apache
    web server, I can easily check the **Process IDs** (**PIDs**) in use by the service:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`/usr/bin/pgrep`命令实际上成为了我们经常使用的`ps`和`grep`管道的轻松替代。例如，如果我启动了Apache Web服务器，我可以轻松检查该服务正在使用的**进程ID**（**PID**）：'
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of the command follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下：
- en: '![Using the pgrep command](img/5920OS_05_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![使用`pgrep`命令](img/5920OS_05_03.jpg)'
- en: From the output, I can see the lowest PID, in my case **3950**. This will be
    the main daemon process that will spawn the child processes. Knowing how much
    we enjoy the easy life, we can see how effortlessly we can the child processes
    to the parent using the `pstree` command with the parent process as the argument.
    There are eight child processes in my case, no need to use my thumbs to count
    these.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，我可以看到最低的PID，在我的例子中是**3950**。这将是主要的守护进程，它将生成子进程。考虑到我们喜欢轻松的生活，可以看出通过将父进程作为参数，使用`pstree`命令，我们可以毫不费力地将子进程添加到父进程。在我的例子中有八个子进程，根本不需要用拇指去数它们。
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s the output to the preceding command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前一个命令的输出：
- en: '![Using the pgrep command](img/5920OS_05_04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![使用`pgrep`命令](img/5920OS_05_04.jpg)'
- en: Using the pstree command
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`pstree`命令
- en: This utility is so under used; I am sure that many administrators just know
    to execute the command without arguments or options. We have seen with the previous
    example how powerful it can be, but of course there is much more.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具被低估了；我相信许多管理员只知道执行命令而不加任何参数或选项。我们已经看到在前面的示例中它有多强大，但当然还有更多功能。
- en: The `pstree` command, when run without arguments or options, will list the process
    tree from PID 1 through all running processes showing each in a hierarchical form
    linked by **parent process ID** (**PPID**) and PID.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`pstree`命令在没有任何参数或选项的情况下运行时，将列出从PID 1开始的所有正在运行的进程树，以层级结构的形式显示每个进程，并通过**父进程ID**（**PPID**）和PID相互连接。'
- en: 'To take it a step further, we can use the `-h` option, which will highlight
    the process tree in which we run `pstree`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步，我们可以使用`-h`选项，它将高亮显示我们运行`pstree`的进程树：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows the highlighted extract from `pstree`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了从`pstree`中高亮显示的摘录：
- en: '![Using the pstree command](img/5920OS_05_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![使用`pstree`命令](img/5920OS_05_05.jpg)'
- en: We can see from the previous screenshot that we have run `pstree` from a `gnome-terminal`
    in which we had been running the Bash shell in a **substituted user** (**SU**)
    environment; it is all laid out clearly for us to see.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的截图中可以看到，我们是在`gnome-terminal`中运行`pstree`命令的，并且我们曾在**替代用户**（**SU**）环境中运行Bash
    shell；这一切都清晰地展现在我们眼前。
- en: 'Running something similar, we can highlight the process tree for the `httpd`
    process running at PID `3950` using the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 执行类似的命令，我们可以用以下命令高亮显示运行在PID `3950`的`httpd`进程树：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On my system, this can be seen in the following extract from the screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的系统上，可以从下面的截图摘录中看到这一点：
- en: '![Using the pstree command](img/5920OS_05_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![使用pstree命令](img/5920OS_05_06.jpg)'
- en: 'Using `pstree` with the `-a` option will show the process and any arguments
    used when it was started. This can be useful to see that a service is taking the
    correct configuration options:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pstree`命令并加上`-a`选项，会显示进程及其启动时使用的任何参数。这对于查看某个服务是否使用了正确的配置选项非常有用：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using the pkill command
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用pkill命令
- en: 'When we reconsider from where we started this chapter, with the understanding
    that many administrators are accustomed to using the `ps` command and piped to
    `grep`, we should question the need to run the `ps` command in the first place.
    Perhaps we do this in order to kill a process. We did show earlier in this chapter
    how we can simplify and streamline the `ps`/`grep` pipeline with `pgrep`; the
    reality though, is that, we can streamline it further with `pkill`. Let''s assume
    that we are running CentOS as a desktop, and while running the Firefox web browser
    we notice that is has become unresponsive, we can simply use the `pkill` to resolve
    the issue:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从本章开始的地方重新考虑时，了解到许多管理员习惯使用`ps`命令并将其与`grep`结合使用，我们应该质疑首先运行`ps`命令的必要性。也许我们这么做是为了终止一个进程。我们之前已经展示了如何通过`pgrep`简化和精简`ps`/`grep`管道；然而，现实是，我们可以通过`pkill`进一步简化这一过程。假设我们正在运行CentOS桌面，并且在使用Firefox浏览器时注意到它变得没有响应，我们可以直接使用`pkill`命令来解决这个问题：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Of course, the process names in Linux are case sensitive, but you do get used
    to the names of those processes that you may often need to whip into shape with
    a little `pkill`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Linux中的进程名称是区分大小写的，但你会习惯那些你可能经常需要通过`pkill`来清理的进程名称。
- en: 'We can also kill all processes owned by a particular user. They may have done
    something really bad, and their session is totally unresponsive. We could try:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以终止某个特定用户所拥有的所有进程。也许他们做了什么很糟糕的事情，他们的会话完全没有响应。我们可以尝试：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding command will send the kill signal (`-9`) to all processes owned
    by the user `bob`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将向用户`bob`所拥有的所有进程发送`-9`终止信号。
- en: 'If it is just processes in one terminal that we need to concern ourselves with,
    then we could use the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只需要关注一个终端中的进程，那么我们可以使用以下命令：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will kill all processes running in the `tty2` console. If we own the running
    processes, we can execute the `pkill` command as our own account. If we don''t
    own those processes, then the commands need to be run as root. We have been using
    the `-9` signal in the last few examples, as we want to be sure to remove all
    process. It may be better to run the commands in the following way for best practice:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将终止在`tty2`控制台中运行的所有进程。如果我们拥有这些正在运行的进程，我们可以以自己的账户执行`pkill`命令。如果我们没有拥有这些进程，那么命令需要以root用户身份运行。在之前的示例中，我们一直使用`-9`信号，因为我们希望确保删除所有进程。为了最佳实践，最好以以下方式运行命令：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this way, we issue the terminate signal first (`-15`) and then the kill (`-9`).
    In this way, processes are shutdown gracefully if they respond to the initial
    terminate request; those that are unresponsive to the terminate signal are then
    cleaned up with the final kill.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们首先发送终止信号（`-15`），然后再发送杀死信号（`-9`）。这样，如果进程响应初始的终止请求，则会优雅地关闭；那些对终止信号没有反应的进程，则会在最终的终止信号下被清理。
- en: Just because a process does not respond to the terminate request, it does not
    mean that the process has hung; the bash shell, for example, does not respond
    to a terminate request, it has to be killed outright. This is just how the program
    is written.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅因为一个进程没有响应终止请求，并不意味着该进程已经挂起；例如，bash shell不会响应终止请求，它必须被直接杀死。这就是程序的编写方式。
- en: 'To see a list of signals that can be issued, we should use the `/usr/bin/kill`
    command with the `-l` (list) option as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可以发送的信号列表，我们应该使用`/usr/bin/kill`命令并加上`-l`（列出）选项，如下所示：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'An extract from the output can be seen in the following screen capture:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图中可以看到部分输出：
- en: '![Using the pkill command](img/5920OS_05_07.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![使用 pkill 命令](img/5920OS_05_07.jpg)'
- en: Although many possible signals exist, they must be written into the program
    if it is to respond to the signal. This is where the `-9` or `-sigkill` option
    is useful, although abrupt, the signal works directly with `init` to remove the
    process rather than relying on the application to respond.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在许多可能的信号，但如果程序要响应信号，必须将它们写入程序中。这就是 `-9` 或 `-sigkill` 选项有用的地方，尽管它比较突然，但该信号直接与
    `init` 交互来移除进程，而不是依赖应用程序做出响应。
- en: Using the pmap command
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 pmap 命令
- en: Another useful tool from the `procps` package that we can use to gain information
    on running processes is the `pmap` command. This can be used to print a memory
    map for a running process. In simple terms, it will show you how much memory is
    being used by the process and any library modules that it uses.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`procps` 包中的另一个有用工具是 `pmap` 命令，我们可以用它来获取正在运行的进程的信息。简而言之，它会显示进程正在使用多少内存，以及它使用的任何库模块。'
- en: 'To gain information on the PID for the current shell, we can use the special
    variable `$$`; thus, `pmap $$` will show me the process map for my current shell:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取当前 shell 的 PID 信息，我们可以使用特殊变量 `$$`；因此，`pmap $$` 将显示我当前 shell 的进程映射：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The output looks most impressive; firstly we see that `$$` on this system resolves
    to the PID 7259 and `/bin/bash`. As the process map continues, we see the address
    column followed by the size of memory in use by each component of `/bin/bash`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 输出看起来非常令人印象深刻；首先，我们看到在此系统中，`$$` 被解析为 PID 7259 和 `/bin/bash`。随着进程映射的继续，我们看到地址列，接着是
    `/bin/bash` 每个组件所使用的内存大小。
- en: 'From the following partial screenshot, we can see the output that you can expect
    from the `pmap` command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下部分截图中，我们可以看到从 `pmap` 命令获取的输出：
- en: '![Using the pmap command](img/5920OS_05_08.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![使用 pmap 命令](img/5920OS_05_08.jpg)'
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have been able to while away a little boondoggle time, learning
    about the `procps` package in CentOS Linux and all the treasures that it can reveal.
    The tools therein are a gold mine to administrators and can save us all valuable
    time where we elect the most effective tool to be used in the examining processes.
    Putting this into practice, we have seen the effortless use that can be made from
    the `pgrep` and `pkill` commands in streamlining our process management, while
    tools such as `pmap` are more useful for diagnosing system resource usage.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们花了一些时间了解 CentOS Linux 中的 `procps` 包及其能揭示的所有宝贵资源。包中的工具对管理员来说是一个金矿，在我们选择最有效的工具来检查进程时，它们可以节省我们大量宝贵的时间。通过实践，我们已经看到了如何轻松使用
    `pgrep` 和 `pkill` 命令来简化我们的进程管理，而像 `pmap` 这样的工具则更适用于诊断系统资源的使用。
- en: As we get ready to venture into the next chapter, we will look at some of the
    valuable shortcuts that we can use when managing users on a CentOS 6.5 system.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们准备进入下一章之前，我们将了解一些在 CentOS 6.5 系统上管理用户时可以使用的宝贵快捷方式。

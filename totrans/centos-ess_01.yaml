- en: Chapter 1. CoreOS – Overview and Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CoreOS is often described as Linux for massive server deployments, but it can
    also run easily as a single host on bare-metal, cloud servers, and as a virtual
    machine on your computer as well. It is designed to run application containers
    as `docker` and `rkt`, and you will learn about its main features later in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: This book is a practical, example-driven guide to help you learn about the essentials
    of the CoreOS Linux operating system. We assume that you have experience with
    VirtualBox, Vagrant, Git, Bash shell scripting and the command line (terminal
    on UNIX-like computers), and you have already installed VirtualBox, Vagrant, and
    git on your Mac OS X or Linux computer, which will be needed for the first chapters.
    As for a cloud installation, we will use Google Cloud's Compute Engine instances.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, you will hopefully be familiar with setting up CoreOS
    on your laptop or desktop, and on the cloud. You will learn how to set up a local
    computer development machine and a cluster on a local computer and in the cloud.
    Also, we will cover `etcd`, `systemd`, `fleet`, cluster management, deployment
    setup, and production clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the last chapter will introduce Google Kubernetes. This is an open source
    orchestration system for `docker` and `rkt` containers and allows to manage them
    as a single system on on compute clusters.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how CoreOS works and how to carry out a basic
    CoreOS installation on your laptop or desktop with the help of VirtualBox and
    Vagrant.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will basically cover two topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of CoreOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the CoreOS virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of CoreOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CoreOS is a minimal Linux operation system built to run `docker` and `rkt` containers
    (application containers). By default, it is designed to build powerful and easily
    manageable server clusters. It provides automatic, very reliable, and stable updates
    to all machines, which takes away a big maintenance headache from `sysadmins`.
    And, by running everything in application containers, such setup allows you to
    very easily scale servers and applications, replace faulty servers in a fraction
    of a second, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How CoreOS works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CoreOS has no package manager, so everything needs to be installed and used
    via `docker` containers. Moreover, it is 40 percent more efficient in RAM usage
    than an average Linux installation, as shown in this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How CoreOS works](img/image00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: CoreOS utilizes an active/passive dual-partition scheme to update itself as
    a single unit, instead of using a package-by-package method. Its root partition
    is read-only and changes only when an update is applied. If the update is unsuccessful
    during reboot time, then it rolls back to the previous boot partition. The following
    image shows OS updated gets applied to partition B (passive) and after reboot
    it becomes the active to boot from.
  prefs: []
  type: TYPE_NORMAL
- en: '![How CoreOS works](img/image00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `docker` and `rkt` containers run as applications on CoreOS. Containers
    can provide very good flexibility for application packaging and can start very
    quickly—in a matter of milliseconds. The following image shows the simplicity
    of CoreOS. Bottom part is Linux OS, the second level is `etcd/fleet` with docker
    daemon and the top level are running containers on the server.
  prefs: []
  type: TYPE_NORMAL
- en: '![How CoreOS works](img/image00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: By default, CoreOS is designed to work in a clustered form, but it also works
    very well as a single host. It is very easy to control and run application containers
    across cluster machines with `fleet` and use the `etcd` service discovery to connect
    them as it shown in the following image.
  prefs: []
  type: TYPE_NORMAL
- en: '![How CoreOS works](img/image00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: CoreOS can be deployed easily on all major cloud providers, for example, Google
    Cloud, Amazon Web Services, Digital Ocean, and so on. It runs very well on bare-metal
    servers as well. Moreover, it can be easily installed on a laptop or desktop with
    Linux, Mac OS X, or Windows via Vagrant, with VirtualBox or VMware virtual machine
    support.
  prefs: []
  type: TYPE_NORMAL
- en: This short overview should throw some light on what CoreOS is about and what
    it can do. Let's now move on to the real stuff and install CoreOS on to our laptop
    or desktop machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the CoreOS virtual machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use the CoreOS virtual machine, you need to have VirtualBox, Vagrant, and
    git installed on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: In the following examples, we will install CoreOS on our local computer, which
    will serve as a virtual machine on VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the coreos-vagrant GitHub project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's clone this project and get it running.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your terminal (from now on, we will use just the terminal phrase and use
    `$` to label the terminal prompt), type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will clone from the GitHub repository to the `coreos-vagrant` folder on
    your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Working with cloud-config
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start even a single host, we need to provide some `config` parameters in
    the `cloud-config` format via the user data file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your terminal, type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The user data should have content like this (the `coreos-vagrant` Github repository
    is constantly changing, so you might see a bit of different content when you clone
    the repository):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the text between the `etcd2:` and `fleet:` lines to look this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also download the latest `user-data` file from [https://github.com/rimusz/coreos-essentials-book/blob/master/Chapter1/user-data](https://github.com/rimusz/coreos-essentials-book/blob/master/Chapter1/user-data).
  prefs: []
  type: TYPE_NORMAL
- en: This should be enough to bootstrap a single-host CoreOS VM with `etcd`, `fleet`,
    and `docker` running there.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover `cloud-config`, `etcd` and `fleet` in more detail in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Startup and SSH
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's now time to boot our CoreOS VM and log in to its console using `ssh`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s boot our first CoreOS VM host. To do so, using the terminal, type the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will trigger vagrant to download the latest CoreOS alpha (this is the default
    channel set in the `config.rb` file, and it can easily be changed to beta, or
    stable) channel image and the `lunch` VM instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see something like this as the output in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Startup and SSH](img/image00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'CoreOS VM has booted up, so let''s open the `ssh` connection to our new VM
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It should show something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perfect! Let''s verify that `etcd`, `fleet`, and `docker` are running there.
    Here are the commands required and the corresponding screenshots of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Startup and SSH](img/image00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check the status of `fleet`, type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Startup and SSH](img/image00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check the status of `docker`, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Startup and SSH](img/image00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Lovely! Everything looks fine. Thus, we've got our first CoreOS VM up and running
    in VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw what CoreOS is and how it is installed. We covered a
    simple CoreOS installation on a local computer with the help of Vagrant and VirtualBox,
    and checked whether `etcd`, `fleet`, and `docker` are running there.
  prefs: []
  type: TYPE_NORMAL
- en: You will continue to explore and learn about all CoreOS services in more detail
    in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL

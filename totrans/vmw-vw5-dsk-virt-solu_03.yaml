- en: Chapter 3. Persistent or Non-Persistent vDesktops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most fundamental decisions that must be made early in the design
    process is whether to use persistent or non-persistent vDesktops. This decision
    may impact many areas of the overall VDI, including storage, desktop pools, and
    management.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Persistent desktops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-persistent desktops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multisite solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to choose for your organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A **persistent desktop** is a vDesktop that is assigned to a specific end user
    and whose state is saved after logoff:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Persistent or Non-Persistent vDesktops](img/1124EN_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For example, in the preceding diagram, if User_1 signs into a VMware View environment
    for the first time and is automatically assigned vDesktop_7, he would connect
    to vDesktop_7 today, tomorrow, and until the assignment is removed. If vDesktop_7
    has an issue and is unavailable, User_1 will not have a functioning work environment
    and will be unable to be productive.
  prefs: []
  type: TYPE_NORMAL
- en: When using persistent desktops, VMware View does not automatically reassign
    the end user to an available vDesktop if their assigned vDesktop is unavailable.
  prefs: []
  type: TYPE_NORMAL
- en: 'A persistent vDesktop has persistent data until:'
  prefs: []
  type: TYPE_NORMAL
- en: The vDesktop is unassigned from the specific user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The desktop pool that the vDesktop is a member of is refreshed (linked clones)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The desktop pool that the vDesktop is a member of is recomposed (linked clones)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A **non-persistent desktop** is a vDesktop that is not assigned to a specific
    end user and instead is made available to the end user population:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Persistent or Non-Persistent vDesktops](img/1124EN_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For example, in the preceding diagram, if User_1 signs into a VMware View environment,
    he is assigned one of the available vDesktops (for example, vDesktop_9). When
    he/she logs off and then logs back in to the VMware View environment, he/she is
    randomly assigned another available vDesktop from the pool.
  prefs: []
  type: TYPE_NORMAL
- en: A vDesktop may only have a maximum of one owner at any given time.
  prefs: []
  type: TYPE_NORMAL
- en: There are several settings that can be manipulated from the VMware View Admin
    console that dictate how fast a non-persistent vDesktop is unassigned from a user
    that executes a logoff.
  prefs: []
  type: TYPE_NORMAL
- en: Persistent desktops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Historically, persistent vDesktops have been used in VDI implementations as
    persistent vDesktops most resemble the physical world and allows both end users
    and IT administrators to be able to relate to the virtual world. This 1:1 relationship
    (of end user to vDesktop) is likely the most simplified deployment option available,
    but its design and cost considerations should be properly understood.
  prefs: []
  type: TYPE_NORMAL
- en: 'Persistent vDesktops are often the easier political sell to an organization,
    as each user still maintains possession of an individual (virtual) desktop asset.
    The following table explains areas related to the persistent vDesktops:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Area | Implications |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Desktop pool sizing | It requires a vDesktop for every end user. |'
  prefs: []
  type: TYPE_TB
- en: '| Availability | If a user''s assigned vDesktop is unavailable, the user is
    unable to connect. |'
  prefs: []
  type: TYPE_TB
- en: '| Recoverability OS failure | VMware HA can be used to monitor a vDesktop''s
    response to a basic ping command. If a vDesktop does not respond, it can be automatically
    restarted by VMware vSphere. |'
  prefs: []
  type: TYPE_TB
- en: '| Recoverability site failure | There is no easy way to recover from a site
    failure. |'
  prefs: []
  type: TYPE_TB
- en: '| Cost | The VDI must support vDesktops for the entire target user population;
    this includes compute and storage requirements. |'
  prefs: []
  type: TYPE_TB
- en: Example scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, consider that Customer_A has 6,000 end users. They are targeting
    to move to a VMware View solution. Customer_A operates three shifts a day, with
    2,000 end users working at any given time.
  prefs: []
  type: TYPE_NORMAL
- en: The customer has asked for help in scoping the hardware required for the solution
    (for example, in the form of a bill of materials or list of materials).
  prefs: []
  type: TYPE_NORMAL
- en: The platform will be Windows 7, with 1 vCPU, 2 GB of RAM, and a 50 GB `C:\`
    drive.
  prefs: []
  type: TYPE_NORMAL
- en: The hardware platform is determined to consist of 2U servers with two 6-core
    processors per server (a total of 12 cores per server).
  prefs: []
  type: TYPE_NORMAL
- en: Using an average and conservative estimate of 10 VMs per core, it yields 120
    vDesktops per server. Using 2 GB of RAM per vDesktop, 240 GB of RAM would be required
    to support 120 vDesktops. Adding in RAM for overhead and for amounts that can
    be easily ordered from any vendor rounds 240 GB of RAM up to 256 GB of RAM per
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, the server specification used for this solution includes a 2U server
    with two 6-core processors and 256 GB of RAM. The following table explains about
    the server specifications and the costs related to the persistent vDesktop:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Area | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Physical server specification | A 2U server with two 6-core processors and
    256 GB of RAM |'
  prefs: []
  type: TYPE_TB
- en: '| Number of vDesktops/physical servers | 120 |'
  prefs: []
  type: TYPE_TB
- en: '| Total end user population | 6,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Total number of end users that require a vDesktop at any given time | 2,000
    |'
  prefs: []
  type: TYPE_TB
- en: '| Total number of vDesktops that must be provisioned and available | 6,000
    |'
  prefs: []
  type: TYPE_TB
- en: '| Total number of physical servers required without *n* + 1 considerations
    | 50 |'
  prefs: []
  type: TYPE_TB
- en: '| Estimated number of racks required | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Cost per individual physical server | $40,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Subtotal for physical server costs | $2,000,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Total number of processors | 100 |'
  prefs: []
  type: TYPE_TB
- en: '| Estimated VMware vSphere View Premier per vDesktop | $250 |'
  prefs: []
  type: TYPE_TB
- en: '| Subtotal for VMware View licensing | $1,500,000 |'
  prefs: []
  type: TYPE_TB
- en: '| **Total cost** | **$3,500,000** |'
  prefs: []
  type: TYPE_TB
- en: Even though Customer_A only has 2,000 end users online at any given time, the
    fact that Customer_A has 6,000 unique end users means that to support this environment
    with persistent vDesktops, the VDI must have 6,000 vDesktops. It is possible to
    use extremely strict timeout values and logoff parameters to decrease the total
    number of supported vDesktops (perhaps from 6,000 to 5,000), but it does add risk
    to the overall solution and may or may not be feasible in a given environment.
  prefs: []
  type: TYPE_NORMAL
- en: Using rough estimates of $40,000 per physical server, the estimated total cost,
    including server costs and rough estimates for VMware vSphere and VMware View
    Premiere (excluding bundle or add-on pricing), is $3,500,000.
  prefs: []
  type: TYPE_NORMAL
- en: This estimate does not include financial considerations for port costs. For
    example, if each server only required two network connections (for example, using
    10GbE), then an additional 99 switch ports would be required for the production
    network connections and a single out-of-band management connection (for example,
    HP ILO).
  prefs: []
  type: TYPE_NORMAL
- en: This estimate does not include financial considerations for additional quantities
    of VMware vCenter Server Heartbeat, used to protect the VMware vCenter Servers
    in a VMware View environment. As a large VMware View solution will require additional
    VMware vCenter Servers likely protected by VMware vCenter Server Heartbeat (approximately
    $15,000 per vCenter Server).
  prefs: []
  type: TYPE_NORMAL
- en: This estimate also does not include financial considerations for cooling and
    power costs associated with the servers.
  prefs: []
  type: TYPE_NORMAL
- en: Operationally, it's also harder to manage from a human resources perspective.
    As people leave and enter the company, vDesktop sprawl could potentially eat up
    resources, as there is no easy way to track and maintain the User Data Disks in
    conjunction with user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: A final consideration is the amount of physical U-space the persistent solution
    requires. For environments that require minimal footprint (for example, tactical
    installation), every U is of significance.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, persistent desktops are likely to be an inefficient solution for
    most environments, especially those of significant scale.
  prefs: []
  type: TYPE_NORMAL
- en: Non-persistent desktops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Non-persistent vDesktop solutions are starting to become more commonplace as
    VDI is not only adopted more within the industry but also implemented at a larger
    scale. As persistent vDesktops often require vast amounts of additional resources,
    that is, both technical, human, and financial, this book will focus primarily
    on solutions leveraging non-persistent vDesktops.
  prefs: []
  type: TYPE_NORMAL
- en: While persistent vDesktops are still what most people think of when they think
    of VDI, it's important to demonstrate the advantages and cost savings realized
    by leveraging a non-persistent solution in certain situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'VDI is less about ownership of a particular virtual machine in the data centre
    and more about the availability of a desktop resource when needed, which is customized
    for the user (via that user''s specific profile). While there are plenty of solutions
    that do not require customization of the vDesktop (for example, kiosk solution
    in a hotel), a large percentage of VDI implementations will be for unique users
    with potentially unique desktops at an organization. The following table explains
    about the areas related to the non-persistent vDesktops:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Area | Implications |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Desktop pool sizing | It requires a vDesktop for the maximum number of concurrent
    users. |'
  prefs: []
  type: TYPE_TB
- en: '| Availability | A user will be able to connect to a vDesktop as long as there
    is an available vDesktop in the pool. |'
  prefs: []
  type: TYPE_TB
- en: '| Recoverability OS failure | A user will be able to connect to a vDesktop
    as long as there is an available vDesktop in the pool. |'
  prefs: []
  type: TYPE_TB
- en: '| Recoverability site failure | While it still isn''t out of the box to recover
    from a site failure, a non-persistent vDesktop forces the user''s persona to live
    outside the vDesktop, thereby making the replication and recovery of a viable
    vDesktop environment much easier. |'
  prefs: []
  type: TYPE_TB
- en: '| Cost | The VDI must support vDesktops for the target maximum concurrent users;
    this includes compute and storage requirements for peak load and not for theoretical
    maximum, based on the total number of users. |'
  prefs: []
  type: TYPE_TB
- en: Example scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To continue from the example earlier in this chapter, Customer_A has 6,000
    end users. They are targeting to move to a VMware View solution. Customer_A operates
    three shifts a day, with 2,000 end users working at any given time. The following
    table explains about the server specifications and the costs related to the non-persistent
    vDesktops:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Area | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Physical server specification | A 2U server with two 6-core processors and
    256 GB of RAM |'
  prefs: []
  type: TYPE_TB
- en: '| Number of vDesktops per physical server | 120 |'
  prefs: []
  type: TYPE_TB
- en: '| Total end user population | 6,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Total number of end users that require a vDesktop at any given time | 2,000
    |'
  prefs: []
  type: TYPE_TB
- en: '| Recoverability site failure | 2,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Total number of physical servers required without *n* + 1 considerations
    | 17 |'
  prefs: []
  type: TYPE_TB
- en: '| Estimated number of racks required | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Cost per individual physical server | $40,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Subtotal for physical server costs | $680,000 |'
  prefs: []
  type: TYPE_TB
- en: '| Total number of processors | 34 |'
  prefs: []
  type: TYPE_TB
- en: '| Estimated VMware vSphere View Premier per vDesktop | $250 |'
  prefs: []
  type: TYPE_TB
- en: '| Subtotal for VMware View licensing | $500,000 |'
  prefs: []
  type: TYPE_TB
- en: '| **Total cost** | **$1,180,000** |'
  prefs: []
  type: TYPE_TB
- en: The advantages of a non-persistent solution are clearly evident. For example,
    in a persistent solution, 50 physical servers were required (versus 17 in a non-persistent
    solution) to meet the demands of the user load. By saving a significant number
    of physical servers from being procured (and the associated software licensing),
    the overall VDI solution requires one third less funding. These savings come from
    having to support only the maximum concurrent user load instead of having a named
    vDesktop for every user that will connect to the VDI.
  prefs: []
  type: TYPE_NORMAL
- en: Other non-persistent notes and considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A non-persistent vDesktop solution should be viewed as volatile. It means that
    when a user logs off, anything written to the local disk of the vDesktop will
    be inaccessible, or even destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: As such, for solutions requiring a user to maintain a profile, custom applications,
    unique device mappings, and so on, a persona management solution will need to
    be used as part of the overall VDI. Persona management is covered later in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Another potential benefit of non-persistent vDesktops, if designed correctly,
    is that they can potentially reduce the number of help desk calls. This is because
    the solution focuses less on the availability of an individual's vDesktop, but
    instead focuses on the availability of a set number of vDesktop resources available
    in a pool. With an emphasis placed on desktop pool health (and likely user persona
    health), there's less worrying about a specific user's vDesktop as resources are
    assigned randomly at login for each end user.
  prefs: []
  type: TYPE_NORMAL
- en: The potential drawback is that there could be an increase in supporting the
    persona management layer, depending on the solution chosen, its design, and its
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Multisite solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A VMware View solution that spans multiple sites is not extremely atypical.
    College campuses, large corporations, and even small businesses, may have requirements
    to deliver vDesktops from more than one physical locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these scenarios, there are a few qualifying questions to ask the organization.
    They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Should the desktop experience be unique for each end user?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Essentially, should end user personas be saved to include changes to the desktop
    environment, customizations to applications, and so on?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the answer to the preceding question is yes, should the user persona be consistent
    across all the sites?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, if Liliana logs into Site_A and makes modifications to her desktop,
    should those settings be reflected if Liliana were to log in to the VDI at Site_B?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Multisite solutions](img/1124EN_03_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The preceding diagram shows a multisite VDI with VMware View persistent vDesktops
    and it is based on a real-world scenario. In this example, Site_A and Site_B are
    owned by the same organization, Acme Corp. Acme must support worker mobility as
    two of their locations (Site_A and Site_B) are used by their entire workforce.
  prefs: []
  type: TYPE_NORMAL
- en: A user could be working at Site_A in the morning and then at Site_B in the afternoon
    for meetings.
  prefs: []
  type: TYPE_NORMAL
- en: The user, as shown in the preceding diagram, connects to the VDI in Site_A in
    the morning and as persistent vDesktops are being used, he gets his assigned vDesktop.
    Remember, when using persistent vDesktops, a user is assigned a specific vDesktop
    and will keep this assignment until unassigned by the VMware View Administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user leaves Site_A and drives over to Site_B, the following two cases
    are possible:'
  prefs: []
  type: TYPE_NORMAL
- en: He does not have a vDesktop assigned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: He has a second vDesktop assigned in the completely independent VDI running
    at Site_B.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is the user's vDesktop in Site_A not copied to Site_B?
  prefs: []
  type: TYPE_NORMAL
- en: This is because VMware View persistent vDesktops are independent virtual machines
    assigned to an individual user.
  prefs: []
  type: TYPE_NORMAL
- en: If using VMware View persistent vDesktops, replicating the changes to a peer
    persistent vDesktop in one site (for example, Site_A) to another site (for example,
    Site_B) is not an out of the box supported use case. Making persistent VMware
    View vDesktops behave in such a manner would require significant scripting, a
    deep understanding of the underlying storage platform, a deep understanding of
    the VMware View ADAM database, and likely an understanding of how to manipulate
    objects using PowerCLI.
  prefs: []
  type: TYPE_NORMAL
- en: It would also add too many variables to make it a sustainable VDI model to properly
    support.
  prefs: []
  type: TYPE_NORMAL
- en: The authors' experience is that almost anything is possible with VMware View,
    given enough time, deep knowledge of VMware vSphere and VMware View, and ample
    time to test. However, VMware View was not designed to support multisite persistent
    vDesktops.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party add-on solutions (for example, Unidesk) are potentially helpful
    in these scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Why is a non-persistent vDesktop best for a multisite?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following diagram shows a multisite VDI with VMware View non-persistent
    vDesktops and persona replication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Why is a non-persistent vDesktop best for a multisite?](img/1124EN_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Imagine the same aforementioned scenario. An organization has two sites, Site_A
    and Site_B. A user works at Site_A in the morning, connects to his/her vDesktop
    running on the VDI in Site_A, and then heads to Site_B for afternoon meetings.
    When at Site_B, the user connects to the VDI local to that site.
  prefs: []
  type: TYPE_NORMAL
- en: How can the VDI architect make the VDI experience consistent across both the
    sites?
  prefs: []
  type: TYPE_NORMAL
- en: By using non-persistent vDesktops, the user's persona is naturally separated
    from the underlying desktop operating environment. By using VMware View profile
    management, or a third-party solution such as AppSense or Liquidware Labs ProfileUnity,
    a non-persistent vDesktop can have the same look and feel of a persistent desktop
    (for example, customizations are retained) yet offer the advantages of non-persistent
    vDesktops (for example, greater flexibility).
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding diagram, the user profiles are stored on a file share that
    is replicated between the two sites.
  prefs: []
  type: TYPE_NORMAL
- en: It does not matter which site's VDI the end user connects to as long as his/her
    profile has been replicated. If a non-persistent vDesktop solution with replicated
    profiles is implemented, it is important to ensure that there are no unnecessary
    files in the user persona. Proper filtering techniques can ensure that gigabytes
    of MP3s or downloaded movies are not considered as part of the user's persona,
    and prevent them from congesting the replication transmission.
  prefs: []
  type: TYPE_NORMAL
- en: Why distance matters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Replication is a function of physics. The size (throughput), speed (latency),
    and integrity (dropped packets) of the connection between sites as well as the
    amount of data that needs to be replicated help determine the total time required
    to replicate a set of profiles. If the goal is for users to not notice a difference
    whether they log in to Site_A or Site_B, the replicated copy of a given user's
    persona will have to be ensured.
  prefs: []
  type: TYPE_NORMAL
- en: This guarantee can only be provided if the underlying network, storage, and
    replication solution can meet the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, the closer the two sites and the smaller the replication data set,
    the easier it is to meet these requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, if a multisite VDI solution is to be implemented, it is important
    to perform a basic network survey to recognize any potential hurdles before actual
    implementation begins.
  prefs: []
  type: TYPE_NORMAL
- en: Profiles in the cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Multisite VDI solutions with local copies of the user profiles is likely the
    most common type of multisite VDI solution. This is because the technologies are
    likely already known by the VDI architect, and the supporting technical personnel
    are also familiar with similar solutions, even if not related to VDI in the least.
  prefs: []
  type: TYPE_NORMAL
- en: However, should there be a disruption or congestion in replication, it is possible
    for a user to log in at a site and not have their latest user persona. Even worse,
    it is possible to end up in a split brain scenario, where changes are lost or
    corrupted because two master copies of the user persona now exist.
  prefs: []
  type: TYPE_NORMAL
- en: While this is rare and can be combatted by proper replication design and monitoring
    of replication health, it is still possible.
  prefs: []
  type: TYPE_NORMAL
- en: Another type of multisite VDI solution still leverages non-persistent VMware
    View vDesktops and persona management, but instead of storing local replicated
    copies of the user personas, they are stored in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows a multisite VDI with the VMware View non-persistent
    vDesktops and the cloud-based Persona storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Profiles in the cloud](img/1124EN_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **cloud**, in this sense, is any external storage platform that maintains
    the user profiles. This could be an Amazon-based solution, a local cloud provider,
    or a peer's community cloud offering, just to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: In this scenario, there is no cross-site replication because the user profiles
    are always read and written to the cloud-based storage platform.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage is that replication issues are no longer a concern, but the drawback
    is that a connection to the cloud (internet, VPN, and so on) is required to load
    a user's profile. A lack of connectivity to the cloud storage means that user
    profiles cannot be read or saved.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, most cloud providers charge a fee for inbound and/or outbound traffic.
    Exceptions to this rule (for example, Amazon Direct Connect) do exist however,
    and may come into play if deciding on a hosting partner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hybrid: persistent mixed with non-persistent'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While oftentimes, the first VDI use case at an organization will be clearly
    persistent or non-persistent, as the VDI adoption increases, so does the amount
    of use cases that need to be supported.
  prefs: []
  type: TYPE_NORMAL
- en: For example, an organization can initially implement a VMware View solution
    to support their 250-seat classroom environment. This is likely a non-persistent
    solution. However, after seeing the benefits of VMware View for their classroom,
    the organization may decide to roll out VDI on a larger scale. Now instead of
    just supporting classrooms, the executive team has decided to adopt VDI to support
    their mobile lifestyle. In addition, the CEO has demanded that he needs to be
    able to use VDI from his Apple iPad.
  prefs: []
  type: TYPE_NORMAL
- en: In these types of situations, persistent vDesktops can make life a bit easier.
    There aren't any user profiles to worry about, per se, and the application distribution
    is conceptually the same as it is in the physical world. It may also be the easiest
    to troubleshoot for the executive team, as you know which executive has which
    desktop quite easily.
  prefs: []
  type: TYPE_NORMAL
- en: VMware View natively supports the ability to have both persistent and non-persistent
    desktop pools side by side. There are no real design considerations to be made
    other than those found in their respective solutions. Profile management can be
    applied across non-persistent and persistent vDesktops uniformly. One point of
    consideration is that in the above preceding example of a classroom and an executive
    team, there may be different support personnel responsible for each group. If
    that is indeed the case, then the appropriate permissions will need to be defined
    in the VMware View Admin console.
  prefs: []
  type: TYPE_NORMAL
- en: How to choose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fortunately, with VMware View, both persistent and non-persistent vDesktops
    can be tested side by side to see which works best with an organization''s requirements.
    However, when designing a solution for an organization, some guidelines can be
    followed to help choose between persistent or non-persistent vDesktops. The following
    are some questions with their suggested (not necessarily only) solution type.
    The suggestions assume that the reader will answer *yes* to the question:'
  prefs: []
  type: TYPE_NORMAL
- en: Will users be installing their own native applications? Persistent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the environment support a large percentage of shift workers? Non-persistent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will application virtualization be used? Non-persistent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will a roaming profile solution be used? Non-persistent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will the solution support a disaster recovery event? Non-persistent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will users be assigned their own specific desktop for application or operating
    system licensing restrictions? Persistent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These high-level questions will help the architect steer the solution in the
    proper direction. It is important to keep in mind that that preceding suggestions
    are not steadfast answers. Finally, it is important to remember that persistent
    and non-persistent solutions can cohabit in the same VMware View environment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The question of persistence is one of the cornerstone decisions of any VDI
    design. Persistence defines how volatile the vDesktops may be, how applications
    may be distributed, and the amount of underlying hardware required. For VDI architects,
    it is important to build a portfolio of proven designs. VDI is a complicated technology
    as there are a lot of moving parts. Reducing the number of variables for each
    project is important and this can be done by building some loose parameters. The
    following is an example mission statement taken from a real-world scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '"I''m the Director of IT for Acme and I have a 2,000-seat classroom environment
    I need to support, with frequent turnover."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A VDI architect''s formula in this scenario may be:'
  prefs: []
  type: TYPE_NORMAL
- en: VMware View non-persistent vDesktops + VMware ThinApp + zero clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By already having an idea of what the solution should look like, the architect
    can focus on some of the key variables as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: How large is the desktop image?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How will the applications be managed?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a VMware View solution from scratch for every project is not efficient
    and more error-prone than building a stable one from a few solid VMware View designs.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter discusses the end devices used to connect into the VMware View
    solution. End devices are another important part in a VDI solution as choosing
    the right end device can drastically improve the probability of success. Understanding
    the limitations of each end device type is important in choosing the right device
    for a given organization, and this will be discussed in the next chapter.
  prefs: []
  type: TYPE_NORMAL

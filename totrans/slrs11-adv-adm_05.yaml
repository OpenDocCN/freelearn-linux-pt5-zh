- en: Chapter 5. Playing with Oracle Solaris 11 Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing SMF operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling manifests and profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating SMF services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administering inetd-controlled network services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting Oracle Solaris 11 services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Oracle Solaris 11 presents the **Service Management Facility** (**SMF**) as
    a main feature. This framework is responsible for administrating and monitoring
    all services and applications. SMF was introduced in Oracle Solaris 10, and it
    offers several possibilities that make our job easier by being responsible for
    several tasks, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Starting, stopping, and restarting services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering all service dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing an individual log for each available service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Usually, there are many services in each system, and they are organized by
    category, such as system, network, device, and application. Usually, a service
    only has an instance named default. However, a service can present more than one
    instance (for example, there can be more than one Oracle instance and more than
    one configured network interface, and this difference is highlighted in the reference
    to the service. This reference is called **Fault Management Resource Identifier**
    (**FMRI**), which looks like `svc:/system/cron:default`, where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`svc`: This is a native service from SMF'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system`: This is the service category'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cron`: This is the service name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`: This is the instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main daemon that''s responsible for the administration of all the SMF services
    is `svc.startd` and it is called during system initialization when reading the
    configuration file, `/etc/inittab`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Another goal of `svc.startd` is to ensure that the system reaches the appropriate
    milestone, that is, a status or level where a group of services are online, which
    are very similar to old run-level states. The important milestones are single-user
    (run-level S), multi-user (run-level 2), and multi-user server (run-level 3):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'There''re two special milestones, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**all**: This is the default milestone where all services are initialized'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**none**: No service is initialized—which can be used during an Oracle Solaris
    11 maintenance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Based on the previous information, it''s important to know the correct initialization
    order, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Boot loader**: The root filesystem archive is loaded from disk to memory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Booter**: The boot archive (it''s a RAM disk image very similar to `initramfs`
    from Linux and contains all the files required to boot the system) is loaded in
    the memory and is executed. The boot loader is a service:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Any `boot-archive` maintenance operation must be done by the `bootadm` command.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ram disk**: The kernel is extracted from the boot archive and is executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kernel**: A small root filesystem is mounted and, from there, important drivers
    are loaded. Afterwards, the true root filesystem is mounted, the remaining drivers
    are loaded, and the `/sbin/init` script is executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Init**: The `/sbin/init` script reads the `/etc/inittab` file, and the `svc.started`
    daemon is executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**svc.started**: This starts SMF services and their related processes. All
    service configurations are read (through the `svc.configd` daemon) from the main
    service database named `repository.db`, which is located in `/etc/svc` together
    with its respective backups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing SMF operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Administering services in Oracle Solaris 11 is very simple because there are
    few commands with an intuitive syntax. Therefore, the main purpose of this section
    is to review the operational part of the SMF administration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine (VirtualBox or VMware) with Oracle Solaris
    11 installed and 4 GB RAM.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When an administrator is responsible for managing services in Oracle Solaris
    11, the most important and common task is to list the existing services. This
    operation can be done by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `svcs` command has the goal of listing the existing services, and when the
    `-a` option is specified, we are interested in listing all the services.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding output, the following useful information is obtained:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `legacy_run` state is a label for legacy services, which wasn''t converted
    to the SMF framework. Other possible statuses are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`online`: This means that the service is running'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disabled`: This means that the service is not running'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`offline`: This means that the service is enabled, but it''s either not running
    or not available to run'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initialized`: This means that the service is starting up'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`degraded`: This means that the service is running, but with limited features
    working'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maintenance`: This means that the service isn''t running because of a configuration
    problem'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `STIME` field shows the time when the service was started
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FMRI` is the alias object that references the service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SMF in Oracle Solaris 11 does an excellent job when we have to find the service
    dependencies of a service (the `-d` option) and discover which services are dependent
    on this service (the `-D` option). Some examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Another good method to find the dependencies of a service is to use the `svc`
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: From the previous output, some good information is obtained, such as knowing
    that the service is enabled (`online`); it has three service dependencies (as
    shown in the `svcs –d` command); and finding their respective logfiles (`/var/svc/log/system-auditd:default.log`),
    which could be examined using `more /var/svc/log/system-auditd:default.log`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s good information to learn about the `contract_id` attribute (`115`)
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The associated process ID from `auditd` is `944`, and this service was initialized
    by the `svc.startd` daemon. Additionally, the same information about the process
    ID can be found by running the following command using a short form of FMRI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A short form of FMRI is a unique sequence that makes it possible to distinguish
    this service from others, and this short form always refers to the default instance
    of the specified service.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good `svcs` command parameter to troubleshoot a service is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If there''s any service that was already configured, it should be running.
    However, if it isn''t or it''s preventing other services from running, we can
    find out the reason by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The previous command output doesn't show anything, but there could have been
    some broken services. At end of the chapter, we'll come back to this issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, all the tasks were focused on collecting information about a service.
    Our next step is to learn how to administer them using the `svcadm` command. The
    available options for this command are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`svcadm enable <fmri>`: This will enable a service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`svcadm enable –r <fmri>`: This will enable a service recursively and its dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`svcadm disable <fmri>`: This will disable a service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`svcadm disable –t <fmri>`: This will disable a service temporarily (the service
    will be enabled in the next boot)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`svcadm restart <fmri>`: This will restart a service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`svcadm refresh <fmri>`: This will read the configuration file of a service
    again'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`svcadm clear <fmri>`: This will bring a service from the maintenance state
    to the online state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`svcadm mark maintenance <fmri>`: This will put a service in the maintenance
    state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few examples are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'SMF also supports a notification feature using SMTP service and SNMP trap.
    To enable and configure this feature (using SMTP), it is necessary to install
    the notification package, and this task can be executed by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `smtp-notify` package installed, we can enable and configure any service
    to mail messages to `root@localhost` if its status changes from online to maintenance,
    as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To check whether the notification service is appropriately configured for all
    services, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, if we verify the root mailbox, we''ll see the result from our configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'A service in Oracle Solaris 11 has several properties and all of them can be
    viewed by using the `svcprop` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to check a specific property from the audit service, we have to
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If we go further, it''s possible to interact (read and write) with the properties
    from the service through the `svccfg` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The first step is to list all available services by running the following sequence
    of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'While selecting the `auditd` service, there''re two possibilities—to list the
    general properties of a service or to list the private properties of its `default`
    instance. Thus, to list its general properties, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing properties from the default instance is done by running the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s feasible to list and change any service''s property by running the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Many times, during a reconfiguration, the properties of a service can get changed
    to another non-default value and eventually this service could present problems
    and go to the maintenance state because of this new configuration. Then, how do
    we restore the old values of the properties?
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix the problem, we could return all values from the properties of this
    service to their default values. This task can be executed by using the automatic
    snapshot (a kind of backup) by SMF. Therefore, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The available snapshots are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`running`: This snapshot is taken every time the `svcadm` refresh is run'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start`: This snapshot is taken at the last successful start'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initial`: This snapshot is taken during the first import of the manifest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An SMF manifest is an XML file that describes a service, a set of instances,
    and their respective properties. When a manifest is imported, all its configurations
    (including their properties) are loaded in the service configuration repository.
    The default location of a manifest is the `manifest` directory under `/lib/svc/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another interesting and related task is to learn how to change the environment
    variables of a service. The following example shows us the value from the `TZ`
    property that will be changed to Brazil/East:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, in order to change and check the value of the `TZ` property from the
    `auditd` service, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'There is one last good trick to find out the properties that were changed in
    the SMF configuration repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you learned the fundamentals of SMF as well as how to administer
    SMF services using `svcs` and `svcadm`. We have also configured the notification
    service to log (using the SMTP service) any interesting event such as changing
    the status of services. In the end, the `svcprop` and `svccfg` commands were used
    to get and see the service's properties as well as the snapshot feature (the `listsnap`
    and `revert` subcommands) from `svccfg` that was used to rollback all the properties
    to their default values.
  prefs: []
  type: TYPE_NORMAL
- en: Handling manifests and profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When handling SMF services, almost every service configuration is focused on
    two key concepts: profiles and manifests. The following recipe teaches you about
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine (VirtualBox or VMware) running Oracle
    Solaris 11 and with a 4 GB RAM.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we have explained previously, an SMF manifest is an XML file that describes
    a service, a set of instances, and their properties. When a manifest is imported,
    its entire configuration (including its properties) is loaded in the service configuration
    repository. This import operation can be enforced, potentially loading new configurations
    in the repository, by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The default location of the manifest is the `manifest` directory under `/lib/svc/`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the output, service manifests are categorized as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`device`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`milestone`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`platform`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The previous output has listed all the application manifests as an example
    and, as we will learn, manifests play a very important role in the configuration
    of a service. For example, it would be nice to study the `audit.xml` manifest
    to learn the details. Therefore, this study will be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This manifest (`auditd.xml`) has several common elements that appear in other
    manifests. The key elements are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`service_bundle`: This is the package name of the `auditd` daemon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`service`: This is the name of the service (`system/auditd`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dependency`: This determines which services `auditd` depends on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dependent`: This determines which services depend on `auditd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exec_method`: This is how SMF starts, stops, restarts, and refreshes the `auditd`
    daemon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`property_group`: These are the properties from the `auditd` service and their
    instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`template`: This determines what information is available about the `auditd`
    service and where it is'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`manpage`: This determines which man pages are related to the `auditd` service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A profile is an XML configuration file that is applied during the first system
    boot after an Oracle Solaris 11 installation, where it is possible to customize
    which services and instances will be initialized. The following is a directory
    listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Although there are several manifests, two of them are the most important: `generic.xml`,
    which enables all standard services, and `generic_limited_net.xml`, which disables
    most of the Internet services except the `ssh` service and a few other services
    that are remote services. The latter manifest is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'A service can be configured and its behavior can be customized using different
    methods; additionally, it is very important to know where the SMF framework reads
    its properties from. Therefore, the directory and files where the SMF gathers
    properties of a service are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`manifest`: This gets properties from the `/lib/svc/manifest` or `/var/svc/manifest`
    directories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site-profile`: This gets properties from the `/etc/svc/profile/site` directory
    or the `site.xml` profile file under `/etc/svc/profile/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you saw many details about profiles and manifests such as their
    elements and available types. All these concepts are going to be deployed in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating SMF services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This time, we are going to create a new service in Oracle Solaris 11, and the
    chosen application is gedit, which is a graphical editor. It is obvious that we
    can show the same procedure using any application and we will only need to make
    the necessary alterations to adapt the example.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine (VirtualBox or VMware) with Oracle Solaris
    11 installed and 4 GB RAM.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to create a script that starts and stops the application
    that we are interested in. There are several scripts in `/lib/svc/method` and
    we could use one of them as a template, but I have used a very basic model, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This script is simple and good, but we need to change its permissions and copy
    it to the `method` directory under `/lib/svc/`, which is the default place for
    service scripts. This task can be accomplished as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next step, we are going to create a manifest, but as this task is very
    complicated when starting from scratch, we can take a manifest from another existing
    service and copy it to the home directory. Afterwards, we have to make appropriate
    changes to adapt it to achieve our goal, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s a long XML file, but it''s easy. Some points deserve an explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The service name is `gedit_script` as seen in the following line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The service depends on the `milestone` multiuser, as seen in the following
    snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The time limit to start and stop the service is `120` seconds as seen in the
    following snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `<property_group>` section configures the service as an old service type
    (`transient`) to prevent the SMF from automatically restarting `gedit_script`
    if it fails, as seen in the following snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The service''s default status is disabled, as seen in the following line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It is time to verify if this manifest has a syntax error before trying to import
    it. Therefore, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, everything sounds good. Therefore, we can import the manifest in the
    repository by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous command is a key command because every time a modification is made
    in the manifest, we have to run this command to update the repository with new
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there was no error, the service should appear among other services, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s nice! It''s time to start the service and the gedit editor (a graphical
    editor) must come up (remember that we''ve made a script named `gedit_script.sh`
    to start the `gedit` editor) after executing the second command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The properties from this new service are shown by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'To list the environment variables associated with the `gedit_script` service,
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to stop the `gedit_script` service and to verify that everything happens
    as expected, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Great! Everything works! Now let's talk about profiles.
  prefs: []
  type: TYPE_NORMAL
- en: '**Profiles** are also very important, and they determine which services will
    be started during the boot process. Therefore, it is appropriate to adapt them
    to start only the necessary services in order to reduce the attack surface against
    a hacker.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps create a new service (more interesting than the `gedit_script`
    service) using the great `netcat` tool (`nc`). The steps will be the same as those
    used previously. For remembrance sake, consider the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make it executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy it to `/lib/svc/method`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a manifest for the service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Validate the manifest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the manifest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List the service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop the service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the sequence of commands to create a new service. According
    to our previous list, the first step is to create a script to start and stop the
    service, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Grant the execution permission to the script and copy it to the appropriate
    directory where all other scripts from existing services are present, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to create a manifest for the service (`netcat`). It will be
    easier to copy the manifest from an existing service and adapt it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Before continuing, we have to validate the `netcat_manifest.xml` manifest,
    and after this step, we can import the manifest into the service repository, as
    shown in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the service was correctly imported, check whether it appears
    in the SMF service list by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'To collect other details about the `netcat` service, execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The specific `netcat service` log can be examined to check whether there''s
    any problem by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'To test whether our new service is indeed working, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: That's amazing!
  prefs: []
  type: TYPE_NORMAL
- en: 'We have to check whether the `netcat` service is able to stop in an appropriate
    way by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The logfile from the service can be useful to check the service status, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'So far everything has worked! The next step is to extract the current active
    SMF profile and to modify it in order to enable the `netcat` service (`<create_default_instance
    enabled=''true''/>`) now and during the system boot. To accomplish this task,
    execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The process of importing and validating must be repeated again (this time for
    the profile) by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the status of the `netcat` service again by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'This is unbelievable! The `netcat` service was configured to `enabled` in the
    profile and it was brought to the `online` state. If we reboot the system, we''re
    going to see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Both the XML files (the manifest and the profile) are shown in the output.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new service was created by performing all the usual steps, such as creating
    the start/stop script, creating a manifest, importing it, and running the service.
    Furthermore, you learned how to modify a profile automatically to start a service
    during the Oracle Solaris 11 boot phase.
  prefs: []
  type: TYPE_NORMAL
- en: Administering inetd-controlled network services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Oracle Solaris 11, there are services that are out of the SMF context and
    they are controlled by another (and old) daemon: inetd. Inetd is the official
    restarter of these network services and, during the tasks where we are managing
    them, the main command to accomplish all tasks is `inetadm`. It is time to see
    how this works.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This procedure requires a virtual machine (using VirtualBox or VMware) running
    Oracle Solaris 11 and with 4 GB RAM.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Initially, there are a few interesting services to play with. Therefore, we
    have to install a good service: `telnet`. Execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'To list the existing inetd services, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The old and good `inetd.conf` still exists, but it does not have any relevant
    content for network service configuration anymore (all lines are commented):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'To collect more details about the `telnet` service that we have just installed,
    it is necessary to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'To enable the `telnet` service, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'As the `telnet` service has several attributes, it is feasible to change them,
    for example, during a troubleshooting session. For example, in order to enable
    the `telnet` service to log all its records to the `syslog` service, execute the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'This is great! We can disable the `telnet` service when it isn''t required
    anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Good! It is time to learn another very interesting and unusual trick in our
    next example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, our goal is to create a very simple backdoor as a service in the old `inetd.conf`
    file under `/etc/inet/` and to convert it to SMF. How can we do this? Easy! The
    first step is to create a service line in the `inetd.conf` file under `/etc/inet/`
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we have created the mentioned line in the `inetd.conf` file, we have
    to assign a TCP port to this service in the `/etc/services` file (the last line)
    by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a command named `inetconf` that converts an INET service to an SMF
    service easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the service was converted to the SMF model as expected, execute
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to test whether the backdoor service is working, execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: That's wonderful! The backdoor service is working well!
  prefs: []
  type: TYPE_NORMAL
- en: Going further, Oracle Solaris 11 offers a command named `netservice` that opens
    or closes most network services (except the `ssh` service) for any remote access
    by applying the `generic_limited_net.xml` profile and configuring the local-only
    mode attribute from some services. I suggest that you take some time to examine
    this profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `netservices` command to close most network services for remote access
    is easy and can be done by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'To reverse the status (enabled or disabled) of each network service, run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You learned how to administer inetd services as well as how to create and transform
    an inetd service into an SMF service. The main commands in this section were `inetadm`
    and `inetconv`.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting Oracle Solaris 11 services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this last section of the chapter, you're going to learn how to troubleshoot
    a service that's presenting an error and how to fix a corrupted repository.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To following the recipe, it'll be necessary to have a virtual machine (using
    VirtualBox or VMware) with Oracle Solaris 11 installed and 4 GB RAM.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main role of an administrator is to keep everything working well. The best
    way to analyze the system is by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, there isn''t a problem in the system, but we can simulate one. For
    example, in the next step, we will break the `gedit_script` service by taking
    out a semicolon from its script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'To continue the procedure, the `gedit_script` service will be disabled and
    enabled again by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the previous three outputs, we broke the service and started it
    again quickly, so it has entered the maintenance state. To collect more information
    about the service in order to focus on the possible cause, execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The service isn''t running and there are more details from its logfile, as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s fantastic! The Oracle Solaris 11 SMF framework describes the exact
    line where the error has occurred. To repair the problem, we must fix the broken
    line (by adding a `;` again where we removed it from) and restore the service
    to the `online` state. Then, after fixing the syntax problem, run the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: That's perfect! The service has come to the online state again!
  prefs: []
  type: TYPE_NORMAL
- en: Going to the last topic, the SMF repository is accessed through the `svc.configd`
    daemon and it's the daemon that controls every read/write operation to the service
    repository. Furthermore, `svc.configd` also checks the repository integrity when
    it starts. Corruption in the repository is rare, but it can happen and in this
    case, we can repair it with the system either in the online or in the maintenance
    mode (through the `sulogin` command). To fix the repository, run the following
    command;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at [http://support.oracle.com/msg/SMF-8000-MY](http://support.oracle.com/msg/SMF-8000-MY)
    for more information on the use of this script to restore backup copies of the
    `smf(5)` repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there are any problems that need human intervention, this script will give
    instructions and then exit back to your shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: The backups are named based on their types and on the time when they were taken.
    Backups beginning with `boot` are made before the first change is made to the
    repository after the system boot. Backups beginning with `manifest_import` are
    made after `svc:/system/manifest-import:default` finishes its processing.
  prefs: []
  type: TYPE_NORMAL
- en: The time of backup is given in the `YYYYMMDD_HHMMSS` format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please enter either a specific backup repository from the previous list to
    restore it or select one of the following choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Before choosing an option, you must know which repository backup types exist
    in the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '`boot-<timestamp>`: In `boot-<timestamp>`, backups are made after a system
    boots but before any change is made.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`manifest_import-<timestamp>`: In `manifest_import-<timestamp>`, backups are
    made after `svc:/system/manifest-import:default` is executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--seed--`: This restores the initial repository. If we restore this backup,
    every service or change that was done will be lost!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this case, we''re going to pick the `boot` option, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: After the system rebooting, the system comes online again and everything works
    well!
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to find a service error using `svcs –xv <fmri>`
    to correct it, to bring the service online again (`svcadm clear <fmri>`), and
    in extreme cases, to restore the repository using the `/lib/svc/bin/restore_repository`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Oracle Solaris Administration: Common Tasks* at [http://docs.oracle.com/cd/E23824_01/pdf/821-1451.pdf](http://docs.oracle.com/cd/E23824_01/pdf/821-1451.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Oracle Solaris 11* *Administrator''s Cheat Sheet* at [http://www.oracle.com/technetwork/server-storage/solaris11/documentation/solaris-11-cheat-sheet-1556378.pdf](http://www.oracle.com/technetwork/server-storage/solaris11/documentation/solaris-11-cheat-sheet-1556378.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

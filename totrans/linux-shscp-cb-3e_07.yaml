- en: The Backup Plan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Archiving with `tar`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archiving with `cpio`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compressing data with `gzip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archiving and compressing with `zip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster archiving with `pbzip2`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating filesystems with compression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up snapshots with `rsync`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differential archives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating entire disk images using `fsarchiver`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nobody cares about backups until they need them, and nobody makes backups unless
    forced. Therefore, making backups needs to be automated. With advances in disk
    drive technology, it's simplest to add a new drive or use the cloud for backups,
    rather than backing up to a tape drive. Even with cheap drives or cloud storage,
    backup data should be compressed to reduce storage needs and transfer time. Data
    should be encrypted before it's stored on the cloud. Data is usually archived
    and compressed before encrypting. Many standard encryption programs can be automated
    with shell scripts. This chapter's recipes describe creating and maintaining files
    or folder archives, compression formats, and encrypting techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Archiving with tar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tar` command was written to archive files. It was originally designed to
    store data on tape, thus the name, **Tape ARchive**. Tar allows you to combine
    multiple files and directories into a single file while retaining the file attributes,
    such as owner and permissions. The file created by the `tar` command is often
    referred to as a **tarball**. These recipes describe creating archives with `tar`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tar` command comes by default with all Unix-like operating systems. It
    has a simple syntax and creates archives in a portable file format. It supports
    many arguments to fine-tune its behavior.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tar` command creates, updates, examines, and unpacks archives.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an archive file with tar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `c` option creates a new archive and the `f` option tells tar the name
    of a file to use for the archive. The f option must be followed by a filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-t` option lists the contents of an archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-v` or `-vv` flag includes more information in the output. These features
    are called verbose (`v`) and very-verbose (`vv`). The `-v` convention is common
    for commands that generate reports by printing to the terminal. The `-v` option
    displays more details, such as file permissions, owner group, and modification
    date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The filename must appear immediately after the `-f` and it should be the last
    option in the argument group. For example, if you want verbose output, you should
    use the options like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ tar -cvf output.tar file1 file2 file3 folder1 ..`'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tar command accepts a list of filenames or wildcards such as `*.txt` to
    specify the sources. When finished, `tar` will archive the source files into the
    named file.
  prefs: []
  type: TYPE_NORMAL
- en: We cannot pass hundreds of files or folders as command-line arguments. So, it
    is safer to use the append option (explained later) if many files are to be archived.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go through additional features supported by the `tar` command.
  prefs: []
  type: TYPE_NORMAL
- en: Appending files to an archive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `-r` option will append new files to the end of an existing archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The next example creates an archive with one text file in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-t` option displays the files in an archive. The `-f` option defines the
    archive name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-r` option appends a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The archive now contains both the files.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting files and folders from an archive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `-x` option extracts the contents of the archive to the current directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When `-x` is used, the `tar` command extracts the contents of the archive to
    the current directory. The `-C` option specifies a different directory to receive
    the extracted files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The command extracts the contents of an archive to a specified directory. It
    extracts the entire contents of the archive. We can extract just a few files by
    specifying them as command arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command extracts only `file1` and `file4`, and it ignores other
    files in the archive.
  prefs: []
  type: TYPE_NORMAL
- en: stdin and stdout with tar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While archiving, we can specify `stdout` as the output file so another command
    in a pipe can read it as `stdin` and process the archive.
  prefs: []
  type: TYPE_NORMAL
- en: 'This technique will transfer data through a **Secure Shell** (**SSH**) connection,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the files/directory is added to a tar archive which
    is output to `stdout` (denoted by `-`) and extracted to the `Documents` folder
    on the remote system.
  prefs: []
  type: TYPE_NORMAL
- en: Concatenating two archives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `-A` option will merge multiple tar archives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given two tarballs, `file1.tar` and `file2.tar`, the following command will
    merge the contents of `file2.tar` into `file1.tar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify it by listing the contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Updating files in an archive with a timestamp check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The append option appends any given file to the archive. If a file already exists
    inside the archive, tar will append the file, and the archive will contain duplicates.
    The update option `-u` specifies only appending files that are newer than existing
    files inside the archive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To append `filea` only if `filea` has been modified since the last time it
    was added to `archive.tar`, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Nothing happens if the version of `filea` outside the archive and the `filea`
    inside `archive.tar` have the same timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `touch` command to modify the file timestamp and then try the `tar`
    command again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The file is appended since its timestamp is newer than the one inside the archive,
    as shown with the `-t` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note that the new `filea` has been appended to the `tar` archive. When extracting
    this archive, tar will select the latest version of `filea`.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing files in the archive and filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `-d` flag compares files inside an archive with those on the filesystem.
    This feature can be used to determine whether or not a new archive needs to be
    created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Deleting files from the archive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `-delete` option removes files from an archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The next example demonstrates deleting a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Compression with the tar archive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the `tar` command archives files, it does not compress them. Tar
    supports options to compress the resulting archive. Compression can significantly
    decrease the size of the files. Tarballs are often compressed into one of the
    following formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '**gzip format**: `file.tar.gz` or `file.tgz`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bzip2 format**: `file.tar.bz2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lempel-Ziv-Markov format**: `file.tar.lzma`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Different `tar` flags are used to specify different compression formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-j` for **bunzip2**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-z` for **gzip**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--lzma` for **lzma**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is possible to use compression formats without explicitly specifying special
    options as earlier. `tar` can compress based on the extension of the output or
    decompress based on an input file''s extension. The `-a` or - **auto-compress**
    option causes tar to select a compression algorithm automatically based on file
    extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Excluding a set of files from archiving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `-exclude [PATTEN]` option will exclude files matched by wildcard patterns
    from being archived.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to exclude all `.txt` files from archiving use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note that the pattern should be enclosed within quotes to prevent the shell
    from expanding it.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to exclude a list of files provided in a list file with
    the `-X` flag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now it excludes `filea` and `fileb` from archiving.
  prefs: []
  type: TYPE_NORMAL
- en: Excluding version control directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One use for tarballs is distributing source code. Much source code is maintained
    using version control systems such as subversion, Git, mercurial, and CVS, (refer
    to the previous chapter). Code directories under version control often contain
    special directories such as `.svn` or `.git`. These are managed by the version
    control application and are not useful to anyone except a developer. Thus, they
    should be eliminated from the tarball of the source code being distributed to
    users.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to exclude version control related files and directories while archiving
    use the `--exclude-vcs` option along with `tar`. Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Printing the total bytes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `-totals` option will print the total bytes copied to the archive. Note
    that this is the number of bytes of actual data. If you include a compression
    option, the file size will be less than the number of bytes archived.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Compressing data with gzip* recipe in this chapter explains the `gzip`
    command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archiving with cpio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `cpio` application is another archiving format similar to `tar`. It is used
    to store files and directories in an archive with attributes such as permissions
    and ownership. The `cpio` format is used in RPM package archives (which are used
    in `distros` such as Fedora), `initramfs` files for the Linux kernel that contain
    the kernel image, and so on. This recipe will give simple examples of `cpio`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `cpio` application accepts input filenames via `stdin` and it writes the
    archive to `stdout`. We have to redirect `stdout` to a file to save the `cpio`
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create test files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Archive the test files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'List files in a `cpio` archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract files from the `cpio` archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the archiving command, the options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-o`: This specifies the output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v`: This is used for printing a list of files archived'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `cpio`, we can also archive using files as absolute paths. `/usr/``somedir`
    is an absolute path as it contains the full path starting from root (`/`).
  prefs: []
  type: TYPE_NORMAL
- en: A relative path will not start with `/` but it starts the path from the current
    directory. For example, `test/file` means that there is a directory named `test`
    and `file` is inside the `test` directory.
  prefs: []
  type: TYPE_NORMAL
- en: While extracting, `cpio` extracts to the absolute path itself. However, in the
    case of `tar`, it removes the `/` in the absolute path and converts it to a relative
    path.
  prefs: []
  type: TYPE_NORMAL
- en: 'The options in the command for listing all the files in the given `cpio` archive
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-i` is for specifying the input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t` is for listing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the command for extraction, `-o` stands for extracting and `cpio` overwrites
    files without prompting. The `-d` option tells `cpio` to create new directories
    as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Compressing data with gzip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **gzip** application is a common compression format in the GNU/Linux platform.
    The `gzip`, `gunzip`, and `zcat` programs all handle `gzip` compression. These
    utilities only compress/decompress a single file or data stream. They cannot archive
    directories and multiple files directly. Fortunately, `gzip` can be used with
    both tar and `cpio`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`gzip` will compress a file and `gunzip` will decompress it back to the original:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compress a file with `gzip`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract a `gzip` compressed file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to list the properties of a compressed file, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `gzip` command can read a file from `stdin` and write a compressed file
    to `stdout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Read data from `stdin` and output the compressed data to `stdout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `-c` option is used to specify output to `stdout`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The gzip `-c` option works well with `cpio`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: We can specify the compression level for `gzip` using `--fast` or the `--best`
    option to provide low and high compression ratios, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `gzip` command is often used with other commands and has advanced options
    to specify the compression ratio.
  prefs: []
  type: TYPE_NORMAL
- en: Gzip with tarball
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A gzipped tarball is a tar archive compressed using gzip. We can use two methods
    to create such tarballs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first method is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, this command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `-z` option specifies `gzip` compression and the `-a` option specifies that
    the compression format should be determined from the extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second method is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, create a tarball:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, compress the tarball:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If many files (a few hundred) are to be archived in a tarball and need to be
    compressed, we use the second method with a few changes. The problem with defining
    many files on the command line is that it can accept only a limited number of
    files as arguments. To solve this problem, we create a `tar` file by adding files
    one by one in a loop with the append option (`-r`), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command will extract a gzipped tarball:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, the `-a` option is used to detect the compression
    format.
  prefs: []
  type: TYPE_NORMAL
- en: zcat - reading gzipped files without extracting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `zcat` command dumps uncompressed data from a `.gz` file to `stdout` without
    recreating the original file. The `.gz` file remains intact.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Compression ratio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can specify the compression ratio, which is available in the range 1 to
    9, where:'
  prefs: []
  type: TYPE_NORMAL
- en: 1 is the lowest, but fastest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9 is the best, but slowest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can specify any ratio in that range as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: By default, `gzip` uses a value of `-6`, favoring a better compression at the
    cost of some speed.
  prefs: []
  type: TYPE_NORMAL
- en: Using bzip2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`bzip2` is similar to `gzip` in function and syntax. The difference is that
    `bzip2` offers better compression and runs more slowly than `gzip`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To compress a file using `bzip2` use the command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract a bzipped file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The way to compress to and extract from tar.bz2 files is similar to tar.gz,
    discussed earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Here `-j` specifies compressing the archive in the `bzip2` format.
  prefs: []
  type: TYPE_NORMAL
- en: Using lzma
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `lzma` compression delivers better compression ratios than `gzip` and `bzip2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compress a file using `lzma` use the command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To extract a `lzma` file, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'A tarball can be compressed with the `-lzma` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, this can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'To extract a tarball created with `lzma` compression to a specified directory,
    use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, `-x` is used for extraction. `--lzma` specifies the
    use of `lzma` to decompress the resulting file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Archiving with tar* recipe in this chapter explains the `tar` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archiving and compressing with zip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ZIP is a popular compressed archive format available on Linux, Mac, and Windows.
    It isn't as commonly used as `gzip` or `bzip2` on Linux but is useful when distributing
    data to other platforms.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following syntax creates a zip archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `file.zip` file will be produced.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-r` flag will archive folders recursively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The `unzip` command will extract files and folders from a ZIP file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The unzip command extracts the contents without removing the archive (unlike
    `unlzma` or `gunzip`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-u` flag updates files in the archive with newer files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-d` flag deletes one or more files from a zipped archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-l` flag to unzip lists the files in an archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While being similar to most of the archiving and compression tools we have already
    discussed, `zip`, unlike `lzma`, `gzip`, or `bzip2`, won't remove the source file
    after archiving. While `zip` is similar to `tar`, it performs both archiving and
    compression, while `tar` by itself does not perform compression.
  prefs: []
  type: TYPE_NORMAL
- en: Faster archiving with pbzip2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most modern computers have at least two CPU cores. This is almost the same as
    two real CPUs doing your work. However, just having a multicore CPU doesn't mean
    a program will run faster; it is important that the program is designed to take
    advantage of the multiple cores.
  prefs: []
  type: TYPE_NORMAL
- en: The compression commands covered so far use only one CPU. The `pbzip2`, `plzip`,
    `pigz`, and `lrzip` commands are multithreaded and can use multiple cores, hence,
    decreasing the overall time taken to compress your files.
  prefs: []
  type: TYPE_NORMAL
- en: None of these are installed with most distros, but can be added to your system
    with apt-get or yum.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`pbzip2` usually doesn''t come preinstalled with most distros, you will have
    to use your package manager to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pbzip2` command will compress a single file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '`pbzip2` detects the number of cores on your system and compresses `myfile.tar`,
    to `myfile.tar.bz2`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To compress and archive multiple files or directories, we use `pbzip2` in combination
    with `tar`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, this can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Extracting a `pbzip2` compressed file is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `-d` flag will decompress a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'A tar archive can be decompressed and extracted using a pipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pbzip2` application uses the same compression algorithms as `bzip2`, but
    it compresses separate chunks of data simultaneously using `pthreads`, a threading
    library. The threading is transparent to the user, but provides much faster compression.
  prefs: []
  type: TYPE_NORMAL
- en: Like `gzip` or `bzip2`, `pbzip2` does not create archives. It only works on
    a single file. To compress multiple files and directories, we use it in conjunction
    with `tar` or `cpio`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are other useful options we can use with `pbzip2`:'
  prefs: []
  type: TYPE_NORMAL
- en: Manually specifying the number of CPUs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `-p` option specifies the number of CPU cores to use. This is useful if
    automatic detection fails or you need cores free for other jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: This will tell `pbzip2` to use 4 CPUs.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the compression ratio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The options from `-1` to `-9` specify the fastest and best compression ratios
    with **1** being the fastest and **9** being the best compression
  prefs: []
  type: TYPE_NORMAL
- en: Creating filesystems with compression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `squashfs` program creates a read-only, heavily compressed filesystem. The
    `squashfs` program can compress 2 to 3 GB of data into a 700 MB file. The Linux
    LiveCD (or LiveUSB) distributions are built using `squashfs`. These CDs make use
    of a read-only compressed filesystem, which keeps the root filesystem on a compressed
    file. The compressed file can be loopback-mounted to load a complete Linux environment.
    When files are required, they are decompressed and loaded into the RAM, run, and
    the RAM is freed.
  prefs: []
  type: TYPE_NORMAL
- en: The `squashfs` program is useful when you need a compressed archive and random
    access to the files. Completely decompressing a large compressed archive takes
    a long time. A loopback-mounted archive provides fast file access since only the
    requested portion of the archive is decompressed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Mounting a `squashfs` filesystem is supported by all modern Linux distributions.
    However, creating `squashfs` files requires `squashfs-tools`, which can be installed
    using the package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, this can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `squashfs` file by adding source directories and files with the `mksquashfs`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Sources can be wildcards, files, or folder paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: More details will be printed on the terminal. The output is stripped to save
    space.
  prefs: []
  type: TYPE_NORMAL
- en: 'To mount the `squashfs` file to a mount point, use loopback mounting, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: You can access the contents at `/mnt/squashfs`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `squashfs` filesystem can be customized by specifying additional parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Excluding files while creating a squashfs file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `-e` flag will exclude files and folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The `-e` option excludes `/etc/``passwd and` `/etc/``shadow` files from the
    `squashfs` filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-ef` option reads a file with a list of files to exclude:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: If we want to support wildcards in excludes lists, use `-wildcard` as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up snapshots with rsync
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backing up data is something that needs to be done regularly. In addition to
    local backups, we may need to back up data to or from remote locations. The `rsync`
    command synchronizes files and directories from one location to another while
    minimizing transfer time. The advantages of `rsync` over the `cp` command are
    that `rsync` compares modification dates and will only copy the files that are
    newer, `rsync` supports data transfer across remote machines, and `rsync` supports
    compression and encryption.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To copy a source directory to a destination, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-a` stands for archiving'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v` (verbose) prints the details or progress on stdout'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding command will recursively copy all the files from the source path
    to the destination path. The source and destination paths can be either remote
    or local.
  prefs: []
  type: TYPE_NORMAL
- en: 'To backup data to a remote server or host, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: To keep a mirror at the destination, run the same `rsync` command at regular
    intervals. It will copy only changed files to the destination.
  prefs: []
  type: TYPE_NORMAL
- en: 'To restore the data from the remote host to `localhost`, use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The `rsync` command uses SSH to connect to the remote machine hence, you should
    provide the remote machine's address in the `user@host` format, where user is
    the username and host is the IP address or host name attached to the remote machine.
    `PATH` is the path on the remote machine from where the data needs to be copied.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the OpenSSH server is installed and running on the remote machine.
    Additionally, to avoid being prompted for a password for the remote machine, refer
    to the *Password-less auto-login with SSH* recipe in [Chapter 8](5ba784d5-fa8b-4840-b4c5-cac906e484f9.xhtml), *The
    Old-Boy Network*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Compressing data during transfer can significantly optimize the speed of the
    transfer. The `rsync-z` option `specifies` compressing data during transfer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'To synchronize one directory to another directory, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command copies the source (`/home/test`) to an existing folder
    called backups.
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy a full directory inside another directory, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: This command copies the source (`/home/test`) to a directory named backups by
    creating that directory.
  prefs: []
  type: TYPE_NORMAL
- en: For the PATH format, if we use `/` at the end of the source, `rsync` will copy
    the contents of the end directory specified in the `source_path` to the destination.
  prefs: []
  type: TYPE_NORMAL
- en: If `/` is not present at the end of the source, `rsync` will copy the end directory
    itself to the destination.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the `-r` option will force `rsync` to copy all the contents of a directory,
    recursively.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `rsync` command works with the source and destination paths, which can
    be either local or remote. Both paths can be remote paths. Usually, remote connections
    are made using SSH to provide secure, two-way communication. Local and remote
    paths look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/home/user/data` (local path)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user@192.168.0.6:/home/backups/data` (remote path)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/home/user/data` specifies the absolute path in the machine in which the `rsync`
    command is executed. `user@192.168.0.6:/home/backups/data` specifies that the
    path is `/home/backups/data` in the machine whose IP address is `192.168.0.6`
    and is logged in as the `user` user.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `rsync` command supports several command-line options to fine-tune its behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Excluding files while archiving with rsync
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `-exclude` and -exclude-from options specify files that should not be transferred:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'We can specify a wildcard pattern of files to be excluded. Consider the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: This command excludes the `.o` files from backing up.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we can specify a list of files to be excluded by providing a
    list file.
  prefs: []
  type: TYPE_NORMAL
- en: Use `--exclude-from FILEPATH`.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting non-existent files while updating rsync backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, `rsync` does not remove files from the destination if they no longer
    exist at the source. The `-delete` option removes those files from the destination
    that do not exist at the source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Scheduling backups at intervals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can create a `cron` job to schedule backups at regular intervals.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `crontab` entry schedules `rsync` to be executed every 10 hours.
  prefs: []
  type: TYPE_NORMAL
- en: '`*/10` is the hour position of the `crontab` syntax. `/10` specifies executing
    the backup every 10 hours. If `*/10` is written in the minutes position, it will
    execute every 10 minutes.'
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at the *Scheduling with a cron* recipe in [Chapter 10](20129291-0a5b-43a8-ad0c-54c74992d0e3.xhtml), *Administration
    Call*s, to understand how to configure `crontab`.
  prefs: []
  type: TYPE_NORMAL
- en: Differential archives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The backup solutions described so far are full copies of a filesystem as it
    exists at that time. This snapshot is useful when you recognize a problem immediately
    and need the most recent snapshot to recover. It fails if you don't realize the
    problem until a new snapshot is made and the previous good data has been overwritten
    by current bad data.
  prefs: []
  type: TYPE_NORMAL
- en: An archive of a filesystem provides a history of file changes. This is useful
    when you need to return to an older version of a damaged file.
  prefs: []
  type: TYPE_NORMAL
- en: '`rsync`, `tar`, and `cpio` can be used to make daily snapshots of a filesystem.
    However, backing up a full filesystem every day is expensive. Creating a separate
    snapshot for each day of the week will require seven times as much space as the
    original filesystem.'
  prefs: []
  type: TYPE_NORMAL
- en: Differential backups only save the data that's changed since the last full backup.
    The dump/restore utilities from Unix support this style of archived backups. Unfortunately,
    these utilities were designed around tape drives and are not simple to use.
  prefs: []
  type: TYPE_NORMAL
- en: The find utility can be used with `tar` or `cpio` to duplicate this type of
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create an initial full backup with tar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Use find''s `-newer` flag to determine what files have changed since the full
    backup was created, and create a new archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The find command generates a list of all files that have been modified since
    the creation of the full backup `(/backup/full.tgz`).
  prefs: []
  type: TYPE_NORMAL
- en: The date command generates a filename based on the Julian date. Thus, the first
    differential backup of the year will be `day-1.tgz`, the backup for January 2
    will be `day-2.tgz`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The differential archive will be larger each day as more and more files are
    changed from the initial full backup. When the differential archives grow too
    large, make a new full backup.
  prefs: []
  type: TYPE_NORMAL
- en: Creating entire disk images using fsarchiver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `fsarchiver` application can save the contents of a disk partition to a
    compressed archive file. Unlike `tar` or `cpio`, `fsarchiver` retains extended
    file attributes and can be restored to a disk with no current filesystem. The
    `fsarchiver` application recognizes and retains Windows file attributes as well
    as Linux attributes, making it suitable for migrating Samba-mounted partitions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `fsarchiver` application is not installed in most distros by default. You
    will have to install it using your package manager. For more information, go to
    [http://www.fsarchiver.org/Installation](http://www.fsarchiver.org/Installation).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a backup of a `filesystem/partition`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `savefs` option of `fsarchiver` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Here `backup.fsa` is the final backup file and `/dev/sda1` is the partition
    to backup
  prefs: []
  type: TYPE_NORMAL
- en: Back-up more than one partition at the same time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `savefs` option as earlier and pass the partitions as the last parameters
    to `fsarchiver`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Restore a partition from a backup archive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `restfs` option of `fsarchiver` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '`id=0` denotes that we want to pick the first partition from the archive to
    the partition specified as `dest=/dev/sda1`.'
  prefs: []
  type: TYPE_NORMAL
- en: Restore multiple partitions from a backup archive.
  prefs: []
  type: TYPE_NORMAL
- en: 'As earlier, use the `restfs` option as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use two sets of the `id,dest` parameter to tell `fsarchiver` to restore
    the first two partitions from the backup to two physical partitions.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like tar, `fsarchiver` examines the filesystem to create a list of files and
    then saves those files in a compressed archive file. Unlike tar which only saves
    information about the files, `fsarchiver` performs a backup of the filesystem
    as well. This makes it easier to restore the backup on a fresh partition as it
    is not necessary to recreate the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: If you are seeing the `/dev/sda1` notation for partitions for the first time,
    this requires an explanation. `/dev` in Linux holds special files called device
    files, which refer to a physical device. The `sd` in `sda1` refers to **SATA**
    disk, the next letter can be a, b, c, and so on, followed by the partition number.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b05265_07_lastimg.jpg)'
  prefs: []
  type: TYPE_IMG

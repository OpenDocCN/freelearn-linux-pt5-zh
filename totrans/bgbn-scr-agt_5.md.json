["```\nsudo apt-get install bitlbee bitlbee-plugin-otr\n\n```", "```\nregister <password>\n\n```", "```\nAccount successfully created\n\n```", "```\naccount add jabber you@gmail.com\n\n```", "```\n<root> Account successfully added with tag gtalk\n<root> You can now use the /OPER command to enter the password\n<root> Alternatively, enable OAuth if the account supports it: account gtalk set oauth on\n\n```", "```\nacc gtalk set oauth on\n\n```", "```\naccount gtalk set nick_format %full_name\n\n```", "```\nacc gtalk on\n\n```", "```\n<jabber_oauth> Open this URL in your browser to authenticate:\nhttps://...\n<jabber_oauth> Respond to this message with the returned authorization token.\n\n```", "```\n<root> jabber - Logging in: Starting OAuth authentication\n<root> jabber - Logging in: Requesting OAuth access token\n<root> jabber - Logging in: Connecting\n<root> jabber - Logging in: Connected to server, logging in\n<root> jabber - Logging in: Converting stream to TLS\n<root> jabber - Logging in: Connected to server, logging in\n<root> jabber - Logging in: Authentication finished\n<root> jabber - Logging in: Server changed session resource string to `BitlBee301D65C5'\n<root> jabber - Logging in: Authenticated, requesting buddy list\n<root> jabber - Logging in: Logged in\n\n```", "```\naccount add jabber username@jabber.org password\n\n```", "```\nAccount successfully added with tag jabber\n\n```", "```\nacc jabber on\n\n```", "```\notr keygen 0\n\n```", "```\notr info\n\n```", "```\nrename gabriel_ice_ gabriel_ice_jabber\n\n```", "```\nadd 0 gabriel.ice@gmail.com\n\n```", "```\n<maxine> gabriel_ice_jabber: when can we meet to talk about DeepArcher?\n<gabriel_ice_jabber> maxine: Tuesday at 10.\n\n```", "```\notr connect gabriel_ice_jabber\n\n```", "```\notr smpq gabriel_ice_jabber \"What beer did I order last night, one word, lowercase?\" ipa\n\n```", "```\n<root> smp: initiating with gabriel_ice_jabber_...\n<root> smp gabriel_ice_jabber_: secrets proved equal, fingerprint trusted\n\n```", "```\n<root> smp: initiated by gabriel_ice_jabber with question: \"What did I have for lunch yesterday, one word, lowercase?\"\n<root> smp: respond with otr smp gabriel_ice_jabber <answer>\n<jbd> otr smp gabriel_ice_jabber pizza\n<root> smp: responding to gabriel_ice_jabber...\n<root> smp gabriel_ice_jabber: correct answer, you are trusted\n\n```", "```\n?OTR:AAIDAAAAAAQAAAAFAAAAwBPAdyxNJT7MYxOFBPfmPRCbW3yE6gADfimB7wikaf/r9/DVQ3hZfJXj+c7HSddySk77fJi3csbRIIxKCSXGLO/9cOw7SJ+u10d8D6Wp2scCAi7TzO/YGkZmeGlef3lYUbwaVkH5VoYfLSo+i90McmLrgEfM9kgZuXLtDA1H2f4jWdtBJh1XxdK/GyZBZvTcncMs/e3rRrKpSNZiJq0kijMhIK6N4NRdaNK1URipDJai1d2bnGJ2Pk0rihXc5yzCrgAAAAAAAAACAAAAEUw6xZ+tJrdEG/+yqaiwoDi0Fc9eloiWtIc1UWQ8JTIT3eaKvuMAAAAA.\n\n```", "```\nwget http://znc.in/releases/znc-1.4.tar.gz\n\n```", "```\ngpg â€“recv-key  D5823CACB477191CAC0075555AE420CC0209989E\n\n```", "```\nwget http://znc.in/releases/znc-1.4.tar.gz.sig\n\n```", "```\ngpg --verify znc-1.4.tar.gz.sig znc-1.4.tar.gz\nYou should see something like the following:\ngpg: Signature made Thu 08 May 2014 08:21:40 PM UTC using RSA key ID 0209989E\ngpg: Good signature from \"Alexey Sokolov <alexey@alexeysokolov.co.cc>\"\ngpg:                 aka \"Alexey Sokolov <ktonibud@gmail.com>\"\ngpg:                 aka \"Alexey Sokolov <alexey@asokolov.org>\"\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: D582 3CAC B477 191C AC00  7555 5AE4 20CC 0209 989E\n\n```", "```\nwgetsig(){\n    wget $1\n    wget $1.sig\n    fn=$(basename $1)\n    gpg --verify $fn.sig $fn\n}\n```", "```\ntar -zxvf znc-1.4.tar.gz\n\n```", "```\nsudo apt-get install libssl-dev libperl-dev\n\n```", "```\ncd znc-*\n./configure\nmake\nsudo make install\n\n```", "```\nznc --makeconf\n\n```", "```\n[ .. ] Checking for list of available modules...\n[ >> ] ok\n[ ** ] Building new config\n[ ** ]\n[ ** ] First let's start with some global settings...\n[ ** ]\n[ ?? ] What port would you like ZNC to listen on? (1025 to 65535): 50000\n[ ?? ] Would you like ZNC to listen using SSL? (yes/no) [no]: yes\n[ ?? ] Would you like ZNC to listen using both IPv4 and IPv6? (yes/no) [yes]: yes\n[ .. ] Verifying the listener...\n[ >> ] ok\n[ ** ] Unable to locate pem file: [/home/debian/.znc/znc.pem], creating it\n[ .. ] Writing Pem file [/home/debian/.znc/znc.pem]...\n[ >> ] ok\n[ ** ]\n[ ** ] -- Global Modules --\n[ ** ]\n[ ** ] +-----------+----------------------------------------------------------+\n[ ** ] | Name      | Description \n[ ** ] +-----------+---------------------------------------+ \n[ ** ] | partyline | Internal channels and queries for users \n connected to znc |\n[ ** ] | webadmin  | Web based administration module       |\n[ ** ] +-----------+---------------------------------------+\n[ ** ] And 10 other (uncommon) modules. You can enable those\n later.\n[ ** ]\n[ ?? ] Load global module <partyline>? (yes/no) [no]: yes\n[ ?? ] Load global module <webadmin>? (yes/no) [no]: yes\n[ ** ]\n[ ** ] Now we need to set up a user...\n[ ** ]\n[ ?? ] Username (AlphaNumeric): zncbeagle\n[ ?? ] Enter Password:\n[ ?? ] Confirm Password:\n[ ?? ] Would you like this user to be an admin? (yes/no) [yes]:\n yes\n[ ?? ] Nick [zncbeagle]:\n[ ?? ] Alt Nick [zncbeagle_]:\n[ ?? ] Ident [zncbeagle]:\n[ ?? ] Real Name [Got ZNC?]: ZNC Admin\n[ ?? ] Bind Host (optional):\n[ ?? ] Number of lines to buffer per channel [50]:\n[ ?? ] Would you like to clear channel buffers after replay?\n (yes/no) [yes]:\n[ ?? ] Default channel modes [+stn]:\n[ ** ]\n[ ** ] -- User Modules --\n[ ** ]\n[ ** ] +--------------+------------------------------------------+\n[ ** ] | Name         | Description                              |\n[ ** ] +--------------+------------------------------------------+\n[ ** ] | chansaver    | Keep config up-to-date when user         |\n |              | joins/parts                              |\n[ ** ] | controlpanel | Dynamic configuration through IRC. Allows editing only yourself if you're not ZNC admin. |\n[ ** ] | perform      | Keeps a list of commands to be executed when ZNC connects to IRC.                        |\n[ ** ] | webadmin     | Web based administration module                                                          |\n[ ** ] +--------------+------------------------------------------------------------------------------------------+\n[ ** ] And 21 other (uncommon) modules. You can enable those later.\n[ ** ]\n[ ?? ] Load module <chansaver>? (yes/no) [no]:\n[ ?? ] Load module <controlpanel>? (yes/no) [no]:\n[ ?? ] Load module <perform>? (yes/no) [no]:\n[ ?? ] Load module <webadmin>? (yes/no) [no]: yes\n[ ** ]\n[ ?? ] Would you like to set up a network? (yes/no) [no]:\n[ ** ]\n[ ?? ] Would you like to set up another user? (yes/no) [no]:\n[ .. ] Writing config [/home/debian/.znc/configs/znc.conf]...\n[ >> ] ok\n[ ** ]\n[ ** ]To connect to this ZNC you need to connect to it as your IRC server\n[ ** ]using the port that you supplied.  You have to supply your login info\n[ ** ]as the IRC server password like this: user/network:pass.\n[ ** ]\n[ ** ]Try something like this in your IRC client...\n[ ** ]/server <znc_server_ip> +50000 zncbeagle:<pass>\n[ ** ]And this in your browser...\n[ ** ]https://<znc_server_ip>:50000/\n[ ** ]\n[ ?? ] Launch ZNC now? (yes/no) [yes]: yes\n[ .. ] Opening config [/home/debian/.znc/configs/znc.conf]...\n[ >> ] ok\n[ .. ] Loading global module [partyline]...\n[ >> ] [/usr/local/lib/znc/partyline.so]\n[ .. ] Loading global module [webadmin]...\n[ >> ] [/usr/local/lib/znc/webadmin.so]\n[ .. ] Binding to port [+50000]...\n[ >> ] ok\n[ ** ] Loading user [zncbeagle]\n[ .. ] Loading user module [webadmin]...\n[ >> ] [/usr/local/lib/znc/webadmin.so]\n[ .. ] Forking into the background...\n[ >> ] [pid: 7019]\n[ ** ] ZNC 1.4 - http://znc.in\n\n```", "```\nsudo nano /etc/apt/sources.list\n\n```", "```\ndeb http://http.debian.net/debian wheezy-backports main\n\n```", "```\nsudo apt-get update\n\n```", "```\nsudo apt-get -t wheezy-backports install \"libotr5\" \"libotr5-dev\"\n\n```", "```\ngit clone https://github.com/mmilata/znc-otr.git\n\n```", "```\nLIBS=\"-lotr\" znc-buildmod otr.cpp\nBuilding \"otr.so\" for ZNC 1.4... [ ok ]\n\n```", "```\nhttps://192.168.1.42:50000\n\n```", "```\n-*status- You have several networks configured, but no network was specified for the connection.\n-*status- Selecting network [bitlbee]. To see list of all configured networks, use /znc ListNetworks\n-*status- If you want to choose another network, use /znc JumpNetwork <network>, or connect to ZNC with username zncbeagle/<network> (instead of just zncbeagle)\n\n```", "```\n/msg *status JumpNetwork freenode\n\n```", "```\nzncbeagle/freenode\n\n```", "```\n/query username\n\n```", "```\n/msg *otr genkey\n\n```", "```\n<*otr> Starting key generation in a background thread.\n<*otr> Key generation finished.\n\n```", "```\n?OTR?\n\n```", "```\n<alice> When prompted, answer the question: What was printed on my t-shirt which I wore yesterday? One word, lowercase.\n<bob> got it.\n\n```", "```\n/msg *otr auth bob tworkeffx\n\n```", "```\n<*otr> [bob] Gone SECURE. Please make sure logging is turned off on your IRC\n<*otr> [bob] Peer is not authenticated. There are two ways of verifying their identity:\n<*otr> [bob] 1\\. Agree on a common secret (do not type it into the chat), then type auth bob <secret>.\n<*otr> [bob] 2\\. Compare their fingerprint over a secure channel, then type trust bob.\n<*otr> [bob] Your fingerprint:  E8949490 D0326A85 1049EE79 DF111C0A BCC68D42\n<*otr> [bob] Their fingerprint: 00694775 3945FA05 B2E0DA61 5416DFFC 4F9C5936\n<*otr> [bob] Initiated authentication.\n<*otr> [bob] Peer replied to authentication request.\n<*otr> [bob] Successfully authenticated.\n\n```", "```\n/msg *otr auth bob <answer>\n\n```"]
- en: Chapter 9. Introduction to CoreOS rkt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we overviewed CoreUpdate, free and paid container repositories,
    and the hosting and enterprise registry provided by CoreOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about CoreOS''s `rkt`, a container runtime
    for applications. We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to `rkt`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running streamlined Docker images with `rkt`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting Docker images to ACI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to rkt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: rkt (pronounced "rock it") is a container runtime for applications made by CoreOS
    and is designed for composability, speed, and security. It is an alternative to
    Docker and is designed to be run on servers with the most rigorous security and
    production environments.
  prefs: []
  type: TYPE_NORMAL
- en: rkt is a standalone tool, compared to Docker's client and central daemon version,
    which makes it a better alternative to Docker, as it has fewer constraints and
    dependencies. For example, if the `docker` central daemon crashes, all running
    `docker` containers will be stopped; in the case of `rkt`, however, this can affect
    only the particular rkt process responsible for running `rkt` containers in its
    pod. As each `rkt` process gets its **process identification number** (**PID**),
    if one `rkt` process dies, it will not affect any other `rkt` process.
  prefs: []
  type: TYPE_NORMAL
- en: Features of rkt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will overview the main `rkt` features, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It can be integrated with `init` systems, as `systemd` and `upstart`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be integrated with cluster orchestration tools, such as `fleet` and `Kubernetes`
    (which we will cover in the next chapter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is compatible with other container solutions as Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has an extensible and modular architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basics of App container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`rkt` is an implementation of **App Container** (**appc**: [https://github.com/appc/spec/](https://github.com/appc/spec/)),
    which is open source and defines an image format, the runtime environment, and
    the discovery mechanism of application containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rkt` uses images of the **Application Container Image** (**ACI**) format as
    defined by the App Container (appc) specifications ([https://github.com/appc/spec](https://github.com/appc/spec)).
    An ACI is just a simple `tarball` bundle of different `rootfs` files and an image
    manifest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pod (the basic unit of execution in `rkt`) is a grouping of one or more app
    images (ACIs), with some optionally applied additional metadata on the pod level—for
    example, applying some resource constraints, such as CPU usage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using rkt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As rkt comes preinstalled with CoreOS, running ACI images with rkt is easy and
    it is very similar to `docker` commands. (I would love to write more on this,
    but rkt does not provide many options yet, as it is constantly changing and innovating,
    which was also the case at the time of writing this book).
  prefs: []
  type: TYPE_NORMAL
- en: 'As `rkt` has no running OS X client, you need to log in to your CoreOS VM host
    directly to run the following example commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to trust the remote site before we download any ACI file from
    there, as `rkt` verifies signatures by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then we can fetch (download) an image from there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then running the container with `rkt` is simple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you see, `rkt` appropriates ETags—as in our case v1.8.0 will be run.
  prefs: []
  type: TYPE_NORMAL
- en: rkt networking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default `rkt` run uses the host mode for port assignments. For example,
    if you have `EXPOSE 80` in your Dockerfile, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `rkt` pod will share the network stack and interfaces with the host machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to assign a different port/private IP address, then use `run` with
    these parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: rkt environment variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Environment variables can be inherited from the host using the `--inherit-env`
    flag. Using `flag --set-env`, we can set individual environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s prepare a few environment variables to be inherited using these
    two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s use them together with `--set-env` in the command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: rkt volumes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For host volumes, the `-volume` flag needs to be used. Volumes need to be defined
    in the ACI manifest when creating the new ACI image and converting Docker images.
    You will get an output like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![rkt volumes](img/image00176.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following command will mount the `host` directory on the `rkt` Pod:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `rkt` volume standard was not completed at the time of writing
    this book, so the previous example might not work when `rkt` reaches its final
    version.
  prefs: []
  type: TYPE_NORMAL
- en: Next let's see how `rkt` plays nicely with docker images.
  prefs: []
  type: TYPE_NORMAL
- en: Running streamlined Docker images with rkt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As there are thousands of docker images on the public Docker hub, `rkt` allows
    you to use them very easily. Alternatively, you might have some docker images
    and would like to run them with `rkt` too, without building new `rkt` ACI images,
    to see how they work with `rkt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running Docker images is very much the same as it was in previous examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As Docker images do not support signature verification yet, we just skip the
    verification step and fetch one with the `--insecure-skip-verify` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Running streamlined Docker images with rkt](img/image00177.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The last line shown in the preceding screenshot represents the `rkt` image
    ID of the converted ACI, and this can be used to `run` with `rkt` :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also we can run in this way, where the image will be downloaded and then run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we want to use volumes with Docker images, we run this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is very similar to the `docker` command, isn't it?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Okay, let''s update our local development `nginx.service` to use `rkt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you see, there is no `ExecStop=/usr/bin/docker stop nginx`. It is not needed
    because `systemd` takes care of stopping the `rkt` instance when the `systemctl`/`fleetctl`
    stop is used by sending the running `nginx` process a `SIGTERM`.
  prefs: []
  type: TYPE_NORMAL
- en: Much simpler than docker, right?
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to convert a docker image into an ACI image.
  prefs: []
  type: TYPE_NORMAL
- en: Converting Docker images into ACI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With CoreOS comes another file related to `rkt`—`docker2aci`. It converts a
    docker image to an ACI image (an application container image used by `rkt`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s convert our `nginx` image. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Converting Docker images into ACI](img/image00178.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also save a docker image in a file and the convert it. Run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Converting Docker images into ACI](img/image00179.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you can try to use the generated ACI files by updating the preceding
    `nginx.service fleet` unit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we overviewed the main features of CoreOS rkt, the `rkt` application
    container, and the image format. You also learned how to run images based on `aci`
    and `docker` as containers with `rkt`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will get an introduction to Google Kubernetes, an open
    source orchestration system for application containers.
  prefs: []
  type: TYPE_NORMAL

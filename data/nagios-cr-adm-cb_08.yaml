- en: Chapter 8. Managing Network Layout
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 管理网络布局
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Creating a network host hierarchy
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建网络主机层次结构
- en: Using the network map
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用网络地图
- en: Choosing icons for hosts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为主机选择图标
- en: Establishing a host dependency
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立主机依赖关系
- en: Establishing a service dependency
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立服务依赖关系
- en: Monitoring individual nodes in a cluster
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控集群中的独立节点
- en: Using the network map as an overlay
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将网络地图用作覆盖层
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: While Nagios Core is still very useful when configured to monitor only a simple
    list of hosts and services, it includes some optional directives that allow defining
    some structural and functional properties of the monitored network; specifically,
    how the hosts and services interrelate. Describing this structure in the configuration
    allows some additional intelligent behavior in the monitoring and notification
    that Nagios Core performs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然当 Nagios Core 配置为仅监控简单的主机和服务列表时仍然非常有用，但它包括一些可选指令，允许定义监控网络的一些结构和功能属性；特别是，主机和服务如何相互关联。通过在配置中描述这种结构，可以在监控和通知中实现
    Nagios Core 的一些附加智能行为。
- en: 'There are two main approaches to working with network structure in Nagios Core:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Nagios Core 中处理网络结构的主要方法有两种：
- en: Host parent definitions allow an administrator to define a hierarchy of connectivity
    to monitored hosts from the "point of view" of the Nagios Core server. An example
    might be a server with the monitored address in another subnet linked to the Nagios
    Core server by a router. If the router enters a `DOWN` state, it triggers Nagios
    Core's host reachability logic to automatically determine which hosts become inaccessible,
    and flags these as `UNREACHABLE` rather than `DOWN`, allowing refined notification
    behavior.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机父级定义允许管理员从 Nagios Core 服务器的“视角”定义监控主机的连接层次结构。例如，可能有一台位于另一个子网中的服务器，它通过路由器与
    Nagios Core 服务器相连。如果路由器进入 `DOWN` 状态，它会触发 Nagios Core 的主机可达性逻辑，自动确定哪些主机变得无法访问，并将这些主机标记为
    `UNREACHABLE` 而非 `DOWN`，从而实现更细致的通知行为。
- en: Host and service dependencies allow the formalization of relationships between
    hosts or services, usually for the purposes of suppressing unnecessary notifications.
    An example might be a service that tests a login to a mail service, that itself
    requires a database service to work properly. If Nagios Core finds that the database
    service and the login service are both down, a service dependency allows the suppressing
    of the notification about the login service; the administrator would therefore
    only be notified about the database service being down, which is more likely to
    be the actual problem.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机和服务依赖关系允许在主机或服务之间建立关系，通常是为了抑制不必要的通知。例如，可能有一个服务用来测试登录邮件服务，而该服务本身需要一个数据库服务才能正常工作。如果
    Nagios Core 发现数据库服务和登录服务都出现故障，服务依赖关系可以抑制有关登录服务的通知；因此，管理员只会收到关于数据库服务故障的通知，这更可能是实际的问题所在。
- en: There is some overlap of functionality here, but the general pattern is that
    host parent definitions describe the structure of your network from the vantage
    point of your monitoring server, and host and service dependencies describe the
    way it functions, independent of the monitoring server. We will define both parent
    definitions and dependencies in this chapter, with the primary goal of filtering
    and improving the notifications that Nagios Core sends in response to failed checks,
    which can assist greatly in diagnosing problems.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的功能有一些重叠，但一般的模式是，主机父级定义描述了从监控服务器的视角来看网络的结构，而主机和服务依赖关系描述了它如何运作，与监控服务器无关。我们将在本章中定义父级定义和依赖关系，主要目标是过滤并改进
    Nagios Core 在检测失败时发送的通知，这将极大地帮助诊断问题。
- en: We'll also look at another, more subtle benefit of establishing host parent
    definitions in making the network map of the Nagios Core web interface useful,
    and once a basic hierarchy is set up, we'll show how to customize the map's appearance
    (including defining icons for hosts), to make it generally useful as a network
    weather map.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将探讨在建立主机父级定义时的另一个更微妙的好处，即如何使 Nagios Core 网络接口的网络地图变得有用，一旦设置了基本的层次结构，我们将展示如何自定义地图的外观（包括为主机定义图标），使其通常作为网络天气图变得有用。
- en: Creating a network host hierarchy
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建网络主机层次结构
- en: In this recipe, we'll learn how to establish a parent-child relationship for
    two hosts in a very simple network, in order to take advantage of Nagios Core's
    reachability logic. Changing this configuration is very simple; it involves adding
    only one directive, and optionally changing some notification options.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何在一个非常简单的网络中为两台主机建立父子关系，以便利用Nagios Core的可达性逻辑。更改此配置非常简单；只需要添加一个指令，并可选地更改一些通知选项。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You will need to be running a Nagios Core 3.0 or newer server, and have at least
    two hosts, one of which is only reachable via the other. The host that allows
    communications with the other is the **parent host** . You should be reasonably
    confident that a loss of connectivity to the parent host necessarily implies that
    the child host becomes unreachable from the monitoring server.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要运行Nagios Core 3.0或更新版本的服务器，并且至少有两台主机，其中一台只能通过另一台主机访问。允许与其他主机通信的主机是**父主机**。你应该相当有信心，如果与父主机的连接丢失，意味着子主机无法从监控服务器访问。
- en: Access to the web interface of Nagios Core would also be useful, as making this
    change will change the appearance of the network map, discussed in the *Using
    the network map* recipe in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 访问Nagios Core的Web界面也很有用，因为做出这个更改会改变网络地图的显示，这部分内容在本章的*使用网络地图*教程中有所讨论。
- en: 'Our example will use a Nagios Core monitoring server, `olympus.naginet`, monitoring
    three hosts:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例将使用一台Nagios Core监控服务器`olympus.naginet`，监控三台主机：
- en: '`calpe.naginet`, a router'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`calpe.naginet`，一台路由器'
- en: '`janus.naginet`, another router'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`janus.naginet`，另一台路由器'
- en: '`corsica.naginet`, a web server'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`corsica.naginet`，一台Web服务器'
- en: 'The hosts are connected as shown in the following diagram:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 主机按照以下图示连接：
- en: '![Getting ready](img/5566OS_08_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5566OS_08_01.jpg)'
- en: 'Note that the Nagios Core server `olympus.naginet` is only able to communicate
    with the `corsica.naginet` web server if the router `calpe.naginet` is working
    correctly. If **calpe.naginet** were to enter a **DOWN** state, we would see **corsica.naginet**
    enter a **DOWN** state too:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Nagios Core服务器`olympus.naginet`只能在路由器`calpe.naginet`正常工作的情况下与`corsica.naginet`
    Web服务器通信。如果**calpe.naginet**进入**DOWN**状态，我们也会看到**corsica.naginet**进入**DOWN**状态：
- en: '![Getting ready](img/5566_08_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5566_08_02.jpg)'
- en: This is a little misleading, as we don't actually know whether `corsica.naginet`
    is down. It might be, but with the router in between the hosts not working correctly,
    Nagios Core has no way of knowing. A more informative and accurate status for
    the host would be `UNREACHABLE`; this is what the configuration we're about to
    add will arrange.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点误导，因为我们并不知道`corsica.naginet`是否宕机。它可能宕机，但由于主机间的路由器未正确工作，Nagios Core无法得知。对于该主机，更准确的状态应该是`UNREACHABLE`；这就是我们接下来要添加的配置所安排的状态。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can configure a parent-child relationship for our two hosts as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式为我们的两台主机配置父子关系：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改到Nagios Core的`objects`配置目录。默认路径是`/usr/local/nagios/etc/objects`。如果你将主机定义放在了其他文件中，请进入该目录。
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Edit the file containing the definition for the child host. In our example,
    the child host is `corsica.naginet`, the web server. The host definition might
    look something similar to the following code snippet:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含子主机定义的文件。在我们的示例中，子主机是`corsica.naginet`，即Web服务器。主机定义可能类似于以下代码片段：
- en: '[PRE1]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Add a new `parents` directive to the host's definition, and give it the same
    value as the `host_name` directive of the host on which it is dependent for connectivity.
    In our example, that host is `calpe.naginet`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机定义中添加新的`parents`指令，并为其设置与其依赖的连接主机的`host_name`指令相同的值。在我们的示例中，这台主机是`calpe.naginet`。
- en: '[PRE2]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重启Nagios Core服务器：
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With this done, if the parent host enters a **DOWN** state and the child host
    can''t be contacted, then the child host will enter an **UNREACHABLE** state rather
    than also being flagged as **DOWN**:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，如果父主机进入**DOWN**状态且无法联系到子主机，则子主机将进入**UNREACHABLE**状态，而不是被标记为**DOWN**：
- en: '![How to do it...](img/5566_08_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5566_08_03.jpg)'
- en: The child host's contacts will also receive `UNREACHABLE` notifications instead
    of `DOWN` notifications for the child host, provided the `u` flag is included
    in `notification_options` for the host, and `host_notification_options` for the
    contacts. See the *Specifying which states to be notified about* recipe in [Chapter
    4](ch04.html "Chapter 4. Configuring Notifications"), *Configuring Notifications*,
    for details on this.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 只要在主机的`notification_options`和联系人的`host_notification_options`中包含`u`标志，子主机的联系人也会收到`UNREACHABLE`通知，而不是子主机的`DOWN`通知。有关详细信息，请参见[第4章](ch04.html
    "第4章 配置通知")中的*指定要通知的状态*一节，*配置通知*部分。
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is a simple application of Nagios Core's reachability logic. When the check
    to `calpe.naginet` fails for the first time, Nagios Core notes that it is a parent
    host for one child host, `corsica.naginet`. If during checks for the child host
    it finds it cannot communicate with it, it flags an `UNREACHABLE` state instead
    of the `DOWN` state, firing a different notification event.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Nagios Core可达性逻辑的一个简单应用。当对`calpe.naginet`的检查第一次失败时，Nagios Core会注意到它是一个父主机，拥有一个子主机`corsica.naginet`。如果在检查子主机时发现无法与其通信，它会标记为`UNREACHABLE`状态，而不是`DOWN`状态，触发一个不同的通知事件。
- en: 'The primary advantages to this are twofold:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式的主要优点有两个：
- en: The `DOWN` notification is only sent for the nearest problem parent host. All
    other hosts beyond that host fire `UNREACHABLE` notifications. This means that
    Nagios Core's reachability logic automatically determines the point of failure
    from its perspective, which can be very handy in diagnosing which host is actually
    experiencing a problem.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOWN`通知仅发送给最近出现问题的父主机。所有超出该主机的其他主机会触发`UNREACHABLE`通知。这意味着Nagios Core的可达性逻辑会自动确定从它的角度看失败的节点，这在诊断实际出现问题的主机时非常有用。'
- en: If the host is a parent to a large number of other hosts, the configuration
    can be arranged not to send urgent notifications for `UNREACHABLE` hosts. There
    may not be much point sending a hundred pager or e-mail messages to an administrator
    when a very central router goes down; they know there are problems with the downstream
    hosts, so all we would be doing is distracting them with useless information.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果主机是大量其他主机的父主机，可以通过配置来避免为`UNREACHABLE`主机发送紧急通知。当一个非常核心的路由器宕机时，向管理员发送一百个电话或电子邮件通知可能没有太大意义；他们已经知道下游主机出现了问题，因此我们只是在用无用的信息分散他们的注意力。
- en: With a little planning and some knowledge of the network, all we need to do
    is add a few `parents` directives to host definitions to build a simple network
    structure, and Nagios Core will behave much more intelligently as a result. This
    is one of the easiest ways to refine the notification behavior of Nagios Core;
    it can't be recommended enough!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一些规划和对网络的了解，我们只需在主机定义中添加几个`parents`指令，就能构建一个简单的网络结构，结果是Nagios Core会表现得更加智能。这是改进Nagios
    Core通知行为的最简单方法之一，值得强烈推荐！
- en: There's more...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'Note that a child host can itself be a parent to other hosts in turn, allowing
    a nesting network structure. Perhaps in another situation, we might find that
    the `corsica.naginet` server is two routers away from the monitoring server:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一个子主机本身可以成为其他主机的父主机，从而允许形成嵌套的网络结构。也许在另一种情况下，我们会发现`corsica.naginet`服务器距离监控服务器有两个路由器之远：
- en: '![There''s more...](img/5566OS_08_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容...](img/5566OS_08_04.jpg)'
- en: 'In this case, not only is `corsica.naginet` the child host of `calpe.naginet`,
    but `calpe.naginet` is itself the child host of `janus.naginet`. We could specify
    this relationship in exactly the same way:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，不仅`corsica.naginet`是`calpe.naginet`的子主机，而且`calpe.naginet`本身也是`janus.naginet`的子主机。我们可以以完全相同的方式指定这种关系：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It''s also possible to set multiple parents for a host, if there are two possible
    paths to the same machine:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以为主机设置多个父主机，如果有两条可能的路径通向同一台机器：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With this configuration, `corsica.naginet` would only be deemed `UNREACHABLE`
    if both of its parent hosts were down. This kind of configuration is useful to
    account for redundant paths in a network; use cases could include spanning tree
    technologies, or dynamic routing failover.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配置下，只有当`corsica.naginet`的两个父主机都宕机时，`corsica.naginet`才会被认为是`UNREACHABLE`。这种配置有助于考虑网络中的冗余路径；应用场景可能包括生成树技术或动态路由故障切换。
- en: After you've set up a good basic structure for your network using the `parents`
    directive, definitely check out the *Using the network map* recipe in this chapter
    to get some automatic visual feedback about your network's structure as generated
    from your new configuration.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在您使用 `parents` 指令为您的网络设置了良好的基本结构之后，务必查看本章中的 *使用网络地图* 方案，以便从新的配置中获得有关网络结构的自动可视化反馈。
- en: See also
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Using the network map* and *Establishing a host dependency* recipes in
    this chapter
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *使用网络地图* 和 *建立主机依赖关系* 方案
- en: The *Specifying which states to be notified about* and *Configuring notification
    groups* recipes in [Chapter 4](ch04.html "Chapter 4. Configuring Notifications"),
    *Configuring Notifications*
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html "第4章：配置通知") 中的 *指定需要通知的状态* 和 *配置通知组* 方案，*配置通知*'
- en: Using the network map
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网络地图
- en: In this recipe, we'll examine our network hierarchy in the network map (or status
    map) in the Nagios Core web interface. The network map takes the form of a generated
    graphic showing the hierarchy of hosts and their current states. You can learn
    how to establish such a hierarchy in the recipe *Creating a network host hierarchy*
    in this chapter. The network map allows filtering to show specific hosts, and
    clicking on hosts to navigate through larger networks.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本方案中，我们将在 Nagios Core Web 界面中检查网络地图（或状态图）中的网络层次结构。网络地图以生成的图形形式展示主机层次结构及其当前状态。您可以在本章中的
    *创建网络主机层次结构* 方案中学习如何建立这样的层次结构。网络地图允许过滤以显示特定主机，并可以点击主机以在更大的网络中导航。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will need to be running a Nagios Core 3.0 or newer server, and have access
    to its web interface. You will also need permission to view the states of hosts,
    preferably all hosts. You can arrange this by adding your username in the `authorized_for_all_hosts`
    directive, normally in `/usr/local/nagios/etc/cgi.cfg`; for example, for the user
    `tom`, we might configure the directive to read as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要运行 Nagios Core 3.0 或更新版本的服务器，并且可以访问其 Web 界面。您还需要查看主机状态的权限，最好是所有主机。您可以通过将您的用户名添加到
    `authorized_for_all_hosts` 指令中来安排此权限，通常该指令位于 `/usr/local/nagios/etc/cgi.cfg` 中；例如，对于用户
    `tom`，我们可能会将该指令配置为如下：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: By default, the `nagiosadmin` user should have all the necessary permissions
    to view the complete map.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`nagiosadmin` 用户应该具有查看完整地图所需的所有权限。
- en: The network map is not particularly useful without at least a few hosts configured
    and arranged in a hierarchy, so if you have not set any `parents` directives for
    your hosts, then you may wish to read the *Creating a network host hierarchy*
    recipe in this chapter first, and arrange your monitored hosts as it explains.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的主机尚未配置至少一些 `parents` 指令并按层次结构排列，那么网络地图就不会特别有用。因此，如果您尚未为主机设置任何 `parents`
    指令，您可能希望首先阅读本章中的 *创建网络主机层次结构* 方案，并按其说明安排您的监控主机。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'We can inspect the network map for our newly configured host hierarchy like
    so:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式检查我们新配置的主机层次结构的网络地图：
- en: Log in to the Nagios Core web interface.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 Nagios Core Web 界面。
- en: Click on the **Map** item in the menu on the left:![How to do it...](img/5566_08_05.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的 **地图** 项：![操作步骤...](img/5566_08_05.jpg)
- en: 'You should be presented with a generated graphic showing all the hosts in your
    network that your user has permissions to view:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该看到一个生成的图形，显示您的用户有权限查看的所有网络主机：
- en: '![How to do it...](img/5566_08_06.jpg)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作步骤...](img/5566_08_06.jpg)'
- en: Hover over any host with the mouse to see a panel breaking down the host's current
    state:![How to do it...](img/5566_08_07.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在任何主机上，即可看到一个面板，分解主机的当前状态：![操作步骤...](img/5566_08_07.jpg)
- en: By default, the network map is centered around the Nagios Process icon. Try
    clicking on one of your hosts to recenter the map; in this example, it's recentered
    on `calpe.naginet`:![How to do it...](img/5566_08_08.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，网络地图围绕 Nagios 进程图标居中。尝试点击您的某个主机以重新居中地图；在此示例中，它已经重新居中在 `calpe.naginet`
    上：![操作步骤...](img/5566_08_08.jpg)
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The network map is automatically generated from your host configuration. By
    default, it arranges the hosts in sectors, radiating outward from the central
    Nagios Process icon, using lines to show dependencies, and adjusting background
    colors to green for `UP` states, and red for `DOWN` or `UNREACHABLE` states.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 网络地图是从您的主机配置中自动生成的。默认情况下，它将主机排列在扇区中，从中央的 Nagios 进程图标向外辐射，使用线条显示依赖关系，并将背景颜色调整为绿色表示
    `UP` 状态，红色表示 `DOWN` 或 `UNREACHABLE` 状态。
- en: This map is generated via the **GD2 library** , written by Thomas Boutell. It
    takes the form of a linked image map. This means that you can simply right-click
    the image to save it while the network is in a particular state for later reference,
    and also that individual nodes can be clicked to recenter the map around the nominated
    host. This is particularly useful for networks with a large number of hosts and
    very many levels of parent/child host relationships.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这张地图是通过**GD2库**生成的，该库由Thomas Boutell编写。它采用链接图像地图的形式。这意味着您可以简单地右击图像保存它，在网络处于特定状态时以便稍后参考，并且还可以点击单个节点以将地图重新集中在指定主机上。这对于具有大量主机和许多父/子主机关系层级的网络特别有用。
- en: There's more...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Note that the form in the panel in the top-right allows customizing the appearance
    of the map directly:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，右上角面板中的表单允许直接定制地图的外观：
- en: '![There''s more...](img/5566_08_09.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容...](img/5566_08_09.jpg)'
- en: '**Layout Method**: This allows you to select the algorithm used to arrange
    and draw the hosts. It''s worth trying each of these to see which you prefer for
    your particular network layout.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局方法**：这允许您选择用于排列和绘制主机的算法。值得尝试这些方法中的每一种，以查看哪一种最适合您特定的网络布局。'
- en: '**Scaling factor**: Change the value here to reduce or increase the size of
    the map image; values between `0.0` and `1.0` will reduce the image''s size, and
    values above `1.0` will increase it.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放因子**：在此更改值以减少或增加地图图像的大小；`0.0`到`1.0`之间的值将减小图像的大小，而大于`1.0`的值将增大它。'
- en: '**Drawing Layers**: If your hosts are organized into hostgroups, you can filter
    the map to only display hosts belonging to particular groups.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制图层**：如果您的主机已组织成主机组，您可以筛选地图，仅显示属于特定组的主机。'
- en: '**Layer mode**: If you selected any host groups in the **Drawing Layers** option,
    this allows you to select whether you want to include hosts in those groups in
    the map, or exclude them from it.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图层模式**：如果您在**绘制图层**选项中选择了任何主机组，这允许您选择是否将这些组中的主机包含在地图中，或将它们排除在外。'
- en: '**Suppress popups**: If you find the yellow information popups that appear
    when hovering over hosts annoying, then you can turn them off by selecting this
    checkbox.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抑制弹出窗口**：如果您觉得当将鼠标悬停在主机上时出现的黄色信息弹出窗口很烦人，您可以通过勾选此复选框来关闭它们。'
- en: After selecting or changing any one of these options, you will need to click
    on **Update** to apply them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 选择或更改任何这些选项后，您需要点击**更新**才能应用它们。
- en: The appearance of the status map can be configured well beyond this by changing
    directives in the Nagios Core configuration file, and adding some directives to
    your hosts; take a look at the recipes under the *See also* section of this recipe
    for some examples of how this is done.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改Nagios Core配置文件中的指令，并向主机添加一些指令，状态地图的外观可以配置得远远超过此内容；请查看本教程中*另见*部分下的示例，了解如何实现此功能。
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Customizing appearance of the network map*, *Choosing icons for hosts*,
    *Specifying coordinates for a host on the network map*, and *Using the network
    map as an overlay* recipes in this chapter
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章节中的*自定义网络地图外观*、*选择主机图标*、*指定主机在网络地图中的坐标*和*使用网络地图作为叠加层*教程
- en: Choosing icons for hosts
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择主机图标
- en: In this recipe, we'll learn how to select graphics for hosts, to appear in various
    parts of the Nagios Core web interface. This is done by adding directives to a
    host to specify the paths to appropriate images to represent it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何为主机选择图形，并在Nagios Core的Web界面中的不同部分显示它们。这是通过向主机添加指令来指定适当的图像路径，以代表该主机。
- en: Adding these definitions has no effect on Nagios Core's monitoring behavior;
    they are mostly cosmetic changes, although it's useful to see at a glance whether
    a particular node is a server or a workstation, particularly on the network map.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些定义不会影响Nagios Core的监控行为；它们主要是外观上的变化，尽管在网络地图上，快速查看某个节点是服务器还是工作站仍然很有用。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to be running a Nagios Core 3.0 or newer server, and have access
    to its web interface. You must also be able to edit the configuration files for
    the server.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要运行Nagios Core 3.0或更高版本的服务器，并能够访问其Web界面。您还必须能够编辑服务器的配置文件。
- en: It's a good idea to check that you actually have the required images installed.
    The default set of icons is included in `/usr/local/nagios/share/images/logos`.
    Don't confuse this with its parent directory, `images`, which contains images
    used as part of the Nagios Core web interface itself.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最好检查一下你是否确实安装了所需的图像。默认的图标集包含在 `/usr/local/nagios/share/images/logos` 中。不要与其父目录
    `images` 混淆，后者包含的是作为 Nagios Core Web 界面一部分的图像。
- en: 'In the `logos` directory, you should find a number of images in various formats.
    In this example, we''re interested in the `router` and `rack-server` icons:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `logos` 目录中，你应该能找到多个不同格式的图像。在这个示例中，我们关心的是 `router` 和 `rack-server` 图标：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To get the full benefit of the icons, you'll likely want to be familiar with
    using the network map, and have access to view it with the appropriate hosts in
    your own Nagios Core instance. The network map is introduced in the *Using the
    network map* recipe in this chapter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用这些图标，你可能希望熟悉使用网络图，并可以访问你自己 Nagios Core 实例中的相应主机。网络图将在本章的 *使用网络图* 这一小节中介绍。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can define images to be used in displaying our host as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义要用于显示主机的图像如下：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Nagios Core 的 `objects` 配置目录。默认路径是 `/usr/local/nagios/etc/objects`。如果你把主机定义放在了不同的文件中，请转到该目录。
- en: '[PRE8]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add three new directives to each of the hosts to which you want to apply the
    icons. In this example, the `rack-server` icon is assigned to `corsica.naginet`,
    and the `router` icon to both `calpe.naginet` and `corsica.naginet`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向每个你想应用图标的主机添加三个新指令。在此示例中，`rack-server` 图标分配给 `corsica.naginet`，而 `router` 图标分配给
    `calpe.naginet` 和 `corsica.naginet`：
- en: '[PRE9]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重启 Nagios Core 服务器：
- en: '[PRE10]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With this done, a visit to the status map should display the appropriate hosts
    with icons rather than question marks:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，访问状态图应该显示带有图标的主机，而不是问号：
- en: '![How to do it...](img/5566_08_10.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5566_08_10.jpg)'
- en: 'The **Hosts** list should also include a scaled-down version of the image:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**主机** 列表还应包括图像的缩小版：'
- en: '![How to do it...](img/5566_08_11.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5566_08_11.jpg)'
- en: How it works...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When a host list, service list, or network status map is generated, it checks
    for the presence of `icon_image` or `statusmap_image` values for each host object,
    reads the appropriate image if defined, and includes that as part of its processing.
    The network status map defaults to displaying only a question mark in the absence
    of a value for the `statusmap_image` directive.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当生成主机列表、服务列表或网络状态图时，它会检查每个主机对象中是否存在 `icon_image` 或 `statusmap_image` 值，如果定义了，则读取相应的图像，并将其作为处理的一部分。网络状态图默认仅在缺少
    `statusmap_image` 指令的值时显示问号。
- en: Note that for the `statusmap_image` directive, we chose the `.gd2` version of
    the icon rather than the `.gif` version. This is for performance reasons; the
    status map is generated with the GD2 library, which deals more efficiently with
    its native `.gd2` format.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于 `statusmap_image` 指令，我们选择了图标的 `.gd2` 版本，而不是 `.gif` 版本。这是出于性能考虑；状态图是通过
    GD2 库生成的，它能够更高效地处理本地的 `.gd2` 格式。
- en: The `icon_image_alt` directive defines the value for the `alt` attribute when
    the image is displaying in an `<img>` HTML tag. Most web browsers will show the
    contents of this tag after briefly hovering over the icon.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon_image_alt` 指令定义了在 `<img>` HTML 标签中显示图像时 `alt` 属性的值。大多数浏览器在鼠标悬停在图标上时会简要显示该标签的内容。'
- en: Nagios Core 3.0 allows you to put these directives in a separate `hostextinfo`
    object, but this object type is officially deprecated as of Nagios Core 4.0, so
    it's recommended to avoid it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios Core 3.0 允许你将这些指令放在一个单独的 `hostextinfo` 对象中，但该对象类型在 Nagios Core 4.0 中已被正式弃用，因此建议避免使用它。
- en: There's more
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: 'If you have a number of hosts that need to share the same image, it''s a good
    practice to inherit from a common host template with the appropriate directives
    set. For our example, we might define a template as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个主机需要共享相同的镜像，最佳做法是从一个公共的主机模板继承，并设置适当的指令。对于我们的示例，我们可以定义一个模板如下：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We could then apply the image settings directly to both our routers simply
    by inheriting from that template, by adding it to the `use` directive:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过从该模板继承并将其添加到`use`指令中，直接应用图像设置到我们的两个路由器：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you don't like the included icon set, there are many icon sets available
    online on the Nagios Exchange site at [http://exchange.nagios.org/](http://exchange.nagios.org/).
    If you want, you could even make your own, out of pictures of your physical hardware,
    saved in standard PNG or GD2 format.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不喜欢附带的图标集，可以在Nagios Exchange网站上找到许多图标集，[http://exchange.nagios.org/](http://exchange.nagios.org/)。如果你愿意，你甚至可以使用物理硬件的图片制作自己的图标，保存为标准的PNG或GD2格式。
- en: See also
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Using the network map* and *Specifying coordinates for a host on the network
    map* recipes in this chapter
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*使用网络地图*和*指定网络地图上主机的坐标*食谱
- en: Establishing a host dependency
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立主机依赖关系
- en: In this recipe, we'll learn how to establish a host dependency between two hosts.
    This feature can be used to control how Nagios Core checks hosts and notifies
    us about problems in situations where if one host is `DOWN`, it implies that at
    least one other host is necessarily `DOWN`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何在两个主机之间建立主机依赖关系。这个功能可以用来控制Nagios Core如何检查主机，并在某些情况下，如果一个主机处于`DOWN`状态，意味着至少有一个其他主机也必定处于`DOWN`状态时通知我们出现问题。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First of all, it's very important to note that this is not quite the same thing
    as a host being `UNREACHABLE`, which is what the `parents` directive is for, as
    discussed in the *Creating a network host hierarchy* recipe in this chapter. Most
    of the time, a host actually being `DOWN` does not mean that other hosts actually
    go `DOWN` by definition. It's more typical for a child host to simply be `UNREACHABLE`;
    it might be working fine, but Nagios Core can't check it because of the `DOWN`
    host in its path.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，非常重要的一点是，值得注意的是，这与主机处于`UNREACHABLE`状态并不完全相同，`parents`指令正是为此目的而设计的，正如本章中的*创建网络主机层次结构*食谱所讨论的那样。大多数情况下，主机处于`DOWN`状态并不意味着其他主机会因此处于`DOWN`状态。通常，子主机会处于`UNREACHABLE`状态；它可能正常工作，但由于路径中的`DOWN`主机，Nagios
    Core无法检查它。
- en: 'However, there''s one particularly broad category where host dependencies are
    definitely useful: the host/guest relationship of virtual machines. If you are
    monitoring both a host physical machine and one or more guest virtual machines,
    then the virtual machines are definitely dependent on the host; if the host machine
    is actually in a `DOWN` state and has no redundant failover, then it would imply
    that the guests were `DOWN` as well, and not simply `UNREACHABLE`.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个特别广泛的领域，主机依赖关系肯定是有用的：虚拟机的主机/客户机关系。如果你同时监控一台物理主机和一台或多台客户机虚拟机，那么这些虚拟机肯定依赖于主机；如果主机机器处于`DOWN`状态且没有冗余故障切换，那么这意味着客户机也处于`DOWN`状态，而不仅仅是`UNREACHABLE`。
- en: We'll use **virtualization** as an example, with two virtual machines `zeus.naginet`
    and `athena.naginet` running on a host machine, `ephesus.naginet`. All three are
    already monitored, but we'll establish a host dependency so that Nagios Core doesn't
    notify anyone about the guests' state if it determines that the host is `DOWN`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以**虚拟化**为例，在主机`ephesus.naginet`上运行两台虚拟机`zeus.naginet`和`athena.naginet`。这三台机器已经在监控中，但我们将建立主机依赖关系，这样如果Nagios
    Core判断主机处于`DOWN`状态，它就不会通知任何人关于虚拟机的状态。
- en: You will need a Nagios Core 3.0 or newer server, and have shell access to change
    its backend configuration.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个Nagios Core 3.0或更新版本的服务器，并具有更改其后端配置的Shell访问权限。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can establish our host dependencies as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式建立主机依赖关系：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Nagios Core的`objects`配置目录。默认路径是`/usr/local/nagios/etc/objects`。如果你将主机定义放在其他文件中，则请转到该文件所在的目录。
- en: '[PRE13]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create or edit an appropriate file that will be included by the configuration
    in `/usr/local/nagios/etc/nagios.cfg`. A sensible choice could be `/usr/local/nagios/etc/objects/dependencies.cfg`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建或编辑一个适当的文件，该文件将被配置文件`/usr/local/nagios/etc/nagios.cfg`包含。一个合理的选择是`/usr/local/nagios/etc/objects/dependencies.cfg`：
- en: '[PRE14]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add a `hostdependency` definition. In our case, the definition looks similar
    to the following code snippet. Note that you can include multiple dependent hosts
    by separating their names with commas:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`hostdependency`定义。在我们的例子中，定义类似于以下代码片段。请注意，你可以通过用逗号分隔主机名来包含多个依赖主机：
- en: '[PRE15]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重启Nagios Core服务器：
- en: '[PRE16]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With this done, if the `ephesus.naginet` host goes down and takes both the `zeus.naginet`
    and `athena.naginet` hosts down with it, then checks to all three hosts will continue
    but notifications will be suppressed for the two guest hosts.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一设置后，如果`ephesus.naginet`主机宕机并使`zeus.naginet`和`athena.naginet`主机也一同宕机，那么对这三台主机的检查将继续进行，但对两台依赖主机的通知将被抑制。
- en: How it works...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The host dependency object''s four directives are as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 主机依赖对象的四个指令如下：
- en: '`host_name`: This is the name of the host on which at least one other host
    is dependent. We''ll refer to this as the dependency host. This can also be a
    comma-separated list of host names.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_name`：这是至少有其他一个主机依赖于它的主机名称。我们将其称为依赖主机。这个名称也可以是以逗号分隔的主机名称列表。'
- en: '`dependent_host_name`: This is the name of the dependent host. Again, this
    can be a comma-separated list.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dependent_host_name`：这是依赖主机的名称。同样，这也可以是以逗号分隔的列表。'
- en: '`execution_failure_criteria`: This defines a list of states for the dependency
    host. If that host is in any of these states, then Nagios Core will skip checks
    for the dependent hosts. This can be a comma-separated list of any of the following
    flags:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_failure_criteria`：定义依赖主机的状态列表。如果该主机处于这些状态中的任何一个，Nagios Core将跳过对依赖主机的检查。这可以是以下任何标志的逗号分隔列表：'
- en: '`o`: Dependency host is `UP`'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`o`：依赖主机是`开启`'
- en: '`d`: Dependency host is `DOWN`'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d`：依赖主机是`关闭`'
- en: '`u`: Dependency host is `UNREACHABLE`'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`u`：依赖主机是`无法访问`。'
- en: '`p`: Dependency host is `PENDING` (not checked yet)'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p`：依赖主机是`待定`（尚未检查）'
- en: Alternatively, the single flag `n` can be used (as it is in this example), to
    specify that the checks should take place regardless of the dependency host's
    state.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，也可以使用单一标志`n`（如本例中所示），指定无论依赖主机的状态如何，都应进行检查。
- en: '`notification_failure_criteria`: This defines a list of states for the dependency
    host. If that host is in any of these states, then notifications for the dependent
    host will not be sent. The flags are the same as for `execution_failure_criteria`;
    in this example, we''ve chosen to suppress the notifications if the dependency
    host is `DOWN` or `UNREACHABLE`.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notification_failure_criteria`：定义依赖主机的状态列表。如果该主机处于这些状态中的任何一个，那么将不会发送对依赖主机的通知。标志与`execution_failure_criteria`相同；在本例中，我们选择如果依赖主机处于`关闭`或`无法访问`状态时抑制通知。'
- en: When Nagios Core notices that the `zeus.naginet` or `athena.naginet` hosts have
    apparently gone `DOWN` as a result of a failed host check, it refers to its configuration
    to check if there are any dependencies for the host, and finds that they depend
    on `ephesus.naginet`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当Nagios Core发现`zeus.naginet`或`athena.naginet`主机因主机检查失败而显得`关闭`时，它会参考其配置检查该主机是否有依赖项，发现它们依赖于`ephesus.naginet`。
- en: It then checks the status of `ephesus.naginet` and finds it to be `DOWN`. Referring
    to the `execution_failure_criteria` directive and finding `n`, it continues to
    run checks for both of the dependent hosts as `normal`. However, referring to
    the `notification_failure_criteria` directive and finding `d,u`, it determines
    that notifications should be suppressed until the host returns to an `UP` state.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 它接着检查`ephesus.naginet`的状态，发现它是`关闭`状态。参考`execution_failure_criteria`指令并找到`n`，它继续对两个依赖主机执行检查，状态为`正常`。但是，参考`notification_failure_criteria`指令并找到`d,u`，它决定在主机恢复到`开启`状态之前抑制通知。
- en: There's more...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We can specify groups rather than host names for dependencies using the `hostgroup_name`
    and `dependent_hostgroup_name` directives:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`hostgroup_name`和`dependent_hostgroup_name`指令指定主机组，而不是主机名称来处理依赖关系：
- en: '[PRE17]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can also provide comma-separated lists of dependency hosts:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以提供以逗号分隔的依赖主机列表：
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If a host depends on more than one host, the check or notification rules apply
    if any of its dependencies are not met, rather than all of them. For the previous
    example, this means that if `ephesus.naginet` was `DOWN`, but `alexandria.naginet`
    was `UP`, then the dependency would still suppress checks or notifications for
    all dependent hosts.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个主机依赖于多个主机，则只有当其任何一个依赖项没有满足时，检查或通知规则才会生效，而不是所有依赖项都未满足时。以之前的例子为例，这意味着如果`ephesus.naginet`处于`关闭`状态，而`alexandria.naginet`处于`开启`状态，那么依赖关系仍然会抑制所有依赖主机的检查或通知。
- en: This means that host dependencies are not really suitable in redundant scenarios
    where the loss of one of the depended-upon hosts does not necessarily imply the
    loss of all its dependent hosts. You are likely to find that monitoring nodes
    as a cluster is a better fit for this situation; this is discussed in the *Monitoring
    individual nodes as a cluster* recipe, also in this chapter.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在冗余场景中，主机依赖关系并不真正适用，因为丢失一个被依赖的主机并不意味着丢失其所有依赖的主机。你可能会发现将节点作为集群进行监控更适合这种情况；这在本章的*作为集群监控单独节点*食谱中有讨论。
- en: See also
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Establishing a service dependency*, *Creating a network host hierarchy*,
    and *Monitoring individual nodes as a cluster* recipes in this chapter
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*建立服务依赖关系*、*创建网络主机层次结构*和*作为集群监控单独节点*食谱
- en: Establishing a service dependency
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立服务依赖关系
- en: In this recipe, we'll learn how to establish a service dependency between two
    services. This feature can be used to control how Nagios Core checks services
    and notifies us about problems in situations where if one service is in a `PROBLEM`
    state, it implies that at least one other service is necessarily also in a `PROBLEM`
    state.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何在两个服务之间建立服务依赖关系。这个功能可以用来控制Nagios Core如何检查服务，并在一种服务处于`PROBLEM`状态时通知我们，意味着至少另一个服务也必然处于`PROBLEM`状态。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You will need a Nagios Core 3.0 or newer server, and have shell access to change
    its backend configuration. You will also need to have at least two services defined,
    one of which is by definition dependent on the other; this means that if the dependency
    service were to enter `CRITICAL` state, then it would imply that the dependent
    service would also be `CRITICAL`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一台Nagios Core 3.0或更新版本的服务器，并具有shell访问权限以更改其后端配置。你还需要至少定义两个服务，其中一个服务依赖于另一个；这意味着如果被依赖的服务进入`CRITICAL`状态，那么它将意味着被依赖的服务也会是`CRITICAL`。
- en: 'We''ll use a simple example: suppose we are testing authentication to a mail
    server `marathon.naginet` with a service `MAIL_LOGIN`, and also checking a database
    service `MAIL_DB` on the same host, which stores the login usernames and password
    hashes.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个简单的示例：假设我们正在测试对邮件服务器`marathon.naginet`的身份验证，服务为`MAIL_LOGIN`，同时在同一主机上检查一个数据库服务`MAIL_DB`，它存储登录用户名和密码哈希值。
- en: In this situation, it might well be the case that if `MAIL_DB` is not working,
    then `MAIL_LOGIN` will almost certainly not be working either. If so, then we
    can configure Nagios Core to be aware that the `MAIL_LOGIN` service is dependent
    on the `MAIL_DB` service.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果`MAIL_DB`无法正常工作，`MAIL_LOGIN`几乎肯定也无法正常工作。如果是这样，我们可以配置Nagios Core，使其知道`MAIL_LOGIN`服务依赖于`MAIL_DB`服务。
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can establish our service dependency as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下建立服务依赖关系：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Nagios Core的`objects`配置目录。默认路径是`/usr/local/nagios/etc/objects`。如果你将主机定义放在了其他文件中，请转到该目录。
- en: '[PRE19]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create or edit an appropriate file that will be included by the configuration
    in `/usr/local/nagios/etc/nagios.cfg`. A sensible choice could be `/usr/local/nagios/etc/objects/dependencies.cfg`:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建或编辑一个适当的文件，该文件将被`/usr/local/nagios/etc/nagios.cfg`中的配置包含。一个合理的选择可能是`/usr/local/nagios/etc/objects/dependencies.cfg`：
- en: '[PRE20]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add a `servicedependency` definition. In our case, the definition looks similar
    to the following code snippet:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`servicedependency`定义。在我们的例子中，定义类似于以下代码片段：
- en: '[PRE21]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重启Nagios Core服务器：
- en: '[PRE22]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: With this done, if the `MAIL_DB` service fails for whatever reason and enters
    a `CRITICAL` state, the `MAIL_LOGIN` service will skip its checks of that service,
    and also skip any notifications that it would normally send about its own problems,
    if any. Note that the web interface may still show Nagios Core is scheduling checks,
    but it won't actually run them.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此设置后，如果`MAIL_DB`服务因任何原因失败并进入`CRITICAL`状态，`MAIL_LOGIN`服务将跳过对该服务的检查，也会跳过它通常会发送的任何关于其自身问题的通知（如果有的话）。请注意，Web界面可能仍显示Nagios
    Core正在调度检查，但实际上不会执行这些检查。
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The service dependency object''s five directives are as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 服务依赖对象的五个指令如下：
- en: '`host_name`: This is the name of the host with which these services are associated.
    We''ll refer to this as the dependency host.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_name`：这是与这些服务关联的主机名称。我们将其称为依赖主机。'
- en: '`service_description`: This is the description of the service being depended
    upon. It can be a comma-separated list. We''ll refer to this as the dependency
    service.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service_description`：这是被依赖服务的描述，可以是逗号分隔的列表。我们将其称为依赖服务。'
- en: '`dependent_service_description`: This is the description of the dependent service.
    It can also be a comma-separated list.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dependent_service_description`：这是依赖服务的描述，也可以是逗号分隔的列表。'
- en: '`execution_failure_criteria`: This defines a list of states for the dependency
    service. If that service is in any of these states, then Nagios Core will skip
    the checks for the dependent services. It can be a comma-separated list of any
    of the following flags:'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_failure_criteria`：定义了依赖服务的状态列表。如果该服务处于这些状态之一，Nagios Core 将跳过对依赖服务的检查。它可以是逗号分隔的以下标志的列表：'
- en: '`o`: Dependency service is `OK`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`o`：依赖服务处于 `OK` 状态'
- en: '`w`: Dependency service is `WARNING`'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w`：依赖服务处于 `WARNING` 状态'
- en: '`c`: Dependency service is `CRITICAL` (as in this example)'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`：依赖服务处于 `CRITICAL` 状态（如本示例所示）'
- en: '`u`: Dependency service is `UNKNOWN`'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`u`：依赖服务处于 `UNKNOWN` 状态'
- en: '`p`: Dependency service is `PENDING` (not checked yet)'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p`：依赖服务处于 `PENDING` 状态（尚未检查）'
- en: Alternatively, the single flag `n` can be used to specify that the checks should
    take place regardless of the dependency service's state. In this example, we've
    chosen the value `c` to suppress service checks only if the dependency service
    is `CRITICAL`.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，可以使用单个标志 `n` 来指定无论依赖服务的状态如何，都应进行检查。在本示例中，我们选择了 `c` 值，仅在依赖服务处于 `CRITICAL`
    状态时才抑制服务检查。
- en: '`notification_failure_criteria`: This defines a list of states for the dependency
    service. If that service is in any of these states, then notifications for the
    dependent service will not be sent. The flags are the same as for `execution_failure_criteria`;
    in this example, we''ve again chosen the value `c` to suppress the notifications
    only if the dependency service is `CRITICAL`.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notification_failure_criteria`：定义了依赖服务的状态列表。如果该服务处于这些状态之一，则不会发送有关依赖服务的通知。标志与
    `execution_failure_criteria` 相同；在本示例中，我们再次选择了 `c` 值，仅当依赖服务处于 `CRITICAL` 状态时才抑制通知。'
- en: When Nagios Core notices the `MAIL_DB` service has gone `CRITICAL` as a result
    of a failed service check, it refers to its configuration to check if there are
    any dependencies for the service, and finds that they depend on `MAIL_LOGIN`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Nagios Core 检测到 `MAIL_DB` 服务因服务检查失败而进入 `CRITICAL` 状态时，它会查阅其配置，检查该服务是否有任何依赖关系，并发现它依赖于
    `MAIL_LOGIN` 服务。
- en: It then checks the status of `MAIL_DB` and finds it to be `CRITICAL`. Referring
    to the `execution_failure_criteria` directive and finding `c`, it prevents checks
    for both of the dependent services. Referring to the `notification_failure_criteria`
    directive and also finding `c`, it also decides that notifications should be suppressed
    until the service returns to any other state.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它检查 `MAIL_DB` 的状态，发现其处于 `CRITICAL` 状态。查阅 `execution_failure_criteria` 指令并发现
    `c`，它会阻止对两个依赖服务的检查。查阅 `notification_failure_criteria` 指令并发现 `c`，它也决定在服务恢复到其他状态之前抑制通知。
- en: There's more...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'Note that services do not have to be on the same host to depend upon one another.
    We can add `dependent_host_name` or `dependent_hostgroup_name` directives to specify
    other hosts:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，服务不需要在同一主机上才能相互依赖。我们可以添加 `dependent_host_name` 或 `dependent_hostgroup_name`
    指令来指定其他主机：
- en: '[PRE23]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this example, the `WEBMAIL_LOGIN` service on `sparta.naginet` is defined
    as dependent on the `MAIL_DB` service on `marathon.naginet`. Note that the values
    for `host_name` and `dependent_host_name` are different.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`sparta.naginet` 上的 `WEBMAIL_LOGIN` 服务被定义为依赖于 `marathon.naginet` 上的 `MAIL_DB`
    服务。请注意，`host_name` 和 `dependent_host_name` 的值是不同的。
- en: In versions of Nagios Core before 3.3.1, the `dependent_host_name` directive
    is required, even if it is the same as the `host_name`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Nagios Core 3.3.1 之前的版本中，即使 `dependent_host_name` 和 `host_name` 相同，依然需要定义
    `dependent_host_name` 指令。
- en: See also
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Establishing a host dependency* and *Monitoring individual nodes as a cluster*
    recipes in this chapter
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*建立主机依赖关系*和*将单独的节点作为集群进行监控*的示例
- en: Monitoring individual nodes in a cluster
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控集群中的单独节点
- en: In this recipe, we'll learn how to monitor a collection of hosts in a cluster,
    using the `check_cluster` plugin included in the standard Nagios Plugins. Being
    able to monitor more than one host collectively is useful in situations with redundancy;
    one of a set of hosts being `DOWN`, perhaps for power conservation or maintenance
    reasons, is not necessarily a cause for notification. However, if a larger number
    or all of the hosts were down, we would definitely want to be notified. Using
    `check_cluster` allows us to arrange this.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何使用标准Nagios插件中的`check_cluster`插件监控集群中的主机。能够集体监控多个主机在冗余环境下非常有用；如果某一台主机处于`DOWN`状态，可能是为了节省能源或进行维护，这不一定需要通知。然而，如果更多的主机或所有主机都宕机，我们就确实需要被通知。使用`check_cluster`可以实现这一点。
- en: Getting ready
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need a Nagios Core 3.0 or newer server, and have shell access to change
    its backend configuration. You will also need to have at least two monitored hosts
    in a redundant setup for some function, such as database replication, DNS servers,
    or load-balanced web servers.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个Nagios Core 3.0或更新版本的服务器，并且需要有Shell访问权限以更改其后端配置。你还需要至少有两个被监控的主机，并且它们在冗余设置中执行某些功能，比如数据库复制、DNS服务器或负载均衡的Web服务器。
- en: You should also be familiar with the way hosts and services are defined, and
    in particular defining commands; these concepts are discussed in [Chapter 1](ch01.html
    "Chapter 1. Understanding Hosts, Services, and Contacts"), *Understanding Hosts,
    Services, and Contacts*.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应熟悉如何定义主机和服务，特别是如何定义命令；这些概念在[第1章](ch01.html "第1章. 理解主机、服务和联系人")，*理解主机、服务和联系人*中有讨论。
- en: 'For this example, we''ll work with three blade servers with hostnames `achilles.naginet`,
    `odysseus.naginet`, and `agamemnon.naginet`, running in a redundant cluster to
    support a virtual hosting environment. All three hosts are already being monitored
    to send an e-mail message if one of them goes down. We will arrange a `check_cluster`
    service on a "dummy host" in such a way that:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用三台刀片服务器，它们的主机名分别是`achilles.naginet`、`odysseus.naginet`和`agamemnon.naginet`，这些服务器在冗余集群中运行，以支持虚拟主机环境。所有三台主机已经在监控中，如果其中一台发生故障，将发送电子邮件通知。我们将安排一个`check_cluster`服务在“虚拟主机”上，以便：
- en: If none of the blades is down, the service is `OK`
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有刀片服务器宕机，服务为`OK`。
- en: If one of the blades is down, the service enters `WARNING` state, again notifying
    us as appropriate
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果其中一台刀片服务器宕机，服务进入`WARNING`状态，并再次适当通知我们。
- en: If two or all three of the blades are down, the service enters `CRITICAL` state,
    again notifying us as appropriate
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两台或三台刀片服务器都宕机，服务进入`CRITICAL`状态，再次适当通知我们。
- en: How to do it...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'We can arrange a cluster check for our hosts as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照如下方式为我们的主机安排集群检查：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Nagios Core的`objects`配置目录。默认路径是`/usr/local/nagios/etc/objects`。如果你将主机定义放在了其他文件中，则切换到该文件所在的目录。
- en: '[PRE24]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Create or edit an appropriate file for defining a new command. A sensible choice
    might be `/usr/local/nagios/etc/objects/commands.cfg`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建或编辑一个适当的文件来定义新命令。一个合理的选择可能是`/usr/local/nagios/etc/objects/commands.cfg`。
- en: 'Define two new commands in this file, `check_dummy` and `check_host_cluster`:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件中定义两个新命令，`check_dummy`和`check_host_cluster`：
- en: '[PRE25]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Create or edit an appropriate file that will be included by the configuration
    in `/usr/local/nagios/etc/nagios.cfg`. A sensible choice might be `/usr/local/nagios/etc/objects/clusters.cfg`.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建或编辑一个适当的文件，该文件将被`/usr/local/nagios/etc/nagios.cfg`配置文件包含。一个合理的选择可能是`/usr/local/nagios/etc/objects/clusters.cfg`。
- en: 'Define a dummy host for the cluster with the following values:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为集群定义一个虚拟主机，使用以下值：
- en: '[PRE26]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note that the `address` directive has the value `127.0.0.1`; this is deliberate,
    as the dummy host itself does not really need to be actively checked or send any
    notifications.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，`address`指令的值为`127.0.0.1`；这是故意设置的，因为虚拟主机本身并不需要被主动检查或发送任何通知。
- en: 'Add a service for the dummy host:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为虚拟主机添加一个服务：
- en: '[PRE27]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The suggestion of inheriting from `generic-service` is only an example; you
    will likely want to use your own template or values. Note that the value for `check_command`
    is all on one line, with no spaces. You should substitute the hostnames of your
    own machines.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`generic-service`继承的建议仅仅是一个示例；你可能希望使用自己的模板或值。请注意，`check_command`的值是单行的，并且没有空格。你应该替换为你自己机器的主机名。
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重启Nagios Core服务器：
- en: '[PRE28]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'With this done, the `CLUSTER` service on the `naginet-blade-cluster` dummy
    host should be available for viewing. It will change state and send notifications
    the same way as any other service if the hosts in the cluster come up or go down:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，`naginet-blade-cluster`虚拟主机上的`CLUSTER`服务应该可以查看。如果集群中的主机上线或宕机，它将像任何其他服务一样更改状态并发送通知：
- en: '![How to do it...](img/5566_08_12.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5566_08_12.jpg)'
- en: How it works...
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The host added in this recipe is just a "hook" for the `CLUSTER` service, which
    performs the actual check. This is why we used a command using the `check_dummy`
    plugin to always return an `OK` state:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中添加的主机仅仅是`CLUSTER`服务的一个“钩子”，实际的检查由该服务执行。这就是为什么我们使用一个通过`check_dummy`插件返回`OK`状态的命令：
- en: '[PRE29]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `check_cluster` command is actually quite simple. It performs no actual
    checks of its own. Instead, it determines states based on the current state of
    other hosts or services.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_cluster`命令实际上非常简单。它不会执行实际的检查。相反，它基于其他主机或服务的当前状态来确定状态。'
- en: This is why the `$HOSTSTATEID:hostname$` macros are used in the `check_command`
    directive for the service; they evaluate to a number indicating the state of the
    host, with the hostname specified after the colon.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么在服务的`check_command`指令中使用`$HOSTSTATEID:hostname$`宏；它会计算出一个数字，表示主机的状态，并在冒号后指定主机名。
- en: 'For example, if `achilles.naginet` and `odysseus.naginet` were `UP`, but `agamemnon.naginet`
    was `DOWN`, then the command run by Nagios Core for the check would look similar
    to the following code snippet after the macros were expanded:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`achilles.naginet`和`odysseus.naginet`处于`UP`状态，但`agamemnon.naginet`处于`DOWN`状态，那么Nagios
    Core运行的检查命令在宏展开后将类似于以下代码片段：
- en: '[PRE30]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can run this ourselves as the `nagios` user to check the output:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以作为`nagios`用户自己运行此命令以检查输出：
- en: '[PRE31]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The comma-separated states given in the `-d` option to the plugin correspond
    to two hosts being `UP` (state ID of `0`), and one host being `DOWN` (state ID
    of `1`). The `-w` option's value of `@1:` means that a `WARNING` state will be
    entered if one or more of the hosts is down. Similarly, the `-c` option's value
    of `@2:` means that a `CRITICAL` state will be entered if two or more of the hosts
    go down.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在插件的`-d`选项中给出的以逗号分隔的状态对应于两个主机处于`UP`状态（状态ID为`0`），一个主机处于`DOWN`状态（状态ID为`1`）。`-w`选项的值`@1:`意味着如果一个或多个主机处于宕机状态，则会进入`WARNING`状态。同样，`-c`选项的值`@2:`意味着如果两个或更多主机宕机，则会进入`CRITICAL`状态。
- en: This allows you to customize notifications to be sent based on the number of
    hosts in the `DOWN` state, rather than merely monitoring the hosts individually.
    Once you're confident this is working correctly, you may even choose to prevent
    the individual hosts from sending notifications to your pager, and have the `CLUSTER`
    service notify you instead.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这使您可以根据`DOWN`状态的主机数量自定义通知，而不仅仅是单独监控各个主机。一旦您确信此配置正常工作，您甚至可以选择阻止单个主机向您的寻呼机发送通知，而让`CLUSTER`服务来代替。
- en: There's more...
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'If you have a cluster of services rather than hosts to monitor, this can be
    done by using the `-s` option to `check_cluster`, rather than the `-h` option.
    In this case, instead of the `$HOSTSTATEID:<host_name>$` macro, you would use
    the `$SERVICESTATEID:<host_name>:<service_description>$` macro. An example configuration
    might look similar to the following code snippet for a cluster of two web servers,
    `sparta.naginet` and `athens.naginet`, given a dummy host named `naginet-http-cluster`:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要监控的是一组服务而非主机，可以通过使用`check_cluster`的`-s`选项来完成，而不是使用`-h`选项。在这种情况下，您将使用`$SERVICESTATEID:<host_name>:<service_description>$`宏，而不是`$HOSTSTATEID:<host_name>$`宏。一个示例配置可能看起来像以下代码片段，适用于一个由两台Web服务器`sparta.naginet`和`athens.naginet`组成的集群，并给一个名为`naginet-http-cluster`的虚拟主机：
- en: '[PRE32]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: See also
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Establishing a host dependency* recipe in this chapter
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*建立主机依赖关系*配方
- en: Using the network map as an overlay
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网络地图作为覆盖层
- en: In this recipe, we'll learn how to use a background for the network map and
    deliberate placement of hosts in specific points on it, to make a kind of network
    status weather map to see host statuses at a glance in a geographical context.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何使用网络地图的背景，并故意将主机放置在地图的特定位置，制作一种网络状态天气图，以便在地理上下文中一目了然地查看主机状态。
- en: Getting ready
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: You will need a Nagios Core 3.0 or newer server, and have shell access to change
    its backend configuration. You should also have at least a couple of hosts configured
    to place on the map, and understand the basics of using the Nagios network map
    and icons for hosts. These are discussed in the *Using the network map* and *Choosing
    icons for hosts* recipes, in this chapter.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个 Nagios Core 3.0 或更高版本的服务器，并且需要有 shell 访问权限以更改其后端配置。你还应该至少配置几个主机用于在地图上显示，并了解如何使用
    Nagios 网络地图和主机图标。这些内容在本章的 *使用网络地图* 和 *为主机选择图标* 章节中有讨论。
- en: 'You should also select a background image on which you can meaningfully place
    hosts. If you are monitoring an office network, this could be a floor plan of
    the building or server room. If you''re monitoring a nationwide Internet service
    provider, then you could use a map of your state or country. Some administrators
    even like to use pictures of physical equipment, and place the Nagios Core hosts
    over their physical analogues. In this example, we''ll use a map of Australia,
    640 by 509 pixels in size, a public domain image retrieved from the Natural Earth
    website at [http://www.naturalearthdata.com/](http://www.naturalearthdata.com/):'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该选择一个背景图像，在其上可以有意义地放置主机。如果你正在监控一个办公室网络，背景图像可以是建筑物或服务器机房的平面图。如果你在监控一个全国性的互联网服务提供商，则可以使用你所在州或国家的地图。有些管理员甚至喜欢使用物理设备的照片，并将
    Nagios Core 主机放置在它们的物理类比上。在本示例中，我们将使用一张澳大利亚地图，大小为 640 x 509 像素，这是一张来自[自然地球网站](http://www.naturalearthdata.com/)的公共领域图像：
- en: '![Getting ready](img/5566_08_13.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/5566_08_13.jpg)'
- en: 'The background image can be anything you like, and several graphics formats
    including PNG can be used. However, for the sake of quick map rendering, it''s
    recommended to use an image in the GD2 file format, with extension .`gd2`. If
    you have your image in a PNG format, you can generate a GD2 image from it using
    the free tool `pngtogd2`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 背景图像可以是任何你喜欢的内容，并且可以使用包括 PNG 在内的多种图形格式。然而，为了快速渲染地图，建议使用 GD2 文件格式的图像，扩展名为 .`gd2`。如果你拥有
    PNG 格式的图像，可以使用免费的工具`pngtogd2`将其转换为 GD2 图像：
- en: '[PRE33]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This tool is available on Debian-derived systems in the `libgd-tools` package.
    Its source code is also available online at [http://www.libgd.org/](http://www.libgd.org/).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具可以在基于 Debian 的系统上通过 `libgd-tools` 软件包获得。其源代码也可以在 [http://www.libgd.org/](http://www.libgd.org/)
    在线访问。
- en: How to do it...
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can set up a background for our network map as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式设置网络地图的背景：
- en: Copy your GD2 format image into the `images` subdirectory of the `physical_html_path`
    directory. In the default installation, this is `/usr/local/nagios/share/images`;
    if it is different, you can find the definition of `physical_html_path` in `/usr/local/nagios/etc/cgi.cfg`.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的 GD2 格式图像复制到 `physical_html_path` 目录下的 `images` 子目录中。在默认安装中，该目录为 `/usr/local/nagios/share/images`；如果有所不同，你可以在
    `/usr/local/nagios/etc/cgi.cfg` 中找到 `physical_html_path` 的定义。
- en: '[PRE34]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Change to the configuration directory for Nagios Core. In the default installation,
    this is `/usr/local/nagios/etc`. Edit the file `cgi.cfg`.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Nagios Core 的配置目录。在默认安装中，该目录为 `/usr/local/nagios/etc`。编辑文件 `cgi.cfg`。
- en: '[PRE35]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Look for the directive `statusmap_background_image` in this file. Uncomment
    it and make its value the name of your image:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件中查找指令`statusmap_background_image`。取消注释并将其值设置为你的图像名称：
- en: '[PRE36]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Look for the directive `default_statusmap_layout` in the same file. Change it
    to `0`, which corresponds to the **User-defined coordinates** layout.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中查找指令`default_statusmap_layout`。将其更改为`0`，对应于**用户自定义坐标**布局。
- en: '[PRE37]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Change to the `objects` configuration directory for Nagios Core. In the default
    installation, this is `/usr/local/nagios/etc/objects`. Add `2d_coords` directives
    to each of the hosts you want to display on the map. You might like to include
    definitions for `statusmap_image` here too, which is done as follows:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Nagios Core 的 `objects` 配置目录。在默认安装中，该目录为`/usr/local/nagios/etc/objects`。向你希望在地图上显示的每个主机添加`2d_coords`指令。你可能还希望在此处包括`statusmap_image`的定义，方法如下：
- en: '[PRE38]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: For the directive `2d_coords`, supply two comma-separated values describing
    the coordinates for the placement of the host. For example, `adelaide.naginet`
    is 390 pixels from the left, and 360 pixels from the top. A convenient way to
    get the coordinates is by using GIMP, the open source imaging tool, or even a
    simple tool such as MS Paint; load the image and hover over the point you wish
    to use to find its pixel coordinates.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于指令`2d_coords`，提供两个逗号分隔的值，描述主机放置的坐标。例如，`adelaide.naginet`距离左侧390像素，距离顶部360像素。获取坐标的便捷方法是使用GIMP，这是一个开源的图像工具，或者甚至可以使用简单的工具如MS
    Paint；加载图像并悬停在希望使用的点上，以查找其像素坐标。
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重新启动Nagios Core服务器：
- en: '[PRE39]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'With this done, on visiting the network map in the Nagios Core web interface
    by clicking on **Map** on the left-hand side menu, your hosts will be placed in
    their corresponding positions on the map, including the normal lines and colors
    to specify child-parent relationships and reachability:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，通过在Nagios Core Web界面左侧菜单上点击**地图**，访问网络地图，您的主机将放置在其相应的位置上，包括用于指定子父关系和可达性的正常线条和颜色：
- en: '![How to do it...](img/5566_08_14.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5566_08_14.jpg)'
- en: How it works...
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `default_statusmap_layout` directive fixes the network map into the **User-supplied
    coords** mode by default. In this mode, only hosts with values for `2d_coords`
    are shown, and they are displayed at fixed points on the map, rather than being
    dynamically placed.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 指令`default_statusmap_layout`默认将网络地图固定为**用户提供的坐标**模式。在此模式下，仅显示具有`2d_coords`值的主机，并且它们显示在地图上的固定点，而不是动态放置。
- en: It's possible to use this display mode without a background if we wish, but
    we can give a lot of useful context to the picture of the network generated by
    taking the extra step of using an actual background image.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，我们可以在没有背景的情况下使用此显示模式，但是通过使用实际背景图像，我们可以为生成的网络图片提供大量有用的背景信息。
- en: 'Note that if you don''t have any hosts with coordinates defined, you''ll receive
    an error that looks similar to the following screenshot:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果没有定义坐标的主机，您将收到类似以下截图的错误：
- en: '![How it works...](img/5566_08_15.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/5566_08_15.jpg)'
- en: There's more...
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Using the network map with an image background can be particularly helpful for
    seeing not only the statuses of individual hosts at a glance, but in the case
    of outages from multiple hosts, looking for possible geographical causes. If all
    of the nodes in one part of the city or country went down at once, we would be
    able to see that at a glance. This makes the network map an excellent choice for
    a network monitoring display, or as one of the first ports of call in diagnosing
    large-scale problems.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在带有图像背景的网络地图中，可以特别帮助快速查看单个主机的状态，但是在多个主机故障的情况下，还可以寻找可能的地理原因。如果城市或国家的某一部分的所有节点同时宕机，我们可以一目了然地看到这一点。这使得网络地图成为网络监控显示的绝佳选择，或者在诊断大规模问题时的首选。
- en: The network map is very useful in this way, and graphically it is probably the
    most impressive part of the Nagios Core web interface. If you would like even
    more options and an impressive range of visualizations for host statuses, you
    may like to consider looking at the excellent **NagVis** extension, which could
    fill a whole book in itself. There is a brief introduction to its usage in the
    *Getting extra visualizations with NagVis* recipe, in [Chapter 11](ch11.html "Chapter 11. Automating
    and Extending Nagios Core"), *Automating and Extending Nagios*.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，网络地图非常有用，从图形上讲，它可能是Nagios Core Web界面中最令人印象深刻的部分。如果您希望获得更多选项和更广泛的主机状态可视化，您可能希望考虑查看出色的**NagVis**扩展，它本身可能填写整本书。在[第11章](ch11.html
    "第11章。自动化和扩展Nagios Core")的*使用NagVis获得额外的可视化*食谱中简要介绍了其用法。
- en: See also
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating a network host hierarchy*, *Using the network map*, and *Choosing
    icons for hosts* recipes in this chapter
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章节中的*创建网络主机层次结构*、*使用网络地图*和*为主机选择图标*食谱
- en: The *Getting extra visualizations with NagVis* recipe in [Chapter 11](ch11.html
    "Chapter 11. Automating and Extending Nagios Core"), *Automating and Extending
    Nagios*
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第11章](ch11.html "第11章。自动化和扩展Nagios Core")的*使用NagVis获得额外的可视化*食谱，*自动化和扩展Nagios*'

- en: Tangled Web? Not At All!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错综复杂的 Web？一点也不！
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下方法：
- en: Downloading from a web page
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从网页下载
- en: Downloading a web page as plain text
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将网页下载为纯文本
- en: A primer on cURL
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cURL 入门
- en: Accessing unread Gmail e-mails from the command line
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行访问未读的 Gmail 邮件
- en: Parsing data from a website
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从网站解析数据
- en: Image crawler and downloader
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片爬虫和下载器
- en: Web photo album generator
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 照片相册生成器
- en: Twitter command-line client
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter 命令行客户端
- en: Accessing word definitions via a web server
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Web 服务器访问单词定义
- en: Finding broken links in a website
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找网站中的断开链接
- en: Tracking changes to a website
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪网站的变化
- en: Posting to a web page and reading the response
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向网页发布数据并读取响应
- en: Downloading a video from the Internet
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从互联网下载视频
- en: Summarizing text with OTS
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OTS 摘要文本
- en: Translating text from the command line
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行翻译文本
- en: Introduction
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The Web has become the face of technology and the central access point for data
    processing. Shell scripts cannot do everything that languages such as PHP can
    do on the Web, but there are many tasks for which shell scripts are ideally suited.
    We will explore recipes to download and parse website data, send data to forms,
    and automate website-usage tasks and similar activities. We can automate many
    activities that we perform interactively through a browser with a few lines of
    scripting. The functionality provided by the HTTP protocol and command-line utilities
    enables us to write scripts to solve many web-automation needs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Web 已经成为技术的面貌，也是数据处理的中央访问点。Shell 脚本无法完成 PHP 等语言在 Web 上能够实现的所有功能，但对于许多任务，Shell
    脚本是理想的选择。我们将探讨一些方法，下载和解析网站数据，向表单发送数据，自动化网站使用任务以及类似的活动。通过几行脚本，我们可以自动化许多通过浏览器交互执行的活动。HTTP
    协议和命令行工具提供的功能使我们能够编写脚本来解决许多 Web 自动化需求。
- en: Downloading from a web page
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从网页下载
- en: Downloading a file or a web page is simple. A few command-line download utilities
    are available to perform this task.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下载文件或网页非常简单。有一些命令行下载工具可以完成这个任务。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: '`wget` is a flexible file download command-line utility that can be configured
    with many options.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`wget` 是一个灵活的文件下载命令行工具，可以通过许多选项进行配置。'
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'A web page or a remote file can be downloaded using `wget`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `wget` 下载网页或远程文件：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It is also possible to specify multiple download URLs:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以指定多个下载 URL：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By default, the downloaded files are named the same as the URL, and the download
    information and progress is written to `stdout`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，下载的文件名称与 URL 相同，下载信息和进度将写入 `stdout`。
- en: 'The `-O` option specifies the output filename. If a file with that name already
    exists, it will be replaced by the downloaded file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`-O` 选项指定输出文件名。如果已存在该名称的文件，它将被下载的文件替换：'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `-o` option specifies a `logfile` instead of printing logs to `stdout`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`-o` 选项指定一个 `logfile`，而不是将日志打印到 `stdout`：'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using the preceding command will print nothing on the screen. The log or progress
    will be written to the log and the output file will be `dloaded_file.img`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述命令不会在屏幕上打印任何内容。日志或进度将写入日志，输出文件将是 `dloaded_file.img`。
- en: 'There is a chance that downloads might break due to unstable Internet connections.
    The `-t` option specifies how many times the utility will retry before giving
    up:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于互联网连接不稳定，下载可能会中断。`-t` 选项指定工具在放弃之前重试的次数：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Use a value of `0` to force `wget` to keep trying infinitely:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `0` 值强制 `wget` 无限次尝试：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's more...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `wget` utility has options to fine-tune behavior and solve problems.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`wget` 工具提供了选项来微调行为并解决问题。'
- en: Restricting the download speed
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制下载速度
- en: 'When there is limited bandwidth with many applications sharing it, a large
    file can devour all the bandwidth and starve other processes (perhaps interactive
    users). The `wget` option `-limit-rate` will specify the maximum bandwidth for
    the download job, allowing all applications fair access to the Internet:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当带宽有限且许多应用程序共享带宽时，一个大文件可能会占用所有带宽，导致其他进程（可能是交互式用户）无法访问。`wget` 选项 `-limit-rate`
    将指定下载任务的最大带宽，允许所有应用程序公平地访问互联网：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this command, `k` (kilobyte) specifies the speed limit. You can also use
    `m` for megabyte.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在此命令中，`k`（千字节）指定了速度限制。你也可以使用 `m` 表示兆字节。
- en: 'The `-quota` (or `-Q`) option specifies the maximum size of the download. `wget`
    will stop when the quota is exceeded. This is useful when downloading multiple
    files to a system with limited space:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`-quota`（或`-Q`）选项指定下载的最大大小。当超过配额时，`wget`会停止。这在下载多个文件到空间有限的系统时很有用：'
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Resume downloading and continue
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新开始下载并继续
- en: 'If `wget` gets interrupted before the download is complete, it can be resumed
    where it left off with the `-c` option:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`wget`在下载完成之前被中断，可以使用`-c`选项从中断处恢复下载：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Copying a complete website (mirroring)
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制整个网站（镜像）
- en: '`wget` can download a complete website by recursively collecting the URL links
    and downloading them like a crawler. To download the pages, use the `--mirror`
    option:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`wget`可以通过递归地收集URL链接并像爬虫一样下载它们，来下载完整的网站。要下载页面，请使用`--mirror`选项：'
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Alternatively, use the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用以下命令：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `-l` option specifies the depth of web pages as levels. This means that
    it will traverse only that number of levels. It is used along with `-r` (recursive).
    The `-N` argument is used to enable time stamping for the file. `URL` is the base
    URL for a website for which the download needs to be initiated. The `-k` or `--convert-links`
    option instructs `wget` to convert the links to other pages to the local copy.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`-l`选项指定网页的深度，以级别表示。这意味着它只会遍历该级别的数量。它与`-r`（递归）一起使用。`-N`参数用于启用文件的时间戳功能。`URL`是需要发起下载的站点的基本URL。`-k`或`--convert-links`选项指示`wget`将其他页面的链接转换为本地副本。'
- en: Exercise discretion when mirroring other websites. Unless you have permission,
    only perform this for your personal use and don't do it too frequently.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在镜像其他网站时要谨慎。除非你获得许可，否则仅为个人使用并避免频繁进行此操作。
- en: Accessing pages with HTTP or FTP authentication
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTP或FTP身份验证访问页面
- en: The `--user` and `--password` arguments provide the username and password to
    websites that require authentication.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`--user`和`--password`参数提供需要身份验证的网站的用户名和密码。'
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It is also possible to ask for a password without specifying the password inline.
    For this, use `--ask-password` instead of the `--password` argument.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以在不直接指定密码的情况下请求密码。为此，请使用`--ask-password`而不是`--password`参数。
- en: Downloading a web page as plain text
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将网页下载为纯文本
- en: Web pages are simply text with HTML tags, JavaScript, and CSS. The HTML tags
    define the content of the web page, which we can parse for specific content. Bash
    scripts can parse web pages. An HTML file can be viewed in a web browser to see
    it properly formatted or processed with tools described in the previous chapter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 网页只是包含HTML标签、JavaScript和CSS的文本。HTML标签定义了网页的内容，我们可以解析这些内容以提取特定信息。Bash脚本可以解析网页。HTML文件可以在网页浏览器中查看以正确显示格式，或使用前一章中描述的工具进行处理。
- en: Parsing a text document is simpler than parsing HTML data because we aren't
    required to strip off the HTML tags. **Lynx** is a command-line web browser that downloads
    a web page as plain text.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 解析文本文档比解析HTML数据更简单，因为我们不需要去除HTML标签。**Lynx**是一个命令行网页浏览器，可以将网页下载为纯文本。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Lynx is not installed in all distributions, but is available via the package
    manager.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Lynx并非所有发行版都预装，但可以通过包管理器安装。
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Alternatively, you can execute the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以执行以下命令：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The `-dump` option downloads a web page as pure ASCII. The next recipe shows
    how to send that ASCII version of the page to a file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`-dump`选项将网页下载为纯ASCII文本。下一个示例展示了如何将该ASCII版本的页面发送到文件中：'
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This command will list all the hyperlinks (`<a href="link">`) separately under
    a heading `References`, as the footer of the text output. This lets us parse links
    separately with regular expressions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在`References`标题下单独列出所有超链接（`<a href="link">`），作为文本输出的页脚。这使我们可以使用正则表达式单独解析链接。
- en: 'Consider this example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can see the plain text version of `text` using the `cat` command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`cat`命令查看`text`的纯文本版本：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: A primer on cURL
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: cURL基础
- en: '**cURL** transfers data to or from a server using the HTTP, HTTPS, or FTP protocols.
    It supports `POST`, cookies, authentication, downloading partial files from a
    specified offset, referer, user agent string, extra headers, limiting speed, maximum
    file size, progress bar, and more. cURL is useful for maintaining a website, retrieving
    data, and checking server configurations.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**cURL** 使用 HTTP、HTTPS 或 FTP 协议在服务器与本地之间传输数据。它支持 `POST`、cookies、身份验证、从指定偏移位置下载部分文件、referer、用户代理字符串、额外的头部、限速、最大文件大小、进度条等功能。cURL
    对于维护网站、检索数据以及检查服务器配置非常有用。'
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Unlike `wget`, cURL is not included in all Linux distros; you may have to install
    it with your package manager.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `wget` 不同，cURL 并不是所有 Linux 发行版都自带的；你可能需要使用包管理器进行安装。
- en: By default, cURL dumps downloaded files to `stdout`, and progress information
    to `stderr`. To disable displaying progress information, use the `--silent` option.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，cURL 会将下载的文件输出到 `stdout`，并将进度信息输出到 `stderr`。若要禁用显示进度信息，请使用 `--silent`
    选项。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The `curl` command performs many functions, including downloading, sending different
    HTTP requests, and specifying HTTP headers.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl` 命令执行多种功能，包括下载、发送不同的 HTTP 请求和指定 HTTP 头部。'
- en: 'To dump the downloaded file to `stdout`, use the following command:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将下载的文件输出到 `stdout`，请使用以下命令：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `-O` option specifies sending the downloaded data into a file with the filename
    parsed from the URL. Note that the URL must be a full page URL, not just a site
    name.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-O` 选项指定将下载的数据发送到一个文件，该文件名是从 URL 解析出来的。注意，URL 必须是完整的页面 URL，而不仅仅是站点名称。'
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `-o` option specifies the output file name. With this option you can specify
    only the site name to retrieve the home page.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o` 选项指定输出文件的名称。使用此选项，你可以仅指定站点名称以获取主页。'
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `-silent` option prevents the `curl` command from displaying progress information:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-silent` 选项可以防止 `curl` 命令显示进度信息：'
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `-progress` option displays progress bar while downloading:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-progress` 选项在下载时显示进度条：'
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: cURL downloads web pages or remote files to your local system. You can control
    the destination filename with the `-O` and `-o` options, and verbosity with the
    `-silent` and `-progress` options.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: cURL 下载网页或远程文件到本地系统。你可以使用 `-O` 和 `-o` 选项控制目标文件名，使用 `-silent` 和 `-progress` 选项控制冗余信息的显示。
- en: There's more...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the preceding sections, you learned how to download files. cURL supports
    more options to fine tune its behavior.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你学习了如何下载文件。cURL 支持更多的选项，可以细化其行为。
- en: Continuing and resuming downloads
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续和恢复下载
- en: cURL can resume a download from a given offset. This is useful if you have a
    per-day data limit and a large file to download.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: cURL 可以从指定的偏移位置恢复下载。如果你有每日数据限制并且需要下载大文件，这个功能非常有用。
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: offset is an integer value in bytes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 偏移量是一个字节数的整数值。
- en: 'cURL doesn''t require us to know the exact byte offset, if we want to resume
    downloading a file. If you want cURL to figure out the correct resume point, use
    the `-C -` option, as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想恢复下载一个文件，cURL 不要求我们知道确切的字节偏移位置。如果你希望 cURL 自动计算正确的恢复点，可以使用 `-C -` 选项，如下所示：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: cURL will automatically figure out where to restart the download of the specified
    file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: cURL 会自动计算从指定文件的哪里重新开始下载。
- en: Setting the referer string with cURL
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 cURL 设置 referer 字符串
- en: The **Referer** field in the HTTP header identifies the page that led to the
    current web page. When a user clicks on a link on web page A to go to web page
    B, the referer header string for page B will contain the URL of page A.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**Referer** 字段在 HTTP 头部中标识了引导当前网页的页面。当用户点击网页 A 上的链接跳转到网页 B 时，页面 B 的 referer
    头部字符串将包含页面 A 的 URL。'
- en: Some dynamic pages check the referer string before returning the HTML data.
    For example, a web page may display a Google logo when a user navigates to a website
    from Google, and display a different page when the user types the URL.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一些动态页面在返回 HTML 数据之前会检查 referer 字符串。例如，一个网页可能会在用户从 Google 导航到某个网站时显示 Google 的徽标，而当用户直接输入
    URL 时，则显示不同的页面。
- en: A web developer can write a condition to return a Google page if the referer
    is www.google.com, or return a different page if not.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 web 开发者可以编写一个条件语句，如果 referer 是 www.google.com，就返回一个 Google 页面；如果不是，则返回不同的页面。
- en: 'You can use `--referer` with the `curl` command to specify the referer string,
    as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `--referer` 与 `curl` 命令来指定 referer 字符串，如下所示：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Consider this example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Cookies with cURL
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 cURL 处理 cookies
- en: '`curl` can specify and store the cookies encountered during HTTP operations.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl` 可以指定并存储在 HTTP 操作过程中遇到的 cookies。'
- en: 'The `-cookie``COOKIE_IDENTIFER` option specifies which cookies to provide.
    Cookies are defined as `name=value`. Multiple cookies should be delimited with
    a semicolon (`;`):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`-cookie``COOKIE_IDENTIFER` 选项指定要提供的 Cookies。Cookies 的格式为 `name=value`。多个 Cookies
    应该用分号（`;`）分隔：'
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `-cookie-jar` option specifies the file to store cookies in:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`-cookie-jar` 选项指定用于存储 Cookies 的文件：'
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Setting a user agent string with cURL
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 cURL 设置用户代理字符串
- en: Some web pages that check the user agent won't work if there is no user agent
    specified. For example, some old websites require **Internet Explorer** (**IE**).
    If a different browser is used, they display a message that the site must be viewed
    with IE. This is because the website checks for a user agent. You can set the
    user agent with `curl`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一些检查用户代理的网页，如果没有指定用户代理，可能无法正常工作。例如，某些旧网站要求使用 **Internet Explorer**（**IE**）。如果使用其他浏览器，它们会显示一个消息，提示该网站必须在
    IE 中查看。这是因为该网站检查用户代理。你可以通过 `curl` 设置用户代理。
- en: 'The `--user-agent` or `-A` option sets the user agent:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`--user-agent` 或 `-A` 选项设置用户代理：'
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Additional headers can be passed with cURL. Use `-H "Header"` to pass additional
    headers:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 cURL 传递额外的头部信息。使用 `-H "Header"` 传递额外的头部：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: There are many different user agent strings across multiple browsers and crawlers
    on the Web. You can find a list of some of them at [http://www.useragentstring.com/pages/useragentstring.php](http://www.useragentstring.com/pages/useragentstring.php).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 网上有许多不同的用户代理字符串，涵盖多个浏览器和爬虫。你可以在 [http://www.useragentstring.com/pages/useragentstring.php](http://www.useragentstring.com/pages/useragentstring.php)
    找到一些常见的列表。
- en: Specifying a bandwidth limit on cURL
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 cURL 中指定带宽限制
- en: 'When bandwidth is shared among multiple users, we can limit the download rate
    with the `--limit-rate` option:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当带宽被多个用户共享时，我们可以使用 `--limit-rate` 选项来限制下载速率：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The rate can be specified with `k` (kilobyte) or `m` (megabyte).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `k`（千字节）或 `m`（兆字节）来指定速率。
- en: Specifying the maximum download size
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定最大下载大小
- en: 'The `--max-filesize` option specifies the maximum file size:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`--max-filesize` 选项指定最大文件大小：'
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `curl` command will return a non-zero exit code if the file size exceeds
    the limit or a zero if the download succeeds.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件大小超过限制，`curl` 命令将返回一个非零退出代码；如果下载成功，则返回零。
- en: Authenticating with cURL
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 cURL 进行身份验证
- en: The `curl` command's  `-u` option performs HTTP or FTP authentication.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl` 命令的 `-u` 选项执行 HTTP 或 FTP 身份验证。'
- en: 'The username and password can be specified using `-u username:password`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名和密码可以使用 `-u username:password` 进行指定：
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If you prefer to be prompted for the password, provide only a username:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望系统提示输入密码，只提供用户名即可：
- en: '[PRE34]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Printing response headers excluding data
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印响应头部，排除数据部分
- en: Examining headers is sufficient for many checks and statistics. For example,
    we don't need to download an entire page to confirm it is reachable. Just reading
    the HTTP response is sufficient.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 检查头部信息对于许多检查和统计已足够。例如，我们不需要下载整个页面来确认它是否可达。只读取 HTTP 响应即可。
- en: Another use case for examining the HTTP header is to check the `Content-Length`
    field to determine the file size or the `Last-Modified` field to see if the file
    is newer than a current copy before downloading.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个检查 HTTP 头部的使用场景是检查 `Content-Length` 字段以确定文件大小，或检查 `Last-Modified` 字段来查看文件是否比当前副本更新，然后再进行下载。
- en: 'The `-I` or `-head` option outputs only the HTTP headers, without downloading
    the remote file:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`-I` 或 `-head` 选项仅输出 HTTP 头部，不下载远程文件：'
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: See also
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: The *Posting to a web page and reading the response* recipe in this chapter
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的 *发布到网页并读取响应* 示例
- en: Accessing unread Gmail e-mails from the command line
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令行访问未读 Gmail 邮件
- en: Gmail is a widely-used free e-mail service from Google: [http://mail.google.com/](http://mail.google.com/).
    It allows you to read your mail via a browser or an authenticated RSS feeds. We
    can parse the RSS feeds to report the sender name and subject. This is a quick
    way to scan unread e-mails without opening the web browser.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Gmail 是 Google 提供的一款广泛使用的免费电子邮件服务：[http://mail.google.com/](http://mail.google.com/)。它允许你通过浏览器或经过身份验证的
    RSS 提要来读取邮件。我们可以解析这些 RSS 提要，报告发件人名称和主题。这是一种快速扫描未读邮件而无需打开网页浏览器的方法。
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s go through a shell script to parse the RSS feeds for Gmail to display
    the unread mails:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个 shell 脚本解析 Gmail 的 RSS 提要，来显示未读邮件：
- en: '[PRE36]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output resembles this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE37]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: If you use a Gmail account with two-factor authentication, you will have to
    generate a new key for this script and use it. Your regular password won't work.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用带有两步验证的 Gmail 账户，你需要为此脚本生成一个新密钥并使用它。你的常规密码将无法使用。
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The script uses cURL to download the RSS feed. You can view the format of the
    incoming data by logging in to your Gmail account and viewing [https://mail.google.com/mail/feed/atom](https://mail.google.com/mail/feed/atom).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本使用cURL下载RSS订阅源。你可以通过登录Gmail帐户并查看[https://mail.google.com/mail/feed/atom](https://mail.google.com/mail/feed/atom)来查看传入数据的格式。
- en: cURL reads the RSS feed with the user authentication provided by the `-u user:pass`
    argument. When you use `-u user` without the password cURL, it will interactively
    ask for the password.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: cURL通过`-u user:pass`参数提供的用户认证读取RSS订阅源。当你仅使用`-u user`而不提供密码时，cURL会交互式地询问密码。
- en: '`tr -d ''\n''`: This removes the newline characters'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tr -d ''\n''`：这会删除换行符'
- en: '`sed ''s:</entry>:\n:g''`: This replaces every `</entry>` element with a newline,
    so each e-mail entry is delimited by a new line and, hence, mails can be parsed
    one-by-one.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sed ''s:</entry>:\n:g''`：这将每个`</entry>`元素替换为换行符，因此每个电子邮件条目都由新行分隔，从而使邮件可以逐一解析。'
- en: 'The next block of script that needs to be executed as one single expression
    uses `sed` to extract the relevant fields:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 需要作为一个单一表达式执行的下一个脚本块使用`sed`提取相关字段：
- en: '[PRE38]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This script matches the title with the `<title>\(.*\)<\/title` regular expression,
    the sender name with the `<author><name>\([^<]*\)<\/name>` regular expression,
    and e-mail using `<email>\([^<]*\)`. Sed uses back referencing to display the
    author, title, and subject of the e-mail into an easy to read format:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本使用`<title>\(.*\)<\/title`正则表达式匹配标题，使用`<author><name>\([^<]*\)<\/name>`正则表达式匹配发送者名称，使用`<email>\([^<]*\)`匹配电子邮件。Sed使用反向引用将作者、标题和邮件主题显示为易于阅读的格式：
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`\1` corresponds to the first substring match (title), `\2` for the second
    substring match (name), and so on.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`\1`对应第一个子字符串匹配（标题），`\2`对应第二个子字符串匹配（姓名），依此类推。'
- en: The `SHOW_COUNT=5` variable is used to take the number of unread mail entries
    to be printed on the terminal.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`SHOW_COUNT=5`变量用于获取要在终端上打印的未读邮件条目数量。'
- en: '`head` is used to display only the `SHOW_COUNT*3` lines from the first line.
    `SHOW_COUNT` is multiplied by three in order to show three lines of output.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`head`用于显示从第一行开始的`SHOW_COUNT*3`行。`SHOW_COUNT`乘以三，以便显示三行输出。'
- en: See also
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: The *A primer on cURL* recipe in this chapter explains the `curl` command
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*cURL入门*配方解释了`curl`命令
- en: The *Using sed to perform text replacement* recipe in [Chapter 4](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml),
    *Texting and Driving,* explains the `sed` command
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml)中的*使用sed进行文本替换*配方解释了`sed`命令'
- en: Parsing data from a website
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从网站解析数据
- en: The `lynx`, `sed`, and `awk` commands can be used to mine data from websites.
    You might have come across a list of actress rankings in a *Searching and mining
    text inside a file with grep *recipe in [Chapter 4](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml),
    *Texting and Driving*; it was generated by parsing the [http://www.johntorres.net/BoxOfficefemaleList.html](http://www.johntorres.net/BoxOfficefemaleList.html)
    web page.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`lynx`、`sed`和`awk`命令可以用于从网站提取数据。你可能在[第4章](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml)的*使用grep搜索和提取文件中的文本*配方中看到过一个女演员排名列表；它是通过解析[http://www.johntorres.net/BoxOfficefemaleList.html](http://www.johntorres.net/BoxOfficefemaleList.html)网页生成的。'
- en: How to do it...
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Let''s go through the commands used to parse details of actresses from the
    website:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看用于解析网站上女演员详细信息的命令：
- en: '[PRE40]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output is as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE41]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Lynx is a command-line web browser; it can dump a text version of a website
    as we will see in a web browser, instead of returning the raw HTML as `wget` or
    cURL does. This saves the step of removing HTML tags. The `-nolist` option shows
    the links without numbers. Parsing and formatting the lines that contain Rank
    is done with `sed`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Lynx是一个命令行网页浏览器；它可以像在网页浏览器中看到的那样，转储网站的文本版本，而不是返回像`wget`或cURL那样的原始HTML。这省去了去除HTML标签的步骤。`-nolist`选项显示没有编号的链接。使用`sed`对包含排名的行进行解析和格式化：
- en: '[PRE42]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: These lines are then sorted according to the ranks.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行随后会根据排名进行排序。
- en: See also
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: The *Using sed to perform text replacement* recipe in [Chapter 4](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml),
    *Texting and Driving*, explains the `sed` command
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml)中的*使用sed进行文本替换*配方解释了`sed`命令'
- en: The *Downloading a web page as plain text* recipe in this chapter explains the
    `lynx` command
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*下载网页为纯文本*配方解释了`lynx`命令
- en: Image crawler and downloader
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像爬虫和下载器
- en: '**Image crawlers** download all the images that appear in a web page. Instead
    of going through the HTML page to pick the images by hand, we can use a script
    to identify the images and download them automatically.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**图片爬虫** 会下载网页中出现的所有图片。我们可以通过脚本自动识别图片并下载，而不必手动从 HTML 页面中挑选图片。'
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'This Bash script will identify and download the images from a web page:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Bash 脚本将识别并下载网页中的所有图片：
- en: '[PRE43]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'An example usage is as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法如下：
- en: '[PRE44]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works...
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The image downloader script reads an HTML page, strips out all tags except `<img>`,
    parses `src="img/URL"` from the `<img>` tag, and downloads them to the specified
    directory. This script accepts a web page URL and the destination directory as
    command-line arguments.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图片下载脚本读取 HTML 页面，去除所有标签（除了 `<img>` 标签），解析 `<img>` 标签中的 `src="img/URL"` 并将其下载到指定目录。此脚本接受网页
    URL 和目标目录作为命令行参数。
- en: 'The `[ $# -ne 3 ]` statement checks whether the total number of arguments to
    the script is three, otherwise it exits and returns a usage example. Otherwise,
    this code parses the URL and destination directory:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`[ $# -ne 3 ]` 语句检查脚本的参数总数是否为三，如果不是，则退出并返回使用示例。否则，这段代码会解析 URL 和目标目录：'
- en: '[PRE45]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `while` loop runs until all the arguments are processed. The `shift` command
    shifts arguments to the left so that `$1` will take the next argument's value;
    that is, `$2`, and so on. Hence, we can evaluate all arguments through `$1` itself.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 循环会一直执行，直到所有参数处理完成。`shift` 命令会将参数向左移动，这样 `$1` 就会获取下一个参数的值，即 `$2`，以此类推。因此，我们可以通过
    `$1` 本身评估所有参数。'
- en: The `case` statement checks the first argument (`$1`). If that matches `-d`,
    the next argument must be a directory name, so the arguments are shifted and the
    directory name is saved. If the argument is any other string it is a URL.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`case` 语句检查第一个参数（`$1`）。如果它匹配 `-d`，那么下一个参数必须是目录名，因此参数会被移位，目录名将被保存。如果该参数是其他任何字符串，则它是
    URL。'
- en: 'The advantage of parsing arguments in this way is that we can place the -d
    argument anywhere in the command line:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这种解析参数的优势在于，我们可以在命令行中的任何位置放置 `-d` 参数：
- en: '[PRE46]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Or:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE47]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`egrep -o "<img src=[^>]*>"` will print only the matching strings, which are
    the `<img>` tags including their attributes. The `[^>]*` phrase matches all the
    characters except the closing `>`, that is, `<img src="img/image.jpg">`.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`egrep -o "<img src=[^>]*>"` 只会打印匹配的字符串，即包括其属性的 `<img>` 标签。`[^>]*` 这个短语匹配所有除关闭
    `>` 之外的字符，即 `<img src="img/image.jpg">`。'
- en: '`sed''s/<img src=\"\([^"]*\).*/\1/g''` extracts the `url` from the `src="img/url"`
    string.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`sed''s/<img src=\"\([^"]*\).*/\1/g''` 从 `src="img/url"` 字符串中提取 `url`。'
- en: 'There are two types of image source paths: relative and absolute. **Absolute
    paths** contain full URLs that start with `http://` or `https://`. Relative URLs
    starts with `/` or `image_name` itself. An example of an absolute URL is `http://example.com/image.jpg`.
    An example of a relative URL is `/image.jpg`.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图像源路径有两种类型：绝对路径和相对路径。**绝对路径** 包含以 `http://` 或 `https://` 开头的完整 URL。相对 URL 以
    `/` 或 `image_name` 本身开头。一个绝对 URL 的例子是 `http://example.com/image.jpg`。一个相对 URL
    的例子是 `/image.jpg`。
- en: 'For relative URLs, the starting `/` should be replaced with the base URL to
    transform it to `http://example.com/image.jpg`. The script initializes `baseurl`
    by extracting it from the initial URL with the following command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 对于相对 URL，起始的 `/` 应该被替换为基础 URL，从而将其转换为 `http://example.com/image.jpg`。该脚本通过以下命令提取初始
    URL 来初始化 `baseurl`：
- en: '[PRE48]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The output of the previously described `sed` command is piped into another
    sed command to replace a leading `/` with `baseurl`, and the results are saved
    in a file named for the script''s PID: (`/tmp/$$.list`).'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 前述 `sed` 命令的输出被传递到另一个 sed 命令，替换掉开头的 `/` 为 `baseurl`，并将结果保存在以脚本的 PID 命名的文件中：（`/tmp/$$.list`）。
- en: '[PRE49]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The final `while` loop iterates through each line of the list and uses curl
    to download the images. The `--silent` argument is used with `curl` to avoid extra
    progress messages from being printed on the screen.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的 `while` 循环会遍历列表中的每一行，并使用 curl 下载图片。使用 `--silent` 参数来避免 `curl` 输出多余的进度信息。
- en: See also
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: The *A primer on cURL* recipe in this chapter explains the `curl` command
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*cURL 入门* 食谱解释了 `curl` 命令。
- en: The *Using sed to perform text replacement* recipe in [Chapter 4](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml),
    *Texting and Driving*  explains the `sed` command
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml)中的*使用 sed 执行文本替换*食谱解释了 `sed`
    命令。'
- en: The *Searching and mining text inside a file with grep* recipe in [Chapter 4](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml),
    *Texting and Driving*, explains the `grep` command
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml)中的 *使用 grep 搜索和提取文件中的文本* 食谱，*文字和驾驶*，解释了`grep`命令'
- en: Web photo album generator
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络照片相册生成器
- en: Web developers frequently create photo albums of full-size and thumbnail images.
    When a thumbnail is clicked, a large version of the picture is displayed. This
    requires resizing and placing many images. These actions can be automated with
    a simple Bash script. The script creates thumbnails, places them in exact directories,
    and generates the code fragment for `<img>` tags automatically.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Web 开发人员常常创建全尺寸和缩略图照片相册。当点击缩略图时，会显示该图片的放大版。这需要调整大小并放置许多图像。这些操作可以通过简单的 Bash 脚本来自动化。该脚本创建缩略图，将其放置在正确的目录中，并自动生成`<img>`标签的代码片段。
- en: Getting ready
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This script uses a `for` loop to iterate over every image in the current directory.
    The usual Bash utilities such as `cat` and `convert` (from the Image Magick package)
    are used. These will generate an HTML album, using all the images, in `index.html`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本使用`for`循环来遍历当前目录中的每个图像。它使用了常见的 Bash 工具，如`cat`和`convert`（来自 Image Magick
    包）。这些工具将生成一个 HTML 相册，并将所有图像放入`index.html`中。
- en: How to do it...
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This Bash script will generate an HTML album page:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Bash 脚本将生成一个 HTML 相册页面：
- en: '[PRE50]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Run the script as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式运行脚本：
- en: '[PRE51]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How it works...
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The initial part of the script is used to write the header part of the HTML
    page.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的初始部分用于编写 HTML 页面头部部分。
- en: 'The following script redirects all the contents up to `EOF1` to `index.html`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本将所有内容重定向到 `EOF1` 之前的部分，并写入`index.html`：
- en: '[PRE52]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The header includes the HTML and CSS styling.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 头部包括 HTML 和 CSS 样式。
- en: '`for img in *.jpg *.JPG;` iterates over the filenames and evaluates the body
    of the loop.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`for img in *.jpg *.JPG;` 会遍历文件名并执行循环体的内容。'
- en: '`convert "$img" -resize "100x" "thumbs/$img"` creates images 100px-wide as
    thumbnails.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`convert "$img" -resize "100x" "thumbs/$img"`将创建宽度为100px的缩略图。'
- en: 'The following statement generates the required `<img>` tag and appends it to
    `index.html`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句生成所需的`<img>`标签并将其附加到`index.html`中：
- en: '[PRE53]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Finally, the footer HTML tags are appended with `cat` as  in the first part
    of the script.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用`cat`将页脚的 HTML 标签附加到`index.html`中，就像脚本的第一部分那样。
- en: See also
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Web photo album generator* recipe in this chapter explains `EOF` and `stdin`
    redirection
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *Web 照片相册生成器* 食谱解释了`EOF`和`stdin`重定向
- en: Twitter command-line client
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twitter 命令行客户端
- en: '**Twitter** is the hottest micro-blogging platform, as well as the latest buzz
    word for online social media now. We can use Twitter API to read tweets on our
    timeline from the command line!'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**Twitter** 是最热门的微博平台，也是目前在线社交媒体的流行词汇。我们可以使用 Twitter API 从命令行读取我们时间线上的推文！'
- en: Let's see how to do it.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看怎么做。
- en: Getting ready
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Recently, Twitter stopped allowing people to log in using plain HTTP Authentication,
    so we must use OAuth to authenticate ourselves. A full explanation of OAuth is
    out of the scope of this book, so we will use a library which makes it easy to
    use OAuth from Bash scripts. Perform the following steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Twitter 停止允许人们使用纯 HTTP 身份验证登录，因此我们必须使用 OAuth 来进行身份验证。本书不涉及 OAuth 的完整解释，因此我们将使用一个库，使得在
    Bash 脚本中使用 OAuth 变得更加简单。请按照以下步骤进行操作：
- en: Download the `bash-oauth` library from [https://github.com/livibetter/bash-oauth/archive/master.zip](https://github.com/livibetter/bash-oauth/archive/master.zip),
    and unzip it to any directory.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://github.com/livibetter/bash-oauth/archive/master.zip](https://github.com/livibetter/bash-oauth/archive/master.zip)
    下载 `bash-oauth` 库，并将其解压到任何目录。
- en: Go to that directory and then inside the subdirectory `bash-oauth-master`, run
    `make install-all` as root.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入该目录，然后在子目录`bash-oauth-master`内，以 root 用户身份运行`make install-all`。
- en: Go to [https://apps.twitter.com/](https://apps.twitter.com/) and register a
    new app. This will make it possible to use OAuth.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://apps.twitter.com/](https://apps.twitter.com/) 并注册一个新应用。这将使得能够使用
    OAuth。
- en: After registering the new app, go to your app's settings and change Access type
    to Read and Write.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册新应用程序后，进入应用程序设置并将访问类型更改为“读取和写入”。
- en: Now, go to the Details section of the app and note two things, Consumer Key
    and Consumer Secret, so that you can substitute these in the script we are going
    to write.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，进入应用程序的详情部分，记录下两个信息，Consumer Key 和 Consumer Secret，以便在我们将要编写的脚本中替换这些内容。
- en: Great, now let's write the script that uses this.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，现在让我们编写一个使用这个功能的脚本。
- en: How to do it...
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This Bash script uses the OAuth library to read tweets or send your own updates:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Bash 脚本使用 OAuth 库来读取推文或发送自己的更新：
- en: '[PRE54]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Run the script as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE55]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: How it works...
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: First of all, we use the source command to include the `TwitterOAuth.sh` library,
    so we can use its functions to access Twitter. The `TO_init` function initializes
    the library.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用 `source` 命令来引入 `TwitterOAuth.sh` 库，以便使用其功能访问 Twitter。`TO_init` 函数初始化该库。
- en: Every app needs to get an OAuth token and token secret the first time it is
    used. If these are not present, we use the `TO_access_token_helper` library function
    to acquire them. Once we have the tokens, we save them to a `config` file so we
    can simply source it the next time the script is run.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序在首次使用时都需要获取 OAuth 令牌和令牌密钥。如果没有这些信息，我们将使用 `TO_access_token_helper` 库函数来获取它们。获取到令牌后，我们将它们保存到一个
    `config` 文件中，这样下次运行脚本时，只需简单地加载该文件即可。
- en: 'The `TO_statuses_home_timeline` library function fetches the tweets from Twitter.
    This data is retuned as a single long string in JSON format, which starts like
    this:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO_statuses_home_timeline` 库函数从 Twitter 获取推文。这些数据以 JSON 格式作为一长串字符串返回，类似这样开始：'
- en: '[PRE56]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Each tweet starts with the `"created_at"` tag and includes a `text` and a `screen_name`
    tag. The script will extract the text and screen name data and display only those
    fields.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 每条推文都以 `"created_at"` 标签开始，并包含 `text` 和 `screen_name` 标签。脚本将提取文本和屏幕名称数据，并仅显示这些字段。
- en: The script assigns the long string to the `TO_ret` variable.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本将长字符串分配给 `TO_ret` 变量。
- en: The JSON format uses quoted strings for the key and may or may not quote the
    value. The key/value pairs are separated by commas, and the key and value are
    separated by a colon (`:`).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 格式使用双引号括起键，并且键值可能会被引用或不被引用。键值对通过逗号分隔，键和值通过冒号（`:`）分隔。
- en: 'The first `sed` replaces each `"` character set with a newline, making each
    key/value a separate line. These lines are piped to another `sed` command to replace
    each occurrence of `":` with a tilde (~), which creates a line like this:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 `sed` 命令将每个 `"` 字符替换为换行符，将每个键值对分开。这些行被传送到另一个 `sed` 命令，替换每个 `":` 的出现为波浪号
    (~)，从而生成类似这样的行：
- en: '[PRE57]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The final `awk` script reads each line. The `-F~` option splits the line into
    fields at the tilde, so `$1` is the key and `$2` is the value. The `if` command
    checks for `text` or `screen_name`. The text is first in the tweet, but it's easier
    to read if we report the sender first; so the script saves a `text` return until
    it sees a `screen_name`, then prints the current value of `$2` and the saved value
    of the text.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的 `awk` 脚本读取每一行。`-F~` 选项将每行按波浪号分成字段，因此 `$1` 是键，`$2` 是值。`if` 命令检查是否为 `text`
    或 `screen_name`。文本通常出现在推文的第一部分，但如果先显示发送者会更容易阅读，因此脚本会先保存 `text` 的返回值，直到它看到 `screen_name`，然后打印出
    `$2` 的当前值和保存的文本值。
- en: The `TO_statuses_update` library function generates a tweet. The empty first
    parameter defines our message as being in the default format, and the message
    is a part of the second parameter.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO_statuses_update` 库函数生成一条推文。空的第一个参数将我们的消息定义为默认格式，消息是第二个参数的一部分。'
- en: See also
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: The *Using sed to perform text replacement* recipe in [Chapter 4](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml),
    *Texting and Driving*,  explains the `sed` command
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 4 章](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml)《发短信与开车》中的 *使用 sed 进行文本替换*
    配方，解释了 `sed` 命令。'
- en: The *Searching and mining text inside a file with grep* recipe in [Chapter 4](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml),
    *Texting and Driving*, explains the `grep` command
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第 4 章](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml)《发短信与开车》中的 *使用 grep 在文件中搜索和挖掘文本*
    配方，解释了 `grep` 命令。
- en: Accessing word definitions via a web server
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 web 服务器访问单词定义
- en: Several dictionaries on the Web offer an API to interact with their website
    via scripts. This recipe demonstrates how to use a popular one.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 网上有多个词典提供 API，可以通过脚本与其网站进行交互。本配方演示了如何使用一个流行的 API。
- en: Getting ready
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We are going to use `curl`, `sed`, and `grep` for this define utility. There
    are a lot of dictionary websites where you can register and use their APIs for
    personal use for free. In this example, we are using Merriam-Webster''s dictionary
    API. Perform the following steps:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `curl`、`sed` 和 `grep` 来定义这个实用程序。有许多词典网站，您可以注册并免费使用它们的 API 进行个人使用。在这个示例中，我们使用的是
    Merriam-Webster 的字典 API。请按照以下步骤操作：
- en: 'Go to [http://www.dictionaryapi.com/register/index.htm](http://www.dictionaryapi.com/register/index.htm),
    and register an account for yourself. Select Collegiate Dictionary and Learner''s
    Dictionary:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[http://www.dictionaryapi.com/register/index.htm](http://www.dictionaryapi.com/register/index.htm)，并为自己注册一个账户。选择《大学词典》和《学习者词典》：
- en: Log in using the newly created account and go to My Keys to access the keys.
    Note the key for the learner's dictionary.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新创建的账户登录，进入“我的密钥”页面，获取密钥。记下学习者词典的密钥。
- en: How to do it...
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This script will display a word definition:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将显示一个单词的定义：
- en: '[PRE58]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Run the script like this:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本的方法如下：
- en: '[PRE59]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: How it works...
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We use `curl` to fetch the data from the dictionary API web page by specifying
    our API `Key ($apikey)`, and the word we want the definition for (`$1`). The result
    contains definitions in the `<dt>` tags, selected with `grep`. The `sed` command
    removes the tags. The script selects the required number of lines from the definitions
    and uses `nl` to add a line number to each line.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`curl`从字典API网页获取数据，指定我们的API `Key ($apikey)`和我们想要查询的单词（`$1`）。结果包含在`<dt>`标签中的定义，使用`grep`提取。`sed`命令用于去除标签。脚本从定义中选择所需的行数，并使用`nl`为每行添加行号。
- en: See also
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: The *Using sed to perform text replacement* recipe in [Chapter 4](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml)
    explains the `sed` command
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml)中的*使用sed进行文本替换*示例解释了`sed`命令。'
- en: The *Searching and mining text inside a file with grep* recipe in [Chapter 4](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml),
    *Texting and Driving*, explains the `grep` command
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](22424a9e-fea7-49de-9589-ea32aeb0b829.xhtml)中的*使用grep在文件中搜索和挖掘文本*示例解释了`grep`命令。'
- en: Finding broken links in a website
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找网站中的失效链接
- en: Websites must be tested for broken links. It's not feasible to do this manually
    for large websites. Luckily, this is an easy task to automate. We can find the
    broken links with HTTP manipulation tools.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 网站必须进行失效链接测试。对于大型网站，手动完成这个任务是不可行的。幸运的是，这是一个可以轻松自动化的任务。我们可以使用HTTP操作工具来查找失效链接。
- en: Getting ready
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can use `lynx` and `curl` to identify the links and find broken ones. Lynx
    has the `-traversal` option, which recursively visits pages on the website and
    builds a list of all hyperlinks. cURL is used to verify each of the links.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`lynx`和`curl`来识别链接并找出失效的链接。Lynx具有`-traversal`选项，可以递归访问网站上的页面，并构建所有超链接的列表。cURL用于验证每个链接。
- en: How to do it...
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This script uses `lynx` and `curl` to find the broken links on a web page:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本使用`lynx`和`curl`查找网页中的失效链接：
- en: '[PRE60]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: How it works...
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`lynx -traversal URL` will produce a number of files in the working directory.
    It includes a `reject.dat` file, which will contain all the links in the website.
    `sort -u` is used to build a list by avoiding duplicates. Then, we iterate through
    each link and check the header response using `curl -I`. If the first line of
    the header contains HTTP/ and either `OK` or `200`, it means that the link is
    valid. If the link is not valid, it is rechecked and tested for a `301`-*link
    moved*-reply. If that test also fails, the broken link is printed on the screen.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`lynx -traversal URL`将在工作目录中生成多个文件。其中包括一个`reject.dat`文件，里面包含该网站的所有链接。`sort
    -u`用于构建一个去重的列表。然后，我们遍历每个链接，使用`curl -I`检查其头部响应。如果头部的第一行包含HTTP/和`OK`或`200`，则表示该链接有效。如果该链接无效，则重新检查并测试是否有`301`-*链接已移动*的响应。如果该测试也失败，损坏的链接将会显示在屏幕上。'
- en: From its name, it might seem like `reject.dat` should contain a list of URLs
    that were broken or unreachable. However, this is not the case, and lynx just
    adds all the URLs there.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 从名字来看，`reject.dat`可能会让人觉得它应该包含无法访问或损坏的URL列表。然而，事实并非如此，`lynx`只是将所有的URL都添加到这个文件中。
- en: Also note that `lynx` generates a file called `traverse.errors`, which contains
    all the URLs that had problems in browsing. However, `lynx` will only add URLs
    that return `HTTP 404 (not found)`, and so we will lose other errors (for instance,
    `HTTP 403 Forbidden`). This is why we manually check for statuses.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 另外需要注意的是，`lynx`会生成一个名为`traverse.errors`的文件，其中包含所有浏览时出问题的URL。然而，`lynx`只会添加返回`HTTP
    404 (未找到)`的URL，因此我们会忽略其他错误（例如，`HTTP 403 Forbidden`）。这就是为什么我们需要手动检查状态码的原因。
- en: See also
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: The *Downloading a web page as plain text* recipe in this chapter explains the
    `lynx` command
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*将网页下载为纯文本*示例解释了`lynx`命令。
- en: The *A primer on cURL* recipe in this chapter explains the `curl` command
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*cURL入门*示例解释了`curl`命令。
- en: Tracking changes to a website
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪网站变化
- en: Tracking website changes is useful for both web developers and users. Checking
    a website manually is impractical, but a change tracking script can be run at
    regular intervals. When a change occurs, it generates a notification.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪网站变化对于Web开发者和用户都有用。手动检查网站是不现实的，但可以定期运行变化追踪脚本。一旦发生变化，它会生成通知。
- en: Getting ready
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Tracking changes in terms of Bash scripting means fetching websites at different
    times and taking the difference using the `diff` command. We can use `curl` and
    `diff` to do this.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bash脚本中追踪变化意味着在不同时间获取网站，并使用`diff`命令查看差异。我们可以使用`curl`和`diff`来完成这个任务。
- en: How to do it...
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This Bash script combines different commands, to track changes in a web page:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Bash脚本结合了不同的命令，用于追踪网页变化：
- en: '[PRE61]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Let's look at the output of the `track_changes.sh` script on a website you control.
    First we'll see the output when a web page is unchanged, and then after making
    changes.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下你控制的一个网站上`track_changes.sh`脚本的输出。首先我们看到的是网页没有变化时的输出，然后是做出更改后的输出。
- en: Note that you should change `MyWebSite.org` to your website name.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你应该将`MyWebSite.org`替换为你自己网站的名称。
- en: 'First, run the following command:'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，运行以下命令：
- en: '[PRE62]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Second, run the command again:'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，再次运行命令：
- en: '[PRE63]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Third, run the following command after making changes to the web page:'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三，在更改网页后，运行以下命令：
- en: '[PRE64]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: How it works...
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The script checks whether the script is running for the first time using `[
    ! -e "last.html" ];`. If `last.html` doesn't exist, it means that it is the first
    time, and the web page must be downloaded and saved as `last.html`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本通过`[ ! -e "last.html" ];`检查脚本是否是第一次运行。如果`last.html`不存在，这意味着是第一次运行，必须下载网页并将其保存为`last.html`。
- en: If it is not the first time, it downloads the new copy (`recent.html`) and checks
    the difference with the diff utility. Any changes will be displayed as diff output.
    Finally, `recent.html` is copied to `last.html`.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这不是第一次，它会下载新的副本（`recent.html`），并通过diff工具检查差异。任何更改都会以diff输出的形式显示。最后，`recent.html`会被复制到`last.html`。
- en: Note that changing the website you are checking will generate a huge diff file
    the first time you examine it. If you need to track multiple pages, you can create
    a folder for each website you intend to watch.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，更改你正在检查的网站将会在第一次检查时生成一个巨大的diff文件。如果你需要追踪多个页面，可以为你打算观察的每个网站创建一个文件夹。
- en: See also
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: The *A primer on cURL* recipe in this chapter explains the `curl` command
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*《cURL入门》*配方解释了`curl`命令
- en: Posting to a web page and reading the response
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布到网页并读取响应
- en: '`POST` and `GET` are two types of request in HTTP to send information to or
    retrieve information from a website. In a `GET` request, we send parameters (name-value
    pairs) through the web page URL itself. The POST command places the key/value
    pairs in the message body instead of the URL. `POST` is commonly used when submitting
    long forms or to conceal information submitted from a casual glance.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`和`GET`是HTTP请求中的两种类型，用于向网站发送信息或从网站检索信息。在`GET`请求中，我们通过网页的URL本身发送参数（名称-值对）。`POST`命令将键值对放在消息体中，而不是URL中。`POST`通常用于提交较长的表单，或隐藏信息，以防止在表面上暴露。'
- en: Getting ready
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the sample `guestbook` website included in the
    **tclhttpd** package. You can download tclhttpd from [http://sourceforge.net/projects/tclhttpd](http://sourceforge.net/projects/tclhttpd)
    and then run it on your local system to create a local web server. The guestbook
    page requests a name and URL which it adds to a guestbook to show who has visited
    a site when the user clicks on the Add me to your guestbook button.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用**tclhttpd**包中包含的`guestbook`网站。你可以从[http://sourceforge.net/projects/tclhttpd](http://sourceforge.net/projects/tclhttpd)下载tclhttpd，并在本地系统上运行它来创建一个本地Web服务器。留言簿页面请求一个名字和URL，并将其添加到留言簿中，显示谁在用户点击“将我添加到留言簿”按钮时访问了该网站。
- en: This process can be automated with a single `curl` (or `wget`) command.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可以通过一个`curl`（或`wget`）命令来自动化。
- en: How to do it...
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Download the tclhttpd package and `cd` to the `bin` folder. Start the tclhttpd
    daemon with this command:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 下载tclhttpd包并`cd`到`bin`文件夹。使用以下命令启动tclhttpd守护进程：
- en: '[PRE65]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The format to POST and read the HTML response from the generic website resembles
    this:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 发布和读取通用网站HTML响应的格式如下：
- en: '[PRE66]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Consider the following example:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE67]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The curl command prints a response page like this:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl`命令打印出类似这样的响应页面：'
- en: '[PRE68]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '`-d` is the argument used for posting. The string argument for `-d` is similar
    to the `GET` request semantics. `var=value` pairs are to be delimited by `&`.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`-d`是用于发布数据的参数。`-d`的字符串参数类似于`GET`请求的语义。`var=value`对应该通过`&`分隔。'
- en: 'You can post the data using `wget` using `--post-data "string"`. Consider the
    following example:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`wget`通过`--post-data "string"`发布数据。考虑以下示例：
- en: '[PRE69]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Use the same format as cURL for name-value pairs. The text in output.html is
    the same as that returned by the cURL command.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与cURL相同的格式来传递名称-值对。`output.html`中的文本与cURL命令返回的文本相同。
- en: The string to the post arguments (for example, to `-d` or `--post-data`) should
    always be given in quotes. If quotes are not used, `&` is interpreted by the shell
    to indicate that this should be a background process.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给发布参数（例如`-d`或`--post-data`）的字符串应始终用引号括起来。如果不使用引号，`&`会被shell解释为指示该操作为后台进程。
- en: 'If you look at the website source (use the View Source option from the web
    browser), you will see an HTML form defined, similar to the following code:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看网页源代码（从浏览器选择查看源代码选项），你会看到定义了一个HTML表单，类似于以下代码：
- en: '[PRE70]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Here, `newguest.cgi` is the target URL. When the user enters the details and
    clicks on the Submit button, the name and URL inputs are sent to `newguest.cgi`
    as a `POST` request, and the response page is returned to the browser.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`newguest.cgi`是目标网址。当用户输入详细信息并点击提交按钮时，名称和网址输入会作为`POST`请求发送到`newguest.cgi`，并且响应页面会返回到浏览器。
- en: See also
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *A primer on cURL* recipe in this chapter explains the `curl` command
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*cURL入门*食谱解释了`curl`命令。
- en: The  *Downloading from a web page *recipe in this chapter explains the `wget`
    command
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*从网页下载*食谱解释了`wget`命令。
- en: Downloading a video from the Internet
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从互联网下载视频
- en: There are many reasons for downloading a video. If you are on a metered service,
    you might want to download videos during off-hours when the rates are cheaper.
    You might want to watch videos where the bandwidth doesn't support streaming,
    or you might just want to make certain that you always have that video of cute
    cats to show your friends.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 下载视频有很多原因。如果你使用的是按流量计费的服务，你可能想在非高峰时段下载视频，那时候费用较便宜。你可能想在带宽不足以支持流媒体播放的情况下观看视频，或者你只是想确保总能拥有那段可爱猫咪的视频给朋友们展示。
- en: Getting ready
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: One program for downloading videos is `youtube-dl`. This is not included in
    most distributions and the repositories may not be up-to-date, so it's best to
    go to the `youtube-dl` main site at [http://yt-dl.org](http://yt-dl.org).
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于下载视频的程序是`youtube-dl`。它并不包含在大多数发行版中，且软件库可能没有更新，所以最好访问`youtube-dl`的官方网站[http://yt-dl.org](http://yt-dl.org)。
- en: You'll find links and information on that page for downloading and installing
    `youtube-dl`.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在该页面上找到下载和安装`youtube-dl`的链接和信息。
- en: How to do it...
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Using `youtube-dl` is easy. Open your browser and find a video you like. Then
    copy/paste that URL to the `youtube-dl` command line:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`youtube-dl`很简单。打开浏览器，找到你喜欢的视频。然后复制/粘贴那个网址到`youtube-dl`命令行中：
- en: '[PRE71]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: While `youtube-dl` is downloading the file it will generate a status line on
    your terminal.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 当`youtube-dl`正在下载文件时，它会在你的终端上生成一个状态行。
- en: How it works...
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `youtube-dl` program works by sending a `GET` message to the server, just
    as a browser would do. It masquerades as a browser so that YouTube or other video
    providers will download a video as if the device were streaming.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`youtube-dl`程序通过向服务器发送`GET`消息来工作，就像浏览器那样。它伪装成浏览器，以便YouTube或其他视频提供商下载视频，就好像设备正在进行流媒体播放。'
- en: The `-list-formats` (`-F`) option will list the available formats a video is
    available in, and the `-format` (`-f`) option will specify which format to download.
    This is useful if you want to download a higher-resolution video than your Internet
    connection can reliably stream.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`-list-formats`（`-F`）选项会列出视频可用的格式，而`-format`（`-f`）选项会指定下载的格式。如果你想下载一个比你的网络连接可以稳定播放的更高分辨率的视频，这个选项很有用。'
- en: Summarizing text with OTS
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OTS总结文本
- en: The **Open Text Summarizer** (**OTS**) is an application that removes the fluff
    from a piece of text to create a succinct summary.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放文本摘要器**（**OTS**）是一个应用程序，可以去除文本中的冗余内容，创建一个简明的摘要。'
- en: Getting ready
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The `ots` package is not part of most Linux standard distributions, but it
    can be installed with the following command:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`ots`包不是大多数Linux标准发行版的一部分，但可以通过以下命令安装：'
- en: '[PRE72]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: How to do it...
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The `OTS` application is easy to use. It reads text from a file or from `stdin`
    and generates the summary to `stdout`.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`OTS` 应用程序使用起来非常简单。它可以从文件或 `stdin` 中读取文本，并将生成的摘要输出到 `stdout`。'
- en: '[PRE73]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Or
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE74]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The `OTS` application can also be used with `curl` to summarize information
    from websites. For example, you can use `ots` to summarize longwinded blogs:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`OTS` 应用程序也可以与 `curl` 一起使用，来总结网站上的信息。例如，你可以使用 `ots` 来总结冗长的博客：'
- en: '[PRE75]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: How it works...
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `curl` command retrieves the page from a blog site and passes the page to
    `sed`. The `sed` command uses a regular expression to replace all the HTML tags,
    a string that starts with a less-than symbol and ends with a greater-than symbol,
    with a blank. The stripped text is passed to `ots`, which generates a summary
    that's displayed by less.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl` 命令从博客站点获取页面并将页面传递给 `sed`。`sed` 命令使用正则表达式将所有 HTML 标签（即以小于符号开头，以大于符号结尾的字符串）替换为空白。去除标签后的文本会传递给
    `ots`，生成的摘要会通过 `less` 显示。'
- en: Translating text from the command line
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令行翻译文本
- en: Google provides an online translation service you can access via your browser.
    Andrei Neculau created an **awk** script that will access that service and do
    translations from the command line.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: Google 提供了一个在线翻译服务，你可以通过浏览器访问。Andrei Neculau 创建了一个 **awk** 脚本，能够访问该服务并从命令行进行翻译。
- en: Getting ready
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The command line translator is not included on most Linux distributions, but
    it can be installed directly from Git like this:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 发行版没有包含命令行翻译工具，但你可以通过以下方式从 Git 安装它：
- en: '[PRE76]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: How to do it...
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The `trans` application will translate into the language in your locale environment
    variable by default.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`trans` 应用程序默认会根据你的本地环境变量翻译成该语言。'
- en: '[PRE77]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'You can control the language being translated from and to with an option before
    the text. The format for the option is as follows:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在文本之前添加一个选项来控制翻译的语言。选项的格式如下：
- en: '[PRE78]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'To translate from English to French, use the following command:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 要将英文翻译成法语，请使用以下命令：
- en: '[PRE79]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: How it works...
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `trans` program is about 5,000 lines of awk code that uses `curl` to communicate
    with the Google, Bing, and Yandex translation services.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`trans` 程序大约有 5,000 行 awk 代码，它使用 `curl` 与 Google、Bing 和 Yandex 翻译服务进行通信。'

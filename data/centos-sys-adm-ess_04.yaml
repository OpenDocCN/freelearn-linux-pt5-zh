- en: Chapter 4. YUM – Software Never Looked So Good
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章 YUM – 软件如此美妙
- en: 'It is now time to encompass all that is good with the **Yellowdog Updater Modified**
    (**YUM**) software repository system, and the array of tools that we can use to
    make this work for us. YUM provides the power house behind the **Red Hat Package
    Manager** (**RPM**) software package. Without YUM, you, the administrator, will
    have to locate the RPM file to install and all of the dependency RPMs; YUM, on
    the other hand, will do this for you. You will learn valuable lesser known options,
    create your own RPM files, and add them to your own local repositories. In this
    chapter, we will go through the following sections:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候全面了解 **Yellowdog Updater Modified**（**YUM**）软件仓库系统，以及我们可以使用的各种工具来使其为我们服务。YUM
    提供了 **Red Hat 包管理器**（**RPM**）软件包背后的强大动力。没有 YUM，你作为管理员需要自己找到 RPM 文件进行安装，并且所有的依赖
    RPM 也需要手动处理；而 YUM 会为你做这一切。你将学习到有价值的、不为人知的选项，创建你自己的 RPM 文件，并将其添加到本地仓库中。在本章中，我们将涵盖以下内容：
- en: '**Managing software installation with RPM files**: We will review the basics
    of the RPM package management.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 RPM 文件管理软件安装**：我们将回顾 RPM 包管理的基础知识。'
- en: '**Creating your own RPM file**: You will learn how to create an RPM file, learning
    more in the process of how software installation works with RPMs.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建你自己的 RPM 文件**：你将学习如何创建一个 RPM 文件，在此过程中了解 RPM 软件安装的工作原理。'
- en: '**Using YUM**: We will discover the power of YUM and learn the skills needed
    to help us make the best use of our system and network.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 YUM**：我们将发现 YUM 的强大，并学习所需的技能，以帮助我们更好地利用系统和网络。'
- en: '**YUM plugins**: We take an overview of YUM plugins and the extensions that
    can be added to this system.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YUM 插件**：我们将概述 YUM 插件及可以添加到此系统的扩展功能。'
- en: '**Creating a YUM repository**: We will create our own repository using both
    standard software from CentOS and our own custom RPM. Having our own repository
    means that the installation source is a part of our system and we do not need
    to rely on external connections to install the software. We could also choose
    to share this with other hosts on our network to increase the benefits of our
    own repositories.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建 YUM 仓库**：我们将使用 CentOS 的标准软件和我们自己的自定义 RPM 创建自己的仓库。拥有自己的仓库意味着安装源是我们系统的一部分，我们不需要依赖外部连接来安装软件。我们也可以选择与网络中的其他主机共享此仓库，从而增加我们自己仓库的好处。'
- en: Managing software installation with RPM files
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 RPM 文件管理软件安装
- en: An element of Linux administration that can provide almost a daily dose of entertainment
    is managing the life cycle of software on your CentOS desktops and servers; this
    includes installing, updating, and removing software that can take the form of
    programs, documentation, and drivers, as well as more or less anything that consists
    of one or more files within Linux. Installing software using RPM files is preferable
    to install scripts. With an RPM-based installation, we can always query the database
    for information regarding what is currently installed on the system. Software
    removal is simplified because we have an inventory of what was added by the package
    and will require removal. The big downside of RPM management is the *dependency
    nightmare* we can find ourselves in when we try to install an RPM file that requires
    other software. We may well be able to locate the required RPM but for certain,
    there will be more dependencies to trace when we try to install the first dependency
    package.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 管理中的一个元素，可以提供几乎每天的娱乐体验，就是管理你在 CentOS 桌面和服务器上的软件生命周期；这包括安装、更新和删除软件，软件的形式可以是程序、文档、驱动程序，或者任何在
    Linux 中由一个或多个文件组成的内容。使用 RPM 文件安装软件比使用安装脚本更为推荐。通过基于 RPM 的安装，我们始终可以查询数据库，获取当前系统上已安装软件的信息。软件删除变得更加简化，因为我们有一个软件包添加的清单，并且知道哪些内容需要被删除。RPM
    管理的一个大缺点是我们在安装需要其他软件的 RPM 文件时可能遇到的*依赖地狱*。我们可能能够找到所需的 RPM 文件，但在尝试安装第一个依赖包时，肯定会有更多的依赖关系需要追踪。
- en: 'A simple demonstration illustrating these issues would be to try and install
    the Foxit PDF reader; this is a lightweight alternative to the Adobe Reader. If
    we download the RPM file directly from the Foxit site [http://www.foxitsoftware.com/downloads/](http://www.foxitsoftware.com/downloads/),
    we can install, or try to install it on our CentOS desktop. The following command
    will almost certainly fail due to unmet dependencies:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的演示可以是尝试安装Foxit PDF阅读器；它是Adobe Reader的轻量级替代品。如果我们直接从Foxit网站下载RPM文件[http://www.foxitsoftware.com/downloads/](http://www.foxitsoftware.com/downloads/)，我们可以在CentOS桌面上安装或尝试安装它。由于缺少依赖项，下面的命令几乎肯定会失败：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can list the dependencies using the following command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令列出依赖项：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When I count the dependencies on my system, there are 32 dependencies to resolve
    directly from this RPM; other dependencies may show when we try to install these
    packages. This is going to take a long time to install using the `rpm` command
    alone. If we choose to use the following `yum` command to maintain the installation
    and are connected to repositories with the required dependency packages, we will
    find the whole process has just become a lot easier, and I can return to my golf!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我统计系统中的依赖项时，发现直接从这个RPM包中需要解决32个依赖项；安装这些包时可能还会出现其他依赖项。仅使用`rpm`命令安装将需要很长时间。如果我们选择使用以下`yum`命令来维护安装，并且连接到具有所需依赖包的仓库，我们会发现整个过程变得容易得多，我也可以回去打高尔夫了！
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Managing software installation with RPM files](img/5920OS_04_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![使用RPM文件管理软件安装](img/5920OS_04_01.jpg)'
- en: 'Reviewing some more of the basic RPM command-line syntaxes, we can list the
    following commonly used options:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一些常用的基本RPM命令行语法，我们可以列出以下常用选项：
- en: 'Install software from the RPM file: `rpm -i <example.rpm>`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从RPM文件安装软件：`rpm -i <example.rpm>`
- en: 'Uninstall RPM: `rpm -e <example>`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卸载RPM：`rpm -e <example>`
- en: 'Update the existing RPM or install if it is not installed. Additionally, display
    the progress as hash marks or percent: `rpm -Uvh <example.rpm>` or `rpm -Uv --percent
    <example.rpm>`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新现有的RPM或在未安装的情况下安装它。同时，显示进度为哈希标记或百分比：`rpm -Uvh <example.rpm>` 或 `rpm -Uv --percent
    <example.rpm>`
- en: 'List all the installed RPM-based software: `rpm -qa`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出所有已安装的基于RPM的软件：`rpm -qa`
- en: 'List the RPM to which a file belongs: `rpm -qf /etc/hosts`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出某个文件所属的RPM：`rpm -qf /etc/hosts`
- en: 'List all files from an installed package: `rpm -ql <example>`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出已安装包中的所有文件：`rpm -ql <example>`
- en: 'List all files from an RPM file: `rpm -qpl <example.rpm>`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出RPM文件中的所有文件：`rpm -qpl <example.rpm>`
- en: 'To view the version of RPM: `rpm --version`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看RPM版本：`rpm --version`
- en: If you need to locate the RPM database, you will be able to find it in the `/var/lib/rpm`
    directory.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要定位RPM数据库，它位于`/var/lib/rpm`目录下。
- en: 'You may have noticed that when referencing an installed package, the RPM name
    can be used alone, whereas when using the `rpm` command with an RPM file, the
    complete filename and extension has to be used. The filename is made up from the
    following components:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到，当引用已安装的包时，可以单独使用RPM名称，而在使用`rpm`命令与RPM文件时，必须使用完整的文件名和扩展名。文件名由以下组件组成：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For example, let''s look at the RPM file for the **Z shell** (**ZSH**) package.
    The filename is:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，来看一下**Z shell**（**ZSH**）包的RPM文件。文件名为：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Package name: `zsh`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包名称：`zsh`
- en: 'Version: `4.30.10`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本：`4.30.10`
- en: 'Release: `7-el6`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本：`7-el6`
- en: 'Architecture: `x86_64`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构：`x86_64`
- en: To verify this, query the package file using the `-i` or *information* option.
    In the following command, we use `-q` for query, `-p` for package, and the aforementioned
    `–i`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证这一点，可以使用`-i`或*信息*选项查询包文件。在下面的命令中，我们使用`-q`进行查询，`-p`表示包，前面提到的`–i`。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating your own RPM file
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你自己的RPM文件
- en: Even though I am advocating the use of YUM to manage software installations,
    we are still going to need RPM files. YUM is totally dependent on the underlying
    RPM files and infrastructure; the RPM file remains the software package that the
    `yum` command will install and these RPM files are instilled at the heart of the
    CentOS software management.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我提倡使用YUM来管理软件安装，但我们仍然需要RPM文件。YUM完全依赖于底层的RPM文件和基础设施；RPM文件仍然是`yum`命令安装的软件包，这些RPM文件是CentOS软件管理的核心部分。
- en: You might be able to cast your mind back to [Chapter 2](ch02.html "Chapter 2. Cold
    Starts"), *Cold Starts*, of this book when we were investigating Plymouth themes
    during the boot process; we are now going to create our own simple theme to brand
    our desktop or server with a corporate wallpaper during the system startup and
    shutdown. Once we have created the theme, the easiest way to install it across
    many systems is to distribute the theme as an RPM file. Later in this chapter,
    we will add the RPM to a YUM repository.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想起本书中的[第二章](ch02.html "第二章 冷启动")，*冷启动*，当时我们在引导过程中研究了Plymouth主题；现在我们将创建一个简单的主题，在系统启动和关机时为我们的桌面或服务器添加公司品牌的壁纸。创建主题后，将其作为RPM文件分发到多个系统是最简单的安装方式。本章稍后我们将把RPM添加到YUM仓库中。
- en: Creating the Plymouth theme
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Plymouth主题
- en: Firstly, we must create the theme, and with that completed, we shall be able
    to package it as an RPM file. Our theme will have three files contained within
    one directory. The directory needs to be added, along with the three files that
    it will house, into the `themes` folder of the target CentOS system, `/usr/share/plymouth/themes`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须创建主题，完成后，我们可以将其打包为RPM文件。我们的主题将包含三个文件，这些文件将位于一个目录内。该目录需要与它包含的三个文件一起添加到目标CentOS系统的`/usr/share/plymouth/themes`中的`themes`文件夹。
- en: 'The top-level directory that contains the three files for the theme is normally
    named after the theme to which it belongs. We are creating the `tup` directory
    to represent our theme as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 包含主题三个文件的顶级目录通常会以它所属的主题命名。我们正在创建`tup`目录来表示我们的主题，如下所示：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The theme, **The Urban Penguin** (**tup**), will contain three files:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该主题，**The Urban Penguin**（**tup**），将包含三个文件：
- en: '`800.png`: This is the wallpaper that will be shown as the splash screen. This
    has to be a PNG file.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`800.png`：这是将在启动画面中显示的壁纸。它必须是一个PNG文件。'
- en: '`tup.plymouth`: This is the master theme file that contains the theme manifest.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tup.plymouth`：这是包含主题清单的主主题文件。'
- en: '`tup.script`: This is the action that the theme will run. This is the simplest
    form of a script-based theme, so we need this instruction file.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tup.script`：这是主题将运行的操作。这是最简单的基于脚本的主题形式，因此我们需要这个指令文件。'
- en: tup.plymouth
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tup.plymouth
- en: The `tup.plymouth` text file is the main theme file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`tup.plymouth`文本文件是主要的主题文件。'
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As we can see in the preceding example, `ModuleName` being set to `script` means
    that we will need to ensure that we have the RPM `plymouth-plugin-script` listed
    as a dependency for our own RPM. We will build this into the RPM using the required
    directive during the build.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的示例中看到的，`ModuleName`设置为`script`意味着我们需要确保在自己的RPM中列出RPM `plymouth-plugin-script`作为依赖项。在构建过程中，我们将使用所需的指令将其构建到RPM中。
- en: tup.script
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tup.script
- en: 'The Plymouth script module will execute the `tup.script` file when the theme
    is running. The script that we create will just have one sprite. A sprite places
    elements on the boot splash, or the wallpaper that is seen during the system startup
    and shutdown. The wallpaper will scale to the size of the screen and take care
    to include the semicolons at the end of each line. The image used here is the
    `800.png` file but you can use any PNG file that you add to the `theme` folder.
    Consider the following as a sample script:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Plymouth脚本模块将在主题运行时执行`tup.script`文件。我们创建的脚本将只有一个精灵。精灵会将元素放置到启动画面或在系统启动和关机时看到的壁纸上。壁纸将根据屏幕的大小进行缩放，并确保每一行的末尾包括分号。这里使用的图片是`800.png`文件，但你可以使用任何添加到`theme`文件夹中的PNG文件。以下是一个示例脚本：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating the theme RPM
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主题RPM
- en: 'To build the RPM, we will work as a standard user, either through your own
    account or an account that is reserved specifically to build RPMs (if creating
    the account, just add the new account with standard privileges as a local or network
    account). Initially, we will need root privileges, though, to install the required
    packages for the build environment:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建RPM，我们将作为标准用户工作，可以通过你自己的账户或专门用于构建RPM的账户（如果创建该账户，只需添加具有标准权限的本地或网络账户）。不过，最初我们需要root权限来安装构建环境所需的包：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The previous command will install the tools that we will use to create the
    RPM. Using YUM, we will need to be able to connect to a repository that holds
    the software, but we do not need to be concerned with the location. With this
    in place, we can revert to the account that we will use to package the RPM. When
    logged in, we must make sure that we are in our home directory where we will create
    the top-level directories as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将安装我们用来创建RPM的工具。通过YUM，我们需要能够连接到一个包含软件的仓库，但无需关心仓库的位置。设置好这些后，我们可以切换到用于打包RPM的账户。登录后，我们必须确保自己在主目录中，在那里我们将创建顶级目录，如下所示：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will create a `rpmbuild` directory with five subdirectories, which can
    be seen in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`rpmbuild`的目录，其中包含五个子目录，可以在下图中看到：
- en: '![Creating the theme RPM](img/5920OS_04_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![创建主题RPM](img/5920OS_04_02.jpg)'
- en: These directories become the working directories when building the RPM.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些目录在构建RPM时成为工作目录。
- en: 'To begin, we will create the directory structure that we require below the
    `SOURCES` directory:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在`SOURCES`目录下创建我们需要的目录结构：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The top-level folder that we create is based on the name and version number
    that will represent the final RPM. The name will be `plymouth-theme-tup` and the
    version will be `1`. The following directories represent the structure in the
    target filesystem; we need to target the `/usr/share/plymouth/themes/tup` directory.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的顶级文件夹基于将表示最终RPM的名称和版本号。名称将是`plymouth-theme-tup`，版本将是`1`。以下目录代表目标文件系统中的结构；我们需要将目标指向`/usr/share/plymouth/themes/tup`目录。
- en: 'With the directory in place, we can now copy the three files that constitute
    the theme into the newly created directory:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录设置好后，我们现在可以将构成主题的三个文件复制到新创建的目录中：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we need to create a gzipped archive of the folder structure; Within the
    `~/rpmbuild/SOURCES/` directory, we can run the following command to create the
    archive:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个包含文件夹结构的gzipped压缩包；在`~/rpmbuild/SOURCES/`目录下，我们可以运行以下命令来创建压缩包：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The final stage before the build stage is to create the instruction or specs
    file. We can create this within the `~/rpmbuild/SPECS/` directory using our preferred
    text editor. We will call the `~/rpmbuild/SPECS/tuptheme.spec` file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 构建阶段之前的最后一步是创建指令或规格文件。我们可以使用自己喜欢的文本编辑器在`~/rpmbuild/SPECS/`目录中创建此文件。我们将命名为`~/rpmbuild/SPECS/tuptheme.spec`文件：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The file may seem complex, but most of the settings are self-explanatory. What's
    more? This can be used as a template for any RPM that is delivering text files,
    scripts, documentation, or pretty much any content that does not need to be compiled.
    If there were source files written in C that needed to be compiled, we would need
    to add a `%build` section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件看起来可能很复杂，但大多数设置都很直观。更重要的是？这可以作为任何交付文本文件、脚本、文档或几乎任何不需要编译的内容的RPM的模板。如果有需要编译的C源文件，我们需要添加一个`%build`部分。
- en: For more information on the SPEC file, refer to the documentation that can be
    found at [http://www.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html](http://www.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有关SPEC文件的更多信息，请参阅可以在[http://www.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html](http://www.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html)找到的文档。
- en: Now let's build us an RPM!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来构建一个RPM！
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The RPM file will be created in the `~/rpmbuild/RPMS/noarch/` directory. We
    can view this from the output of the command tree, as seen in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: RPM文件将被创建在`~/rpmbuild/RPMS/noarch/`目录中。我们可以通过命令树的输出查看这个结构，如下图所示：
- en: '![Creating the theme RPM](img/5920OS_04_03.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![创建主题RPM](img/5920OS_04_03.jpg)'
- en: 'We can verify that the files have been added correctly to the RPM. These are
    the three files that we need for the theme that we looked at earlier in the chapter
    and referenced within the `%files` section of the SPEC file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以验证这些文件是否已正确添加到RPM中。这些文件是我们在本章早些时候查看过的主题，并且在SPEC文件的`%files`部分中进行了引用：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We should also verify the dependency that we added to the SPEC file using the
    `Requires` directive:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该验证通过`Requires`指令添加到SPEC文件中的依赖项：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The RPM cannot be installed now without the script plugin being present. If
    installed via YUM, then the dependency will automatically be resolved and installed
    as required.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有脚本插件，RPM现在无法安装。如果通过YUM安装，则依赖项会自动解析并根据需要安装。
- en: Using YUM
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用YUM
- en: As we have already seen with the Foxit PDF reader, the management of the RPM
    dependency requirements is greatly simplified by using YUM; almost certainly the
    ongoing software management of your CentOS will be based on YUM in the same way
    that **Advanced Packaging Tool** (**APT**) is used on Debian-based systems.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，使用 YUM 管理 RPM 依赖关系要求大大简化了软件管理；几乎可以肯定，CentOS 的软件管理将像 **高级打包工具** (**APT**)
    在基于 Debian 的系统中的作用一样，依赖于 YUM。
- en: To install software with YUM, you do not need to know the filesystem path or
    even where the RPM file is. The required packages are located within software
    repositories, the location of which is configured within `/etc/yum.repos.d/` directory.
    Any file created in this directory should have the `.repo` extension.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 YUM 安装软件时，不需要知道文件系统路径，甚至不需要知道 RPM 文件的位置。所需的软件包位于软件仓库中，仓库位置配置在 `/etc/yum.repos.d/`
    目录下。该目录中创建的任何文件都应具有 `.repo` 扩展名。
- en: 'On a standard build, these files will be directed to Internet-based software
    repositories; however, you can configure repositories locally on your own network,
    filesystem, or CD-ROM. This will be discussed later. For now, we will concentrate
    on the YUM commands:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准构建中，这些文件将被指向基于互联网的软件仓库；然而，你可以在自己的网络、文件系统或 CD-ROM 上配置本地仓库。稍后我们会讨论这一点。现在，我们将专注于
    YUM 命令：
- en: '`yum install nmap`: Install the `nmap` package from a repository. We know this
    will be from a repository rather than a local file. For a local file, include
    the full filename and the `.rpm` extension and, if required, the path to the file.
    Earlier in this section, we saw how we could install the Foxit PDF reader RPM
    using YUM.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yum install nmap`：从仓库中安装 `nmap` 包。我们知道这是从仓库而非本地文件中安装的。对于本地文件，需包括完整的文件名及 `.rpm`
    扩展名，若需要，路径也应包括。在本节前面，我们已经看过如何使用 YUM 安装 Foxit PDF 阅读器的 RPM。'
- en: '`yum list nmap`: This will show the package and if it is installed or available.
    The output will also list the repository from which it was installed or is available
    from.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yum list nmap`：这将显示包的信息，以及它是否已安装或可用。输出中还将列出安装该包或可用包的仓库。'
- en: '`yum list installed`: This will list all the installed.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yum list installed`：这将列出所有已安装的软件包。'
- en: '`yum check-update`: This will show the available updates.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yum check-update`：这将显示可用的更新。'
- en: '`yum update nmap`: This will update just `nmap` if an update is available.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yum update nmap`：如果有更新可用，这将仅更新 `nmap`。'
- en: '`yum update`: This will update all the software on your system.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yum update`：这将更新系统中的所有软件。'
- en: '`yum remove nmap`: This will uninstall the `nmap` package.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yum remove nmap`：这将卸载 `nmap` 包。'
- en: YUM plugins
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YUM 插件
- en: Although YUM is one of the most used packaging systems, many users and administrators
    are not aware of the functionality that is available with the addition of plugins.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 YUM 是最常用的打包系统之一，许多用户和管理员并未意识到通过插件扩展可以使用更多的功能。
- en: Using CentOS, and reading this book, you will now be very familiar with using
    the `yum` command to install packages and update your system. We have already
    seen how much we extend the RPM system with YUM, but that is no reason to ignore
    how much more is available.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CentOS，并阅读本书后，你将非常熟悉使用 `yum` 命令来安装包和更新系统。我们已经看到如何通过 YUM 扩展 RPM 系统，但这并不意味着我们可以忽略其他更多的功能。
- en: 'Plugins are Python scripts or programs that extend the features that YUM offers.
    You will find the plugins located in `/usr/lib/yum-plugins`, and you will find
    that their configuration files reside under `/etc/yum/pluginconf.d/`. To be able
    to use any plugin, the plugins directive must be enabled in the YUM configuration
    file, `/etc/yum.conf`, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是扩展 YUM 功能的 Python 脚本或程序。你可以在 `/usr/lib/yum-plugins` 中找到插件，而其配置文件位于 `/etc/yum/pluginconf.d/`
    下。要使用任何插件，必须在 YUM 配置文件 `/etc/yum.conf` 中启用插件指令，如下所示：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To search for the available plugins, we can use the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要搜索可用的插件，可以使用以下命令：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: On a standard build, CentOS will include the fastest mirror plugin, among others.
    This plugin performs very much as you may think, locating the fastest mirror repository
    in the time you download the packages. If enabled, this plugin is evoked automatically
    with the use of the `yum` command.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准构建中，CentOS 会包含最快镜像插件等。这款插件的作用正如你所想，它会在下载包时自动寻找最快的镜像仓库。如果启用此插件，它会在使用 `yum`
    命令时自动调用。
- en: 'If you need to disable an individual plugin, rather than all plugins, then
    you will need to ensure that the enabled directive within the plugins'' configuration
    file is set to `0`. For example, to disable the fastest mirror plugin, you will
    need to edit the `/etc/yum/pluginconf.d/fastestmirror.conf` file and configure
    the enabled line to read as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只需要禁用单个插件，而不是所有插件，那么你需要确保在插件的配置文件中，`enabled` 指令被设置为 `0`。例如，要禁用最快镜像插件，你需要编辑
    `/etc/yum/pluginconf.d/fastestmirror.conf` 文件，并将 `enabled` 行配置如下：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The fastest mirror plugin is disabled. To enable the plugin, the settings should
    read as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最快镜像插件已被禁用。要启用该插件，设置应如下所示：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Another command plugin that is often installed is the `security` plugin. This
    is designed to be used in conjunction with the `yum` update commands:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常安装的命令插件是 `security` 插件。它旨在与 `yum` 更新命令配合使用：
- en: '`yum --security check-update #List only security updates`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yum --security check-update #仅列出安全更新`'
- en: '`yum --security update #Install security updates only`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yum --security update #仅安装安全更新`'
- en: Creating a YUM Repository
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 YUM 仓库
- en: The reasons to create a YUM repository are many. You can imagine a situation
    where you have more than one server on your network. It would make sense that
    the software is retrieved locally, rather than having all servers cross the WAN
    to access packages. The same reasoning scales to where CentOS desktops are common
    place. Centralizing software distribution is an absolute requirement, standardizing
    software being used and to ensure that your support team only has to support the
    single version of a package.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 YUM 仓库的理由有很多。你可以想象一种情况，假设你的网络中有多个服务器。在这种情况下，本地获取软件会比让所有服务器都通过 WAN 访问包更有意义。同样的理由适用于
    CentOS 桌面系统普及的环境。集中化软件分发是绝对必要的，它可以标准化所使用的软件，并确保你的支持团队只需要支持软件包的单一版本。
- en: Building a local repository in a virtual machine that is just used for testing
    and development also makes great sense, removing the need to be connected to the
    network to install software packages. I ensure my classroom virtual machines always
    have a local file-based repository so that the system can be used as a discrete
    identity without relying on networking or external components.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个仅用于测试和开发的虚拟机上建立本地仓库也非常有意义，这样就不需要依赖网络来安装软件包。我确保我的课堂虚拟机始终拥有一个本地文件系统仓库，这样系统就可以作为一个独立身份使用，而不依赖于网络或外部组件。
- en: '![Creating a YUM Repository](img/5920OS_04_04.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![创建 YUM 仓库](img/5920OS_04_04.jpg)'
- en: 'For this little foray, we shall create a local repository using the RPMs from
    the product DVD and we will use the command-line tool `/usr/bin/yumdownloader`
    in order to add additional required RPMs as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个小实验中，我们将使用产品 DVD 中的 RPM 文件创建一个本地仓库，并使用命令行工具 `/usr/bin/yumdownloader` 来添加以下所需的额外
    RPM 文件：
- en: 'Firstly, we will create a local directory to act as our local repository; to
    keep this simple, we just create a directory at the root of the filesystem and
    add RPMs directly into this folder:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个本地目录作为本地仓库；为了简化操作，我们只需在文件系统的根目录下创建一个目录，并将 RPM 文件直接放入该文件夹：
- en: '[PRE22]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With the product DVD mounted, we can populate the directory with the RPMs from
    the DVD:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在产品 DVD 被挂载后，我们可以将 DVD 中的 RPM 文件填充到该目录中：
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can add in the RPM what we created for the Plymouth theme earlier in this
    chapter:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以添加本章前面为 Plymouth 主题创建的 RPM 文件：
- en: '[PRE24]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With the network connectivity, we will download, not install, additional RPMS
    that are not on the DVD, which we require in our repository. The easiest way to
    achieve this is with the `yumdownloader` command:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在有网络连接的情况下，我们将下载（而不是安装）那些不在 DVD 上的额外 RPM 文件，这些文件是我们仓库所需要的。实现这一目标的最简单方法是使用 `yumdownloader`
    命令：
- en: '[PRE25]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `--resolve` option will ensure that dependency packages are also downloaded.
    By default, they are downloaded to the current directory, so take care to move
    them into the `/repo` directory first:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--resolve` 选项将确保依赖包也被下载。默认情况下，它们会被下载到当前目录，因此请注意先将它们移入 `/repo` 目录：'
- en: 'We need to install the `createrepo` package:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要安装 `createrepo` 包：
- en: '[PRE26]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We are now ready to create the repository metadata that makes the file directory
    a repository:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们准备好创建仓库元数据，将文件目录转变为仓库：
- en: '[PRE27]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We have now been able to create a local repository; this will not be used until
    it is referenced by the YUM client. This will be achieved by the creation of a
    file with an extension of `.repo` within the `/etc/yum.repos.d/` directory. For
    now, we can bask in the success of our creation. The real importance here is to
    take away the knowledge gained from using `yumdownloader` and the power that it
    brings to the repository creation being able to combine selected packages from
    multiple sources into the custom repository for you and your clients.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经能够创建本地仓库；在YUM客户端引用之前，该仓库不会被使用。这是通过在`/etc/yum.repos.d/`目录下创建一个扩展名为`.repo`的文件来实现的。现在，我们可以陶醉于我们创建的成功。这里的真正重要性在于通过使用`yumdownloader`获得的知识，以及它为仓库创建带来的力量，它可以将多个来源的选定软件包结合到自定义仓库中，供您和您的客户使用。
- en: /etc/yum.repos.d/
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: /etc/yum.repos.d/
- en: 'Client systems need to be told about the location of their software sources
    or repositories and this is via the use of the `.repo` files. Although it is possible
    to define all of your repositories within the single file, `/etc/yum.conf`, it
    is more reasonable to add them as separate files in the directory as is detailed
    from the following excerpt from `yum.conf`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端系统需要告知它们的软件源或仓库的位置，这通过使用`.repo`文件来实现。虽然可以在单一文件`/etc/yum.conf`中定义所有仓库，但更合理的做法是将它们作为单独的文件添加到目录中，正如下面`yum.conf`文件中的摘录所示：
- en: '![/etc/yum.repos.d/](img/5920OS_04_05.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![/etc/yum.repos.d/](img/5920OS_04_05.jpg)'
- en: 'The name of the file does not really matter, but the extension has to be `.repo`.
    We will create a file called `/etc/yum.repos.d/local.repo`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的名称其实并不重要，但扩展名必须是`.repo`。我们将创建一个名为`/etc/yum.repos.d/local.repo`的文件：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The square brackets define the short name of the repository, and the name directive
    is really more of a description. The `baseurl` directive uses three forward slashes:
    two for the method of access, the file protocol in this case, and then the filesystem
    path slash itself. We have disabled public key checking (`gpgcheck=0`), but we
    could additionally sign the repository metadata should we wish to. The repository
    is enabled.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 方括号定义了仓库的简短名称，name指令更像是描述。`baseurl`指令使用了三个正斜杠：两个用于访问方法，此处为文件协议，第三个则是文件系统路径的斜杠。我们已经禁用了公钥检查（`gpgcheck=0`），但如果愿意，我们还可以为仓库元数据签名。该仓库已启用。
- en: If this is the only repository that we would like to use, then we can move the
    existing repository files to a backup directory; this is probably easier than
    disabling the repositories by adding the `enabled=0` directive to each repository.
    Often, there is more than one repository defined per file, so the task is not
    simple. As I say, the easiest way is to move them to another directory and then
    add them back, should you later need access to the external repositories.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是我们想要使用的唯一仓库，那么我们可以将现有的仓库文件移动到备份目录；这可能比通过为每个仓库添加`enabled=0`指令来禁用仓库更容易。通常，每个文件定义了多个仓库，因此任务并不简单。正如我所说，最简单的方法是将它们移动到另一个目录，然后在以后需要访问外部仓库时再将其添加回来。
- en: Having now defined the local repository within the `/etc/yum.repos.d/local.repo`
    file, we now effectively have access from YUM to all the RPMs that we have added
    to our own directory. Should we need to share this across a network to the other
    hosts on our internal network, it is a simple matter of adding a web server to
    provide access to the repository. Clients will then use `http:// protocol` as
    the method of access.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经在`/etc/yum.repos.d/local.repo`文件中定义了本地仓库，我们现在可以通过YUM访问我们自己目录中添加的所有RPM。如果我们需要通过网络将其共享给内部网络中的其他主机，只需添加一个Web服务器来提供仓库访问即可。客户端将使用`http://`协议作为访问方法。
- en: '[Chapter 8](ch08.html "Chapter 8. Nginx – Deploying a Performance-centric Web
    Server"), *Nginx – Deploying a Performance-centric Web Server*, will see us perusing
    the NGINX web server, and among other things we will learn how to direct a web
    server **Universal Resource Identifier** (**URI**) to this repository.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html "第8章. Nginx – 部署以性能为中心的Web服务器")，*Nginx – 部署以性能为中心的Web服务器*，我们将学习NGINX
    web服务器，除了其他内容外，我们还将学习如何将**通用资源标识符**（**URI**）定向到这个仓库。'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Congratulations! You have passed another milestone in reaching the end of this
    chapter and coming one step closer to the temple that is reserved for the most
    elite of administrators. We will now embark on a retrospective tour of this chapter
    in which we have gained some inside knowledge enabling us to manage software on
    our systems a little more effectively. Beginning with raw RPM files, we were able
    to see the strength in the management and inventory benefits that they provide,
    but the annoyance is in having to locate their dependencies. Liking the idea of
    RPMs, we ventured out to create our own RPM file to distribute and install a Plymouth
    theme; a theme that we have created to help brand our systems and reinforce our
    identity.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！你已经成功迈过了本章的另一个里程碑，离成为最精英管理员专属的圣殿又近了一步。接下来，我们将回顾本章的内容，通过这次回顾，我们获得了宝贵的经验，使我们能够更有效地管理系统上的软件。从原始的
    RPM 文件开始，我们能够看到它们在管理和库存方面的强大优势，但烦恼在于必须定位它们的依赖关系。喜欢 RPM 的概念后，我们开始着手创建自己的 RPM 文件，用于分发和安装
    Plymouth 主题；这是我们为了塑造系统品牌并强化身份而创作的主题。
- en: It was not long before that we then became more familiar with the YUM repository
    management system, which allows us to make the best use of the RPM inventory system
    but combining it with the ability to automatically resolve dependencies. This
    chapter culminated with the creation of our own local repository creating a standalone
    system being able to install software independent of any network connectivity.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 不久之后，我们便更加熟悉了 YUM 仓库管理系统，该系统让我们可以充分利用 RPM 库系统，并结合自动解析依赖项的功能。本章的高潮是创建我们自己的本地仓库，构建一个能够在没有任何网络连接的情况下安装软件的独立系统。
- en: In the next chapter, we will gain valuable skills to maintain service and process
    management on the CentOS 6.5 system. We will ensure understanding of the legacy
    System V services scripts as well as the new upstart system for service control.
    In addition, we will investigate tools that allow us to effectively manage processes
    running on the CentOS host.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将获得宝贵的技能，用于维护 CentOS 6.5 系统上的服务和进程管理。我们将确保理解传统的 System V 服务脚本，以及新的 upstart
    系统用于服务控制。此外，我们还将研究能够有效管理 CentOS 主机上运行的进程的工具。

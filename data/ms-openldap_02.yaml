- en: Chapter 2. Installation and Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章 安装与配置
- en: 'In this chapter we will walk through the process of installing and configuring
    the OpenLDAP suite of tools. Here we will only cover basic configuration of the
    SLAPD server. This will serve as a base for subsequent chapters (particularly
    Chapters 4 to 7), where we will explore advanced configuration options. The specific
    topics that we will cover include:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将逐步演示安装和配置 OpenLDAP 工具套件的过程。这里我们只涵盖 SLAPD 服务器的基本配置。这将为后续章节（特别是第 4 至第
    7 章）打下基础，在那些章节中我们将探讨更高级的配置选项。我们将涉及的具体内容包括：
- en: Installing binary OpenLDAP packages
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装二进制的 OpenLDAP 包
- en: Configuring the LDAP server with the `slapd.conf` file
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `slapd.conf` 文件配置 LDAP 服务器
- en: Verifying the `slapd.conf` configuration with `slaptest`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `slaptest` 验证 `slapd.conf` 配置
- en: Starting and stopping the server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动和停止服务器
- en: Configuring client tools with the `ldap.conf` file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ldap.conf` 文件配置客户端工具
- en: Fetching the root DSE entry from the directory with `ldapsearch`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ldapsearch` 从目录中获取根 DSE 条目
- en: Before Getting Started
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始之前
- en: 'OpenLDAP is maintained by the OpenLDAP Foundation. The foundation maintains
    a suite of tools that we will call as OpenLDAP suite. As we saw in Chapter 1,
    the OpenLDAP suite includes the following classes of tools:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: OpenLDAP 由 OpenLDAP 基金会维护。该基金会维护一套工具，我们称之为 OpenLDAP 工具套件。正如我们在第 1 章中所见，OpenLDAP
    工具套件包括以下几类工具：
- en: Daemons (`slapd` and `slurpd`)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 守护进程（`slapd` 和 `slurpd`）
- en: Libraries (notably `libldap`)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库文件（尤其是 `libldap`）
- en: Client applications (`ldapsearch`, `ldapadd`, `ldapmodify`, and others)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端应用程序（`ldapsearch`、`ldapadd`、`ldapmodify` 等）
- en: Supporting utilities (`slapcat`, `slapauth`, and others)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持工具（`slapcat`、`slapauth` 等）
- en: 'The official OpenLDAP source distribution includes all of these in one download.
    Various binary versions however, may break these out into sub-packages. Commonly
    the suite is split into three packages: *libraries*, *clients*, and *servers*.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 OpenLDAP 源代码发行版将这些工具打包成一个下载包。然而，某些二进制版本可能将其拆分为多个子包。通常，工具套件被拆分为三个包：*库文件*、*客户端*
    和 *服务器*。
- en: OpenLDAP compiles and runs on a wide variety of operating systems. However,
    the OpenLDAP project itself does not provide binary versions of their software.
    As a result, different vendors and operating system maintainers compile and provide
    their own binary versions. There are versions of OpenLDAP compiled for most UNIX
    variants (including Mac OS X), as well as versions for the Windows operating system.
    Some binary distributions even come with commercial support.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: OpenLDAP 可以在各种操作系统上编译和运行。然而，OpenLDAP 项目本身并不提供其软件的二进制版本。因此，不同的厂商和操作系统维护者会编译并提供他们自己的二进制版本。目前，已经为大多数
    UNIX 变种（包括 Mac OS X）编译了 OpenLDAP 版本，同时也有适用于 Windows 操作系统的版本。有些二进制发行版甚至提供商业支持。
- en: OpenLDAP Binaries for Operating Systems
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统的 OpenLDAP 二进制版本
- en: In this book, we will be using **Ubuntu Linux** as the operating system of choice.
    Ubuntu is a GNU/Linux distribution based on the venerable **Debian Project**.
    Like Debian (and the multitude of other Debian-based distributions) Ubuntu uses
    the Debian package format. Thus, if you are using another Debian-based distribution,
    the installation process should be largely familiar.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用 **Ubuntu Linux** 作为首选操作系统。Ubuntu 是一个基于著名的 **Debian Project** 的 GNU/Linux
    发行版。像 Debian（以及其他许多基于 Debian 的发行版）一样，Ubuntu 使用 Debian 包格式。因此，如果你使用的是另一种基于 Debian
    的发行版，安装过程应该会非常类似。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ubuntu is a user-friendly Linux distribution. You can learn more about Ubuntu
    at [http://www.ubuntu.com/](http://www.ubuntu.com/). To learn more about the Debian
    Project, on which Ubuntu is based, visit [http://debian.org/](http://debian.org/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 是一个用户友好的 Linux 发行版。你可以在 [http://www.ubuntu.com/](http://www.ubuntu.com/)
    上了解更多关于 Ubuntu 的信息。想了解更多关于 Ubuntu 所基于的 Debian 项目，可以访问 [http://debian.org/](http://debian.org/)。
- en: Almost every major Linux and BSD distribution includes official support for
    OpenLDAP. You may want to consult the documentation for your chosen distribution
    to find out more information on getting and installing OpenLDAP. In some cases,
    OpenLDAP is installed with the base operating system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个主要的 Linux 和 BSD 发行版都提供 OpenLDAP 的官方支持。你可能需要查阅你所选择的发行版的文档，以了解如何获取和安装 OpenLDAP。在某些情况下，OpenLDAP
    会随基础操作系统一起安装。
- en: For Windows, Mac, and other variants of UNIX, the best way to find a list of
    available binary packages is by perusing the list of distributions maintained
    in the **OpenLDAP Faq-O-Matic** ([http://www.openldap.org/faq/data/cache/108.html](http://www.openldap.org/faq/data/cache/108.html)).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows、Mac 和其他 UNIX 变种，查找可用二进制包的最佳方法是浏览由 **OpenLDAP Faq-O-Matic** 维护的发行版列表（[http://www.openldap.org/faq/data/cache/108.html](http://www.openldap.org/faq/data/cache/108.html)）。
- en: Commercial OpenLDAP Distribution
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 商业版 OpenLDAP 发行版
- en: If you need a commercially supported OpenLDAP distribution, you may want to
    consider the offerings from **Symas**. Symas ([http://www.symas.com/](http://www.symas.com/))
    is owned and operated by many of the same folks who contribute to the OpenLDAP
    suite. They provide a commercial binary version of the OpenLDAP suite, distributed
    as **Connexitor Directory Services (CDS)**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一个有商业支持的 OpenLDAP 发行版，可以考虑 **Symas** 提供的版本。Symas（[http://www.symas.com/](http://www.symas.com/)）由许多与
    OpenLDAP 套件贡献者相同的人员拥有和运营。他们提供一个商业二进制版的 OpenLDAP 套件，名为 **Connexitor Directory Services
    (CDS)**。
- en: Several different CDS editions are available, with each edition tuned and optimized
    for specific organizational needs. Their *Platinum Edition*, for instance, is
    optimized for directories with more than 150 million records! Symas also provides
    LDAP training, maintenance and support services, and consulting.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个不同的 CDS 版本可供选择，每个版本都根据特定的组织需求进行了调优和优化。例如，它们的*铂金版*特别针对拥有超过 1.5 亿条记录的目录进行优化！Symas
    还提供 LDAP 培训、维护和支持服务以及咨询服务。
- en: Source Code Compilation
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 源代码编译
- en: Instead of installing a binary file, you may wish to simply compile the OpenLDAP
    source code yourself. This process is outlined in simple steps in [Appendix A](apa.html
    "Appendix A. Building OpenLDAP from Source") of this book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想安装二进制文件，可以选择自行编译 OpenLDAP 的源代码。这个过程在本书的[附录 A](apa.html "附录 A. 从源代码构建 OpenLDAP")中有简单的步骤说明。
- en: The primary advantage of building from source code is that you will benefit
    from many improvements long before these revisions are made available in mainstream
    packages. The focus of development on the stable branch of OpenLDAP is bug fixes.
    Thus, building from source generally improves OpenLDAP stability.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从源代码构建的主要优势在于，你可以在这些修订版本发布到主流软件包之前，就享受到许多改进。OpenLDAP 稳定分支的开发重点是修复 bug。因此，从源代码构建通常能提高
    OpenLDAP 的稳定性。
- en: A Quick Note on Versions
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于版本的简要说明
- en: Currently, the stable branch for OpenLDAP is *2.3 branch* (2.4 is in early beta).
    However, some Linux distributions still use the aging 2.2 version, originally
    released in 2003\. If the latest package for your chosen operating system is still
    in the 2.2 branch, you may want to consider looking for *unofficial* versions
    of 2.3 for your platform, or even compiling a custom binary (see [Appendix A](apa.html
    "Appendix A. Building OpenLDAP from Source")).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，OpenLDAP 的稳定分支是 *2.3 分支*（2.4 版本处于早期 beta 阶段）。然而，一些 Linux 发行版仍在使用 2003 年发布的老旧
    2.2 版本。如果你所选择的操作系统的最新软件包仍在 2.2 分支，你可能想要考虑寻找适用于你平台的 *非官方* 2.3 版本，或者甚至编译一个自定义二进制文件（参见
    [附录 A](apa.html "附录 A. 从源代码构建 OpenLDAP")）。
- en: Installation
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: In this section, we will walk through the process of installing on a system
    running Ubuntu Linux 7.04\. Later, Ubuntu distributions will likely follow the
    same installation pattern.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将演示在运行 Ubuntu Linux 7.04 的系统上进行安装的过程。以后，Ubuntu 版本可能会遵循相同的安装模式。
- en: Dependencies
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖项
- en: 'The basic OpenLDAP configuration in Ubuntu requires a few extra libraries and
    packages. These are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 中的基本 OpenLDAP 配置需要一些额外的库和软件包。具体如下：
- en: 'The Berkeley Database (`bdb4`) version 4.2 (but *not* 4.3, which has stability
    issues): In the Ubuntu default configuration, OpenLDAP stores the directory inside
    a BDB database. The Berkeley Database is often simply called BDB.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Berkeley 数据库（`bdb4`）版本 4.2（但*不*包括 4.3 版本，因为它有稳定性问题）：在 Ubuntu 的默认配置中，OpenLDAP
    将目录存储在 BDB 数据库中。Berkeley 数据库通常简称为 BDB。
- en: 'The OpenSSL libraries: These provide SSL and TLS security. SSL and TLS provide
    encryption for network connections to the directory.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSSL 库：这些库提供 SSL 和 TLS 安全性。SSL 和 TLS 为网络连接到目录提供加密。
- en: 'The Cyrus SASL library: This provides support for secure SASL authentication.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cyrus SASL 库：该库提供对安全 SASL 身份验证的支持。
- en: 'The Perl programming language: This can provide custom back-end scripting.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perl 编程语言：它可以提供自定义的后端脚本。
- en: 'The iODBC database connectivity layer: OpenLDAP can store the directory in
    a relational database (RDBMS). The iODBC library is used to connect to the RDBMS.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iODBC 数据库连接层：OpenLDAP 可以将目录存储在关系型数据库（RDBMS）中。iODBC 库用于连接到 RDBMS。
- en: OpenLDAP also relies on some standard system library packages (such as `libc6`)
    that are installed on all UNIX/Linux distributions. In its default installation,
    Ubuntu includes BDB, OpenSSL, and Perl. Installation of other dependencies is
    handled automatically by the package manager, so don't worry about manually installing
    any of these.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: OpenLDAP 还依赖一些标准系统库包（例如 `libc6`），这些库包在所有 UNIX/Linux 发行版中都会安装。在默认安装中，Ubuntu 包括了
    BDB、OpenSSL 和 Perl。其他依赖项的安装会由包管理器自动处理，因此无需担心手动安装这些。
- en: Installing OpenLDAP
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 OpenLDAP
- en: Like many other distributions, Ubuntu breaks OpenLDAP up into small packages.
    The daemons (`slapd` and `slurpd`) are packaged in the `slapd` package. The clients
    are packaged in `ldap-utils`, and the libraries are packaged in `libldap-2.3-0`.
    When Ubuntu 7.04 was released, OpenLDAP version 2.3.30 was provided. As security
    fixes are made, Ubuntu may release newer versions via online updates. While legacy
    2.2.26 packages are still available, they should be avoided.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多其他发行版一样，Ubuntu 将 OpenLDAP 拆分成多个小包。守护进程（`slapd` 和 `slurpd`）包含在 `slapd` 包中。客户端包含在
    `ldap-utils` 中，库文件包含在 `libldap-2.3-0` 中。当 Ubuntu 7.04 发布时，提供的是 OpenLDAP 版本 2.3.30。随着安全修复的发布，Ubuntu
    可能会通过在线更新发布新版本。尽管旧版的 2.2.26 包仍然可用，但应该避免使用。
- en: To install Ubuntu we can use the **Synaptic** graphical installer or any of
    the command-line package management utilities. For the sake of simplicity, we
    will use **apt-get**. This will download all of the necessary packages (including
    dependencies) from the official Ubuntu repository and install them for us. Note
    that installing this way will require access to the Internet (or, alternatively,
    to some other form of Ubuntu distribution media, such as a CD-ROM). We need to
    run the following command.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Ubuntu，我们可以使用 **Synaptic** 图形化安装程序或任何命令行包管理工具。为了简化，我们将使用 **apt-get**。这将从官方
    Ubuntu 仓库下载所有必要的包（包括依赖项）并为我们安装。请注意，使用这种方式安装需要访问互联网（或者，使用其他形式的 Ubuntu 分发媒体，如 CD-ROM）。我们需要运行以下命令。
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It may take a little while for the packages to download and install.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下载和安装包可能需要一些时间。
- en: Once `apt-get` is done, the LDAP server and all of its clients should be installed.
    Next, we will begin the process of configuring the SLAPD server.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `apt-get` 完成，LDAP 服务器及其所有客户端应该就安装好了。接下来，我们将开始配置 SLAPD 服务器。
- en: Configuring the SLAPD Server
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 SLAPD 服务器
- en: 'There are two daemons that come packaged with OpenLDAP: SLAPD server and SLURPD
    server. **SLAPD**, sometimes called the **OpenLDAP server**, handles client requests
    and directory management, while **SLURPD** manages replicating changes to other
    directories. SLURPD is now deprecated in favor of a newer, more robust replication
    process, and will be removed from future versions of OpenLDAP.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: OpenLDAP 包含两个守护进程：SLAPD 服务器和 SLURPD 服务器。**SLAPD**，有时被称为 **OpenLDAP 服务器**，处理客户端请求和目录管理，而
    **SLURPD** 则管理将更改复制到其他目录。SLURPD 现在已经弃用，取而代之的是一种更新的、更强大的复制过程，并将在 OpenLDAP 的未来版本中移除。
- en: In the next chapter we will talk more about what these two daemons do. Right
    now we are only concerned with getting the SLAPD server up and running so we can
    start connecting to (and using) our directory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地讨论这两个守护进程的作用。现在我们只关心如何启动 SLAPD 服务器，以便能够开始连接到（并使用）我们的目录。
- en: SLAPD has one main configuration file and any number of auxiliary configuration
    files. In this section we are going to edit the main configuration file. It is
    called `slapd.conf`, and in Ubuntu's distribution it is located at `/etc/ldap/`
    (if you built from source, the default location is `/usr/local/etc/openldap/`).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: SLAPD 有一个主要配置文件和若干辅助配置文件。在本节中，我们将编辑主配置文件。这个文件叫做 `slapd.conf`，在 Ubuntu 的发行版中，它位于
    `/etc/ldap/`（如果你是从源码构建的，默认位置是 `/usr/local/etc/openldap/`）。
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Use find . `–type f –name slapd.conf` or if the `locate` service is enabled,
    you can use `locate slapd.conf`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `find . –type f –name slapd.conf` 或者如果启用了 `locate` 服务，可以使用 `locate slapd.conf`。
- en: 'While Ubuntu provides a good basic `slapd.conf` file that you can work with,
    if you choose, we will not use it. For our purpose, we will start with an empty
    file and create a `slapd.conf` configuration from scratch. You may want to make
    a backup copy of the original `slapd.conf` file before we begin. You can do this
    from a terminal by running:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Ubuntu提供了一个不错的基础`slapd.conf`文件供你使用，但如果你选择不使用它，我们将从头开始。为了我们的目的，我们将从一个空文件开始并创建一个`slapd.conf`配置文件。你可能希望在我们开始之前先备份原始的`slapd.conf`文件。可以通过在终端中运行以下命令来进行备份：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will rename the file from `slapd.conf` to `slapd.conf.orig`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把文件从`slapd.conf`重命名为`slapd.conf.orig`。
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: By default, Ubuntu does not activate the `root` account. Any time you want to
    perform a function as the superuser, you should use sudo. However, if you need
    to become `root` (to run, for instance, several commands in sequence), you can
    type `sudo su`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ubuntu不会激活`root`账户。每次需要以超级用户身份执行操作时，应该使用sudo。然而，如果需要成为`root`（例如，连续执行多个命令），可以输入`sudo
    su`。
- en: 'Now we are ready to create our new `slapd.conf` file. Open the text editor
    and create a basic `slapd.conf` file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好创建新的`slapd.conf`文件了。打开文本编辑器并创建一个基本的`slapd.conf`文件：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are three headings in the file (**Basics**, **Database Configuration**,
    and **ACLs**), and we will now see each heading in detail.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中有三个标题（**基础设置**、**数据库配置**和**ACLs**），接下来我们将详细查看每个标题。
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you built from source, the paths in the above file need to be adjusted (or,
    alternately, you can relocate files on your file system). Look in the `/usr/local`
    portion of your file system to locate the correct location (for example, `modulepath`
    is in `/usr/local/libexex/openldap/`).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是从源代码构建的，则需要调整上面文件中的路径（或者，您也可以重新定位文件系统上的文件）。请在文件系统的`/usr/local`部分查找正确的位置（例如，`modulepath`位于`/usr/local/libexex/openldap/`）。
- en: Basics
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础设置
- en: 'The first section of the configuration file, labeled *Basics*, contains a variety
    of configuration parameters:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件的第一部分，标记为*基础设置*，包含了各种配置参数：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First note that all lines that start with a hash (`#`) are treated as comments,
    and ignored by SLAPD.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，所有以井号（`#`）开头的行都被视为注释，并且会被SLAPD忽略。
- en: The first three functional (non-comment) lines all begin with the `include`
    directive. The `include` directive should always be followed by a full path to
    a file on the file system. When SLAPD finds the `include` directive it will attempt
    to load the indicated file. Those files will then be treated as part of the current
    configuration file. So, when SLAPD reads these three lines, it will try to load
    the three schema files (`core.schema`, `cosine.schema`, and `inetorgperson.schema`).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前三行功能性（非注释）行都以`include`指令开头。`include`指令后应始终跟随文件系统上文件的完整路径。当SLAPD遇到`include`指令时，它将尝试加载指定的文件。这些文件将作为当前配置文件的一部分进行处理。因此，当SLAPD读取这三行时，它将尝试加载三个架构文件（`core.schema`、`cosine.schema`和`inetorgperson.schema`）。
- en: The `include` directive can be used to load any configuration parameters (in
    the next chapter, we will use it to include a file that contains ACLs). Traditionally,
    the schema information is stored separately from other configuration directives,
    and loaded (using `include` directives) at server startup. This improves the readability
    of the code and helps prevent the accidental modification of the schema information.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`include`指令可用于加载任何配置参数（在下一章中，我们将使用它来包含包含ACL的文件）。传统上，架构信息是与其他配置指令分开存储的，并在服务器启动时加载（使用`include`指令）。这可以提高代码的可读性，并有助于防止意外修改架构信息。'
- en: Schemas
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 架构
- en: Schemas provide definitions of (amongst other things) the different object classes
    and attribute types that OpenLDAP should support. Using these, OpenLDAP can determine
    what entries it is allowed to store, whether any given entry is valid, and how
    entries should optimally be stored.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 架构提供了（除了其他内容）OpenLDAP应该支持的不同对象类和属性类型的定义。利用这些，OpenLDAP可以确定它允许存储哪些条目、任何给定的条目是否有效以及如何最佳存储条目。
- en: The three schemas loaded here contain the most frequently used options. `core.schema`
    contains all of the attribute and object class definitions from the LDAP v.3 specification.
    The `cosine.schema` and `inteorgperson.schema` files contain schema definitions
    for commonly used standardized extensions (see RFCs 4524 and 2798). There are
    a host of other schemas available with OpenLDAP, and we will look at some of those
    in Chapter 6.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里加载的三个模式包含了最常用的选项。`core.schema` 包含了 LDAP v.3 规范中的所有属性和对象类定义。`cosine.schema`
    和 `inteorgperson.schema` 文件包含了常用的标准化扩展的模式定义（参见 RFC 4524 和 2798）。OpenLDAP 还提供了许多其他模式，我们将在第六章中讨论其中的一些。
- en: More Directives
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多指令
- en: 'After the schemas are included the next two directives, `pidfile` and `argsfile`,
    tell SLAPD where to store (and look for) files that contain information on:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含模式后，接下来的两个指令，`pidfile` 和 `argsfile`，告诉 SLAPD 文件存储的位置（以及在哪里查找）包含以下信息的文件：
- en: The process ID for the SLAPD server process
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLAPD 服务器进程的进程 ID
- en: The arguments that were passed into the `slapd` command at startup
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动时传递给 `slapd` 命令的参数
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since SLAPD needs to write to these files, the user that runs `slapd` needs
    to have permissions to `read from` and `write to` these files. Since the files
    are removed when the SLAPD server shuts down, the user that runs `slapd` will
    also need write permissions on the directory where these files are stored (`/var/run/slapd/`,
    in this case).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 SLAPD 需要写入这些文件，因此运行 `slapd` 的用户需要具有 `读取` 和 `写入` 这些文件的权限。由于文件在 SLAPD 服务器关闭时会被删除，因此运行
    `slapd` 的用户还需要对存储这些文件的目录（在此案例中是 `/var/run/slapd/`）具有写入权限。
- en: Next, the `loglevel` directive is set to `none`. The `loglevel` directive specifies
    how much information SLAPD should send to the system log (by way of `syslogd`).
    The loglevel directive accepts keywords (`any`, `none`, `trace`, and so on), integers
    (`0`, `128`, `32768`), and hexidecimal numbers (`0x2`, `0x80`, `0x100`).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`loglevel` 指令被设置为 `none`。`loglevel` 指令指定了 SLAPD 应该向系统日志（通过 `syslogd`）发送多少信息。loglevel
    指令接受关键字（`any`、`none`、`trace` 等），整数（`0`、`128`、`32768`）和十六进制数字（`0x2`、`0x80`、`0x100`）。
- en: Setting this to `none` will cause SLAPD to only log critical events. In order
    to turn *off* the logging altogether, use `0`. To turn *on* all the logging, which
    will generate massive amounts of logging for every request, use `any`. The SLAPD
    man page (`man slapd`) provides a complete list of all the supported log levels.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 将其设置为 `none` 会导致 SLAPD 仅记录关键事件。为了完全关闭日志记录，请使用 `0`。要开启所有日志记录，这将为每个请求生成大量日志，请使用
    `any`。SLAPD 的手册页（`man slapd`）提供了所有支持的日志级别的完整列表。
- en: Module Directives
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块指令
- en: The last few directives in the *Basics* section are `modulepath` and `moduleload`.
    These are instructions for loading OpenLDAP modules.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*基础* 部分中的最后几个指令是 `modulepath` 和 `moduleload`。这些是用于加载 OpenLDAP 模块的指令。'
- en: A **module** is a special type of library that can be loaded when SLAPD starts
    up. Instead of compiling all of SLAPD's code into one large binary, the modules
    make it possible to create smaller library files for discrete functional units
    of LDAP code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块** 是一种特殊类型的库，可以在 SLAPD 启动时加载。与将所有 SLAPD 代码编译成一个大二进制文件不同，模块使得可以为 LDAP 代码的不同功能单元创建较小的库文件。'
- en: 'Typically, there are two different kinds of modules:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，模块有两种不同的类型：
- en: '**Backends**: The OpenLDAP server can use different storage backends, including
    BDB, SQL database, flat files (in LDIF format), or even another LDAP directory
    server. Each of these backends can be compiled into its own module. Then, during
    configuration, we have the option of only loading the module (or modules) that
    we need.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**后端**：OpenLDAP 服务器可以使用不同的存储后端，包括 BDB、SQL 数据库、平面文件（LDIF 格式）或甚至另一个 LDAP 目录服务器。每个后端都可以被编译成自己的模块。然后，在配置过程中，我们可以选择仅加载所需的模块（或模块）。'
- en: '**Overlays**: OpenLDAP includes a number of optional extensions, called overlays,
    which can modify behavior of the server (we will look at several overlays in the
    course of this book). These, too, are stored in modules.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**覆盖层**：OpenLDAP 包括许多可选的扩展，称为覆盖层，这些覆盖层可以修改服务器的行为（我们将在本书中讨论几个覆盖层）。这些也存储在模块中。'
- en: 'Let''s have a look at the directives we have used in our `slapd.conf` file:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在 `slapd.conf` 文件中使用的指令：
- en: 'The `modulepath` directive provides the full path to the directory where the
    modules (the compiled libraries) are stored. By default, Ubuntu puts LDAP libraries
    in `/usr/lib/ldap`. If, for some reason, you have modules stored in multiple directories
    you can specify a list of paths, separated by colons:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modulepath` 指令提供模块（编译的库）存储目录的完整路径。默认情况下，Ubuntu 将 LDAP 库放在 `/usr/lib/ldap`
    中。如果出于某种原因，您的模块存储在多个目录中，您可以指定多个路径列表，用冒号分隔：'
- en: '[PRE4]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `moduleload` directive instructs OpenLDAP to load a particular module. The
    directive takes either the file name of the module to be loaded (such as `back_hdb`)
    or a full path (beginning with `/`) to a module file. If just the name is specified,
    SLAPD will look in the directories specified in `modulepath`. If the entire path
    is specified, it will attempt to load from exactly that path (it will not use
    `modulepath` at all).
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moduleload` 指令指示 OpenLDAP 加载特定的模块。该指令接受要加载的模块的文件名（例如 `back_hdb`）或模块文件的完整路径（以
    `/` 开头）。如果仅指定名称，SLAPD 将在 `modulepath` 中指定的目录中查找。如果指定了完整路径，它将尝试从该路径加载（完全不使用 `modulepath`）。'
- en: '`moduleload back_hdb` instructs SLAPD to load the module that provides services
    for storing the directory in the *Hierarchical* *Database* (HDB) backend. This
    is the database that we will configure in the *Database* *Configuration* section.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moduleload back_hdb` 指示 SLAPD 加载提供存储目录的服务的模块，该目录使用 *层次化* *数据库*（HDB）后端。这就是我们将在
    *数据库* *配置* 部分中配置的数据库。'
- en: For now these are the only directives we need in the *Basics* section. There
    are other options though, and we will look at many of them in Chapters 4 and 5.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这些是我们在 *基础* 部分中所需要的唯一指令。不过还有其他选项，我们将在第 4 章和第 5 章中详细讨论它们。
- en: Database Configuration
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库配置
- en: The next section of our `slapd.conf` file is the database configuration section.
    This section handles the configuration of the database storage mechanisms. OpenLDAP
    is not limited to one database. More than one database can be used per server,
    where each database stores its own directory tree (or subtree). For example, a
    single OpenLDAP instance can serve a directory tree whose base is `o=My Company,c=US`
    from one database, and a directory tree whose root is `dc=example,dc=com` from
    a second database.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们 `slapd.conf` 文件的下一个部分是数据库配置部分。该部分处理数据库存储机制的配置。OpenLDAP 并不限于使用单一数据库，每个服务器可以使用多个数据库，每个数据库存储其自己的目录树（或子树）。例如，单个
    OpenLDAP 实例可以从一个数据库提供基本为 `o=My Company,c=US` 的目录树，并从另一个数据库提供根为 `dc=example,dc=com`
    的目录树。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As we saw in Chapter 1, the base DN for a directory tree is made up of attribute
    name/attribute value pairs. For example, the DN `o=My Company, c=US` indicates
    that the organization name `(o)` is My Company, and its country of origin `(c)`
    is United States (whose two-letter ISO code is US). Likewise, the second DN is
    composed of attribute name/value pairs, this time representing domain components
    `(dc)` from the organization's registered domain name, here, the fictitious `Example.Com`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第 1 章中看到的，目录树的基础 DN 由属性名/属性值对组成。例如，DN `o=My Company, c=US` 表示组织名称 `(o)`
    是 My Company，其原籍国家 `(c)` 是美国（ISO 两字母代码为 US）。同样，第二个 DN 由属性名/值对组成，这次代表域组件 `(dc)`，来自组织注册的域名，在这里是虚构的
    `Example.Com`。
- en: 'We will look at this option in Chapter 5\. In our simple `slapd.conf` file,
    we are defining only one database:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第 5 章中讨论这个选项。在我们的简单 `slapd.conf` 文件中，我们只定义了一个数据库：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first directive in the database configuration section is the `database`
    directive. This specifies which database backend will be used. In this case we
    will be using the **Hierarchical Database** (**HDB**), so we specify `hdb`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库配置部分的第一个指令是 `database` 指令。该指令指定将使用哪个数据库后端。在本例中，我们将使用 **层次化数据库** (**HDB**)，因此我们指定
    `hdb`。
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: HDB is the new generation storage mechanism for OpenLDAP. Like its predecessor,
    the BDB backend, HDB uses the Oracle Berkeley DB database for storage, but HDB
    stores entries hierarchically, a perfect fit for LDAP's tree strucutre. The old
    BDB backend is still supported, and you can use it by specificing `bdb` instead
    of `hdb` in the `database` directive.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: HDB 是 OpenLDAP 的新一代存储机制。与其前身 BDB 后端类似，HDB 也使用 Oracle Berkeley DB 数据库进行存储，但 HDB
    采用层次结构存储条目，这非常适合 LDAP 的树状结构。旧的 BDB 后端仍然受到支持，您可以通过在 `database` 指令中指定 `bdb` 而不是
    `hdb` 来使用它。
- en: The next directive, `suffix`, indicates which parts of the directory tree this
    database will hold. Basically, it indicates that this database's base will be
    the entry with the **Distinguished Name** (**DN**) specified in the `suffix` directive
    (`dc=example`,`dc=com`). We have discussed *Distinguished* *Names* in Chapter
    1.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的指令 `suffix` 表示此数据库将包含目录树的哪些部分。基本上，它表明该数据库的基础将是 `suffix` 指令中指定的 **区分名称**（**DN**）条目（`dc=example`,`dc=com`）。我们在第
    1 章中讨论过 *区分* *名称*。
- en: 'When the server receives a request for something in that tree (for example,
    `cn=Matt`,`dc=example`,`dc=com`), it will search in this database. The following
    figure gives a better idea:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器接收到树中某些内容的请求时（例如，`cn=Matt`,`dc=example`,`dc=com`），它会在该数据库中进行搜索。下图可以更好地说明这一点：
- en: '![Database Configuration](img/1021_02_01.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![数据库配置](img/1021_02_01.jpg)'
- en: Here, the client is searching for a specific DN, `cn=Matt`, `dc=example,dc=com`.
    The SLAPD server contains a directory information tree whose base DN is `dc=example`,
    `dc=com`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，客户端正在搜索特定的 DN，`cn=Matt`,`dc=example`,`dc=com`。SLAPD 服务器包含一个目录信息树，其基础 DN 为
    `dc=example`,`dc=com`。
- en: The DN `cn=Matt`,`dc=example`,`dc=com` is subordinate to `dc=example`,`dc=com`.
    It exists in the `dc=example`,`dc=com` tree. So, SLAPD searches the `dc=example`,`dc=com`
    database for a record whose DN is `cn=Matt`,`dc=example`,`dc=com`. Once the record
    is found, it is returned to the client.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: DN `cn=Matt`,`dc=example`,`dc=com` 属于 `dc=example`,`dc=com`。它存在于 `dc=example`,`dc=com`
    树中。因此，SLAPD 会在 `dc=example`,`dc=com` 数据库中搜索一个 DN 为 `cn=Matt`,`dc=example`,`dc=com`
    的记录。一旦找到该记录，它将返回给客户端。
- en: What will happen if a client requests the record of `cn=Matt`,`dc=test`,`dc=net`?
    Since this DN does not contain a base DN handled by this server, the server will
    not search for the record. Depending on the configuration, it may either send
    an error back to the client or redirect the client to another server that might
    be able to handle such a request.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端请求记录 `cn=Matt`,`dc=test`,`dc=net`，会发生什么情况？由于这个 DN 不包含服务器处理的基础 DN，服务器将不会搜索该记录。根据配置，服务器可能会返回一个错误给客户端，或者将客户端重定向到另一个可能能够处理该请求的服务器。
- en: Likewise, if a client tries to *add* a record with a base DN other than the
    one specified in the suffix directive, the LDAP server will refuse to add the
    record to the directory information tree.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果客户端尝试*添加*一个具有与 `suffix` 指令中指定的基础 DN 不同的记录，LDAP 服务器将拒绝将该记录添加到目录信息树中。
- en: The `suffix` directive in `slapd.conf` specifies what the base DN will be for
    information stored or referenced in this database. This will determine, to a large
    degree, what records this database will contain, search for, or allow to be added.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`slapd.conf` 中的 `suffix` 指令指定了存储或引用在该数据库中的信息的基础 DN。这在很大程度上决定了该数据库将包含、搜索或允许添加哪些记录。'
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: One database can have multiple trees (this is covered in Chapter 5).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数据库可以包含多个树（第 5 章有详细说明）。
- en: The next two lines assign a record for the directory manager and give the manager
    entry a password. The `rootdn` directive specifies the DN that will be considered
    the administrator of this directory. By convention, the *root* DN is created by
    prepending `cn=Manager` to the *base* DN of the directory tree. Thus, our directory
    manager is `cn=Manager`,`dc=example`,`dc=com`. The next field, `rootpw`, is used
    to assign a password for the directory manager. Note that this is stored outside
    the directory rather than inside it. For example, the `userPassword` attribute
    of a record in the directory. This is to prevent the manager from being *locked*
    *out* of the directory.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两行指定了目录管理员的记录，并为管理员条目设置了密码。`rootdn` 指令指定了被视为该目录管理员的 DN。按照约定，*root* DN 是通过将
    `cn=Manager` 添加到目录树的 *base* DN 前面来创建的。因此，我们的目录管理员是 `cn=Manager`,`dc=example`,`dc=com`。接下来的字段
    `rootpw` 用于为目录管理员指定密码。请注意，这个密码存储在目录外部，而不是内部。例如，目录中记录的 `userPassword` 属性。这是为了防止管理员被*锁定*，无法访问目录。
- en: The directory manager is a special user with special privileges. The manager's
    requests are not filtered through ACLs—the manager's access cannot be restricted.
    Furthermore, the manager has *write* access to all records in the directory under
    the specified suffix or suffixes. For that reason, the manager DN should be used
    for administrative tasks only and not for anything else.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 目录管理员是一个具有特殊权限的特殊用户。管理员的请求不会通过 ACL 进行过滤——管理员的访问不能受到限制。此外，管理员对指定后缀或后缀下的所有记录具有*写*权限。因此，管理员
    DN 应仅用于管理任务，而不应用于其他用途。
- en: Further, since the necessary fields for the manager are stored here in the `slapd.conf`
    file, there should *not* be a record in the directory with the manager's DN (this
    is recommended for best practices, though it is not explicitly prevented by SLAPD).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于管理员的必要字段存储在 `slapd.conf` 文件中，因此目录中**不应**有包含管理员 DN 的记录（虽然 SLAPD 并未明确禁止，但这是最佳实践推荐的做法）。
- en: Since the manager's DN and password are stored in the `slapd.conf` file, and
    since the manager has access to everything in the directory, we should keep file
    system permissions on the `slapd.conf` file as restrictive as possible.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于管理员的 DN 和密码存储在 `slapd.conf` 文件中，并且管理员对目录中的所有内容都有访问权限，因此我们应该将 `slapd.conf`
    文件的文件系统权限设置得尽可能严格。
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Encrypting the Manager''s Password**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**加密管理员的密码**'
- en: You can also give `rootpw` an encrypted password by using the `ldappasswd` utility,
    described in the next chapter.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用 `ldappasswd` 工具为 `rootpw` 设置加密密码，具体内容将在下一章介绍。
- en: The `directory` directive indicates which directory on the file system should
    hold the database files. In this case the database is stored at `/var/lib/ldap/`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`directory` 指令指示文件系统中的哪个目录应该存储数据库文件。在本例中，数据库存储在 `/var/lib/ldap/`。'
- en: 'Finally, the `index` directive is composed of a list of attributes that should
    be indexed, followed by the type of matching that the index will be used for.
    Our example looked like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`index` 指令由应被索引的属性列表组成，后面跟着该索引将用于的匹配类型。我们的示例如下所示：
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This means that we are creating an index that will support equality (`eq`) matching
    on the attributes `objectClass` and `cn`. When the server gets a request for all
    the entries with `cn Rob` or `commonName Rob`, the server can greatly expedite
    service by accessing the index instead of searching the entire database. However,
    if the request was for `Rob*` (note the `*` wildcard character), then the server
    would not be looking for a CN that equals "Rob*", but for any CN that starts with
    "Rob". In this case, the index we created would not be used.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们正在创建一个支持属性 `objectClass` 和 `cn` 上等值（`eq`）匹配的索引。当服务器收到所有 `cn Rob` 或 `commonName
    Rob` 的条目请求时，服务器可以通过访问索引而不是搜索整个数据库，显著加速服务。然而，如果请求是 `Rob*`（注意 `*` 通配符字符），则服务器不会寻找等于
    "Rob*" 的 CN，而是寻找以 "Rob" 开头的任何 CN。在这种情况下，我们创建的索引将不会被使用。
- en: 'Multiple index directives can be used, and we could support faster CN searches
    for queries like `Rob*` by splitting the index directive into two different directives:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用多个索引指令，我们可以通过将索引指令拆分为两个不同的指令，来支持更快速的 CN 搜索，比如查询 `Rob*`：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the given example, an equality (`eq`) index is maintained for `objectClass`
    attributes, while the `cn` attribute is indexed for equality matches (`eq`) and
    substring matches (`sub`).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的示例中，`objectClass` 属性维护了等值（`eq`）索引，而 `cn` 属性则为等值匹配（`eq`）和子字符串匹配（`sub`）建立了索引。
- en: Certain attributes do not support all index types. The `objectClass` attribute,
    for example, does not support substring (`sub`) index matching. When we will look
    at performance tuning in Chapter 5, we will see the indexing directive more carefully.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 某些属性不支持所有类型的索引。例如，`objectClass` 属性不支持子字符串（`sub`）索引匹配。在第 5 章中，我们将更加仔细地查看索引指令。
- en: Once you have a database created, every time you modify the `index` directives
    in `slapd.conf`, you should rebuild the indexes with the `slapindex` command-line
    utility. Since we have not yet put any data in the database though, we don't need
    to run this command now.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了数据库，每次修改 `slapd.conf` 中的 `index` 指令时，都应使用 `slapindex` 命令行工具重建索引。然而，由于我们尚未在数据库中放入任何数据，因此现在不需要运行此命令。
- en: Now we are ready to move on to the third and final section of our configuration
    file.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备继续配置文件的第三个也是最后一个部分。
- en: ACLs
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ACLs
- en: 'The last section in the `slapd.conf` file is the ACL section. ACLs (Access
    Control Lists) determine which clients can access what data, and under what conditions.
    In Chapter 4, we will cover ACLs in much more detail. However, it is important
    to have some basic ACLs configured from the beginning, so we will briefly walk
    through two simple ACLs:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`slapd.conf` 文件的最后一部分是 ACL 部分。ACL（访问控制列表）决定了哪些客户端可以访问哪些数据，以及在什么条件下可以访问。我们将在第
    4 章中更详细地讨论 ACL。然而，从一开始就配置一些基本的 ACL 是很重要的，因此我们将简要介绍两个简单的 ACL：'
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ACLs are just fancy directives—directives with a complex syntax. They begin
    with the access directive, followed by a list of conditions. The conditions can
    span multiple lines as long as each continuation line begins with one or more
    white space characters (such as a tab or a space).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: ACL只是复杂语法的指令——它们以访问指令开始，后面跟着一系列条件。条件可以跨越多行，只要每行的续写都以一个或多个空白字符（如制表符或空格）开始。
- en: Tip
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Line Continuations in slapd.conf file**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**slapd.conf文件中的行续写**'
- en: 'Any directive, not just ACLs, can span multiple lines, as long as each continued
    line begins with a white space. For example, `moduleload back_hdb` can be written
    as:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 任何指令，不仅仅是ACL，都可以跨越多行，只要每一行的续行都以空白字符开始。例如，`moduleload back_hdb`可以写成：
- en: '`moduleload`'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`moduleload`'
- en: '`back_hdb`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`back_hdb`'
- en: 'Let''s look at the first access control in detail:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看第一个访问控制：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The purpose of this access control is to keep a user's password protected. Specifically,
    it allows anonymous users to request that the server perform an authentication
    comparison (during the process of logging on) on a password. Additionally, it
    grants a user permission to change his or her own password. Finally, it denies
    everyone else any access to the password. That's what this rule is supposed to
    do. Now, how do we get that?
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这个访问控制的目的是保护用户密码的安全。具体来说，它允许匿名用户请求服务器在登录过程中对密码进行身份验证比较。此外，它授予用户更改自己密码的权限。最后，它拒绝其他任何人访问密码。这就是该规则的作用。那么，我们该如何实现这一点呢？
- en: 'Each line of code having `by` should be indented:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行包含`by`的代码都应该缩进：
- en: '`access to` [*resources*]'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`access to` [*资源*]'
- en: '`by` [*who*] [*type* *of* *access* *granted*]'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`by` [*谁*] [*授予的访问类型*]'
- en: '`by` [*who*] [*type* *of* *access* *granted*]'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`by` [*谁*] [*授予的访问类型*]'
- en: '`by` [*who*] [*type* *of* *access* *granted*]'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`by` [*谁*] [*授予的访问类型*]'
- en: 'Each `access` directive can have one `to` phrase, and any number of `by` phrases.
    Our first rule has three `by` phrases. Let''s see these in more detail:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`access`指令可以有一个`to`短语，并且可以有多个`by`短语。我们的第一个规则有三个`by`短语。让我们更详细地看看这些：
- en: 'In `access to attrs=userPassword`, `attrs` indicates that a list of one or
    more attributes will follow. In our case there is only one attribute: `userPassword`.
    The `userPassword` attribute is used to store the value of a password for an object
    in the directory.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`access to attrs=userPassword`中，`attrs`表示接下来会有一个或多个属性的列表。在我们的例子中，只有一个属性：`userPassword`。`userPassword`属性用于存储目录中对象的密码值。
- en: Note
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While not just any object in the directory can have a userPassword, there are
    many objects in the directory that are not users, but can have passwords. The
    most frequent use of the `userPassword` attribute is for records that describe
    users.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然并非目录中的所有对象都有`userPassword`，但有许多不是用户的对象也可以拥有密码。`userPassword`属性最常见的用途是用于描述用户的记录。
- en: In this access control there is no explicit mention of particular parts of the
    directory to which this rule applies. Given this, the ACL will be enforced for
    *all* instances of `userPassword`. So, the rule specifies access to the `userPassword`
    attribute. The next three phrases will indicate who has access to `userPassword`
    attributes, and what kind of access they have.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个访问控制中，没有明确提到该规则应用于目录的特定部分。鉴于此，ACL将对*所有*`userPassword`实例进行强制执行。因此，该规则指定了对`userPassword`属性的访问。接下来的三句话将表明谁可以访问`userPassword`属性，以及他们可以获得什么样的访问权限。
- en: Next is `by anonymous auth`. This phrase grants an anonymous user (one who has
    not yet authenticated) permission to authenticate using a password. More accurately,
    it indicates that when a user submits a request for authentication, the directory
    server is allowed to perform an authentication operation (which amounts to comparing
    the submitted password with the value in the `userPassword` attribute for the
    corresponding user's entry).
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是`by anonymous auth`。这个短语授予匿名用户（尚未进行身份验证的用户）使用密码进行身份验证的权限。更准确地说，它表示当用户提交身份验证请求时，目录服务器被允许执行身份验证操作（即将提交的密码与相应用户条目中的`userPassword`属性值进行比较）。
- en: The last part of the `by` phrase specifies what sort of permissions are granted
    to the record. The permissions level can be granted in a few ways, which is discussed
    in detail in Chapter 4.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`by`短语的最后部分指定了记录被授予的权限类型。权限级别可以通过几种方式授予，这将在第4章中详细讨论。'
- en: 'For the time being, though, we will look at four keywords that can be used
    in ACLs to grant common permission levels:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将看看ACL中用于授予常见权限级别的四个关键字：
- en: '`auth`: The server can perform an authentication operation using this resource.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth`：服务器可以使用此资源执行身份验证操作。'
- en: '`read`: The client can have `auth` access and can also *read* this resource,
    but cannot make any changes.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read`：客户端可以拥有 `auth` 访问权限，并且还可以*读取*该资源，但不能进行任何更改。'
- en: '`write`: The client can have `auth` and `read` access to this resource and
    can also perform add, modify, and delete operations on whatever is specified by
    resource.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`write`：客户端可以拥有 `auth` 和 `read` 访问权限，并且还可以对资源上指定的内容执行添加、修改和删除操作。'
- en: '`none`: The server should not give the client any access at all to this resource.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`none`：服务器不应允许客户端对该资源进行任何访问。'
- en: In Chapter 4, when we look at ACLs in depth, we will look at other keywords
    and explore creating finer-grained permissions levels, such as allowing write
    access without granting read access.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 4 章中，当我们深入研究 ACL 时，我们将了解其他关键字，并探索创建更精细的权限级别，例如允许写入访问而不授予读取访问。
- en: So, the second `by` phrase, `by self write`, means that once a DN (usually a
    user) has successfully connected and authenticated to the LDAP server, it can
    change the value of `userPassword`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，第二个 `by` 短语 `by self write` 表示一旦一个 DN（通常是用户）成功连接并通过身份验证到 LDAP 服务器，它就可以更改
    `userPassword` 的值。
- en: Finally, the last `by` phrase says `by * none`. The `*` is a wildcard that will
    apply to everyone. And `none`, as we came to know, denies any sort of access to
    the `userPassword` attribute. This rule says that everyone should be denied access
    to the password attribute.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最后一个 `by` 短语是 `by * none`。`*` 是一个通配符，将应用于每个人。`none`，正如我们所知，拒绝对 `userPassword`
    属性的任何访问。这个规则表示每个人都应该被拒绝访问密码属性。
- en: This third `by` phrase provides a good illustration of how ACLs are applied.
    The ACL is evaluated in order. In the rules above, as soon as the server finds
    a rule that applies to the current DN, it will stop processing the ACL. Consider
    an example. When an anonymous user tries to authenticate (bind) with a DN and
    password, the server will check the ACLs to see if the DN has the right to request
    an authentication comparison using the `userPassword` attribute.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第三个 `by` 短语很好地说明了 ACL 的应用方式。ACL 是按顺序评估的。在上面的规则中，一旦服务器找到适用于当前 DN 的规则，它就会停止处理该
    ACL。举个例子。当一个匿名用户尝试使用 DN 和密码进行身份验证（绑定）时，服务器会检查 ACL，看看该 DN 是否有权请求使用 `userPassword`
    属性进行身份验证比较。
- en: As SLAPD evaluates this ACL, it will see that the first `by` phrase applies;
    use that rule and skip the other two. But, on the other hand, if an authenticated
    user tries to read `userPassword` of another DN, the server will search `by` phrases
    until it finds one that matches. It will evaluate and skip the first two before
    applying the third, which denies that user the access to another record's `userPassword`
    attribute.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当 SLAPD 评估这个 ACL 时，它会看到第一个 `by` 短语适用；使用这个规则并跳过另外两个。然而，另一方面，如果一个经过身份验证的用户尝试读取另一个
    DN 的 `userPassword`，服务器将继续搜索 `by` 短语，直到找到一个匹配的规则。它会评估并跳过前两个规则，然后应用第三个规则，这会拒绝该用户访问另一个记录的
    `userPassword` 属性。
- en: Tip
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**The Default by Phrase**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认的 by 短语**'
- en: When processing an ACL, SLAPD denies access by default. This means that every
    access directive ends with an implicit `by` phrase of `by *` none. So, to save
    space, we could have omitted the last phrase from both of our ACLs.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理 ACL 时，SLAPD 默认拒绝访问。这意味着每个访问指令都会以隐式的 `by` 短语 `by * none` 结束。因此，为了节省空间，我们本可以省略我们两个
    ACL 中的最后一个短语。
- en: 'Now that we understand the first ACL, the second should be a breeze. Let''s
    see the second one:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了第一个 ACL，第二个应该会非常简单。我们来看看第二个：
- en: '[PRE10]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This last ACL becomes our default rule for the directory. It can be paraphrased
    this way: for any object and all its attributes (`to *`), if the currently connected
    DN is the DN of this object, it can write to the object (`by self write`). Otherwise,
    the currently connected DN has no access whatsoever (`by * none`). In short, it
    lets objects write to themselves, but denies everyone else all the permissions
    to the object.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后的 ACL 成为我们目录的默认规则。它可以这样转述：对于任何对象及其所有属性（`to *`），如果当前连接的 DN 是该对象的 DN，则该对象可以被写入（`by
    self write`）。否则，当前连接的 DN 没有任何访问权限（`by * none`）。简而言之，它允许对象写入自己，但拒绝其他所有人对该对象的所有权限。
- en: Tip
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Restricting the Manager**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**限制管理器**'
- en: It should be noted that ACLs cannot be used to restrict the special directory
    manager account named in the `rootdn` directive.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意，ACL 不能用于限制在 `rootdn` 指令中指定的特殊目录管理员帐户。
- en: Keep in mind that ACLs are processed sequentially. So this second rule will
    only apply if the earlier rule did not apply.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，ACL是按顺序处理的。因此，第二条规则只有在前一条规则未生效时才会应用。
- en: These access controls are very strict and will prevent directory users from
    getting much out of the directory. In Chapter 5 we will create some more rules
    which will make the directory more accessible, but for now these simple rules
    will suffice.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些访问控制非常严格，会阻止目录用户从目录中获取太多信息。在第5章中，我们将创建更多规则，使目录更易于访问，但目前这些简单的规则已足够。
- en: Verifying a Configuration File
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证配置文件
- en: We are now done working through the configuration file. The last thing to do
    before we start the server is to verify that the configuration file is valid.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了配置文件的操作。开始服务器之前，最后一步是验证配置文件是否有效。
- en: 'OpenLDAP includes a tool for testing the configuration file to make sure that
    it is well-formed and that the directives are all used correctly. It also checks
    elements of the OpenLDAP environment to ensure that the requisite files are in
    the correct locations. The testing tool is called `slaptest` and it appears as:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: OpenLDAP提供了一个工具，用于测试配置文件，确保其格式正确且指令使用得当。它还检查OpenLDAP环境的元素，确保所需的文件位于正确的位置。这个测试工具叫做`slaptest`，其显示方式如下：
- en: '[PRE11]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Since the file system permissions on `slapd.conf` are very restrictive, we
    used `sudo` to execute the test as the root user. The `slaptest` command needs
    to know where the `slapd.conf` file is. This is specified with the `-f` parameter
    followed by the path to the configuration file. We also used the `-v` flag to
    require verbose output. Since nothing was wrong with `slapd.conf`, only one line
    was printed:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`slapd.conf`的文件系统权限非常严格，我们使用`sudo`以root用户身份执行测试。`slaptest`命令需要知道`slapd.conf`文件的位置。通过`-f`参数指定配置文件的路径来实现。我们还使用了`-v`标志以要求详细输出。由于`slapd.conf`没有问题，所以只打印了一行：
- en: '[PRE12]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'But if anything is incorrect, `slaptest` will provide diagnostic information.
    Let''s look at a misconfigured `slapd.conf` file:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果有任何错误，`slaptest`会提供诊断信息。我们来看一个配置错误的`slapd.conf`文件：
- en: '[PRE13]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This configuration file is a minor variation of the one we have been examining
    throughout this section. The problem is that the `objectClass` attribute cannot
    handle substring matches. The reason for this (explained in more detail in Chapter
    6) is that the schema does not allow substring matching on the `objectClass` attribute.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置文件是我们在本节中一直在检查的配置文件的小变体。问题是`objectClass`属性不能处理子字符串匹配。这个原因（在第6章中会有更详细的解释）是因为架构不允许对`objectClass`属性进行子字符串匹配。
- en: 'Having made the above change, we run the `slaptest` command:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 做出上述更改后，我们运行`slaptest`命令：
- en: '[PRE14]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following messages appear:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下信息会出现：
- en: '[PRE15]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see this information is useful for quickly finding and fixing problems
    before attempting to start the server.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这些信息对于在尝试启动服务器之前快速发现并修复问题非常有用。
- en: Tip
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**An Ubuntu Oversight**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ubuntu的疏忽**'
- en: Due to a configuration oversight by Ubuntu packager maintainers, the slaptest
    program does not issue a warning if an unknown directive is found. As a result,
    a mistaken directive name may slip through the verification stage unnoticed. For
    example, misspelling index as idnex will not result in an error.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ubuntu打包维护者的配置疏忽，slaptest程序在发现未知指令时不会发出警告。因此，错误的指令名称可能在验证阶段被忽略。例如，将`index`拼写为`idnex`不会导致错误。
- en: Tip
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Testing slapd.conf with slapd**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用slapd测试slapd.conf**'
- en: 'The slaptest command is actually nothing more than a symbolic link to slapd,
    the command used to start the server. While there are no distinct advantages to
    doing so, you can use the slapd program to test `slapd.conf`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`slaptest`命令实际上不过是一个指向slapd的符号链接，slapd是用于启动服务器的命令。虽然这样做没有明显的优势，但你可以使用slapd程序来测试`slapd.conf`：'
- en: '[PRE16]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once the configuration file passes muster with the `slaptest` program, we are
    ready to start our server.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置文件通过`slaptest`程序的检查，我们就可以准备启动服务器了。
- en: At this point, we have walked through our basic `slapd.conf` configuration file.
    This configuration will get our directory up and running, and in later chapters
    of this book we will cover some more advanced settings that can be included here
    in the configuration file.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经走完了基本的`slapd.conf`配置文件部分。这个配置文件将使我们的目录启动并运行，在本书的后续章节中，我们将介绍一些更高级的设置，这些设置可以包含在配置文件中。
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are interested in reading more about configuration options for `slapd.conf`,
    you may want to take a look at the manual (man) pages. The man pages for OpenLDAP
    provide a thorough (though sometimes tersely worded) reference. In particular,
    the `slapd.conf` page is very useful.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解更多关于`slapd.conf`的配置选项，可能想查看手册（man）页面。OpenLDAP 的 man 页面提供了详尽的（尽管有时表述简洁）参考资料，尤其是`slapd.conf`页面非常有用。
- en: '[PRE17]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: At the bottom of that page there is a list of other related manual pages, such
    as `slapd-hdb`, which lists directives specific to the HDB database.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在该页面的底部，有一份相关手册页面的列表，例如`slapd-hdb`，该页面列出了特定于 HDB 数据库的指令。
- en: Starting and Stopping the Server
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动和停止服务器
- en: 'At this point, we have configured our `slapd.conf` file. We are now ready to
    start our server. There are two different ways to run the SLAPD server: we can
    either use the init script provided with the distribution, or we can run the `slapd`
    command directly. Each way has its advantages, and we will look at both here.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里，我们已经配置好了`slapd.conf`文件。现在我们准备启动服务器。有两种不同的方式来运行 SLAPD 服务器：我们可以使用发行版提供的初始化脚本，或者直接运行`slapd`命令。每种方式都有其优点，我们将在这里介绍两种方式。
- en: Using the Init Script
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用初始化脚本
- en: The OpenLDAP packages that are installed with Ubuntu include a startup script
    that is located, along with other service startup scripts, in the `/etc/init.d/`
    directory. The scripts in `/etc/init.d/`, usually referred to as the **init scripts**,
    are used to automatically *start* and *stop* services when the system run level
    changes (when the system boots, halts, or reboots), and by default, OpenLDAP should
    be configured to start when the server boots, and stop during halts and reboots.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Ubuntu 一起安装的 OpenLDAP 包包括一个启动脚本，该脚本与其他服务启动脚本一起位于`/etc/init.d/`目录中。`/etc/init.d/`中的脚本，通常称为**初始化脚本**，用于在系统运行级别变化时（当系统启动、关闭或重启时）自动*启动*和*停止*服务，默认情况下，OpenLDAP
    应配置为在服务器启动时启动，并在关闭和重启时停止。
- en: 'The `ldap` init script provides a convenient way to start, stop, and restart
    the server. You can start it (if it is not already running) with the Ubuntu `invoke-rc.d`
    command:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`ldap`初始化脚本提供了一种方便的方式来启动、停止和重启服务器。你可以使用 Ubuntu 的`invoke-rc.d`命令来启动它（如果它尚未运行）：'
- en: '[PRE18]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can use the same script to stop the server. Just change `start` to `stop`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用相同的脚本来停止服务器，只需将`start`改为`stop`：
- en: '[PRE19]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Similarly, to restart, use the `restart` command instead of `start` or `stop`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，要重启服务器，可以使用`restart`命令，而不是`start`或`stop`。
- en: The init scripts set up default parameters and pass in many system options.
    Some of these are stored in a separate configuration file located at `/etc/default/slapd`.
    For example, by setting the `SLAPD_USER` and `SLAPD_GROUP` variables to a particular
    system user ID and group ID, you can run SLAPD as a user other than the default.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化脚本设置了默认参数并传递了许多系统选项。其中一些存储在位于`/etc/default/slapd`的单独配置文件中。例如，通过将`SLAPD_USER`和`SLAPD_GROUP`变量设置为特定的系统用户
    ID 和组 ID，你可以以非默认用户身份运行 SLAPD。
- en: The OpenLDAP server must start as root, in order to bind to the correct TCP/IP
    port (389 or 636 by default). Then it will switch and use the user account and
    group specified in the file located at `/etc/default/slapd`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: OpenLDAP 服务器必须以 root 用户身份启动，以便绑定到正确的 TCP/IP 端口（默认是 389 或 636）。然后，它会切换并使用位于`/etc/default/slapd`文件中指定的用户账户和组。
- en: Note
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ubuntu creates a special user and group, named `openldap`, for running SLAPD.
    Other distributions run SLAPD as root, which is not a good idea from a security
    point of view.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 创建了一个名为`openldap`的特殊用户和组来运行 SLAPD。其他发行版将 SLAPD 作为 root 用户运行，这从安全角度来看并不推荐。
- en: Other settings, such as logging settings, can also be made in this configuration
    file.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 其他设置，例如日志设置，也可以在此配置文件中进行。
- en: Running SLAPD Directly
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接运行 SLAPD
- en: Sometimes, it is useful to start SLAPD directly from the command line. This
    may make it easier to see error messages when starting of the server fails, or
    to test configurations before making any changes to the init script or its configuration
    files.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，从命令行直接启动 SLAPD 是有用的。这可能有助于在服务器启动失败时查看错误消息，或者在对初始化脚本或其配置文件进行更改之前测试配置。
- en: 'To start the SLAPD server directly, simply run the `slapd` command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要直接启动 SLAPD 服务器，只需运行`slapd`命令：
- en: '[PRE20]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will start the SLAPD server in the background.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在后台启动 SLAPD 服务器。
- en: Note
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you compiled OpenLDAP from source, the `slapd` command will be at `/usr/local/libexec/`,
    which is not, by default, in `$PATH`. You will have to run the command using the
    full path: `/usr/local/libexec/slapd`.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是从源代码编译 OpenLDAP，`slapd` 命令会位于 `/usr/local/libexec/` 目录下，默认情况下，该目录不在 `$PATH`
    中。你需要使用完整路径来运行该命令：`/usr/local/libexec/slapd`。
- en: 'The server will write its process ID to the location specified in the `pidfile`
    directive in `slapd.conf`. In our case, this is `/var/run/slapd/slapd.pid`. We
    can stop the server by using the standard `kill` command:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器会将其进程 ID 写入 `slapd.conf` 中 `pidfile` 指令指定的位置。在我们的案例中，路径为 `/var/run/slapd/slapd.pid`。我们可以通过使用标准的
    `kill` 命令来停止服务器：
- en: '[PRE21]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This command first uses the `cat` program to print the contents of the file
    (which is simply the process ID of `slapd`). Note that the `cat` command is surrounded
    by backticks (`` ` ``), not single quotes (`'`). The backticks tell the shell
    to treat the statement as a command to be executed. The process ID is then passed
    to the `kill` command, which instructs the process to shut itself down.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令首先使用 `cat` 程序打印文件的内容（即 `slapd` 的进程 ID）。请注意，`cat` 命令被反引号（`` ` ``）包围，而不是单引号（`'`）。反引号告诉
    shell 将语句作为要执行的命令。然后，进程 ID 会传递给 `kill` 命令，指示进程自我终止。
- en: 'In cases where the `slapd.pid` file is not available you might find it more
    expedient to kill the server with this command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `slapd.pid` 文件不可用，您可能会发现使用此命令来杀死服务器更加便捷：
- en: '[PRE22]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Sometimes though, it is more useful to start the command in the foreground,
    and set debugging information to print out in the terminal window. This can be
    done quite easily as well:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，将命令启动在前台并设置调试信息以打印到终端窗口是更有用的做法。这也可以很容易做到：
- en: '[PRE23]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the command above we use the `-d` flag to print logging information to the
    shell's standard output. This means that `slapd` will print information to the
    terminal window. The `-d` flag takes one parameter—the debugging level. We have
    specified `config`, which instructs the server to print verbose logging information
    about the processing of the configuration file.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的命令中，我们使用 `-d` 标志将日志信息打印到 shell 的标准输出。这意味着 `slapd` 将信息打印到终端窗口。`-d` 标志需要一个参数——调试级别。我们指定了
    `config`，它指示服务器打印关于配置文件处理的详细日志信息。
- en: 'The output looks something like this:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 输出大概是这样的：
- en: '[PRE24]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This can be one other useful way to ferret out configuration issues. The `-d`
    flag will take any of the debugging levels specified in the `slapd.conf` man page.
    I find `acl` useful for debugging access problems, and `filter` is often useful
    in figuring out trouble with searches.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是一种有用的方法来查找配置问题。`-d` 标志将接受 `slapd.conf` 手册页中指定的任何调试级别。我发现 `acl` 对调试访问问题很有用，而
    `filter` 在解决搜索问题时常常非常有用。
- en: When `-d` is specified the program will run in the foreground. To stop the server
    simply hit *CTRL+C*. This will stop the server and return you to a shell prompt.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定 `-d` 时，程序将在前台运行。要停止服务器，只需按 *CTRL+C*。这将停止服务器并返回到 shell 提示符。
- en: 'Other useful command line parameters to use with `slapd` are `-u` and `-g`.
    Each takes one argument: `-u` takes a username and `-g` takes a groupname. These
    control the effective UID and GID (user ID and group ID) that SLAPD runs as. Once
    SLAPD has started and connected to the appropriate ports (which it must do as
    root), it will switch its UID and GID to the names specified in these parameters.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `slapd` 一起使用的其他有用命令行参数包括 `-u` 和 `-g`。每个参数都需要一个值：`-u` 接受一个用户名，`-g` 接受一个组名。这些参数控制
    SLAPD 运行时的有效 UID 和 GID（用户 ID 和组 ID）。一旦 SLAPD 启动并连接到适当的端口（必须以 root 身份进行连接），它将切换到这些参数中指定的
    UID 和 GID。
- en: Note
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To get a list of other command line flags that we can use with `slapd`, refer
    to the man page for `slapd`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取可以与 `slapd` 一起使用的其他命令行标志，请参阅 `slapd` 的手册页。
- en: In the next section, we will be using some of the OpenLDAP clients to connect
    to our directory. This will require that the SLAPD server be running. You can
    verify that `slapd` is running by checking if `/var/run/slapd/slapd.pid` exists,
    or by running `pgrep slapd`, which will display the process ID of `slapd` if it's
    running. If no process ID number is returned, `slapd` is not running.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将使用一些 OpenLDAP 客户端连接到我们的目录。这需要 SLAPD 服务器正在运行。你可以通过检查 `/var/run/slapd/slapd.pid`
    是否存在来验证 `slapd` 是否在运行，或者通过运行 `pgrep slapd` 来查看 `slapd` 的进程 ID。如果没有返回进程 ID 号，说明
    `slapd` 没有在运行。
- en: Configuring the LDAP Clients
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 LDAP 客户端
- en: In the last couple of sections we have focused exclusively on the SLAPD server.
    Now that the server is running we need to get the client configuration so that
    we can make test connections to the server.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几个章节中，我们专注于 SLAPD 服务器。现在服务器已启动，我们需要获取客户端配置，以便可以进行测试连接。
- en: Fortunately all of the OpenLDAP client programs share one common configuration
    file, `ldap.conf`, which is located in Ubuntu at `/etc/ldap/ldap.conf` (if you
    build from source, according to [Appendix A](apa.html "Appendix A. Building OpenLDAP
    from Source"), the default location for this file is `/usr/local/etc/openldap/ldap.conf`).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，所有 OpenLDAP 客户端程序共享一个通用的配置文件 `ldap.conf`，该文件在 Ubuntu 中位于 `/etc/ldap/ldap.conf`（如果你是从源码构建的，参见[附录
    A](apa.html "附录 A. 从源代码构建 OpenLDAP")，该文件的默认位置是 `/usr/local/etc/openldap/ldap.conf`）。
- en: Other programs, such as those that use the OpenLDAP client libraries (like the
    PHP and Python LDAP APIs, may also use the `ldap.conf` file as a default location
    to retrieve basic configuration information.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 其他程序，例如使用 OpenLDAP 客户端库的程序（如 PHP 和 Python 的 LDAP API），也可能使用 `ldap.conf` 文件作为检索基本配置的默认位置。
- en: Tip
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Too Many ldap.conf Files**'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '**太多的 ldap.conf 文件**'
- en: Occasionally, some Linux distributions will create two different `ldap.conf`
    files—one for OpenLDAP, and one for the PAM or NSS LDAP tools. This can lead to
    confusion about which `ldap.conf` file is used for which process. Ubuntu, however,
    gives the other packages distinctly named configuration files, like `/etc/pam_ldap.conf`.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，一些 Linux 发行版会创建两个不同的 `ldap.conf` 文件——一个用于 OpenLDAP，另一个用于 PAM 或 NSS LDAP 工具。这可能会导致混淆，不知道哪个
    `ldap.conf` 文件用于哪个进程。然而，Ubuntu 为其他软件包提供了明确命名的配置文件，例如 `/etc/pam_ldap.conf`。
- en: A Basic ldap.conf File
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个基本的 ldap.conf 文件
- en: 'The purpose of the `ldap.conf` file is two-fold:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`ldap.conf` 文件的目的是双重的：'
- en: It provided a place to define certain aspects of client behavior, such as how
    they treat SSL/TLS certificates or whether they follow alias entries.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它提供了一个定义客户端行为特定方面的地方，例如它们如何处理 SSL/TLS 证书或是否遵循别名条目。
- en: It provides the OpenLDAP clients with useful defaults. By specifying some defaults,
    we can reduce the number of parameters we have to pass to the OpenLDAP clients
    when we run them from the command line.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它为 OpenLDAP 客户端提供了有用的默认设置。通过指定一些默认值，我们可以减少在命令行运行 OpenLDAP 客户端时必须传递的参数数量。
- en: Note
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An **alias** is an entry in the directory that points to some other entry. Conceptually,
    it is similar to a symbolic link in a UNIX/Linux file system, or to a shortcut
    in Microsoft Windows.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '**别名**是目录中的一个条目，它指向另一个条目。从概念上讲，它类似于 UNIX/Linux 文件系统中的符号链接，或 Microsoft Windows
    中的快捷方式。'
- en: 'The `ldap.conf` file has three different kinds of directive:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`ldap.conf` 文件有三种不同类型的指令：'
- en: General settings, which specify things such as the default server and DN to
    use
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般设置，指定默认的服务器和 DN 等内容。
- en: SASL-specific settings, which determine how the OpenLDAP clients will try to
    authenticate when using SASL (Simple Authentication and Security Layer) authentication
    mechanisms
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SASL 特定设置，用于确定在使用 SASL（简单身份验证和安全层）身份验证机制时，OpenLDAP 客户端将如何尝试进行身份验证。
- en: TLS-specific settings, which specify how OpenLDAP will handle connections that
    use SSL (Secure Sockets Layer) and TLS encryption
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TLS 特定设置，用于指定 OpenLDAP 如何处理使用 SSL（安全套接层）和 TLS 加密的连接。
- en: At this point we are only interested in the general settings. In later chapters,
    we will return to this file when configuring SSL/TLS and SASL.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 此时我们只关心一般设置。稍后的章节中，我们将返回到这个文件，配置 SSL/TLS 和 SASL。
- en: 'Now, we need to look into a basic `ldap.conf` file. The `ldap.conf` file is
    located in the same directory as `slapd.conf`—`/etc/ldap/` (or `/usr/local/etc/openldap/`
    if you built from source). We will now insert the LDAP client settings into that
    basic `ldap.conf` file:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要查看一个基本的 `ldap.conf` 文件。`ldap.conf` 文件位于与 `slapd.conf` 相同的目录中——`/etc/ldap/`（如果你是从源码构建的，则为
    `/usr/local/etc/openldap/`）。我们现在将把 LDAP 客户端设置插入到这个基本的 `ldap.conf` 文件中：
- en: '[PRE25]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Again, as with `slapd.conf`, lines that begin with a number sign (`#`) are treated
    as comments, and are ignored by the OpenLDAP client tools.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，像 `slapd.conf` 一样，所有以井号（`#`）开头的行都被视为注释，并且会被 OpenLDAP 客户端工具忽略。
- en: 'Next, we have directives:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有指令：
- en: The URI directive indicates which server (or servers, as this directive can
    take multiple URIs, separated by spaces) is to be contacted if no server is explicitly
    specified by the client.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URI 指令指示如果客户端没有显式指定服务器时，要联系的服务器（或者多个服务器，因为此指令可以接受多个 URI，用空格分隔）。
- en: Since the server is running on the same machine that we are going to be running
    client commands from, we should set the URI to `ldap://localhost`. This URI specifies
    that the default client connection should be made using the (unencrypted) LDAP
    protocol over the loopback interface (`127.0.0.1` or `localhost`). Since no port
    is specified it will use the default LDAP port, which is 389.
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为服务器运行在我们将要执行客户端命令的同一台机器上，所以我们应该将 URI 设置为 `ldap://localhost`。这个 URI 指定了默认的客户端连接应通过回环接口（`127.0.0.1`
    或 `localhost`）使用（未加密的）LDAP 协议。由于没有指定端口，它将使用默认的 LDAP 端口，即 389。
- en: The second directive is `BASE`. This tells the client programs where to start
    their search in the directory. It takes a full DN as a value. In this case we
    set it to the base DN of the server—to the DN of the root entry in our directory
    tree, so that all searches will start at the root.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个指令是 `BASE`。它告诉客户端程序从目录中的哪里开始搜索。它接受一个完整的 DN 作为值。在这种情况下，我们将其设置为服务器的基础 DN——即我们目录树中根条目的
    DN，以便所有搜索都从根开始。
- en: You may recall that when we were working on the database configuration section
    of `slapd.conf`, we set this same base DN, `dc=example,dc=com`, as the suffix
    for the database stored there. So, what we have done here is told the client to
    start at the same directory tree root that the server manages. This is generally
    the most convenient way to configure `BASE` in the `ldap.conf` file.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能还记得，当我们在 `slapd.conf` 中配置数据库时，我们将相同的基础 DN，`dc=example,dc=com`，设置为存储在那里数据库的后缀。所以，我们在这里所做的就是告诉客户端从服务器管理的相同目录树根开始。这通常是配置
    `BASE` 在 `ldap.conf` 文件中最方便的方式。
- en: The third directive, `BINDDN`, specifies the default DN that will be used when
    connecting to the server. In this file I have set it to the manager's DN, `cn=Manager,dc=example,dc=com`.
    While this will be very helpful when it comes to the examples in the next chapter
    it is not, in general, a good idea, and should never be set this way in a production
    environment. Usually the `BINDDN` default value should be set to a user that has
    limited privileges, or it should be omitted (in which case no default DN will
    be used).
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个指令是 `BINDDN`，它指定了连接服务器时使用的默认 DN。在这个文件中，我将其设置为管理员的 DN，`cn=Manager,dc=example,dc=com`。虽然这在下一章的示例中会非常有帮助，但通常来说，这并不是一个好主意，绝不应在生产环境中这样设置。通常，`BINDDN`
    的默认值应该设置为一个具有有限权限的用户，或者应该省略（在这种情况下将不会使用默认 DN）。
- en: Size and Time Limits
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大小和时间限制
- en: The next two directives, `SIZELIMIT` and `TIMELIMIT`, indicate the upper limits
    on the number of records returned (`SIZELIMIT`) and the amount of time the client
    will wait for the server to respond (`TIMELIMIT`). Here we have set both to 0,
    a special value for these directives that indicates that there should be no limit.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个指令，`SIZELIMIT` 和 `TIMELIMIT`，分别表示返回记录的最大数量（`SIZELIMIT`）和客户端等待服务器响应的最大时间（`TIMELIMIT`）。在这里，我们将它们都设置为
    0，这是这两个指令的一个特殊值，表示没有限制。
- en: 'The way that size and time limits are handled can be a little confusing. On
    the client side there are two ways of specifying these limits: through the `ldap.conf`
    configuration file (as we are doing here) and through command-line parameters
    (as we will see in the next chapter).'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 大小和时间限制的处理方式可能会有点让人困惑。在客户端一侧，有两种方式可以指定这些限制：通过 `ldap.conf` 配置文件（正如我们在这里所做的）和通过命令行参数（我们将在下一章中看到）。
- en: However, the `SIZELIMIT` and `TIMELIMIT` directives above are not exactly defaults
    in the usual sense of the word. They are the absolute upper limit that the client
    can request. With command-line arguments the client can specify lower time and
    size limits, and those lower numbers will be used. But if the client attempts
    to specify larger size or time limits, they will be ignored, and the values of
    `SIZELIMIT` and `TIMELIMIT` will be used instead.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，上面提到的 `SIZELIMIT` 和 `TIMELIMIT` 指令并不完全是通常意义上的默认值。它们是客户端可以请求的绝对上限。通过命令行参数，客户端可以指定更低的时间和大小限制，并且这些较低的数值将会被使用。但如果客户端试图指定更大的大小或时间限制，它们将被忽略，改为使用
    `SIZELIMIT` 和 `TIMELIMIT` 的值。
- en: But the story doesn't end here. The SLAPD server can also define size and time
    limits (with the `limits`, `sizelimit` and `timelimit` directives in `slapd.conf`).
    If a client specifies a limit higher than the server's, the server will ignore
    the client's limit and use its own. We will look more at setting server limits
    in Chapter 5.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 但事情并不止于此。SLAPD 服务器还可以定义大小和时间限制（通过 `slapd.conf` 中的 `limits`、`sizelimit` 和 `timelimit`
    指令）。如果客户端指定的限制超过了服务器的限制，服务器将忽略客户端的限制，并使用自己的限制。我们将在第 5 章中进一步探讨如何设置服务器限制。
- en: Now we have a functioning `ldap.conf` file that will alleviate the need to specify
    these parameters on the command line.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个有效的`ldap.conf`文件，它将减少在命令行中指定这些参数的需求。
- en: The last thing we need to do in this chapter is to use an OpenLDAP client to
    test out the SLAPD server.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一件事是使用OpenLDAP客户端来测试SLAPD服务器。
- en: Testing the Server
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试服务器
- en: At this point, we have a SLAPD server configured and running, and we have an
    `ldap.conf` file that specifies many of the defaults for our tools. Now we are
    going to query the directory and fetch some information.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经配置并启动了一个SLAPD服务器，并且拥有一个指定了许多默认设置的`ldap.conf`文件。现在，我们将查询目录并获取一些信息。
- en: We haven't actually put any entries in our database, though. So what will we
    query? SLAPD does provide directory-based access to certain information, including
    currently-loaded schemas and subschemas, configuration information, and a special
    record called the **root DSE**. The root DSE (**DSA-Specific Entry**, where **DSA**
    stands for **Directory Service Agent**—the technical term for an LDAP server)
    is a special entry that provides information about the server itself. Like all
    other entries in an LDAP, the root DSE has a DN. Unlike all other entries, the
    root DSE's DN is an empty string.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们还没有在数据库中放入任何条目。那么我们查询什么呢？SLAPD确实提供了对某些信息的基于目录的访问，包括当前加载的架构和子架构、配置信息，以及一个名为**根DSE**的特殊记录。根DSE（**DSA特定条目**，其中**DSA**代表**目录服务代理**—LDAP服务器的技术术语）是一个特殊条目，提供有关服务器本身的信息。与LDAP中的所有其他条目一样，根DSE也有一个DN。与所有其他条目不同，根DSE的DN是一个空字符串。
- en: 'Why use an empty string for a DN? The answer is simple: any client can connect
    to the server and find out about what sorts of operations the server supports,
    and all of this can be done without requiring the client to know anything about
    the directory structures hosted on the server. All it must do is perform a search
    with an empty DN.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么使用空字符串作为DN？答案很简单：任何客户端都可以连接到服务器，并了解服务器支持哪些操作，所有这些都可以在不需要客户端知道服务器上托管的目录结构的情况下完成。客户端只需执行一个空DN的搜索。
- en: Note
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: The LDAPv3 Directory Information Models specification (RFC 4512) states that
    a root DSE with an empty DN be provided by any standards-compliant LDAP server.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: LDAPv3目录信息模型规范（RFC 4512）规定，任何符合标准的LDAP服务器都应该提供一个带空DN的根DSE。
- en: The root DSE contains information about what version of the LDAP protocol the
    server supports, what extensions to that protocol the server supports, and other
    useful information that helps clients fruitfully interact with the directory.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 根DSE包含有关服务器支持的LDAP协议版本、服务器支持的协议扩展以及其他有助于客户端与目录有效交互的有用信息。
- en: We will search for this entry using the `ldapsearch` command-line client.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ldapsearch`命令行客户端搜索此条目。
- en: 'Because of the restrictive way in which we set up our ACLs, we will have to
    authenticate to the directory in order to see the root DSE. And since we have
    only one defined user, the directory manager, we will log in as that user and
    perform a search for the root DSE:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们设置的ACL方式限制性较强，我们将需要身份验证才能查看根DSE。由于我们只有一个定义的用户，即目录管理员，因此我们将以该用户身份登录，并执行对根DSE的搜索：
- en: '[PRE26]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'All of the above should go on one line at a shell prompt. In order to do the
    search, we must specify several different parameters:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 上述所有内容应当在shell提示符下放在一行中。为了进行搜索，我们必须指定多个不同的参数：
- en: '`-x`: This tells the server to use simple authentication (instead of the more
    complicated, but more secure, SASL authentication).'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x`：这告诉服务器使用简单身份验证（而不是更复杂但更安全的SASL身份验证）。'
- en: '`-W`: This tells the client to prompt us for an interactive password. The client
    will give the following prompt:'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-W`：这告诉客户端提示我们输入交互式密码。客户端将显示以下提示：'
- en: '[PRE27]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`-D ''cn=Manager`,`dc=example`,`dc=com''`: This specifies the DN that we want
    to use to connect to the directory. In this case, we are using the directory manager
    account.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-D ''cn=Manager'',''dc=example'',''dc=com''`：这指定了我们希望用于连接目录的DN。在本例中，我们使用的是目录管理员账户。'
- en: '`-b ""`: This sets the base DN for the search. In the `ldap.conf` file we set
    the default base to be `dc=example,dc=com`. But to get the root DSE, which is
    not under `dc=example,dc=com`, we need to specify an empty search base.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-b ""`：这设置了搜索的基准DN。在`ldap.conf`文件中，我们将默认基准设置为`dc=example,dc=com`。但是为了获取根DSE（它不在`dc=example,dc=com`下），我们需要指定一个空的搜索基准。'
- en: '`-s base`: This indicates that we want to search for just one (base) entry—the
    entry with the DN specified in the `-b` parameter (the empty DN of the root DSE).'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s base`：这表示我们只想搜索一个（基础）条目——在`-b`参数中指定的DN条目（根DSE的空DN）。'
- en: 'When we run this search, this is the result returned from the server:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行此搜索时，这是服务器返回的结果：
- en: '[PRE28]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'At the top of the result is a summary of how the search was processed. The
    highlighted portion shows the root DSE entry. The server returned three attributes:
    the `dn` (which is empty) and two object class specifications.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 结果顶部是搜索处理方式的总结。高亮部分显示了根DSE条目。服务器返回了三个属性：`dn`（为空）和两个对象类规范。
- en: 'The last section, beneath the highlighted section, displays a summary, including
    how many records were returned (two: the DSE entry and the summary) and the error
    code (`0` for success).'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 高亮部分下方的最后一节显示了一个总结，包括返回了多少条记录（两条：DSE条目和总结）以及错误代码（`0`表示成功）。
- en: This record is sparse, containing only a few attributes. And it doesn't give
    us much information about the directory's configuration or capabilities. But the
    root DSE contains much more information than appears here. How to we get at that
    information?
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 该记录很简洁，仅包含少数几个属性。它没有提供关于目录配置或能力的太多信息。但根DSE包含的信息远不止这些。我们该如何获取这些信息呢？
- en: To get more extensive information out of the root DSE, we need to query for
    all of the **operational attributes** for the record.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从根DSE获取更广泛的信息，我们需要查询该记录的所有**操作属性**。
- en: Note
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Operational attributes, as explained in Chapter 1, are attributes that are intended
    for internal use. RFC 4512 states that many of the root DSE's attributes be treated
    as operational attributes.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 如第1章所述，操作属性是用于内部的属性。RFC 4512规定，根DSE的许多属性应视为操作属性。
- en: 'Here''s a modified version of the search that adds a filter for any object
    class `''(objectclass=*)''`, and a request for all operational attributes (`+`).
    Since we are using the asterisk character (`*`) in the filter, the filter must
    be enclosed in single quotes to avoid shell expansion:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个修改过的搜索版本，增加了对任意对象类`'(objectclass=*)'`的过滤，并请求所有操作属性（`+`）。由于我们在过滤器中使用了星号字符（`*`），所以过滤器必须用单引号括起来，以避免shell扩展：
- en: '[PRE29]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output of this command looks something like this:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出大致如下：
- en: '[PRE30]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Again the results above are for the same record—the root DSE record. Only now
    we get a much bigger record, containing all of the operational attributes for
    the record.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的结果再次是相同的记录——根DSE记录。只是现在我们得到了一个更大的记录，包含了该记录的所有操作属性。
- en: The information returned from the server this time includes lists of supported
    features, extensions, controls, and SASL mechanisms (most of which are not particularly
    human-friendly).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 这次从服务器返回的信息包括支持的功能、扩展、控制和SASL机制的列表（其中大多数并不特别适合人类阅读）。
- en: While many of the items in this record are not useful to us right now, some
    can be very useful in practice. For example, the supportedLDAPVersion attribute
    indicates what version of the LDAP protocol this server uses. The namingContexts
    attribute gives the base DN for each directory information tree hosted on this
    server. The supportedSASLMechanisms list tells us what sort of authentication
    routines can be performed when doing a SASL bind (which we will look at in detail
    in Chapter 4).
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然记录中的许多项目当前对我们并不有用，但其中一些在实际应用中可能非常有用。例如，`supportedLDAPVersion`属性指示该服务器使用的LDAP协议版本。`namingContexts`属性给出了该服务器上托管的每个目录信息树的基础DN。`supportedSASLMechanisms`列表告诉我们在执行SASL绑定时可以进行哪些身份验证例程（我们将在第4章中详细讨论）。
- en: Some LDAP client programs will even query the root DSE and use this information
    to determine what kinds of operations the server will support, adjusting the client's
    own features to the level of service provided by the server.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 一些LDAP客户端程序甚至会查询根DSE，并利用这些信息来确定服务器支持哪些操作，调整客户端自身的功能以适应服务器提供的服务级别。
- en: What is most important about this exercise though, is that we have verified
    that we have successfully configured the SLAPD server, as well as the OpenLDAP
    clients. We have connected, authenticated (using a simple bind), and retrieved
    a record from the LDAP server.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个练习中最重要的是，我们已经验证了成功配置了SLAPD服务器和OpenLDAP客户端。我们已经连接、认证（使用简单绑定），并从LDAP服务器中检索到了一条记录。
- en: Summary
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The focus of this chapter has been on installing and configuring the OpenLDAP
    suite of tools. We installed OpenLDAP on an Ubuntu system, and then walked through
    the process of authoring a `slapd.conf` file. Once we had created and tested `slapd.conf`,
    we turned to the `ldap.conf` file, which contains settings and defaults used by
    the OpenLDAP clients. Finally, we used `ldapsearch` to request the root DSE record
    from the directory, verifying that we had both the client and the server configured.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是安装和配置 OpenLDAP 工具套件。我们在 Ubuntu 系统上安装了 OpenLDAP，然后讲解了如何编写 `slapd.conf`
    文件。创建并测试了 `slapd.conf` 后，我们转向了 `ldap.conf` 文件，它包含 OpenLDAP 客户端使用的设置和默认值。最后，我们使用
    `ldapsearch` 从目录中请求根 DSE 记录，验证了客户端和服务器都已正确配置。
- en: In the next chapter, we will walk through the OpenLDAP utilities and client
    applications. In the process of doing this we will add some records to our directory.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讲解 OpenLDAP 工具和客户端应用程序。在此过程中，我们会向目录中添加一些记录。

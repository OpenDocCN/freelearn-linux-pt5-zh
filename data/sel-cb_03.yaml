- en: Chapter 3. Confining Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。限制Web应用程序
- en: 'In this chapter, we will cover the default confinement of the web server domain
    and practice how to enhance this policy to suit our needs. We will also look into
    `mod_selinux` and how it can be used to confine web applications even further.
    All this will be handled through the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖Web服务器域的默认限制，并练习如何调整此策略以适应我们的需求。我们还将研究`mod_selinux`及其如何进一步限制Web应用程序。所有这些将通过以下方法处理：
- en: Listing conditional policy support
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出条件性策略支持
- en: Enabling user directory support
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用用户目录支持
- en: Assigning web content types
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配Web内容类型
- en: Using different web server ports
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的Web服务器端口
- en: Using custom content types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义内容类型
- en: Creating a custom CGI domain
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义CGI域
- en: Setting up mod_selinux
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置mod_selinux
- en: Starting Apache with limited clearance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用有限清除启动Apache
- en: Mapping HTTP users to contexts
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将HTTP用户映射到上下文
- en: Using source address mapping to decide on contexts
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用源地址映射来决定上下文
- en: Separating virtual hosts with mod_selinux
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用mod_selinux分隔虚拟主机
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Web applications are a prime example of where SELinux can prove its effectiveness.
    They are often facing the (untrusted) Internet and are a popular target to exploit.
    Securing the web server and web applications is just one of the basic mitigating
    strategies though—by confining the web server, we are reducing the results of
    a successful exploit even further.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序是SELinux可以证明其有效性的主要示例。它们经常面对（不受信任的）互联网，并且是攻击的热门目标。尽管保护Web服务器和Web应用程序只是基本的缓解策略之一，但通过限制Web服务器，我们进一步减少了成功利用的结果。
- en: A well-confined web server will only allow operations towards the operating
    system that are acceptable behavior for the service. But considering the wide
    area of services that can be provided through a web server, we must be careful
    not to open up too many privileges.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个良好限制的Web服务器只允许向操作系统进行服务的可接受行为。但考虑到可以通过Web服务器提供的广泛服务领域，我们必须小心不要开放过多的权限。
- en: Policy developers have foreseen the situation that the web server domain might
    be too broad in its privileges and have made the web server domain (`httpd_t`)
    not only very versatile, but also very configurable. In this chapter, we will
    look into the domain in more detail.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 策略开发人员已预见到Web服务器域可能在其权限上过于广泛，并且已使Web服务器域（`httpd_t`）不仅非常多才多艺，而且非常可配置。在本章中，我们将更详细地研究该域。
- en: Listing conditional policy support
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出条件性策略支持
- en: The first configurable aspect of the SELinux web server domain policy is its
    wide use of SELinux Booleans. Through these Booleans, additional policy rules
    can be selectively enabled or disabled. In this recipe, we'll look at the Booleans
    and see how these can be toggled.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux Web服务器域策略的第一个可配置方面是其广泛使用SELinux布尔值。通过这些布尔值，可以选择性地启用或禁用附加策略规则。在本教程中，我们将查看这些布尔值，并了解如何切换它们。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In order to list the conditional policy support, execute the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了列出条件性策略支持，请执行以下步骤：
- en: 'Request the list of all SELinux Booleans and selectively show those starting
    with `httpd_`:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求所有SELinux布尔值的列表，并有选择地显示以`httpd_`开头的那些：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To get a short description together with the Booleans, we can use `semanage`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获得与布尔值一起的简短描述，我们可以使用`semanage`：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If the description of a Boolean isn''t sufficient, we can ask the SELinux utilities
    to display the SELinux rules that will be enabled (or disabled) if the Boolean
    is set:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果布尔值的描述不足够，我们可以请求SELinux实用程序显示将在设置布尔值时启用（或禁用）的SELinux规则：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Conditional SELinux policy support is provided through SELinux Booleans. These
    are configurable parameters (with a `true`/`false` value), which an administrator
    can enable or disable using the `setsebool` or `semanage boolean` command.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过SELinux布尔值提供条件性SELinux策略支持。这些是可配置的参数（具有`true`/`false`值），管理员可以使用`setsebool`或`semanage
    boolean`命令启用或禁用。
- en: 'With the `getsebool` command, we request an overview of all SELinux Booleans.
    Recent policies have a few hundred Booleans assigned, but luckily most Booleans
    follow one of the two following naming conventions that make filtering easier:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`getsebool`命令，我们请求所有SELinux布尔值的概述。最近的策略分配了几百个布尔值，但幸运的是，大多数布尔值遵循以下两种命名约定之一，这使得过滤更容易：
- en: A Boolean starts with `allow_` or `use_`
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值以`allow_`或`use_`开头
- en: A Boolean starts with the SELinux policy module prefix
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值以SELinux策略模块前缀开头
- en: Booleans that start with `allow_` or `use_` are considered global Booleans and
    will usually affect multiple SELinux policy modules. A good example for such a
    Boolean is `allow_execmem`, which enables several domains to execute code stored
    in writable memory rather than read-only memory (this is a harmful, but sometimes
    unavoidable memory permission setting).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以`allow_`或`use_`开头的布尔值被认为是全局布尔值，通常会影响多个SELinux策略模块。一个很好的例子是`allow_execmem`，它允许多个域在可写内存中执行代码，而不是在只读内存中执行代码（这是一个有害但有时不可避免的内存权限设置）。
- en: Most, if not all other Booleans start with the SELinux policy module prefix
    that they are applied to. For the web server, this is `httpd_` (even though the
    policy is called apache, the `httpd_` prefix is chosen because the policy can
    apply directly on various web servers, not only on the Apache HTTPd).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数，甚至所有其他布尔值都以它们所应用的SELinux策略模块前缀开始。对于Web服务器来说，这是`httpd_`（尽管策略名为apache，但选择`httpd_`前缀是因为该策略可以直接应用于各种Web服务器，而不仅仅是Apache
    HTTPd）。
- en: When we use the `semanage boolean` command, a short description is provided
    for the Booleans. This description is obtained from an XML file called `policy.xml`,
    which can be found at `/usr/share/selinux/devel/`. The XML file is generated during
    the build of the base SELinux policy.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`semanage boolean`命令时，会提供关于布尔值的简短描述。这个描述来自一个名为`policy.xml`的XML文件，可以在`/usr/share/selinux/devel/`目录下找到。该XML文件是在构建基本SELinux策略时生成的。
- en: The most accurate description of a Boolean, however, is the set of rules that
    it would trigger when enabled or disabled. This is where the `sesearch` command
    comes into play.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，布尔值的最准确描述是它启用或禁用时会触发的一组规则。这就是`sesearch`命令发挥作用的地方。
- en: As can be seen from the example, Booleans will trigger one or more allow rules.
    The prefix to the `sesearch` output tells us whether a shown rule is active if
    the Boolean is true (`T`) or false (`F`), and if the rule is currently enabled
    (`E`) in the policy or disabled (`D`).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如示例所示，布尔值将触发一个或多个允许规则。`sesearch`输出的前缀告诉我们，如果布尔值为真（`T`）或假（`F`），显示的规则是否处于活动状态，以及该规则是否在策略中启用（`E`）或禁用（`D`）。
- en: 'A nice trick when querying the SELinux policy using `sesearch` is to ask for
    Boolean-managed rules as well (regardless of whether they are currently enabled
    or disabled). This can be accomplished by adding the `–C` option (which is the
    short option for `--show_cond`). For instance, to find the transitions of the
    `newrole_t` domain, the following command can be used:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`sesearch`查询SELinux策略时，一个不错的技巧是同时查询布尔值管理的规则（无论它们当前是否启用或禁用）。这可以通过添加`–C`选项来实现（该选项是`--show_cond`的简写）。例如，要查找`newrole_t`域的转换，可以使用以下命令：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'The `httpd_selinux` manual page lists all SELinux Booleans that are applicable
    to the Apache SELinux module and explains their purpose in more detail:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`httpd_selinux`手册页面列出了所有适用于Apache SELinux模块的SELinux布尔值，并详细解释了它们的用途：'
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Enabling user directory support
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用用户目录支持
- en: Let's look at an example of how to use SELinux Booleans applicable to web server
    installations. In this recipe, we'll enable Apache UserDir support (allowing the
    web server to serve local user account web pages at `http://sitename/~username`).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个如何使用适用于Web服务器安装的SELinux布尔值的示例。在这个示例中，我们将启用Apache UserDir支持（允许Web服务器在`http://sitename/~username`处提供本地用户账户的网页）。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Configure the Apache web server to serve user content. An entire Apache configuration
    tutorial would be in place here, but this is not in the scope of this book. Basically,
    this is done by editing the `httpd.conf` file and setting the `UserDir` directive.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Apache Web服务器以提供用户内容。这里本应包括完整的Apache配置教程，但这超出了本书的范围。基本上，这是通过编辑`httpd.conf`文件并设置`UserDir`指令来完成的。
- en: How to do it…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To enable user directory support, follow the next set of steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用用户目录支持，请按照以下步骤操作：
- en: Make sure that the user's home directory is accessible for the Apache runtime
    account with the following commands. If Linux DAC denies access, SELinux will
    not even handle the request.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保用户的主目录对于Apache运行时账户是可访问的，使用以下命令。如果Linux DAC拒绝访问，SELinux甚至不会处理该请求。
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Check that access isn't already allowed by surfing to a user page. If all permissions
    are okay but SELinux denies access, then the page should be served with a 403
    (forbidden) error and a denial should be registered in the audit logs. The Apache
    error logs would yield a permission denied against the resource.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查访问是否已经被允许，可以通过访问用户页面来确认。如果所有权限都正确，但 SELinux 拒绝访问，则页面应返回 403（禁止访问）错误，并且拒绝访问的操作应记录在审计日志中。Apache
    错误日志会显示对该资源的权限拒绝。
- en: 'The audit logs will probably tell that `httpd_t` isn''t allowed to act on `home_root_t`
    or `user_home_dir_t`. From a look through the SELinux Booleans, we find at least
    two interesting Booleans (`httpd_enable_homedirs` and `httpd_read_user_content`):'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审计日志可能会显示 `httpd_t` 不允许对 `home_root_t` 或 `user_home_dir_t` 执行操作。通过查看 SELinux
    布尔值，我们发现至少有两个有趣的布尔值（`httpd_enable_homedirs` 和 `httpd_read_user_content`）：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s first toggle `httpd_read_user_content`. This allows the web server to
    access all user files, which is functionally okay, but this also immediately grants
    it access to all files:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先切换 `httpd_read_user_content`。这允许 Web 服务器访问所有用户文件，功能上是可以的，但这也立即赋予它对所有文件的访问权限：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Another approach (but this approach requires user intervention) is to have
    `~/public_html/` labeled as `httpd_user_content_t`. When this is done, `httpd_read_user_content`
    can be turned off and `httpd_enable_homedirs` can be enabled:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一种方法（但这种方法需要用户干预）是将 `~/public_html/` 标记为 `httpd_user_content_t`。完成后，可以关闭 `httpd_read_user_content`
    并启用 `httpd_enable_homedirs`：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When the changes are working nicely, we can persist the changes so that they
    survive a reboot:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当更改工作正常时，我们可以使更改持久化，以便它们在重启后仍然有效：
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: The default web server policy in SELinux does not allow the web server to access
    user home content. If a vulnerability in a web application or the Apache web server
    itself would allow an attacker to read user content, SELinux will prevent this
    from happening. But, sometimes, user content access is needed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux 中的默认 Web 服务器策略不允许 Web 服务器访问用户的主目录内容。如果 Web 应用程序或 Apache Web 服务器本身存在漏洞，允许攻击者读取用户内容，SELinux
    将阻止这种情况的发生。但有时，确实需要访问用户内容。
- en: By enabling the `httpd_read_user_content` Boolean, the web server domain (and
    all related domains) will have full read access to all user files. If users are
    not able (or do not know how) to set the proper context on their files, then this
    is the only suitable option.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过启用 `httpd_read_user_content` 布尔值，Web 服务器域（及所有相关域）将拥有对所有用户文件的完全读取权限。如果用户无法（或不知道如何）为其文件设置正确的上下文，则这是唯一合适的选项。
- en: 'A better approach, however, is to enable the `httpd_enable_homedirs` Boolean.
    This allows the web server search access through the home directory (`/home/user/`,
    which is labeled `user_home_dir_t`) but does not provide read access to user content
    (which is labeled `user_home_t`). Instead, the resources needed for the web server
    are labeled `httpd_user_content_t`—a type that regular users can relabel resources
    to (or relabel resources from). Next to `httpd_user_content_t`, one can also define
    the following content types:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，更好的方法是启用 `httpd_enable_homedirs` 布尔值。这允许 Web 服务器访问主目录（`/home/user/`，标记为 `user_home_dir_t`），但不提供对用户内容（标记为
    `user_home_t`）的读取权限。相反，Web 服务器所需的资源被标记为 `httpd_user_content_t` —— 这是常规用户可以重新标记资源的类型（或从中重新标记资源）。在
    `httpd_user_content_t` 旁边，还可以定义以下内容类型：
- en: '`httpd_user_htaccess_t` for the `.htaccess` files'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`httpd_user_htaccess_t` 用于 `.htaccess` 文件'
- en: '`httpd_user_script_exec_t` for user-provided CGI scripts'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`httpd_user_script_exec_t` 用于用户提供的 CGI 脚本'
- en: '`httpd_user_ra_content_t` for appendable resources (for the web server)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`httpd_user_ra_content_t` 用于可附加的资源（供 Web 服务器使用）'
- en: '`httpd_user_rw_content_t` for read/write resources (for the web server)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`httpd_user_rw_content_t` 用于读/写资源（供 Web 服务器使用）'
- en: These resources can be set by the end user and give a finer control over how
    each resource within the `~/public_html/` location can be handled by the web server
    (and the web applications).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些资源可以由最终用户设置，提供对 `~/public_html/` 目录中每个资源如何被 Web 服务器（及 Web 应用）处理的更精细控制。
- en: There's more...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: Some SELinux supporting distributions have a daemon called `restorecond`, which
    can be used to automatically set the context of files the moment they are created/detected,
    without needing file transitions in policy. This can be used to automatically
    have `~/public_html/` labeled as `httpd_user_content_t`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一些支持 SELinux 的发行版有一个名为 `restorecond` 的守护进程，可以在文件创建/检测时自动设置文件的上下文，而无需在策略中进行文件转换。这样可以自动将
    `~/public_html/` 标记为 `httpd_user_content_t`。
- en: See also
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: More information about per-user web directories can be found at [https://httpd.apache.org/docs/2.4/howto/public_html.html](https://httpd.apache.org/docs/2.4/howto/public_html.html)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关每个用户 Web 目录的更多信息，可以参考 [https://httpd.apache.org/docs/2.4/howto/public_html.html](https://httpd.apache.org/docs/2.4/howto/public_html.html)
- en: Assigning web content types
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分配 Web 内容类型
- en: For standard web server configurations (without SELinux), access rights on resources
    for a web server are purely based on the ownership of the files (and the access
    mask applied to it). With SELinux, the resources can be labeled more specifically
    towards their functional meaning.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于标准 Web 服务器配置（没有 SELinux），Web 服务器的资源访问权限完全依赖于文件的所有权（以及应用于它的访问掩码）。使用 SELinux
    后，资源可以根据其功能意义进行更具体的标记。
- en: Web applications have content that should be read-only and content that should
    be read-write, but there are also specific types for resources such as `.htaccess`
    files. In this recipe, we'll look at the various web server content types and
    apply them to the right resources.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Web 应用程序包含应为只读内容和应为读写内容的资源，但也有针对 `.htaccess` 文件等资源的特定类型。在这个示例中，我们将查看各种 Web 服务器内容类型，并将它们应用于正确的资源。
- en: How to do it…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Execute the following steps to assign specific web content types to the right
    resources:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤，将特定的 Web 内容类型分配给正确的资源：
- en: 'Take a look at the available content types for web servers by asking SELinux
    to show us all types that have the `httpdcontent` attribute set:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过请求 SELinux 显示所有具有 `httpdcontent` 属性的类型，来看一下可用于 Web 服务器的内容类型：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Query the existing policy for known context assignations (as those can give
    us pointers to what is still lacking):'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询现有策略中的已知上下文分配（因为这些可以为我们提供哪些内容仍然缺失的线索）：
- en: '[PRE11]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, assign the right context to those resources that aren''t labeled correctly
    yet. The paths used here are an example for a Nagios installation:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将正确的上下文分配给那些尚未正确标记的资源。这里使用的路径是 Nagios 安装的示例：
- en: '[PRE12]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: 'The web server policy supports functional content types for web applications.
    These types are used for the following content types:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器策略支持用于 Web 应用程序的功能性内容类型。这些类型用于以下内容类型：
- en: Read-only content of the web application
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 应用程序的只读内容
- en: Writable content of the web application (for which a distinction is made between
    full writable content and content that can only be appended to, such as logfiles)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 应用程序的可写内容（对于可写内容与仅可追加内容（如日志文件）之间的区分）
- en: Executable scripts (for CGI scripts and similar content)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可执行脚本（用于 CGI 脚本和类似内容）
- en: The advantage is not so much that there is the distinction of read-only versus
    read-write, but that this is supported on a per-application basis, with types
    that are specific to one application. In the example, we looked at the content
    for the Nagios monitoring application.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个优势不在于只读与读写的区分，而在于这种支持是基于每个应用程序的，且具有特定于单个应用程序的类型。在此示例中，我们查看了 Nagios 监控应用程序的内容。
- en: This allows administrators to provide access to these resources towards specific
    applications or users. Even though all content in `/var/www/html/` might be owned
    by the Apache Linux user, we can still grant users (and applications) access to
    application-specific resources without needing to grant those users or applications
    full privileges on all Apache resources.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得管理员可以向特定的应用程序或用户提供对这些资源的访问权限。即使 `/var/www/html/` 中的所有内容都可能归 Apache Linux
    用户所有，我们仍然可以向用户（和应用程序）授予对特定于应用程序的资源的访问权限，而无需授予这些用户或应用程序对所有 Apache 资源的完全权限。
- en: For the read-only content, there is the regular web application content (`httpd_nagios_content_t`)
    and the special `.htaccess` content (`httpd_nagios_htaccess_t`). The distinction
    is made primarily because access to the regular content is given more broadly
    (and depending on some SELinux Booleans, this can also become writable content),
    whereas the `.htaccess` content remains read-only.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于只读内容，有常规的 Web 应用程序内容类型（`httpd_nagios_content_t`）和特殊的 `.htaccess` 内容类型（`httpd_nagios_htaccess_t`）。这种区分主要是因为对常规内容的访问权限更广泛（并且根据一些
    SELinux 布尔值，这也可能成为可写内容），而 `.htaccess` 内容则保持只读。
- en: To query the available web server content, we used the `httpdcontent` attribute.
    This attribute is assigned to all content, allowing administrators to create policies
    that govern all web content. The `httpdcontent` attribute is given to all these
    types, but there are also attributes called `httpd_rw_content`, `httpd_ra_content`,
    `httpd_htaccess_type`, and `httpd_script_exec_type` to allow for manipulation
    of those specific resources.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查询可用的 web 服务器内容，我们使用了 `httpdcontent` 属性。此属性分配给所有内容，允许管理员创建管理所有 web 内容的策略。`httpdcontent`
    属性赋给了所有这些类型，但也有名为 `httpd_rw_content`、`httpd_ra_content`、`httpd_htaccess_type`
    和 `httpd_script_exec_type` 的属性，用于允许操作这些特定资源。
- en: There's more...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: We covered Nagios as an example web application, which has a set of web application
    related resources. Many other web applications or applications with web content
    have already been identified policy-wise.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以 Nagios 作为示例 web 应用，它有一组与 web 应用相关的资源。许多其他 web 应用或具有 web 内容的应用已经在策略上被识别。
- en: 'On Linux distributions that have all known policies loaded by default, this
    overview will already be visible through the `seinfo` command as per our preceding
    example. If that isn''t the case, we can always search through the SELinux policies
    to find out which modules call the `apache_content_template`—the interface that
    automatically generates the right web application content types:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有已知策略默认加载的 Linux 发行版上，通过 `seinfo` 命令可以看到此概述，如我们前面的示例所示。如果不是这种情况，我们可以通过搜索 SELinux
    策略来找出哪些模块调用了 `apache_content_template`——该接口会自动生成正确的 web 应用内容类型：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When different types become more troublesome than helpful, it is possible to
    ask the SELinux policy to see all those different types as just one common web
    content type and be done with it. This is supported through the `httpd_unified`
    Boolean. When this Boolean is enabled, the web server policy will treat all various
    web server resource types as one, unifying all the types. And, if the Booleans,
    `httpd_enable_cgi` and `httpd_builtin_scripting`, are enabled as well, then the
    web server domain has the privilege to execute that content as well.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当不同类型的资源变得比有用更麻烦时，可以要求 SELinux 策略将所有这些不同类型视为一个通用的 web 内容类型，处理完成即可。这是通过 `httpd_unified`
    布尔值来支持的。当启用此布尔值时，web 服务器策略将把所有不同的 web 服务器资源类型视为一个统一类型。如果 `httpd_enable_cgi` 和
    `httpd_builtin_scripting` 布尔值也被启用，那么 web 服务器域就拥有执行该内容的权限。
- en: Needless to say, unifying the web server resource contexts might make management
    simpler; it also increases the privileges of the web server domain towards various
    web resources, making it potentially less secure.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 不用多说，统一 web 服务器资源上下文可能使管理变得更简单；但它也会增加 web 服务器域对各种 web 资源的权限，从而可能降低安全性。
- en: Using different web server ports
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同的 web 服务器端口
- en: By default, web servers listen on the known web server ports (such as ports
    `80` and `443`). Often, administrators might want to have the web server listen
    on a nondefault port. The SELinux policy might reject this, as it is not standard
    behavior for a web server to listen on other unrelated ports.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，web 服务器监听已知的 web 服务器端口（如端口`80`和`443`）。通常，管理员可能希望让 web 服务器监听非默认端口。SELinux
    策略可能会拒绝这种做法，因为 web 服务器在其他不相关端口上监听并不是标准行为。
- en: In this recipe, we will tell SELinux that a nondefault port should still be
    seen as a web server port.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将告诉 SELinux，一个非默认端口仍应视为 web 服务器端口。
- en: How to do it…
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In order to assign a label to a different port, execute the following steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将标签分配给不同的端口，请执行以下步骤：
- en: 'To see all the ports that match `http_port_t`, use `semanage port -l`:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要查看所有匹配 `http_port_t` 的端口，请使用 `semanage port -l`：
- en: '[PRE14]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Query the SELinux policy to see which port type is assigned to a particular
    port. For instance, for port `8881`, the following command is used:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询 SELinux 策略以查看特定端口分配了哪个端口类型。例如，对于端口`8881`，可以使用以下命令：
- en: '[PRE15]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If the port is identified as `unreserved_port_t`, then we can mark it as `http_port_t`:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果端口被标识为 `unreserved_port_t`，则我们可以将其标记为 `http_port_t`：
- en: '[PRE16]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If, however, the port has been already assigned a particular type, then we
    need to update the SELinux policy for the web server to allow it to listen on
    ports of this particular type. For instance, for port `9090` (`websm_port_t`),
    perform the following steps:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，如果端口已分配了特定类型，则需要更新 SELinux 策略，使 web 服务器允许在该特定类型的端口上监听。例如，对于端口 `9090`（`websm_port_t`），请执行以下步骤：
- en: 'First find the interface that allows binding on `websm_port_t`:'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，找到允许绑定到 `websm_port_t` 的接口：
- en: '[PRE17]'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a custom SELinux policy (`myhttpd`) with the following content:'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个自定义 SELinux 策略（`myhttpd`），其内容如下：
- en: '[PRE18]'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Load the policy to allow the web server to bind on the identified port type.
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载策略以允许 Web 服务器绑定到指定的端口类型。
- en: 'Finally, edit the web server configuration file to listen to the right port:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，编辑 Web 服务器配置文件以监听正确的端口：
- en: '[PRE19]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: SELinux works with labels for all resources, including ports. In this example,
    we are looking at TCP port types to allow the web server to bind to.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux 使用标签管理所有资源，包括端口。在本示例中，我们关注的是允许 Web 服务器绑定的 TCP 端口类型。
- en: With `seinfo`, we can see whether a port matches a known declaration. Ports
    with a value of `1024` or higher are, by default, labeled as `unreserved_port_t`,
    whereas, ports `511` or lower are labeled as `reserved_port_t` and those in between
    are labeled as `hi_reserved_port_t`. These are, however, defaults and more specific
    port types might be declared for a specific port.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`seinfo`，我们可以查看端口是否与已知声明匹配。默认情况下，值为 `1024` 或更高的端口会标记为 `unreserved_port_t`，而
    `511` 或更低的端口则标记为 `reserved_port_t`，介于两者之间的端口标记为 `hi_reserved_port_t`。这些是默认设置，某些端口可能会为特定端口声明更具体的类型。
- en: If a port is not assigned a specific type yet, then we can assign one ourselves
    using `semanage port`. This is sufficient to allow the web server to bind to this
    port (there is no need for relabeling operations on ports, unlike files or directories,
    as this is done by the SELinux subsystem immediately).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果端口尚未分配特定类型，我们可以使用`semanage port`手动分配。这足以让 Web 服务器绑定到该端口（与文件或目录不同，端口不需要重新标签操作，因为
    SELinux 子系统会立即完成这项工作）。
- en: If a port is already assigned a specific type, then it cannot be overridden
    by additional policies or the administrator. When this occurs, the SELinux policy
    will need to be enhanced to allow the web server to bind to this specific type.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果端口已分配特定类型，则无法通过其他策略或管理员覆盖。当发生这种情况时，SELinux 策略需要增强，以允许 Web 服务器绑定到该特定类型。
- en: In the example, we searched for the interface that would allow the web server
    to bind to the port, revealing `corenet_tcp_bind_websm_port` as the interface
    to use. However, we also added another interface—this is due to the way network
    controls are configured in SELinux, and may or may not be necessary on a system.
    The additional interface is `corenet_sendrecv_websm_server_packets`. This interface
    is used to allow the web server to send or receive packets labeled as `websm_server_packet_t`.
    Packet labeling allows for application-specific communication flow governance
    and extends the regular firewall capabilities of the Linux operating system (which
    focus primarily on network flow management) with SELinux domain awareness.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们搜索了允许 Web 服务器绑定到端口的接口，发现 `corenet_tcp_bind_websm_port` 是可以使用的接口。然而，我们还添加了另一个接口—这是由于
    SELinux 中网络控制配置的方式，这可能在某些系统上是必要的，也可能不需要。额外的接口是 `corenet_sendrecv_websm_server_packets`。此接口用于允许
    Web 服务器发送或接收标记为 `websm_server_packet_t` 的数据包。数据包标记使得应用程序特定的通信流治理成为可能，并通过 SELinux
    域感知扩展了 Linux 操作系统的常规防火墙功能（主要集中在网络流量管理上）。
- en: 'If packet labeling is needed, then packets are labeled through `iptables` on
    a local system, as shown in the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要对数据包进行标记，可以通过在本地系统上使用`iptables`对数据包进行标记，如以下命令所示：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If a system does not have such iptables-based labeling (known as SECMARK labeling),
    then the interface is not needed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统没有基于 iptables 的标记（称为 SECMARK 标记），则不需要接口。
- en: There's more...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Recent SELinux user space utilities have another command available to query
    the SELinux policy, called `sepolicy`. Searching for port declarations with `sepolicy`
    is done as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的 SELinux 用户空间工具提供了另一个命令，用于查询 SELinux 策略，叫做`sepolicy`。使用`sepolicy`搜索端口声明的方法如下：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Also, in the SELinux policy rules, we will notice that there is a third interface
    often enabled for network communication. In our example, the third interface would
    be called `corenet_tcp_sendrecv_websm_port`. This access vector would enable the
    domain to send and receive messages on the `websm_port_t` TCP socket. However,
    the support for this access vector has been disabled in recent policies in favor
    of SECMARK labeling.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 SELinux 策略规则中，我们会注意到网络通信通常会启用第三个接口。在我们的示例中，第三个接口将被称为`corenet_tcp_sendrecv_websm_port`。此访问向量将使域能够在`websm_port_t`
    TCP 套接字上发送和接收消息。然而，在最近的策略中，出于对 SECMARK 标记的支持，已禁用对该访问向量的支持。
- en: See also
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: SECMARK labeling is explored in [Chapter 9](ch09.html "Chapter 9. Aligning SELinux
    with DAC"), *Aligning SELinux with DAC*
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SECMARK 标签在[第9章](ch09.html "第9章. 将SELinux与DAC对齐")中进行了探讨，*将SELinux与DAC对齐*。
- en: Using custom content types
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义内容类型
- en: Next up is to create our own set of content types for a web application that
    does not have a policy associated with it yet. We will use **DokuWiki** (available
    at [https://www.dokuwiki.org](https://www.dokuwiki.org)) as an example.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是为尚未与策略关联的 Web 应用程序创建我们自己的内容类型。我们将以**DokuWiki**（可以访问 [https://www.dokuwiki.org](https://www.dokuwiki.org)）为例。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Install DokuWiki either through the Linux distributions' package manager or
    manually through a downloaded release from the main site. In this example, we
    assume that DokuWiki is installed at `/srv/web/dokuwiki/`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Linux 发行版的包管理器或通过从主站点下载发布版本手动安装 DokuWiki。在此示例中，我们假设 DokuWiki 安装在 `/srv/web/dokuwiki/`
    目录下。
- en: How to do it…
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To use custom web content types, follow the next set of steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用自定义 Web 内容类型，请按照以下步骤操作：
- en: 'Create a policy called `mydokuwiki.te` with the following content:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `mydokuwiki.te` 的策略文件，内容如下：
- en: '[PRE22]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add a file context definition file called `mydokuwiki.fc`, which contains the
    following code:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `mydokuwiki.fc` 的文件上下文定义文件，内容如下：
- en: '[PRE23]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Build and load the policy and then relabel all DokuWiki files using the following
    commands:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并加载策略，然后使用以下命令重新标记所有 DokuWiki 文件：
- en: '[PRE24]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'All the magic associated with creating web application content in SELinux is
    handled by the `apache_content_template` interface. With `seshowif`, one can show
    all underlying SELinux policy rules as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 所有与在 SELinux 中创建 Web 应用程序内容相关的魔法都由 `apache_content_template` 接口处理。使用 `seshowif`，可以显示所有底层的
    SELinux 策略规则，如下所示：
- en: Various SELinux types are created, such as `httpd_dokuwiki_content_t` and the
    like, and the proper attributes are assigned to it (such as the `httpdcontent`
    attribute).
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了各种 SELinux 类型，如 `httpd_dokuwiki_content_t` 等，并为其分配了适当的属性（例如 `httpdcontent`
    属性）。
- en: An SELinux Boolean is created, which allows the administrator to enable or disable
    the web application to write to public files (labeled as `public_content_rw_t`).
    This is an SELinux type used for resources that are shared across multiple services
    (such as FTP servers, web servers, and many more).
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个 SELinux 布尔值，它允许管理员启用或禁用 Web 应用程序写入公共文件（标记为`public_content_rw_t`）。这是一个用于多个服务共享资源的
    SELinux 类型（例如 FTP 服务器、Web 服务器等）。
- en: The necessary privileges are granted to the web server domain to access and
    handle the newly defined types, as well as enabling CGI domains for the web application.
    For our DokuWiki example, this is not needed as everything is handled by the PHP
    code parsed and executed by the web server itself (usually).
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必要的权限授予 Web 服务器域，以便访问和处理新定义的类型，并启用 Web 应用程序的 CGI 域。对于我们的 DokuWiki 示例，通常不需要此操作，因为所有内容都由
    Web 服务器本身解析并执行的 PHP 代码处理。
- en: We then labeled all DokuWiki files accordingly, based on the DokuWiki best practices
    for file access. Some administrators might want to have the `conf/` subdirectory
    labeled as a nonwritable resource, and only (temporarily) enable this during the
    configuration. Although this is a valid approach, it might be sufficient to use
    Linux DAC file access controls to accomplish the same results.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们根据 DokuWiki 的最佳实践标记了所有 DokuWiki 文件。某些管理员可能希望将 `conf/` 子目录标记为不可写资源，并仅在配置过程中（临时）启用此设置。虽然这是一个有效的方法，但使用
    Linux DAC 文件访问控制可能足以实现相同的结果。
- en: There's more...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: Using the `apache_content_template` interface is a simple way to create web
    content types, but it has the downside that it is an all-or-nothing approach,
    and the module now heavily depends on the web server module (`apache`).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `apache_content_template` 接口是创建 Web 内容类型的简单方法，但它的缺点是它是一个全有或全无的方法，并且该模块现在高度依赖于
    Web 服务器模块（`apache`）。
- en: Experienced users might want to selectively create content and assign the right
    attributes to it, allowing the web server domain to interact with the resources
    while still keeping granular control over the types and resources.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 经验丰富的用户可能希望选择性地创建内容并为其分配正确的属性，允许 Web 服务器域与资源进行交互，同时仍然对类型和资源保持细粒度的控制。
- en: We'll leave this as an exercise that you can do to see how this can be accomplished.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个任务留给你来完成，看看如何实现它。
- en: Creating a custom CGI domain
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个自定义 CGI 域
- en: Sometimes, it might not be necessary to create a full set of types. Consider
    a CGI script that is triggered but without the need for a specific set of content
    types. Sure, one can mark the script as `httpd_sys_script_exec_t` (if it is a
    system's CGI script) or `httpd_user_script_exec_t` (if it is a user's custom CGI
    script) so that the resulting script runs in the `httpd_sys_script_t` or `httpd_user_script_t`
    domain.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，可能不需要创建一整套类型。考虑一下触发的CGI脚本，但不需要特定的内容类型集。可以将脚本标记为`httpd_sys_script_exec_t`（如果它是系统的CGI脚本）或`httpd_user_script_exec_t`（如果它是用户自定义的CGI脚本），这样结果脚本将在`httpd_sys_script_t`或`httpd_user_script_t`域中运行。
- en: But, if those domains do not hold enough privileges (or too many privileges),
    it might be wise to create a custom CGI domain instead.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果这些域没有足够的权限（或者权限过多），则最好创建一个自定义的CGI域。
- en: How to do it…
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To create a custom CGI domain, the following approach can be used:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义CGI域时，可以使用以下方法：
- en: 'Create a custom SELinux policy module (`mycgiscript.te`) with the following
    content:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个自定义的SELinux策略模块（`mycgiscript.te`），内容如下：
- en: '[PRE25]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create the proper file context file (`mycgiscript.fc`), marking the executable
    as `cgiscript_exec_t`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建适当的文件上下文文件（`mycgiscript.fc`），并将可执行文件标记为`cgiscript_exec_t`：
- en: '[PRE26]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Build and load the module.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并加载模块。
- en: 'Relabel the executable and test it out:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新标记可执行文件并进行测试：
- en: '[PRE27]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As the `cgiscript_t` domain is primitive in its rights, the script will most
    likely not work—however, do not turn SELinux in permissive mode. The audit logs
    will show the access attempts that were denied. Instead of using `audit2allow`
    to automatically grant everything, use the `sefindif` function to find a proper
    interface. Add the right interfaces to the module and retry until the script works
    properly.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`cgiscript_t`域在权限上较为初级，脚本很可能无法正常工作——然而，不要将SELinux设置为宽容模式。审计日志会显示被拒绝的访问尝试。与其使用`audit2allow`自动授予所有权限，不如使用`sefindif`功能找到合适的接口。将正确的接口添加到模块中，然后重试，直到脚本正常工作。
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The policy module defines a domain type (`cgiscript_t`) and an executable type
    (`cgiscript_exec_t`). With the `domain_type` interface, `cgiscript_t` is marked
    as a domain (and the proper SELinux rules to deal with this new domain are created
    as well). With `domain_entry_type`, the SELinux policy is updated to mark `cgiscript_exec_t`
    as the type that can be used to transition towards the `cgiscript_t` domain.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 策略模块定义了一个域类型（`cgiscript_t`）和一个可执行类型（`cgiscript_exec_t`）。通过`domain_type`接口，`cgiscript_t`被标记为一个域（并且为处理这个新域创建了适当的SELinux规则）。通过`domain_entry_type`，SELinux策略被更新，标记`cgiscript_exec_t`为可以用于过渡到`cgiscript_t`域的类型。
- en: Then, we call `apache_cgi_domain`, which allows the web server domain (`httpd_t`)
    to execute the `cgiscript_exec_t` labeled resources and have the resulting process
    run in the `cgiscript_t` domain.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们调用`apache_cgi_domain`，允许Web服务器域（`httpd_t`）执行标记为`cgiscript_exec_t`的资源，并使结果进程在`cgiscript_t`域中运行。
- en: 'The initial policy module, however, is very primitive and will not hold enough
    privileges. It is a matter of trial and error to update the policy. For instance,
    consider that the script calls a binary; the audit logs might show the following
    content:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最初的策略模块非常初级，权限不足。更新策略需要通过反复试验。例如，假设脚本调用了一个二进制文件；审计日志可能会显示如下内容：
- en: '[PRE28]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To find out which policy interface would allow this, we can use `sefindif`
    again:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找出哪种策略接口允许这样做，我们可以再次使用`sefindif`：
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Developing custom policies remains a trial-and-error approach, but this is the
    only method available, which ensures that only necessary privileges are granted
    to a domain. Some policy developers would suggest to turn on the permissive mode
    and look through all denials in the audit logs. The problem with that approach
    is that these denials might not lead to the right SELinux policy rules.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 开发自定义策略仍然是一个试错过程，但这是唯一的方法，确保只授予域必要的权限。一些策略开发人员建议开启宽容模式，并查看审计日志中的所有拒绝信息。使用这种方法的问题是，这些拒绝可能无法导致正确的SELinux策略规则。
- en: For instance, the script might need to call another executable (and transition
    to a domain). In permissive mode, the transition will not occur, and it would
    look like the main domain (`cgiscript_t`) needs all privileges that the target
    command needs—even though all that is needed is a proper domain transition.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，脚本可能需要调用另一个可执行文件（并进行域过渡）。在宽容模式下，过渡不会发生，看起来主域（`cgiscript_t`）需要所有目标命令所需的权限——即使实际上只需要一个适当的域过渡。
- en: By focusing on the enforcing mode, we can gradually increase the policy while
    keeping the *least privilege* principle in place, only allowing those privileges
    that are actually needed.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过专注于强制模式，我们可以逐步增加策略，同时保持*最小特权*原则，只允许实际需要的权限。
- en: Setting up mod_selinux
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置mod_selinux
- en: In the next set of recipes, we use an Apache module called `mod_selinux` to
    make Apache SELinux-aware and to support configurable transitions. In other words,
    the context in which Apache is running is no longer a statically defined context,
    but can be changed according to the administrators' needs.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个教程中，我们使用一个名为`mod_selinux`的Apache模块，使Apache能够感知SELinux并支持可配置的转换。换句话说，Apache运行的上下文不再是一个静态定义的上下文，而是可以根据管理员的需求进行更改。
- en: In this recipe, we will install `mod_selinux` from its source as many Linux
    distributions do not offer it by default, even though it is a very powerful addition
    to the web server (which is also why support for `mod_selinux` is often called
    Apache/SELinux Plus).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将从源代码安装`mod_selinux`，因为许多Linux发行版默认并未提供它，尽管它是Web服务器非常强大的一个扩展（这也是为什么`mod_selinux`的支持常被称为Apache/SELinux
    Plus的原因）。
- en: How to do it…
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'You can set up `mod_selinux` through the following steps:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下步骤设置`mod_selinux`：
- en: Download the sources from [https://github.com/kaigai/mod_selinux](https://github.com/kaigai/mod_selinux).
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/kaigai/mod_selinux](https://github.com/kaigai/mod_selinux)下载源代码。
- en: Make sure that the Apache development headers (`httpd-devel` on Red Hat or Fedora
    systems) are installed.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保安装了Apache开发头文件（在Red Hat或Fedora系统中为`httpd-devel`）。
- en: 'Build and install the `mod_selinux` shared library for Apache using `apxs`:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`apxs`构建并安装`mod_selinux`共享库以供Apache使用：
- en: '[PRE30]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It may be possible that the build fails with an error about `client_ip`. If
    that is the case, edit `mod_selinux.c` at the line number shown in the error and
    use `remote_ip` instead of `client_ip`, after which the `apxs` command can be
    run again.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果构建时出现关于`client_ip`的错误，可能是因为此问题。如果是这种情况，编辑错误中显示的行号处的`mod_selinux.c`文件，并使用`remote_ip`替换`client_ip`，然后可以再次运行`apxs`命令。
- en: 'Build and install the `mod_selinux` SELinux policy module, whose files are
    also part of the downloaded sources:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并安装`mod_selinux` SELinux策略模块，其文件也是下载源代码的一部分：
- en: '[PRE31]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Edit the web server configuration (`httpd.conf`) and add in the proper `LoadModule`
    line:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑Web服务器配置文件（`httpd.conf`），并添加适当的`LoadModule`行：
- en: '[PRE32]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Restart the web server. Its logfiles should tell you that the SELinux policy
    support is loaded:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启Web服务器。其日志文件应显示SELinux策略支持已加载：
- en: '[PRE33]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'The `mod_selinux.c` file contains the Apache module code and can be built using
    `apxs`—the Apache eXtenSion tool. This tool will perform the following tasks:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_selinux.c`文件包含Apache模块代码，可以使用`apxs`—Apache扩展工具进行构建。此工具将执行以下任务：'
- en: Call the compiler with the proper arguments to build a dynamic shared object
    that can be loaded at runtime by the Apache web server
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用正确的编译器参数调用编译器，构建一个可以在运行时由Apache Web服务器加载的动态共享对象
- en: Install the resulting module in the proper Apache `modules/` directory
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将生成的模块安装到适当的Apache `modules/`目录中
- en: The build failure mentioned in the recipe can come up depending on the Apache
    version in use, where a variable has a different name (`client_ip` instead of
    `remote_ip`).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中提到的构建失败可能取决于所使用的Apache版本，其中一个变量的名称不同（`client_ip`而非`remote_ip`）。
- en: Next, we copied and deployed the `mod_selinux` SELinux policy just like we did
    with other SELinux policy modules.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们像设置其他SELinux策略模块一样，复制并部署了`mod_selinux`的SELinux策略。
- en: Finally, the web server is updated to enable the `mod_selinux` Apache module.
    With the `mod_selinux` shared library in place, Apache is now ready to make SELinux-related
    decisions.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Web服务器被更新以启用`mod_selinux` Apache模块。随着`mod_selinux`共享库的就位，Apache现在准备好做出与SELinux相关的决策。
- en: If the `mod_selinux` support has to be distributed to multiple systems, then
    only the `mod_selinux.so` (now installed in the web server `modules/` directory,
    such as `/usr/lib64/httpd/modules/`) and `mod_selinux.pp` files (the SELinux policy
    module) need to be distributed.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`mod_selinux`支持需要分发到多个系统，则只需要分发`mod_selinux.so`（现在已安装在Web服务器`modules/`目录中，例如`/usr/lib64/httpd/modules/`）和`mod_selinux.pp`文件（SELinux策略模块）。
- en: See also
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: A good write-up on `mod_selinux` can be found at [http://code.google.com/p/sepgsql/wiki/Apache_SELinux_plus](http://code.google.com/p/sepgsql/wiki/Apache_SELinux_plus)
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`mod_selinux`的详细介绍可以在[http://code.google.com/p/sepgsql/wiki/Apache_SELinux_plus](http://code.google.com/p/sepgsql/wiki/Apache_SELinux_plus)找到。
- en: Starting Apache with limited clearance
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用有限权限启动 Apache
- en: In the previous chapter, we manipulated the `/etc/rc.d/init.d/httpd init` script
    to use `runcon` in order for the web server to run with a limited clearance. But
    with the help of `mod_selinux`, this can be made configurable.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章节中，我们操作了 `/etc/rc.d/init.d/httpd init` 脚本，使用 `runcon` 使 web 服务器以有限权限运行。但借助
    `mod_selinux`，这一点可以变得可配置。
- en: How to do it…
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'In order to start Apache with limited security clearance, follow the given
    steps:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用有限的安全许可启动 Apache，请按照以下步骤操作：
- en: 'Edit the Apache web server configuration file (`httpd.conf`) and add in the
    following code:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 Apache web 服务器配置文件（`httpd.conf`）并添加以下代码：
- en: '[PRE34]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Undo the changes made to the service script in the previous chapter.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 撤销在上一章节中对服务脚本所做的更改。
- en: 'Restart the web server and confirm that it is running with the `s0-s0:c0.c10`
    clearance by issuing the following commands:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动 web 服务器并通过执行以下命令确认它正在以 `s0-s0:c0.c10` 清除权限运行：
- en: '[PRE35]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: As mentioned before, with `mod_selinux`, the Apache web server becomes SELinux-aware,
    meaning it can alter its own behavior and interact with the SELinux subsystem
    based on configuration settings as well as SELinux policy rules.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，通过 `mod_selinux`，Apache web 服务器变得支持 SELinux，这意味着它可以根据配置设置和 SELinux 策略规则改变自己的行为并与
    SELinux 子系统进行交互。
- en: With the `selinuxServerDomain` configuration directive, `mod_selinux` performs
    a dynamic change of the current context to a new context, which is called a dynamic
    domain transition or dynamic range transition (it is called domain if the type
    changes, range if the sensitivity level or security clearance changes). This is
    only possible if an application is SELinux-aware.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `selinuxServerDomain` 配置指令，`mod_selinux` 会动态更改当前上下文到新上下文，这称为动态域过渡或动态范围过渡（如果类型发生变化则称为域过渡，若敏感度级别或安全许可发生变化则称为范围过渡）。只有应用程序是
    SELinux 感知的情况下，这才是可能的。
- en: Now, such a transition is still governed through SELinux policies. For instance,
    the range to which the Apache web server can transition must be dominated by the
    range the Apache web server originally has (which was `s0-s0:c0.c1024` in our
    example).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这样的过渡仍然通过 SELinux 策略进行控制。例如，Apache web 服务器可以过渡的范围必须由 Apache web 服务器最初拥有的范围主导（在我们的示例中为
    `s0-s0:c0.c1024`）。
- en: Note
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `mod_selinux` module does not support lookups on the context, making it
    impossible to use human-readable sensitivities (governed through `mcstransd` as
    we've seen previously).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_selinux` 模块不支持上下文查询，因此无法使用人类可读的敏感度（如我们之前所见，通过 `mcstransd` 控制）。'
- en: There's more...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'It is possible to define different types, allowing the entire web server to
    run in a custom domain. For this to happen, the `httpd_t` domain must have the
    rights to dynamically transition to the target type (the `dyntransition` permission
    in the `process` class). Then, the `selinuxServerDomain` call could look like
    the following code:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 可以定义不同的类型，允许整个 web 服务器运行在自定义域中。为了实现这一点，`httpd_t` 域必须具备动态过渡到目标类型的权限（即 `process`
    类中的 `dyntransition` 权限）。然后，`selinuxServerDomain` 调用可能如下所示：
- en: '[PRE36]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Of course, many more privileges are needed as well in order to access resources
    already accessible by the `httpd_t` domain at startup, but the `dyntransition`
    permission is specific to the SELinux-aware applications that want to support
    dynamic domain transitions instead of transitioning upon process execution.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，为了访问启动时 `httpd_t` 域已经可以访问的资源，还需要更多的权限，但 `dyntransition` 权限特定于希望支持动态域过渡的 SELinux
    感知应用程序，而不是在进程执行时进行过渡。
- en: Mapping HTTP users to contexts
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 HTTP 用户映射到上下文
- en: Applications generally run with a static context, which inhibits all privileges
    that are needed for the application. Even services (daemons) generally stay within
    their own context during the entire life cycle of the service. But, with `mod_selinux`,
    it is possible to transition the context of the web server handler (the process
    or thread responsible for handling a specific request) to another context based
    on the authenticated user. This allows the administrator to grant certain privileges
    to the application based on the user. When a lower-privileged user abuses a vulnerability
    in the web application, then the reduced privileges on the web application itself
    might prevent a successful exploit.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序通常在静态上下文中运行，这会限制应用程序所需的所有权限。即便是服务（守护进程）通常也会在服务生命周期内保持在自己的上下文中。但是，通过`mod_selinux`，可以根据已认证的用户将
    web 服务器处理程序（负责处理特定请求的进程或线程）的上下文切换到另一个上下文。这允许管理员根据用户授予应用程序某些权限。当一个权限较低的用户利用 web
    应用中的漏洞时，web 应用本身的权限限制可能会阻止成功的攻击。
- en: How to do it…
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Through the following set of steps, we will map a web user to a specific SELinux
    context:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤，我们将把 web 用户映射到一个特定的 SELinux 上下文：
- en: 'Create a mapping file in which the users are listed together with their target
    context. For instance, to have user John''s requests handled with the sensitivity
    `s0:c0,c2`, user Cindy''s requests with the sensitivity `s0:c0.c5,c7`, all unauthenticated
    users as `anon_webapp_t:s0`, and the other authenticated users as `user_webapp_t:s0:c0`:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个映射文件，其中列出了用户及其目标上下文。例如，将用户 John 的请求处理为敏感度`s0:c0,c2`，将用户 Cindy 的请求处理为敏感度`s0:c0.c5,c7`，所有未认证用户的请求处理为`anon_webapp_t:s0`，其他已认证用户的请求处理为`user_webapp_t:s0:c0`：
- en: '[PRE37]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Save this file on a web server-readable location, such as `/etc/httpd/conf/mod_selinux.map`.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件保存到 web 服务器可读取的位置，例如`/etc/httpd/conf/mod_selinux.map`。
- en: 'Edit the web server configuration file and add in the following line:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 web 服务器配置文件，并添加以下行：
- en: '[PRE38]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Restart the web server.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 web 服务器。
- en: How it works...
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: The `mod_selinux` module is aware of the authenticated user value and, based
    on the settings in the mappings file, it can transition the request handler to
    a smaller sensitivity range (as is the case in the first two examples) or to different
    domains altogether.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_selinux`模块能够识别已认证用户的值，并且根据映射文件中的设置，它可以将请求处理程序的上下文切换到较低的敏感度范围（如前两个示例中所示），或者完全切换到不同的域。'
- en: 'There is an important constraint to this though. The target context to which
    the handler can transition must be bound by the main type (`httpd_t`). This means
    that the permissions granted to the target context must be a subset of the permissions
    granted to `httpd_t`. This is performed through the `typebounds` statement, as
    follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这里有一个重要的限制。请求处理程序可以过渡的目标上下文必须受主类型（`httpd_t`）的约束。这意味着授予目标上下文的权限必须是授予`httpd_t`权限的子集。这是通过`typebounds`语句来实现的，如下所示：
- en: '[PRE39]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This is because web server handlers are usually threads (or lightweight processes)
    instead of processes. Threads share a lot of resources, often in ways that SELinux
    cannot manage. As a result, if one thread gains more rights than the web server,
    then the secure state of the web server (as a whole) might be in jeopardy. Also,
    the information flow between different contexts would be difficult, if not impossible
    to govern.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 web 服务器处理程序通常是线程（或轻量级进程），而不是进程。线程共享许多资源，通常是以 SELinux 无法管理的方式共享的。因此，如果某个线程获得的权限超过
    web 服务器的权限，那么整个 web 服务器的安全状态可能会受到威胁。此外，不同上下文之间的信息流动将变得困难，甚至几乎不可能进行管理。
- en: Using source address mapping to decide on contexts
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用源地址映射来决定上下文
- en: The `mod_selinux` Apache module has access to other information than just the
    username (in case of authenticated users). It can access environment variables
    (which are used in the Apache web configuration through the `SetEnvIf` directives),
    allowing a very flexible approach on SELinux context handling within the application.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_selinux` Apache 模块可以访问除用户名之外的其他信息（对于已认证用户）。它可以访问环境变量（这些变量通过`SetEnvIf`指令在
    Apache web 配置中使用），从而允许在应用程序中对 SELinux 上下文的处理更加灵活。'
- en: In this recipe, we will use this to change the context of request handlers based
    on the remote IP address of the client.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将根据客户端的远程 IP 地址来更改请求处理程序的上下文。
- en: How to do it…
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Alongside web users, we can also use source address information to decide on
    the context. This is done by completing the following steps:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Web用户，我们还可以使用源地址信息来决定上下文。可以通过完成以下步骤来实现：
- en: 'First, we define the `TARGETDOMAIN` environment variable based on the remote
    IP address in the web server configuration (`httpd.conf`):'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们在Web服务器配置（`httpd.conf`）中基于远程IP地址定义`TARGETDOMAIN`环境变量：
- en: '[PRE40]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then, in the same web server configuration, we invoke the `selinuxDomainEnv`
    directive, which will have the handler context transitioned to the value inside
    `TARGETDOMAIN`:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在同一Web服务器配置中，我们调用`selinuxDomainEnv`指令，这将使处理程序的上下文过渡到`TARGETDOMAIN`中的值：
- en: '[PRE41]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Restart the web server for the changes to take effect.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启Web服务器以使更改生效。
- en: How it works...
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the first step, we used Apache's `SetEnvIf` directive (provided through `mod_setenvif`)
    to check the remote IP address of the client (`Remote_Addr`). If it matches the
    expression given, then we set the `TARGETDOMAIN` variable to the given context.
    In our example, we used a different type for each match, but it is also possible
    to just change the security clearance. We finished with a check that verified
    if the `TARGETDOMAIN` variable has been set. If not, then a default value (`*:s0`)
    is assigned.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们使用了Apache的`SetEnvIf`指令（通过`mod_setenvif`提供）来检查客户端的远程IP地址（`Remote_Addr`）。如果它与给定的表达式匹配，我们就将`TARGETDOMAIN`变量设置为给定的上下文。在我们的示例中，我们为每个匹配使用了不同的类型，但也可以仅更改安全权限。最后，我们进行了一个检查，验证`TARGETDOMAIN`变量是否已被设置。如果没有，则分配一个默认值（`*:s0`）。
- en: Next, we called the `selinuxDomainEnv` directive, which makes a transition to
    the domain provided in the `TARGETDOMAIN` variable.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们调用了`selinuxDomainEnv`指令，它会使Web服务器的上下文切换到`TARGETDOMAIN`变量中提供的域。
- en: There's more...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The example uses `Remote_Addr`, but many other request-related aspects can
    be used:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 示例使用了`Remote_Addr`，但许多其他与请求相关的方面也可以使用：
- en: With `Remote_Host`, the hostname of the client can be queried and used to make
    decisions.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Remote_Host`，可以查询客户端的主机名并用来做出决策。
- en: With `Server_Addr`, the address of the web server itself (on which the request
    was received) can be used. This is useful in a multihomed system, where the web
    server binds to all available IP addresses.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Server_Addr`，可以使用Web服务器本身的地址（请求接收的服务器地址）。这在多宿主系统中非常有用，在这种系统中，Web服务器绑定到所有可用的IP地址。
- en: With `Request_Method`, the type of request (such as `GET` or `POST`) can be
    used.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Request_Method`，可以使用请求的类型（例如`GET`或`POST`）。
- en: With `Request_Protocol`, the name and version of the HTTP protocol (such as
    `HTTP/1.0` or `HTTP/1.1`) can be used.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Request_Protocol`，可以使用HTTP协议的名称和版本（例如`HTTP/1.0`或`HTTP/1.1`）。
- en: With `Request_URI`, the request URL can be used to tune the context or clearance.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Request_URI`，可以使用请求的URL来调整上下文或权限。
- en: See also
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: For more information about Apache's `mod_setenvif` support, consult the module
    documentation at [http://httpd.apache.org/docs/2.4/mod/mod_setenvif.html](http://httpd.apache.org/docs/2.4/mod/mod_setenvif.html)
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欲了解有关Apache的`mod_setenvif`支持的更多信息，请参考该模块文档：[http://httpd.apache.org/docs/2.4/mod/mod_setenvif.html](http://httpd.apache.org/docs/2.4/mod/mod_setenvif.html)
- en: Separating virtual hosts with mod_selinux
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`mod_selinux`分离虚拟主机
- en: One of Apache's strengths is that it can differentiate sites based on the name
    used to connect to the server, rather than just the IP address, port, and URL.
    This is called virtual host support and is a very popular approach to multitenant
    website and web application hosting.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Apache的一个优势是，它可以根据用于连接服务器的名称来区分站点，而不仅仅是IP地址、端口和URL。这被称为虚拟主机支持，是多租户网站和Web应用托管的非常流行的方法。
- en: For instance, a web server running on a single IP address can still host the
    sites of multiple customers, say `www.companyX.com` and `www.companyY.com`. With
    `mod_selinux`, we can change the context or security clearance of the web server
    request handlers based on the associated virtual host.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，运行在单一IP地址上的Web服务器仍然可以托管多个客户的网站，例如`www.companyX.com`和`www.companyY.com`。通过`mod_selinux`，我们可以根据关联的虚拟主机更改Web服务器请求处理程序的上下文或安全权限。
- en: How to do it…
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following approach distinguishes virtual host confinement through `mod_selinux`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法通过`mod_selinux`区分虚拟主机的限制：
- en: Decide on the contexts for the individual tenants. In the previous chapter,
    we used `s0:c100` for company X and `s0:c101` for company Y.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定各个租户的上下文。在前一章中，我们为公司X使用了`s0:c100`，为公司Y使用了`s0:c101`。
- en: 'In each virtual host, set the right clearance. For instance, for company X
    set the clearance as follows:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个虚拟主机中，设置正确的权限。例如，对于公司X，设置权限如下：
- en: '[PRE42]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Restart the web server for the changes to take effect.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 web 服务器以使更改生效。
- en: How it works...
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Unlike the `selinuxServerDomain` directive, which is for the entire web server,
    the `selinuxDomainVal` directive sets the context of the handlers (virtual hosts)
    individually. As we covered in the previous chapter, using multiple categories
    for a multitenant system is a flexible way of dealing with information isolation
    between tenants.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 与针对整个 web 服务器的 `selinuxServerDomain` 指令不同，`selinuxDomainVal` 指令单独设置处理程序（虚拟主机）的上下文。正如我们在上一章中讨论的那样，为多租户系统使用多个类别是一种灵活的方式，可以处理租户之间的信息隔离。
- en: 'An important difference with the previous chapter, however, is that the `mod_selinux`
    module does not use `mcstransd`. The following setting will fail:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与上一章的一个重要区别是，`mod_selinux` 模块不使用 `mcstransd`。以下设置将失败：
- en: '[PRE43]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Such a setting would result in the following error message by Apache:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的设置会导致 Apache 返回以下错误信息：
- en: '[PRE44]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: As such, we need to use the standard sensitivity notation.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要使用标准的敏感性表示法。
- en: See also
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: You can find more information about Apache virtual host support at [http://httpd.apache.org/docs/2.4/vhosts/](http://httpd.apache.org/docs/2.4/vhosts/)
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在 [http://httpd.apache.org/docs/2.4/vhosts/](http://httpd.apache.org/docs/2.4/vhosts/)
    上找到有关 Apache 虚拟主机支持的更多信息。

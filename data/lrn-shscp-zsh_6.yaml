- en: Chapter 6. Tips and Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章 提示与技巧
- en: So, this is where we part ways. We have come a long way since defining our first
    alias, so there's really not much left for us to discover, at least not with the
    number of pages left for us. Like a nosy neighbor though, I can't help but give
    you a few more tips before our journey ends.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是我们分道扬镳的地方。自从定义第一个别名以来，我们已经走了很长一段路，所以实际上没有太多东西需要我们去发现，至少在剩下的页面数量来看是这样。不过，就像一个爱管闲事的邻居一样，我忍不住在我们的旅程结束之前再给你一些小贴士。
- en: Main resources
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要资源
- en: Hold your horses there buddy. Before you start typing down tips and tweaking
    your configuration, it's important that I point you towards zsh's official site
    once again. Zsh's page is located at [http://www.zsh.org](http://www.zsh.org),
    and you can take your browser there to take a look at the *Frequently Asked Questions*
    section as well as other interesting entries such as **Scripts & contributions**.
    Turns out this is our main source of information for our new favorite shell, so
    I recommend you refer it to keep up with changes between releases and the awesome
    user guides and manuals located there.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等一下，伙计。在你开始输入提示和调整配置之前，我再次要把你引导到 zsh 的官方网站。zsh 的页面位于 [http://www.zsh.org](http://www.zsh.org)，你可以打开浏览器去查看
    *常见问题解答* 部分以及其他有趣的条目，如 **脚本与贡献**。原来这是我们了解我们新喜爱的 shell 的主要信息来源，所以我建议你参考它，以便跟上版本更新之间的变化，并查阅那里提供的精彩用户指南和手册。
- en: Perhaps the most feature-packed item on the list of recommendations is the zsh
    wiki ([http://zshwiki.org](http://zshwiki.org)). There you will find a lot of
    useful information about zsh together with tips and user-suggested configurations.
    Overall an excellent starting point for stuffing your startup files to the gills.
    It's worth noting that this is a user-maintained site, which means you can contribute
    to it by submitting your own configurations and scripts as well as editing existing
    content.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 也许在推荐清单中功能最全的项目就是 zsh wiki ([http://zshwiki.org](http://zshwiki.org))。在那里，你会找到关于
    zsh 的许多有用信息，附带技巧和用户推荐的配置。总体而言，这是为你的启动文件提供内容的绝佳起点。值得注意的是，这是一个由用户维护的网站，这意味着你可以通过提交自己的配置和脚本以及编辑现有内容来为其做出贡献。
- en: No project with the magnitude of zsh is without its mailing list. You can find
    zsh's located at [http://www.zsh.org/mla](http://www.zsh.org/mla) and have a look
    at the thousands of interesting discussions going on for more tips, tricks, and
    announcements that happen around the project. Remember, you can also use this
    for any impending questions you have regarding the shell and the project in general.
    Also an excellent starting point if you are looking forward to contributing to
    the project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一个像 zsh 这样庞大的项目会没有自己的邮件列表。你可以在 [http://www.zsh.org/mla](http://www.zsh.org/mla)
    找到 zsh 的邮件列表，并查看成千上万的有趣讨论，获取更多的提示、技巧和关于该项目的公告。记住，你也可以用它来提问有关 shell 和整个项目的任何问题。如果你打算为这个项目做出贡献，这也是一个很好的起点。
- en: Finally, for those inclined to "group chat", there's an IRC channel hosted on
    **freenode** ([http://freenode.net](http://freenode.net)) as `#zsh`. This is your
    go-to source to get help and discuss zsh with lots of other users.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于那些喜欢“群聊”的人，**freenode** 上有一个 IRC 频道 ([http://freenode.net](http://freenode.net))，名为
    `#zsh`。这是你获得帮助并与其他 zsh 用户讨论的首选渠道。
- en: Helping tips
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帮助提示
- en: What follows is a list of "nice things to have" on your configuration files,
    aliases, and functions. Think of these as a helping hand with some of the more
    boring tasks that involve the command line.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一些“配置文件、别名和函数中可以有的好东西”的清单。可以把这些看作是帮助你完成一些涉及命令行的无聊任务的小助手。
- en: Directory substitution
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录替换
- en: This is one of the cooler tricks you can pull with zsh, albeit a bit hidden
    from plain sight. Did you know you can use `cd` for switching between parallel
    directories without even typing the whole path? Let's work with an example.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你可以使用 zsh 实现的其中一个酷炫技巧，尽管它有点隐藏在不显眼的地方。你知道你可以使用 `cd` 在平行目录之间切换，而无需输入完整路径吗？让我们通过一个例子来演示一下。
- en: 'Say you were located in the directory `/zsh/completion/unix/`; now, see the
    following command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你位于目录 `/zsh/completion/unix/`；现在，看看下面的命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command would effectively move your current working directory to `/zsh/doc/unix/`,
    provided both the directories have the same tree structure and are located on
    the same branch level. I know, I too can't imagine myself living without it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令会将你的当前工作目录有效地移动到 `/zsh/doc/unix/`，前提是这两个目录具有相同的树形结构并位于同一分支级别。我知道，我也无法想象没有它我会怎么过日子。
- en: Remember, you can set the `AUTOCD` option to enable `cd` just by typing the
    name of a directory, provided that the directory exists and is not an ambiguous
    match, of course.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以设置 `AUTOCD` 选项，只需输入目录的名称，就能进入该目录，前提是该目录存在且不是模糊匹配。
- en: Magic space
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 魔法空格
- en: 'It''s safe to assume that you have been using the *Tab* key for completion
    so far, but the shell also provides a `magic-space` functionality that is really
    worth being bound to your space bar. Simply add the following code to your `.zshrc`
    file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以合理地假设到目前为止你已经在使用 *Tab* 键进行自动补全，但 shell 还提供了一个 `magic-space` 功能，真的值得绑定到你的空格键上。只需将以下代码添加到你的
    `.zshrc` 文件中：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And try typing something followed immediately by the space bar as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后尝试输入一些内容，并立即按下空格键，如下所示：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You'll notice what that "magic" means right away, as pressing the space bar
    now triggers history expansion on the current line.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你会立刻注意到这个“魔法”是什么意思，因为现在按下空格键会触发当前行的历史扩展。
- en: Random numbers
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机数
- en: I've lost track of how many times I needed an actual random number in order
    to fill in a form or make a completely arbitrary decision, just like those times
    you can't decide between cappuccino or latte.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经不记得多少次我需要一个真正的随机数来填写表格或做出完全随机的决策，就像那些你无法决定是喝卡布奇诺还是拿铁的时候一样。
- en: 'Let''s borrow a helping hand from our friend `$RANDOM` and sprinkle some arithmetic
    expansion on top. Putting everything together, we end up with the following alias:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们借用一下我们的朋友 `$RANDOM`，并在其上加上一些算术扩展。把所有内容放在一起，我们得到了如下的别名：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What this does is uses the `$RANDOM` internal function to get a *pseudorandom*
    number for us. We then use the *modulo* operator (`%`) to get the remainder of
    the division by 10; this way, we can get only numbers between `1` and `10`. The
    `1` being added that you see is there because the `1` to `10` range is actually
    interpreted by your computer as "0-9", which includes the first 10 digits, but
    is a bit less human friendly.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的作用是使用 `$RANDOM` 内置函数来获取一个 *伪随机* 数字。然后我们使用 *取模* 运算符（`%`）获取除以 10 的余数；这样，我们就能得到介于
    `1` 和 `10` 之间的数字。你看到的加上的 `1` 是因为计算机实际上将 `1` 到 `10` 的范围解释为“0-9”，它包含了前十个数字，但对人类来说不太友好。
- en: The whole expression is wrapped with the arithmetic expansion construction `$(())`
    that we learned about in [Chapter 2](ch02.html "Chapter 2. Alias and History"),
    *Alias and History*, and allows us to operate with numbers such as `$RANDOM`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 整个表达式用我们在[第 2 章](ch02.html "第 2 章. 别名与历史")中学到的算术扩展构造 `$(())` 包裹起来，*别名与历史*，这允许我们操作诸如
    `$RANDOM` 之类的数字。
- en: You can now go ahead and type `rand` every time you need an actual random number
    output on your terminal window.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次你需要一个真正的随机数输出时，你可以直接输入 `rand` 在你的终端窗口中。
- en: As a side note, keep in mind that, as with all things computer-generated, there's
    no such thing as a purely "random" event—unless you are talking to my boss about
    one of my bugs. Those are completely random phenomena—so don't rely on this for
    security or sensitive operations.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作为旁注，请记住，像所有计算机生成的内容一样，实际上没有纯粹的“随机”事件——除非你在和我的老板谈论我的某个 bug。那些完全是随机现象——所以不要依赖它用于安全或敏感操作。
- en: zcalc
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: zcalc
- en: Most times, math just catches us with an unfairly low caffeine level. Attempting
    algebra at those times usually calls for a quick calculator. Turns out zsh comes
    packed with just one of those.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，数学让我们在咖啡因水平过低时感到无助。在这种时候，尝试代数通常需要一个快速的计算器。事实证明，zsh 自带了一个这样的计算器。
- en: The way it works is similar to the `tetris` and `zle` modules; just add `autoload
    -Uz zcalc` to your `.zshrc` and type `zcalc` on your terminal emulator whenever
    the need arises. To exit `zcalc` just press *Ctrl* + *D*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理类似于 `tetris` 和 `zle` 模块；只需将 `autoload -Uz zcalc` 添加到你的 `.zshrc` 文件中，然后在终端模拟器中输入
    `zcalc` 以便在需要时使用。要退出 `zcalc`，只需按 *Ctrl* + *D*。
- en: Change and list directory contents
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改并列出目录内容
- en: Like many, many other users of shells out there, most of of the time with shell
    you will be switching between directories and listing their contents. It's reasonable
    to assume that during your normal workflow, you'll be calling `cd` and `ls` quite
    a lot.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就像许多其他使用 shell 的用户一样，大部分时间你会在目录之间切换并列出它们的内容。可以合理地假设，在你的正常工作流程中，你会经常调用`cd`和`ls`命令。
- en: 'Look at the following example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的示例：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Fret not, dear reader, you are not alone. Most fellow shell users feel your
    pain. Luckily, there''s something we can do about it, which involves a simple
    function to change our current working directory with `cd` and then calling ls
    to list the contents of the new directory as shown in the following code snippet:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心，亲爱的读者，你并不孤单。大多数 shell 用户都感同身受。幸运的是，我们可以做一些事情来解决这个问题，其中包括一个简单的函数，通过 `cd`
    改变当前工作目录，然后调用 `ls` 来列出新目录的内容，代码如下所示：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our new `cs` function will perform just like `cd`, but will list the contents
    of any directory we move to. The `$@` string you see there is the current command
    arguments we use when calling `cs`. These get passed in its entirety to `cd`,
    so we don't need to worry about handling them with the same finesse as the actual
    program. We then use the double ampersand logic operator `&&` (read that as "and")
    to chain the `ls` command with the `-A` option. This works as "execute `cd` and
    if it succeeds, call `ls -A`".
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新 `cs` 函数将像 `cd` 一样工作，但会列出我们切换到的任何目录的内容。你看到的 `$@` 字符串是我们调用 `cs` 时使用的当前命令参数。它们会完整地传递给
    `cd`，所以我们不需要像处理实际程序那样精细地处理它们。然后，我们使用双重与运算符 `&&`（读作“and”）将 `ls` 命令与 `-A` 选项串联起来。这就像“执行
    `cd`，如果成功，则调用 `ls -A`”。
- en: Put this on your startup files, and start changing directories by typing `cs`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将此添加到你的启动文件中，开始通过输入 `cs` 来切换目录。
- en: Finding your path through commands
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过命令查找你的路径
- en: 'We have used `which` many times already throughout this book, but it''s time
    for you to learn about yet another cool zsh feature, courtesy of the command substitution
    mechanism: the `=command` shortcut.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在本书中多次使用了 `which`，但现在是时候学习另一个酷炫的 zsh 特性了，它来自于命令替换机制：`=command` 快捷方式。
- en: 'Try the following command line, which should point you towards zsh''s binary
    location:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下命令行，它应该能指向 zsh 的二进制文件位置：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And now, let''s try using the equivalent shortcut:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用等效的快捷方式：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will work the same as `which` with a lot less typing as long as you remember
    to follow that equals sign immediately with the name of any program on your system.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你记得在等号后立即输入系统中任何程序的名称，这个方法就能像 `which` 一样工作，但需要的输入要少得多。
- en: Other projects
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他项目
- en: This section aims to point you towards some of the most interesting projects
    and resources out there. The whole point of these is to have something of an "extra
    spice" to add your zsh.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在引导你发现一些最有趣的项目和资源。这些的核心目的是为你的 zsh 增添一些“额外的调味料”。
- en: zsh-lovers
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: zsh-lovers
- en: The `zsh-lovers` project ([http://grml.org/zsh/zsh-lovers.html](http://grml.org/zsh/zsh-lovers.html))
    is a collection of useful tips, tricks, and examples that can be installed as
    a manual page and accessed from the terminal. One of the more interesting features
    of the project is the collection of examples for many of the "hidden"—or not so
    evident—features of zsh. Worth every byte, if only for the hundreds of hours of
    online searching it'll save you.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`zsh-lovers` 项目 ([http://grml.org/zsh/zsh-lovers.html](http://grml.org/zsh/zsh-lovers.html))
    是一个有用的技巧、窍门和示例集合，可以作为手册页面安装，并通过终端访问。这个项目的一个有趣特点是它收集了许多 zsh 中的“隐藏”功能（或者说不太显眼的功能）的示例。如果仅仅是节省数百小时的在线搜索时间，这些内容就值得每一个字节。'
- en: zsh-users
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: zsh-users
- en: The zsh users' repository on GitHub ([https://github.com/zsh-users](https://github.com/zsh-users))
    packs a lot of incredibly useful code. Of particular interest to any zsh user
    are the projects `zsh-syntax-highlighting` ([https://github.com/zsh-users/zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting))
    and `zsh-history-substring-search` ([https://github.com/zsh-users/zsh-history-substring-search](https://github.com/zsh-users/zsh-history-substring-search)).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 上的 zsh 用户仓库 ([https://github.com/zsh-users](https://github.com/zsh-users))
    包含了许多极其有用的代码。任何 zsh 用户特别感兴趣的项目有 `zsh-syntax-highlighting` ([https://github.com/zsh-users/zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting))
    和 `zsh-history-substring-search` ([https://github.com/zsh-users/zsh-history-substring-search](https://github.com/zsh-users/zsh-history-substring-search))。
- en: As the name implies, `zsh-syntax-highlighting` offers syntax highlighting similar
    to that available in the fish shell, whereas `zsh-history-substring-search` again
    borrows a page from the fish's functionality and does a history search by allowing
    you to type any part of a history entry and press the up or down arrow keys to
    cycle through the matching commands.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名字所暗示的，`zsh-syntax-highlighting` 提供了类似于 fish shell 中的语法高亮，而 `zsh-history-substring-search`
    再次借鉴了 fish 的功能，通过允许你输入历史记录条目的任何部分并按上下箭头键来切换匹配的命令，从而进行历史搜索。
- en: Also available on the zsh users' repository is the `zsh-completions` project
    ([https://github.com/zsh-users/zsh-completions](https://github.com/zsh-users/zsh-completions)),
    a collection of community-submitted completion functions for a lot of popular
    programs and tools such as Node.js, Redis, and Vagrant.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在zsh用户的代码库中，还有`zsh-completions`项目 ([https://github.com/zsh-users/zsh-completions](https://github.com/zsh-users/zsh-completions))，这是一个由社区提交的、为许多流行程序和工具（如Node.js、Redis和Vagrant）提供补全功能的集合。
- en: oh-my-zsh
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: oh-my-zsh
- en: Unless you have been offline for the past couple of years, chances are you have
    already heard about oh-my-zsh ([https://github.com/robbyrussell/oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)).
    The community-driven project has helped zsh become incredibly popular by simplifying
    the initial configuration and learning curve for zsh. The framework packs more
    than a hundred plugins for tools like Ruby on Rails, Git, and Ant, and another
    chock-full of prompt themes; so the command line never gets boring.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你在过去的几年里都处于离线状态，否则你很可能已经听说过oh-my-zsh ([https://github.com/robbyrussell/oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh))。这个社区驱动的项目通过简化zsh的初始配置和学习曲线，帮助zsh变得异常流行。这个框架包含了超过一百个插件，涵盖了如Ruby
    on Rails、Git和Ant等工具，还有一大堆提示主题；让命令行永远不再无聊。
- en: Prezto
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Prezto
- en: Prezto ([https://github.com/sorin-ionescu/prezto](https://github.com/sorin-ionescu/prezto))
    is another popular project with some great configuration options. Like oh-my-zsh,
    Prezto packs what it calls "sane defaults", a handful of interesting aliases and
    functions together with autocompletion and—you guessed it—prompt themes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Prezto ([https://github.com/sorin-ionescu/prezto](https://github.com/sorin-ionescu/prezto))
    是另一个流行的项目，提供了一些很棒的配置选项。像oh-my-zsh一样，Prezto包含了它所谓的“理智默认配置”，一些有趣的别名和功能，加上自动补全和——你猜对了——提示主题。
- en: 'Okay, I heard that. Does my shell *really need a framework?* Truth is you probably
    don''t need *the whole package* but just a particular functionality, be it a completion
    function or prompt style. So why reinvent the wheel when someone has already thought
    about the problem and come up with a—hopefully elegant—solution? What I''m trying
    to say here is: look at the source code, see what you can bring into your configuration,
    and if you feel like it, give it back to the community. The next guy will surely
    appreciate it a lot.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我听到了。我的shell*真的需要一个框架吗*？事实是，你可能不需要*整个包*，只需要某个特定的功能，无论是补全功能还是提示样式。那么，既然有人已经想到了这个问题并提出了——希望是优雅的——解决方案，为什么要重新发明轮子呢？我想说的是：看看源代码，看看你能把什么融入到你的配置中，如果你愿意，可以将其回馈给社区。下一个人肯定会非常感激的。
- en: Explain Shell
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Explain Shell
- en: Although not purely zsh-related, the Explain Shell project ([http://explainshell.com](http://explainshell.com))
    aims to lend a helping hand on those incredibly awkward commands by providing
    a really neat interface in which to parse and explain them term-by-term. This
    can prove really useful when experimenting with unfamiliar commands or things
    found in the strangest depths of the web.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不完全是zsh相关的，Explain Shell项目 ([http://explainshell.com](http://explainshell.com))
    旨在通过提供一个非常整洁的界面，逐词解析并解释那些极其尴尬的命令，从而帮助你解决问题。当你在试验陌生命令或网络深处找到的东西时，这会非常有用。
- en: Your dotfiles
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的dotfiles
- en: Noticed how your program's configuration files all are hidden by default? Even
    your startup files and zsh-related configuration lay on your home directory tucked
    away from plain sight by a leading dot on their filename. Commonly referred to
    as *dotfiles*, there are a lot of really cool settings and configurations out
    there that started as someone's clever attempt at fixing an annoyance. So go ahead
    and publish your dotfiles for the world to see. Turns out sharing your configuration
    is a really nice way of helping other users on their zsh adventures and getting
    feedback on what you have been so passionately working on. Just be careful not
    to share any passwords or credentials while you're at it!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到你的程序配置文件默认都是隐藏的吗？即使是你的启动文件和与zsh相关的配置，也会通过文件名前面的点隐藏在你的主目录中。通常被称为*dotfiles*，其中有很多很酷的设置和配置，它们最初是某人巧妙解决烦恼的尝试。所以，尽管去发布你的dotfiles让全世界看到吧。事实上，分享你的配置是帮助其他用户进行zsh冒险的一个很好的方式，并且还能获得别人对你所做的工作的反馈。只是，记得小心不要在分享时泄露任何密码或凭证！
- en: If there's a book that should be on your radar after reading this, that should
    be *From Bash to Z Shell Conquering the Command Line* by *Oliver Kiddle*, *Peter
    Stephenson*, and *Jerry Peek*. An almost-instant classic for both beginners and
    power-users that will definitely help you expand your knowledge of the command
    line.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在读完本书后，你想了解的另一部书，那应该是 *《从 Bash 到 Z Shell：征服命令行》*，作者为 *Oliver Kiddle*、*Peter
    Stephenson* 和 *Jerry Peek*。这本几乎是经典之作，无论是对初学者还是高级用户来说，都能帮助你扩展对命令行的知识。
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: And that brings us to the end of this book. Notice how I wrote "book" and not
    journey, as hopefully this first dip into zsh has gotten you excited enough about
    the possibilities of the shell and how versatile a tool it really is.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这也标志着本书的结束。注意我写的是“书”而不是“旅程”，因为希望这次初次接触 zsh 能让你对这个 shell 的潜力以及它作为工具的多样性充满兴趣。
- en: What now, then? Well, fortunately, that's up to you, dear reader. There's plenty
    more left on zsh for you to unravel and many more of those annoying and boring
    tasks that are required of your scripts, so you can go back to those other, important
    things on the backlog.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 那么接下来怎么办呢？幸运的是，这取决于你，亲爱的读者。zsh 还有很多内容等待你去探索，此外还有许多烦人的、枯燥的任务等着你去完成，这样你就能回到那些积压的重要事务上。
- en: With a bit of spit and polish, particularly on the configuration side of things,
    zsh can really shine and make your life easier—and why not, fun—on the command
    line. So go ahead and get back to it. You'll be glad you did.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些微调，尤其是在配置方面，zsh 真正能够大放异彩，让你的命令行操作更加轻松——甚至充满乐趣——那为什么不呢？所以，继续深入学习吧，你一定会感谢自己的。

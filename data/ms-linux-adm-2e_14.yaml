- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Short Introduction to Cloud Computing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算简要介绍
- en: In this chapter, you will learn the basics of **cloud computing** and will be
    presented with the core foundations of cloud infrastructure technologies. You
    will learn about the as-a-service solutions such as **Infrastructure as a Service**
    (**IaaS**), **Platform as a Service** (**PaaS**), **Software as a Service** (**SaaS**),
    and **Containers as a Service** (**CaaS**). You will be presented with the basics
    of cloud standards, **Development and Operations** (**DevOps**), **continuous
    integration/continuous deployment** (**CI/CD**), and **microservices**. A base
    knowledge of the cloud will offer at least a basic introduction to AWS, Azure,
    and other cloud solutions. By the end of this chapter, we will also introduce
    you to technologies such as **Ansible** and **Kubernetes**. This chapter will
    provide a concise theoretical introduction that will be the foundation for the
    following three cloud-related chapters, which will provide you with important
    practical knowledge on the many solutions presented here.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习云计算的基础知识，并了解云基础设施技术的核心基础。你将学习诸如**基础设施即服务**（**IaaS**）、**平台即服务**（**PaaS**）、**软件即服务**（**SaaS**）以及**容器即服务**（**CaaS**）等“即服务”解决方案。你将了解云标准、**开发与运维**（**DevOps**）、**持续集成/持续部署**（**CI/CD**）以及**微服务**的基本概念。掌握云计算的基础知识，将帮助你了解AWS、Azure及其他云解决方案。到本章结束时，我们还将介绍**Ansible**和**Kubernetes**等技术。本章将为接下来三章提供简明的理论介绍，为你掌握云计算相关的实践知识奠定基础。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Introduction to cloud technologies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云技术简介
- en: Introducing IaaS solutions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍IaaS解决方案
- en: Introducing PaaS solutions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍PaaS解决方案
- en: Introducing CaaS solutions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍CaaS解决方案
- en: Introducing DevOps
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍DevOps
- en: Exploring cloud management tools
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索云管理工具
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: No special technical requirements are needed as this chapter is a purely theoretical
    one. All you need is a desire to learn about cloud technologies.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为纯理论内容，不需要特别的技术要求。你所需要的只是学习云技术的热情。
- en: Introduction to cloud technologies
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云技术简介
- en: The term “cloud computing,” or the simple alternative “cloud,” is not missing
    from any tech enthusiast’s or **Information Technology** (**IT**) professional’s
    vocabulary these days. You don’t even have to be involved in IT at all to hear
    (or even use) the term “cloud” relatively often. Today’s computing landscape is
    changing at a rapid pace, and the pinnacle of this change is the cloud and the
    technologies behind it. According to the literature, the term “cloud computing”
    was used for the first time in 1996, in a business plan from Compaq ([https://www.technologyreview.com/2011/10/31/257406/who-coined-cloud-computing/](https://www.technologyreview.com/2011/10/31/257406/who-coined-cloud-computing/)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “云计算”这一术语，或者简化后的“云”一词，如今已经出现在每个科技爱好者或**信息技术**（**IT**）专业人士的词汇中。即便你完全不涉及IT行业，也很可能会听到（甚至使用）“云”这一术语。今天的计算环境正在以飞快的速度发生变化，而这种变化的顶峰便是云计算及其背后的技术。根据文献资料，“云计算”一词首次出现在1996年的Compaq商业计划书中（[https://www.technologyreview.com/2011/10/31/257406/who-coined-cloud-computing/](https://www.technologyreview.com/2011/10/31/257406/who-coined-cloud-computing/)）。
- en: Cloud computing is a relatively old concept, even though it was not referred
    to using this term right from the beginning. It is a computing model that was
    used from the early days of computing. Back in the 1950s, for example, there were
    mainframe computers that were accessed from different terminals. This model is
    similar to modern cloud computing, where services are hosted and delivered over
    the internet to different terminals, from desktop computers to smartphones, tablets,
    or laptops. This model is based on technologies that are extremely complex and
    essential for anyone who wants to master them to know.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算是一个相对较古老的概念，尽管最初并未使用这个术语。从计算机的早期阶段起，云计算模型就已经在使用。例如，在1950年代，主机计算机就能通过不同的终端进行访问。这个模型与现代的云计算非常相似，云服务通过互联网托管并交付到各种终端设备，从桌面电脑到智能手机、平板电脑或笔记本电脑。这一模型基于的技术极为复杂，对于任何希望掌握这些技术的人来说，都至关重要。
- en: You might be wondering why we have an entire section dedicated to cloud computing
    and technologies inside a *Mastering Linux Administration* title. This is simply
    because Linux has taken over the cloud in the last decade, in the same way that
    Linux took over the internet and the high-performance computing landscape. According
    to the TOP500 association, the world’s top 500 supercomputers all run on Linux
    ([https://top500.org/lists/top500/2020/11/](https://top500.org/lists/top500/2020/11/)).
    Clouds need to have an operating system to operate on, but it doesn’t have to
    be Linux. Nevertheless, Linux runs on almost 90% of public clouds ([https://www.redhat.com/en/resources/state-of-linux-in-public-cloud-for-enterprises](https://www.redhat.com/en/resources/state-of-linux-in-public-cloud-for-enterprises)),
    mostly because its open source nature appeals to IT professionals inside the public
    and private sectors alike.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么在一本《掌握Linux管理》的书籍中会专门有一章讲解云计算和相关技术。这是因为Linux在过去十年中已接管了云计算，正如Linux曾经接管了互联网和高性能计算领域一样。根据TOP500协会的数据，全球前500名超级计算机都运行在Linux系统上（[https://top500.org/lists/top500/2020/11/](https://top500.org/lists/top500/2020/11/)）。云计算需要操作系统来运行，但不一定非得是Linux。然而，Linux在几乎90%的公有云上运行（[https://www.redhat.com/en/resources/state-of-linux-in-public-cloud-for-enterprises](https://www.redhat.com/en/resources/state-of-linux-in-public-cloud-for-enterprises)），这主要是因为其开源性质对公私部门的IT专业人员都很有吸引力。
- en: In the following section, we will tackle the subject of cloud standards and
    why it is good to know about them when planning to deploy or manage a cloud instance.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将探讨云计算标准的主题，并说明在部署或管理云实例时了解这些标准的好处。
- en: Exploring the cloud computing standards
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索云计算标准
- en: Before going into more details about cloud computing, let’s give you a short
    introduction to what cloud standards are and their importance in the overall contemporary
    cloud landscape. You may know that almost every activity in the wider **Information
    and Communications Technology** (**ICT**) spectrum is governed by some kind of
    standard or regulation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细讨论云计算之前，首先让我们简要介绍一下什么是云标准，以及它们在当代云计算领域中的重要性。你可能知道，几乎所有广泛的**信息与通信技术**（**ICT**）领域活动都受到某种标准或规定的管理。
- en: Cloud computing is no wild land, and you will be surprised at how many associations,
    regulatory boards, and organizations are involved in developing standards and
    regulations for it. Covering all these institutions and standards is out of the
    scope of this book and chapter, but in the following sections, we will describe
    some of the most important and relevant ones (in our opinion) so that you can
    have an idea of their importance in keeping clouds together and web applications
    running.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算并不是一个未知领域，你会惊讶于有多少协会、监管机构和组织参与了其标准和法规的制定。全面涵盖这些机构和标准超出了本书和本章的范围，但在接下来的部分中，我们将描述一些我们认为最重要和最相关的标准，以便你能了解它们在保持云计算和Web应用程序运行中的重要性。
- en: International Organization for Standardization/International Electrotechnical
    Commission
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 国际标准化组织/国际电工委员会
- en: Two of the most widely known standards entities are the **International Organization
    for Standardization** (**ISO**) and the **International Electrotechnical Commission**
    (**IEC**), and they currently have 28 published and under-development standards
    on cloud computing and distributed platforms. They have a joint task group to
    develop standards for specific cloud core infrastructure, consumer application
    platforms, and services. Those standards are found under the responsibility of
    the **Joint Technical Committee 1** (**JTC 1**) **subcommittee 38** (**SC38**),
    or **ISO/IEC JTC 1/SC 38** for short.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 两个最广为人知的标准机构是**国际标准化组织**（**ISO**）和**国际电工委员会**（**IEC**），它们目前在云计算和分布式平台方面已发布并正在制定28项标准。它们拥有一个联合工作组，负责制定针对特定云核心基础设施、消费者应用平台和服务的标准。这些标准由**联合技术委员会1**（**JTC
    1**）**子委员会38**（**SC38**）负责，简称为**ISO/IEC JTC 1/SC 38**。
- en: 'Examples of standards from ISO/IEC include the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ISO/IEC的标准示例如下：
- en: 'Cloud computing **service-level agreement** (**SLA**) frameworks:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算**服务水平协议**（**SLA**）框架：
- en: ISO/IEC 19086-1:2016
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO/IEC 19086-1:2016
- en: ISO/IEC 19086-2:2018
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO/IEC 19086-2:2018
- en: ISO/IEC 19086-3:2017
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO/IEC 19086-3:2017
- en: 'Cloud computing **service-oriented architecture** (**SOA**) frameworks:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算**面向服务的架构**（**SOA**）框架：
- en: ISO/IEC 18384-1:2016
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO/IEC 18384-1:2016
- en: ISO/IEC 18384-2:2016
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO/IEC 18384-2:2016
- en: ISO/IEC 18384-3:2016
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO/IEC 18384-3:2016
- en: '**Open Virtualization Format** (**OVF**) specifications:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放虚拟化格式**（**OVF**）规范：'
- en: ISO/IEC 17203:2017
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO/IEC 17203:2017
- en: 'Cloud computing **data sharing agreement** (**DSA**) frameworks:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算**数据共享协议**（**DSA**）框架：
- en: ISO/IEC CD 23751
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO/IEC CD 23751
- en: '**Distributed application platforms and services** (**DAPS**) technical principles:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式应用平台与服务**（**DAPS**）技术原则：'
- en: ISO/IEC TR 30102:2012
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO/IEC TR 30102:2012
- en: To take a closer look at those standards, please go to [https://www.iso.org/committee/601355/x/catalogue/](https://www.iso.org/committee/601355/x/catalogue/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要详细了解这些标准，请访问[https://www.iso.org/committee/601355/x/catalogue/](https://www.iso.org/committee/601355/x/catalogue/)。
- en: The Cloud Standards Coordination initiative
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 云标准协调倡议
- en: Next on our list of standards development entities is an initiative called the
    **Cloud Standards Coordination** (**CSC**), created by the **European Commission**
    (**EC**), together with specialized bodies.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我们标准开发实体的列表，其中包括一个名为**云标准协调**（**CSC**）的倡议，该倡议由**欧洲委员会**（**EC**）与专业机构共同创建。
- en: 'Back in 2012, the EC, together with the **European Telecommunications Standards
    Institute** (**ETSI**), launched the CSC to develop standards and policies for
    cloud security, interoperability, and portability. The initiative had two phases,
    with Phase 1 starting in 2012 and Phase 2 starting in 2015\. The final reports
    of Phase 2 (version 2.1.1), were made public, as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 早在2012年，**欧洲委员会**（EC）与**欧洲电信标准化协会**（**ETSI**）合作，启动了CSC倡议，旨在制定云安全、互操作性和可移植性的标准和政策。该倡议分为两个阶段，第一阶段始于2012年，第二阶段始于2015年。第二阶段的最终报告（版本2.1.1）已公开发布，具体如下：
- en: Cloud computing users’ needs (ETSI SR 003 381)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算用户需求（ETSI SR 003 381）
- en: Standards and Open Source (ETSI SR 003 382)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准与开源（ETSI SR 003 382）
- en: Interoperability and Security (ETSI SR 003 391)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互操作性与安全性（ETSI SR 003 391）
- en: Standards Maturity Assessment (ETSI SR 003 392)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准成熟度评估（ETSI SR 003 392）
- en: 'For more details on each of those standards, access the following link: [http://csc.etsi.org/](http://csc.etsi.org/).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有关每项标准的更多详细信息，请访问以下链接：[http://csc.etsi.org/](http://csc.etsi.org/)。
- en: National Institute of Standards and Technology
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 国家标准与技术研究院
- en: 'The list continues with one of the most widely known entities in standards
    development: the **United States** (**US**) **National Institute of Standards
    and Technology** (**NIST**). This will not be the first time you will read about
    NIST in this book. It is the standards development body in the US Department of
    Commerce. The main objective of NIST is the standardization of security and interoperability
    inside US government agencies, so anyone interested in developing for those entities
    should take a look at the NIST cloud documentation. The NIST document that standardizes
    cloud computing is called NIST SP 500-291r2 and can be found at [http://csrc.nist.gov/publications/nistpubs/800-145/SP800-145.pdf](http://csrc.nist.gov/publications/nistpubs/800-145/SP800-145.pdf).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 列表继续列出一个在标准开发领域广为人知的实体：**美国**（**US**）**国家标准与技术研究院**（**NIST**）。这不会是你第一次在本书中看到NIST。它是美国商务部下属的标准开发机构。NIST的主要目标是美国政府机构内部的安全性和互操作性标准化，因此任何有兴趣为这些机构开发的人员应查看NIST的云文档。标准化云计算的NIST文档名为NIST
    SP 500-291r2，可以在[http://csrc.nist.gov/publications/nistpubs/800-145/SP800-145.pdf](http://csrc.nist.gov/publications/nistpubs/800-145/SP800-145.pdf)找到。
- en: The International Telecommunication Union
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 国际电信联盟
- en: 'We will close our shortlisting with one of the oldest—if not the oldest—standards
    development bodies, part of the **United Nations** (**UN**) organization: the
    **International Telecommunication Union** (**ITU**). The ITU is a body inside
    the UN, and its main focus is to develop standards for communications, networking,
    and development. This agency was founded in 1865 and, among other things, it is
    responsible for global radio frequency spectrum and satellite orbit allocation.
    It is also responsible for the use of Morse code as a standard means of communication.
    When it comes to global information infrastructure, internet protocols, next-generation
    networks, **Internet of Things** (**IoT**), and smart cities, the ITU has a lot
    of standards and recommendations available. To check them all out, have a look
    at the following link: [https://www.itu.int/rec/T-REC-Y/en](https://www.itu.int/rec/T-REC-Y/en).
    To narrow down the document list from the aforementioned link, some specific cloud
    computing documents can be found using document codes, from Y.3505 up to Y.3531\.
    The cloud computing standards were developed by the **Study Group 13** (**SG13**)
    **Joint Coordination Activity on Cloud Computing** (**JCA-Cloud**) within the
    ITU.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以最古老的标准化组织之一来结束我们的短名单——如果不是最古老的标准化组织——它是**联合国**(**UN**)的一部分：**国际电信联盟**(**ITU**)。ITU
    是联合国内的一个机构，主要致力于制定通信、网络和发展方面的标准。该机构成立于 1865 年，负责全球无线电频谱和卫星轨道分配等多项事务。它还负责使用摩尔斯电码作为标准通信手段。关于全球信息基础设施、互联网协议、下一代网络、**物联网**(**IoT**)和智能城市，ITU
    提供了大量的标准和建议。若要查看这些内容，可以访问以下链接：[https://www.itu.int/rec/T-REC-Y/en](https://www.itu.int/rec/T-REC-Y/en)。为了缩小上述链接中的文档列表，可以使用文档代码从
    Y.3505 到 Y.3531 找到一些特定的云计算文档。这些云计算标准由 ITU 内的**研究组 13**(**SG13**) **云计算联合协调活动**(**JCA-Cloud**)开发。
- en: 'Besides the entities described in this section, there are many others, including
    the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本节描述的实体外，还有许多其他实体，包括以下内容：
- en: The **Cloud Standards Customer** **Council** (**CSCC**)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云标准客户** **委员会**(**CSCC**)'
- en: The **Distributed Management Task** **Force** (**DMTF**)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式管理任务** **组**(**DMTF**)'
- en: The **Organization for the Advancement of Structured Information** **Standards**
    (**OASIS**)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构化信息标准化组织**(**OASIS**)'
- en: 'The main reason for adopting standards for cloud computing is ease of use when
    it comes to either the **Cloud Service Provider** (**CSP**) or the client. Both
    categories need to have easy access to data, more so for CSPs and application
    developers, as easy access to data is translated into agility and interoperability.
    However, standards, besides being technically correct, need to be consistent and
    persistent. According to the literature, there are two main standards groups:
    ones that are established from practice, and ones that are being regulated. An
    important part of the cloud standards, from the second category, is the **application
    programming interfaces** (**APIs**). Standardization of application frameworks,
    network protocols, and APIs guarantees success for everyone involved.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 采用云计算标准的主要原因是为了方便**云服务提供商**(**CSP**)和客户的使用。两者都需要轻松访问数据，尤其是对于 CSP 和应用开发者而言，轻松访问数据意味着更高的灵活性和互操作性。然而，标准除了技术上要正确外，还需要一致性和持久性。根据文献，主要有两类标准团体：一种是通过实践建立的，另一种是由政府法规所规范的。第二类中的一个重要组成部分是**应用程序编程接口**(**APIs**)。应用框架、网络协议和
    API 的标准化能保证每个参与者的成功。
- en: Understanding the cloud through API standards
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 API 标准理解云计算
- en: 'APIs are sets of protocols, procedures, and functions: all the bricks needed
    to build a web-distributed application. Modern APIs emerged at the beginning of
    the 21st century, firstly as a theory in Roy Fielding’s doctoral dissertation.
    Before the modern APIs, there were SOA standards and the **Simple Object Access
    Protocol** (**SOAP**), based on **Extensible Markup Language** (**XML**). Modern
    APIs are based on a new application architectural style, called **REpresentational
    State** **Transfer** (**REST**).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: API 是一组协议、程序和函数：所有构建 Web 分布式应用所需的“砖块”。现代 API 起源于 21 世纪初，最早在 Roy Fielding 的博士论文中提出。在现代
    API 出现之前，曾有基于**可扩展标记语言**(**XML**)的 SOA 标准和 **简单对象访问协议** (**SOAP**)。现代 API 基于一种新的应用架构风格，称为
    **表现层状态转移**(**REST**).
- en: 'REST APIs are based on a series of architectural styles, elements, connectors,
    and views that are clearly described by Roy Fielding in his thesis. There are
    six guiding constraints for an API to be RESTful, and they are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: REST API 基于一系列架构风格、元素、连接器和视图，这些内容在 Roy Fielding 的论文中得到了清晰的描述。为了使 API 成为 RESTful，需要遵循六个指导性约束，它们如下：
- en: Uniform user interfaces
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一的用户界面
- en: Client-server clear delineation
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端-服务器的明确划分
- en: Stateless operations
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无状态操作
- en: Cacheable resources
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可缓存资源
- en: Layered system of servers
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器的分层系统
- en: Code on-demand execution
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按需执行代码
- en: Following these guiding principles is far from following a standard, but REST
    provides them for developers as a high-level abstraction layer. Unless they are
    standardized, they will always remain great principles that generate confusion
    and frustration among developers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这些指导原则远不是遵循标准，但 REST 为开发者提供了一个高层的抽象层。除非它们被标准化，否则它们将始终保持为极好的原则，给开发者带来困惑和沮丧。
- en: 'The only organization that managed to standardize REST APIs for the cloud is
    the DMTF, through the **Cloud Infrastructure Management Interface** (**CIMI**)
    model and the RESTful **HyperText Transfer Protocol** (**HTTP**)-based protocol,
    in a document coded DSP0263 version 2.0.0, which can be downloaded from the following
    link: [https://www.dmtf.org/standards/cloud](https://www.dmtf.org/standards/cloud).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一成功将 REST API 标准化应用于云计算的组织是 DMTF，通过**云基础设施管理接口**（**CIMI**）模型和基于 RESTful 的**超文本传输协议**（**HTTP**）协议，在编码为
    DSP0263 版本 2.0.0 的文档中进行标准化，该文档可以通过以下链接下载：[https://www.dmtf.org/standards/cloud](https://www.dmtf.org/standards/cloud)。
- en: 'There are other specifications that emerge as possible future standards for
    developers to use when designing REST APIs. Among those, there is the **OpenAPI
    Specification** (**OAS**), an industry standard that provides a language-agnostic
    description for API development (document available at [http://spec.openapis.org/oas/v3.0.3](http://spec.openapis.org/oas/v3.0.3)),
    and **GraphQL**, as a query language and server-side runtime, with support for
    several programming languages such as Python, JavaScript, Scala, Ruby, and **PHP:
    Hypertext** **Preprocessor** (**PHP**).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '还有其他一些规范作为未来可能的标准出现，供开发者在设计 REST API 时使用。其中之一是**OpenAPI 规范**（**OAS**），这是一个行业标准，提供了一种与语言无关的
    API 开发描述（文档可在 [http://spec.openapis.org/oas/v3.0.3](http://spec.openapis.org/oas/v3.0.3)
    获取），另一个是**GraphQL**，作为一种查询语言和服务器端运行时，支持多种编程语言，如 Python、JavaScript、Scala、Ruby 以及
    **PHP: 超文本** **预处理器**（**PHP**）。'
- en: REST managed to become the preferred API because it is easier to understand,
    more lightweight, and simple to write. It is more efficient, uses less bandwidth,
    supports many data formats, and uses **JavaScript Object Notation** (**JSON**)
    as the preferred data format. JSON is easy to read and write and offers better
    interoperability between applications written in different languages, such as
    JavaScript, Ruby, Python, and Java. By using JSON as the default data format for
    the API, it makes it friendly, scalable, and platform-agnostic.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: REST 成为了首选的 API，因为它更容易理解、更加轻量、简单易写。它更高效，使用更少的带宽，支持多种数据格式，并以**JavaScript 对象表示法**（**JSON**）作为首选的数据格式。JSON
    易于读取和写入，并且提供了不同语言编写的应用程序之间更好的互操作性，例如 JavaScript、Ruby、Python 和 Java。通过将 JSON 作为
    API 的默认数据格式，它使得 API 既友好又可扩展，且与平台无关。
- en: APIs are everywhere on the web and in the cloud and are the base for SOA and
    microservices. For example, microservices use RESTful APIs to communicate between
    services by offering an optimized architecture for cloud-distributed resources.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: API 无处不在，无论是 Web 上还是云端，都是 SOA 和微服务的基础。例如，微服务通过 RESTful API 进行服务间的通信，提供了一个优化的架构来支持云分布式资源。
- en: Therefore, if you want to master cloud computing technologies, you should be
    open to embracing cloud standards. In the next section, we will discuss the cloud
    types and architecture.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你想掌握云计算技术，你应该愿意接受云计算标准。在接下来的部分，我们将讨论云的类型和架构。
- en: Understanding the architecture of the cloud
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解云的架构
- en: The cloud’s architectural design is similar to a building’s architectural design.
    There is one design paradigm that governs the cloud—the one in which the design
    starts from a blank, clean drawing board where the architects put together different
    standardized components in order to achieve an architectural design. The final
    result is based on a certain architectural style. The same happens when designing
    the cloud’s architecture.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 云的架构设计类似于建筑物的架构设计。云有一个主导的设计范式——即设计从一张干净的空白图纸开始，建筑师将不同的标准化组件组合在一起，以实现一个建筑设计。最终的结果基于特定的建筑风格。设计云的架构时也是如此。
- en: The cloud is based on a client-server, layered, stateless, network-based architectural
    style. The REST APIs, SOA, microservices, and web technologies all are the base
    components that form the foundation of the cloud. The architecture of the cloud
    has been defined by NIST ([https://www.nist.gov/publications/nist-cloud-computing-reference-architecture](https://www.nist.gov/publications/nist-cloud-computing-reference-architecture)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算基于客户端-服务器、分层、无状态、基于网络的架构风格。REST API、SOA、微服务和Web技术都是构成云计算基础组件的核心。云的架构已由NIST定义（[https://www.nist.gov/publications/nist-cloud-computing-reference-architecture](https://www.nist.gov/publications/nist-cloud-computing-reference-architecture)）。
- en: Some of the technologies behind the cloud have been discussed in [*Chapter 11*](B19682_11.xhtml#_idTextAnchor231),
    *Working with Virtual Machines*, and [*Chapter 12*](B19682_12.xhtml#_idTextAnchor257),
    *Managing Containers with Docker*. Indeed, both virtualization and containers
    are the foundation technologies of cloud computing.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算背后的一些技术已在[*第11章*](B19682_11.xhtml#_idTextAnchor231)，*与虚拟机一起工作*，和[*第12章*](B19682_12.xhtml#_idTextAnchor257)，*使用Docker管理容器*中讨论过。实际上，虚拟化和容器是云计算的基础技术。
- en: Let’s imagine a situation where you would like to have several Linux systems
    to deploy your apps. What you do first is go to a CSP and request the systems
    you need. The CSP will create the **virtual machines** (**VMs**) on its infrastructure,
    according to your needs, and will put all of them in the same network and share
    the credentials to access them with you. This way, you will have access to the
    systems you wanted, in exchange for a subscription fee that is billed either on
    a daily, monthly, or yearly basis or based on a resource-consumption basis. Most
    of the time, those CSP requests are done through a specific web interface, developed
    by the provider to best suit the needs of their users.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要部署多个Linux系统来运行应用程序。你首先要做的就是去找一个CSP并请求所需的系统。CSP会根据你的需求，在其基础设施上创建**虚拟机**（**VMs**），并将它们放在同一个网络中，然后与你共享访问这些虚拟机的凭证。这样，你就能访问到你所需要的系统，并以订阅费用的形式支付，费用可以是按天、按月、按年或者按资源消耗计费。通常，这些CSP请求是通过提供商为满足用户需求而开发的特定Web界面进行的。
- en: Everything that the cloud uses as technology is based on VMs and containers.
    Inside the cloud, everything is abstracted and automated. In the following section,
    we will provide you with information about the types of services that are available
    in the cloud.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算所使用的所有技术都是基于虚拟机和容器的。在云内部，一切都被抽象化并自动化。接下来的部分，我们将为你提供有关云中可用服务类型的信息。
- en: Describing the types of infrastructure and services
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述基础设施和服务的类型
- en: No matter the type, each cloud has a specific architecture, just as we showed
    you in the previous section. It provides the blueprints for the foundation of
    cloud computing. The cloud architecture is the base for the cloud infrastructure,
    and the infrastructure is the base for cloud services. See how everything is connected?
    Let’s now see what the infrastructure and services are with regard to the cloud.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是什么类型，每个云都有一个特定的架构，就像我们在前一部分展示的那样。它为云计算的基础提供了蓝图。云架构是云基础设施的基础，而基础设施又是云服务的基础。你看，一切是如何相互连接的？现在，让我们看看与云相关的基础设施和服务是什么。
- en: 'There are four main **cloud infrastructure types**, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算有四种主要的**云基础设施类型**，分别如下：
- en: '**Public clouds**: These run on infrastructure owned by the provider and are
    available mostly off-premises; the largest public cloud providers are AWS, Microsoft
    Azure, and Google Cloud.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共云**：这些云运行在由提供商拥有的基础设施上，通常位于本地以外；最大的公共云提供商包括AWS、Microsoft Azure和Google Cloud。'
- en: '**Private clouds**: These run specifically for individuals and groups with
    isolated access; they are available on both on-premises and off-premises hardware
    infrastructure. There are managed private clouds available, or dedicated private
    clouds.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有云**：这些云专门为个人和具有隔离访问权限的群体运行；它们可以在本地或非本地硬件基础设施上提供。提供托管私有云或专用私有云。'
- en: '**Hybrid clouds**: These are both private and public clouds running inside
    connected environments, with resources available for potential on-demand scaling.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合云**：这些是同时运行在连接环境中的私有云和公有云，具有可按需扩展的资源。'
- en: '**Multi-clouds**: These are more than one cloud running from more than one
    provider.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多云**：这些是由多个提供商运行的多个云。'
- en: 'Besides the cloud infrastructure types, there are also four main **cloud**
    **service types**:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 除了云基础设施类型外，还有四种主要的**云** **服务类型**：
- en: '**IaaS**: With an IaaS cloud service type, the cloud provider manages all hardware
    infrastructure such as servers and networking, plus virtualization and storage
    of data. The infrastructure is owned by the provider and rented by the user; in
    this case, the user needs to manage the operating system, the runtimes, automation,
    management solutions, and containers, together with the data and applications.
    IaaS is the backbone of every cloud computing service, as it provides all the
    resources.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IaaS**：在IaaS云服务类型下，云服务提供商管理所有硬件基础设施，如服务器和网络，以及数据的虚拟化和存储。基础设施由提供商拥有并租赁给用户；在这种情况下，用户需要管理操作系统、运行时、自动化、管理解决方案和容器，以及数据和应用程序。IaaS是每个云计算服务的支柱，因为它提供了所有资源。'
- en: '**CaaS**: This is considered to be a subset of IaaS; it has the same advantages
    as IaaS, only that the base consists of containers, not VMs, and it is better
    suited to deploying distributed systems and microservices architectures.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CaaS**：这被认为是IaaS的子集；它具有与IaaS相同的优点，只不过基础是容器，而非虚拟机，更适合部署分布式系统和微服务架构。'
- en: '**PaaS**: With a PaaS cloud service type, the hardware infrastructure, networking,
    and software platform are managed by the cloud provider; the user manages and
    owns the data and applications.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PaaS**：在PaaS云服务类型下，硬件基础设施、网络和软件平台由云服务提供商管理；用户管理和拥有数据和应用程序。'
- en: '**SaaS**: With a SaaS cloud service type, the cloud provider manages and owns
    the hardware, networking, software platform, management, and software applications.
    This type of service is also known for delivering web apps or mobile apps.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SaaS**：在SaaS云服务类型下，云服务提供商管理和拥有硬件、网络、软件平台、管理和软件应用程序。这种类型的服务也以提供Web应用程序或移动应用程序而著称。'
- en: 'Besides these types of services, there is another one that we should bring
    into the discussion: **serverless computing** services. In contrast to what the
    name might suggest, serverless computing still implies the use of servers, but
    the infrastructure running them is not visible to users, who in most cases are
    developers. Serverless can also be referred to as **Function as a Service** (**FaaS**),
    and it provides an on-demand way to execute modular code, by letting developers
    update their code on the fly. Examples of this kind of service would be AWS Lambda,
    Azure Functions, and Google Cloud Functions. It is similar to SaaS; actually,
    it would fit right between PaaS and SaaS. It has no infrastructure management,
    is scalable, offers a faster way to market for app developers, and is efficient
    when it comes to the use of resources.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些类型的服务外，还有一种服务我们应该纳入讨论：**无服务器计算**服务。与名称可能暗示的相反，无服务器计算仍然涉及服务器的使用，但运行它们的基础设施对用户不可见，用户在大多数情况下是开发人员。无服务器计算也被称为**功能即服务**（**FaaS**），它提供了一种按需执行模块化代码的方式，让开发人员能够动态更新他们的代码。此类服务的示例包括AWS
    Lambda、Azure Functions和Google Cloud Functions。它类似于SaaS；实际上，它介于PaaS和SaaS之间。它不需要基础设施管理，具有可扩展性，为应用开发人员提供了更快的市场进入方式，并且在资源使用方面高效。
- en: Now that you know the types of cloud infrastructure and services, you might
    wonder why you, your business, or anyone you know should migrate to cloud services.
    First of all, cloud computing is based on on-demand access to various resources
    that are hosted and managed by a CSP. This means that the infrastructure is owned
    or managed by the CSP and the user will be able to access the resources based
    on a subscription fee. Should you migrate to the cloud? We will discuss the advantages
    and disadvantages of migrating to the cloud in the next section.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了云基础设施和服务的类型，您可能会想知道为什么您、您的企业或您认识的任何人应该迁移到云服务。首先，云计算是基于按需访问由云服务提供商（CSP）托管和管理的各种资源。这意味着基础设施由CSP拥有或管理，用户可以根据订阅费用访问这些资源。您应该迁移到云端吗？我们将在接下来的章节中讨论迁移到云端的优缺点。
- en: Knowing the key features of cloud computing
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解云计算的关键特性
- en: 'Before deciding whether migrating to the cloud would be a good decision, you
    need to know the advantages and disadvantages of doing this. Cloud computing does
    provide some essential features, such as the following ones listed:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定是否迁移到云端是一个明智选择之前，您需要了解这样做的优缺点。云计算确实提供了一些基本特性，例如下列所列举的这些：
- en: '**Cost savings**: There are reduced costs generated by the infrastructure setup,
    which is now managed by the CSP; this puts the user’s focus on application development
    and running the business.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本节省**：通过基础设施的设置费用减少，这些现在由CSP管理；这让用户将注意力集中在应用程序开发和业务运营上。'
- en: '**Speed**, **agility**, and **resource access**: All the resources are available
    from any place, just a few clicks away, at any time (dependent on internet connectivity
    and speed).'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度**、**灵活性**和**资源访问**：所有资源都可以在任何地方通过几次点击获得，随时随地（取决于网络连接和速度）。'
- en: '**Reliability**: Resources are hosted in different locations, by providing
    good quality control, **disaster recovery** (**DR**) policies, and loss prevention;
    maintenance is done by the CSP, meaning that end users don’t need to waste time
    and money doing this.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：资源托管在不同的地点，通过提供良好的质量控制、**灾难恢复**（**DR**）政策和防损措施；维护由CSP负责，这意味着最终用户无需浪费时间和金钱进行此类操作。'
- en: 'Besides the advantages (key features) listed previously, there are possible
    disadvantages too, such as the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前列举的优点（关键特性），还有可能存在一些缺点，例如以下几点：
- en: '**Performance variations**: Performance may vary depending on the CSP you choose,
    but none of the big names out there (such as AWS, Azure, or GCP) have any significant
    performance issues. In these cases, performance is dictated by the local internet
    speed of the user, so it isn’t a CSP problem after all. This might not be the
    case for other CSPs though.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能变化**：性能可能会因选择的CSP不同而有所变化，但市场上没有大品牌（如AWS、Azure或GCP）存在明显的性能问题。在这些情况下，性能受用户本地互联网速度的影响，因此这并非CSP的问题。不过，对于其他CSP来说，情况可能并非如此。'
- en: '**Downtime**: Downtime could be an issue, but all major providers strive to
    offer 99.9% uptime. If disaster strikes, issues are solved in a matter of minutes—or
    in worst-case scenarios, in a matter of hours.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**停机时间**：停机时间可能是一个问题，但所有主要提供商都努力提供99.9%的正常运行时间。如果灾难发生，问题通常会在几分钟内解决——或者在最坏的情况下，也会在几个小时内解决。'
- en: '**Lack of predictability**: There is a lack of predictability with regard to
    the CSP and its presence on the market, but rest assured that none of the big
    players will go away anytime soon.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不可预测性**：关于云服务提供商（CSP）及其市场存在的不可预测性，但请放心，没有任何大公司会很快退出市场。'
- en: Therefore, these are not game stoppers for anyone wanting to migrate to the
    cloud. In the next section, we will introduce you to some IaaS solutions.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这些都不会成为任何想要迁移到云端的人的阻碍。在接下来的章节中，我们将向您介绍一些IaaS解决方案。
- en: Introducing IaaS solutions
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍IaaS解决方案
- en: IaaS is the backbone of cloud computing. It offers on-demand access to resources,
    such as compute, storage, network, and so on. The CSP uses hypervisors to provide
    IaaS solutions. In this section, we provide you with information about some of
    the most widely used IaaS solutions available. We will give you details about
    providers such as **Amazon Elastic Compute Cloud** (**Amazon EC2**), and Microsoft
    Azure Virtual Machines as the big players, and **DigitalOcean** as a viable solution.
    We will tackle **OpenStack** too, for those interested in what it could offer.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: IaaS 是云计算的支柱。它提供按需访问计算、存储、网络等资源。云服务提供商（CSP）使用虚拟化技术提供 IaaS 解决方案。在本节中，我们将为您提供一些最常用的
    IaaS 解决方案的信息。我们将介绍一些主要供应商，例如**Amazon Elastic Compute Cloud**（**Amazon EC2**）和
    Microsoft Azure 虚拟机，以及作为可行方案的 **DigitalOcean**。我们还会涉及 **OpenStack**，为那些对其可能提供的功能感兴趣的人提供信息。
- en: Amazon EC2
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amazon EC2
- en: The IaaS solution provided by AWS is called Amazon EC2\. It provides a good
    infrastructure solution for anyone, from low-cost compute instances to a high-power
    **graphics processing unit** (**GPU**) for machine learning. AWS was the first
    provider of IaaS solutions 12 years ago and it is doing better than ever, even
    after the COVID-19 pandemic ([https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/](https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/)).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供的 IaaS 解决方案称为 Amazon EC2。它为任何人提供了一个很好的基础设施解决方案，从低成本的计算实例到用于机器学习的高性能**图形处理单元**（**GPU**）。AWS
    是12年前第一个提供 IaaS 解决方案的供应商，尽管经历了新冠疫情，它的表现依然比以往更好（[https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/](https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/)）。
- en: 'When starting with Amazon EC2, you have several steps to fulfill:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当开始使用 Amazon EC2 时，您需要完成几个步骤：
- en: 'The first is the option to choose your **Amazon Machine Image** (**AMI**),
    which is basically a preconfigured image of either Linux or Windows. When it comes
    to Linux, you can choose between the following:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一步是选择您的**Amazon 机器镜像**（**AMI**），它基本上是一个预配置的 Linux 或 Windows 镜像。对于 Linux，您可以从以下选项中选择：
- en: Amazon Linux 2 (based on CentOS/**Red Hat Enterprise** **Linux** (**RHEL**))
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Linux 2（基于 CentOS/**Red Hat Enterprise** **Linux**（**RHEL**））
- en: RHEL 8/9
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: RHEL 8/9
- en: '**SUSE Linux Enterprise** **Server** (**SLES**)'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SUSE Linux Enterprise** **Server**（**SLES**）'
- en: Ubuntu Server 20.04/22.04 **Long-Term** **Support** (**LTS**)
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu Server 20.04/22.04 **长期** **支持**（**LTS**）
- en: You will need to choose your **instance type** from a really wide variety. To
    learn more about EC2 instances, visit [https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/)
    and find out details about each one. EC2, for example, is the only provider that
    offers Mac instances, based on Mac mini. To use Linux, you can choose from low-end
    instances up to high-performance instances, depending on your needs.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要从各种实例类型中进行选择。要了解更多关于 EC2 实例的信息，请访问 [https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/)
    并查看每个实例的详细信息。例如，EC2 是唯一提供基于 Mac mini 的 Mac 实例的供应商。使用 Linux 时，您可以根据需要选择从低端实例到高性能实例。
- en: Amazon provides an **Elastic Block Store** (**EBS**) option with **solid-state
    drive** (**SSD**) and magnetic mediums available. You can select a custom value
    depending on your needs. EC2 is a flexible solution compared to other options.
    It has an easy-to-use and straightforward interface, and you will only pay for
    the time and resources you use. An example of how to deploy on EC2 will be provided
    to you in [*Chapter 15*](B19682_15.xhtml#_idTextAnchor326), *Deploying to the
    Cloud with AWS* *and Azure*.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon 提供了一个**弹性块存储**（**EBS**）选项，支持**固态硬盘**（**SSD**）和磁介质。您可以根据需求选择自定义值。与其他选项相比，EC2
    是一个灵活的解决方案。它具有易于使用和直观的界面，您只需为使用的时间和资源付费。在 [*第15章*](B19682_15.xhtml#_idTextAnchor326)中，将为您提供如何在
    EC2 上部署的示例，*使用 AWS* *和 Azure 部署到云端*。
- en: Microsoft Azure Virtual Machines
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microsoft Azure 虚拟机
- en: Microsoft is the second biggest player in the cloud market, right after Amazon.
    Azure is the name of their cloud computing offering. Even though it is provided
    by Microsoft, Linux is the most widely used operating system on Azure ([https://www.zdnet.com/article/microsoft-developer-reveals-linux-is-now-more-used-on-azure-than-windows-server/](https://www.zdnet.com/article/microsoft-developer-reveals-linux-is-now-more-used-on-azure-than-windows-server/)).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 微软是云市场的第二大玩家，仅次于亚马逊。Azure是他们的云计算产品名称。尽管是微软提供的，但Linux是Azure上使用最广泛的操作系统（[https://www.zdnet.com/article/microsoft-developer-reveals-linux-is-now-more-used-on-azure-than-windows-server/](https://www.zdnet.com/article/microsoft-developer-reveals-linux-is-now-more-used-on-azure-than-windows-server/)）。
- en: Azure’s IaaS offering is called **Virtual Machines** and is similar to Amazon’s
    offering; you can choose between many tiers. What is different about Microsoft’s
    offering is the pricing model. They have a pay-as-you-go model, or a reservation-based
    instance, for one to three years. Microsoft’s interface is totally different from
    Amazon’s, and in our opinion might not be as straightforward as its competitor’s,
    but you will get used to it eventually.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Azure的IaaS产品被称为**虚拟机**，与亚马逊的产品类似，你可以在多个等级之间选择。微软产品的不同之处在于定价模型。他们有按需付费模式，或基于一到三年的预定实例。微软的界面与亚马逊完全不同，我们认为可能不像其竞争对手那么直观，但最终你会习惯的。
- en: 'Microsoft offers several types of VM instances, from economical burstable VMs
    to powerful memory-optimized instances. The pay-as-you-go model offers a per-hour
    cost, and this could add to the final bill for those services, so choose with
    care based on your needs. When it comes to Linux distributions, you can choose
    from the following: CentOS, Debian, RHEL, SLES for SAP, openSUSE Leap, and Ubuntu
    Server.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 微软提供几种类型的虚拟机实例，从经济型可爆发虚拟机到强大的内存优化实例。按需付费模式按小时计费，这可能会增加服务的最终账单，所以根据你的需求谨慎选择。对于Linux发行版，你可以选择以下几种：CentOS、Debian、RHEL、SLES
    for SAP、openSUSE Leap和Ubuntu Server。
- en: Azure has a very powerful SaaS offering too, and this will make it a good option
    if you use other Azure services. An example of how to deploy to Azure will be
    provided to you in [*Chapter 15*](B19682_15.xhtml#_idTextAnchor326), *Deploying
    to the Cloud with AWS* *and Azure*.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Azure也提供了非常强大的SaaS产品，如果你使用其他Azure服务，这将是一个不错的选择。在[*第15章*](B19682_15.xhtml#_idTextAnchor326)，*与AWS和Azure一起部署到云端*中将为你提供如何部署到Azure的示例。
- en: Other strong IaaS offerings
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他强大的IaaS解决方案
- en: 'DigitalOcean is another important player in the cloud market and it offers
    a strong IaaS solution. It has a straightforward interface and it helps you to
    create a cloud in a very short time. They call their VMs **droplets** and you
    create one in a matter of seconds. All you have to do is the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: DigitalOcean是云市场的另一个重要玩家，提供强大的IaaS解决方案。它具有直观的界面，帮助你在非常短的时间内创建云。它们称虚拟机为**滴水**，你只需几秒钟就能创建一个。你只需要做以下几件事：
- en: Choose the image (Linux distribution)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择镜像（Linux发行版）
- en: Select the plan, based on your **virtual CPU** (**vCPU**), memory, and disk
    space needs
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据你的**虚拟CPU**（**vCPU**）、内存和磁盘空间需求选择计划
- en: Add storage blocks
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加存储块
- en: Choose your data center region, authentication method (password or **Secure
    Shell** (**SSH**) key), and hostname
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择你的数据中心区域、身份验证方式（密码或**安全外壳**（**SSH**）密钥）以及主机名
- en: You can also assign droplets to certain projects you manage
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以将滴水分配给你管理的特定项目。
- en: DigitalOcean’s interface is better looking and much more user friendly than
    its competitors. Following the example of DigitalOcean, other IaaS providers—such
    as **Linode** and **Hetzner**—provide a slim and friendly interface for creating
    virtual servers.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: DigitalOcean的界面比其竞争对手更具吸引力，且更加用户友好。效仿DigitalOcean，其他IaaS提供商——如**Linode**和**Hetzner**——也提供简洁友好的界面来创建虚拟服务器。
- en: Linode is another strong competitor in the cloud market, offering powerful solutions.
    Their VMs are called Linodes. The interface is somewhere between DigitalOcean
    and Azure, with regard to their ease of use and appearance.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Linode是云市场的另一个强大竞争者，提供强大的解决方案。他们的虚拟机被称为Linodes。与DigitalOcean和Azure相比，Linode的界面在易用性和外观上处于两者之间。
- en: Another strong player, at least in the European market, is Hetzner, a Germany-based
    cloud provider. They offer a great balance between resources and cost, and similar
    solutions to the others mentioned in this section. They provide an interface similar
    to DigitalOcean that is really easy to explore, and the cloud instance will be
    deployed in a matter of seconds.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个强有力的竞争者，至少在欧洲市场，是来自德国的云提供商Hetzner。他们在资源和成本之间提供了很好的平衡，且提供的解决方案与本节中提到的其他提供商类似。Hetzner提供了一个类似于DigitalOcean的界面，非常易于探索，而且云实例会在几秒钟内部署完成。
- en: Similar to the offerings of DigitalOcean, Linode, and Hetzner, there is a relatively
    new offering from Amazon (starting in 2017), called **Lightsail**. This service
    was introduced in order to offer clients an easy way to deploy **virtual private
    servers** (**VPSs**) or VMs in the cloud. The interface is similar to that seen
    from the competition, but it comes with the full Amazon infrastructure reliability
    on top. Lightsail provides several distributions, together with application bundles.
    Deploying on AWS, using Lightsail, becomes more straightforward. It is a useful
    tool to lure in new users wanting a quick and secure solution for delivering their
    web apps.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于DigitalOcean、Linode和Hetzner等提供商，亚马逊也推出了一项相对较新的服务（始于2017年），名为**Lightsail**。这项服务的推出旨在为客户提供一种简单的方式，在云端部署**虚拟专用服务器**（**VPSs**）或虚拟机（VMs）。其界面与竞争对手的界面相似，但在其基础上增加了完整的亚马逊基础设施可靠性。Lightsail提供了几种发行版，并附带应用程序包。通过Lightsail在AWS上部署变得更加简便。这是一个有用的工具，能够吸引那些寻求快速且安全的解决方案来交付Web应用的新用户。
- en: There are other solutions available, such as Google’s solution, called GCE,
    which is the IaaS solution from **Google Cloud Platform** (**GCP**). The GCP interface
    is very similar to the one on the Azure platform.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他可用的解决方案，例如谷歌的解决方案，名为GCE，这是**谷歌云平台**（**Google Cloud Platform**，简称GCP）的IaaS解决方案。GCP的界面与Azure平台上的界面非常相似。
- en: Important note
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: One interesting aspect of using GCP is that when you want to delete a project,
    the operation is not immediate, and the deletion is scheduled in one month’s time.
    This could be seen as a safety net if the deletion was not intentional, and you
    need to roll back the project.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GCP时，一个有趣的方面是，当你想删除一个项目时，操作不会立即生效，而是将在一个月后安排删除。如果删除操作不是出于故意，并且你需要恢复该项目，这可以视为一种安全保障。
- en: In the next section, we will detail some of the PaaS solutions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将详细介绍一些PaaS解决方案。
- en: Introducing PaaS solutions
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入PaaS解决方案
- en: PaaS is another form of cloud computing. Compared to IaaS, PaaS provides the
    hardware layer together with an application layer. The hardware and software are
    hosted by the CSP, with no need to manage them from the client side. Clients of
    PaaS solutions are, in the majority of cases, application developers. The CSPs
    that offer PaaS solutions are mostly the same as those that offer IaaS solutions.
    We have Amazon, Microsoft, and Google as the major PaaS providers. In the following
    subsections, we will discuss some PaaS solutions.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: PaaS是另一种形式的云计算。与IaaS相比，PaaS提供了硬件层以及应用层。硬件和软件都由CSP托管，客户无需管理它们。PaaS解决方案的客户在大多数情况下是应用开发者。提供PaaS解决方案的CSP与提供IaaS解决方案的CSP大致相同。主要的PaaS提供商包括亚马逊、微软和谷歌。接下来的小节中，我们将讨论一些PaaS解决方案。
- en: Amazon Elastic Beanstalk
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亚马逊弹性贝叶斯托克（Elastic Beanstalk）
- en: Amazon offers the **Elastic Beanstalk** service, whose interface is straightforward.
    You can create a sample application or upload your own, and Beanstalk takes care
    of the rest, from deployment details to load balancing, scaling, and monitoring.
    You select the AWS EC2 hardware instances to deploy on.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊提供了**弹性贝叶斯托克（Elastic Beanstalk）**服务，其界面简洁明了。你可以创建一个示例应用或上传你自己的应用，Beanstalk会处理其余的工作，从部署细节到负载均衡、扩展和监控。你只需选择要部署的AWS
    EC2硬件实例。
- en: 'Next, we will discuss another major player’s offering: **Google** **App Engine**.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论另一家主要竞争者的服务：**谷歌应用引擎**（**Google App Engine**）。
- en: Google App Engine
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谷歌应用引擎（Google App Engine）
- en: Google’s PaaS solution is Google App Engine, a fully managed serverless environment
    that is relatively easy to use, with support for a large number of programming
    languages. Google App Engine is a scalable solution with automatic security updates
    and managed infrastructure and monitoring. It offers solutions to connect to Google
    Cloud storage solutions and support for all major web programming languages such
    as Go, Node.js, Python, .NET, or Java. Google offers competitive pricing and an
    interface similar to the one we saw in their IaaS offering. Another major player
    with solid offerings is DigitalOcean, and we will discuss this next.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Google的PaaS解决方案是Google App Engine，这是一种完全托管的无服务器环境，使用起来相对简单，支持多种编程语言。Google App
    Engine是一个可扩展的解决方案，具有自动安全更新、托管基础设施和监控功能。它提供连接到Google Cloud存储解决方案的功能，并支持Go、Node.js、Python、.NET和Java等所有主要的Web编程语言。Google提供具有竞争力的定价，并且其界面与我们在IaaS产品中看到的类似。另一个主要的参与者是DigitalOcean，我们接下来将讨论这个平台。
- en: DigitalOcean App Platform
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DigitalOcean App Platform
- en: DigitalOcean offers a PaaS solution in the form of **App Platform**. It offers
    a straightforward interface, a direct connection with your GitHub or GitLab repository,
    and a fully managed infrastructure. DigitalOcean is on the same level as big players
    such as Amazon and Google, and with App Platform, it manages infrastructure, provisioning,
    databases, application runtimes and dependencies, and the underlying operating
    system. It offers support for popular programming languages and frameworks such
    as Python, Node.js, Django, Go, React, and Ruby. DigitalOcean App Platform uses
    open cloud-native standards, with automatic code analysis, container creation,
    and orchestration. A distinctive competence of this solution is the free *starter
    tier*, for deploying up to three static websites. For prototyping dynamic web
    apps, there is a *basic tier*, and for deploying professional apps on the market,
    there is a *professional tier* available. DigitalOcean’s interface is pleasant
    and could be attractive to newcomers. Their pricing acts as an advantage too.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: DigitalOcean提供了一种形式为**App Platform**的PaaS解决方案。它提供了一个直观的界面，可以直接与您的GitHub或GitLab仓库连接，并且是一个完全托管的基础设施。DigitalOcean与Amazon和Google等大厂处于同一水平，使用App
    Platform时，它管理基础设施、资源分配、数据库、应用运行时及其依赖项以及底层操作系统。它支持Python、Node.js、Django、Go、React和Ruby等流行的编程语言和框架。DigitalOcean
    App Platform采用开放的云原生标准，具有自动代码分析、容器创建和编排等功能。这个解决方案的一个独特优势是免费的*入门级套餐*，可以部署最多三个静态网站。对于原型开发动态Web应用程序，有*基础套餐*，而对于市场上的专业应用程序部署，则提供*专业套餐*。DigitalOcean的界面友好，可能对新手尤其具有吸引力。它们的定价也是一个优势。
- en: Open source PaaS solutions
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源PaaS解决方案
- en: 'Besides ready-to-use solutions from providers listed previously, there are
    open source PaaS solutions provided by **Cloud Foundry**, **Red Hat OpenShift**,
    **Heroku**, and others, all of which we will not detail in this section. Nevertheless,
    the three mentioned previously are worth at least a short introduction, so let’s
    discuss them briefly:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的提供商的即用型解决方案，还有由**Cloud Foundry**、**Red Hat OpenShift**、**Heroku**等提供的开源PaaS解决方案，我们在本节中不详细介绍这些。然而，前面提到的三者至少值得简要介绍一下，接下来我们将简要讨论它们：
- en: '**Red Hat OpenShift**: This is a container platform for application deployments.
    Its base is a Linux distribution (RHEL) paired with a container runtime and solutions
    for networking, registry, authentication, and monitoring. OpenShift was designed
    to be a viable, hybrid PaaS solution with total Kubernetes integration (Kubernetes
    will be covered briefly in the following section, *Introducing CaaS solutions*,
    and in more detail in [*Chapter 16*](B19682_16.xhtml#_idTextAnchor342), *Deploying
    Applications* *with Kubernetes*). OpenShift took advantage of the CoreOS acquisition
    (discussed later on) by providing some unique solutions. The new CoreOS Tectonic
    container platform is merging with OpenShift to bring to the user the best of
    both worlds.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Red Hat OpenShift**：这是一个用于应用部署的容器平台。它的基础是一个Linux发行版（RHEL），配备容器运行时以及用于网络、注册、认证和监控的解决方案。OpenShift旨在成为一个可行的、混合的PaaS解决方案，并且与Kubernetes进行了完全集成（Kubernetes将在接下来的章节中简要介绍，*介绍CaaS解决方案*，并在[*第16章*](B19682_16.xhtml#_idTextAnchor342)中更详细地讨论，*使用Kubernetes部署应用程序*）。OpenShift通过收购CoreOS（后面将讨论）来提供一些独特的解决方案。新的CoreOS
    Tectonic容器平台与OpenShift合并，为用户带来两者的最佳优势。'
- en: '**Cloud Foundry**: This is a cloud platform designed as an enterprise-ready
    PaaS solution. It is open source and can be deployed on different infrastructures,
    from on-premises to IaaS providers such as Google GCP, Amazon AWS, Azure, or OpenStack.
    It offers various developer frameworks and a choice of Cloud Foundry certified
    platforms, such as Atos Cloud Foundry, IBM Cloud Foundry, SAP Cloud Platform,
    SUSE Cloud Application Platform, and VMware Tanzu.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cloud Foundry**：这是一个为企业级应用设计的云平台，作为 PaaS 解决方案提供。它是开源的，可以部署在不同的基础设施上，从本地部署到
    IaaS 提供商，如 Google GCP、Amazon AWS、Azure 或 OpenStack。它提供多种开发者框架，并可选择 Cloud Foundry
    认证的平台，如 Atos Cloud Foundry、IBM Cloud Foundry、SAP Cloud Platform、SUSE Cloud Application
    Platform 和 VMware Tanzu。'
- en: '**Heroku**: Heroku is a Salesforce company, and the platform was developed
    as an innovative PaaS. It is based on a container system called Dynos, which uses
    Linux-based containers run by a container management system, designed for scalability
    and agility. It offers fully managed data services with support for Postgres,
    Redis, Apache Kafka, and Heroku Runtime, a component responsible for container
    orchestration, scaling, and configuration management. Heroku also supports a plethora
    of programming languages, such as Node.js, Ruby, Python, Go, Scala, Clojure, and
    Java.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Heroku**：Heroku 是 Salesforce 旗下的公司，平台作为一种创新的 PaaS 解决方案被开发出来。它基于一个名为 Dynos
    的容器系统，使用由容器管理系统运行的基于 Linux 的容器，旨在实现可扩展性和敏捷性。它提供完全托管的数据服务，支持 Postgres、Redis、Apache
    Kafka 和 Heroku Runtime，后者是负责容器编排、扩展和配置管理的组件。Heroku 还支持多种编程语言，如 Node.js、Ruby、Python、Go、Scala、Clojure
    和 Java。'
- en: PaaS has many solutions for developers, helping them create and deploy an application
    by taking away the burden of managing the infrastructure. As you might have learned
    by now, many of the solutions described in this section rely on the use of containers.
    This is why, in the next section, we will detail a subset of IaaS called CaaS,
    where we will introduce you to container orchestration and container-specialized
    operating systems.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: PaaS 为开发者提供了许多解决方案，帮助他们创建和部署应用程序，同时减轻管理基础设施的负担。正如你现在可能已经了解的，这一节中描述的许多解决方案依赖于容器技术。因此，在下一节中，我们将详细介绍
    IaaS 的一个子集——CaaS，并向你介绍容器编排和专门为容器设计的操作系统。
- en: Introducing CaaS solutions
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 CaaS 解决方案
- en: CaaS is a subset of the IaaS cloud service model. It lets customers use individual
    containers, clusters, and applications on top of a provider-managed infrastructure.
    CaaS can be used either on-premises or in the cloud, depending on the customer’s
    needs. In a CaaS model, the container engines and orchestration are provided and
    managed by the CSP. A user’s interaction with containers can be done either through
    an API or a web interface. The container orchestration platform used by the provider—mainly
    **Kubernetes** and **Docker**—is important and is a key differentiator between
    different solutions.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: CaaS 是 IaaS 云服务模型的一个子集。它允许客户在提供商托管的基础设施之上使用单独的容器、集群和应用程序。CaaS 可以根据客户的需求，在本地或云端使用。在
    CaaS 模型中，容器引擎和编排由云服务提供商（CSP）提供并管理。用户与容器的交互可以通过 API 或 Web 界面进行。提供商使用的容器编排平台——主要是
    **Kubernetes** 和 **Docker**——是一个重要因素，也是不同解决方案之间的关键区别。
- en: We covered containers (and VMs) in [*Chapter 11*](B19682_11.xhtml#_idTextAnchor231),
    *Working with Virtual Machines*, and[*Chapter 12*](B19682_12.xhtml#_idTextAnchor257)*,
    Managing Containers with Docker*, without giving any detailed information about
    orchestration or container-specialized micro operating systems. We will now provide
    you with some more details on those subjects.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第 11 章*](B19682_11.xhtml#_idTextAnchor231)《*虚拟机工作*》和[*第 12 章*](B19682_12.xhtml#_idTextAnchor257)《*使用
    Docker 管理容器*》中已经涉及过容器（和虚拟机），但并没有详细介绍容器编排或专门针对容器的微操作系统。接下来，我们将为你提供更多相关细节。
- en: Introducing the Kubernetes container orchestration solution
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Kubernetes 容器编排解决方案
- en: Kubernetes is an open source project developed by Google to be used for the
    automatic deployment and scaling of containerized applications. It was written
    in the **Go** programming language. The name “Kubernetes” comes from Greek, and
    it refers to a ship’s helmsman or captain. Kubernetes is a tool for automating
    container management together with infrastructure abstraction and service monitoring.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个由 Google 开发的开源项目，用于自动化部署和扩展容器化应用程序。它是用 **Go** 编程语言编写的。名称“ Kubernetes”来自希腊语，意思是船长或舵手。Kubernetes
    是一个用于自动化容器管理的工具，并与基础设施抽象和服务监控相结合。
- en: Many newcomers confuse Kubernetes with Docker, or vice versa. They are complementary
    tools, each used for a specific purpose. Docker creates a container (like a box)
    in which you want to deploy your application, and Kubernetes takes care of the
    containers (or boxes) once the applications are packed inside and deployed. Kubernetes
    provides a series of services that are essential to running containers, such as
    service discovery and load balancing, storage orchestration, automated backups
    and self-healing, and privacy. The Kubernetes architecture consists of several
    components that are crucial for any administrator to know. We will break them
    down for you in the next section.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 许多新手将 Kubernetes 和 Docker 混淆，反之亦然。它们是互补的工具，每个工具都有特定的用途。Docker 创建一个容器（就像一个盒子），你可以在其中部署你的应用，而
    Kubernetes 则负责容器（或盒子）在应用打包并部署之后的管理。Kubernetes 提供了一系列对运行容器至关重要的服务，如服务发现和负载均衡、存储编排、自动备份和自愈以及隐私保护。Kubernetes
    架构由多个组件组成，这些组件对于任何管理员来说都是至关重要的。我们将在下一节中为你详细讲解。
- en: Introducing the Kubernetes components
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍 Kubernetes 组件
- en: 'When you run Kubernetes, you mainly manage clusters of hosts, which are usually
    containers running Linux. In short, this means that when you run Kubernetes, you
    run clusters. Here is a list of the basic components found in Kubernetes:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 Kubernetes 时，你主要管理的是宿主机集群，这些宿主机通常是运行 Linux 的容器。简而言之，这意味着当你运行 Kubernetes
    时，你在运行集群。以下是 Kubernetes 中的基本组件列表：
- en: A **cluster** is the core of Kubernetes, as its sole purpose is to manage lots
    of clusters. Each cluster consists of at least a control plane and one or more
    nodes, each node running containers inside pods.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cluster** 是 Kubernetes 的核心，因为它的唯一目的是管理大量的集群。每个集群至少由一个控制平面和一个或多个节点组成，每个节点在
    Pod 内运行容器。'
- en: 'A **control plane** consists of processes that control nodes. The components
    of a control plane are as follows:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**control plane** 由控制节点的过程组成。控制平面的组件如下：'
- en: '**kube-apiserver**: This is the API server at the frontend of the control plane'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kube-apiserver**：这是控制平面前端的 API 服务器。'
- en: '**etcd**: This is the key-value store for all the data inside the cluster'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**etcd**：这是集群内所有数据的键值存储。'
- en: '**kube-scheduler**: This looks for pods that have no assigned node and connects
    them to a node to run'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kube-scheduler**：它寻找没有分配节点的 Pods，并将它们连接到节点上运行。'
- en: '**kube-controller-manager**: This runs the controller processes, including
    the node controller, the replication controller, the endpoints controller, and
    the token controller'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kube-controller-manager**：它运行控制器进程，包括节点控制器、复制控制器、端点控制器和令牌控制器。'
- en: '**cloud-controller-manager**: This is a tool that allows you to link your cluster
    to your cloud provider’s API; it includes the node controller, the route controller,
    and the service controller'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cloud-controller-manager**：这是一个允许你将集群链接到云提供商 API 的工具；它包括节点控制器、路由控制器和服务控制器。'
- en: '**Nodes** are either a VM or a physical machine running services needed for
    pods. The node components run on every node and are responsible for maintaining
    the running pods. The components are as follows:'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nodes** 是运行 Pod 所需服务的虚拟机或物理机器。节点组件在每个节点上运行，负责维护正在运行的 Pods。组件如下：'
- en: '**kube-proxy**: This is responsible for network rules on each node'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kube-proxy**：它负责每个节点的网络规则。'
- en: '**kubelet**: This makes sure that each container is running inside a pod'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubelet**：它确保每个容器都在一个 Pod 内运行。'
- en: '**Pods** are a collection of different containers running in the cluster. They
    are the components of the workload.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pods** 是在集群中运行的不同容器的集合。它们是工作负载的组件。'
- en: Kubernetes clusters are extremely complicated to master. Understanding the concepts
    around it needs a lot of practice and dedication. No matter how complex it is,
    Kubernetes does not do everything for you. You still have to choose the container
    runtime (supported runtimes are **Docker**, **containerd**, and **Container Runtime
    Interface** (**CRI**)-O), CI/CD tools, the storage solution, access control, and
    app services.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 集群非常复杂，需要大量的实践和专注才能掌握。理解它的相关概念需要大量的练习和投入。不管它有多复杂，Kubernetes 并不是为你做所有的事情。你仍然需要选择容器运行时（支持的运行时有
    **Docker**、**containerd** 和 **Container Runtime Interface** (**CRI**)-O）、CI/CD
    工具、存储解决方案、访问控制和应用服务。
- en: Managing Kubernetes clusters is out of the scope of this chapter, but you will
    learn about this in [*Chapter 16*](B19682_16.xhtml#_idTextAnchor342), *Deploying
    Applications* *with Kubernetes*. This short introduction was needed for you to
    understand the concepts and tools that Kubernetes uses.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 管理 Kubernetes 集群超出了本章的范围，但您将在 [*第16章*](B19682_16.xhtml#_idTextAnchor342) 中学习到这部分内容，即
    *使用 Kubernetes 部署应用程序*。这部分简短的介绍是为了帮助您理解 Kubernetes 使用的概念和工具。
- en: Besides Kubernetes, there are several other container orchestration tools, such
    as **Docker Swarm**, **Apache Mesos**, and **Nomad** from HashiCorp. They are
    extremely powerful tools, used by many people around the world. We will not cover
    these in detail here, but we thought it would be useful to at least enumerate
    them at the end of this container orchestration section. In the next section,
    we will provide you with some information about container solutions in the cloud.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Kubernetes 之外，还有其他一些容器编排工具，如 **Docker Swarm**、**Apache Mesos** 和 HashiCorp
    的 **Nomad**。它们是非常强大的工具，被全球许多人使用。我们在这里不会详细介绍这些工具，但我们认为至少在容器编排部分的末尾列出它们是有用的。在接下来的章节中，我们将为您提供一些关于云中容器解决方案的信息。
- en: Deploying containers in the cloud
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在云中部署容器
- en: 'You can use container orchestration solutions in the cloud, and the following
    offerings are essential for this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在云中使用容器编排解决方案，以下是实现这一目标的关键服务：
- en: '**Amazon Elastic Container Service** (**ECS**): Amazon ECS is a fully managed
    service for orchestrating containers. It offers an optional, serverless solution
    (**AWS Fargate**) and is run inside by some of Amazon’s key services, which ensures
    that the tool is tested and is secure enough for anyone to use.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊弹性容器服务** (**ECS**)：亚马逊 ECS 是一个完全托管的容器编排服务。它提供了一个可选的无服务器解决方案 (**AWS Fargate**)，并由亚马逊的一些关键服务内部运行，确保该工具经过测试，足够安全，任何人都可以使用。'
- en: '**Amazon Amazon Elastic Kubernetes Service** (**EKS**): Amazon also offers
    an EKS service for orchestrating Kubernetes applications. It is based on **Amazon
    EKS Distro** (**EKS-D**), which is a Kubernetes distribution developed by Amazon,
    based on the original open source Kubernetes. By using EKS-D, you can run Kubernetes
    either on-premises, on Amazon’s own EC2 instances, or on VMware vSphere VMs.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊弹性 Kubernetes 服务** (**EKS**)：亚马逊还提供了一个用于编排 Kubernetes 应用的 EKS 服务。它基于 **亚马逊
    EKS Distro** (**EKS-D**)，这是由亚马逊开发的一个 Kubernetes 发行版，基于原始的开源 Kubernetes。通过使用 EKS-D，您可以在本地、亚马逊自己的
    EC2 实例上或在 VMware vSphere 虚拟机上运行 Kubernetes。'
- en: '**Google Kubernetes Engine** (**GKE**): GKE offers pre-built deployment templates,
    with pod auto-scaling based on the CPU and memory usage. Scaling can be done across
    multiple pools, with enhanced security provided by GKE Sandbox. GKE Sandbox provides
    an extra layer of security by protecting the host kernel and running applications.
    Besides Google and Amazon, Microsoft offers a strong solution for container orchestration
    with AKS.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**谷歌 Kubernetes 引擎** (**GKE**)：GKE 提供了预构建的部署模板，并基于 CPU 和内存使用情况进行 Pod 自动扩展。扩展可以跨多个池进行，GKE
    Sandbox 提供了增强的安全性。GKE Sandbox 通过保护主机内核和运行应用程序来提供额外的安全层。除了谷歌和亚马逊，微软也提供了强大的容器编排解决方案
    —— AKS。'
- en: '**Microsoft Azure Kubernetes Service** (**AKS**): AKS is a managed service
    for deploying clusters of containerized applications. As with the other providers,
    Microsoft offers a fully managed solution by handling resource maintenance and
    health monitoring. The AKS nodes use Azure VMs to run and support different operating
    systems, such as Microsoft Windows Server images. It also offers free upgrades
    to the newest available Kubernetes images. Among other solutions, AKS offers GPU-enabled
    nodes, storage volume support, and special development tool integration with Microsoft’s
    own Visual Studio Code.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微软 Azure Kubernetes 服务** (**AKS**)：AKS 是一种用于部署容器化应用集群的托管服务。与其他提供商一样，微软提供了一个完全托管的解决方案，处理资源维护和健康监控。AKS
    节点使用 Azure 虚拟机运行，并支持不同的操作系统，如微软 Windows Server 镜像。它还提供免费升级到最新可用的 Kubernetes 镜像。在其他解决方案中，AKS
    提供了支持 GPU 的节点、存储卷支持，并与微软自家的 Visual Studio Code 集成了特殊的开发工具。'
- en: After seeing some of the solutions available to deploy Kubernetes in the cloud
    and learning about the main components of Kubernetes and how they work, in the
    following section, we will discuss the importance of microservices in cloud computing.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了部署 Kubernetes 到云端的几种解决方案，并学习了 Kubernetes 的主要组件及其工作原理后，接下来的章节将讨论微服务在云计算中的重要性。
- en: Introducing microservices
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入微服务
- en: A **microservice** is an architectural style used in application delivery. Over
    time, application delivery evolved from a monolithic model toward a decentralized
    one, all thanks to the evolution of cloud technologies. Starting with the historical
    launch of AWS in 2006, followed by the launch of Heroku in 2007 and Vagrant in
    2010, application deployment started to change too, in order to take advantage
    of the new cloud offerings. Applications moved from having a single, large, and
    monolithic code base to a model where each application would benefit from different
    sets of services. This would make the code base more lightweight and dependent
    on different services.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务**是一种应用交付的架构风格。随着时间的推移，应用交付从单体模型演变为去中心化模型，这一切都要归功于云技术的进步。从2006年AWS的历史性发布开始，到2007年Heroku和2010年Vagrant的推出，应用部署也开始发生变化，以利用新的云服务。应用从拥有单一的、庞大的单体代码库，转变为每个应用都能受益于不同服务集的模型。这使得代码库变得更加轻量，并依赖于不同的服务。'
- en: 'Let us explain how a **monolithic application** differs from a **microservices**
    **architecture** application:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来解释一下**单体应用**与**微服务架构**应用之间的区别：
- en: A monolithic application model has all the functionalities inside a single process
    and it is deployed by simple replication on multiple servers. In comparison, a
    microservice architecture assumes that the application has its functionalities
    separated into different services. Those services are then distributed and scaled
    across different servers, depending on the user’s needs.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单体应用模型将所有功能集成在一个进程中，并通过简单的复制在多个服务器上部署。相比之下，微服务架构假设应用的功能被拆分为不同的服务。这些服务会根据用户需求分布并扩展到不同的服务器上。
- en: A microservices architecture has a modular-based approach. Each module will
    correspond to a specific service. Services work independently of one another and
    are connected through REST APIs based on the HTTP protocol. This means that each
    application functionality can be developed in different languages, depending on
    which one is better suited. This modular base can also take advantage of new container
    technologies.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务架构采用基于模块的方式。每个模块对应一个特定的服务。服务相互独立，通过基于HTTP协议的REST API连接。这意味着每个应用功能可以用不同的语言进行开发，具体选择哪种语言取决于哪种语言更适合。这种模块化方式还可以利用新的容器技术。
- en: A microservices architecture is known for rapidly delivering complex applications.
    It has no technology or language lock-in; it offers independent scaling and updates
    for each service and component, with no disturbance to other running services;
    and it has a fail-proof architecture. The microservices model can be adapted to
    existing monolithic applications by breaking them down into individual, modular
    services. There is no need to rewrite the entire application, only splitting the
    entire code base into smaller parts. Microservices are optimized for DevOps and
    CI/CD practices, thanks to their modular approach.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务架构以快速交付复杂应用而著称。它没有技术或语言的锁定；它为每个服务和组件提供独立的扩展和更新，不会干扰其他正在运行的服务；并且具有防故障架构。微服务模型可以通过将现有的单体应用拆分为独立的模块化服务来适应这些应用。不需要重写整个应用，只需将整个代码库拆分为更小的部分。由于其模块化的方式，微服务非常适合DevOps和CI/CD实践。
- en: In the next section, we will introduce you to DevOps practices and tools.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将为您介绍DevOps的实践和工具。
- en: Introducing DevOps
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入DevOps
- en: '**DevOps** is a culture. Its name comes from a combination of development and
    operations, and it envisions the practices and tools that are used to deliver
    rapidly. DevOps is about speed, agility, and time. We all know the phrase “time
    is money,” and this applies very well to the IT sector. The ability to deliver
    services and applications at a high speed can make the difference between being
    successful as a business and being irrelevant in the market.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps**是一种文化。它的名字来源于开发（Development）和运维（Operations）的结合，旨在通过实践和工具实现快速交付。DevOps强调的是速度、敏捷性和时间。我们都知道“时间就是金钱”这一说法，这在IT行业尤为适用。能够快速交付服务和应用，往往是业务成功与在市场中被淘汰的关键。'
- en: DevOps is a model of cooperation between different teams involved in delivering
    services and applications. This means that the entire life cycle, from development
    and testing, up to deployment and management, is done by teams that are equally
    involved at every stage. The DevOps model assumes that no team is operating in
    a closed environment, but rather operates transparently in order to achieve the
    agility they need to succeed. There is also a different DevOps model whereby security
    and quality assurance teams are equally involved in the development cycle. It
    is called **DevSecOps**.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是一种不同团队之间合作的模型，这些团队参与交付服务和应用程序。这意味着整个生命周期，从开发、测试到部署和管理，都是由在每个阶段都同等参与的团队完成的。DevOps模型假设没有团队在封闭的环境中操作，而是以透明的方式操作，以便实现成功所需的敏捷性。还有一种不同的DevOps模型，其中安全性和质量保证团队在开发周期中同样重要。这就是**DevSecOps**。
- en: Crucial for the DevOps model are the automated processes that are created using
    specific tools. This mindset of agility and speed determined the rise of a new
    name associated with DevOps, and that is CI/CD. The CI/CD mindset assures that
    every development step is continuous, with no interruptions. To support this mindset,
    new automation tools have emerged. Perhaps the most widely known is the open source
    automation tool, **Jenkins**. This is a modular tool and can be extended with
    the use of plugins. The ecosystem around the application is quite large, with
    hundreds of plugins available to choose from. Jenkins is written in Java and was
    designed to automate software development processes, from building and testing,
    up to delivery. One of the assets of Jenkins is the ability to create a pipeline
    through the use of specialized plugins. A pipeline is a tool that adds support
    for CD as an automated process to the application life cycle. Jenkins can be used
    either on-premises or in the cloud. It is also a viable solution for use as a
    SaaS offering.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 对于DevOps模型来说，自动化过程是通过特定工具创建的，这些自动化过程至关重要。敏捷性和速度的思维方式推动了与DevOps相关的一个新名词的兴起，那就是CI/CD。CI/CD思维方式确保每个开发步骤是连续的，没有中断。为了支持这种思维方式，出现了新的自动化工具。也许最广为人知的是开源自动化工具**Jenkins**。这是一个模块化工具，可以通过插件扩展。围绕该应用程序的生态系统相当庞大，有成百上千个插件可供选择。Jenkins是用Java编写的，旨在自动化软件开发过程，从构建和测试，到交付。Jenkins的一个重要特点是能够通过使用专门的插件来创建管道。管道是一个工具，它为应用程序生命周期中的CD提供自动化支持。Jenkins可以在本地或云端使用，它也可以作为SaaS服务来使用。
- en: The DevOps philosophy is not only related to application deployment; healthy
    CD and CI are closely tied to the state of infrastructure. In this respect, tools
    for cloud management such as Ansible, Puppet, and Chef are extremely useful for
    managing the infrastructure that supports application deployments. This is why
    configuration and management at the infrastructure level is extremely important.
    In the next section, you will learn about cloud infrastructure management.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps哲学不仅仅与应用程序部署有关；健康的CD和CI与基础设施的状态密切相关。在这方面，像Ansible、Puppet和Chef这样的云管理工具对于管理支持应用程序部署的基础设施非常有用。这就是为什么基础设施级别的配置和管理至关重要。在接下来的部分中，你将学习云基础设施管理。
- en: Exploring cloud management tools
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索云管理工具
- en: 'Today’s software development and deployment relies on a plethora of physical
    systems and VMs. Managing all the related environments for development, testing,
    and production is a tedious task and involves the use of automated tools. The
    most widely used solutions for cloud infrastructure management are tools such
    as **Ansible**, **Puppet**, and **Chef Infra**. All these configuration management
    tools are powerful and reliable, and we will reserve [*Chapter 17*](B19682_17.xhtml#_idTextAnchor359),
    *Infrastructure and Automation with Ansible*, to teach you how to use only one
    of them: Ansible. Nevertheless, we will briefly introduce you to all of them in
    this section.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当今的软件开发和部署依赖于大量的物理系统和虚拟机。管理所有与开发、测试和生产相关的环境是一项繁琐的任务，并且需要使用自动化工具。云基础设施管理中最广泛使用的解决方案是像**Ansible**、**Puppet**和**Chef
    Infra**这样的工具。所有这些配置管理工具都非常强大和可靠，我们将在[*第17章*](B19682_17.xhtml#_idTextAnchor359)，*使用Ansible进行基础设施和自动化*中，教你如何使用其中的一个工具：Ansible。尽管如此，我们将在本节中简要介绍它们。
- en: Ansible
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ansible
- en: Ansible is an open source project currently owned by Red Hat. It is considered
    a simple automation tool, used for diverse actions such as application deployment,
    configuration management, cloud provisioning, and service orchestration. It was
    developed in Python and uses the concept of nodes to define categories of systems,
    with a **control node** as the master machine running Ansible, and different **managed
    nodes** as other machines that are controlled by the master. All the nodes are
    connected over SSH and controlled through an application called an **Ansible module**.
    Each module has a specific task to do on the managed nodes, and when the task
    is completed, it will be removed from that node.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 是一个目前由 Red Hat 拥有的开源项目。它被认为是一个简单的自动化工具，用于各种操作，如应用部署、配置管理、云供应和服务编排。它是用
    Python 开发的，使用节点的概念来定义系统类别，**控制节点**作为运行 Ansible 的主机，而不同的**受管节点**是由主机控制的其他机器。所有节点通过
    SSH 连接，并通过一个名为 **Ansible 模块** 的应用进行控制。每个模块在受管节点上执行特定任务，任务完成后，该模块会从节点上移除。
- en: The way modules are used is determined by an Ansible playbook. The playbook
    is written in **YAML** (a recursive acronym for **YAML Ain’t Markup Language**),
    a language mostly used for configuration files. Ansible also uses the concept
    of **inventory**, where lists of the managed nodes are kept. When running commands
    on nodes, you can apply them based on the lists inside your inventory, based on
    **patterns**. Ansible will apply the commands on every node or group of nodes
    available in a certain pattern. Ansible is considered one of the easiest automation
    tools available. It supports Linux/Unix and Windows for client machines, but the
    master machine must be Linux/Unix.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的使用方式由 Ansible 的剧本决定。剧本使用 **YAML** 编写（**YAML Ain’t Markup Language** 的递归缩写），YAML
    是一种主要用于配置文件的语言。Ansible 还使用了**清单**的概念，其中包含被管理节点的列表。运行节点上的命令时，可以根据清单中的列表，依据**模式**来应用命令。Ansible
    会根据某一模式在每个节点或节点组上应用命令。Ansible 被认为是最简单的自动化工具之一。它支持 Linux/Unix 和 Windows 客户端机器，但主机必须是
    Linux/Unix。
- en: Puppet
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet
- en: Puppet is one of the oldest automation tools available. Puppet’s architecture
    is different from that of Ansible. It uses the concepts of **primary servers**
    and **agents**. Puppet works with infrastructure code written using **domain-specific
    language** (**DSL**) code specific to Puppet, based on the Ruby programming language.
    The code is written on the primary server, transferred to the agent, and then
    translated into commands that are executed on the system you want to manage. Puppet
    also has an inventory tool called **Facter**, which stores data about the agents,
    such as hostname, IP address, and operating system. Information stored is sent
    back to the primary server in the form of a **manifest**, which will then be transformed
    into a JSON document called a **catalog**. All the manifests are kept inside **modules**,
    which are tools that are used for specific tasks. Each module contains information
    in the form of code and data. This data is centralized and managed by a tool called
    **Hiera**. All the data that Puppet generates is stored inside databases and managed
    through APIs by every app that needs to manage it. Compared to Ansible, Puppet
    seems a lot more complex. Puppet’s primary server supports only Linux/Unix.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 是最古老的自动化工具之一。Puppet 的架构与 Ansible 不同。它采用了**主服务器**和**代理**的概念。Puppet 使用基于
    Ruby 编程语言的**领域特定语言**（**DSL**）编写基础设施代码。代码在主服务器上编写，传输到代理端，然后转换为在目标系统上执行的命令。Puppet
    还有一个名为 **Facter** 的清单工具，用于存储关于代理的数据，如主机名、IP 地址和操作系统。存储的信息以**清单**的形式发送回主服务器，然后转换成名为**目录**的
    JSON 文档。所有清单都保存在**模块**内，模块是用于特定任务的工具。每个模块包含以代码和数据形式的信息。这些数据是由名为 **Hiera** 的工具集中管理的。所有由
    Puppet 生成的数据都存储在数据库中，并通过每个需要管理它的应用程序的 API 进行管理。与 Ansible 相比，Puppet 看起来要复杂得多。Puppet
    的主服务器仅支持 Linux/Unix。
- en: Chef Infra
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chef Infra
- en: 'Chef Infra is another automation tool. It uses a client-server architecture.
    It uses the concepts of **cookbooks** and **recipes**. The main components are
    as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Infra 是另一种自动化工具。它采用客户端-服务器架构，使用**烹饪书**和**食谱**的概念。其主要组件如下：
- en: '**Chef Server**: This is similar to a hub that handles all the configuration
    data. It is mainly used to upload cookbooks to the Chef Client.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chef 服务器**：这类似于一个中心枢纽，处理所有配置数据。它主要用于将烹饪书上传到 Chef 客户端。'
- en: '**Chef Client**: This is an application that is installed on every node from
    the infrastructure that you manage.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chef Client**：这是一个安装在你所管理的基础设施中每个节点上的应用程序。'
- en: '**Chef Workstation**: The Chef Workstation manages cookbooks that are used
    for infrastructure administration.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chef Workstation**：Chef Workstation 管理用于基础设施管理的食谱。'
- en: Chef Infra uses the same Ruby-based code similar to Puppet called DSL. The server
    needs to be installed on Linux/Unix, and the client supports Windows too.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Infra 使用与 Puppet 类似的基于 Ruby 的代码，称为 DSL。服务器需要安装在 Linux/Unix 上，客户端也支持 Windows。
- en: All the automation and configuration tools presented in this section use different
    architectures but do the same thing, which is to provide an abstraction layer
    that defines the desired state of the infrastructure. Each tool is a different
    beast, having its own strengths and weaknesses. Chef Infra and Puppet might have
    a steeper learning curve with their Ruby/DSL-based code, while Ansible could be
    easier to approach due to its simpler architecture and use of the Python programming
    language. Nevertheless, you can’t go wrong with either one.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中介绍的所有自动化和配置工具使用了不同的架构，但都做相同的事情，即提供一个抽象层来定义基础设施的期望状态。每个工具都有其独特之处，拥有各自的优缺点。Chef
    Infra 和 Puppet 可能由于其基于 Ruby/DSL 的代码而具有更陡峭的学习曲线，而 Ansible 由于其更简单的架构和使用 Python 编程语言，可能更易于上手。然而，无论选择哪个工具，你都不会出错。
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced you to cloud computing by showing you some of
    the most important concepts, tools, and solutions used. This should be enough
    for you to start learning about cloud technologies, which is a very vast and complex
    subject. For more details, please refer to the *Further* *reading* section.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过展示一些最重要的概念、工具和解决方案，向你介绍了云计算。这些内容应该足够让你开始学习云技术，而云技术是一个非常广泛且复杂的主题。如需更多详细信息，请参阅*进一步*
    *阅读*部分。
- en: 'We talked about cloud standards, a significant and largely overlooked subject,
    and about the main cloud types and services. You now have an idea of what each
    as-a-service solution means and what the main differences are between them. You
    know what the most important solutions are and how they are provided by the main
    players in this field: Amazon, Google, and Microsoft. We introduced you to container
    orchestration with Kubernetes and how it works. You learned about APIs and minimal
    container-specialized operating systems and the DevOps culture, microservices,
    and infrastructure automation tools. You learned a lot in this chapter, but keep
    in mind that all these subjects have only scratched the surface of cloud computing.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了云标准，这是一个重要但常被忽视的话题，还讲解了主要的云类型和服务。现在你已经对每种“即服务”解决方案的含义有了大致了解，并知道它们之间的主要区别。你了解了最重要的解决方案，以及它们是如何由这个领域的主要玩家提供的：亚马逊、谷歌和微软。我们向你介绍了
    Kubernetes 容器编排及其工作原理，讲解了 API、最小化的容器专用操作系统、DevOps 文化、微服务和基础设施自动化工具。你在本章中学到了很多内容，但请记住，所有这些主题只是云计算的冰山一角。
- en: In the next chapter, we will introduce you to the more practical side of cloud
    deployments. You will learn how to deploy Linux on major clouds such as AWS, Azure,
    and GCP.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将向你介绍云部署的更实用的一面。你将学习如何在主要云平台（如 AWS、Azure 和 GCP）上部署 Linux。
- en: Further reading
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you want to learn more about cloud technologies, please check out the following
    titles:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解云技术，请查阅以下书籍：
- en: '*OpenStack for Architects – Second Edition* by Ben Silverman and Michael Solberg,
    Packt Publishing'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《OpenStack 架构师指南 – 第二版》* 由 Ben Silverman 和 Michael Solberg 编著，Packt 出版社'
- en: '*Learning DevOps – Second Edition* by Mikael Krief, Packt Publishing'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《学习 DevOps – 第二版》* 由 Mikael Krief 编著，Packt 出版社'
- en: '*Design Microservices Architecture with Patterns and Principles [Video]* by
    Mehmet Ozkaya, Packt Publishing'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《通过模式与原则设计微服务架构 [视频]》* 由 Mehmet Ozkaya 编著，Packt 出版社'
- en: '*Multi-Cloud Strategy for Cloud Architects – Second Edition* by Jeroen Mulder,
    Packt Publishing'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《多云策略 – 云架构师第二版》* 由 Jeroen Mulder 编著，Packt 出版社'
- en: '*Architecting Cloud-Native Serverless Solutions*, Safeer CM, Packt Publishing'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《云原生无服务器解决方案架构》* 由 Safeer CM 编著，Packt 出版社'

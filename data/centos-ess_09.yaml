- en: Chapter 9. Introduction to CoreOS rkt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章：CoreOS rkt 简介。
- en: In the previous chapter, we overviewed CoreUpdate, free and paid container repositories,
    and the hosting and enterprise registry provided by CoreOS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们概述了 CoreUpdate、免费的和付费的容器仓库，以及 CoreOS 提供的托管和企业级注册中心。
- en: 'In this chapter, you will learn about CoreOS''s `rkt`, a container runtime
    for applications. We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习 CoreOS 的 `rkt`，一个面向应用的容器运行时。我们将涵盖本章中的以下主题：
- en: Introduction to `rkt`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rkt` 简介。'
- en: Running streamlined Docker images with `rkt`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `rkt` 运行精简版 Docker 镜像。
- en: Converting Docker images to ACI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Docker 镜像转换为 ACI。
- en: An introduction to rkt
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: rkt 简介。
- en: rkt (pronounced "rock it") is a container runtime for applications made by CoreOS
    and is designed for composability, speed, and security. It is an alternative to
    Docker and is designed to be run on servers with the most rigorous security and
    production environments.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: rkt（发音为 "rock it"）是由 CoreOS 制作的应用容器运行时，设计时注重可组合性、速度和安全性。它是 Docker 的替代方案，专为在安全性和生产环境要求最严格的服务器上运行而设计。
- en: rkt is a standalone tool, compared to Docker's client and central daemon version,
    which makes it a better alternative to Docker, as it has fewer constraints and
    dependencies. For example, if the `docker` central daemon crashes, all running
    `docker` containers will be stopped; in the case of `rkt`, however, this can affect
    only the particular rkt process responsible for running `rkt` containers in its
    pod. As each `rkt` process gets its **process identification number** (**PID**),
    if one `rkt` process dies, it will not affect any other `rkt` process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: rkt 是一个独立的工具，相较于 Docker 的客户端和中央守护进程版本，它使得 rkt 成为 Docker 的一个更好的替代方案，因为它有更少的约束和依赖。例如，如果
    `docker` 中央守护进程崩溃，所有正在运行的 `docker` 容器将被停止；而在 `rkt` 的情况下，这只会影响到特定的 rkt 进程，该进程负责在其
    pod 中运行 `rkt` 容器。由于每个 `rkt` 进程都会有自己的**进程标识号**（**PID**），因此如果一个 `rkt` 进程崩溃，它不会影响到其他任何
    `rkt` 进程。
- en: Features of rkt
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`rkt` 的功能。'
- en: 'We will overview the main `rkt` features, as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将概述 `rkt` 的主要功能，内容如下：
- en: It can be integrated with `init` systems, as `systemd` and `upstart`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以与 `init` 系统集成，如 `systemd` 和 `upstart`。
- en: It can be integrated with cluster orchestration tools, such as `fleet` and `Kubernetes`
    (which we will cover in the next chapter)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以与集群编排工具集成，如 `fleet` 和 `Kubernetes`（我们将在下一章介绍）。
- en: It is compatible with other container solutions as Docker
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它与其他容器解决方案如 Docker 兼容。
- en: It has an extensible and modular architecture
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有可扩展和模块化的架构。
- en: The basics of App container
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用容器基础。
- en: '`rkt` is an implementation of **App Container** (**appc**: [https://github.com/appc/spec/](https://github.com/appc/spec/)),
    which is open source and defines an image format, the runtime environment, and
    the discovery mechanism of application containers:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`rkt` 是 **应用容器**（**appc**: [https://github.com/appc/spec/](https://github.com/appc/spec/)）的一个实现，它是开源的，定义了应用容器的镜像格式、运行时环境和发现机制：'
- en: '`rkt` uses images of the **Application Container Image** (**ACI**) format as
    defined by the App Container (appc) specifications ([https://github.com/appc/spec](https://github.com/appc/spec)).
    An ACI is just a simple `tarball` bundle of different `rootfs` files and an image
    manifest.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rkt` 使用的是**应用容器镜像**（**ACI**）格式的镜像，这一格式由应用容器（appc）规范定义（[https://github.com/appc/spec](https://github.com/appc/spec)）。ACI
    只是一个简单的 `tarball` 包，包含不同的 `rootfs` 文件和镜像清单。'
- en: A pod (the basic unit of execution in `rkt`) is a grouping of one or more app
    images (ACIs), with some optionally applied additional metadata on the pod level—for
    example, applying some resource constraints, such as CPU usage.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 pod（`rkt` 中的基本执行单元）是一个或多个应用镜像（ACI）的集合，并且可以在 pod 级别应用一些可选的附加元数据——例如，应用一些资源限制，如
    CPU 使用率。
- en: Using rkt
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 rkt。
- en: As rkt comes preinstalled with CoreOS, running ACI images with rkt is easy and
    it is very similar to `docker` commands. (I would love to write more on this,
    but rkt does not provide many options yet, as it is constantly changing and innovating,
    which was also the case at the time of writing this book).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 rkt 已预装在 CoreOS 中，使用 rkt 运行 ACI 镜像非常简单，而且与 `docker` 命令非常相似。（我很想写更多内容，但由于
    rkt 还在不断变化和创新，目前提供的选项并不多，这在写这本书时也是如此。）
- en: 'As `rkt` has no running OS X client, you need to log in to your CoreOS VM host
    directly to run the following example commands:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `rkt` 没有运行 OS X 客户端，你需要直接登录到 CoreOS VM 主机上才能运行以下示例命令：
- en: 'First, we need to trust the remote site before we download any ACI file from
    there, as `rkt` verifies signatures by default:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要信任远程站点，才能从那里下载任何 ACI 文件，因为 `rkt` 默认会验证签名：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then we can fetch (download) an image from there:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以从那里获取（下载）一个镜像：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then running the container with `rkt` is simple:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用 `rkt` 运行容器非常简单：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you see, `rkt` appropriates ETags—as in our case v1.8.0 will be run.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`rkt` 使用了 ETag——在我们的案例中将会运行 v1.8.0。
- en: rkt networking
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rkt 网络
- en: 'By default `rkt` run uses the host mode for port assignments. For example,
    if you have `EXPOSE 80` in your Dockerfile, run this command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`rkt` 运行使用主机模式进行端口分配。例如，如果你的 Dockerfile 中有 `EXPOSE 80`，运行此命令：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `rkt` pod will share the network stack and interfaces with the host machine.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`rkt` pod 将与主机共享网络栈和接口。'
- en: 'If you want to assign a different port/private IP address, then use `run` with
    these parameters:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想分配一个不同的端口/私有 IP 地址，则使用带有这些参数的 `run`：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: rkt environment variables
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rkt 环境变量
- en: Environment variables can be inherited from the host using the `--inherit-env`
    flag. Using `flag --set-env`, we can set individual environment variables.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `--inherit-env` 标志从主机继承环境变量。使用 `flag --set-env`，我们可以设置单独的环境变量。
- en: 'Okay, let''s prepare a few environment variables to be inherited using these
    two commands:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，接下来我们准备一些环境变量，通过以下两个命令来继承：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now let''s use them together with `--set-env` in the command, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在命令中将它们与 `--set-env` 一起使用，如下所示：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: rkt volumes
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rkt 卷
- en: 'For host volumes, the `-volume` flag needs to be used. Volumes need to be defined
    in the ACI manifest when creating the new ACI image and converting Docker images.
    You will get an output like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于主机卷，需使用 `-volume` 标志。卷需要在创建新的 ACI 镜像和转换 Docker 镜像时在 ACI 清单中定义。你将得到如下输出：
- en: '![rkt volumes](img/image00176.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![rkt 卷](img/image00176.jpeg)'
- en: 'The following command will mount the `host` directory on the `rkt` Pod:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将在 `rkt` Pod 上挂载 `host` 目录：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that the `rkt` volume standard was not completed at the time of writing
    this book, so the previous example might not work when `rkt` reaches its final
    version.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在编写本书时，`rkt` 卷标准尚未完成，因此当 `rkt` 达到最终版本时，前面的示例可能无法工作。
- en: Next let's see how `rkt` plays nicely with docker images.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 `rkt` 如何与 Docker 镜像良好配合。
- en: Running streamlined Docker images with rkt
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 rkt 运行简化版 Docker 镜像
- en: As there are thousands of docker images on the public Docker hub, `rkt` allows
    you to use them very easily. Alternatively, you might have some docker images
    and would like to run them with `rkt` too, without building new `rkt` ACI images,
    to see how they work with `rkt`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在公共的 Docker hub 上有成千上万的 Docker 镜像，`rkt` 使得你可以非常轻松地使用它们。或者，你可能已经有了一些 Docker
    镜像，并希望使用 `rkt` 来运行它们，而无需构建新的 `rkt` ACI 镜像，来查看它们如何与 `rkt` 一起工作。
- en: 'Running Docker images is very much the same as it was in previous examples:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Docker 镜像与之前的示例非常相似：
- en: 'As Docker images do not support signature verification yet, we just skip the
    verification step and fetch one with the `--insecure-skip-verify` flag:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 Docker 镜像尚不支持签名验证，因此我们只需跳过验证步骤，并使用 `--insecure-skip-verify` 标志来获取一个镜像：
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Running streamlined Docker images with rkt](img/image00177.jpeg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用 rkt 运行简化版 Docker 镜像](img/image00177.jpeg)'
- en: 'The last line shown in the preceding screenshot represents the `rkt` image
    ID of the converted ACI, and this can be used to `run` with `rkt` :'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面截图中的最后一行表示转换后的 ACI 的 `rkt` 镜像 ID，这可以用来与 `rkt` 一起 `run`：
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Also we can run in this way, where the image will be downloaded and then run:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也可以用这种方式运行，镜像将会被下载然后运行：
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we want to use volumes with Docker images, we run this line:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要与 Docker 镜像一起使用卷，可以运行这行命令：
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is very similar to the `docker` command, isn't it?
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这与 `docker` 命令非常相似，对吧？
- en: 'Okay, let''s update our local development `nginx.service` to use `rkt`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，让我们更新本地开发的 `nginx.service`，以便使用 `rkt`：
- en: '[PRE12]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you see, there is no `ExecStop=/usr/bin/docker stop nginx`. It is not needed
    because `systemd` takes care of stopping the `rkt` instance when the `systemctl`/`fleetctl`
    stop is used by sending the running `nginx` process a `SIGTERM`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，那里没有 `ExecStop=/usr/bin/docker stop nginx`。这不需要，因为 `systemd` 会在使用 `systemctl`
    / `fleetctl` 停止时，通过发送 `SIGTERM` 信号来停止运行中的 `nginx` 进程。
- en: Much simpler than docker, right?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 比 Docker 简单多了，对吧？
- en: In the next section, we will see how to convert a docker image into an ACI image.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何将 Docker 镜像转换为 ACI 镜像。
- en: Converting Docker images into ACI
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Docker 镜像转换为 ACI
- en: With CoreOS comes another file related to `rkt`—`docker2aci`. It converts a
    docker image to an ACI image (an application container image used by `rkt`).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 CoreOS 的推出，出现了与 `rkt` 相关的另一个文件——`docker2aci`。它将 Docker 镜像转换为 ACI 镜像（`rkt`
    使用的应用容器镜像）。
- en: 'Let''s convert our `nginx` image. Run the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来转换我们的`nginx`镜像。运行以下命令：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Converting Docker images into ACI](img/image00178.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![将 Docker 镜像转换为 ACI](img/image00178.jpeg)'
- en: 'We can also save a docker image in a file and the convert it. Run the following
    command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将 Docker 镜像保存在文件中并进行转换。运行以下命令：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Converting Docker images into ACI](img/image00179.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![将 Docker 镜像转换为 ACI](img/image00179.jpeg)'
- en: 'Finally, you can try to use the generated ACI files by updating the preceding
    `nginx.service fleet` unit:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以尝试通过更新之前的 `nginx.service fleet` 单元来使用生成的 ACI 文件：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we overviewed the main features of CoreOS rkt, the `rkt` application
    container, and the image format. You also learned how to run images based on `aci`
    and `docker` as containers with `rkt`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们概述了 CoreOS rkt 的主要特点、`rkt` 应用容器及其镜像格式。您还学会了如何使用 `rkt` 将基于 `aci` 和 `docker`
    的镜像作为容器运行。
- en: In the next chapter, you will get an introduction to Google Kubernetes, an open
    source orchestration system for application containers.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解 Google Kubernetes，这是一个用于应用容器的开源调度系统。

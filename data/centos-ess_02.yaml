- en: Chapter 2. Getting Started with etcd
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：开始使用 etcd
- en: In this chapter, we will cover `etcd`, CoreOS's central hub of services, which
    provides a reliable way of storing shared data across cluster machines and monitoring
    it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 `etcd`，CoreOS 的服务中央枢纽，它提供了一种可靠的方式来跨集群机器存储共享数据并进行监控。
- en: 'For testing, we will use our already installed CoreOS VM from the previous
    chapter. In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行测试，我们将使用上一章中已经安装的 CoreOS 虚拟机。在本章中，我们将覆盖以下主题：
- en: Introducing `etcd`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 `etcd`
- en: Reading and writing to `etcd` from the host machine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从主机机器读取和写入到 `etcd`
- en: Reading and writing from an application container
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从应用容器读取和写入
- en: Watching changes in `etcd`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察 `etcd` 中的变化
- en: TTL (Time to Live) examples
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TTL（生存时间）示例
- en: Use cases of `etcd`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcd` 的使用案例'
- en: Introducing etcd
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 etcd
- en: The `etcd` function is an open source distributed key value store on a computer
    network where information is stored on more than one node and data is replicated
    using the Raft consensus algorithm. The `etcd` function is used to store the CoreOS
    cluster service discovery and the shared configuration.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`etcd` 功能是一个开源的分布式键值存储系统，运行在计算机网络上，其中信息存储在多个节点上，并通过 Raft 共识算法进行数据复制。`etcd`
    功能用于存储 CoreOS 集群的服务发现和共享配置。'
- en: The configuration is stored in the write-ahead log and includes the cluster
    member ID, cluster ID and cluster configuration, and is accessible by all cluster
    members.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 配置信息存储在预写日志中，包括集群成员 ID、集群 ID 和集群配置，并且可以被所有集群成员访问。
- en: The `etcd` function runs on each cluster's central services role machine, and
    gracefully handles master election during network partitions and in the event
    of a loss of the current master.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`etcd` 功能在每个集群的中央服务角色机器上运行，并在网络分区或当前主节点丢失时优雅地处理主节点选举。'
- en: Reading and writing to etcd from the host machine
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从主机机器读取和写入到 etcd
- en: You are going to learn how read and write to `ectd` from the host machine. We
    will use both the `etcdctl` and `curl` examples here.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何从主机机器读取和写入 `etcd`。我们将在这里使用 `etcdctl` 和 `curl` 示例。
- en: Logging in to the host
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录到主机
- en: 'To log in to CoreOS VM, follow these steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要登录到 CoreOS 虚拟机，请按以下步骤操作：
- en: 'Boot the CoreOS VM installed in the first chapter. In your terminal, type this:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动第一章中安装的 CoreOS 虚拟机。在你的终端中输入以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We need to log in to the host via `ssh`:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要通过 `ssh` 登录到主机：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Reading and writing to ectd
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取和写入到 etcd
- en: 'Let''s read and write to `etcd` using `etcdctl`. So, perform these steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `etcdctl` 读取和写入 `etcd`。所以，请执行以下步骤：
- en: 'Set a `message1` key with `etcdctl` with `Book1` as the value:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `etcdctl` 设置一个名为 `message1` 的键，其值为 `Book1`：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s read the key value to double-check whether everything is fine there:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们读取键值，确认一切是否正常：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, let''s try to do the same using `curl` via an HTTP-based API. The `curl`
    function is handy for accessing `etcd` from any place from where you have access
    to an `etcd` cluster but don''t want/need to use the `etcdctl` client:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们通过基于 HTTP 的 API 使用 `curl` 尝试做同样的操作。`curl` 功能非常方便，可以从任何可以访问 `etcd` 集群的地方访问
    `etcd`，但你不想/不需要使用 `etcdctl` 客户端：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s read it:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们来读取它：
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the HTTP-based `etcd` API means that `etcd` can be read from and written
    to by client applications without the need to interact with the command line.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用基于 HTTP 的 `etcd` API，意味着客户端应用程序可以直接读取和写入 `etcd`，无需与命令行交互。
- en: 'Now, if we want to delete the key-value pair, we type the following command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们想删除键值对，我们输入以下命令：
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Also, we can add a key value pair to a directory, as directories are created
    automatically when a key is placed inside. We only need one command to put a key
    inside a directory:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们可以向目录中添加键值对，因为当将键放入目录中时，目录会自动创建。我们只需要一个命令就能将键放入目录：
- en: '[PRE7]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s now check the directory''s content:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们检查目录的内容：
- en: '[PRE8]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, we get the key value from the directory by typing:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以通过输入以下命令从目录中获取键值：
- en: '[PRE9]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Reading and writing from the application container
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从应用容器读取和写入
- en: Usually, application containers (this is a general term for `docker`, `rkt`,
    and other types of containers) do not have `etcdctl` or even `curl` installed
    by default. Installing `curl` is much easier than installing `etcdctl`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，应用容器（这是 `docker`、`rkt` 和其他类型容器的通用术语）默认情况下没有安装 `etcdctl`，甚至没有安装 `curl`。安装
    `curl` 比安装 `etcdctl` 要容易得多。
- en: 'For our example, we will use the Alpine Linux docker image, which is very small
    in size and will not take much time to pull from the `docker` registry:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将使用Alpine Linux的docker镜像，它非常小，不会花费太多时间从`docker`注册表中拉取：
- en: 'Firstly, we need to check the `docker0` interface IP, which we will use with
    `curl`:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要检查`docker0`接口的IP地址，稍后我们将使用该地址与`curl`配合使用：
- en: '[PRE10]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s run the `docker` container with a `bash` shell:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`bash` shell运行`docker`容器：
- en: '[PRE11]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We should see something like this in Command Prompt:`/ #`.'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在命令提示符中我们应该看到类似于`/ #`的内容：'
- en: 'As `curl` is not installed by default on Alpine Linux, we need to install it:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于Alpine Linux默认没有安装`curl`，我们需要安装它：
- en: '[PRE12]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Repeat steps 3 and 4 from the previous subtopic so that you understand that
    no matter where you are connecting to `etcd` from, `curl` still works in the same
    way.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复上一个小节中的第3步和第4步，这样你就能明白无论你从哪里连接到`etcd`，`curl`的工作方式始终是一样的。
- en: Press *Ctrl* +*D* to exit from the `docker` container.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* +*D*退出`docker`容器。
- en: Watching changes in etcd
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监视`etcd`中的变化
- en: 'This time, let''s watch the key changes in `etcd`. Watching key changes is
    useful when we have, for example, one `fleet` unit with `nginx` writing its port
    to `etcd`, and another reverse proxy application watching for changes and updating
    its configuration:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，让我们监视`etcd`中键值的变化。监视键值变化在以下情况下非常有用：例如，有一个`fleet`单元，它将`nginx`的端口写入`etcd`，而另一个反向代理应用程序则监视变化并更新其配置：
- en: 'We need to create a directory in `etcd` first:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要先在`etcd`中创建一个目录：
- en: '[PRE13]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we watch for changes in this directory:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们监视此目录中的变化：
- en: '[PRE14]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now open another CoreOS shell in a new terminal window:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在新的终端窗口中打开另一个CoreOS shell：
- en: '[PRE15]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We add a new key to the `/foo-data` directory:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`/foo-data`目录下添加一个新键：
- en: '[PRE16]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the first terminal, we should see a notification saying that the key was
    changed:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个终端中，我们应该看到一条通知，提示键值已被更改：
- en: '[PRE17]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: TTL (time to live) examples
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TTL（生存时间）示例
- en: Sometimes, it is handy to put a **time to live** (**TTL**) for a key to expire
    in a certain amount of time. This is useful, for example, in the case of watching
    a key with a 60 second TTL, from a reverse proxy. So, if the `nginx fleet` service
    has not updated the key, it will expire in 60 seconds and will be removed from
    `etcd`. Then the reverse proxy checks for it and does not find it. Hence, it will
    remove the `nginx` service from `config`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，为键设置**生存时间**（**TTL**）以便在一定时间后过期是非常方便的。例如，当监视一个TTL为60秒的键时，反向代理就会用到TTL。因此，如果`nginx
    fleet`服务没有更新该键，它将在60秒内过期并从`etcd`中删除。然后，反向代理检查时未找到该键，因此会将`nginx`服务从`config`中移除。
- en: 'Let''s set a TTL of 30 seconds in this example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这个示例中设置TTL为30秒：
- en: 'Type this in a terminal:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中输入以下内容：
- en: '[PRE18]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Verify that the key is still there:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证该键是否仍然存在：
- en: '[PRE19]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Check again after 30 seconds :'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 30秒后再次检查：
- en: '[PRE20]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If your requested key has already expired, you will be returned `Error`: `100`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您请求的键已经过期，您将收到`错误`：`100`：
- en: '[PRE21]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This time the key got deleted by `etcd` because we put a TTL of 30 seconds for
    it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，`etcd`删除了该键，因为我们为它设置了30秒的TTL。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: TTL is very handy to use to communicate between the different services using
    `etcd` as the checking point.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: TTL在使用`etcd`作为检查点进行不同服务之间的通信时非常方便。
- en: Use cases of etcd
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`etcd`的使用案例'
- en: Application containers running on worker nodes with `etcd` in proxy mode can
    read and write to an `etcd` cluster.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 运行在工作节点上的应用程序容器，可以在代理模式下读取和写入`etcd`集群。
- en: 'Very common `etcd` use cases are as follows: storing database connection settings,
    cache settings, and shared settings. For example, the Vulcand proxy server ([http://vulcanproxy.com/](http://vulcanproxy.com/))
    uses `etcd` to store web host connection details, and it becomes available for
    all cluster-connected worker machines. Another example could be to store a database
    password for MySQL and retrieve it when running an application container.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`etcd`的常见使用案例如下：存储数据库连接设置、缓存设置和共享设置。例如，Vulcand代理服务器([http://vulcanproxy.com/](http://vulcanproxy.com/))使用`etcd`存储Web主机连接详细信息，这些信息对所有集群连接的工作节点机器可用。另一个例子是存储MySQL的数据库密码，并在运行应用程序容器时检索它。'
- en: We will cover more details about cluster setup, central services, and worker
    role machines in the upcoming chapters.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将详细讨论集群设置、中央服务和工作节点角色机器。
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this short chapter, we covered the basics of `etcd` and how to read and write
    to `etcd`, watch for changes in `etcd`, and use TTL for `etcd` keys.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一简短的章节中，我们介绍了`etcd`的基础知识，以及如何读取和写入`etcd`，监视`etcd`中的变化，并使用TTL设置`etcd`键的生存时间。
- en: In the next chapter, you will learn how to use the `systemd` and `fleet` units.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用`systemd`和`fleet`单元。

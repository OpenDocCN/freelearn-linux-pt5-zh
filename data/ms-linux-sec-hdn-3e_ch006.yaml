- en: 5 Securing Your Server with a Firewall - Part 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 使用防火墙保护您的服务器 - 第2部分
- en: Join our book community on Discord
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入我们的书籍社区Discord
- en: '[https://packt.link/SecNet](https://packt.link/SecNet)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SecNet](https://packt.link/SecNet)'
- en: '![](img/file35.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file35.png)'
- en: In *Chapter 4*, *Securing Your Server with a Firewall - Part 1*, we covered
    iptables and nftables, which are management utilities that directly interface
    with netfilter. Although it’s helpful to be familiar with iptables and nftables
    commands in order to create advanced firewall configurations, having to use these
    commands all the time can become a bit unwieldy for performing normal day-to-day
    operations. In this chapter, we’ll look at ufw and firewalld, which are helper
    utilities that can simplify the process of working with either iptables or nftables.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第4章* 的 *使用防火墙保护您的服务器 - 第1部分* 中，我们讨论了iptables和nftables，这是直接与netfilter接口的管理实用工具。虽然熟悉iptables和nftables命令可以帮助创建高级防火墙配置，但经常需要使用这些命令来执行日常操作可能会有些不便。在本章中，我们将看看ufw和firewalld，这些是辅助工具，可以简化与iptables或nftables的工作过程。
- en: First, we'll look at ufw. We'll look at its structure, its commands, and its
    configuration. Then, we'll do the same for firewalld. In both cases, you'll get
    plenty of hands-on practice.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看看ufw。我们将查看它的结构、命令和配置。然后，我们将对firewalld做同样的操作。在两种情况下，您都将获得大量的实践操作。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖以下主题：
- en: '**ufw** for Ubuntu systems'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ufw** 适用于Ubuntu系统'
- en: '**firewalld** for Red Hat systems'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**firewalld** 适用于Red Hat系统'
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code files for this chapter are available here: [https://github.com/PacktPublishing/Mastering-Linux-Security-and-Hardening-Second-Edition.](https://github.com/PacktPublishing/Mastering-Linux-Security-and-Hardening-Second-Edition.)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件在这里可用：[https://github.com/PacktPublishing/Mastering-Linux-Security-and-Hardening-Second-Edition.](https://github.com/PacktPublishing/Mastering-Linux-Security-and-Hardening-Second-Edition.)
- en: Uncomplicated firewall for Ubuntu systems
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 适用于Ubuntu系统的简单防火墙
- en: The ufw is already installed on Ubuntu 20.04 and Ubuntu 22.04\. It still uses
    the iptables backend on Ubuntu 20.04, and the nftables backend on Ubuntu 22.04\.
    For normal operations, it offers a vastly simplified set of commands. Perform
    just one simple command to open the desired ports and another simple command to
    activate it, and you have a good, basic firewall. Whenever you perform a `ufw`
    command, it will automatically configure both the IPv4 and the IPv6 rules. This
    alone is a huge time-saver, and much of what we've had to configure by hand with
    with either iptables or nftables is already there by default. Although our two
    versions of Ubuntu use different backends, ufw configuration is identical for
    both of them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ufw已经安装在Ubuntu 20.04和Ubuntu 22.04上。在Ubuntu 20.04上仍使用iptables后端，在Ubuntu 22.04上使用nftables后端。对于日常操作，它提供了大大简化的命令集。执行一个简单的命令以打开所需端口，再执行另一个简单的命令以激活它，您就有了一个良好的基本防火墙。每次执行`ufw`命令时，它将自动配置IPv4和IPv6规则。这单独就是一个巨大的时间节省器，很多我们之前需要手动配置的内容在默认情况下已经包含了。尽管我们的两个Ubuntu版本使用了不同的后端，但ufw的配置对它们两者来说是相同的。
- en: 'Tip:'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提示：
- en: ''
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ufw is also available for Debian and other Debian-based distros, but it might
    not be installed. If that's the case, install it by issuing the `sudo apt install
    ufw` command.
  id: totrans-15
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ufw也适用于Debian和其他基于Debian的发行版，但可能未安装。如果是这种情况，请通过发出`sudo apt install ufw`命令来安装它。
- en: Configuring ufw
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置ufw
- en: 'On both Ubuntu 20.04 and Ubuntu 22.04, the ufw service is already enabled by
    default, but the firewall itself isn''t activated. In other words, the system''s
    service is running, but it isn''t enforcing any firewall rules yet. (I''ll show
    you how to activate it in just a bit, after we go over how to open the ports that
    you need to open.) Check the ufw status with these two commands:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu 20.04和Ubuntu 22.04上，ufw服务已默认启用，但防火墙本身尚未激活。换句话说，系统的服务正在运行，但尚未执行任何防火墙规则。（稍后我们将向您展示如何在我们讨论完需要打开的端口后激活它。）使用以下两个命令检查ufw状态：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The systemctl command should show you that the service is enabled, and the ufw
    command should show you that the firewall is inactive.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: systemctl命令应该显示服务已启用，而ufw命令应该显示防火墙未激活。
- en: 'The first thing we want to do is open port `22` to allow it to connect to the
    machine via Secure Shell, like so:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的事情是打开端口`22`，以允许通过安全外壳连接到机器，如下所示：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Okay, that looks good. Let’s now activate the firewall, like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，看起来不错。现在让我们像这样激活防火墙：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'By using `sudo iptables -L` on Ubuntu 20.04, you''ll see that the new Secure
    Shell rule shows up in the `ufw-user-input` chain:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 Ubuntu 20.04 上使用 `sudo iptables -L`，你将看到新的 Secure Shell 规则出现在 `ufw-user-input`
    链中：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On Ubuntu 22.04, use the `sudo nft list ruleset` command to see the new rule
    in the `ufw-user-input` chain:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 22.04 上，使用 `sudo nft list ruleset` 命令查看 `ufw-user-input` 链中的新规则：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You'll also see that the total output of both of these commands is quite lengthy
    because so much of what we had to do with bare iptables or nftables has already
    been done for us with ufw. In fact, there's even more here than what we did with
    iptables and nftables. For example, with ufw, we already have rate limiting rules
    that help protect us against **Denial-of-Service** (**DoS**) attacks, and we also
    have rules that record log messages about packets that have been blocked. It's
    almost the no fuss, no muss way of setting up a firewall. (I'll get to that *almost*
    part in a bit.)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会看到，这两个命令的输出非常冗长，因为我们用裸 iptables 或 nftables 必须做的许多工作，ufw 已经为我们完成了。事实上，这里甚至有比我们用
    iptables 和 nftables 做的更多的内容。例如，使用 ufw 时，我们已经有了速率限制规则，帮助我们防范 **拒绝服务** (**DoS**)
    攻击，我们还有记录被阻止的包的日志规则。这几乎是设置防火墙的“轻松不麻烦”的方式。（稍后我会讲讲那个 *几乎* 的部分。）
- en: 'In the preceding `sudo ufw allow 22/tcp` command, we had to specify the TCP
    protocol because TCP is all we need for Secure Shell. We can also open a port
    for both TCP and UDP just by not specifying a protocol. For example, if you''re
    setting up a DNS server, you''ll want to have port `53` open for both protocols.
    (You''ll see the entries for port `53` listed as domain ports). On either version
    of Ubuntu, do:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 `sudo ufw allow 22/tcp` 命令中，我们必须指定 TCP 协议，因为 Secure Shell 只需要 TCP 协议。如果你没有指定协议，也可以同时为
    TCP 和 UDP 打开一个端口。例如，如果你正在设置 DNS 服务器，你需要为两个协议都打开端口 `53`。（你会看到端口 `53` 的条目列为域名端口）。在任一版本的
    Ubuntu 上，执行：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On Ubuntu 20.04, view the results by doing:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 20.04 中，通过以下命令查看结果：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'On Ubuntu 22.04, view the results by doing:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 22.04 中，通过以下命令查看结果：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you do `sudo ip6tables -L` on the 20.04 machine,you'll see that a rule for
    IPv6 was also added for both of the two preceding examples. And, again, you'll
    see that most of what we had to do with the ip6tables commands has already been
    taken care of. (It's especially nice that we don't have to mess around with setting
    up all of those pesky ICMP rules.) On the 22.04 machine, the `sudo nft list ruleset`
    command that you did previously will show the IPv6 configuration in the `ufw6-user-input`
    stanza.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 20.04 机器上执行 `sudo ip6tables -L`，你会看到针对 IPv6 的规则也已经添加，适用于之前的两个示例。同样，你会看到我们使用
    ip6tables 命令时需要做的大部分工作，ufw 已经帮我们处理好了。（尤其好的是，我们不需要处理那些麻烦的 ICMP 规则。）在 22.04 机器上，你之前执行的
    `sudo nft list ruleset` 命令会在 `ufw6-user-input` 段落中显示 IPv6 配置。
- en: 'To see just a quick summary of your firewall configuration, use the `status`
    option. The output should look something like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速查看防火墙配置的摘要，请使用 `status` 选项。输出应该类似如下：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next, we will look at the ufw configuration files.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看 ufw 配置文件。
- en: Working with the ufw configuration files
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 ufw 配置文件
- en: 'You can find the ufw firewall rules in the `/etc/ufw/` directory. As you can
    see, the rules are stored in several different files:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `/etc/ufw/` 目录中找到 ufw 防火墙规则。正如你所看到的，规则存储在多个不同的文件中：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At the bottom of the list, you'll see the `user6.rules` and `user.rules` files.
    You can't hand-edit either of these two files. You'll be able to save the files
    after you've made the edits, but when you use `sudo ufw reload` to load the new
    changes, you'll see that your edits have been deleted. Let's look into the `user.rules`
    file to see what we can see there.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表的底部，你会看到 `user6.rules` 和 `user.rules` 文件。你不能手动编辑这两个文件。虽然你可以在编辑后保存文件，但当你使用
    `sudo ufw reload` 加载新更改时，你会发现你的编辑已被删除。让我们查看 `user.rules` 文件，看看里面有什么内容。
- en: 'Tip:'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提示：
- en: ''
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As you’ll soon see, all of the files for both Ubuntu 20.04 and 22.04 contain
    firewall rules that are in the iptables format, even though 22.04 uses nftables
    as its backend. That’s because Ubuntu 22.04 can automatically translate iptables
    rules into nftables rules. So, the files for both 20.04 and 22.04 are identical,
    which makes things very easy for us.
  id: totrans-45
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如你所见，Ubuntu 20.04 和 22.04 的所有文件都包含 iptables 格式的防火墙规则，即使 22.04 使用 nftables 作为后端。这是因为
    Ubuntu 22.04 可以自动将 iptables 规则转换为 nftables 规则。因此，20.04 和 22.04 的文件是相同的，这让我们操作起来非常方便。
- en: 'At the top of the file, you''ll see the definition for the iptables filter
    table, as well as the list of its associated chains:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件的顶部，你会看到定义了iptables过滤表以及它的关联链表：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, in the `### RULES ###` section, we have the list of rules that we created
    with the `ufw` command. Here''s what our rules for opening the DNS ports look
    like:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，在`### RULES ###`部分，我们列出了使用`ufw`命令创建的规则。以下是我们打开DNS端口的规则示例：'
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, ufw use iptables syntax for its configuration files, even on
    Ubuntu 22.04.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，ufw在其配置文件中使用iptables语法，即使是在Ubuntu 22.04上也是如此。
- en: 'Below the `### RULES ###` section, we see the rules for logging messages about
    any packets that the firewall has blocked:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '在`### RULES ###`部分下方，我们可以看到有关防火墙阻止的任何数据包的日志消息规则：'
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These messages get sent to the `/var/log/kern.log` file. So that we don't overwhelm
    the logging system when lots of packets are getting blocked, we'll only send three
    messages per minute to the log file, with a burst rate of 10 messages per minute.
    Most of these rules will insert a `[UFW BLOCK]` tag in with the log message, which
    makes it easy for us to find them. The last rule creates messages with a `[UFW
    ALLOW]` tag, and curiously enough, the `INVALID` rule doesn't insert any kind
    of tag.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些消息会发送到`/var/log/kern.log`文件。为了避免在大量数据包被阻止时压垮日志系统，我们将每分钟最多发送三条消息到日志文件，并设置每分钟10条消息的突发限制。大多数规则会在日志消息中插入`[UFW
    BLOCK]`标签，方便我们查找它们。最后一条规则会创建带有`[UFW ALLOW]`标签的消息，奇怪的是，`INVALID`规则并不会插入任何标签。
- en: 'Lastly, we have the rate-limiting rules, which allow only three connections
    per user, per minute:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有了速率限制规则，每个用户每分钟只允许三次连接：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Any packets that exceed that limit will be recorded in the `/var/log/kern.log`
    file with the `[UFW LIMIT BLOCK]` tag.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 超过该限制的任何数据包将会以`[UFW LIMIT BLOCK]`标签记录在`/var/log/kern.log`文件中。
- en: The `/etc/ufw user6.rules` file looks pretty much the same, except that it's
    for IPv6 rules. Any time you create or delete a rule with the `ufw` command, it
    will modify both the `user.rules` file and the `user6.rules` file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/ufw user6.rules`文件看起来几乎一样，只不过它是用于IPv6规则的。每次你使用`ufw`命令创建或删除规则时，它都会同时修改`user.rules`文件和`user6.rules`文件。'
- en: To store rules that will run before the rules in the `user.rules` and `user6.rules`
    files, we have the `before.rules` file and the `before6.rules` file. To store
    rules that will run after the rules in the `user.rules` and `user6.rules` files,
    we have – you guessed it – the `after.rules` file and the `after6.rules` file.
    If you need to add custom rules that you can't add with the `ufw` command, just
    hand-edit one of these pairs of files. (We'll get to that in a moment.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储在`user.rules`和`user6.rules`文件之前运行的规则，我们有`before.rules`文件和`before6.rules`文件。为了存储在`user.rules`和`user6.rules`文件之后运行的规则，我们有——你猜对了——`after.rules`文件和`after6.rules`文件。如果你需要添加不能通过`ufw`命令添加的自定义规则，只需手动编辑这对文件之一。（稍后我们会详细讨论这个问题。）
- en: If you look at the `before` and `after` files, you'll see where so much has
    already been taken care of for us. This is all the stuff that we had to do by
    hand with either iptables/ip6tables or nftables.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看`before`和`after`文件，你会看到很多已经为我们处理好的内容。这些都是我们曾经需要使用iptables/ip6tables或nftables手动完成的工作。
- en: However, as you might know, there is one slight caveat to all this ufw goodness.
    You can perform simple tasks with the ufw utility, but anything more complex requires
    you to hand-edit a file. (This is what I meant when I said that ufw is *almost*
    no fuss, no muss.)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如你可能知道的，这些ufw的优势中有一个小小的注意事项。你可以使用ufw工具执行简单的任务，但任何更复杂的操作都需要手动编辑文件。（这就是我说ufw是*几乎*不麻烦、不复杂的原因。）
- en: 'Tip:'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提示：
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To see more examples of what you can do with the ufw command, view its man
    page by doing:'
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要查看更多使用`ufw`命令的示例，可以通过执行以下命令查看其手册页：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For example, in the `before` files, you''ll see that one of the rules for blocking
    invalid packets has already been implemented. Here''s the code snippet from the
    `before.rules` file, which you''ll find near the top of the file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在`before`文件中，你会看到其中一个阻止无效数据包的规则已经被实现。以下是`before.rules`文件中的代码片段，通常可以在文件的顶部找到：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The second of these two rules actually drops the invalid packets, and the first
    rule logs them. But as we''ve already seen in the *An overview of iptables* section
    of *Chapter 4*, *Securing your server with a firewall-Part 1*, this one particular
    `DROP` rule doesn''t block all of the invalid packets. And, for performance reasons,
    we''d rather have this rule in the mangle table, instead of in the filter table
    where it is now. To fix that, we''ll edit both of the `before` files. Open the
    `/etc/ufw/before.rules` file in your favorite text editor and look for the following
    pair of lines at the very bottom of the file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这两条规则中的第二条实际上丢弃了无效的数据包，而第一条则记录了它们。但正如我们在 *第四章* 中的 *iptables 概述* 部分所见，*通过防火墙保护服务器第一部分*，这一特定的
    `DROP` 规则并不会阻止所有无效的数据包。而且，为了提高性能，我们宁愿将这个规则放在 mangle 表中，而不是现在所在的 filter 表中。为了解决这个问题，我们将编辑两个
    `before` 文件。在你喜欢的文本编辑器中打开 `/etc/ufw/before.rules` 文件，寻找文件底部的以下一对行：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Just below the `COMMIT` line, add the following code snippet to create the
    mangle table rules:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `COMMIT` 行下方，添加以下代码片段以创建 mangle 表规则：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we''ll repeat this process for the `/etc/ufw/before6.rules` file. Then,
    we''ll reload the rules by doing:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将对 `/etc/ufw/before6.rules` 文件重复此过程。然后，通过以下命令重新加载规则：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: By using the `iptables -L` and `ip6tables -L` commands on Ubuntu 20.04 or the
    `nft list ruleset` command on Ubuntu 22.04, you'll see the new rules show up in
    the mangle table, just where we want them to be.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 Ubuntu 20.04 上使用 `iptables -L` 和 `ip6tables -L` 命令，或在 Ubuntu 22.04 上使用 `nft
    list ruleset` 命令，你将看到新规则出现在 mangle 表中，正是我们希望它们出现的位置。
- en: Hands-on lab for basic ufw usage
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基本 ufw 使用的实操实验
- en: 'You''ll need to complete this lab on a clean snapshot of either an Ubuntu 20.04
    or an Ubuntu 22.04 virtual machine. Let''s get started:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在 Ubuntu 20.04 或 Ubuntu 22.04 的干净快照虚拟机上完成此实验。让我们开始吧：
- en: Shut down your Ubuntu virtual machine and restore the snapshot to get rid of
    all of the iptables or nftables stuff that you just did. (Or, if you prefer, just
    start with a fresh virtual machine.)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭你的 Ubuntu 虚拟机，并恢复快照以删除你刚才所做的所有 iptables 或 nftables 设置。（或者，如果你更喜欢，可以从一台全新的虚拟机开始。）
- en: 'When you''ve restarted the virtual machine, verify that the iptables rules
    are now gone. On Ubuntu 20.04 do:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启虚拟机后，验证 `iptables` 规则是否已经消失。在 Ubuntu 20.04 上执行：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'View the status of `ufw`. Open port `22/TCP` and then enable `ufw`. Then, view
    the results:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看 `ufw` 的状态。打开端口 `22/TCP`，然后启用 `ufw`。接着，查看结果：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This time, open port `53` for both TCP and UDP:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次，打开端口 `53`，同时为 TCP 和 UDP 都开放：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`cd` into the `/etc/ufw/` directory. Familiarize yourself with the contents
    of the files that are there.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cd` 进入 `/etc/ufw/` 目录。熟悉该目录下文件的内容。'
- en: 'Open the `/etc/ufw/before.rules` file in your favorite text editor. At the
    bottom of the file, below the `COMMIT` line, add the following code snippet:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你喜欢的文本编辑器中打开 `/etc/ufw/before.rules` 文件。在文件底部，`COMMIT` 行下面，添加以下代码片段：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Repeat s*tep 6* for the `/etc/ufw/before6.rules` file.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 `/etc/ufw/before6.rules` 文件重复执行步骤 *6*。
- en: 'Reload the firewall with this command:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令重新加载防火墙：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'On Ubuntu 20.04, observe the rules by doing:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Ubuntu 20.04 上，执行以下命令查看规则：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Take a quick look at the `ufw` status:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 快速查看 `ufw` 的状态：
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: That's the end of the lab – congratulations!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 实验结束了——恭喜你！
- en: I think you’ll agree that `ufw` is pretty cool technology. Its commands for
    doing basic things are easier to remember than the equivalent iptables or nftables
    commands, and it takes care of both IPv4 and IPv6 with just a single command.
    On either of our Ubuntu versions, you can still do some fancy stuff just by hand-editing
    the ufw configuration files. But, ufw isn’t the only cool firewall manager that’s
    available. In the next section, we’ll take a look at what the Red Hat folk have
    given us.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我想你会同意，`ufw` 是非常酷的技术。它用来执行基本任务的命令比等效的 iptables 或 nftables 命令更容易记住，而且只需一个命令就能同时处理
    IPv4 和 IPv6。在我们的任一版本的 Ubuntu 上，你仍然可以通过手动编辑 ufw 配置文件来做一些复杂的事情。但，ufw 并不是唯一一个非常酷的防火墙管理工具。接下来的部分，我们将看看
    Red Hat 的开发者给我们提供了什么。
- en: firewalld for Red Hat systems
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Red Hat 系统的 firewalld
- en: For our next act, we turn our attention to **firewalld**, which is the default
    firewall manager on Red Hat Enterprise Linux 7 through 9 and all of their offspring.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将注意力转向 **firewalld**，它是 Red Hat Enterprise Linux 7 至 9 以及所有衍生版本的默认防火墙管理工具。
- en: As we just saw with ufw on Ubuntu, firewalld can be a frontend for either iptables
    or nftables. On RHEL/CentOS 7, firewalld uses the iptables engine as its backend.
    On the RHEL 8 and 9-type distros, firewalld uses nftables as its backend. Either
    way, you can't create rules with normal iptables or nftables commands while firewalld
    is enabled because firewalld stores the rules in an incompatible format.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在 Ubuntu 上看到的 ufw 一样，firewalld 可以是 iptables 或 nftables 的前端。在 RHEL/CentOS
    7 上，firewalld 使用 iptables 引擎作为后端。在 RHEL 8 和 9 类型的发行版中，firewalld 使用 nftables 作为后端。不管怎样，当
    firewalld 启用时，你不能使用普通的 iptables 或 nftables 命令来创建规则，因为 firewalld 将规则存储在不兼容的格式中。
- en: 'Tip:'
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提示：
- en: ''
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Until very recently, firewalld was only available for the newer RHEL versions
    and their offspring. Now, however, firewalld is also available in the Ubuntu repositories.
    So, if you want to run firewalld on Ubuntu, you finally have that choice. Also,
    the combination of firewalld and nftables now comes already installed and activated
    on the SUSE distros.
  id: totrans-100
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 直到最近，firewalld 仅在较新的 RHEL 版本及其衍生版本中可用。然而，现在 firewalld 也可以在 Ubuntu 的软件库中找到。所以，如果你想在
    Ubuntu 上运行 firewalld，现在终于可以选择了。此外，firewalld 和 nftables 的组合现在已经在 SUSE 系统中预安装并启用。
- en: If you're running Red Hat, CentOS, or AlmaLinux on a desktop machine, you'll
    see that there is a GUI frontend for firewalld in the applications menu. On a
    text-mode server, though, all you have is the firewalld commands. For some reason,
    the Red Hat folk haven't created an ncurses-type program for text-mode servers
    as they did for iptables configuration on older versions of Red Hat.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在桌面机器上运行 Red Hat、CentOS 或 AlmaLinux，你会发现应用程序菜单中有一个 firewalld 的 GUI 前端。但是在文本模式服务器上，你只有
    firewalld 命令。出于某种原因，Red Hat 并没有为文本模式服务器创建一个类似 ncurses 的程序，就像他们为旧版本的 Red Hat 中的
    iptables 配置做的那样。
- en: A big advantage of firewalld is the fact that it's dynamically managed. That
    means that you can change the firewall configuration without restarting the firewall
    service, and without interrupting any existing connections to your server.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: firewalld 的一个大优势是它是动态管理的。这意味着你可以在不重启防火墙服务的情况下更改防火墙配置，并且不会中断与服务器的现有连接。
- en: Before we look at the differences between the RHEL 7/CentOS 7 and the RHEL/AlmaLinux
    8 and 9 versions of firewalld, let's look at the stuff that's the same for both.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看 RHEL 7/CentOS 7 与 RHEL/AlmaLinux 8 和 9 版本的 firewalld 差异之前，让我们先看一下两者相同的部分。
- en: Verifying the status of firewalld
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证 firewalld 状态
- en: 'For this section, you can use a CentOS 7, AlmaLinux 8, or AlmaLinux 9 virtual
    machine. Let''s start by verifying the status of firewalld. There are two ways
    to do this. The first way is to use the `--state` option of `firewall-cmd`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节内容，你可以使用 CentOS 7、AlmaLinux 8 或 AlmaLinux 9 虚拟机。我们先从验证 firewalld 的状态开始。这样有两种方法。第一种方法是使用
    `firewall-cmd` 的 `--state` 选项：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Alternatively, if we want a more detailed status, we can just check the daemon,
    the same as we would for any other daemon on a systemd machine:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果我们需要更详细的状态信息，我们可以检查守护进程，就像我们在 systemd 系统上检查其他守护进程一样：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Next, let's have a look at firewalld zones.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 firewalld 区域。
- en: Working with firewalld zones
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 firewalld 区域
- en: '`firewalld` is a rather unique animal, in that it comes with several pre-configured
    zones and services. If you look in the `/usr/lib/firewalld/zones/` directory of
    any of your CentOS or AlmaLinux machines, you''ll see the zones files, all in
    `.xml` format:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`firewalld` 是一种非常独特的工具，它带有几个预配置的区域和服务。如果你查看任何 CentOS 或 AlmaLinux 机器的 `/usr/lib/firewalld/zones/`
    目录，你会看到所有的区域文件，它们都是 `.xml` 格式：'
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Each zone file specifies which ports are to be open and which ones are to be
    blocked for various given scenarios. Zones can also contain rules for ICMP messages,
    forwarded ports, masquerading information, and rich language rules. For example,
    the `.xml` file for the public zone, which is set as the default, looks like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 每个区域文件指定了在不同情况下需要开放的端口和需要阻止的端口。区域还可以包含 ICMP 消息、转发端口、伪装信息和丰富语言规则。例如，设置为默认的公共区域的
    `.xml` 文件看起来是这样的：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `service name` lines, you can see that the only open ports are for Secure
    Shell access and for DHCPv6 discovery. If you look at the `home.xml` file, you''ll
    see that it also opens the ports for Multicast DNS, as well as the ports that
    allow this machine to access shared directories from either Samba servers or Windows
    servers:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `service name` 行中，你可以看到唯一开放的端口是用于安全外壳访问和 DHCPv6 发现的端口。如果你查看 `home.xml` 文件，你会发现它还开放了用于多播
    DNS 的端口，以及允许此机器从 Samba 服务器或 Windows 服务器访问共享目录的端口：
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `firewall-cmd` utility is what you would use to configure `firewalld.`
    You can use it to view the list of zone files on your system, without having to
    `cd` into the zone file directory:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`firewall-cmd`工具是用来配置`firewalld`的。你可以使用它查看系统中区域文件的列表，而无需`cd`进入区域文件目录：'
- en: '[PRE31]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'A quick way to see how each zone is configured is to use the `--list-all-zones`
    option:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查看每个区域配置的方法是使用`--list-all-zones`选项：
- en: '[PRE32]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Of course, this is only a portion of the output because the listing for all
    zones is more than we can display here. It''s more likely that you''ll only want
    to see information about one particular zone:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这只是输出的一部分，因为所有区域的列表比我们在这里显示的要多。你更有可能只想查看一个特定区域的信息：
- en: '[PRE33]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: So, the `internal` zone allows the `ssh`, `mdns`, `samba-client`, and `dhcpv6-client`
    services. This is handy for setting up client machines on your internal LAN.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`internal`区域允许`ssh`、`mdns`、`samba-client`和`dhcpv6-client`服务。这对于在内部局域网上设置客户端机器非常方便。
- en: 'Any given server or client will have one or more installed network interface
    adapters. Each adapter in a machine can be assigned one, and only one, firewalld
    zone. To see the default zone, do this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 每个给定的服务器或客户端都将拥有一个或多个已安装的网络接口适配器。每个适配器在一台机器中只能分配一个、且仅能分配一个firewalld区域。要查看默认区域，可以执行以下操作：
- en: '[PRE34]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This is great, except that it doesn''t tell you anything about which network
    interface is associated with this zone. To see that information, do this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，除了它没有告诉你与此区域关联的网络接口是什么。要查看该信息，请执行以下操作：
- en: '[PRE35]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'When you install Red Hat, CentOS, or AlmaLinux for the first time, the firewall
    will already be active with the public zone as the default. Now, let''s say that
    you''re setting up your server in the DMZ and you want to make sure that its firewall
    is locked down for that. You can change the default zone to the `dmz` zone. Let''s
    take a look at the `dmz.xml` file to see what that does for us:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次安装Red Hat、CentOS或AlmaLinux时，防火墙会默认启用，并且公共区域是默认区域。现在，假设你在DMZ中设置服务器，并希望确保它的防火墙为此进行锁定。你可以将默认区域更改为`dmz`区域。我们来看一下`dmz.xml`文件，看看这对我们有什么帮助：
- en: '[PRE36]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'So, the only thing that the DMZ allows through is Secure Shell. Okay; that''s
    good enough for now, so let''s set the `dmz` zone as the default:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，DMZ区域允许通过的唯一内容是安全外壳（SSH）。好吧；现在这样就足够了，让我们将`dmz`区域设置为默认区域：
- en: '[PRE37]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let''s verify it:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证一下：
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: And we're all good. However, an Internet-facing server in the DMZ probably needs
    to allow more than just SSH connections. This is where we'll use the firewalld
    services. But before we look at that, let's consider one more important point.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都好了。然而，位于DMZ中的面向互联网的服务器可能需要允许的不仅仅是SSH连接。这时我们将使用firewalld服务。但在查看这些之前，我们先考虑一个更重要的点。
- en: 'Tip:'
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 小贴士：
- en: ''
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You don’t need to use the `--permanent` option when setting the default zone.
    In fact, you’ll get an error message if you do.
  id: totrans-137
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 设置默认区域时，你不需要使用`--permanent`选项。事实上，如果你使用了该选项，会出现错误信息。
- en: 'You never want to modify the files in the `/usr/lib/firewalld/` directory.
    Whenever you modify the firewalld configuration, you''ll see the modified files
    show up in the `/etc/firewalld/` directory. So far, all we''ve modified is the
    default zone. So, we''ll see the following files in `/etc/firewalld/`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你永远不应修改`/usr/lib/firewalld/`目录下的文件。每当你修改firewalld配置时，修改后的文件会出现在`/etc/firewalld/`目录下。到目前为止，我们只修改了默认区域。因此，我们将在`/etc/firewalld/`目录下看到以下文件：
- en: '[PRE39]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We can do a `diff` on those two files to see the difference between them:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对这两个文件做一个`diff`，查看它们之间的差异：
- en: '[PRE40]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: So, the newer of the two files shows that the dmz zone is now the default.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，较新的这两个文件显示`dmz`区域现在是默认区域。
- en: 'Tip:'
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 小贴士：
- en: ''
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To find out more about firewalld zones, enter the `man firewalld.zones` command.
  id: totrans-145
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要了解更多关于firewalld区域的信息，可以输入`man firewalld.zones`命令。
- en: Adding services to a firewalld zone
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将服务添加到firewalld区域
- en: Each service file contains a list of ports that need to be opened for a particular
    service. Optionally, the service files may contain one or more destination addresses,
    or call in any needed modules, such as for connection tracking. For some services,
    all you need to do is open just one port. Other services, such as the Samba service,
    require that multiple ports be opened. Either way, it's sometimes handier to remember
    the service name that goes with each service, rather than the port numbers.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务文件都包含需要为特定服务打开的端口列表。可选地，服务文件可能包含一个或多个目标地址，或者调用所需的任何模块，例如连接跟踪。对于某些服务，你只需打开一个端口。其他服务，如Samba服务，则要求打开多个端口。无论哪种情况，记住与每个服务对应的服务名称，有时比记住端口号更方便。
- en: 'The services files are in the `/usr/lib/firewalld/services/` directory. You
    can look at them by using the `firewall-cmd` command, just as you could with the
    list of zones:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 服务文件位于`/usr/lib/firewalld/services/`目录中。你可以使用`firewall-cmd`命令查看它们，就像查看区域列表一样：
- en: '[PRE41]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Before we add any more services, let''s check which ones are already enabled:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加更多服务之前，让我们检查一下哪些服务已经启用了：
- en: '[PRE42]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Here, ssh and dhcpv6-client are all we have.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，ssh和dhcpv6-client就是我们拥有的所有服务。
- en: 'The `dropbox-lansync` service would be very handy for us Dropbox users. Let''s
    see which ports this opens:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`dropbox-lansync`服务对我们这些Dropbox用户来说非常方便。让我们看看它打开了哪些端口：'
- en: '[PRE43]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: It looks like Dropbox uses port `17500` on UDP and TCP.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来Dropbox使用UDP和TCP的端口`17500`。
- en: 'Now, let''s say that we have our web server set up in the DMZ, with the `dmz`
    zone set as its default:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们将Web服务器设置在DMZ中，并将`dmz`区域设为其默认区域：
- en: '[PRE44]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'As we saw previously, the Secure Shell port is the only one that''s open. Let''s
    fix that so that users can actually access our website:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，只有Secure Shell端口是开放的。让我们修复它，这样用户就能实际访问我们的网站了：
- en: '[PRE45]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'When we look at the information for the `dmz` zone once more, we''ll see the
    following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次查看`dmz`区域的信息时，我们会看到以下内容：
- en: '[PRE46]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Here, we can see that the `http` service is now allowed through. But look what
    happens when we add the `--permanent` option to this `info` command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`http`服务现在已经允许通过了。但是，当我们在这个`info`命令中添加`--permanent`选项时，看看会发生什么：
- en: '[PRE47]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Oops! The `http` service isn't here. What's going on?
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！`http`服务不见了。发生了什么事？
- en: For pretty much every command-line alteration of either zones or services, you
    need to add the `--permanent` option to make the change persistent across reboots.
    But without the `--permanent` option, the change takes effect immediately. With
    the `--permanent` option, you'll have to reload the firewall configuration for
    the change to take effect. To demonstrate this, I'm going to reboot the virtual
    machine to get rid of the `http` service.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个命令行更改区域或服务时，你都需要添加`--permanent`选项以使更改在重启后保持生效。但是如果没有`--permanent`选项，更改会立即生效。加上`--permanent`选项后，你需要重新加载防火墙配置，才能使更改生效。为了演示这一点，我将重启虚拟机以去掉`http`服务。
- en: 'Okay, I''ve rebooted, and the `http` service is now gone:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我已经重启了，`http`服务现在已经不见了：
- en: '[PRE48]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This time, I''ll add two services with just one command and specify that the
    change will be permanent:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我将通过一个命令添加两个服务，并指定更改将是永久的：
- en: '[PRE49]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You can add as many services as you need to with a single command, but you
    have to separate them with commas and enclose the whole list within a pair of
    curly brackets. Also, unlike what we just saw with nftables, we can''t have blank
    spaces within the curly brackets. Let''s look at the results:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过一个命令添加多个服务，但必须用逗号分隔它们，并将整个列表包含在一对花括号内。而且，与我们刚才看到的nftables不同，花括号内不能有空格。让我们看看结果：
- en: '[PRE50]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Since we decided to make this configuration permanent, it hasn''t taken effect
    yet. However, if we add the `--permanent` option to the `--info-zone` command,
    we''ll see that the configuration files have indeed been changed:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们决定将此配置设置为永久生效，但它尚未生效。然而，如果我们在`--info-zone`命令中添加`--permanent`选项，就会看到配置文件确实已经发生了变化：
- en: '[PRE51]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now, we need to reload the configuration so that it will take effect:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要重新加载配置，以使其生效：
- en: '[PRE52]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Now, if you run the `sudo firewall-cmd --info-zone=dmz` command again, you'll
    see that the new configuration is in effect.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你再次运行`sudo firewall-cmd --info-zone=dmz`命令，你会看到新的配置已经生效。
- en: To remove a service from a zone, just replace `--add-service` with `--remove-service`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要从某个区域中移除一个服务，只需将`--add-service`替换为`--remove-service`。
- en: 'Tip:'
  id: totrans-178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提示：
- en: ''
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that we never specified which zone we're working with in any of these service
    commands. That's because if we don't specify a zone, firewalld just assumes that
    we're working with the default zone. If you want to add a service to something
    other than the default zone, just add the `--zone=` option to your commands.
  id: totrans-180
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意，我们在这些服务命令中从未指定我们正在使用哪个区域。这是因为，如果我们不指定区域，firewalld会默认认为我们是在使用默认区域。如果你想将服务添加到默认区域以外的区域，只需在命令中添加`--zone=`选项。
- en: Adding ports to a firewalld zone
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向firewalld区域添加端口
- en: 'Having the service files is handy, except that not every service that you''ll
    need to run has its own predefined service file. Let''s say that you''ve installed
    Webmin on your server, which requires port `10000/tcp` to be open. A quick grep
    operation will show that port `10000` isn''t in any of our predefined services:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有服务文件非常方便，除了并非每个你需要运行的服务都有自己预定义的服务文件。假设你在服务器上安装了 Webmin，它需要端口 `10000/tcp` 开放。快速使用
    grep 操作会显示端口 `10000` 并不在我们的预定义服务列表中：
- en: '[PRE53]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'So, let''s just add that port to our default zone, which is still the `dmz`
    zone:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们将该端口添加到我们的默认区域，仍然是 `dmz` 区域：
- en: '[PRE54]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Again, this isn''t permanent, because we didn''t include the `--permanent`
    option. Let''s do this again and reload:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，这不是永久性的，因为我们没有包含 `--permanent` 选项。我们重新执行并重新加载：
- en: '[PRE55]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You can also add multiple ports at once by enclosing the comma-separated list
    within a pair of curly brackets, just as we did with the services. (I purposely
    left out the `--permanent` option. You''ll see why in a moment):'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过将逗号分隔的端口列表放入一对大括号中来一次性添加多个端口，就像我们处理服务一样。（我故意没有包含 `--permanent` 选项，稍后你会明白为什么）：
- en: '[PRE56]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: And of course, you can remove ports from a zone by substituting `--remove-port`
    for `--add-port`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以通过用 `--remove-port` 替代 `--add-port` 来从区域中删除端口。
- en: 'If you don''t want to type `--permanent` every time you create a new permanent
    rule, just leave it out. Then, when you''re done creating rules, make them all
    permanent at once by typing:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想每次创建永久规则时都输入 `--permanent`，可以省略这个参数。然后，当你完成创建规则后，使用以下命令一次性将所有规则设置为永久：
- en: '[PRE57]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Now's, let's turn our attention to controlling ICMP.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们把注意力转向控制 ICMP。
- en: Blocking ICMP
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阻止 ICMP
- en: 'Let''s take another look at the status of the default public zone:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看默认公共区域的状态：
- en: '[PRE58]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Toward the bottom, we can see the `icmp-block` line, with nothing beside it.
    This means that our public zone allows all ICMP packets to come through. This
    isn''t ideal, of course, because there are certain types of ICMP packets that
    we want to block. Before we block anything, let''s look at all of the ICMP types
    that are available to us:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面底部，我们可以看到 `icmp-block` 行，旁边没有任何内容。这意味着我们的公共区域允许所有 ICMP 数据包通过。当然，这并不理想，因为我们有些
    ICMP 类型的数据包是希望阻止的。在阻止任何东西之前，让我们先看看所有可用的 ICMP 类型：
- en: '[PRE59]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'As we did with zones and services, we can view information about the different
    ICMP types. In this example, we''ll look at one ICMPv4 type and one ICMPv6 type:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 和处理区域及服务一样，我们可以查看不同 ICMP 类型的信息。在这个例子中，我们查看一种 ICMPv4 类型和一种 ICMPv6 类型：
- en: '[PRE60]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We''ve already seen that we''re not blocking any ICMP packets. We can also
    see if we''re blocking any specific ICMP packets:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到没有阻止任何 ICMP 数据包。我们还可以查看是否有阻止特定的 ICMP 数据包：
- en: '[PRE61]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We''ve already established that redirects can be a bad thing since they can
    be exploited. So, let''s block host-redirect packets:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确定，重定向可能是一个坏东西，因为它们可能被恶意利用。所以，让我们阻止主机重定向数据包：
- en: '[PRE62]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now, let''s check the status:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们检查状态：
- en: '[PRE63]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Cool – it worked. Now, let''s see if we can block two ICMP types with just
    one command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒—它成功了。现在，我们看看是否能通过一个命令同时阻止两种 ICMP 类型：
- en: '[PRE64]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'As before, we''ll check the status:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如之前所述，我们将检查状态：
- en: '[PRE65]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'This also worked, which means that we have achieved coolness. However, since
    we didn''t include `--permanent` with these commands, these ICMP types will only
    be blocked until we reboot the computer. So, let''s make them permanent:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这也成功了，意味着我们已经实现了“酷”操作。然而，由于我们没有在这些命令中加入 `--permanent`，这些 ICMP 类型的阻止仅在重启前有效。因此，我们将它们设置为永久：
- en: '[PRE66]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: And with this, we've achieved even more coolness. (Of course, all of my cats
    already think that I'm pretty cool.)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就实现了更多的“酷”。（当然，我所有的猫已经觉得我很酷了。）
- en: Using panic mode
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用恐慌模式
- en: You've just seen evidence that bad people are trying to break into your system.
    What do you do? Well, one option is to activate `panic` mode, which cuts off all
    network communications.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚看到了坏人试图破坏你的系统的证据。你该怎么办？其中一个选择是激活 `panic` 模式，这会切断所有网络通信。
- en: I can just see this now in the Saturday morning cartoons when some cartoon character
    yells, *Panic mode, activate!*
  id: totrans-216
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我现在可以想象在周六早上的卡通片里，某个卡通人物大喊：“*恐慌模式，启动！*”
- en: 'To activate `panic` mode, use this command:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活 `panic` 模式，使用以下命令：
- en: '[PRE67]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Of course, your access will be cut off if you''re logged in remotely, and you''ll
    have to go to the local terminal to get back in. To turn `panic` mode off, use
    this command:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你是远程登录的，访问会被切断，你需要去本地终端重新连接。要关闭 `panic` 模式，可以使用以下命令：
- en: '[PRE68]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'If you''re logged in remotely, there''s no need to check the status of `panic`
    mode. If it''s on, you''re not accessing the machine. But if you''re sitting at
    the local console, you might want to check it. Just do:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是远程登录的，则无需检查`panic`模式的状态。如果它开启，你就无法访问这台机器。但如果你坐在本地控制台上，可能想要检查它。只需执行：
- en: '[PRE69]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: That's all there is to `panic` mode.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`panic`模式的全部内容。
- en: Logging dropped packets
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录丢弃的数据包
- en: 'Here''s another time-saver that you''re sure to like. If you want to create
    log entries whenever packets get blocked, just use the `--set-log-denied` option.
    Before we do that, let''s see if it''s already enabled:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个省时的技巧，你一定会喜欢。如果你希望每当数据包被阻止时创建日志条目，只需使用`--set-log-denied`选项。在我们这么做之前，先看看它是否已经启用：
- en: '[PRE70]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'It''s not, so let''s turn it on and check the status again:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 它不是开启状态，所以让我们开启它并再次检查状态：
- en: '[PRE71]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: We've set it up to log all denied packets. However, you might not always want
    that. Your other choices are `unicast`, `broadcast`, and `multicast`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置了记录所有被拒绝的数据包。然而，你可能并不总是希望这样。你的其他选择有`unicast`、`broadcast`和`multicast`。
- en: 'So, for example, if all you want is to log blocked packets that are going to
    multicast addresses, do this:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你只想记录被阻止并且指向多播地址的数据包，可以执行如下操作：
- en: '[PRE72]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'So far, we''ve just set the runtime configuration, which will disappear once
    we reboot the machine. To make this permanent, we can use any of the methods that
    we''ve already used. For now, let''s just do this:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是设置了运行时配置，一旦重启机器，这些配置将会消失。为了使其永久生效，我们可以使用我们已经使用过的任何方法。现在，我们只需执行这个操作：
- en: '[PRE73]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Unlike what we saw with the Debian/Ubuntu distros, there''s no separate `kern.log`
    file for our packet-denied messages. Instead, the RHEL-type distros log the packet-denied
    messages in the `/var/log/messages` file, which is the main log file in the RHEL
    world. Several different message tags are already defined, which will make it
    easier to audit the logs for dropped packets. For example, here''s a message that
    tells us about blocked broadcast packets:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在 Debian/Ubuntu 发行版中看到的不同，我们没有专门的`kern.log`文件来记录数据包被拒绝的消息。相反，RHEL 类型的发行版将数据包拒绝消息记录在`/var/log/messages`文件中，这是
    RHEL 世界中的主日志文件。已经定义了多个不同的消息标签，这将使得审计丢弃的数据包日志变得更容易。例如，以下是一个消息，告诉我们被阻止的广播数据包：
- en: '[PRE74]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The tag is `FINAL_REJECT`, which tells us that this message was created by the
    catch-all, final `REJECT` rule that's at the end of our input chain. The `DST=255.255.255.255`
    part tells us that this was a broadcast message.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标签是`FINAL_REJECT`，它告诉我们这条消息是由我们输入链末尾的通用`REJECT`规则创建的。`DST=255.255.255.255`部分告诉我们这是一个广播消息。
- en: 'Here''s another example, where I did an Nmap NULL scan against this machine:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个示例，我对这台机器进行了 Nmap NULL 扫描：
- en: '[PRE75]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: In this case, I triggered the rule that blocks `INVALID` packets, as indicated
    by the `STATE_INVALID_DROP` tag.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我触发了阻止`INVALID`数据包的规则，如`STATE_INVALID_DROP`标签所示。
- en: So, now you're saying, *But wait. These two rules that we just tested aren't
    anywhere to be found in the firewalld configuration files that we've looked at
    so far. What gives?* And you're right. The location of these default, pre-configured
    rules is something that the Red Hat folk apparently want to keep hidden from us.
    However, in the following sections that are specific to RHEL/CentOS 7 and RHEL/AlmaLinux
    8 and 9, we'll spoil their fun, because I can show you where these rules are.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，现在你可能会说，*等一下。我们刚刚测试的这两条规则在我们查看过的 firewalld 配置文件中都没有找到。这是怎么回事？* 你说得对。这些默认的、预配置的规则的位置显然是
    Red Hat 的人希望对我们隐藏的。不过，在接下来的专门针对 RHEL/CentOS 7 和 RHEL/AlmaLinux 8 以及 9 的部分中，我们将揭示他们的秘密，因为我能告诉你这些规则在哪里。
- en: Using firewalld rich language rules
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 firewalld 丰富语言规则
- en: What we've looked at so far might be all you'll ever need for general use scenarios,
    but for more granular control, you'll want to know about **rich language rules**.
    (Yes, that really is what they're called.)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所看的内容可能就是一般使用场景下所需的全部，但如果需要更细致的控制，你会想了解**丰富语言规则**。（没错，这就是它们的名称。）
- en: 'Compared to iptables rules, rich language rules are a bit less cryptic and
    are closer to plain English. So, if you''re new to the business of writing firewall
    rules, you might find rich language a bit easier to learn. On the other hand,
    if you''re already used to writing iptables rules, you might find some elements
    of the rich language a bit quirky. Let''s look at one example:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 与 iptables 规则相比，丰富语言规则稍微不那么晦涩，更接近普通英语。因此，如果你是编写防火墙规则的新手，可能会觉得丰富语言更容易学习。另一方面，如果你已经习惯了编写
    iptables 规则，可能会觉得丰富语言的某些元素有点怪异。让我们看一个例子：
- en: '[PRE76]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Here, we''re adding a rich rule that blocks website access from an entire geographic
    block of IPv4 addresses. Note that the entire rule is surrounded by a pair of
    single quotes, and the assigned value for each parameter is surrounded by a pair
    of double quotes. With this rule, we''re saying that we''re working with IPv4
    and that we want to silently block the `http` port from accepting packets from
    the `200.192.0.0/24` network. I used the `--permanent` option here, because AlmaLinux
    9 is a bit quirky if I don’t use it. Let''s see what our zone looks like with
    this new rule:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个丰富规则，阻止来自整个IPv4地址地理块的网站访问。请注意，整个规则被一对单引号包围，每个参数的赋值被一对双引号包围。通过这个规则，我们声明我们正在使用IPv4，并且我们希望静默阻止`http`端口接受来自`200.192.0.0/24`网络的数据包。我在这里使用了`--permanent`选项，因为如果不使用它，AlmaLinux
    9会有点怪异。让我们看看应用这个新规则后我们的区域是什么样的：
- en: '[PRE77]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The rich rule shows up at the bottom.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 丰富规则显示在底部。
- en: You could just as easily write a rule for IPv6 by replacing `family="ipv4"`
    with `family="ipv6"` and supplying the appropriate IPv6 address range.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将`family="ipv4"`替换为`family="ipv6"`并提供相应的IPv6地址范围，轻松编写IPv6的规则。
- en: 'Some rules are generic and apply to either IPv4 or IPv6\. Let''s say that we
    want to log messages about **Network Time Protocol** (**NTP**) packets for both
    IPv4 and IPv6 and that we want to log no more than one message per minute. The
    command to create that rule would look like this:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 有些规则是通用的，适用于IPv4或IPv6。例如，假设我们希望记录关于**网络时间协议**（**NTP**）数据包的消息，适用于IPv4和IPv6，并且我们希望每分钟不超过记录一条消息。创建该规则的命令如下：
- en: '[PRE78]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'There is, of course, a lot more to firewalld rich language rules than we can
    present here. But for now, you know the basics. For more information, consult
    the man page:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，firewalld丰富语言规则的内容远不止我们在这里呈现的内容。但现在，您已经掌握了基本知识。欲了解更多信息，请查阅man页面：
- en: '[PRE79]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: If you go to the official documentation page for Red Hat Enterprise Linux 8,
    you'll see no mention of rich rules. However, I've just tested them on an RHEL
    8-type machine and a RHEL 9-type machine, and they work fine.
  id: totrans-253
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你访问Red Hat Enterprise Linux 8的官方文档页面，你会发现没有提到丰富规则。然而，我刚刚在一台RHEL 8类型的机器和一台RHEL
    9类型的机器上测试了它们，它们工作得很好。
- en: ''
  id: totrans-254
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To read about rich rules, you'll need to go to the documentation page for Red
    Hat Enterprise Linux 7\. What's there also applies to RHEL 8/9\. But even there,
    there's not much detail. To find out more, see the man page on either RHEL/CentOS
    7 or RHEL/CentOS 8, or RHEL/AlmaLinux 9.
  id: totrans-255
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要阅读丰富规则的相关内容，您需要访问Red Hat Enterprise Linux 7的文档页面。这里的内容同样适用于RHEL 8/9。但即便如此，那里也没有太多详细内容。要了解更多信息，请查阅RHEL/CentOS
    7或RHEL/CentOS 8，或者RHEL/AlmaLinux 9的man页面。
- en: 'To make the rule permanent, just use any of the methods that we''ve already
    discussed. When you do, the rule will show up in the `.xml` file for the default
    zone. In my case, the default zone is still set to public. So, let''s look in
    the `/etc/firewalld/zones/public.xml` file:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 要使规则永久生效，只需使用我们已经讨论过的任何方法。当您这样做时，规则将出现在默认区域的`.xml`文件中。就我而言，默认区域仍然设置为公共区域。所以，让我们看看`/etc/firewalld/zones/public.xml`文件：
- en: '[PRE80]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Our rich rule shows up in the `rule family` block at the bottom of the file.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的丰富规则显示在文件底部的`rule family`块中。
- en: Now that we've covered what's common between the RHEL/CentOS 7 and the RHEL/CentOS/AlmaLinux
    8/9 versions of firewalld, let's look at what's particular to each different version.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经覆盖了RHEL/CentOS 7与RHEL/CentOS/AlmaLinux 8/9版本的firewalld之间的共同点，接下来我们来看看每个版本的特有内容。
- en: Looking at iptables rules in RHEL/CentOS 7 firewalld
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看RHEL/CentOS 7 firewalld中的iptables规则
- en: 'RHEL 7 and its offspring use the iptables engine as the firewalld backend.
    You can''t create rules with the normal iptables commands as long as firewalld
    is enabled. However, every time you create a rule with a `firewall-cmd` command,
    the iptables backend creates the appropriate iptables rule and inserts it into
    its proper place. You can view the active rules with `iptables -L`. Here''s the
    first part of a very long output:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: RHEL 7及其衍生版本使用iptables引擎作为firewalld的后端。在firewalld启用时，不能使用常规的iptables命令创建规则。然而，每次使用`firewall-cmd`命令创建规则时，iptables后端会创建相应的iptables规则并将其插入到正确的位置。您可以通过`iptables
    -L`查看活动规则。以下是非常长的输出的第一部分：
- en: '[PRE81]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'As was the case with ufw on Ubuntu, a lot has already been configured for us.
    At the top, in the `INPUT` chain, we see that the connection state rule and the
    rule to block invalid packets are already there. The default policy for the chain
    is `ACCEPT`, but the final rule of the chain is set to `REJECT` what isn''t specifically
    allowed. In between these, we can see rules that direct other packets to other
    chains for processing. Now, let''s look at the next portion:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在 Ubuntu 上的 ufw 一样，很多配置已经为我们完成了。在 `INPUT` 链的顶部，我们可以看到连接状态规则和阻止无效数据包的规则已经存在。该链的默认策略是
    `ACCEPT`，但是链的最后一条规则设置为 `REJECT` 所有没有明确允许的内容。在这些规则之间，我们可以看到将其他数据包指向其他链进行处理的规则。现在，让我们看下一个部分：
- en: '[PRE82]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Toward the bottom of the very long output, we can see the `IN_public_allow`
    chain, which contains the rules that we created for opening firewall ports. Just
    below that is the `IN_public_deny` chain, which contains the `REJECT` rule for
    blocking unwanted ICMP types. In both the `INPUT` chain and the `IN_public_deny`
    chain, the `REJECT` rules return an ICMP message to inform the sender that the
    packets were blocked.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在很长的输出的底部，我们可以看到 `IN_public_allow` 链，其中包含我们为开放防火墙端口而创建的规则。紧接着是 `IN_public_deny`
    链，里面包含了用于阻止不需要的 ICMP 类型的 `REJECT` 规则。在 `INPUT` 链和 `IN_public_deny` 链中，`REJECT`
    规则会返回 ICMP 消息，通知发送者数据包已被阻止。
- en: Now, keep in mind that there's a lot of this `IPTABLES -L` output that we haven't
    shown. So, look at it for yourself to see what's there. When you do, you may ask
    yourself, *Where are these default rules stored? Why am I not seeing them in the*
    `/etc/firewalld/` *directory?*
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请记住，我们没有展示很多 `IPTABLES -L` 的输出内容。所以，自己看看输出，看看里面有什么。当你查看时，你可能会问自己，*这些默认规则存储在哪里？为什么我在*
    `/etc/firewalld/` *目录下没有看到它们？*
- en: 'To answer that question, I had to do some rather extensive investigation. For
    some truly bizarre reason, the Red Hat folk have left this completely undocumented.
    I finally found the answer in the `/usr/lib/python2.7/site-packages/firewall/core/`
    directory. Here, there''s a set of Python scripts that set up the initial default
    firewall:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答这个问题，我进行了相当广泛的调查。由于某些真正奇怪的原因，Red Hat 的人们完全没有文档化这一内容。我最终在`/usr/lib/python2.7/site-packages/firewall/core/`目录下找到了答案。在这里，有一组
    Python 脚本用于设置初始的默认防火墙：
- en: '[PRE83]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The script that does most of the work is the `ipXtables.py` script. If you look
    in it, you'll see that its list of iptables commands matches up with the `iptables
    -L` output.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 执行大部分工作的脚本是 `ipXtables.py` 脚本。如果你查看它，你会发现其中的 iptables 命令列表与 `iptables -L` 输出相匹配。
- en: Creating direct rules in RHEL/CentOS 7 firewalld
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 RHEL/CentOS 7 上创建直接规则
- en: As we've seen, any time we do anything with the normal `firewall-cmd` commands
    on RHEL/CentOS 7, firewalld automatically translates those commands into iptables
    rules and inserts them into the proper place. (Or, it deletes the rules, if you've
    issued some sort of delete command.) However, there are some things that we can't
    do with the normal `firewalld-cmd` commands. For example, we can't use normal
    `firewall-cmd` commands to place rules in a specific iptables chain or table.
    To do things like that, we need to use the direct configuration commands.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，每当我们在 RHEL/CentOS 7 上使用普通的 `firewall-cmd` 命令时，firewalld 会自动将这些命令转换为
    iptables 规则，并将它们插入到正确的位置。（或者，如果你发出了删除命令，它会删除规则。）然而，有一些事情我们无法通过普通的 `firewall-cmd`
    命令来做。例如，我们无法使用普通的 `firewall-cmd` 命令将规则放置在特定的 iptables 链或表中。要做这样的事情，我们需要使用直接配置命令。
- en: The `firewalld.direct` man page and the documentation at the Red Hat site both
    warn you to only use direct configuration as an absolute last resort when nothing
    else will work. That's because, unlike the normal `firewall-cmd` commands, the
    direct commands won't automatically place your new rules into the proper places
    so that everything works correctly. With the direct commands, you can break the
    whole firewall by placing a rule into the wrong spot.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`firewalld.direct` 手册页以及 Red Hat 网站上的文档都警告你，只有在其他方法都不起作用时，才应使用直接配置。这是因为，与普通的
    `firewall-cmd` 命令不同，直接命令不会自动将新规则放入正确的位置，从而确保一切正常工作。使用直接命令时，如果将规则放错位置，可能会导致整个防火墙崩溃。'
- en: In the example output of the previous section, in the default ruleset, you saw
    that there's a rule in the filter table's `INPUT` chain that blocks invalid packets.
    In the *Blocking invalid packets with iptables* section of *Chapter 4*, *Securing
    your server with a firewall-Part 1*, you saw that this rule misses certain types
    of invalid packets. So, we'd like to add a second rule to block what the first
    rule misses. We'd also like to place these rules into the `PREROUTING` chain of
    the mangle table in order to enhance firewall performance. To do this, we need
    to create a couple of direct rules. (This isn't hard if you're familiar with normal
    iptables syntax.) So, let's get to it.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节的示例输出中，在默认的规则集中，你会看到在过滤器表的`INPUT`链中有一条规则阻止无效数据包。在*第4章*中*使用防火墙保护服务器 - 第1部分*的*阻止无效数据包与
    iptables*部分中，你看到这条规则漏掉了一些类型的无效数据包。所以，我们想添加第二条规则来阻止第一条规则漏掉的内容。我们还希望将这些规则放入 mangle
    表的`PREROUTING`链中，以提高防火墙性能。为此，我们需要创建几条直接规则。（如果你熟悉常规的 iptables 语法，这并不难。）那么，让我们开始吧。
- en: 'First, let''s verify that we don''t have any effective direct rules, like so:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们验证一下是否没有任何有效的直接规则，方法如下：
- en: '[PRE84]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'You should get no output for either command. Now, let''s add our two new rules,
    for both IPv4 and IPv6, with the following four commands:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该不会看到任何命令输出。现在，让我们通过以下四个命令，为 IPv4 和 IPv6 添加我们的两条新规则：
- en: '[PRE85]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The `direct` command syntax is very similar to that of normal iptables commands.
    So, I won't repeat the explanations that I've already presented in the iptables
    section. However, I do want to point out the `0` and the `1` that come after `PREROUTING`
    in each of the commands. Those represent the priority of the rule. The lower the
    number, the higher the priority, and the higher up the rule is in the chain. So,
    the rules with the `0` priority are the first rules in their respective chains,
    while the rules with the `1` priority are the second rules in their respective
    chains. If you give the same priority to each rule you create, there's no guarantee
    that the order will remain the same upon each reboot. So, be sure to assign a
    different priority to each rule.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`direct`命令的语法与正常的 iptables 命令非常相似。所以，我不会重复在 iptables 部分中已经介绍过的解释。不过，我确实想指出在每个命令中的`PREROUTING`后面跟着的`0`和`1`。它们代表规则的优先级。数字越低，优先级越高，规则在链中的位置越靠前。因此，优先级为`0`的规则是各自链中的第一条规则，而优先级为`1`的规则是各自链中的第二条规则。如果你给每个规则分配相同的优先级，不能保证每次重启时规则的顺序保持不变。所以，确保为每个规则分配不同的优先级。'
- en: 'Now, let''s verify that our rules are in effect:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们验证一下我们的规则是否生效：
- en: '[PRE86]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'We can see that they are. When you use the `iptables -t mangle -L` command
    and the `ip6tables -t mangle -L` command, you''ll see that the rules show up in
    the `PREROUTING_direct` chain. (I''m only showing the output once since it''s
    the same for both commands.):'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到它们是有效的。当你使用`iptables -t mangle -L`命令和`ip6tables -t mangle -L`命令时，你会看到这些规则出现在`PREROUTING_direct`链中。（由于两条命令的输出相同，我只显示一次输出。）
- en: '[PRE87]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: To show that it works, we can perform some Nmap scans against the virtual machine,
    just like how I showed you to in the *Blocking invalid packets with iptables*
    section of *Chapter 4*, *Securing your server with a firewall-Part 1*. (Don't
    fret if you don't remember how to do it. You'll see the procedure in the upcoming
    hands-on lab.) Then, we can use `sudo iptables -t mangle -L -v` and `sudo ip6tables
    -t mangle -L -v` to see the packets and bytes that these two rules blocked.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明它有效，我们可以对虚拟机执行一些 Nmap 扫描，就像我在*第4章*中*使用防火墙保护服务器 - 第1部分*的*阻止无效数据包与 iptables*部分中向你展示的那样。（如果你不记得怎么做，不用担心，接下来的动手实验中你会看到操作步骤。）然后，我们可以使用`sudo
    iptables -t mangle -L -v`和`sudo ip6tables -t mangle -L -v`来查看这两条规则阻止的包和字节。
- en: 'We didn''t use the `--permanent` option with these commands, so they''re not
    permanent yet. Let''s make them permanent now:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这些命令中没有使用`--permanent`选项，所以它们还不是永久性的。现在让我们将它们设置为永久：
- en: '[PRE88]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Now, let''s take a look in the `/etc/firewalld/` directory. Here, you''ll see
    a `direct.xml` file that wasn''t there before:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看`/etc/firewalld/`目录。在这里，你会看到一个之前没有的`direct.xml`文件：
- en: '[PRE89]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Look inside the file; you''ll see the new rules:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件，你会看到新的规则：
- en: '[PRE90]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The official Red Hat 7 documentation page does cover direct rules, but only
    briefly. For more detailed information, see the `firewalld.direct` man page.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 Red Hat 7 文档页面确实覆盖了直接规则，但只做了简要介绍。如需详细信息，请参阅`firewalld.direct`手册页面。
- en: Looking at nftables rules in RHEL/AlmaLinux 8 and 9 firewalld
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看 RHEL/AlmaLinux 8 和 9 中的 nftables 规则以及 firewalld
- en: 'RHEL 8/9 and their offspring use nftables as the default firewalld backend.
    Every time you create a rule with a `firewall-cmd` command, the appropriate nftables
    rule is created and inserted into its proper place. To look at the ruleset that''s
    currently in effect, we''ll use the same nft command that we used with nftables
    on Ubuntu:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: RHEL 8/9 及其衍生版本使用 nftables 作为默认的 firewalld 后端。每次你使用 `firewall-cmd` 命令创建规则时，适当的
    nftables 规则会被创建并插入到正确的位置。为了查看当前生效的规则集，我们将使用与在 Ubuntu 上使用 nftables 时相同的 nft 命令：
- en: '[PRE91]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Again, we can see a very lengthy list of default, pre-configured firewall rules.
    (To see the whole list, run the command for yourself.) You'll find these default
    rules in the `/usr/lib/python3.6/site-packages/firewall/core/nftables.py` script
    on RHEL 8-type machines, and in the `/usr/lib/python3.9/site-packages/firewall/core/nftables.py`
    script on RHEL 9-type machines. This script runs every time you boot up the machine.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次看到了一长串默认的、预配置的防火墙规则。（要查看完整的列表，请自行运行命令。）你会在 RHEL 8 类型机器的 `/usr/lib/python3.6/site-packages/firewall/core/nftables.py`
    脚本中找到这些默认规则，在 RHEL 9 类型机器中则是在 `/usr/lib/python3.9/site-packages/firewall/core/nftables.py`
    脚本中。每次启动机器时，这个脚本都会运行。
- en: Creating direct rules in RHEL/AlmaLinux firewalld
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 RHEL/AlmaLinux firewalld 中创建直接规则
- en: Okay, here's where things get downright weird. Even though the direct rule commands
    create iptables rules and the RHEL 8/9 distros use nftables for the firewalld
    backend, you can still create direct rules. Just create and verify them the same
    way that you did in the *Creating direct rules in RHEL/CentOS 7 firewalld* section.
    Apparently, firewalld allows these iptables rules to peacefully coexist with the
    nftables rules. However, if you need to do this on a production system, be sure
    to thoroughly test your setup before putting it into production.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，事情开始变得相当奇怪了。即使直接规则命令创建了 iptables 规则，而 RHEL 8/9 发行版使用 nftables 作为 firewalld
    后端，你仍然可以创建直接规则。只需像在 *RHEL/CentOS 7 firewalld 中创建直接规则* 部分那样创建并验证它们。显然，firewalld
    允许这些 iptables 规则与 nftables 规则和平共存。然而，如果你需要在生产系统中这样做，务必在投入生产之前彻底测试你的设置。
- en: There's nothing about this in the Red Hat 8/9 documentation, but there is the
    `firewalld.direct` man page if you want to find out more.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Red Hat 8/9 文档中没有关于此的内容，但如果你想了解更多，可以查看 `firewalld.direct` 的手册页。
- en: Hands-on lab for firewalld commands
  id: totrans-298
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: firewalld 命令操作实验
- en: 'By completing this lab, you''ll get some practice with basic firewalld commands:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此实验后，你将练习一些基本的 firewalld 命令：
- en: 'Log into your CentOS 7 virtual machine or either of the AlmaLinux virtual machines
    and run the following commands. Observe the output after each one:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的 CentOS 7 虚拟机或任一 AlmaLinux 虚拟机，并运行以下命令。观察每次执行后的输出：
- en: '[PRE92]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Briefly view the man pages that deal with `firewalld.zones`:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简要查看处理 `firewalld.zones` 的手册页：
- en: '[PRE93]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: (Yes, there are two of them. One explains the zone configuration files, while
    the other explains the zones themselves.)
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: （是的，确实有两个。一个解释了区域配置文件，另一个解释了区域本身。）
- en: 'Look at the configuration information for all of the available zones:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看所有可用区域的配置详情：
- en: '[PRE94]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Look at the list of predefined services. Then, look at the information about
    the `dropbox-lansync` service:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看预定义服务的列表。然后，查看 `dropbox-lansync` 服务的相关信息：
- en: '[PRE95]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Set the default zone to `dmz`. Look at the information concerning the `zone`,
    add the `http` and `https` services, and then look at the `zone` information again:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将默认区域设置为 `dmz`。查看关于 `zone` 的信息，添加 `http` 和 `https` 服务，然后再次查看 `zone` 信息：
- en: '[PRE96]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Reload the **firewall** configuration and look at `zone` information again.
    Also, look at the list of services that are being allowed:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载 **防火墙** 配置并再次查看 `zone` 信息。同时，查看被允许的服务列表：
- en: '[PRE97]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Permanently open port `10000/tcp` and view the results:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 永久打开端口 `10000/tcp` 并查看结果：
- en: '[PRE98]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Remove the port that you just added:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除你刚刚添加的端口：
- en: '[PRE99]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Add a rich language rule to block a geographic range of IPv4 addresses:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一条丰富语言规则来阻止一个地理范围的 IPv4 地址：
- en: '[PRE100]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Block the `host-redirect` and `network-redirect` ICMP types:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阻止 `host-redirect` 和 `network-redirect` ICMP 类型：
- en: '[PRE101]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Add the directive to log all dropped packets:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加指令以记录所有被丢弃的报文：
- en: '[PRE102]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'View both the `runtime` and `permanent` configurations and note the differences
    between them:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看 `runtime` 和 `permanent` 配置，并注意它们之间的差异：
- en: '[PRE103]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Make the `runtime` configuration `permanent` and verify that it took effect:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `runtime` 配置变为 `permanent` 并验证其生效：
- en: '[PRE104]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'On CentOS 7, view the complete list of effective firewall rules by doing:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 CentOS 7 上，通过以下方式查看有效的防火墙规则完整列表：
- en: '[PRE105]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'On AlmaLinux 8 or 9, view the complete list of effective firewall rules by
    doing:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AlmaLinux 8 或 9 上，通过以下命令查看所有有效的防火墙规则：
- en: '[PRE106]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Create the `direct` rules in order to block invalid packets from the mangle
    table''s `PREROUTING` chain:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `direct` 规则，以阻止来自 mangle 表的 `PREROUTING` 链的无效数据包：
- en: '[PRE107]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Verify that the **rules** took effect and make them **permanent**:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 **规则** 是否生效，并将其设置为 **永久**：
- en: '[PRE108]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'View the contents of the `direct.xml` file that you''ve just created:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看你刚刚创建的 `direct.xml` 文件的内容：
- en: '[PRE109]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Perform XMAS Nmap scans for both IPv4 and IPv6 against the virtual machine.
    Then, observe which rule was triggered by the scan:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对虚拟机执行 XMAS Nmap 扫描，支持 IPv4 和 IPv6。然后，观察哪个规则被扫描触发：
- en: '[PRE110]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Repeat *step 19*, but this time with a Windows scan:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复 *第 19 步*，但这次使用 Windows 扫描：
- en: '[PRE111]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'View the list of main pages for firewalld:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看 firewalld 的主要页面列表：
- en: '[PRE112]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: That's the end of the lab – congratulations!
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 实验到此结束，恭喜你！
- en: Summary
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at two helper utilities that can simplify using either
    iptables or nftables. We started with ufw, which is available for the Debian and
    Ubuntu families. Then, we looked at firewalld, which used to be specific to Red
    Hat-type distros, but is now also available in Ubuntu repositories and comes already
    installed and activated on the SUSE distros.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了两种辅助工具，可以简化使用 iptables 或 nftables。我们首先介绍了 ufw，它适用于 Debian 和 Ubuntu
    系列的系统。接着，我们介绍了 firewalld，虽然最初只在 Red Hat 系列发行版中使用，但现在也可以在 Ubuntu 仓库中找到，并且已经预安装并在
    SUSE 系统上启用。
- en: In the space that I've been allotted, I've presented the basics of using these
    technologies to set up single-host protection. I've also presented some details
    about the innards of firewalld that you won't find documented anywhere else, including
    in the official Red Hat documentation.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在我所分配的空间中，我展示了如何使用这些技术设置单主机保护的基本知识。我还展示了一些 firewalld 的内部细节，这些信息你在任何地方，包括官方的
    Red Hat 文档中，都找不到。
- en: In the next chapter, we'll look at the various encryption technologies that
    can help keep your data private. I'll see you there.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论各种加密技术，它们能帮助你保护数据隐私。到时见。
- en: Questions
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: What is the major difference between firewalld on RHEL 7-type distros and firewalld
    on RHEL 8/9-type distros?
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RHEL 7 系列和 RHEL 8/9 系列的 firewalld 有什么主要区别？
- en: In which of the following formats does firewalld store its rules?
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: firewalld 以哪种格式存储规则？
- en: '`.txt`'
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.txt`'
- en: '`.config`'
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.config`'
- en: '`.html`'
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.html`'
- en: '`.xml`'
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.xml`'
- en: Which of the following commands would you use to list all of the firewalld zones
    on your system?
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令可以列出系统上所有的 firewalld 区域？
- en: sudo firewalld --get-zones
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo firewalld --get-zones
- en: sudo firewall-cmd --list-zones
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo firewall-cmd --list-zones
- en: sudo firewall-cmd --get-zones
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo firewall-cmd --get-zones
- en: sudo firewalld --list-zones
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo firewalld --list-zones
- en: With ufw, everything you'll ever need to do can be done with the ufw utility.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 ufw，你所需的所有操作都可以通过 ufw 工具完成。
- en: 'True'
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真
- en: 'False'
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假
- en: Your system is set up with firewalld and you need to open port `10000/tcp`.
    Which of the following commands would you use?
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的系统已经安装了 firewalld，并且你需要打开端口 `10000/tcp`。你会使用哪个命令？
- en: sudo firewall-cmd --add-port=10000/tcp
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo firewall-cmd --add-port=10000/tcp
- en: sudo firewall-cmd --add-port=10000
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo firewall-cmd --add-port=10000
- en: sudo firewalld --add-port=10000
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo firewalld --add-port=10000
- en: sudo firewalld --add-port=10000/tcp
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo firewalld --add-port=10000/tcp
- en: Which of the following ufw commands would you use to open the default Secure
    Shell port?
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个 ufw 命令可以用来打开默认的安全外壳端口？
- en: sudo ufw allow 22
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo ufw allow 22
- en: sudo ufw permit 22
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo ufw permit 22
- en: sudo ufw allow 22/tcp
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo ufw allow 22/tcp
- en: sudo ufw permit 22/tcp
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: sudo ufw permit 22/tcp
- en: Further reading
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Rate-limiting with ufw: [https://45squared.com/rate-limiting-with-ufw/](https://45squared.com/rate-limiting-with-ufw/)'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ufw 限制速率：[https://45squared.com/rate-limiting-with-ufw/](https://45squared.com/rate-limiting-with-ufw/)
- en: 'firewalld documentation for RHEL 7: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-using_firewalls](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-using_firewalls)'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RHEL 7 的 firewalld 文档：[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-using_firewalls](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-using_firewalls)
- en: 'firewalld documentation for RHEL 8: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/securing_networks/using-and-configuring-firewalls_securing-networks](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/securing_networks/using-and-configuring-firewalls_securing-networks)'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RHEL 8的firewalld文档：[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/securing_networks/using-and-configuring-firewalls_securing-networks](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/securing_networks/using-and-configuring-firewalls_securing-networks)  '
- en: 'The firewalld home page: [https://firewalld.org/](https://firewalld.org/)'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'firewalld主页：[https://firewalld.org/](https://firewalld.org/)  '
- en: 'UFW Community Help Wiki: [https://help.ubuntu.com/community/UFW](https://help.ubuntu.com/community/UFW)'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UFW社区帮助维基：[https://help.ubuntu.com/community/UFW](https://help.ubuntu.com/community/UFW)
- en: 'How to set up a Linux firewall with UFW on Ubuntu 18.04: [https://linuxize.com/post/how-to-setup-a-firewall-with-ufw-on-ubuntu-18-04/](https://linuxize.com/post/how-to-setup-a-firewall-with-ufw-on-ubuntu-18-04/)'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如何在Ubuntu 18.04上使用UFW设置Linux防火墙：[https://linuxize.com/post/how-to-setup-a-firewall-with-ufw-on-ubuntu-18-04/](https://linuxize.com/post/how-to-setup-a-firewall-with-ufw-on-ubuntu-18-04/)  '
- en: Answers
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '答案  '
- en: RHEL 7 distros use iptables as the firewalld backend, and RHEL 8/9 distros use
    nftables as the firewalld backend.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'RHEL 7发行版使用iptables作为firewalld的后端，而RHEL 8/9发行版使用nftables作为firewalld的后端。  '
- en: D
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'D  '
- en: C
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'C  '
- en: B
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'B  '
- en: A
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'A  '
- en: C
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'C  '

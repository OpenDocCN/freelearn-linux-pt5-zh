- en: '*Chapter 17*: Leveraging the Linux Kernel Input Subsystem'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第17章*：利用Linux内核输入子系统'
- en: Input devices are devices that you can use to interact with the system. Such
    devices include buttons, keyboards, touchscreens, mice, and more. They work by
    sending events that are caught and broadcast over the system by the input core.
    This chapter will explain each structure that's used by the input core to handle
    input devices, as well as how to manage events from the user space.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 输入设备是你用来与系统交互的设备。这些设备包括按钮、键盘、触摸屏、鼠标等。它们通过发送事件与系统交互，这些事件会被输入核心捕获并广播到系统中。本章将解释输入核心用来处理输入设备的每个结构，以及如何从用户空间管理事件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to the Linux kernel input subsystem – its data structures and APIs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux内核输入子系统介绍——其数据结构和API
- en: Allocating and registering an input device
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配并注册输入设备
- en: Using polled input devices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用轮询输入设备
- en: Generating and reporting input events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成并报告输入事件
- en: Handling input devices from the user space
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从用户空间处理输入设备
- en: Introduction to the Linux kernel input subsystem – its data structures and APIs
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux内核输入子系统介绍——其数据结构和API
- en: 'The main data structures and APIs of this subsystem can be found in the `include`/`linux`/`input.h`
    files. The following line is required in any input device driver:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 该子系统的主要数据结构和API可以在`include`/`linux`/`input.h`文件中找到。任何输入设备驱动程序都需要包含以下行：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Whatever type of input device it is, whatever type of event it sends, an input
    device is represented in the kernel as an instance of the struct `input_dev`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是什么类型的输入设备，无论它发送什么类型的事件，输入设备在内核中都表示为`input_dev`结构的一个实例：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For the sake of readability, some elements in the structure have been omitted.
    Let''s look at these fields in more detail:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可读性，结构中的一些元素已被省略。我们将更详细地查看这些字段：
- en: '`name` represents the name of the device.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`表示设备的名称。'
- en: '`phys` is the physical path to the device in the system hierarchy.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phys`是设备在系统层次结构中的物理路径。'
- en: '`evbit` is a bitmap of the types of events that are supported by the device.
    The following are some events:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`evbit`是设备支持的事件类型的位图。以下是一些事件：'
- en: '`EV_KEY` is for devices that support sending key events (for example, keyboards,
    buttons, and so on)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EV_KEY`用于支持发送键事件的设备（例如，键盘、按钮等）'
- en: '`EV_REL` is for devices that support sending relative positions (for example,
    mice, digitizers, and so on)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EV_REL`用于支持发送相对位置的设备（例如，鼠标、数字化仪等）'
- en: '`EV_ABS` is for devices that support sending absolute positions (for example,
    joysticks) The list of events is available in the kernel source in the`include/linux/input-event-codes.h`
    file. You can use the `set_bit()` macro to set the appropriate bit, depending
    on your input device''s capabilities. Of course, a device can support more than
    one type of event. For example, a mouse driver will set both `EV_KEY` and `EV_REL`,
    as shown here:'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EV_ABS`用于支持发送绝对位置的设备（例如，操纵杆）。事件的列表可以在内核源代码中的`include/linux/input-event-codes.h`文件中找到。你可以使用`set_bit()`宏根据输入设备的能力设置相应的位。当然，一个设备可以支持多个事件类型。例如，一个鼠标驱动程序将同时设置`EV_KEY`和`EV_REL`，如下所示：'
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`keybit` is for `EV_KEY` enabled devices and consists of a bitmap of keys/buttons
    that this device exposes; for example, `BTN_0`, `KEY_A`, `KEY_B`, and so on. The
    complete list of keys/buttons can be found in the `include/linux/input-event-codes.h`
    file.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keybit`用于`EV_KEY`启用的设备，包含设备暴露的键/按钮位图；例如，`BTN_0`、`KEY_A`、`KEY_B`等。键/按钮的完整列表可以在`include/linux/input-event-codes.h`文件中找到。'
- en: '`relbit` is for `EV_REL` enabled devices and consists of a bitmap of relative
    axes for the device; for example, `REL_X`, `REL_Y`, `REL_Z`, and so on. Have a
    look at `include/linux/input-event-codes.h` for the complete list.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`relbit`用于`EV_REL`启用的设备，包含设备的相对轴位图；例如，`REL_X`、`REL_Y`、`REL_Z`等。可以查看`include/linux/input-event-codes.h`文件以获取完整的列表。'
- en: '`absbit` is for `EV_ABS` enabled devices and consists of a bitmap of absolute
    axes for the device; for example, `ABS_Y`, `ABS_X`, and so on. Have a look at
    the same previous file for the complete list.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`absbit`用于`EV_ABS`启用的设备，包含设备的绝对轴位图；例如，`ABS_Y`、`ABS_X`等。可以查看前面同样的文件以获取完整的列表。'
- en: '`mscbit` is for `EV_MSC` enabled devices and consists of a bitmap of miscellaneous
    events that are supported by the device.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mscbit`用于`EV_MSC`启用的设备，包含设备支持的各种事件的位图。'
- en: '`repeat_key` stores the key code of the last key pressed; it is used when the
    autorepeat feature is implemented by the software.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repeat_key` 存储最后按下的按键码；当软件实现自动重复功能时会使用此值。'
- en: '`rep` stores the current values for auto repeat parameters, typically the delay
    and rate.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rep` 存储当前的自动重复参数值，通常包括延迟和速率。'
- en: '`absinfo` is an array of `&struct input_absinfo` elements that holds information
    about the absolute axes (the current value, `min`, `max`, `flat`, `fuzz`, and
    the resolution). You should use the `input_set_abs_params()` function to set those
    values:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`absinfo` 是一个 `&struct input_absinfo` 元素的数组，保存关于绝对轴的信息（当前值、`min`、`max`、`flat`、`fuzz`
    和分辨率）。你应该使用 `input_set_abs_params()` 函数来设置这些值：'
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`min` and `max` specify the lower and upper bound values, respectively. `fuzz`
    indicates the expected noise on the specified channel of the specified input device.
    In the following examples, we''re setting each channel''s bound:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min` 和 `max` 分别指定下限和上限值，`fuzz` 表示指定输入设备指定通道上的预期噪声。以下示例中，我们设置了每个通道的边界：'
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`key` reflects the current state of the device''s keys/buttons.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` 反映设备按键/按钮的当前状态。'
- en: '`open` is a method that''s called when the very first user calls `input_open_device()`.
    Use this method to prepare the device, such as to interrupt a request, poll a
    thread start, and so on.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`open` 是当第一个用户调用 `input_open_device()` 时调用的方法。使用此方法准备设备，例如中断请求、轮询线程启动等。'
- en: '`close` is called when the very last user calls `input_close_device()`. Here,
    you can stop polling (which consumes a lot of resources).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`close` 是当最后一个用户调用 `input_close_device()` 时调用的函数。在这里，你可以停止轮询（因为它消耗了大量资源）。'
- en: '`users` stores the number of users (input handlers) that opened this device.
    It is used by `input_open_device()` and `input_close_device()` to ensure that
    `dev->open()` is only called when the first user opens the device and that `dev->close()`
    is only called when the very last user closes the device.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`users` 存储打开该设备的用户（输入处理程序）数量。它用于 `input_open_device()` 和 `input_close_device()`，确保
    `dev->open()` 仅在第一个用户打开设备时调用，并且 `dev->close()` 仅在最后一个用户关闭设备时调用。'
- en: '`dev` is the struct device associated with this device (for device model).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev` 是与该设备关联的 `struct device`（用于设备模型）。'
- en: '`num_vals` is the number of values that are queued in the current frame.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_vals` 是当前帧中排队的值的数量。'
- en: '`max_vals` is the maximum number of values that are queued in a frame.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_vals` 是在一帧中排队的最大值数量。'
- en: '`Vals` is the array of values that are queued in the current frame.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Vals` 是当前帧中排队的值的数组。'
- en: '`devres_managed` indicates that the devices are managed with the **devres**
    framework and don''t need to be explicitly unregistered or freed.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devres_managed` 表示设备是通过 **devres** 框架管理的，不需要显式地注销或释放。'
- en: Now that you're familiar with the main input device's data structure, we can
    start registering such devices within the system.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了主要输入设备的数据结构，我们可以开始在系统中注册这些设备。
- en: Allocating and registering an input device
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分配和注册输入设备
- en: 'Before the events that are supported by an input device can be seen by the
    system, memory needs to be allocated for this device first using the `devm_input_allocate_device()`
    API. Then, the device needs to be registered with the system using `input_device_register()`.
    The former API will take care of freeing up the memory and unregistering the device
    when it leaves the system. However, non-managed allocation is still available
    but not recommended, `input_allocate_device()`. By using non-managed allocation,
    the driver becomes responsible for making sure that `input_unregister_device()`
    and `input_free_device()` are called to unregister the device and free its memory
    when they''re on the unloading path of the driver, respectively. The following
    are the respective prototypes of these APIs:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统能够看到输入设备支持的事件之前，必须先使用 `devm_input_allocate_device()` API 为该设备分配内存。然后，设备需要通过
    `input_device_register()` 注册到系统中。前者 API 会在设备离开系统时负责释放内存并注销设备。然而，仍然可以使用非管理的分配，但不推荐使用，`input_allocate_device()`。使用非管理分配时，驱动程序需要负责确保在卸载路径上分别调用
    `input_unregister_device()` 和 `input_free_device()` 来注销设备和释放其内存。以下是这些 API 的原型：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Device allocation may sleep, so it must not be called in the atomic context
    or with a spinlock being held. The following is an excerpt of the `probe` function
    of an input device sitting on the I2C bus:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 设备分配可能会导致睡眠，因此不得在原子上下文中或持有自旋锁时调用。以下是一个位于 I2C 总线上的输入设备 `probe` 函数的摘录：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you may have noticed, in the preceding code, no memory freeing nor device
    unregistering is performed when an error occurs because we have used the managed
    allocation for both the input device and the IRQ. That said, the input device
    has an IRQ line so that we're notified of a state change on the underlying device.
    This is not always the case as the system may lack available IRQ lines, in which
    case the input core will have to poll the device frequently so that it doesn't
    miss events. We discuss this in the next section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在前面的代码中，当发生错误时，没有进行内存释放或设备注销，因为我们对输入设备和中断请求（IRQ）都使用了托管分配。这意味着输入设备有一个IRQ线路，以便我们能接收到底层设备状态变化的通知。但这并不总是成立，因为系统可能没有可用的IRQ线路，在这种情况下，输入核心必须频繁地轮询设备，以免错过事件。我们将在下一节讨论这一点。
- en: Using polled input devices
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用轮询输入设备
- en: Polled input devices are special input devices that rely on polling to sense
    device state changes; the generic input device type relies on IRQ to sense changes
    and send events to the input core.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 轮询输入设备是依赖于轮询来感知设备状态变化的特殊输入设备；通用输入设备类型则依赖IRQ来感知变化并将事件发送到输入核心。
- en: 'A polled input device is described in the kernel as an instance of `struct
    input_polled_dev` structure, which is a wrapper around the generic `struct input_dev`
    structure. The following is its declaration:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在内核中，轮询输入设备被描述为 `struct input_polled_dev` 结构的一个实例，这是一个围绕通用 `struct input_dev`
    结构的包装器。以下是它的声明：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s take a look at the elements in this structure:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个结构体中的元素：
- en: '`private` is the driver''s private data.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`private` 是驱动程序的私有数据。'
- en: '`open` is an optional method that prepares the device for polling (enables
    the device and sometimes flushes the device''s state).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`open` 是一个可选方法，用于准备设备进行轮询（启用设备，并有时刷新设备状态）。'
- en: '`close` is an optional method that is called when the device is no longer being
    polled. It is used to put devices into low power mode.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`close` 是一个可选方法，当设备不再被轮询时会被调用。它用于将设备置于低功耗模式。'
- en: '`poll` is a mandatory method that''s called whenever the device needs to be
    polled. It is called at the frequency of `poll_inteval`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poll` 是一个必需的方法，每当设备需要被轮询时就会被调用。它会以 `poll_interval` 的频率被调用。'
- en: '`poll_interval` is the frequency at which the `poll()` method should be called.
    It defaults to 500 milliseconds unless it''s overridden when you''re registering
    the device.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poll_interval` 是应该调用 `poll()` 方法的频率。除非在注册设备时进行覆盖，否则默认为 500 毫秒。'
- en: '`poll_interval_max` specifies the upper bound for the poll interval. It defaults
    to the initial value of `poll_interval`.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poll_interval_max` 指定了轮询间隔的上限。默认为 `poll_interval` 的初始值。'
- en: '`poll_interval_min` specifies the lower bound for the poll interval. It defaults
    to 0.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poll_interval_min` 指定了轮询间隔的下限。默认为 0。'
- en: '`input` is the input device that the polled device is built around. It must
    be initialized by the driver (by its ID, name, and bits). The polled input device
    just provides an interface to use polling instead of IRQ, to sense device state
    change.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input` 是轮询设备所依赖的输入设备。它必须由驱动程序初始化（通过其ID、名称和位）。轮询输入设备仅提供一个接口，使用轮询而不是IRQ来感知设备状态变化。'
- en: 'Memory can be allocated for a polled input device using `devm_input_allocate_polled_device()`.
    This is a managed allocation API that takes care of freeing memory and unregistering
    the device as appropriate. Similarly, the non-managed API can be used for allocation,
    `input_allocate_polled_device()`, in which case you must take care of calling
    `input_free_polled_device()` by yourself. The following code shows the prototypes
    of those APIs:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 `devm_input_allocate_polled_device()` 为轮询输入设备分配内存。这是一个托管分配API，负责在适当的时候释放内存和注销设备。同样，非托管API也可以用于分配，即
    `input_allocate_polled_device()`，在这种情况下，你必须自己负责调用 `input_free_polled_device()`。以下代码展示了这些API的原型：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For resource-managed devices, the `input_dev->devres_managed` field will be
    set to `true` by the input core. Then, you should take care of initializing the
    mandatory fields of the underlying `struct input_dev`, as we saw in the previous
    section. The polling interval must be set too; otherwise, it will default to 500
    ms.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于资源管理设备，`input_dev->devres_managed` 字段将由输入核心设置为 `true`。然后，你应该初始化底层 `struct
    input_dev` 的必需字段，正如我们在前一节中看到的那样。轮询间隔也必须设置，否则它将默认为 500 毫秒。
- en: 'Once the fields have been allocated and initialized, the polled input device
    can be registered using `input_register_polled_device()`, which returns `0` on
    success. For managed allocation, unregistering is handled by the system; you need
    to call `input_unregister_polled_device()` by yourself to perform the reverse
    operation. The following are their prototypes:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦字段分配和初始化完成，可以使用 `input_register_polled_device()` 来注册轮询输入设备，成功时返回 `0`。对于托管分配，注销由系统处理；你需要自己调用
    `input_unregister_polled_device()` 执行反向操作。以下是它们的原型：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A typical example of the `probe()` function for such a device may look as follows.
    First, we define the driver data structure, which will gather all the necessary
    resources:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的设备的 `probe()` 函数的一个典型示例如下所示。首先，我们定义驱动程序数据结构，它将收集所有必要的资源：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the driver data structure has been defined, the `probe()` function can
    be implemented. The following is its body:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦驱动程序数据结构被定义，`probe()` 函数就可以实现。以下是它的实现：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once again, neither unregistering nor freeing are handled by ourselves when
    an error occurs because we have used managed allocations.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，当发生错误时，由于我们使用了托管分配，注销和释放操作并非由我们自己处理。
- en: 'The following is what our `open` callback may look like:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们的 `open` 回调可能的样子：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In our example, it does nothing. However, the `open` method is used to prepare
    the resources that are needed by the device.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，它没有任何操作。然而，`open` 方法用于准备设备所需的资源。
- en: 'Deciding whether you should implement a polled input device is straightforward.
    The usual way is to use classic input devices if an IRQ line is available; alternatively,
    you can fall back to the polled device:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 是否应实现轮询输入设备是一个简单的决策。通常，如果有 IRQ 线可用，可以使用经典的输入设备；否则，可以退而使用轮询设备：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Other elements may need to be considered when you're choosing between implementing
    a polled input device or an IRQ-based one; the preceding code is just a suggestion.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择实现轮询输入设备还是基于 IRQ 的输入设备时，可能还需要考虑其他因素；前面的代码只是一个建议。
- en: Now that we are familiar with this subset of input devices, we can consider
    registering and unregistering input devices. That said, even though the input
    device has been registered, we can't interact with it yet. In the next section,
    we will learn how the input device can report events to the kernel.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了这部分输入设备，我们可以考虑注册和注销输入设备。也就是说，即使输入设备已注册，我们仍然无法与其交互。在下一节中，我们将学习如何让输入设备向内核报告事件。
- en: Generating and reporting input events
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成并报告输入事件
- en: Device allocation and registration are essential, but they are useless if the
    device is unable to report events to the input core, which is what input devices
    are designed to do. Depending on the type of event our device can support, the
    kernel provides the appropriate APIs to report them to the core.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 设备的分配和注册是必要的，但如果设备无法向输入核心报告事件，那么它们就毫无意义，因为输入设备的设计目的就是报告事件。根据我们设备可以支持的事件类型，内核提供了相应的
    API 来将这些事件报告给核心。
- en: 'Given an `EV_XXX` capable device, the corresponding report function would be
    `input_report_xxx()`. The following table shows the mappings between the most
    important event types and their report functions:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个支持 `EV_XXX` 的设备，对应的报告函数将是 `input_report_xxx()`。下表显示了最重要的事件类型与其报告函数之间的映射关系：
- en: '![Table 17.1 – Mapping the input device''s capabilities and the report APIs'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 17.1 – 映射输入设备的能力与报告 API](img/B17934_Table_01.jpg)'
- en: '](img/B17934_Table_01.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17934_Table_01.jpg)'
- en: Table 17.1 – Mapping the input device's capabilities and the report APIs
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 表 17.1 – 映射输入设备的能力与报告 API
- en: 'The prototypes for these report APIs are as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些报告 API 的原型如下：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The list of available report functions can be found in `include/linux/input.h`
    in the kernel source file. They all have the same skeleton:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可用报告函数的列表可以在内核源文件 `include/linux/input.h` 中找到。它们都有相同的框架：
- en: '`dev` is the input device that''s responsible for the event.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev` 是负责该事件的输入设备。'
- en: '`code` represents the event code; for example, `REL_X` or `KEY_BACKSPACE`.
    The complete list can be found in `include/linux/input-event-codes.h`.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`code` 表示事件代码；例如，`REL_X` 或 `KEY_BACKSPACE`。完整的列表可以在 `include/linux/input-event-codes.h`
    中找到。'
- en: '`value` is the value the event carries. For an `EV_REL` event type, it carries
    the relative change. For an `EV_ABS` (joysticks and so on) event type, it contains
    an absolute new value. For an `EV_KEY` event type, it should be set to `0` for
    key release, `1` for a keypress, and `2` for auto-repeat.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` 是事件携带的值。对于 `EV_REL` 事件类型，它携带相对变化。对于 `EV_ABS`（如摇杆等）事件类型，它包含绝对新值。对于 `EV_KEY`
    事件类型，按键释放时应设置为 `0`，按键按下时为 `1`，自动重复时为 `2`。'
- en: 'Once all these changes have been reported, the driver should call `input_sync()`
    on the input device to indicate that this event is complete. The input subsystem
    will collect these events into a single packet and send it through `/dev/input/event<X>`,
    which is the character device that represents our `struct input_dev` on the system.
    Here, `<X>` is the interface number that''s been assigned to the driver by the
    input core:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有这些更改被报告，驱动程序应在输入设备上调用 `input_sync()`，以指示该事件已经完成。输入子系统将把这些事件收集到一个数据包中，并通过
    `/dev/input/event<X>` 发送，这个字符设备代表我们在系统上的 `struct input_dev`。在这里，`<X>` 是输入核心分配给驱动程序的接口编号：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s look at an example of this. The following is an excerpt from the `drivers/input/misc/bma150.c`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。以下是 `drivers/input/misc/bma150.c` 的摘录：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding excerpt, `input_sync()` tells the core to consider the three
    reports as the same event. This makes sense since the position has three axes
    (*X*, *Y*, and *Z*) and we do not want *X*, *Y*, or *Z* to be reported separately.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的摘录中，`input_sync()` 告诉核心将三个报告视为同一个事件。这是有道理的，因为位置有三个坐标轴（*X*，*Y*，*Z*），我们不希望
    *X*、*Y* 或 *Z* 被单独报告。
- en: 'The best place to report the event is inside the poll function for a polled
    device or the IRQ routine (threaded part or not) for an IRQ-enabled device. If
    you perform some operations that may sleep, you should process your report inside
    the threaded part of the IRQ handler. The following code shows how our initial
    example could implement the `poll` method:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 报告事件的最佳位置是在轮询设备的轮询函数内部，或在启用中断（IRQ）的设备的 IRQ 例程（无论是线程化部分还是非线程化部分）中。如果您执行了可能导致睡眠的操作，您应在
    IRQ 处理程序的线程化部分内处理报告。以下代码展示了我们的初始示例如何实现 `poll` 方法：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code, our input device reports the `0` key code. In the next
    section, we will discuss how the user space can handle those report events and
    codes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们的输入设备报告了 `0` 键码。在接下来的部分，我们将讨论用户空间如何处理这些报告事件和码值。
- en: Handling input devices from the user space
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从用户空间处理输入设备
- en: 'A node will be created in the `/dev/input/` directory for each input device
    (polled or not) that has been successfully registered with the system. In my case,
    the node corresponds to `event0` because it is the first and only input device
    on my target board. You can use the `udevadm` tool to display information about
    the device:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 每个已经成功注册到系统中的输入设备（无论是否轮询）都会在 `/dev/input/` 目录下创建一个节点。在我的例子中，该节点对应于 `event0`，因为它是我目标板上的第一个也是唯一的输入设备。您可以使用
    `udevadm` 工具来显示设备的信息：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Another tool that you can use, which allows you to print the keys that are
    supported by the device, is `evetest`. It can also catch and print events when
    they are reported by the device. The following code shows its usage on our input
    device:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可以使用的工具是 `evetest`，它允许您打印设备支持的按键。它还可以在设备报告事件时捕获并打印这些事件。以下代码展示了它在我们输入设备上的使用：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Not only the input devices we have written drivers for can be managed with
    `evetest`. In the following example, I am using the USB-C headset that''s connected
    to my computer. It has input device capabilities since it provides volume-related
    keys:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅是我们为其编写了驱动程序的输入设备可以通过 `evetest` 管理。在以下示例中，我正在使用连接到我计算机的 USB-C 耳机。由于它提供了音量相关的按键，因此它具有输入设备功能：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, I pushed the up volume key to see how it is reported.
    `evtest` can even be used with your keyboard, with the only condition being that
    you identify the corresponding input device node in `/dev/input/`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我按下了音量增大键以查看如何报告。`evtest` 甚至可以与您的键盘一起使用，唯一的条件是您需要在 `/dev/input/` 中识别相应的输入设备节点。
- en: 'As we have seen, every registered input device is represented by a `/dev/input/event<X>`
    character device, which we can use to read the event from the user space. An application
    that''s reading this file will receive event packets in the `struct input_event`
    format, which has the following declaration:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，每个注册的输入设备都由 `/dev/input/event<X>` 字符设备表示，我们可以使用它从用户空间读取事件。读取该文件的应用程序将收到以
    `struct input_event` 格式的事件数据包，该格式有以下声明：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s look at the meaning of each element in the structure:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下结构中每个元素的含义：
- en: '`time` is a timestamp that corresponds to the time when the event happened.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time` 是一个时间戳，表示事件发生的时间。'
- en: '`type` is the event type; for example, `EV_KEY` for a keypress or release,
    `EV_REL` for a relative moment, or `EV_ABS` for an absolute one. More types are
    defined in `include/linux/input-event-codes.h`.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type` 是事件类型；例如，`EV_KEY` 表示按键按下或释放，`EV_REL` 表示相对运动，或 `EV_ABS` 表示绝对运动。更多类型可以在
    `include/linux/input-event-codes.h` 中找到。'
- en: '`code` is the event code; for example, `REL_X` or `KEY_BACKSPACE`. Again, a
    complete list can be found in `include/linux/input-event-codes.h`.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`code` 是事件代码；例如，`REL_X` 或 `KEY_BACKSPACE`。同样，完整的列表可以在 `include/linux/input-event-codes.h`
    中找到。'
- en: '`value` is the value that the event carries. For an `EV_REL` event type, it
    carries the relative change. For an `EV_ABS` (joysticks and so on) event type,
    it contains the absolute new value. For an `EV_KEY` event type, it is set to `0`
    for a key release, `1` for a keypress, and `2` for auto-repeat.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` 是事件携带的值。对于 `EV_REL` 事件类型，它携带相对变化；对于 `EV_ABS`（例如游戏摇杆）事件类型，它包含绝对新值；对于
    `EV_KEY` 事件类型，按键释放时设置为 `0`，按键按下时设置为 `1`，自动重复时设置为 `2`。'
- en: 'A user space application can use blocking and non-blocking reads, but also
    `poll()` or `select()` system calls, to be notified of events after opening this
    device. The following is an example of the `select()` system call. Let''s start
    by enumerating the headers we need to implement our example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 用户空间应用程序可以使用阻塞和非阻塞读取，也可以使用 `poll()` 或 `select()` 系统调用，在打开设备后被通知事件。以下是 `select()`
    系统调用的示例。我们从列出需要实现示例的头文件开始：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, we must define our input device path as a macro as it will be used often:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须将输入设备路径定义为宏，因为它将被频繁使用：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we must open the input device and keep its file descriptor for later
    use. Failing to open the input device is considered as an error, so we must exit
    the program:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须打开输入设备，并保持其文件描述符以备后用。如果打开输入设备失败，将视为错误，因此我们必须退出程序：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, we have a file descriptor representing our opened input device. We can
    use the `select()` system call to sense any key press or release:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经有了一个表示打开的输入设备的文件描述符。我们可以使用 `select()` 系统调用来感知任何按键按下或释放：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: At this point, we have done the necessary sanity checks on the return path of
    `select()`. Note that `select()` returns zero if it timed out before any file
    descriptors became ready, hence `else if` in the preceding code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经对 `select()` 的返回路径进行了必要的有效性检查。请注意，如果在任何文件描述符准备好之前超时，`select()` 将返回零，因此在前面的代码中使用了
    `else if`。
- en: 'The change is effective now, let''s read the data to see what it corresponds
    to:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 变更现在已经生效，让我们读取数据查看它对应的内容：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If the execution flow reaches this mean, it means that everything went well.
    Now, we can walk through the events that are supported by our input device and
    compare them to the event that is reported by the input core before a decision
    is made:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行流到达这一点，意味着一切顺利。现在，我们可以遍历输入设备支持的事件，并将它们与输入核心报告的事件进行比较，以便做出决策：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For further debugging purposes, if your input device is based on GPIOs, you
    can successively push/release the button and check whether the GPIO''s state has
    changed:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步调试，如果你的输入设备是基于 GPIO 的，你可以依次按下/释放按钮，检查 GPIO 的状态是否发生了变化：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Moreover, if the input device has an IRQ line, it may make sense to check the
    statistic for this IRQ line to make sure it is coherent. For example, here, we
    must check whether the request has succeeded and how many times it has been fired:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果输入设备有一个 IRQ 线路，检查该 IRQ 线路的统计数据可能是有意义的，以确保其一致性。例如，在这里，我们必须检查请求是否成功，以及它触发了多少次：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In this section, we learned how to deal with the input device from the user
    space and provided some debugging tips for when something goes wrong. We used
    the `select()` system call to sense input events, though we could have used `poll()`
    as well.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何处理用户空间中的输入设备，并提供了一些调试提示，以便在出现问题时进行排查。我们使用了 `select()` 系统调用来感知输入事件，尽管我们也可以使用
    `poll()`。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter described the input framework and highlighted the difference between
    polled and interrupt-driven input devices. At this point, you should have the
    necessary knowledge to write a driver for any input driver, whatever its type,
    and whatever input event it supports. The user space interface was also discussed,
    and an example was provided.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了输入框架，并强调了轮询输入设备和中断驱动输入设备之间的区别。到此为止，你应该已经具备了编写任何输入设备驱动程序的必要知识，无论其类型如何，支持何种输入事件。用户空间接口也进行了讨论，并提供了一个示例。

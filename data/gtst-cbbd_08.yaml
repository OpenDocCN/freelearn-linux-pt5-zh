- en: Chapter 8. Blinking Lights and Sensing the World
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：闪烁的灯光与感知世界
- en: Until now, we have covered several aspects of Cubieboard, but they were all
    software-related. When interfacing with real-world scenarios, ranging from blinking
    a **Light Emitting Diode** (**LED**) and switching on a light to spinning motors,
    things become much more interesting. There are numerous things you can do once
    you connect the board to the various devices available today. A robot vacuum cleaner
    very much started its development life on a development board, where engineers
    connected various sensors to make the robot see what was around it. Connecting
    all these devices can be highly complex and might involve more than just the basics
    of electronics; therefore, this chapter will be dedicated to the fundamentals
    of electronics to help you to get to grips with some basics in connecting an LED,
    making it blink, and connecting a button to respond to a push.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了Cubieboard的多个方面，但它们都是与软件相关的内容。与现实世界场景进行交互时，从让**发光二极管**（**LED**）闪烁到打开灯光，再到驱动电动机，事情变得更加有趣。一旦你将开发板连接到今天各种可用的设备，你可以做的事情就多了起来。一个机器人吸尘器的开发很大程度上是在开发板上开始的，工程师将各种传感器连接起来，使得机器人能够“看到”周围的环境。连接所有这些设备可能会非常复杂，可能不仅仅涉及电子学的基础；因此，本章将专注于电子学的基础知识，帮助你掌握一些基本内容，如连接LED、使其闪烁，以及连接按钮以响应按压。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: An overview of a few concepts in basic electronics
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些基础电子学概念的概述
- en: How to toggle a **General Purpose Input/Output** (**GPIO**)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何切换**通用输入/输出**（**GPIO**）
- en: How to connect a button and read its status
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何连接按钮并读取其状态
- en: Making an LED glow
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使LED发光
- en: A world without LEDs seems almost unimaginable today. They inform us of messages
    on our smartphones, they have been used as indicator lights on TV and stereo equipment
    for years, and there are even big screens built of nothing but LEDs. Ironically,
    the invention of the LED was more of an annoying side effect of the first diodes.
    The intention was not to emit light at all, and in early equipment, the diodes
    were covered in black paint to hide their glow. The name LED is so ubiquitous
    that their meaning might almost have been forgotten.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，想象一个没有LED的世界几乎是不可思议的。它们在我们的智能手机上显示信息，作为电视和立体声设备的指示灯已经使用了多年，甚至有些大型屏幕完全由LED构成。具有讽刺意味的是，LED的发明更像是第一代二极管的一个烦人的副作用。最初的设计并不是为了发光，在早期的设备中，二极管甚至被黑漆覆盖以隐藏它们的光芒。LED这个名字已经如此普及，以至于它们的真正意义几乎可能被遗忘了。
- en: Making an LED glow, however, does require a few tricks and some know-how to
    make sure not to break it. Each LED has certain characteristics, such as the amount
    of voltage it requires to function and the maximum amount of current that can
    flow through it. A blue LED, for example, requires more voltage and more current
    than a red LED. It is, therefore, imperative to know the technical details of
    an LED.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使LED发光，然而，这确实需要一些技巧和专业知识，以确保不会把它弄坏。每个LED都有一些特性，例如它需要的工作电压以及能够通过它的最大电流。例如，蓝色LED需要比红色LED更多的电压和电流。因此，了解LED的技术细节是非常必要的。
- en: Resistance required
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所需的电阻
- en: An LED is just a special form of diode. It is a one-way street for electricity,
    that is, the current is only allowed to travel in one predefined way. Also, caution
    must be taken while connecting an LED; if it is connected in the wrong direction,
    no current will flow at all, thus emitting no light. The other way around, however,
    is more interesting.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: LED只是一种特殊形式的二极管。它是电流的单行道，也就是说，电流只能按照预定的方向流动。而且，在连接LED时必须小心；如果它连接的方向错误，电流将无法流动，因而不会发光。然而，反过来就更有意思了。
- en: 'Let us examine what happens when an LED is connected in the correct direction.
    Once a certain threshold voltage is supplied, read the forward voltage, the diode
    starts conducting, and the LED emits light. As for the current flowing through
    the diode, things look a little different. A diode will conduct all the current
    that is supplied to it. Different kinds of diodes serve different purposes in
    the electric design that they are used; in the case of LEDs, the purpose is often
    to emit light. These types of diodes often can only sustain a very small amount
    of current to flow through them, usually in the milliampere range. A resistor,
    as the name suggests, restricts the flow of the current going through it and thus
    is used for regulation of current, as depicted in the following diagram:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看当LED以正确方向连接时会发生什么。一旦提供了某个阈值电压，读取正向电压，二极管开始导通，LED发光。至于流经二极管的电流，情况看起来有些不同。二极管将导通供给它的所有电流。不同类型的二极管在它们所用的电气设计中有不同的用途；在LED的情况下，目的通常是发光。这些类型的二极管通常只能通过非常少量的电流，通常在毫安级别。正如其名称所示，电阻限制通过它的电流流动，因此用于电流的调节，如下图所示：
- en: '![Resistance required](img/1572OS_08_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![所需电阻](img/1572OS_08_01.jpg)'
- en: 'There are plenty websites that can help in calculating the correct resistance
    for a given voltage and current; the math behind it is not very complex. Ohm''s
    law is the common formula used to calculate resistances. It is represented as
    follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多网站可以帮助计算给定电压和电流的正确电阻；其背后的数学并不复杂。欧姆定律是用来计算电阻的常见公式。它表示如下：
- en: '![Resistance required](img/1572OS_08_07.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![所需电阻](img/1572OS_08_07.jpg)'
- en: 'And:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 和：
- en: '![Resistance required](img/1572OS_08_08.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![所需电阻](img/1572OS_08_08.jpg)'
- en: 'To calculate the resistance, ![Resistance required](img/1572OS_08_09.jpg),
    the voltage, ![Resistance required](img/1572OS_08_10.jpg), needs to be divided
    by the current ![Resistance required](img/1572OS_08_11.jpg). Let us understand
    how we determine the required voltage. For this, the diode''s forward voltage
    is subtracted from the available voltage. This produces the following variant
    of Ohm''s law:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算电阻，![所需电阻](img/1572OS_08_09.jpg)，需要除以电流![所需电阻](img/1572OS_08_10.jpg)。让我们了解如何确定所需的电压。为此，从可用电压中减去二极管的正向电压。这产生了下面这种形式的欧姆定律：
- en: '![Resistance required](img/1572OS_08_12.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![所需电阻](img/1572OS_08_12.jpg)'
- en: 'Let us assume that our voltage source is 3.0 volt and the forward voltage of
    the diode is 1.2 volt. Suppose the required current for this example is 30 milliampere,
    then filling in these values in Ohm''s law yields the following result:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的电压源是3.0伏特，二极管的正向电压是1.2伏特。假设本例所需的电流为30毫安，那么在欧姆定律中填入这些值可得到以下结果：
- en: 'From this little bit of math, we understand that a resistance of 60 Ohm is
    required to make the LED glow without trying to consume all the available current.
    A resistor of 60 Ohm, however, might be hard to find, and only two options are
    available. Connect several resistors in series, one after another, to obtain the
    required value, or find a resistor that is reasonably close in value, such as
    68 Ohm. Rearranging Ohm''s law and filling it in yields 26.5 milliampere of current
    flowing through the LED. This should generally be enough to light up the LED.
    This calculation can be seen in the following formula:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从这点小数学中，我们了解到需要60欧姆的电阻来使LED发光，而不会试图消耗所有可用电流。然而，60欧姆的电阻可能很难找到，只有两个选择。连接几个电阻以串联方式一个接一个地获得所需值，或找到一个接近值的电阻，比如68欧姆。重新排列欧姆定律并填入值可得到26.5毫安的电流流过LED。这通常足以点亮LED。这个计算可以在下面的公式中看到：
- en: '![Resistance required](img/1572OS_08_13.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![所需电阻](img/1572OS_08_13.jpg)'
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Using a resistor to limit the current flowing through an LED is not the most
    power-efficient method of lighting up an LED, but is very common and the simplest
    method. Ideally, a constant current supply is recommended, which would no longer
    require a resistor. After all, the maximum available current to the LED is what
    it would like to receive in the first place. While out of the scope of this book,
    it is a good exercise, to learn more about constant current power supplies and
    driving LEDs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用电阻限制LED流过的电流不是点亮LED的最节能方法，但它是非常常见且最简单的方法。理想情况下，推荐使用恒流电源，这样就不再需要电阻。毕竟，LED所能接受的最大电流本来就是它想要接收的电流。虽然这超出了本书的范围，但学习恒流电源和驱动LED是一个很好的练习。
- en: Sinking and sourcing
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 吸收与输出
- en: 'To connect a device to a GPIO, it would be ideal if the GPIO can deliver the
    correct voltage and current. Unfortunately, this rarely is the case. The voltage
    supplied by a pin is often either the supply voltage or the I/O voltage, both
    of which are input voltages to the chip. In the case of the Allwinner A series
    of chips, this will be 3.3 volt. The amount of current a GPIO can deliver or absorb
    is limited. Supplying current, or sourcing, as it is called, can vary from 10
    milliampere to 40 milliampere. The amount of current a pin can source is configured
    in the FEX file, which is explained in more detail in [Appendix C](apc.html "Appendix C. The
    FEX Configuration File"), *The FEX Configuration File*. The opposite of sourcing
    is sinking, but before that is covered, let us first examine the following diagram
    where an LED is connected directly to a GPIO:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要将设备连接到GPIO，理想情况下，GPIO应该能够提供正确的电压和电流。不幸的是，这种情况很少发生。引脚提供的电压通常是供电电压或I/O电压，这两者都是芯片的输入电压。在全志A系列芯片的情况下，这将是3.3伏。GPIO能够提供或吸收的电流是有限的。供电电流或输出电流（通常称为sourcing）可以从10毫安到40毫安不等。引脚可以提供的电流量在FEX文件中配置，详细内容请参见[附录C](apc.html
    "附录C. FEX配置文件")，*FEX配置文件*。输出电流的反义是吸收电流，但在介绍这一点之前，让我们先看看下图，其中一个LED直接连接到GPIO。
- en: '![Sinking and sourcing](img/1572OS_08_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![吸收与输出](img/1572OS_08_02.jpg)'
- en: 'In the preceding diagram, it is quite obvious that the GPIO pin supplies the
    voltage and the current flows through the diode into the ground. The GPIO is the
    "source" of the current. The opposite is possible too; the GPIO absorbs or sinks
    the current, as shown in the following diagram:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，很明显GPIO引脚提供了电压，电流通过二极管流入地面。GPIO是电流的“源”。相反的情况也是可能的；GPIO吸收或导入电流，如下图所示：
- en: '![Sinking and sourcing](img/1572OS_08_03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![吸收与输出](img/1572OS_08_03.jpg)'
- en: In the preceding diagram, the diode gets supplied with a voltage and current
    from a power source; in electronics, it is often called VCC. The current then
    flows as before through the diode and through the resistor, and is then absorbed
    by the GPIO. The GPIO "sinks" the current. While this second method works just
    as well as the first, there are a few things to notice. The power source needs
    to supply an appropriate voltage, or the GPIO can get overloaded and burn up parts
    or even the whole chip. On the software side, the pin will function in the opposite
    way; when the GPIO is high, the voltage is the same as that of VCC and thus no
    current flows. If the pin is set to low, the voltage can now flow.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，二极管由电源提供电压和电流；在电子学中，它通常被称为VCC。然后，电流像之前一样流经二极管和电阻，最后被GPIO吸收。GPIO“吸收”了电流。虽然这种第二种方法和第一种方法一样有效，但有一些需要注意的地方。电源需要提供适当的电压，否则GPIO可能会过载，烧坏部件甚至整个芯片。在软件方面，GPIO引脚将以相反的方式工作；当GPIO为高电平时，电压与VCC相同，因此没有电流流动。如果引脚设置为低电平，电压就可以流动。
- en: Tip
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: An observant reader will probably notice that if the GPIO is set up to a source
    of 30 milliampere, a resistor is not even needed. While it is bad practice, it
    is still possible; however, it should never be done in a final design.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个细心的读者可能会注意到，如果GPIO被设置为提供30毫安的电流，那么根本不需要电阻。虽然这是不推荐的做法，但它仍然是可能的；然而，在最终设计中绝对不应采用这种方法。
- en: Amplifying the voltage and current
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放大电压和电流
- en: 'All the preceding methods work only if a small amount of current is required.
    What do you do when there is a higher current demanded? In this case, a simple
    transistor is used. A transistor can be thought of like a valve on a water pipe.
    Normally, the valve is closed and no water is allowed to flow. When current is
    applied to the base **B** of the transistor, the valve slowly starts to open and
    conduct current from the collector **C** to the emitter **E**. The flow of current
    is proportional to the current applied to the base, as a transistor is by nature
    a current amplifier. In addition to that, the current applied to the base is also
    added to the output of the emitter, as shown in the following diagram:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前述方法仅适用于需要小量电流的情况。那么，当需求较高电流时该怎么办呢？在这种情况下，会使用一个简单的晶体管。晶体管可以被看作是水管上的阀门。通常，阀门是关闭的，不允许水流动。当电流施加到晶体管的基极
    **B** 时，阀门会慢慢打开，从集电极 **C** 到发射极 **E** 导通电流。电流的流动与施加到基极的电流成正比，因为晶体管本质上是一个电流放大器。此外，施加到基极的电流也会加到发射极的输出上，如下图所示：
- en: '![Amplifying the voltage and current](img/1572OS_08_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![放大电压和电流](img/1572OS_08_04.jpg)'
- en: The voltage supplied via the VCC is determined by the specification of the transistor,
    not the GPIO. It is easily possible that 24 volt is regulated via the transistor,
    assuming the transistor allows this, while controlling it via the 3.3 volt of
    the GPIO. In essence, this is a voltage amplifier, and a transistor is most commonly
    used for this effect.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 VCC 提供的电压由晶体管的规格决定，而不是由 GPIO 决定。假设晶体管允许，24 伏特的电压可以通过晶体管调节，同时通过 GPIO 的 3.3
    伏特进行控制。本质上，这是一个电压放大器，晶体管通常用于实现这个效果。
- en: 'There are two kinds of transistors: PNP and NPN. The general working of an
    NPN transistor was explained in the previous paragraph. The PNP transistor works
    the other way around, meaning it conducts current by default when there is no
    current applied to the base of the transistor via the GPIO. If current is applied
    to the transistors'' base, the transistor will stop conducting current.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的晶体管：PNP 和 NPN。上一段已经解释了 NPN 晶体管的基本工作原理。PNP 晶体管的工作方式恰好相反，意味着当没有电流通过 GPIO
    输入到晶体管基极时，它会默认导通电流。如果电流被施加到晶体管的基极，晶体管将停止导电。
- en: Controlling pins from software
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从软件控制引脚
- en: 'There are several ways to control a GPIO from within Linux. From within the
    kernel through a driver or from one of the many programming languages, such as
    a C program or a Python script. The quickest and most basic way, however, is right
    from the console. This is assuming, of course, that the driver to control the
    GPIOs is loaded as a module or compiled into the kernel. Refer to [Chapter 7](ch07.html
    "Chapter 7. Compiling the Bootloader and Kernel Using a BSP"), *Compiling the
    Bootloader and Kernel Using a BSP*, to recompile a kernel and to add the GPIO
    driver. Depending on the kernel version used, it is called the *GPIO support for
    the sunxi platform* and can be found under **GPIO** in the **Device Drivers**
    option. Depending on which GPIO is used, the FEX file will need to be modified
    to configure the GPIO pin. To set up one pin as output GPIO, the following code
    snippet can be used:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以从 Linux 内部控制 GPIO。可以通过驱动程序从内核内部控制，或者通过许多编程语言之一，例如 C 程序或 Python 脚本。不过，最快最基本的方法是直接从控制台操作。当然，这假设用于控制
    GPIO 的驱动程序已经作为模块加载或编译进内核中。请参考[第7章](ch07.html "第7章 编译引导加载程序和内核使用BSP")，*使用 BSP 编译引导加载程序和内核*，重新编译内核并添加
    GPIO 驱动程序。根据使用的内核版本，它被称为*sunxi平台的GPIO支持*，并可以在**设备驱动程序**选项中的**GPIO**下找到。根据使用的 GPIO，FEX
    文件需要修改以配置 GPIO 引脚。要将某个引脚设置为输出 GPIO，可以使用以下代码片段：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If everything has been set up appropriately, the GPIO pins can be toggled via
    the filesystem, for example, writing `1` into `pb03` makes the GPIO high, as shown
    here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切都已正确设置，可以通过文件系统切换 GPIO 引脚，例如，写入 `1` 到 `pb03` 会使 GPIO 变为高电平，如下所示：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Similarly, writing `0` makes it low again.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，写入 `0` 会使其再次变为低电平。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Not only is a transistor required on higher current loads from one pin, often
    there is a maximum current that can be sourced from all the combined GPIOs. Thus,
    the best method to control things is to always use a transistor.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅在单个引脚的高电流负载下需要晶体管，通常所有 GPIO 总和能提供的最大电流也是有限的。因此，控制事物的最佳方法是始终使用晶体管。
- en: Pulling up and pulling down
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上拉和下拉
- en: A GPIO that is configured as an input simply takes a measurement of the voltage
    applied to it. If it is above a certain threshold, it is considered to be high,
    or `1`. If it is below a certain threshold, it is considered as `0`. In the case
    of the Allwinner A series, generally speaking, everything above 2.5 volt is considered
    high, and everything below 0.8 volt is `0`. Anything in between is undefined and
    could be either `0` or `1`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 配置为输入的 GPIO 仅仅是测量施加到其上的电压。如果电压高于某一阈值，则被认为是高电平或 `1`。如果电压低于某一阈值，则被认为是 `0`。以 Allwinner
    A 系列为例，一般来说，任何大于 2.5 伏的电压都视为高电平，小于 0.8 伏的电压视为 `0`。介于两者之间的电压则未定义，可能是 `0` 或 `1`。
- en: 'With that knowledge at hand, it is easy to just have a three-way switch and
    connect it to either the ground or the 3.3 volt. The following diagram illustrates
    a switch directly connected to a GPIO:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些知识，使用一个三位开关并将其连接到地面或 3.3 伏电源就变得很容易。以下图示展示了一个直接连接到 GPIO 的开关：
- en: '![Pulling up and pulling down](img/1572OS_08_05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![上拉与下拉](img/1572OS_08_05.jpg)'
- en: 'There are a few caveats to consider. There is a transition phase, where the
    switch moves from one state to the other and the voltage could be anything between
    3.3 volt and 0 volt. Additionally, the maximum amount of current that a pin can
    source will flow into the GPIO, making a very inefficient design and could even
    damage the chip. Both issues can be addressed by connecting either state permanently
    to the GPIO via a resistor. If a resistor is used to permanently connect the VCC,
    it is called a pull-up resistor, as the resistor pulls the voltage up. If the
    resistor is used to pull the pin down to ground, it is called a pull-down resistor,
    as the resistor pulls the voltage down to ground. The following diagram demonstrates
    the usage of a pull-up resistor in conjunction with a switch:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意几个事项。存在一个过渡阶段，其中开关从一种状态切换到另一种状态，电压可能介于 3.3 伏和 0 伏之间。此外，一个引脚可以提供的最大电流将流入
    GPIO，导致设计效率低下，甚至可能损坏芯片。通过使用电阻将任何状态永久连接到 GPIO，这两个问题都可以得到解决。如果使用电阻将 VCC 永久连接，则称为上拉电阻，因为电阻将电压拉高。如果电阻用于将引脚拉到地面，则称为下拉电阻，因为电阻将电压拉低到地面。以下图示展示了上拉电阻与开关配合使用的情况：
- en: '![Pulling up and pulling down](img/1572OS_08_06.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![上拉与下拉](img/1572OS_08_06.jpg)'
- en: In this scenario, the GPIO will see the high voltage and interpret it as a logical
    `1`. When the switch is pressed, the current prefers to take the path of least
    resistance, and as the GPIO has a natural resistance internally, the ground is
    where all the current will go.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，GPIO 会看到高电压，并将其解释为逻辑 `1`。当按下开关时，电流会偏好沿着电阻最小的路径流动，由于 GPIO 内部自然有一定的电阻，电流最终会流向地面。
- en: If the positions of the switch and the resistor are swapped, a pull-down circuit
    is created. In such a scenario, by default the GPIO will see the low voltage and
    interpret it as a logical `0`. When the switch is pressed, the current will naturally
    flow to the ground and the GPIO interprets it as a logical `1`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果交换开关和电阻的位置，则会创建一个下拉电路。在这种情况下，GPIO 默认看到低电压，并将其解释为逻辑 `0`。当开关被按下时，电流将自然流向地面，GPIO
    将其解释为逻辑 `1`。
- en: In both cases, the resistor value needs to be calculated in much the same way
    as the resistor for the LED was. Ideally, the resistor will be as high as possible
    so that only a very limited amount of current can flow, thus not wasting any power.
    Choosing a resistor that is too high, however, results in too little current to
    flow, and thus the pin cannot sense the voltage.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，电阻值的计算方式与 LED 电阻的计算方式类似。理想情况下，电阻值应该尽可能高，这样只有极少量的电流能流动，从而不浪费电能。然而，选择一个过高的电阻会导致电流过小，GPIO
    无法感知电压。
- en: 'In both these cases of the Allwinner SoC, there is an internal pull-up or pull-down
    resistor available that can be configured via the FEX file. The following command
    can be used in this case:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种 Allwinner SoC 的情况中，都可以通过 FEX 文件配置内部的上拉或下拉电阻。此时可以使用以下命令：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For additional details, see [Appendix C](apc.html "Appendix C. The FEX Configuration
    File"), *The FEX Configuration File*. The choice of whether to use a pull-up resistor
    or a pull-down resistor depends on the project's requirements. Generally speaking,
    if the pin has to be read as `0` by default and changed to `1` when a button is
    pressed, a pull-down resistor is used. In practice, however, a pull-up resistor
    tends to be more power efficient and is commonly used.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多详细信息，请参见[附录C](apc.html "附录C. FEX配置文件")，*FEX配置文件*。是否使用上拉电阻或下拉电阻的选择取决于项目的需求。一般来说，如果引脚默认需要读取为`0`，并在按下按钮时更改为`1`，则使用下拉电阻。然而，实际上，上拉电阻通常更节能，因此更常用。
- en: Reading a switch
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取开关状态
- en: 'Reading the status of a switch is similar to writing to the LED. All the prerequisites
    apply equally. The only difference is that the GPIO is read via `cat`, rather
    than written via `echo`, as shown here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 读取开关的状态与写入LED类似。所有的先决条件都适用。唯一的区别是GPIO是通过`cat`来读取的，而不是通过`echo`来写入，如下所示：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using this knowledge, reading a button can be done from various programming
    languages in various forms.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这些知识，读取按钮可以通过多种编程语言以各种形式实现。
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A good exercise can be to write a simple script that reads the status of the
    button and makes the LED reflect this status. Both of the previous examples use
    the same pin as GPIO, so a second pin will need to be configured as GPIO if not
    already configured.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不错的练习是编写一个简单的脚本，读取按钮的状态，并使LED反映该状态。前面两个示例使用的是相同的GPIO引脚，因此如果尚未配置第二个引脚为GPIO，则需要配置一个新的引脚。
- en: From here on out, there are many more ways and methods to interact. There are
    **analog-to-digital converters** (**ADCs**) available to read an analog voltage,
    the **Serial Peripheral Interface** (**SPI**) bus and the **Inter-IC** (**I2C**)
    bus, also known as the **Two Wire Interface** (**TWI**), to connect a plethora
    of peripherals, each allowing wonderful inventions to be created. Since this is
    an introductory book, going into detail would require many more pages explaining
    the various techniques. But hopefully, an interest has been sparked in you to
    find resources to continue experimenting and working with Allwinner-based boards.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，有更多的方式和方法可以进行交互。有**模拟-数字转换器**（**ADC**）可用于读取模拟电压，**串行外设接口**（**SPI**）总线和**集成电路间总线**（**I2C**），也称为**双线接口**（**TWI**），可以连接大量外设，每种都能创造出精彩的发明。由于这是一本入门书籍，深入细节将需要更多的篇幅来解释各种技术。但希望它能激发你进一步寻找资源，继续实验并使用基于Allwinner的开发板。
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered some fundamental electronics, teaching the reader
    how to connect an LED and a switch. We also covered the most common pitfalls and
    best practices when interfacing with LED switches. Blinking an LED is considered
    as the Hello World of embedded development.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讲解了一些基本的电子学知识，教读者如何连接LED和开关。我们还讨论了与LED开关接口时最常见的陷阱和最佳实践。让LED闪烁被视为嵌入式开发的Hello
    World。

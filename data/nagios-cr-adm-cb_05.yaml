- en: Chapter 5. Monitoring Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 监控方法
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将涵盖以下内容：
- en: Monitoring PING for any host
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控任何主机的PING
- en: Monitoring SSH for any host
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控任何主机的SSH
- en: Checking an alternative SSH port
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查一个备用SSH端口
- en: Monitoring mail services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控邮件服务
- en: Monitoring web services
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控网页服务
- en: Checking that a website returns a given string
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查网站是否返回特定字符串
- en: Monitoring database services
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控数据库服务
- en: Monitoring the output of an SNMP query
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控SNMP查询的输出
- en: Monitoring a RAID or other hardware device
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控RAID或其他硬件设备
- en: Creating an SNMP OID to monitor
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个SNMP OID进行监控
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Nagios Core is best thought of as a monitoring framework that uses plugins to
    perform appropriate checks on hosts and services, and returns results about their
    states in a format that it understands and can use for sending notifications and
    keeping track of states on a long-term basis.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios Core最好被视为一个监控框架，利用插件对主机和服务进行适当的检查，并以其理解的格式返回状态结果，用于发送通知并长期跟踪状态。
- en: The design is quite flexible. As explained in [Chapter 2](ch02.html "Chapter 2. Working
    with Commands and Plugins"), *Working with Commands and Plugins*, Nagios Core
    can use as a plugin any command-line application that gives appropriate return
    values as defined in the Nagios Core header files, Perl library, or shell script.
    In turn, Nagios Core can be configured to use the same plugin in many different
    ways, taking advantage of any switch provided by the plugin to adjust its behavior,
    including providing metadata to it in the form of the values of Nagios Core macros,
    such as `$HOSTADDRESS$`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 设计相当灵活。如[第2章](ch02.html "第2章. 使用命令和插件")《使用命令和插件》中所述，*命令和插件使用*，Nagios Core可以将任何命令行应用程序用作插件，只要它返回的值符合Nagios
    Core头文件、Perl库或Shell脚本中定义的适当返回值。反过来，Nagios Core可以通过配置以多种方式使用相同的插件，利用插件提供的任何开关调整其行为，包括通过Nagios
    Core宏的值（如`$HOSTADDRESS$`）向其提供元数据。
- en: The collection of plugins available on the Nagios Exchange website at [http://exchange.nagios.org/](http://exchange.nagios.org/)
    is fairly large, and documenting all of them is well out of the scope of this
    book. However, some of the most useful plugins are included as part of the Nagios
    Plugins set, and are installed as part of the recommended quick start guides for
    Nagios Core at [http://nagios.sourceforge.net/docs/3_0/quickstart.html](http://nagios.sourceforge.net/docs/3_0/quickstart.html).
    They include programs to monitor very common network features in typical ways,
    such as monitoring basic network connectivity, web services, mail servers, and
    many others. The plugin site itself is at [http://nagiosplugins.org/](http://nagiosplugins.org/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios Exchange网站上可用的插件集合相当庞大，详细记录所有插件超出了本书的范围。然而，一些最有用的插件作为Nagios插件集的一部分被包含在内，并作为Nagios
    Core推荐快速入门指南的一部分进行安装，地址为[http://nagios.sourceforge.net/docs/3_0/quickstart.html](http://nagios.sourceforge.net/docs/3_0/quickstart.html)。这些插件包括用于以常见方式监控典型网络特征的程序，例如监控基础网络连接、网页服务、邮件服务器等。插件网站本身的网址是[http://nagiosplugins.org/](http://nagiosplugins.org/)。
- en: This chapter will demonstrate the usage of some of the most useful components
    of this plugin set, which it assumes you have already installed. The focus will
    be on monitoring tasks that will be relevant to most or even all networks of various
    sizes, hopefully bringing the reader well past the point of thinking of Nagios
    Core as merely a process to send PING requests. The last few recipes will show
    how you can use the **Simple Network Management Protocol** (**SNMP**) as a method
    for checking any generic network service or system property that may not be covered
    by the standard Nagios Plugins set.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将演示此插件集一些最有用组件的使用方法，假设你已经安装了这些插件。重点将放在监控任务上，这些任务与大多数或甚至所有不同规模的网络相关，旨在帮助读者不再仅仅将Nagios
    Core视为一个发送PING请求的过程。最后几节将展示如何使用**简单网络管理协议**（**SNMP**）作为检查任何通用网络服务或系统属性的方法，这些可能并不在标准的Nagios插件集中涵盖。
- en: Monitoring PING for any host
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控任何主机的PING
- en: In this recipe, we'll learn how to set up PING monitoring for a host. We'll
    use the `check_ping` plugin, and its command of the same name, to send `ICMP`
    `ECHO` requests to a host. We'll use this as a simple diagnostic check to make
    sure that the host's network stack is responding in a consistent and timely fashion,
    in much the same way as an administrator might use the `ping` command interactively
    to check the same properties.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何为主机设置PING监控。我们将使用`check_ping`插件及其同名命令，向主机发送`ICMP` `ECHO`请求。我们将这作为一个简单的诊断检查，确保主机的网络栈以一致和及时的方式响应，就像管理员可能会使用`ping`命令来检查相同的属性一样。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a Nagios Core 3.0 or newer server with at least one host configured
    already. We'll use the example of `corinth.naginet`, a host defined in its own
    file. You should also understand the basics of how hosts and services relate,
    which is covered in the recipes of [Chapter 1](ch01.html "Chapter 1. Understanding
    Hosts, Services, and Contacts"), *Understanding Hosts, Services, and Contacts*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经有一个Nagios Core 3.0或更高版本的服务器，并且至少已经配置了一个主机。我们将使用`corinth.naginet`的例子，它是一个在独立文件中定义的主机。你还应该理解主机和服务之间的基本关系，这在[第1章](ch01.html
    "第1章. 理解主机、服务和联系人")，*理解主机、服务和联系人*一节中有详细介绍。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can add a new PING service check to our existing host as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照如下方式，为现有主机添加一个新的PING服务检查：
- en: Change to the objects configuration directory for Nagios Core. The default path
    is `/usr/local/nagios/etc/objects`. If you've put the definition for your host
    in a different file, then move to its directory instead.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改为Nagios Core的对象配置目录。默认路径是`/usr/local/nagios/etc/objects`。如果你将主机的定义放在了不同的文件中，请转到该目录。
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Edit the file containing the definition for the host. The host definition might
    look similar to the following code snippet:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含主机定义的文件。主机定义可能类似于以下代码片段：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Beneath the definition for the host, place a service definition referring to
    `check_ping`. You may like to use the `generic-service` template, as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机定义下方，放置一个引用`check_ping`的服务定义。你可以使用`generic-service`模板，如下所示：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重启Nagios Core服务器：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With this done, a new service check will start taking place, with the appropriate
    contacts and contact groups notified when:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，新的服务检查将开始运行，并且当发生以下情况时，相关联系人和联系人组将收到通知：
- en: The **Round Trip Time** (**RTT**) of the request and its response exceeds 200ms,
    or more than 40 percent of the packets are lost during the check; a `CRITICAL`
    notification is fired for the service in either case.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果请求及其响应的**往返时间**（**RTT**）超过了200ms，或者在检查过程中丢失了超过40%的数据包；无论哪种情况，都会为该服务触发一个`CRITICAL`通知。
- en: If a `CRITICAL` notification was not fired, and the RTT of the request and its
    response exceeds 100ms, or more than 20 percent of the packets are lost during
    the check; in this case, a `WARNING` notification is fired for the service.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有触发`CRITICAL`通知，并且请求及其响应的RTT超过了100ms，或者在检查过程中丢失了超过20%的数据包；此时，会为该服务触发一个`WARNING`通知。
- en: The information about the thresholds is given in the definition for the `check_command`
    directive, as arguments to the `check_ping` command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有关阈值的信息将在`check_ping`命令的`check_command`指令定义中作为参数给出。
- en: More information about this service will also be visible in the web interface,
    under the **Services** section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 关于该服务的更多信息也会在Web界面的**服务**部分显示。
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The configuration added in the preceding section defines a new service check
    on the existing `corinth.naginet` host to check that the RTT and the packet loss
    for an `ICMP` `ECHO` request and response are within acceptable limits.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节中添加的配置定义了一个新的服务检查，用于检查现有的`corinth.naginet`主机，确保`ICMP` `ECHO`请求及其响应的RTT和丢包率在可接受的范围内。
- en: For most network configurations, it may well be the case that the host itself
    is also being checked by `check_ping`, by way of the command `check-host-alive`.
    The difference is that the thresholds for the RTT and packet loss are intentionally
    set very high for this command, because it is intended to establish whether the
    host is up or down at all, not how responsive it is.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数网络配置，主机本身很可能也会通过命令`check-host-alive`被`check_ping`检查。不同之处在于，这个命令的RTT和丢包的阈值通常设置得非常高，因为它的目的是判断主机是否在线，而不是主机的响应速度。
- en: There's more...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In networks where most of the hosts are configured to respond to `ICMP` `ECHO`
    requests, it could perhaps be worthwhile to configure service checks on all of
    the hosts in a configuration. This can be done using the `*` wildcard when defining
    `host_name` for the service:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数主机都配置为响应`ICMP` `ECHO`请求的网络中，可能值得对配置中的所有主机配置服务检查。可以使用`*`通配符在定义`host_name`时实现这一点：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will apply the same check, with a `service_description` directive of `PING`,
    to all of the hosts configured in the database. This method will save the hassle
    of configuring a service separately for all the hosts.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用`PING`的`service_description`指令，应用相同的检查到数据库中配置的所有主机。这种方法可以避免为所有主机单独配置服务的麻烦。
- en: 'If some of the hosts in a network do not respond to PING, it may be more appropriate
    to place the ones that do in a hostgroup, perhaps named something such as `icmp`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网络中的某些主机未响应PING，则可能更合适将响应的主机放入一个主机组中，主机组的名称可以是`icmp`之类的：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The single service can then be applied to all the hosts in that group, using
    the `hostgroup_name` directive in the `service` definition:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，单个服务可以应用于该组中的所有主机，使用`service`定义中的`hostgroup_name`指令：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It's generally a good idea to have network hosts respond to ICMP messages wherever
    possible, in order to comply with the recommendations in RFC1122 and to ease debugging.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，尽可能让网络主机响应ICMP消息是一个好主意，这样可以遵循RFC1122中的建议并简化调试过程。
- en: Finally, note that the thresholds for the RTT and the packet loss are not fixed;
    in fact, they're defined in the service definition, in the `check_command` line.
    For hosts that have higher latency, perhaps due to network load or topology, it
    may be appropriate to adjust these thresholds, which is covered in the *Changing
    thresholds for ping RTT and packet loss* recipe in [Chapter 3](ch03.html "Chapter 3. Working
    with Checks and States"), *Working with Checks and States*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，注意RTT和丢包的阈值不是固定的；事实上，它们是在服务定义中的`check_command`行中定义的。对于那些由于网络负载或拓扑导致延迟较高的主机，可能需要调整这些阈值，具体内容可以参考[第3章](ch03.html
    "第3章. 工作与检查和状态")中的*更改ping RTT和丢包阈值*的食谱，*工作与检查和状态*。
- en: See also
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating a new host*, *Creating a new service*, and *Creating a new hostgroup*
    recipes in [Chapter 1](ch01.html "Chapter 1. Understanding Hosts, Services, and
    Contacts"), *Understanding Hosts, Services, and Contacts*
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. 理解主机、服务和联系人")中，*创建新主机*、*创建新服务*和*创建新主机组*的示例，*理解主机、服务和联系人*。
- en: The *Using an alternative check command* recipe in [Chapter 2](ch02.html "Chapter 2. Working
    with Commands and Plugins"), *Working with Commands and Plugins*
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章. 工作与命令和插件")中，*使用替代检查命令*的食谱，*工作与命令和插件*。
- en: The *Changing thresholds for ping RTT and packet loss* recipe in [Chapter 3](ch03.html
    "Chapter 3. Working with Checks and States"), *Working with Checks and States*
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章. 工作与检查和状态")中，*更改ping RTT和丢包阈值*的食谱，*工作与检查和状态*。
- en: Monitoring SSH for any host
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控任意主机上的SSH
- en: In this recipe, we'll learn how to check that the SSH daemon on a remote host
    responds to requests, using the `check_ssh` plugin, and the command of the same
    name. This will allow us to be notified as soon as there are problems connecting
    to the SSH service.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何使用`check_ssh`插件及其同名命令检查远程主机上的SSH守护进程是否响应请求。这将使我们在连接到SSH服务时遇到问题时，能够及时收到通知。
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a Nagios Core 3.0 or newer server with at least one host configured
    already. We'll use the example of `troy.naginet`, a host defined in its own file.
    You should also understand the basics of how hosts and services relate, which
    is covered in the recipes of [Chapter 1](ch01.html "Chapter 1. Understanding Hosts,
    Services, and Contacts"), *Understanding Hosts, Services, and Contacts*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该有一个Nagios Core 3.0或更新版本的服务器，并且已经配置了至少一个主机。我们将使用` troy.naginet`这个例子，主机定义在其自己的文件中。您还应该了解主机和服务之间的基本关系，具体内容可以参考[第1章](ch01.html
    "第1章. 理解主机、服务和联系人")中的食谱，*理解主机、服务和联系人*。
- en: 'It may be a good idea to first verify that the host for which you want to add
    monitoring is presently running the SSH service that requires checking. This can
    be done by running the `ssh` client to make a connection to the host:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先验证您要添加监控的主机当前是否正在运行需要检查的SSH服务可能是个好主意。可以通过运行`ssh`客户端连接到主机来进行验证：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We should also check that the plugin itself will return the result required
    when run against the applicable host, as the `nagios` user:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应检查插件本身在作为`nagios`用户运行时是否返回所需的结果。
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you're unable to get a positive response from the SSH service on the target
    machine, even if you're sure it's running, then this could perhaps be a symptom
    of unrelated connectivity or filtering problems. We may, for example, need to
    add the monitoring server on which Nagios Core is running to the whitelist for
    SSH (normally TCP destination port `22`) on any applicable firewalls or routers.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法从目标机器上的SSH服务获得正面响应，即使你确定它正在运行，这可能是与连接性或过滤问题无关的症状。例如，我们可能需要将运行Nagios Core的监控服务器添加到任何适用防火墙或路由器的SSH（通常是TCP目标端口`22`）白名单中。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can add a new SSH service check to our existing host as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式将新的SSH服务检查添加到现有主机：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Nagios Core的`objects`配置目录。默认路径是`/usr/local/nagios/etc/objects`。如果你将主机定义放在了其他文件中，则应转到该文件所在目录。
- en: '[PRE9]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Edit the file containing the definition for the host. The host definition might
    look similar to the following code snippet:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含主机定义的文件。主机定义可能类似于以下代码片段：
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Beneath the definition for the host, place a service definition referring to
    `check_ssh`. It may help to use the `generic-service` template or another suitable
    template, as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机定义下方，放置一个服务定义，引用`check_ssh`。使用`generic-service`模板或其他合适的模板可能会有所帮助，如下所示：
- en: '[PRE11]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重新启动Nagios Core服务器：
- en: '[PRE12]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With this done, a new service check will start taking place, with the appropriate
    contacts and contact groups notified when an attempt to connect to the SSH server
    fails. The service check will be visible in the web interface, on the **Services**
    page.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，将开始进行新的服务检查，当尝试连接到SSH服务器失败时，相关联系人和联系人组将收到通知。服务检查将在Web界面上的**服务**页面中显示。
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The preceding configuration defines a new service with a `service_description`
    of `SSH` for the existing `troy.naginet` host, using the values in the `generic-service`
    template and additionally defining a `check_command` directive of `check_ssh`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置定义了一个新的服务，其`service_description`为`SSH`，适用于现有的`troy.naginet`主机，使用`generic-service`模板中的值，并另外定义了`check_command`指令`check_ssh`。
- en: This means that in addition to checking whether the host itself is up with `check-host-alive`,
    as done previously, Nagios Core will also check that the SSH service running on
    the host is working by attempting to make a connection with it. It will also notify
    the applicable contacts if there are any problems found with the service after
    the appropriate number of tests.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着除了之前检查主机是否启动的`check-host-alive`，Nagios Core还将检查运行在主机上的SSH服务是否正常工作，方法是尝试与其建立连接。如果在进行适当次数的测试后发现服务有问题，它还会通知相关联系人。
- en: 'For example, if the plugin finds that the host is accessible but not responding
    to client tests, then it might notify with the following text:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果插件发现主机可以访问但未响应客户端测试，则可能会通知如下文本：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that we don't need to actually supply credentials for the SSH check; the
    plugin simply ensures that the service is running and responding to connection
    attempts.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不需要为SSH检查提供凭证；插件仅确保服务正在运行并响应连接尝试。
- en: There's more...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'The definition for the `check_ssh` command warrants some inspection if we''re
    curious as to how the plugin is actually applied as a command, as defined in the
    QuickStart configuration in `/usr/local/nagios/etc/objects/commands.cfg`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对插件如何实际作为命令应用感到好奇，应该检查`check_ssh`命令的定义，这在`/usr/local/nagios/etc/objects/commands.cfg`的QuickStart配置中有定义：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This shows that the `check_ssh` command is configured to run the `check_ssh`
    binary file in `$USER1$`, a macro that normally expands to `/usr/local/nagios/libexec`,
    against the host address of the applicable server. It adds in any other arguments
    beforehand. We haven't used any arguments in this recipe, since we simply want
    to make a normal check of the SSH service on its default port.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明 `check_ssh` 命令已配置为在 `$USER1$` 中运行 `check_ssh` 二进制文件，该宏通常扩展为 `/usr/local/nagios/libexec`，并针对适用服务器的主机地址执行。它在之前添加任何其他参数。在本教程中我们没有使用任何参数，因为我们只是想对其默认端口上的
    SSH 服务进行常规检查。
- en: This check should work with most SSH2 compliant servers, most notably including
    the popular **OpenSSH** server.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此检查应适用于大多数符合 SSH2 标准的服务器，尤其是流行的 **OpenSSH** 服务器。
- en: 'Checking SSH accessibility is a common enough thing for servers that you may
    wish to set up an SSH service check to apply to a hostgroup, rather than merely
    to an individual host. For example, if you had a group called `ssh-servers` containing
    several servers that should be checked with a `check_ssh` call, then you could
    configure them all to be checked with one service definition using the `hostgroup_name`
    directive:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 SSH 可访问性是服务器上常见的任务，您可能希望设置一个 SSH 服务检查，应用于一个主机组，而不仅仅是单个主机。例如，如果您有一个名为 `ssh-servers`
    的组，其中包含多个服务器，这些服务器应使用 `check_ssh` 进行检查，那么您可以通过 `hostgroup_name` 指令配置它们，以便通过一个服务定义对它们进行检查：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This would apply the same service check to each host in the group, which makes
    the definition easier to update if the check needs to be changed or removed in
    future.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将相同的服务检查应用于组中的每个主机，这样，如果以后需要更改或删除检查，定义将更容易更新。
- en: Note that the `check_ssh` plugin is different from the `check_by_ssh` plugin,
    which is used to run checks on remote machines, much like NRPE.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`check_ssh` 插件与 `check_by_ssh` 插件不同，后者用于在远程机器上执行检查，类似于 NRPE。
- en: See also
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Checking an alternative SSH port* recipe in this chapter
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *检查替代 SSH 端口* 教程
- en: The *Creating a new host*, *Creating a new service*, and *Creating a new hostgroup*
    recipes in [Chapter 1](ch01.html "Chapter 1. Understanding Hosts, Services, and
    Contacts"), *Understanding Hosts, Services, and Contacts*
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第 1 章](ch01.html "第 1 章. 理解主机、服务和联系人")中，*创建新主机*、*创建新服务* 和 *创建新主机组* 的教程，*理解主机、服务和联系人*
- en: The *Using check_by_ssh with key authentication instead of NRPE* and *Monitoring
    local services on a remote machine with NRPE* recipes in [Chapter 6](ch06.html
    "Chapter 6. Enabling Remote Execution"), *Enabling Remote Execution*
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第 6 章](ch06.html "第 6 章. 启用远程执行")中，*使用 key 认证的 check_by_ssh 替代 NRPE* 和 *在远程机器上使用
    NRPE 监控本地服务* 的教程，*启用远程执行*
- en: Checking an alternative SSH port
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查替代 SSH 端口
- en: In this recipe, we'll learn how to deal with the common situation of a machine
    running an SSH daemon that is listening on an alternative port. So, a service
    definition that uses `check_ssh`, as used in the *Monitoring SSH for any host*
    recipe, fails because the plugin defaults to using the standard SSH TCP port number
    of 22.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何处理机器运行 SSH 守护进程且监听替代端口的常见情况。因此，使用 `check_ssh` 的服务定义，如 *监控任何主机的
    SSH* 教程中所示，由于插件默认使用标准 SSH TCP 端口号 22，因此会失败。
- en: This kind of setup is common in situations where an SSH server should not be
    open to the general public and is often employed as a "security by obscurity"
    method to reduce automated attacks against the server. The SSH daemon is therefore
    configured to listen on a different port, usually with a much higher number; administrators
    who need to use it are told what the port number is.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置在 SSH 服务器不应向公众开放的情况下非常常见，通常作为一种“通过模糊性提高安全性”的方法，用于减少对服务器的自动化攻击。因此，SSH 守护进程配置为监听其他端口，通常是更高的端口号；需要使用它的管理员会被告知端口号。
- en: We'll deal with this situation and monitor the service in Nagios Core, even
    though it's running on a non-standard port. We'll do this by defining a new command
    that checks SSH on a specified port number, and creating a service definition
    that uses that command. The command will accept the port number to check as an
    argument.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将处理这种情况，并在 Nagios Core 中监控该服务，即使它运行在非标准端口上。我们将通过定义一个新命令来检查指定端口上的 SSH，并创建一个使用该命令的服务定义。该命令将接受要检查的端口号作为参数。
- en: The principles here should generalize well to any other situation where checking
    an alternative port is necessary, and the Nagios Core plugin being used to make
    the check supports doing so on an alternative port.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的原则应当很好地适用于任何需要检查备用端口的情况，前提是用于执行检查的 Nagios Core 插件支持在替代端口上执行此操作。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a Nagios Core 3.0 or newer server with at least one host configured
    already. We'll use the example of `troy.naginet`, a host defined in its own file,
    and listening on the non-standard SSH port of `5022`. You should also understand
    the basics of how hosts and services relate, which is covered in the recipes of
    [Chapter 1](ch01.html "Chapter 1. Understanding Hosts, Services, and Contacts"),
    *Understanding Hosts, Services, and Contacts*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经配置好一个 Nagios Core 3.0 或更新版本的服务器，并且至少配置了一个主机。我们将以 `troy.naginet` 为例，它是一个在自己文件中定义的主机，监听非标准的
    SSH 端口 `5022`。你还应该了解主机和服务的基本关系，这部分内容在[第 1 章](ch01.html "Chapter 1. Understanding
    Hosts, Services, and Contacts")中有介绍，*理解主机、服务和联系人*。
- en: 'A good first step may be to verify that we''re able to access the SSH daemon
    from the monitoring server on the specified port. We can do this from the command
    line using the `ssh` client, specifying the port number with the `-p` option:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的第一步是验证我们是否能够从监控服务器访问指定端口上的 SSH 守护进程。我们可以使用 `ssh` 客户端从命令行进行验证，并通过 `-p` 选项指定端口号：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Alternatively, you can run the `check_ssh` plugin directly from the command
    line:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以直接从命令行运行 `check_ssh` 插件：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'We can set up a service check for SSH on a non-standard port as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式设置一个针对非标准端口的 SSH 服务检查：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Nagios Core 的 `objects` 配置目录。默认路径是 `/usr/local/nagios/etc/objects`。如果你将主机定义放在其他文件中，则需要转到该文件所在目录。
- en: '[PRE18]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Edit a suitable file containing command definitions, and find the definition
    for the `check_ssh` command. In the default installation, this file is `commands.cfg`.
    The `check_ssh` definition looks similar to the following code snippet:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑一个包含命令定义的合适文件，找到 `check_ssh` 命令的定义。在默认安装中，该文件是 `commands.cfg`。`check_ssh`
    的定义类似于以下代码片段：
- en: '[PRE19]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Beneath the `check_ssh` definition, add a new command definition as follows:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `check_ssh` 定义下方，添加一个新的命令定义，如下所示：
- en: '[PRE20]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Edit the file containing the definition for the host. The host definition might
    look similar to the following code snippet:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含主机定义的文件。主机定义可能类似于以下代码片段：
- en: '[PRE21]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Beneath the definition for the host, place a new service definition using our
    new command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机定义下方，使用我们的新命令添加一个新的服务定义：
- en: '[PRE22]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重启 Nagios Core 服务器：
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: With this done, Nagios Core will begin running service checks using the `check_ssh`
    plugin, but will use the alternative destination port `5022` for its connection
    attempts for the service, which has a `service_description` of `SSH_5022`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，Nagios Core 将开始使用 `check_ssh` 插件进行服务检查，但会在连接尝试时使用备用的目标端口 `5022`，其 `service_description`
    为 `SSH_5022`。
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: The configuration added in the preceding section has almost exactly the same
    end result as adding a default `check_ssh` service; the only difference is that
    a different port is checked in order to make the connection. We use the `check_ssh_altport`
    command to do this, which we also defined ourselves in a syntax very similar to
    the `check_ssh` definition.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 前面部分添加的配置几乎和添加一个默认的 `check_ssh` 服务完全相同，唯一的区别是检查的端口不同，以便建立连接。我们使用 `check_ssh_altport`
    命令来实现这一点，其语法与 `check_ssh` 定义非常相似。
- en: The difference is that the command accepts an argument which is used as a value
    for the `-p` option to the `check_ssh` plugin, to check the specified port number;
    in this case, TCP port `5022`, rather than the default of port `22`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 区别在于，该命令接受一个参数，该参数作为 `-p` 选项的值传递给 `check_ssh` 插件，用于检查指定的端口号；在此情况下是 TCP 端口 `5022`，而不是默认的端口
    `22`。
- en: There's more...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'Since arguments in Nagios Core can include spaces, we could also have defined
    the service check as follows, without having to define an extra command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Nagios Core 中的参数可以包含空格，我们也可以将服务检查定义如下，而无需额外定义命令：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This is because the `$ARG1$` macro representing the argument is still used in
    the original `check_ssh` command, but it needs to have the option included as
    well as its value. The difference is mainly one of preference, depending on which
    we feel is clearer and more maintainable. It may help to consider whether a well-named
    command could assist someone else reading our configuration in understanding what
    is meant.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 `$ARG1$` 宏表示的参数仍然在原始的 `check_ssh` 命令中使用，但它需要包括选项及其值。两者的主要区别在于偏好问题，取决于我们认为哪种方式更清晰和更易于维护。可以考虑一下是否使用一个命名明确的命令有助于其他人理解我们配置的含义。
- en: See also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Monitoring SSH for any host* recipe in this chapter
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *监控任何主机的 SSH* 配方
- en: The *Creating a new host* and *Creating a new service* recipes in [Chapter 1](ch01.html
    "Chapter 1. Understanding Hosts, Services, and Contacts"), *Understanding Hosts,
    Services, and Contacts*
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章：理解主机、服务和联系人")中的 *创建新主机* 和 *创建新服务* 配方，*理解主机、服务和联系人*'
- en: The *Creating a new command* recipe in [Chapter 2](ch02.html "Chapter 2. Working
    with Commands and Plugins"), *Working with Commands and Plugins*
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章：与命令和插件协作")中的 *创建新命令* 配方，*与命令和插件协作*'
- en: Monitoring mail services
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控邮件服务
- en: 'In this recipe, we''ll learn how to monitor three common mail services for
    a nominated host: **SMTP**, **POP**, and **IMAP**. We''ll also see how to use
    the same structure to include additional checks for secure, encrypted versions
    of each of these services: **SMTPS**, **POPS**, and **IMAPS**.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何监控指定主机的三项常见邮件服务：**SMTP**、**POP** 和 **IMAP**。我们还将了解如何使用相同的结构，为这些服务的加密版本添加额外的检查：**SMTPS**、**POPS**
    和 **IMAPS**。
- en: For simplicity, we'll assume in this recipe that all three of these services
    are running on the same host, but the procedure will generalize easily for the
    common case where there are designated servers for one or more of the preceding
    functions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化起见，我们假设在本示例中这三项服务都运行在同一主机上，但这个过程很容易推广到常见的情况，即为一个或多个先前提到的功能指定专用服务器。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a Nagios Core 3.0 or newer server with at least one host configured
    already. We'll use the example of `troy.naginet`, a host defined in its own file.
    You should also understand the basics of how hosts and services relate, which
    is covered in the recipes of [Chapter 1](ch01.html "Chapter 1. Understanding Hosts,
    Services, and Contacts"), *Understanding Hosts, Services, and Contacts*.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经配置了至少一台主机的 Nagios Core 3.0 或更新版本的服务器。我们将使用 `troy.naginet` 作为示例，这是在独立文件中定义的主机。你还应该了解主机和服务之间的基本关系，这在[第1章](ch01.html
    "第1章：理解主机、服务和联系人")，*理解主机、服务和联系人*中有涉及。
- en: 'Checking the connectivity for the required services on the target server is
    also a good idea, to make sure that the automated connections the monitoring server
    will be making on the appropriate protocols and ports will actually work as expected.
    For the plain unencrypted mail services, this could be done via **Telnet** to
    the appropriate ports. For SMTP:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 检查目标服务器上所需服务的连接性也是个好主意，以确保监控服务器将在适当的协议和端口上建立的自动连接能够按预期工作。对于未加密的邮件服务，可以通过 **Telnet**
    连接到相应的端口来完成检查。对于 SMTP：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For POP:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 POP：
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And for IMAP:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 IMAP：
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For secure services, one possibility for checking is using the `openssl` client.
    For SMTPS on its "classic" port number of 465:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于安全服务，检查的一种可能方式是使用 `openssl` 客户端。对于 SMTPS，其“经典”端口号为 465：
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'For POPS:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 POPS：
- en: '[PRE29]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'And for IMAPS:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 IMAPS：
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If you prefer, you could instead use a network scanner such as `nmap` to test
    whether the ports are open and responsive.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，也可以使用网络扫描工具如 `nmap` 来测试端口是否开放并响应。
- en: Once we've verified the connectivity for the mail services that we need, and
    also verified whether the host itself is being configured and checked in Nagios
    Core, we can add the appropriate service checks.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们验证了所需邮件服务的连接性，并且确认主机本身是否已在 Nagios Core 中配置并检查过，我们就可以添加适当的服务检查。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can add unencrypted mail service checks for SMTP, POP, and IMAP services
    on our host as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为主机添加未加密邮件服务的检查，包括 SMTP、POP 和 IMAP 服务，方法如下：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Nagios Core 的 `objects` 配置目录。默认路径是 `/usr/local/nagios/etc/objects`。如果你将主机定义放在了其他文件中，请转到该文件所在目录。
- en: '[PRE31]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Edit the file containing the definition for the host. The host definition might
    look similar to the following code snippet:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含主机定义的文件。主机定义可能类似于以下代码片段：
- en: '[PRE32]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Beneath the definition for the host, place three new service definitions, one
    for each of the appropriate mail services:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机定义下，放置三个新的服务定义，每个适用于一个相应的邮件服务：
- en: '[PRE33]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重新启动 Nagios Core 服务器：
- en: '[PRE34]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: With this done, three new service checks will start taking place, with the appropriate
    contacts and contact groups notified when an attempt to connect to any of the
    services fails. Details for these services will also become available in the **Services**
    section of the web interface.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，将开始进行三项新的服务检查，适当的联系人和联系组会在尝试连接任何服务失败时收到通知。这些服务的详细信息也将在网页界面的**服务**部分中显示。
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The configuration added in the preceding section adds three new service checks
    to the existing `marathon.naginet` host:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节中添加的配置将三项新的服务检查添加到现有的 `marathon.naginet` 主机：
- en: '`SMTP`, which uses the `check_smtp` command to open an SMTP session'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SMTP`，使用 `check_smtp` 命令打开 SMTP 会话'
- en: '`POP`, which uses the `check_pop` command to open a POP session'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POP`，使用 `check_pop` 命令打开 POP 会话'
- en: '`IMAP`, which uses the `check_imap` command to open an IMAP session'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IMAP`，使用 `check_imap` 命令打开 IMAP 会话'
- en: In all three cases, the connectivity and responsiveness of the service is checked,
    and determined to be `OK` if it returns appropriate values within an acceptable
    time frame.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三种情况下，都会检查服务的连接性和响应性，并在它返回适当值且在可接受时间范围内时判定为 `OK`。
- en: It's important to note that the configuration defined here doesn't actually
    send or receive any e-mail messages; it merely checks the basic connectivity of
    the service, and whether it answers simple requests. Therefore, just because the
    status is `OK` does not necessarily mean that e-mail messages are being correctly
    delivered; it could just mean that the services are responding.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，此处定义的配置并不实际发送或接收任何电子邮件；它仅检查服务的基本连接性，以及是否能响应简单的请求。因此，仅仅因为状态为 `OK` 并不意味着电子邮件消息被正确传递；它可能仅意味着服务在响应。
- en: There's more...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If it's necessary to check the secure SSL/TLS versions of each of these services,
    then the configuration is very similar but requires a little extra setup beforehand.
    This is because although plugins to check them are included in the Nagios Plugins
    setup, they are not configured to be used as commands. Note that this may well
    change in future versions of Nagios Core.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要检查这些服务的安全 SSL/TLS 版本，则配置非常相似，但需要事先进行一些额外设置。这是因为尽管 Nagios 插件中包含用于检查它们的插件，但它们并未被配置为作为命令使用。请注意，这一点在未来的
    Nagios Core 版本中可能会发生变化。
- en: 'To add the appropriate commands, the following stanzas could be added to the
    commands configuration file, normally `/usr/local/nagios/etc/objects/commands.cfg`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加适当的命令，可以将以下段落添加到命令配置文件中，通常是 `/usr/local/nagios/etc/objects/commands.cfg`：
- en: '[PRE35]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'With this done, the following service definitions can be added to the appropriate
    host, either replacing or supplementing the checks for the unsecured services.
    They are just the same as the unsecured versions, except that an `s` is added
    to the `service_description` and to `check_command`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，可以将以下服务定义添加到适当的主机中，既可以替换也可以补充未加密服务的检查。它们与未加密版本相同，只是将 `service_description`
    和 `check_command` 中添加了 `s`：
- en: '[PRE36]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Finally, note that if you are managing more than one mail server running one
    or more of the preceding services, then it's a good practice to apply the service
    to a hostgroup containing all the applicable hosts, rather than creating new service
    definitions for each one. See the *Running a service on all hosts in a group*
    recipe in [Chapter 1](ch01.html "Chapter 1. Understanding Hosts, Services, and
    Contacts"), *Understanding Hosts, Services, and Contacts* to learn how to do this.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，注意如果你管理着多台邮件服务器，并且这些服务器运行着上述服务中的一个或多个，那么最好将服务应用到包含所有适用主机的主机组，而不是为每个服务创建新的服务定义。请参阅[第
    1 章](ch01.html "第 1 章. 理解主机、服务和联系人")中的*在组内所有主机上运行服务*部分，了解如何操作。
- en: See also
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating a new host*, *Creating a new service*, *Running a service on all
    hosts in a group*, and *Creating a new hostgroup* recipes in [Chapter 1](ch01.html
    "Chapter 1. Understanding Hosts, Services, and Contacts"), *Understanding Hosts,
    Services, and Contacts*
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章：理解主机、服务和联系人")的*创建新主机*、*创建新服务*、*在组内的所有主机上运行服务*和*创建新主机组*等配方中，有涉及到这些内容。
- en: The *Creating a new command* recipe in [Chapter 2](ch02.html "Chapter 2. Working
    with Commands and Plugins"), *Working with Commands and Plugins*
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章：使用命令和插件")的*创建新命令*配方中介绍了如何操作。'
- en: Monitoring web services
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控网络服务
- en: In this recipe, we'll set up a service check to monitor the responsiveness of
    an HTTP and HTTPS server. We'll use the `check_http` command and the plugin of
    the same name provided in the Nagios Plugins set to make HTTP and HTTPS requests
    of a web server, to ensure that it returns an appropriate and timely response.
    This is useful in situations where it's required to check whether a website is
    still functioning, particularly if there are times when it comes under heavy load
    or suffers denial of service attacks.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将设置一个服务检查，用来监控 HTTP 和 HTTPS 服务器的响应性。我们将使用 `check_http` 命令及其在 Nagios
    插件集中提供的同名插件，向 web 服务器发起 HTTP 和 HTTPS 请求，以确保它返回适当且及时的响应。这在需要检查网站是否仍在正常运行的情况下非常有用，特别是当网站在承受高负载或遭遇拒绝服务攻击时。
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a Nagios Core 3.0 or newer server with at least one host configured
    already. We'll use the example of `sparta.naginet`, a host defined in its own
    file. You should also understand the basics of how hosts and services relate,
    which is covered in the recipes of [Chapter 1](ch01.html "Chapter 1. Understanding
    Hosts, Services, and Contacts"), *Understanding Hosts, Services, and Contacts*.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经有一个 Nagios Core 3.0 或更新版本的服务器，并且至少配置了一个主机。我们将使用 `sparta.naginet` 作为示例，这是一个在其自身文件中定义的主机。你还应该理解主机和服务之间的基本关系，这在[第1章](ch01.html
    "第1章：理解主机、服务和联系人")的*理解主机、服务和联系人*中有介绍。
- en: 'An appropriate first step is making sure that the services we intend to check
    are accessible from the monitoring server running Nagios Core. This can be done
    from the command line, using an HTTP client such as `curl` or `wget`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一个合适的第一步是确保我们打算检查的服务可以从运行 Nagios Core 的监控服务器访问。这可以通过命令行完成，使用如 `curl` 或 `wget`
    这样的 HTTP 客户端：
- en: '[PRE37]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `check_http` plugin binary could also be called directly to test this connectivity;
    we''d be hoping for an `HTTP` `OK` response, with a code of `200`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_http` 插件二进制文件也可以直接调用来测试连接性；我们期望收到一个 `HTTP` `OK` 响应，状态码为 `200`：'
- en: '[PRE38]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Optionally, we can check HTTPS the same way, adding the `-S` option for the
    plugin:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，我们也可以以相同的方式检查 HTTPS，只需要为插件添加 `-S` 选项：
- en: '[PRE39]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Both may require the installation of a default page to be served by the host,
    probably something such as `index.html` or `default.asp`, depending on the web
    server software.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者可能需要安装一个默认页面由主机提供服务，通常是像 `index.html` 或 `default.asp` 这样的文件，具体取决于使用的 web
    服务器软件。
- en: Once the HTTP connectivity to the host from the monitoring server is verified
    as working with appropriate responses, we can proceed to add our service check.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦验证了从监控服务器到主机的 HTTP 连接正常，并且收到了合适的响应，我们就可以继续添加我们的服务检查。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can add web service checks for our host as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式为主机添加 web 服务检查：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Nagios Core 的 `objects` 配置目录。默认路径为 `/usr/local/nagios/etc/objects`。如果你将主机定义放在了其他文件中，请转到相应的目录。
- en: '[PRE40]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Edit the file containing the definition for the host. The host definition might
    look similar to the following code snippet:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含主机定义的文件。主机定义可能类似于以下代码片段：
- en: '[PRE41]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Beneath the definition for the host, place a new service definition for the
    HTTP check:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机定义下方，放置一个新的服务定义来进行 HTTP 检查：
- en: '[PRE42]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If an HTTPS check is also needed, add an optional second service definition:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果还需要进行 HTTPS 检查，可以添加一个可选的第二个服务定义：
- en: '[PRE43]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重启 Nagios Core 服务器：
- en: '[PRE44]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: With this done, a new service called HTTP and optionally one called HTTPS will
    be added to the `sparta.naginet` host, and HTTP requests will be made from the
    server regularly, reporting if connectivity fails or a response comes back with
    an unexpected status. These services will both be visible in the **Services**
    section of the web interface.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，一个名为HTTP的新服务，以及一个可选的HTTPS服务，将会被添加到`sparta.naginet`主机中，并且服务器将定期发起HTTP请求，报告连接失败或返回意外状态的情况。这些服务将在Web界面的**服务**部分中可见。
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The configuration added in the preceding section uses `check_http` as a plugin
    to make scheduled requests of the `sparta.naginet` server. By default, the index
    page is requested, so the request takes the following form:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 前面部分中添加的配置使用`check_http`插件对`sparta.naginet`服务器进行定期请求。默认情况下，请求的是首页，因此请求的形式如下：
- en: '[PRE45]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The plugin awaits a response, and then returns a status based on the following
    criteria:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 插件等待响应，然后根据以下标准返回状态：
- en: Whether a well-formed HTTP response was received at all, within acceptable time
    bounds. If the response was too slow, it might raise a `CRITICAL` state when the
    plugin times out.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否在可接受的时间范围内收到了格式良好的HTTP响应。如果响应过慢，可能会在插件超时时引发`CRITICAL`状态。
- en: Whether the response code for the HTTP response was `200` `Found`, indicating
    that a document was identified and returned. A response code of `404` `Not` `Found`
    would prompt a `CRITICAL` state by default.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否收到HTTP响应的响应码为`200` `Found`，表示已找到并返回了一个文档。默认情况下，如果收到`404` `Not Found`的响应码，则会触发`CRITICAL`状态。
- en: 'Inspecting the command definition for the default `check_http` command in `/usr/local/nagios/etc/objects/commands.cfg`
    gives some insight into how it uses the plugin of the same name:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`/usr/local/nagios/etc/objects/commands.cfg`中默认`check_http`命令的定义，可以更好地了解它如何使用同名插件：
- en: '[PRE46]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This uses three Nagios Core macros:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了三个Nagios Core宏：
- en: '`$USER1$`: This expands to the directory in which the plugin scripts and binaries
    are kept; usually `/usr/local/nagios/libexec`.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$USER1$`：这表示插件脚本和二进制文件所在的目录；通常是`/usr/local/nagios/libexec`。'
- en: '`$HOSTADDRESS$`: This is the value for the `address` directive defined in the
    service''s associated host; in this case `10.0.128.21`.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$HOSTADDRESS$`：这是服务关联主机中定义的`address`指令的值；在本例中为`10.0.128.21`。'
- en: '`$ARG1$`: This is one extra argument, if defined by the command; it allows
    us to add the `-S` option to the `check_http` call in order to run an HTTPS check.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$ARG1$`：这是一个额外的参数，如果命令中定义了该参数；它允许我们在`check_http`调用中添加`-S`选项，以便进行HTTPS检查。'
- en: There's more...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There are a many other great switches available for the `check_http` plugin;
    a list of them is available by entering the command with no arguments:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_http`插件有很多其他非常有用的选项；通过输入没有参数的命令可以查看它们的列表：'
- en: '[PRE47]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: One particularly useful option here is the `-u` option, which allows us to request
    specific URLs other than the default index document from the server. This can
    be useful if we're in a situation that requires setting up checks for more than
    one page on a site, which can be a nice supplement to code unit testing when a
    site is deployed or updated.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特别有用的选项是`-u`选项，它允许我们从服务器请求除默认索引文档以外的特定URL。如果我们需要为站点上的多个页面设置检查，这个选项就非常有用，也可以作为代码单元测试的一个很好的补充，尤其是在站点部署或更新时。
- en: 'For example, if we wanted to check that three pages were returning `200` `Found`
    responses: `about.php`, `products.php`, and `contact.php`, then we could set up
    a new command similar to the following to check a specific page:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想检查三个页面是否返回`200` `Found`响应：`about.php`、`products.php`和`contact.php`，那么我们可以设置一个类似以下的命令来检查特定页面：
- en: '[PRE48]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This would allow us to make three service checks similar to the following,
    using the new command:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们使用新命令进行三个类似的服务检查，如下所示：
- en: '[PRE49]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: These service checks would run the same way as the one demonstrated in the recipe,
    except they would each request a specific page. Note the leading slashes on the
    URLs are required.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务检查的运行方式与食谱中展示的相同，唯一不同的是它们每个都会请求一个特定的页面。请注意，URL前面的斜杠是必需的。
- en: 'Similarly, the `-H` option allows you to specify hostnames, which is helpful
    on servers hosting more than one site. This could be done by setting up a command
    as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`-H`选项允许您指定主机名，这在托管多个站点的服务器上非常有用。可以通过如下配置命令来实现：
- en: '[PRE50]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This would allow you to check two sites on the same host, [http://www.naginet/](http://www.naginet/)
    and [http://dev.naginet/](http://dev.naginet/), in separate service checks:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许你检查同一主机上的两个站点，[http://www.naginet/](http://www.naginet/) 和 [http://dev.naginet/](http://dev.naginet/)，分别进行服务检查：
- en: '[PRE51]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: It's worth noting that the `check_http` request will show up in your server
    logs with its regular requests. If you're concerned about these distorted statistics
    or the appearance of unwanted values in reports, then it may be easiest to filter
    these out using its `User-Agent` header value, which includes the string `check_http`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`check_http`请求会与常规请求一起出现在服务器日志中。如果你担心这些扭曲的统计数据或报告中出现不需要的值，那么使用其`User-Agent`头部值过滤这些请求可能是最简单的办法，`User-Agent`中包含字符串`check_http`。
- en: See also
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Checking a website returns a given string* in this chapter
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*检查网站返回指定字符串*
- en: The *Creating a new host* and *Creating a new service* recipes in [Chapter 1](ch01.html
    "Chapter 1. Understanding Hosts, Services, and Contacts"), *Understanding Hosts,
    Services, and Contacts*
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。理解主机、服务和联系人")中的*创建新主机*和*创建新服务*教程，*理解主机、服务和联系人*'
- en: The *Creating a new command* and *Customizing an existing plugin* recipes in
    [Chapter 2](ch02.html "Chapter 2. Working with Commands and Plugins"), *Working
    with Commands and Plugins*
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。工作与命令和插件")中的*创建新命令*和*定制现有插件*教程，*工作与命令和插件*'
- en: Checking that a website returns a given string
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查网站是否返回指定字符串
- en: In this recipe, we'll build on the basic web service monitoring established
    in the *Monitoring web services* recipe in this chapter, and learn how to create
    a command that uses the `check_http` plugin to ensure that a particular string
    is included as part of an HTTP response.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将基于本章中*监控网页服务*教程中建立的基本网页服务监控，学习如何创建一个使用`check_http`插件的命令，以确保HTTP响应中包含特定字符串。
- en: By default, there's no Nagios Core command defined to use the plugin in this
    way, so the recipe will include defining a command before using it as part of
    a service check.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Nagios Core没有定义使用插件的命令，所以这个教程将包括在作为服务检查的一部分之前定义命令。
- en: This may be necessary if we're monitoring a website on a server that may not
    necessarily return a `404` `Not` `Found` or similar error that will flag a `WARNING`
    or `CRITICAL` state in Nagios; rather than merely checking if a document was found,
    we can check if it matches a string, to see if it resembles the particular document
    we expected.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在监控的服务器上的网站可能不会返回`404` `Not` `Found`或类似错误，这些错误会在Nagios中标记为`WARNING`或`CRITICAL`状态，那么这样做可能是必要的；与其单纯检查文档是否存在，我们可以检查其是否匹配某个字符串，以确认它是否符合我们预期的特定文档。
- en: This kind of setup is a nice complement to a suite of code unit tests for a
    website or web application.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置是网站或Web应用程序代码单元测试套件的一个很好的补充。
- en: Getting ready
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a Nagios Core 3.0 or newer server with at least one host configured
    already. We'll use the example of `sparta.naginet`, a host defined in its own
    file, and we'll check that it's returning the simple string, `naginet`, in its
    responses. You should also understand the basics of how hosts and services relate,
    which is covered in the recipes of [Chapter 1](ch01.html "Chapter 1. Understanding
    Hosts, Services, and Contacts"), *Understanding Hosts, Services, and Contacts*.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经有一个Nagios Core 3.0或更高版本的服务器，并且至少已经配置了一个主机。我们将使用`sparta.naginet`作为示例，该主机定义在自己的文件中，并且我们将检查它是否在响应中返回简单字符串`naginet`。你还应该理解主机和服务之间的基本关系，这在[第1章](ch01.html
    "第1章。理解主机、服务和联系人")，*理解主机、服务和联系人*的教程中有所涵盖。
- en: You should set up basic HTTP monitoring for the host first, as established in
    the *Checking web services* recipe in this chapter, to make sure that there is
    connectivity between the monitoring server and the host, and that requests and
    responses are both working correctly with appropriate error codes.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该先为主机设置基本的HTTP监控，如本章中的*检查网页服务*教程所述，以确保监控服务器与主机之间有连接，并且请求和响应都正常工作，并返回适当的错误码。
- en: How to do it...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can set up a service check that includes an HTTP response content check
    as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以设置一个包含HTTP响应内容检查的服务检查，如下所示：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Nagios Core的`objects`配置目录。默认路径是`/usr/local/nagios/etc/objects`。如果你将主机定义放在了其他文件中，则转到相应的目录。
- en: '[PRE52]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Edit a suitable file containing command definitions, and find the definition
    for the `check_http` command. In the QuickStart installation, this file is `commands.cfg`.
    The `check_http` definition looks similar to the following code snippet:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含命令定义的适当文件，并找到`check_http`命令的定义。在QuickStart安装中，该文件是`commands.cfg`。`check_http`定义类似于以下代码片段：
- en: '[PRE53]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Beneath the `check_http` definition, add a new command definition as follows:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`check_http`定义下方，添加一个新的命令定义，如下所示：
- en: '[PRE54]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Edit the file containing the definition for the host. The host definition might
    look similar to the following code snippet:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含主机定义的文件。主机定义可能类似于以下代码片段：
- en: '[PRE55]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Beneath the definition for the host and beneath any other checks that might
    use `check_http`, place a new service definition using our new command:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机的定义下方以及任何可能使用`check_http`的检查下方，使用我们的新命令放置一个新的服务定义：
- en: '[PRE56]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重启Nagios Core服务器：
- en: '[PRE57]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'With this done, Nagios Core should begin making HTTP requests to monitor the
    service as `check_http` normally does, except that it will only return an `OK`
    state if the content of the website includes the string `naginet`. Otherwise,
    it will generate an alert and flag the service as `CRITICAL`, with a message similar
    to the following:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，Nagios Core应开始像`check_http`一样发出HTTP请求以监控该服务，唯一不同的是，只有在网站内容包含`naginet`字符串时，才会返回`OK`状态。否则，它将生成警报，并将该服务标记为`CRITICAL`，消息类似如下：
- en: '[PRE58]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How it works...
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: One of the many options for `check_http` is `-s`, short for `--string` , which
    takes a single argument specifying a string that must occur in the content for
    the service check to return an `OK` state.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_http`的众多选项之一是`-s`，即`--string`的缩写，它接受一个指定的字符串作为参数，该字符串必须出现在内容中，才能使服务检查返回`OK`状态。'
- en: When the HTTP response is received, `check_http` examines the text in the response
    to see if it matches the string specified, on top of its usual behavior of flagging
    `WARNING` or `CRITICAL` states for connectivity or timeout problems.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 当收到HTTP响应时，`check_http`会检查响应中的文本，看看它是否与指定的字符串匹配，并且除了标记`WARNING`或`CRITICAL`状态用于连接或超时问题外，还会执行通常的行为。
- en: 'Note that in order to make this work, it was necessary to define a new command
    that uses the first argument (in this case the string `naginet`) as the value
    for the `-s` option to `check_http`. The full command line executed would look
    similar to the following command:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，为了使这个功能工作，有必要定义一个新的命令，使用第一个参数（在此例中是字符串`naginet`）作为`-s`选项传递给`check_http`。执行的完整命令行类似于以下命令：
- en: '[PRE59]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: There's more...
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'The `check_http` plugin allows considerably more than single string checks,
    if it''s necessary to test for the presence of a regular expression in the content.
    This can be done using the `-r` or `--regex` options. We could define a command
    to check for regular expressions as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_http`插件提供的功能远远超出了单个字符串检查，如果需要测试内容中是否存在正则表达式，可以使用`-r`或`--regex`选项。我们可以定义一个命令来检查正则表达式，如下所示：'
- en: '[PRE60]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'If it''s necessary to check that a particular regular expression doesn''t match
    the content, this is possible by adding the `--invert-regex` flag:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要检查某个特定的正则表达式是否不匹配内容，可以通过添加`--invert-regex`标志来实现：
- en: '[PRE61]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: A service check using this command would return `CRITICAL` if the response was
    found to match the pattern provided as the first argument to a `check_command`
    directive.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令进行的服务检查如果响应匹配作为`check_command`指令第一个参数提供的模式，将返回`CRITICAL`。
- en: Other similar options include `-e` or `--expect` , which allows specifying a
    comma-separated set of strings, at least one of which must match the first line
    of the header for the check to pass.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类似的选项包括`-e`或`--expect`，它允许指定一个由逗号分隔的字符串集，至少其中一个字符串必须与检查通过的头部的第一行匹配。
- en: See also
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Monitoring web services* recipe in this chapter
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*监控Web服务*示例
- en: The *Creating a new host* and *Creating a new service* recipes in [Chapter 1](ch01.html
    "Chapter 1. Understanding Hosts, Services, and Contacts"), *Understanding Hosts,
    Services, and Contacts*
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. 了解主机、服务和联系人")中的*创建新主机*和*创建新服务*示例，*了解主机、服务和联系人*'
- en: The *Creating a new command* and *Customizing an existing plugin* recipes in
    [Chapter 2](ch02.html "Chapter 2. Working with Commands and Plugins"), *Working
    with Commands and Plugins*
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第二章](ch02.html "第二章：命令和插件的使用")中的*创建新命令*和*自定义现有插件*食谱，*命令和插件的使用*。'
- en: Monitoring database services
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控数据库服务
- en: In this recipe, we'll learn how Nagios Core can be used to monitor the status
    of a database server. We'll demonstrate this with the popular MySQL as an example,
    using the `check_mysql` plugin, and we'll discuss running an actual test query
    and specifying a similar check for PostgreSQL in the *There's more* section of
    this recipe.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何使用Nagios Core监控数据库服务器的状态。我们将以流行的MySQL为例，使用`check_mysql`插件，并讨论在本食谱的*更多内容*部分中运行实际的测试查询和为PostgreSQL指定类似的检查。
- en: Getting ready
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a Nagios Core 3.0 or newer server with at least one host configured
    already. We'll use the example of `delphi.naginet`, a host defined in its own
    file. You should also understand the basics of how hosts and services relate,
    which is covered in the recipes of [Chapter 1](ch01.html "Chapter 1. Understanding
    Hosts, Services, and Contacts"), *Understanding Hosts, Services, and Contacts*.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经拥有一个Nagios Core 3.0或更高版本的服务器，并且至少配置了一个主机。我们将以`delphi.naginet`为例，这是一个在自己文件中定义的主机。你还应该理解主机和服务之间的基本关系，这在[第一章](ch01.html
    "第一章：理解主机、服务和联系人")，*理解主机、服务和联系人*的食谱中有介绍。
- en: For a check on a remote host to work from the monitoring server, the database
    server will need to be listening on an appropriate network interface. It's also
    necessary to make sure that an appropriate database user account exists with which
    the `check_mysql` plugin may authenticate. It's a good idea to make this into
    a dedicated user with no privileges on any database, because the credentials need
    to be stored in plain text, which could be a security risk if more sensitive credentials
    were used.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从监控服务器检查远程主机，数据库服务器需要在适当的网络接口上监听。还需要确保存在一个适当的数据库用户帐户，以便`check_mysql`插件进行身份验证。最好将此帐户设置为一个没有任何数据库权限的专用用户，因为凭据需要以纯文本存储，如果使用更敏感的凭据，可能会带来安全风险。
- en: 'For MySQL, we could create a new user with no privileges with the following
    command, assuming that the monitoring server `olympus.naginet` has `10.128.0.11`
    as an IPv4 address. I''ve used a randomly generated password here:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MySQL，我们可以使用以下命令创建一个没有权限的新用户，假设监控服务器`olympus.naginet`的IPv4地址是`10.128.0.11`。这里使用了随机生成的密码：
- en: '[PRE62]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We can then check the connectivity using the `mysql` client on the monitoring
    server:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用监控服务器上的`mysql`客户端检查连接性：
- en: '[PRE63]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Or alternatively, by running the plugin directly from the command line as the
    `nagios` user:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，直接以`nagios`用户身份从命令行运行插件：
- en: '[PRE64]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: If we did not have the MySQL libraries installed when we built the Nagios plugins,
    we may find that we do not have the `check_mysql` and `check_mysql_query` binaries
    in `/usr/local/nagios/libexec`. We can fix this by installing the MySQL shared
    libraries on the monitoring system, and rebuilding and reinstalling the Nagios
    Plugins package.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在构建Nagios插件时没有安装MySQL库，可能会发现`/usr/local/nagios/libexec`目录下没有`check_mysql`和`check_mysql_query`二进制文件。我们可以通过在监控系统上安装MySQL共享库，重新构建并重新安装Nagios插件包来解决此问题。
- en: By default, it's also necessary to define new commands to actually use these
    plugins as well, which we'll do in this recipe.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，还需要定义新命令以实际使用这些插件，这将在本食谱中完成。
- en: How to do it...
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can set up some basic database monitoring for our MySQL server as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下设置一些基本的MySQL服务器数据库监控：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Nagios Core的`objects`配置目录。默认路径是`/usr/local/nagios/etc/objects`。如果你将主机的定义放在其他文件中，请转到该文件所在的目录。
- en: '[PRE65]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Edit a suitable file containing command definitions, perhaps `commands.cfg`,
    and add the following definition:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含命令定义的适当文件，可能是`commands.cfg`，并添加以下定义：
- en: '[PRE66]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Edit the file containing the definition for the host. The host definition might
    look similar to the following code snippet:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含主机定义的文件。主机定义可能看起来像以下代码片段：
- en: '[PRE67]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Beneath the definition for the host, place a new service definition for the
    MySQL check, including the username and password chosen earlier for arguments:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机的定义下方，放置一个新的服务定义，用于 MySQL 检查，包括之前选择的用户名和密码作为参数：
- en: '[PRE68]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重启 Nagios Core 服务器：
- en: '[PRE69]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: With this done, a new service check with description `MYSQL` will be added for
    the `delphi.naginet` host, which will employ the `check_mysql` plugin to report
    the status of the MySQL server. The output will also include statistics about
    its uptime, open tables, and query averages, and like all service output will
    be visible in the web interface under **Services**.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，将为 `delphi.naginet` 主机添加一个新的服务检查，描述为 `MYSQL`，它将使用 `check_mysql` 插件来报告
    MySQL 服务器的状态。输出还将包括其正常运行时间、打开的表以及查询平均值等统计信息，和所有服务输出一样，将在 Web 界面的 **Services**
    下显示。
- en: How it works...
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: This configuration defines a new command named `check_mysql` to use the plugin
    of the same name, accepting two arguments; the first is the username of the test
    Nagios Core user, in this case `nagios`, and the second is the password for that
    user. The `check_mysql` plugin acts as a MySQL client using the credentials provided
    to it, and requests diagnostic information from the database, which it returns
    as part of its check.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置定义了一个名为 `check_mysql` 的新命令，使用同名插件，接受两个参数；第一个是测试的 Nagios Core 用户名，在此为 `nagios`，第二个是该用户的密码。`check_mysql`
    插件作为 MySQL 客户端，使用提供的凭据，向数据库请求诊断信息，并将其作为检查的一部分返回。
- en: If it has problems connecting to or using the MySQL server, it will flag a status
    of `CRITICAL`, and generate appropriate notifications.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接或使用 MySQL 服务器时遇到问题，它将标记为 `CRITICAL` 状态，并生成相应的通知。
- en: There's more...
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: We can optionally check access to a specific database using the plugin by supplying
    a value to the `-d` parameter. This should be a database to which the `nagios`
    user has been given access, otherwise the check would fail.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过为 `-d` 参数提供值，选择性地检查对特定数据库的访问权限。此数据库应该是 `nagios` 用户已被授予访问权限的数据库，否则检查将失败。
- en: 'If we want to check whether we can actually run a query after connecting, we
    could extend this even further to use the `check_mysql_query` plugin:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想检查在连接后是否能够实际运行查询，我们可以进一步扩展，使用 `check_mysql_query` 插件：
- en: '[PRE70]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The preceding code snippet would attempt to run the `SELECT` `COUNT(1)` `FROM`
    `exampletbl` query on the `exampledb` database. Note that it is important to wrap
    the query in quotes so that it gets processed as one argument, rather than several.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段将尝试在 `exampledb` 数据库上运行 `SELECT` `COUNT(1)` `FROM` `exampletbl` 查询。请注意，将查询用引号括起来很重要，以便它作为一个参数而不是多个参数进行处理。
- en: 'A similar service check to the one specified in this recipe could be configured
    for PostgreSQL database servers, using the `check_pgsql` plugin, also part of
    the standard Nagios Plugins set. The command and service check definitions might
    look similar to the following code snippet:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于本食谱中指定的服务检查，可以使用 `check_pgsql` 插件（同样是标准 Nagios 插件集的一部分）为 PostgreSQL 数据库服务器配置。命令和服务检查定义可能类似于以下代码片段：
- en: '[PRE71]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In the preceding example, an access would need to be granted on the PostgreSQL
    server for the monitoring server's IP address in `pg_hba.conf`, with access to
    the default standard `template1` database.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，需要在 PostgreSQL 服务器的 `pg_hba.conf` 文件中授予监控服务器 IP 地址的访问权限，并访问默认的标准 `template1`
    数据库。
- en: In production environments, it's often the case that for security or programming
    policy reasons, database servers are not actually configured to accept direct
    connections over network interfaces, even on secure interfaces. Packaged MySQL
    and PostgreSQL servers on many systems will in fact default to listening only
    on the `localhost` interface on `127.0.0.1`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，通常出于安全或编程策略的原因，数据库服务器并未配置为接受通过网络接口的直接连接，即使是在安全的接口上。许多系统上的打包 MySQL 和 PostgreSQL
    服务器实际上默认仅在 `localhost` 接口 `127.0.0.1` 上监听。
- en: This can complicate the monitoring setup a little, but it can usually be addressed
    by installing a remote Nagios plugin execution agent on the database server, such
    as NRPE or NSclient++. NRPE usage is addressed in [Chapter 6](ch06.html "Chapter 6. Enabling
    Remote Execution"), *Enabling Remote Execution*, and uses a MySQL server configured
    in this way as its demonstration of the concept.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会稍微复杂化监控设置，但通常可以通过在数据库服务器上安装远程 Nagios 插件执行代理来解决，比如 NRPE 或 NSclient++。NRPE
    的使用在[第 6 章](ch06.html "第 6 章. 启用远程执行")，*启用远程执行*中有详细讲解，使用的是这样配置的 MySQL 服务器作为示范。
- en: See also
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating a new host* and *Creating a new service* recipes in [Chapter 1](ch01.html
    "Chapter 1. Understanding Hosts, Services, and Contacts"), *Understanding Hosts,
    Services, and Contacts*
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 1 章](ch01.html "第 1 章. 理解主机、服务和联系人")中的*创建新主机*和*创建新服务*示例，*理解主机、服务和联系人*'
- en: The *Creating a new command* recipe in [Chapter 2](ch02.html "Chapter 2. Working
    with Commands and Plugins"), *Working with Commands and Plugins*
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 2 章](ch02.html "第 2 章. 使用命令和插件")中的*创建新命令*示例，*使用命令和插件*'
- en: The *Monitoring local services on a remote machine with NRPE* recipe in [Chapter
    6](ch06.html "Chapter 6. Enabling Remote Execution"), *Enabling Remote Execution*
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 6 章](ch06.html "第 6 章. 启用远程执行")中的*使用 NRPE 监控远程机器上的本地服务*示例，*启用远程执行*'
- en: Monitoring the output of an SNMP query
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控 SNMP 查询的输出
- en: In this recipe, we'll learn how to use the `check_snmp` plugin to monitor the
    output given by **Simple Network Management Protocol** (**SNMP**) requests.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将学习如何使用 `check_snmp` 插件来监控 **简单网络管理协议**（**SNMP**）请求返回的输出。
- en: Despite its name, SNMP is not really a very simple protocol, but it's a very
    common method for accessing information on many kinds of networked devices, including
    monitoring boards, usage meters, and storage appliances, as well as workstations,
    servers, and routing equipment.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管名字中有“简单”二字，SNMP 实际上并不是一个非常简单的协议，但它是访问许多种类网络设备信息的常见方法，包括监控板、使用计量器、存储设备，以及工作站、服务器和路由设备。
- en: Because SNMP is so widely supported and typically able to produce such a large
    volume of information to trusted hosts, it's an excellent way to gather information
    from hosts that's not otherwise retrievable from network services. For example,
    while checking for a PING response from a large router is simple enough, there
    may not be an easy way to check properties, such as the state of each of its interfaces,
    or the presence of a certain route in its routing tables.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 SNMP 得到了广泛的支持，并且通常能够向受信任的主机提供大量的信息，因此它是从主机收集信息的极好方式，这些信息无法通过网络服务获取。例如，虽然检查来自大型路由器的
    PING 响应很简单，但可能没有简单的方法来检查它的接口状态，或者其路由表中某条路由的存在与否。
- en: Using `check_snmp` in Nagios Core allows automated retrieval of this information
    from the devices, and generating alerts appropriately. While its setup is somewhat
    complex, it is worth learning how to use it, as it is among the most powerful
    plugins in Nagios Core for network administrators, and it is quite typical to
    see dozens of commands defined for its use in a typical configuration for a large
    network. It can often be used to complement or even replace remote plugin execution
    daemons such as NRPE or NSclient++.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Nagios Core 中使用`check_snmp`可以自动从设备中获取这些信息，并生成相应的警报。虽然它的设置有些复杂，但值得学习如何使用它，因为它是
    Nagios Core 中最强大的插件之一，尤其对于网络管理员来说，通常可以在大型网络的配置中看到定义了几十个命令来使用它。它通常可以用来补充或甚至替代远程插件执行守护进程，如
    NRPE 或 NSclient++。
- en: Getting ready
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a Nagios Core 3.0 or newer server with at least one host configured
    already. You should also understand the basics of how hosts and services relate,
    which is covered in the recipes of [Chapter 1](ch01.html "Chapter 1. Understanding
    Hosts, Services, and Contacts"), *Understanding Hosts, Services, and Contacts*.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该有一个已配置至少一个主机的 Nagios Core 3.0 或更高版本的服务器。你还应该了解主机和服务之间的基本关系，这些内容在[第 1 章](ch01.html
    "第 1 章. 理解主机、服务和联系人")的示例中有讲解，*理解主机、服务和联系人*。
- en: This recipe assumes a basic knowledge of SNMP, including its general intended
    purpose, the concept of an SNMP community, and what SNMP MIBs and OIDs are. In
    particular, if you're looking to monitor some property of a network device that's
    available to you via SNMP, you should know what the OID for that data is. This
    information is often available in the documentation for network devices, or can
    be deduced by running an appropriate `snmpwalk` command against the host to view
    the output for all its OIDs.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档假设您具有关于SNMP的基本知识，包括其一般预期用途、SNMP社区的概念，以及SNMP MIB和OID的含义。特别是，如果您希望监视网络设备的某个属性，该属性通过SNMP可用，您应该知道该数据的OID是什么。这些信息通常可以在网络设备的文档中找到，或者可以通过针对主机运行适当的`snmpwalk`命令来查看所有OID的输出来推断出来。
- en: You should check that an SNMP daemon is running on the target host, and also
    that the `check_snmp` plugin is available on the monitoring host. It is included
    as part of the standard Nagios Plugins, so provided the Net-SNMP libraries were
    available on the system when these were compiled, the plugin should be available.
    If it is not, you may need to install the Net-SNMP libraries on your monitoring
    system and recompile the plugins.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该检查目标主机上是否运行了SNMP守护程序，并且监控主机上是否可用`check_snmp`插件。它作为标准Nagios插件的一部分包含在内，因此只要在编译这些插件时系统中可用了Net-SNMP库，该插件应该是可用的。如果没有，请在监控系统上安装Net-SNMP库并重新编译插件。
- en: We'll use the example of retrieving the total process count from a Linux server
    with hostname `ithaca.naginet`, and flagging `WARNING` and `CRITICAL` states at
    appropriate high ranges. We'll also discuss how to test for the presence or absence
    of strings, rather than numeric thresholds.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用从主机名为`ithaca.naginet`的Linux服务器检索总进程计数的示例，并在适当的高范围内标记`WARNING`和`CRITICAL`状态。我们还将讨论如何测试字符串的存在或不存在，而不是数值阈值。
- en: 'It''s a good idea to test that the host will respond to SNMP queries in the
    expected form. We can test this with `snmpget`. Assuming a community name of `public`,
    we could write:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 测试主机是否以预期形式响应SNMP查询是个好主意。我们可以使用`snmpget`进行测试。假设社区名称为`public`，我们可以写：
- en: '[PRE72]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We can also test the plugin by running it directly as the `nagios` user:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过直接作为`nagios`用户运行插件来测试该插件：
- en: '[PRE73]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: How to do it...
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We can define a command and service check for the Linux process count OID as
    follows:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义一个命令和服务检查来检查Linux进程计数的OID，如下所示：
- en: Change to the `objects` configuration directory for Nagios Core. The default
    path is `/usr/local/nagios/etc/objects`. If you've put the definition for your
    host in a different file, then move to its directory instead.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Nagios Core的`objects`配置目录。默认路径是`/usr/local/nagios/etc/objects`。如果您将主机定义放在不同的文件中，则改为移动到其目录。
- en: '[PRE74]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Edit a suitable file containing command definitions, perhaps `commands.cfg`,
    and add the following definition to the end of the file.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含命令定义的适当文件，可能是`commands.cfg`，并将以下定义添加到文件末尾。
- en: '[PRE75]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Edit the file containing the definition for the host. The host definition might
    look similar to the following code snippet:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑包含主机定义的文件。主机定义可能类似于以下代码片段：
- en: '[PRE76]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Beneath the definition for the host, place a new service definition using our
    new command. Replace `public` with the name of your SNMP community if it differs:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机定义之后，使用我们的新命令添加一个新的服务定义。如果不同，请用您的SNMP社区名称替换`public`：
- en: '[PRE77]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Validate the configuration and restart the Nagios Core server:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置并重新启动Nagios Core服务器：
- en: '[PRE78]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: With this done, a new service check with a description of `SNMP_PROCS` will
    be added to the `ithaca.naginet` host, and the `check_snmp` plugin will issue
    a request for the value of the specified OID as its regular check. It will flag
    a `WARNING` state if the count is greater than `100`, and a `CRITICAL` state if
    greater than `200`, notifying accordingly. All this appears in the web interface
    the same way as any other service, under the **Services** menu item.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，将添加一个新的服务检查，其描述为`SNMP_PROCS`，添加到`ithaca.naginet`主机中，并且`check_snmp`插件将按照其正常检查请求指定OID的值。如果计数大于`100`，它将标记为`WARNING`状态；如果大于`200`，则标记为`CRITICAL`状态，并相应通知。所有这些都将显示在Web界面中的**Services**菜单项中，与任何其他服务一样。
- en: How it works...
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The preceding configuration defines both a new command based around the `check_snmp`
    plugin, and in turn, a new service check using that command for the `ithaca.naginet`
    server. The community name for the SNMP request, `public`, is passed into the
    command as an argument; everything else, including the OID to be requested, is
    fixed into the `check_snmp_linux_procs` command definition.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置定义了一个新的基于 `check_snmp` 插件的命令，并依此为 `ithaca.naginet` 服务器使用该命令进行新的服务检查。SNMP
    请求的社区名称 `public` 作为参数传递给命令；其他一切，包括要请求的 OID，都是固定在 `check_snmp_linux_procs` 命令定义中的。
- en: A part of the command line defined includes the `-w` and `-c` options. For numeric
    outputs like ours, these are used to define the limits for the value beyond which
    a `WARNING` or `CRITICAL` state is raised, respectively. In this case, we define
    a `WARNING` threshold of `100` processes, and a `CRITICAL` threshold of `200`
    processes.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 定义的命令行的一部分包括 `-w` 和 `-c` 选项。对于像我们这样的数值输出，这些选项用于定义超出值的限制，以便分别触发`WARNING`或`CRITICAL`状态。在这种情况下，我们定义了
    `100` 个进程的`WARNING`阈值和 `200` 个进程的`CRITICAL`阈值。
- en: Similarly, if the SNMP check fails completely due to connectivity problems or
    syntax errors, an `UNKNOWN` state will be reported.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果由于连接问题或语法错误导致 SNMP 检查完全失败，将报告`UNKNOWN`状态。
- en: There's more...
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'It''s also possible to test the output of SNMP checks to see if they match
    a particular string or pattern to determine whether the check succeeded. If we
    needed to check that the system''s hostname was `ithaca.naginet`, for example
    (perhaps as a simple test SNMP query that should always succeed), then we might
    set up a command definition as follows:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以测试 SNMP 检查的输出，以查看它们是否与特定的字符串或模式匹配，从而确定检查是否成功。例如，如果我们需要检查系统的主机名是否为`ithaca.naginet`（可能是一个应该始终成功的简单测试
    SNMP 查询），那么我们可以设置如下的命令定义：
- en: '[PRE79]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'With a corresponding service check as follows:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 具有以下相应服务检查：
- en: '[PRE80]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: This particular check would only succeed if the SNMP query succeeds and returns
    a string matching the string `ithaca`, as specified in the second argument.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的检查只有在 SNMP 查询成功并返回与第二个参数指定的字符串`ithaca`匹配的字符串时才会成功。
- en: See also
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Creating an SNMP OID to monitor* in this chapter
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*创建 SNMP OID 以进行监控*
- en: The *Creating a new host* and *Creating a new service* recipes in [Chapter 1](ch01.html
    "Chapter 1. Understanding Hosts, Services, and Contacts"), *Understanding Hosts,
    Services, and Contacts*
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书中[第1章](ch01.html "第1章：理解主机、服务和联系人")的*创建新主机*和*创建新服务*配方，*理解主机、服务和联系人*
- en: The *Creating a new command* recipe in [Chapter 2](ch02.html "Chapter 2. Working
    with Commands and Plugins"), *Working with Commands and Plugins*
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书中[第2章](ch02.html "第2章：与命令和插件一起工作")的*创建新命令*配方，*与命令和插件一起工作*
- en: Monitoring a RAID or other hardware device
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控 RAID 或其他硬件设备
- en: In this recipe, we'll learn a general strategy for monitoring the properties
    of hardware devices. Because of the different ways that vendors implement their
    hardware, this tends to be less straightforward than monitoring standard network
    services.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习监控硬件设备属性的一般策略。由于厂商实现硬件的方式不同，这通常比监控标准网络服务更复杂。
- en: There are at least four general approaches to this problem.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 至少有四种一般方法可以解决这个问题。
- en: Getting ready
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to know some specifics about the hardware that you want to monitor,
    including the model number. You should preferably also have a Nagios Core 3.0
    server that was compiled with Net-SNMP libraries available to build the `check_snmp`
    plugin, part of the Nagios Plugins set.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要知道一些你想要监控的硬件的具体信息，包括型号。你最好还应该有一个带有 Net-SNMP 库编译的 Nagios Core 3.0 服务器，以便构建`check_snmp`插件，这是
    Nagios 插件集的一部分。
- en: How to do it...
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We can find a way to monitor an arbitrary hardware device on a local or remote
    machine as follows:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式找到在本地或远程机器上监控任意硬件设备的方法：
- en: Check if official or unofficial Nagios Core plugins already exist for polling
    the particular device. The best place to start is with Nagios Exchange at [*http://exchange.nagios.org/*](http://exchange.nagios.org/);
    just search for the make of hardware, and see if a plugin already exists, per
    the *Finding a plugin* recipe in [Chapter 2](ch02.html "Chapter 2. Working with
    Commands and Plugins"), *Working with Commands and Plugins*. You can then install
    it by following the *Installing a plugin* recipe in the same chapter.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否已经存在用于轮询特定设备的官方或非官方Nagios Core插件。最好的起点是Nagios Exchange，网址为[*http://exchange.nagios.org/*](http://exchange.nagios.org/)，只需搜索硬件品牌，看看是否已有插件，按照[*第2章*](ch02.html
    "第2章. 使用命令和插件")中的*寻找插件*食谱来进行。你可以按照同一章节中的*安装插件*食谱来安装插件。
- en: Check if any of the values you need from the hardware are or can be exported
    as SNMP OIDs, to be checked with the *Monitoring the output of an SNMP query*
    recipe in this chapter.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你从硬件中需要的任何值是否已经作为SNMP OID导出，或者是否可以导出，以便使用本章中的*监控SNMP查询的输出*食谱进行检查。
- en: If they aren't, but there's a command-line diagnostic tool with output, or a
    return value that can be used as the check, you could consider exporting it as
    a custom OID in an SNMP server, by using the *Creating a new SNMP OID to monitor*
    recipe in this chapter.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有，但有一个命令行诊断工具输出，或者一个可以用作检查的返回值，你可以考虑将其作为自定义OID导出到SNMP服务器中，使用本章中的*创建一个新的SNMP
    OID来监控*食谱。
- en: Finally, we may have to resort to writing our own plugin. This is not actually
    as difficult as it may seem; it is discussed in the *Writing a new plugin from
    scratch* recipe in [Chapter 2](ch02.html "Chapter 2. Working with Commands and
    Plugins"), *Working with Commands and Plugins*. This may be the only option for
    custom or very uncommon hardware.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可能不得不自己编写插件。实际上，这并不像看起来那么困难；这一过程在[*第2章*](ch02.html "第2章. 使用命令和插件")中的*从零开始编写新插件*食谱中有所讨论。这可能是定制硬件或非常罕见硬件的唯一选择。
- en: How it works...
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: If we find an appropriate plugin for the hardware online, the main snag here
    is that we will need to not only be sure that the plugin works, by testing it
    against the hardware in both an `OK` and a `CRITICAL` state (which might be hard
    to do), but we will also need to make sure that the plugin is safe to run. The
    plugins on Nagios Exchange are reviewed before they are added, but the code for
    plugins that you find on any other website might not be safe to run.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在网上找到适合硬件的插件，主要的难点在于我们不仅要通过在硬件的`OK`和`CRITICAL`状态下测试插件来确保其有效（这可能很难做到），还要确保插件是安全的。Nagios
    Exchange上的插件在添加之前会进行审查，但你在任何其他网站上找到的插件代码可能不安全运行。
- en: Using SNMP for these kinds of checks wherever possible has two advantages, in
    that the values can be checked using a standard Nagios plugin, `check_snmp`, and
    the values can also be read over the network, meaning that we may not need to
    rely on remote execution daemons such as NRPE or NSclient++ to get this information.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能使用SNMP进行这些类型的检查有两个优势：一是可以通过标准的Nagios插件`check_snmp`来检查这些值，二是这些值可以通过网络读取，这意味着我们可能不需要依赖如NRPE或NSclient++之类的远程执行守护进程来获取这些信息。
- en: See also
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Monitoring the output of an SNMP query* and *Creating a new SNMP OID to
    monitor* recipes in this chapter
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*监控SNMP查询的输出*和*创建一个新的SNMP OID来监控*食谱
- en: The *Finding a plugin*, *Installing a plugin*, and *Writing a new plugin from
    scratch* recipes in [Chapter 2](ch02.html "Chapter 2. Working with Commands and
    Plugins"), *Working with Commands and Plugins*
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第2章*](ch02.html "第2章. 使用命令和插件")中的*寻找插件*、*安装插件*和*从零开始编写新插件*食谱，*使用命令和插件*'
- en: Creating an SNMP OID to monitor
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个SNMP OID用于监控
- en: In this recipe, we'll learn how to configure a Net-SNMP `snmpd` server on a
    Linux server to return the output of a command in an SNMP OID. This can be useful
    as an alternative to NRPE monitoring for information that is not otherwise available
    in a checkable network service, so that Nagios Core can check it via its standard
    `check_snmp` method.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何在Linux服务器上配置一个Net-SNMP `snmpd`服务器，以便通过SNMP OID返回命令的输出。这可以作为NRPE监控的替代方案，用于检查网络服务中无法直接访问的信息，以便Nagios
    Core可以通过其标准的`check_snmp`方法进行检查。
- en: As an example, this can be a very good way of monitoring hardware devices, such
    as **RAID** arrays on remote servers, where command-line diagnostic tools are
    available to report a status as a number or string, but they only work locally
    and don't otherwise include any information in an SNMP MIB tree.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这可以是监控硬件设备的一个非常好的方式，例如远程服务器上的**RAID**阵列，其中提供命令行诊断工具来报告状态为数字或字符串，但这些工具仅在本地有效，并且不会在SNMP
    MIB树中包含任何信息。
- en: Getting ready
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The host we intend to check should be running a Net-SNMP `snmpd` server that
    allows full read access to the MIB tree for a specified community string, such
    as `public`. This SNMP server should be capable of using the `exec` directive
    in its configuration to return the output of a command as the value of an SNMP
    OID when requested by an SNMP client. As such, you will need to know the basics
    of SNMP.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要检查的主机应运行Net-SNMP `snmpd`服务器，允许对指定社区字符串（如`public`）的MIB树进行完全的读取访问。该SNMP服务器应能够在配置中使用`exec`指令，在SNMP客户端请求时返回命令的输出作为SNMP
    OID的值。因此，您需要了解SNMP的基础知识。
- en: You will also need a Nagios Core 3.0 or newer server with SNMP enabled in order
    to actually monitor the OID, which is explained in the *Monitoring the output
    of an SNMP query* recipe.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要一个启用了SNMP的Nagios Core 3.0或更新版本的服务器，才能实际监控OID，这将在*监控SNMP查询输出*方法中说明。
- en: 'In this example, we''ll deal with a simple script running on a target host
    `ithaca.naginet` called `/usr/local/bin/raidstat` that returns an integer: zero
    for the RAID being in a good state, and non-zero to signal any problems. We''ll
    assume this tool can be run as any user and does not require root privileges.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将处理一个简单的脚本，它在目标主机`ithaca.naginet`上运行，脚本路径为`/usr/local/bin/raidstat`，它返回一个整数：零表示RAID状态良好，非零则表示有问题。我们假设该工具可以以任何用户身份运行，并且不需要root权限。
- en: How to do it...
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can set up our custom SNMP OID as follows:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式设置自定义SNMP OID：
- en: 'Add the following line to the `snmpd.conf` file on the target host, substituting
    in the path of the command that generates the needed output:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到目标主机上的`snmpd.conf`文件中，替换生成所需输出的命令路径：
- en: '[PRE81]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Restart the `snmpd` server on the target host, which might be done as follows,
    depending on the system:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动目标主机上的`snmpd`服务器，具体操作可能如下，具体取决于系统：
- en: '[PRE82]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Back on the monitoring server, we can walk the `.1.3.6.1.4.1.2021` OID, and
    find our `raidstat` OID and its value in the output:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在监控服务器上，我们可以遍历`.1.3.6.1.4.1.2021` OID，找到我们的`raidstat` OID及其值：
- en: '[PRE83]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'We now know which OID we can query for a check using the *Monitoring the output
    of an SNMP query* recipe in this chapter, and can test retrieving it directly
    with `snmpget`:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们知道可以使用本章中的*监控SNMP查询输出*方法来查询检查OID，并可以直接通过`snmpget`测试获取它：
- en: '[PRE84]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: How it works...
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `exec` call in the `snmpd` configuration defines a program that should
    be run to return a new value in the OID tree. The four OIDs we found in the output
    are as follows:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`snmpd`配置中的`exec`调用定义了一个应该执行的程序，用于返回OID树中的新值。我们在输出中找到的四个OID如下：'
- en: '`1.3.6.1.4.1.2021.8.1.2.1`: This is the name of the OID we''ve assigned, `raidstat`'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1.3.6.1.4.1.2021.8.1.2.1`: 这是我们分配的OID名称，`raidstat`'
- en: '`1.3.6.1.4.1.2021.8.1.3.1`: This is the full path to the script that was called,
    `/usr/local/bin/raidstat`'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1.3.6.1.4.1.2021.8.1.3.1`: 这是被调用脚本的完整路径，`/usr/local/bin/raidstat`'
- en: '`1.3.6.1.4.1.2021.8.1.100.1`: This is the return value from the call, expressed
    as an integer'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1.3.6.1.4.1.2021.8.1.100.1`: 这是来自调用的返回值，以整数形式表示'
- en: '`1.3.6.1.4.1.2021.8.1.101.1`: This is any output from the call, expressed as
    a string'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1.3.6.1.4.1.2021.8.1.101.1`: 这是来自调用的任何输出，以字符串形式表示'
- en: This setup can therefore be used to check the return value and character output
    of any command that the `snmpd` user is able to execute, a good method for ad
    hoc monitoring for very specific cases like this.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这种设置可以用来检查任何命令的返回值和字符输出，只要该命令是`snmpd`用户能够执行的，对于像这样的特定情况，这是一个很好的临时监控方法。
- en: There's more...
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'More than one `exec` command can be added to the server configuration if required.
    For example, if we needed to check the state of the CPU temperature with a command
    `tempstat`, then we might define:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以向服务器配置中添加多个`exec`命令。例如，如果我们需要通过命令`tempstat`检查CPU温度的状态，那么我们可能会定义：
- en: '[PRE85]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The return values and output for both would then show up in the SNMP output,
    in separate OIDs.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个的返回值和输出将显示在SNMP输出中，并且在不同的OID中。
- en: 'If necessary, the command definitions can also be followed by arguments:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，命令定义后还可以跟随参数：
- en: '[PRE86]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: A full discussion of how `exec` and the similar `pass` configuration for Net-SNMP
    works is outside the scope of this book, but is discussed extensively in its documentation
    available at the time of writing at [http://www.net-snmp.org/docs/readmefiles.html](http://www.net-snmp.org/docs/readmefiles.html).
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不涉及`exec`和类似的`pass`配置在 Net-SNMP 中的工作原理，但在本书编写时的文档中有广泛讨论，文档可以通过[http://www.net-snmp.org/docs/readmefiles.html](http://www.net-snmp.org/docs/readmefiles.html)访问。
- en: Note that if exporting values via SNMP is unsuitable, an alternative for remote
    monitoring is to use **Nagios Remote Plugin Executor** (**NRPE**) to run a check
    on the target server and return the result to the monitoring server. This is discussed
    in the recipes of [Chapter 6](ch06.html "Chapter 6. Enabling Remote Execution"),
    *Enabling Remote Execution*.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果通过 SNMP 导出值不适用，远程监控的替代方法是使用**Nagios 远程插件执行器** (**NRPE**) 在目标服务器上运行检查，并将结果返回给监控服务器。有关这方面的内容，请参见[第
    6 章](ch06.html "第 6 章. 启用远程执行")，*启用远程执行*中的配方。
- en: See also
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Creating an SNMP OID to monitor* recipe in this chapter
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*创建 SNMP OID 以进行监控*配方
- en: The *Creating a new host* and *Creating a new service* recipes in [Chapter 1](ch01.html
    "Chapter 1. Understanding Hosts, Services, and Contacts"), *Understanding Hosts,
    Services, and Contacts*
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 1 章](ch01.html "第 1 章. 理解主机、服务和联系人")中的*创建新主机*和*创建新服务*配方，*理解主机、服务和联系人*'
- en: The *Creating a new command* recipe in [Chapter 2](ch02.html "Chapter 2. Working
    with Commands and Plugins"), *Working with Commands and Plugins*
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 2 章](ch02.html "第 2 章. 与命令和插件一起工作")中的*创建新命令*配方，*与命令和插件一起工作*'
- en: The *Monitoring local services on a remote machine with NRPE* recipes in [Chapter
    6](ch06.html "Chapter 6. Enabling Remote Execution"), *Enabling Remote Execution*
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 6 章](ch06.html "第 6 章. 启用远程执行")中的*使用 NRPE 监控远程机器上的本地服务*配方，*启用远程执行*'

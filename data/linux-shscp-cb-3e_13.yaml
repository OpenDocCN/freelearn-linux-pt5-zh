- en: Containers, Virtual Machines, and the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器、虚拟机和云
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Using Linux Containers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Linux容器
- en: Using Docker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker
- en: Using Virtual Machines in Linux
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux中使用虚拟机
- en: Linux in the cloud
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云中的Linux
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: Modern Linux applications can be deployed on dedicated hardware, containers,
    Virtual Machines (VMs), or the cloud. Each solution has strengths and weaknesses,
    and each of them can be configured and maintained with scripts as well as GUIs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Linux应用程序可以部署在专用硬件、容器、虚拟机（VM）或云中。每种解决方案都有其优缺点，且每一种都可以通过脚本和图形用户界面（GUI）进行配置和维护。
- en: A container is ideal if you want to deploy many copies of a single application
    where each instance needs its own copy of data. For example, containers work well
    with database-driven web servers where each server needs the same web infrastructure
    but has private data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想部署多个相同应用程序的副本，其中每个实例都需要自己的数据副本，容器是理想的选择。例如，容器在数据库驱动的Web服务器中表现良好，每个服务器需要相同的Web基础设施，但拥有私有数据。
- en: However, the downside of a container is that it relies on the host system's
    kernel. You can run multiple Linux distributions on a Linux host, but you can't
    run Windows in a container.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，容器的缺点是它依赖于宿主系统的内核。你可以在Linux宿主机上运行多个Linux发行版，但不能在容器中运行Windows。
- en: Using a VM is your best bet if you need a complete environment that is not the
    same for all instances. With VMs, you can run Windows and Linux on a single host.
    This is ideal for validation testing when you don't want a dozen boxes in your
    office but need to test against different distributions and operating systems.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一个与所有实例不相同的完整环境，使用虚拟机是最好的选择。通过虚拟机，你可以在单一宿主机上运行Windows和Linux。这对于验证测试非常理想，当你不想在办公室里放置一堆计算机时，但又需要测试不同的发行版和操作系统。
- en: The downside of VMs is that they are huge. Each VM implements an entire computer-operating
    system, device drivers, all the applications and utilities, and so on. Each Linux
    VM needs at least one core and 1 GB RAM. A Windows VM may need two cores and 4
    GB RAM. If you wish to run multiple VMs simultaneously, you need enough RAM to
    support each one of the VMs; otherwise, the host will start swapping and performance
    will suffer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机的缺点是它们非常庞大。每个虚拟机都实现了一个完整的计算机操作系统、设备驱动程序、所有应用程序和工具等。每个Linux虚拟机至少需要一个核心和1 GB的内存。Windows虚拟机可能需要两个核心和4
    GB的内存。如果你希望同时运行多个虚拟机，你需要足够的内存来支持每个虚拟机，否则宿主机会开始交换内存，性能会受到影响。
- en: The cloud is like having many computers and lots of bandwidth at your fingertips.
    You may actually be running on a VM or container in the cloud, or you might have
    your own dedicated system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 云就像是有很多计算机和大量带宽触手可及。你实际上可能是在云中运行虚拟机或容器，或者你可能拥有自己的专用系统。
- en: The biggest advantage of the cloud is that it can scale. If you think your application
    might go viral or your usage is cyclic, the ability to scale up and down quickly
    without needing to buy or lease new hardware new connectivity is necessary. For
    example, if your system processes college registrations, it will be overworked
    for about two weeks, twice a year, and almost dormant for the rest of the time.
    You may need a dozen sets of hardware for those two weeks, but you don't want
    to have them sitting idle for the rest of the year.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 云的最大优势是它可以扩展。如果你认为你的应用可能会突然火爆，或者你的使用是周期性的，能够快速扩展和收缩，而不需要购买或租赁新硬件或新的连接能力是必要的。例如，如果你的系统处理大学注册，它会在每年大约两周内超负荷运作，并且在其余时间几乎处于休眠状态。在那两周里，你可能需要一打硬件，但你并不希望它们在其余时间里空置。
- en: The downside of the cloud is that it's not something you can see. All of the
    maintenance and configuration has to be done remotely.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 云的缺点是它是你看不见的。所有的维护和配置必须远程完成。
- en: Using Linux containers
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Linux容器
- en: '**Linux Container** (**lxc**) packages provide the basic container functionality
    used by Docker and LXD container deployment systems.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux容器**（**lxc**）包提供了Docker和LXD容器部署系统使用的基本容器功能。'
- en: A Linux container uses kernel level support for **Control Groups** (**cgroups**)
    and the `systemd` tools described in [Chapter 12](5c74c943-1155-4720-a3cb-f4740f691f8c.xhtml),
    *Tuning a Linux System*. The cgroups support provides tools to control the resources
    available to a group of programs. This informs kernel control about the resources
    that are available to the processes running in a container. A container may have
    limited access to devices, network connectivity, memory, and so on. This control
    keeps the containers from interfering with each other or potentially damaging
    the host system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 容器使用内核级支持的 **控制组**（**cgroups**）和 [第 12 章](5c74c943-1155-4720-a3cb-f4740f691f8c.xhtml)
    中描述的 `systemd` 工具，*调整 Linux 系统*。cgroups 支持提供了控制一组程序可用资源的工具。这些工具告诉内核哪些资源可供容器中的进程使用。一个容器可能对设备、网络连接、内存等有有限访问权限。这种控制机制避免了容器之间的相互干扰，或可能对主机系统造成损害。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Container support is not provided in stock distributions. You'll need to install
    it separately. The level of support across distributions is inconsistent. The
    **lxc** container system was developed by Canonical, so Ubuntu distributions have
    complete container support. Debian 9 (Stretch) is better than Debian 8 (Jessie)
    in this regard.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 默认发行版不提供容器支持。您需要单独安装容器支持。不同发行版的支持程度不一致。**lxc** 容器系统由 Canonical 开发，因此 Ubuntu
    发行版提供完整的容器支持。相较于 Debian 8（Jessie），Debian 9（Stretch）在这方面有更好的支持。
- en: Fedora has limited support for lxc containers. It is easy to create privileged
    containers and a bridged Ethernet connection, but as of Fedora 25, the `cgmanager`
    service required for unprivileged containers is unavailable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora 对 lxc 容器的支持有限。创建特权容器和桥接以太网连接非常简单，但从 Fedora 25 开始，所需的 `cgmanager` 服务已不可用，用于非特权容器的支持。
- en: SuSE supports limited use of lxc. SuSE's `libvirt-lxc` package is similar but
    not identical to lxc. SuSE's `libvirt-lxc` package is not covered in this chapter.
    A privileged container with no Ethernet is easy to create under SuSE, but it does
    not support unprivileged containers and bridged Ethernet.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: SuSE 支持有限的 lxc 使用。SuSE 的 `libvirt-lxc` 包类似但不完全等同于 lxc。本章未覆盖 SuSE 的 `libvirt-lxc`
    包。创建一个没有以太网的特权容器在 SuSE 下非常简单，但它不支持非特权容器和桥接以太网。
- en: Here's how to install `lxc` support on major distributions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在主要发行版上安装 `lxc` 支持。
- en: 'For Ubuntu, use the following code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Ubuntu，请使用以下代码：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next we have Debian. Debian distributions may only include the security repositories
    in `/etc/apt/sources.list`. If so, you''ll need to add `deb http://ftp.us.debian.org/debian
    stretch main contrib` to `/etc/apt/sources.list` and then perform `apt-get update
    before`, loading the `lxc` package:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 Debian。Debian 发行版可能只包含 `/etc/apt/sources.list` 中的安全仓库。如果是这样，您需要将 `deb http://ftp.us.debian.org/debian
    stretch main contrib` 添加到 `/etc/apt/sources.list` 中，然后执行 `apt-get update`，再加载
    `lxc` 包：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For OpenSuSE, use the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 OpenSuSE，请使用以下代码：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For Red Hat/Fedora-based systems, add the following `Epel` repository:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 Red Hat/Fedora 的系统，添加以下 `Epel` 仓库：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you''ve done this, install the following packages before you install lxc support:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，安装 lxc 支持之前，请先安装以下软件包：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `libvirt` package provides networking support, and `debootstrap` is required
    to run Debian-based containers:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`libvirt` 包提供网络支持，`debootstrap` 是运行基于 Debian 的容器所需的：'
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The `lxc` package adds several commands to your system. These include:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`lxc` 包为您的系统添加了多个命令。包括：'
- en: '`lxc-create`: This is to create an lxc container'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lxc-create`：用于创建一个 lxc 容器'
- en: '`lxc-ls`: This is a list of the available containers'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lxc-ls`：用于列出可用的容器'
- en: '`lxc-start`: This is to start a container'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lxc-start`：用于启动一个容器'
- en: '`lxc-stop`: This is to stop a container'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lxc-stop`：用于停止一个容器'
- en: '`lxc-attach`: This is to connect to the root shell of a container'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lxc-attach`：用于连接到容器的 root shell'
- en: '`lxc-console`: This is to connect to a login session in a container'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lxc-console`：用于连接到容器的登录会话'
- en: On Red Hat-based systems, you may need to disable SELinux while testing. On
    OpenSuSE systems, you may need to disable **AppArmor**. You'll need to reboot
    after disabling AppArmor via `yast2`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Red Hat 的系统上，您可能需要在测试时禁用 SELinux。在 OpenSuSE 系统上，您可能需要禁用 **AppArmor**。禁用
    AppArmor 后，您需要通过 `yast2` 重启系统。
- en: 'Linux containers come in two basic flavors: privileged and unprivileged. Privileged
    containers are created by the root and the underlying system has root privileges.
    An unprivileged container is created by a user and only has user privileges.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 容器有两种基本类型：特权容器和无特权容器。特权容器由 root 用户创建，底层系统具有 root 权限。无特权容器由普通用户创建，仅具有用户权限。
- en: Privileged containers are easier to create and more widely supported since they
    don't require `uid` and `gid` mapping, device permissions, and so on. However,
    if a user or application manages to escape from the container, they'll have full
    privileges on the host.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 特权容器更易于创建且被更广泛支持，因为它们不需要 `uid` 和 `gid` 映射、设备权限等。然而，如果用户或应用程序成功逃逸容器，他们将拥有宿主机上的完全权限。
- en: Creating a privileged container is a good way to confirm that all the required
    packages are installed on your system. After you create a privileged container,
    use unprivileged containers for your applications.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建特权容器是确认系统上所有必要软件包已安装的好方法。创建特权容器后，使用无特权容器来运行应用程序。
- en: Creating a privileged container
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建特权容器
- en: 'The easiest way to get started with Linux containers is to download a prebuilt
    distribution in a privileged container. The `lxc-create` command creates a base
    container structure and can populate it with a predefined Linux distribution.
    The syntax of the `lxc-create` command is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 Linux 容器的最简单方法是下载一个预构建的发行版到一个特权容器中。`lxc-create` 命令创建一个基础容器结构，并可以用预定义的 Linux
    发行版填充它。`lxc-create` 命令的语法如下：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `-n` option defines a name for this container. This name will be used to
    identify this container when it is started, stopped, or reconfigured.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`-n` 选项为容器定义一个名称。此名称将在容器启动、停止或重新配置时用于标识该容器。'
- en: The `-t` option defines the template to be used to create this container. The
    type `download` connects your system to a repository of prebuilt containers and
    prompts you for the container to download.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`-t` 选项定义用于创建此容器的模板。`download` 类型将你的系统连接到一个预构建容器的仓库，并提示你下载容器。'
- en: 'This is an easy way to experiment with other distributions or create an application
    that needs a distribution other than the host''s Linux distribution:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个实验其他发行版或创建需要不同于主机 Linux 发行版的应用程序的简便方法：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The download template retrieves a list of the available predefined containers
    from the Internet and populates the container from the network archive. The create
    command provides a list of the available containers and then prompts for the **Distribution**,
    **Release**, and Architecture. You can only run a container if your hardware supports
    this Architecture. You cannot run an Arm container if your system has an Intel
    CPU, but you can run a 32-bit i386 container on a system with a 64-bit Intel CPU:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下载模板会从互联网上获取可用的预定义容器列表，并从网络档案中填充容器。创建命令提供可用容器的列表，并提示输入**发行版**、**版本**和架构。只有当你的硬件支持此架构时，你才能运行该容器。如果你的系统使用的是
    Intel CPU，则无法运行 Arm 容器，但你可以在 64 位 Intel CPU 的系统上运行 32 位 i386 容器：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can create a container based on your current distribution by selecting
    a template that matches the current installation. The templates are defined in
    `/usr/share/lxc/templates`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过选择一个与当前安装匹配的模板，来基于当前的发行版创建容器。模板定义在 `/usr/share/lxc/templates` 中：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To create a container for your current distribution, select the appropriate
    template and run the `lxc-create` command. The download process and installation
    takes several minutes. The following example skips most of the installation and
    configuration messages:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要为当前发行版创建容器，选择适当的模板并运行 `lxc-create` 命令。下载过程和安装需要几分钟时间。以下示例跳过了大多数安装和配置消息：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding command populates the new container from the repositories defined
    in your package manager. Before you can use a container, you must start it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令从你的软件包管理器定义的仓库中填充新容器。在使用容器之前，你必须启动它。
- en: Starting a container
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动容器
- en: 'The `lxc-start` command starts a container. As with other lxc commands, you
    must provide the name of the container to start:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`lxc-start` 命令启动一个容器。与其他 lxc 命令一样，你必须提供要启动的容器名称：'
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The boot sequence may hang and you may see errors similar to the following
    one. These are caused by the container''s boot sequence trying to perform graphics
    operations, such as displaying a splash screen without graphics support in the
    client:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 启动顺序可能会挂起，您可能会看到类似以下的错误。这些错误是由于容器的启动顺序尝试执行图形操作，比如在客户端没有图形支持的情况下显示启动画面所导致的：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can wait for these errors to time out and ignore them, or you can disable
    the splash screen. Disabling the splash screen varies between distributions and
    releases. The files may be in `/etc/init`, but that's not guaranteed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以等待这些错误超时并忽略它们，或者禁用启动画面。禁用启动画面在不同的发行版和版本中有所不同。文件可能位于`/etc/init`，但这并不一定。
- en: 'There are two ways to work within a container:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以在容器内工作：
- en: '`lxc-attach`: This attaches directly to a root account on a running container'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lxc-attach`：此命令直接附加到运行中的容器的root账户'
- en: '`lxc-console`: This opens a console for a login session on a running container'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lxc-console`：这将打开一个登录会话的控制台，连接到正在运行的容器'
- en: 'The first use of a container is to attach directly to create user accounts:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的第一次使用是直接附加创建用户账户：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After you''ve created a user account, log in as an unprivileged user or root
    with the `lxc-console` application:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用户账户后，请使用`lxc-console`应用程序以普通用户或root身份登录：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Stopping a container
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止容器
- en: 'The `lxc-stop` command stops a container:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`lxc-stop`命令用于停止容器：'
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Listing known containers
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出已知的容器
- en: 'The `lxc-ls` command lists the container names that are available for the current
    user. This does not list all the containers in a system, only those that the current
    user owns:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`lxc-ls`命令列出当前用户可用的容器名称。此命令不会列出系统中的所有容器，只会列出当前用户拥有的容器：'
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Displaying container information
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示容器信息
- en: 'The `lxc-info` command displays information about a container:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`lxc-info`命令显示容器的信息：'
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This command will only display information about a single container, though.
    Using a shell loop, as described in [Chapter 1](195d920d-33c2-41d6-bd33-37d75f9c37f1.xhtml), *Shell
    Something Out*, we can display information about all the containers:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但此命令仅显示单个容器的信息。通过使用Shell循环（如在[第1章](195d920d-33c2-41d6-bd33-37d75f9c37f1.xhtml)《Shell
    Something Out》中所描述的），我们可以显示所有容器的信息：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If the container is stopped, there is no status information available. Running
    containers record their CPU, memory, disk (block), I/O, and network usage. This
    tool lets you monitor your containers to see which ones are most active.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果容器已停止，则无法获得状态信息。运行中的容器会记录其CPU、内存、磁盘（块）、I/O和网络使用情况。此工具允许您监视容器，查看哪些容器最活跃。
- en: Creating an unprivileged container
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建非特权容器
- en: Unprivileged containers are recommended for normal use. There is potential for
    a badly configured container or badly configured application to allow control
    to escape from the container. Since containers invoke system calls in the host
    kernel, if the container is running as the root, the system calls will also run
    as the root. However, unprivileged containers run with normal user privileges
    and are thus safer.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐使用非特权容器进行日常操作。如果容器配置不当或应用程序配置不当，可能会导致控制权限从容器中泄露出去。由于容器会调用主机内核中的系统调用，如果容器以root身份运行，那么系统调用也将以root身份运行。然而，非特权容器以普通用户权限运行，因此更为安全。
- en: 'To create unprivileged containers, the host must support Linux Control Groups
    and uid mapping. This support is included in basic Ubuntu distributions, but it
    needs to be added to other distributions. The `cgmanager` package is not available
    in all distributions. You cannot start an unprivileged container without this
    package:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建非特权容器，主机必须支持Linux控制组和uid映射。这些支持包含在基础的Ubuntu发行版中，但其他发行版需要额外安装。`cgmanager`软件包并非所有发行版都提供。没有该软件包，无法启动非特权容器：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Start `cgmanager`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 启动`cgmanager`：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Debian systems may require that clone support be enabled. If you receive a
    `chown` error when creating a container, these lines will fix it:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Debian系统可能需要启用克隆支持。如果在创建容器时收到`chown`错误，以下行可以解决此问题：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The username of an account that''s allowed to create containers must be included
    in the `etc` mapping tables:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 允许创建容器的账户的用户名必须包含在`etc`映射表中：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: These commands add the user to the User ID and Group ID mapping tables `(/etc/subuid`
    and `/etc/subgid`) and assign UIDs from `100000 -> 165536` to the user.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将用户添加到用户ID和组ID映射表`(/etc/subuid`和`/etc/subgid`)中，并将UID从`100000 -> 165536`分配给用户。
- en: 'Next, set up the configuration file for your containers:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，设置容器的配置文件：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following lines to `~/.config/lxc/default.conf`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行添加到 `~/.config/lxc/default.conf`：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If the containers support network access, add a line to `/etc/lxc/lxc-usernet`
    to define the users who will have access to the network bridge:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果容器支持网络访问，请向 `/etc/lxc/lxc-usernet` 添加一行，以定义可以访问网络桥接器的用户：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here, `USERNAME` is the name of the user who owns the container. `veth` is
    the usual name for the virtual Ethernet device. `BRIDGENAME` is the name that''s
    displayed by `ifconfig`. It is usually either `br0` or `lxcbro`. `COUNT` is the
    number of simultaneous connections that will be allowed:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`USERNAME` 是拥有该容器的用户的名称。`veth` 是虚拟以太网设备的常用名称。`BRIDGENAME` 是 `ifconfig` 显示的名称，通常为
    `br0` 或 `lxcbro`。`COUNT` 是允许的同时连接数：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Creating an Ethernet bridge
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建以太网桥接器
- en: 'A container cannot access your Ethernet adapter directly. It requires a bridge
    between the Virtual Ethernet and the actual Ethernet. Recent Ubuntu distributions
    create an Ethernet bridge automatically when you install the lxc package. Debian
    and Fedora may require that you manually create the bridge. To create a bridge
    on Fedora, use the `libvirt` package to create a virtual bridge first:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 容器无法直接访问你的以太网适配器。它需要一个虚拟以太网与实际以太网之间的桥接。最近的 Ubuntu 发行版在安装 lxc 包时会自动创建以太网桥接器。而
    Debian 和 Fedora 可能需要你手动创建桥接器。在 Fedora 上创建桥接器时，首先使用 `libvirt` 包创建虚拟桥接器：
- en: '[PRE27]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, edit `/etc/lxc/default.conf` to reference `virbr0` instead of `lxcbr0`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，编辑 `/etc/lxc/default.conf`，将其引用 `virbr0` 而不是 `lxcbr0`：
- en: '[PRE28]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you've already created a container, edit the config file for that container
    as well.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经创建了一个容器，也可以编辑该容器的配置文件。
- en: To create a bridge on Debian systems, you must edit the network configuration
    and the container configuration files.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Debian 系统上创建桥接器，你必须编辑网络配置和容器配置文件。
- en: 'Edit `/etc/lxc/default.conf`. Comment out the default empty network and add
    a definition for the lxc bridge:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `/etc/lxc/default.conf`。注释掉默认的空网络，并为 lxc 桥接器添加定义：
- en: '[PRE29]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, create the networking bridge:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建网络桥接器：
- en: '[PRE30]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Containers created after these steps are performed will have networking enabled.
    Network support can be added to the existing containers by adding the `lxc.network`
    lines to the container's config file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行这些步骤后创建的容器将启用网络功能。可以通过向容器的配置文件中添加 `lxc.network` 行来为现有容器添加网络支持。
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'The container created by the `lxc-create` command is a directory tree that
    includes the configuration options and root filesystem for the container. Privileged
    containers are constructed under `/var/lib/lxc`. Nonprivileged containers are
    stored under `$HOME/.local/lxc`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `lxc-create` 命令创建的容器是一个目录树，包含容器的配置选项和根文件系统。特权容器构建在 `/var/lib/lxc` 下。非特权容器存储在
    `$HOME/.local/lxc` 下：
- en: '[PRE31]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can examine or modify a container''s configuration by editing the config
    file in the container''s top directory:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过编辑容器顶层目录中的配置文件来检查或修改容器的配置：
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `rootfs` folder contains a root filesystem for the container. This is the
    root (`/`) folder of a running container:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`rootfs` 文件夹包含容器的根文件系统。这是运行中的容器的根（`/`）文件夹：'
- en: '[PRE33]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You can populate a container by adding, deleting, or modifying files in the
    `rootfs` folder. For instance, to run web services, a container might have basic
    web services installed via the package manager and the actual data of each service
    installed by copying files to the `rootfs`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过添加、删除或修改 `rootfs` 文件夹中的文件来填充容器。例如，要运行 Web 服务，容器可能通过包管理器安装了基本的 Web 服务，并通过将文件复制到
    `rootfs` 来安装每个服务的实际数据。
- en: Using Docker
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker
- en: The `lxc` containers are complex and can be difficult to work with. These issues
    led to the Docker package. Docker uses the same underlying Linux functionalities
    of `namespaces` and `cgroups` to create lightweight containers.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`lxc` 容器复杂，使用起来可能比较困难。这些问题促成了 Docker 包的出现。Docker 使用相同的底层 Linux 功能（如 `namespaces`
    和 `cgroups`）来创建轻量级容器。'
- en: Docker is only officially supported on 64-bit systems, making `lxc` the better
    choice for legacy systems.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 仅在 64 位系统上官方支持，因此对于旧系统来说，`lxc` 是更好的选择。
- en: The major difference between a Docker container and an lxc container is that
    a Docker container commonly runs one process, while an lxc container runs many.
    To deploy a database-backed web server, you need at least two Docker containers–one
    for the web server and one for the database server–but only one lxc container.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器和 lxc 容器之间的主要区别是，Docker 容器通常只运行一个进程，而 lxc 容器运行多个进程。要部署一个数据库支持的 web
    服务器，你至少需要两个 Docker 容器——一个用于 web 服务器，一个用于数据库服务器——但只需要一个 lxc 容器。
- en: The Docker philosophy makes it easy to construct systems from smaller building
    blocks, but it can make it harder to develop blocks since so many Linux utilities
    are expected to run inside a full Linux system with `crontab` entries to carry
    out operations such as cleanup, log rotation, and so on.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 的理念使得从更小的构建模块构建系统变得简单，但它也可能使开发模块变得更加困难，因为许多 Linux 工具期望在一个完整的 Linux 系统中运行，并且需要有
    `crontab` 条目来执行诸如清理、日志轮换等操作。
- en: Once a Docker container is created, it will run exactly as expected on other
    Docker servers. This makes it very easy to deploy Docker containers on cloud clusters
    or remote sites.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Docker 容器创建完成，它将在其他 Docker 服务器上按照预期运行。这使得在云集群或远程站点部署 Docker 容器变得非常简单。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Docker is not installed with most distributions. It is distributed via Docker's
    repositories. Using these requires adding new repositories to your package manager
    with new checksums.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 并没有在大多数发行版中预安装。它是通过 Docker 的软件仓库进行分发的。使用这些仓库需要将新的仓库添加到你的软件包管理器中，并更新校验和。
- en: Docker has instructions for each distribution and different releases on their
    main page, which is available at [http://docs.docker.com](http://docs.docker.com).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 为每个发行版和不同版本提供安装说明，相关信息可以在其主页 [http://docs.docker.com](http://docs.docker.com)
    查找到。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'When Docker is first installed, it is not running. You must start the server
    with a command such as the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Docker 首次安装时，它是没有运行的。你必须使用如下命令启动服务器：
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The Docker command has many subcommands that provide functionality. These commands
    will find a Docker container and download and run it. Here''s a bit about the
    subcommands:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 命令有许多子命令提供不同的功能。这些命令将查找 Docker 容器并下载和运行它。以下是关于这些子命令的一些介绍：
- en: '`# docker search`: This searches Docker archives for containers with names
    that match a key'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`# docker search`：这会在 Docker 存档中搜索与关键字匹配的容器'
- en: '`# docker pull`: This pulls the named container to your system'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`# docker pull`：这会将指定的容器拉取到你的系统中'
- en: '`# docker run`: This runs an application in a container'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`# docker run`：这会在容器中运行一个应用程序'
- en: '`# docker ps`: This lists the running Docker containers'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`# docker ps`：这会列出正在运行的 Docker 容器'
- en: '`# docker attach`: This attaches to a running container'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`# docker attach`：这会附加到一个正在运行的容器'
- en: '`# docker stop`: This stops a container'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`# docker stop`：这会停止一个容器'
- en: '`# docker rm`: This removes a container'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`# docker rm`：这会移除一个容器'
- en: The default Docker installation requires that the `docker` command be run either
    as a `root` or using `sudo`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 Docker 安装要求 `docker` 命令必须以 `root` 用户身份运行，或者使用 `sudo`。
- en: Each of these commands have a `man` page. This page is named by combining the
    command and subcommand with a dash. To view the `docker search` man page, use
    `man docker-search`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命令都有一个 `man` 页面。这个页面的名称由命令和子命令通过一个短横线连接组成。要查看 `docker search` 的 man 页面，使用
    `man docker-search`。
- en: The next recipe demonstrates how to download a Docker container and run it.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 下一条食谱展示了如何下载并运行一个 Docker 容器。
- en: Finding a container
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找容器
- en: 'The `docker search` command returns a list of Docker containers that match
    a search term:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker search` 命令返回一个符合搜索条件的 Docker 容器列表：'
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here TERM is an alphanumeric string (no wild cards). The search command will
    return up to 25 containers that include the string in their name:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 TERM 是一个字母数字字符串（不允许使用通配符）。搜索命令将返回最多 25 个包含该字符串的容器：
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Here STARS represent a rating for the container. The containers are ordered
    with the highest rating first.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的 STARS 表示容器的评分。容器按评分从高到低排序。
- en: Downloading a container
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载容器
- en: 'The `docker pull` command downloads a container from the Docker registry. By
    default, it pulls data from Docker''s public registry at `registry-1.docker.io`.
    The downloaded container is added to your system. The containers are commonly
    stored under /`var/lib/docker`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker pull` 命令从 Docker 注册表下载一个容器。默认情况下，它从 Docker 的公共注册表 `registry-1.docker.io`
    拉取数据。下载的容器会被添加到你的系统中。容器通常存储在 /`var/lib/docker` 下：'
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Starting a Docker container
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 Docker 容器
- en: The `docker run` command starts a process in a container. Commonly, the process
    is a `bash` shell that allows you to attach to the container and start other processes.
    This command returns a hash value that defines this session.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run` 命令在容器中启动一个进程。通常，这个进程是一个 `bash` shell，允许你附加到容器并启动其他进程。该命令返回一个哈希值，用于定义此会话。'
- en: When a Docker container starts, a network connection is created for it automatically.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Docker 容器启动时，会自动为它创建一个网络连接。
- en: 'The syntax for the run command is as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令的语法如下：
- en: '[PRE38]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `docker run` command supports many options, including:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run` 命令支持许多选项，包括：'
- en: '`-t`: Allocate a pseudo tty (by default, false)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t`：分配一个伪 tty（默认值为 false）'
- en: '`-i`: Keep an interactive session open while unattached'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`：保持交互式会话在未附加的状态下开启'
- en: '`-d`: Start the container detached (running in the background)'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d`：启动容器时使其分离（在后台运行）'
- en: '`--name`: The name to assign to this instance'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--name`：为此实例指定名称'
- en: 'This example starts the bash shell in the container that was previously pulled:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子启动了之前拉取的容器中的 bash shell：
- en: '[PRE39]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Listing the Docker sessions
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出 Docker 会话
- en: 'The `docker p`s command lists the currently running Docker sessions:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker ps` 命令列出当前正在运行的 Docker 会话：'
- en: '[PRE40]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `-a` option will list all the Docker containers on your system, whether
    they are running or not.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`-a` 选项将列出系统上所有的 Docker 容器，无论它们是否正在运行。'
- en: Attaching your display to a running Docker container
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将显示器附加到运行中的 Docker 容器
- en: The `docker attach` command attaches your display to the `tty` session in a
    running container. You need to run as the root within this container.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker attach` 命令将你的显示器附加到正在运行的容器中的 `tty` 会话。你需要以 root 用户身份在此容器内运行。'
- en: To exit an attached session, type `^P^Q`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出附加的会话，输入`^P^Q`。
- en: 'This example creates an HTML page and starts the Apache web server in the container:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子在容器中创建一个 HTML 页面并启动 Apache web 服务器：
- en: '[PRE41]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Browsing to `172.17.0.5` will show the `It's Alive` page.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到 `172.17.0.5` 将显示 `It's Alive` 页面。
- en: Stopping a Docker session
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止 Docker 会话
- en: 'The `docker stop` command terminates a running Docker session:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker stop` 命令终止一个正在运行的 Docker 会话：'
- en: '[PRE42]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Removing a Docker instance
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除 Docker 实例
- en: 'The `docker rm` command removes a container. The container must be stopped
    before removing it. A container can be removed either by name or identifier:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker rm` 命令删除一个容器。删除容器之前，容器必须先停止。可以通过名称或标识符删除容器：'
- en: '[PRE43]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Alternatively, you can use this:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用以下命令：
- en: '[PRE44]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: The Docker containers use the same `namespace` and `cgroup` kernel support as
    that of the `lxc` containers. Initially, Docker was a layer over `lxc`, but it
    has since evolved into a unique system.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器使用与 `lxc` 容器相同的 `namespace` 和 `cgroup` 内核支持。最初，Docker 是 `lxc` 的一层，但它后来发展成了一个独立的系统。
- en: The main configuration files for the server are stored at /`var/lib/docker`
    and `/etc/docker`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的主要配置文件存储在 `/var/lib/docker` 和 `/etc/docker` 中。
- en: Using Virtual Machines in Linux
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 中使用虚拟机
- en: There are four options for using VMs in Linux. The three open source options
    are KVM, XEN, and VirtualBox. Commercially, VMware supplies a virtual engine that
    can be hosted in Linux and an executive that can run VMs.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中使用虚拟机有四种选择。三种开源选项是 KVM、XEN 和 VirtualBox。商业上，VMware 提供了一个可以托管在 Linux
    上并运行虚拟机的虚拟引擎和执行程序。
- en: VMware has been supporting VMs longer than anyone else. They support Unix, Linux,
    Mac OS X, and Windows as hosts and Unix, Linux, and Windows as guest systems.
    For commercial use, VMware Player or VMWare Workstation are the two best choices
    you have.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: VMware 支持虚拟机的时间比任何人都长。它们支持 Unix、Linux、Mac OS X 和 Windows 作为主机系统，并支持 Unix、Linux
    和 Windows 作为客体系统。对于商业用途，VMware Player 或 VMware Workstation 是你最好的选择。
- en: KVM and VirtualBox are the two most popular VM engines for Linux. KVM delivers
    better performance, but it requires a CPU that supports virtualization (Intel
    VT-x). Most modern Intel and AMD CPUs support these features. VirtualBox has the
    advantage of being ported to Windows and Mac OS X, allowing you to move a virtual
    machine to another platform easily. VirtualBox does not require VT-x support,
    making it suitable for legacy systems as well as modern systems.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: KVM 和 VirtualBox 是 Linux 中最流行的虚拟机引擎。KVM 提供更好的性能，但它需要支持虚拟化的 CPU（Intel VT-x）。大多数现代的
    Intel 和 AMD CPU 都支持这些功能。VirtualBox 的优势在于它被移植到 Windows 和 Mac OS X，使得你可以轻松地将虚拟机迁移到其他平台。VirtualBox
    不需要 VT-x 支持，这使得它适用于旧系统和现代系统。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: VirtualBox is supported by most distributions, but it may not be part of these
    distributions' default package repositories.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟盒子（VirtualBox）被大多数发行版支持，但可能不是这些发行版的默认软件包仓库的一部分。
- en: 'To install VirtualBox on Debian 9, you need to add the virtualbox.org repository
    to the sites that apt-get will accept packages from:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Debian 9上安装VirtualBox，您需要将virtualbox.org仓库添加到apt-get将接受的软件包来源中：
- en: '[PRE45]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `curl` package is required to install the proper keys. If this is not already
    present, install it before adding the key and updating the repository information:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 安装正确的密钥需要`curl`软件包。如果它还没有安装，请在添加密钥和更新仓库信息之前先安装它：
- en: '[PRE46]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Once the repository is updated, you can install VirtualBox with `apt-get`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦仓库更新完毕，您可以通过`apt-get`安装VirtualBox：
- en: '[PRE47]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: When VirtualBox is installed, it creates an item in the start menu. It may be
    under System or Applications/System Tools. The GUI can be started from a terminal
    session as `virtualbox` or as `VirtualBox`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 安装VirtualBox后，它会在开始菜单中创建一个项目。它可能位于系统或应用程序/系统工具下。您可以从终端会话启动GUI，命令是`virtualbox`或`VirtualBox`。
- en: The VirtualBox GUI makes it easy to create and run VMs. The GUI has a button
    named New in the upper-left corner; this is used to create a new, empty VM. The
    wizard prompts you for information such as memory and disk limits for the new
    VM.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: VirtualBox的GUI使得创建和运行虚拟机变得容易。GUI的左上角有一个名为“新建”的按钮；它用于创建一个新的空虚拟机。向导会提示您输入诸如内存和磁盘限制等信息。
- en: Once the VM is created, the Start button is activated. The default settings
    connect the virtual machine's CD-ROM to the host's CD-ROM. You can put an installation
    disk in the CD-ROM and click on Start to install the operating system on a new
    VM.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦虚拟机创建完成，启动按钮将被激活。默认设置将虚拟机的CD-ROM连接到主机的CD-ROM。您可以将安装盘放入CD-ROM中，然后点击启动以在新虚拟机上安装操作系统。
- en: Linux in the cloud
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云中的Linux
- en: There are two primary reasons to use a cloud server. Service providers use a
    commercial cloud service, such as Amazon's AWS, because it lets them easily ramp
    up their resources when demand is higher and ramp down their costs when demand
    is lower. Cloud storage providers, such as Google Docs, allow users to access
    their data from any device and share data with others.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用云服务器的主要原因有两个。服务提供商使用商业云服务，如亚马逊的AWS，因为它可以在需求增加时轻松扩展资源，在需求减少时降低成本。云存储服务提供商，如Google
    Docs，允许用户从任何设备访问他们的数据并与他人共享数据。
- en: The OwnCloud package transforms your Linux server into a private cloud storage
    system. You can use an OwnCloud server as a private corporate file sharing system
    to share files with friends or as a remote backup for your phone or tablet.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: OwnCloud软件包将您的Linux服务器转变为一个私有云存储系统。您可以将OwnCloud服务器作为私人企业文件共享系统，与朋友共享文件，或者作为手机或平板的远程备份。
- en: The OwnCloud project forked in 2016\. The NextCloud server and applications
    are expected to use the same protocol as that of OwnCloud and to be interchangeable.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: OwnCloud项目于2016年分叉。NextCloud服务器和应用程序预计将使用与OwnCloud相同的协议，并且是可以互换的。
- en: Getting ready
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Running the OwnCloud package requires a **LAMP** (**Linux, Apache, MySQL, PHP**)
    installation. These packages are supported by all Linux distributions, though
    they may not be installed by default. Administering and installing MySQL is discussed
    in [Chapter 10](20129291-0a5b-43a8-ad0c-54c74992d0e3.xhtml), *Administration Calls*.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 运行OwnCloud软件包需要安装**LAMP**（**Linux, Apache, MySQL, PHP**）。这些软件包被所有Linux发行版所支持，尽管它们可能不是默认安装的。[第10章](20129291-0a5b-43a8-ad0c-54c74992d0e3.xhtml)中讨论了MySQL的管理和安装，*管理调用*。
- en: Most distributions do not include the OwnCloud server in their repositories.
    Instead, the OwnCloud project maintains repositories to support the distributions.
    You'll need to attach OwnCloud to your RPM or apt repository before you download.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数发行版不将OwnCloud服务器包含在其仓库中。相反，OwnCloud项目维护仓库以支持这些发行版。在下载之前，您需要将OwnCloud附加到您的RPM或apt仓库中。
- en: Ubuntu 16.10
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu 16.10
- en: 'The following steps will install the LAMP stack on a Ubuntu 16.10 system. Similar
    commands will work for any Debian-based system. Unfortunately, package names sometimes
    vary between releases:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将在Ubuntu 16.10系统上安装LAMP堆栈。类似的命令适用于任何基于Debian的系统。不幸的是，软件包名称在不同版本之间有时会有所不同：
- en: '[PRE48]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'OwnCloud requires security beyond default settings. The `mysql_secure_installation`
    script will configure MySQL properly:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: OwnCloud需要超出默认设置的安全性。`mysql_secure_installation`脚本将正确配置MySQL：
- en: '[PRE49]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Configure the `OwnCloud` repository:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 配置`OwnCloud`仓库：
- en: '[PRE50]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Once the repository is in place, apt will install and start the server:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦仓库配置好，apt将安装并启动服务器：
- en: '[PRE51]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: OpenSuSE Tumbleweed
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenSuSE Tumbleweed
- en: Install the **LAMP** stack with **Yast2**. Open `yast2`, select Software Management,
    and install `apache2`, `mysql`, and `owncloud-client`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **Yast2** 安装 **LAMP** 堆栈。打开 `yast2`，选择软件管理，安装 `apache2`、`mysql` 和 `owncloud-client`。
- en: Next, select the `System` tab, and from this tab, select the `Services Manager`
    tab. Confirm that the `mysql` and `apache2` services are enabled and active.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择 `System` 选项卡，并从该选项卡选择 `Services Manager` 选项卡。确认 `mysql` 和 `apache2` 服务已启用并处于活动状态。
- en: These steps install the OwnCloud client that will let you synchronize your workspace
    to an OwnCloud server and the system requirements for a server.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将安装 OwnCloud 客户端，允许你将工作区与 OwnCloud 服务器同步，并提供服务器的系统要求。
- en: 'OwnCloud requires security beyond default settings. The `mysql_secure_installation`
    script will configure MySQL properly:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: OwnCloud 需要比默认设置更高的安全性。`mysql_secure_installation` 脚本将正确配置 MySQL：
- en: '[PRE52]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following commands will install and start the OwnCloud server. The first
    three commands configure `zypper` to include the OwnCloud repository. Once these
    repositories are added, the Owncloud package is installed like any other package:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将安装并启动 OwnCloud 服务器。前三个命令将配置 `zypper` 以包括 OwnCloud 仓库。一旦这些仓库被添加，OwnCloud
    包将像安装其他软件包一样安装：
- en: '[PRE53]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: How to do it...
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Once OwnCloud is installed, you can configure an admin account, and from there,
    add user accounts. The NextCloud Android app will communicate with the OwnCloud
    server as well as the NextCloud server.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 OwnCloud，你可以配置一个管理员账户，并从那里添加用户账户。NextCloud Android 应用将与 OwnCloud 服务器以及
    NextCloud 服务器进行通信。
- en: Configuring OwnCloud
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 OwnCloud
- en: 'Once `owncloud` is installed, you can configure it by browsing to your local
    address:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `owncloud` 安装完成，你可以通过浏览器访问本地地址来进行配置：
- en: '[PRE54]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The initial screen will prompt you for an admin username and password. You can
    log in as the user to create backups and copy files between phones, tablets, and
    computers.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 初始界面将提示你输入管理员用户名和密码。你可以以用户身份登录，以创建备份并在手机、平板电脑和电脑之间复制文件。
- en: There's more...
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The bare installation process we just discussed is suitable for testing. OwnCloud
    and NextCloud will use HTTPS sessions if HTTPS support is available. Enabling
    HTTPS support requires an X.509 security certificate.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚讨论的基本安装过程适合测试。如果支持 HTTPS，OwnCloud 和 NextCloud 将使用 HTTPS 会话。启用 HTTPS 支持需要一个
    X.509 安全证书。
- en: You can purchase a security certificate from one of the dozens of commercial
    providers, self-sign a certificate for your own use, or create a free certificate
    with **Let's Encrypt** (http://letsencrypt.org).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从众多商业提供商中购买安全证书，或者为自己的使用自签证书，或者通过 **Let's Encrypt**（http://letsencrypt.org）创建一个免费的证书。
- en: A self-signed certificate is adequate for testing, but most browsers and phone
    apps will flag this as an untrusted site. Let's Encrypt is a service of the Internet
    Security Research Group (ISRG). The certificates they generate are fully registered
    and all applications can accept them.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 自签证书足以用于测试，但大多数浏览器和手机应用会标记此为不受信任的网站。Let's Encrypt 是互联网安全研究小组（ISRG）提供的服务。他们生成的证书是完全注册的，所有应用程序都可以接受它们。
- en: The first step in acquiring a certificate is verifying that your site is what
    you claim it is. Let's Encrypt certificates are validated using a system called
    Automated Certificate Management Environment (ACME). The ACME system creates a
    hidden file on your web server, tells the **Certificate Authority** (**CA**) where
    that file is, and the CA confirms that the expected file is there. This proves
    that you have access to the web server and that DNS records point to the proper
    hardware.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 获取证书的第一步是验证你的网站是否符合声明的身份。Let's Encrypt 证书使用名为自动证书管理环境（ACME）的系统进行验证。ACME 系统会在你的网页服务器上创建一个隐藏文件，并告知
    **证书颁发机构**（**CA**）该文件的位置，CA 会确认该文件是否存在。这证明你可以访问网页服务器，并且 DNS 记录指向正确的硬件。
- en: 'If you are using a common web server, such as Nginx or Apache, the simplest
    way to set up your certificates is with the `certbot` created by EFF:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是常见的网页服务器，如 Nginx 或 Apache，设置证书的最简单方法是使用 EFF 创建的 `certbot`：
- en: '[PRE55]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This robot will add new packages and install your new certificate in the proper
    place.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这个机器人将添加新的软件包并将你的新证书安装到正确的位置。
- en: If you are using a less common server or have a non-standard installation, the
    `getssl` package is more configurable. The `getssl` package is a bash script that
    reads two configuration files to automate the creation of the certificate. Download
    the package from here and unzip from `https://github.com/srvrco/getssl`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是不太常见的服务器或有非标准安装，`getssl` 包是更具可配置性的。`getssl` 包是一个 bash 脚本，它读取两个配置文件以自动创建证书。可以从此处下载并解压该包：`https://github.com/srvrco/getssl`。
- en: Unzipping `getssl.zip` creates a folder named `getssl_master`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 解压 `getssl.zip` 会创建一个名为 `getssl_master` 的文件夹。
- en: 'Generating and installing the certificates requires three steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 生成和安装证书需要三个步骤：
- en: Create the default configuration files with `getssl -c DOMAIN.com`.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `getssl -c DOMAIN.com` 创建默认配置文件。
- en: Edit the configuration files.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑配置文件。
- en: Create the certificates.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建证书。
- en: 'Start by `cd-ing` to the `getssl_master` folder and creating the configuration
    files:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过 `cd` 命令进入 `getssl_master` 文件夹并创建配置文件：
- en: '[PRE56]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Replace `DOMAIN` with the name of your domain.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `DOMAIN` 替换为你的域名。
- en: This step creates the `$HOME/.getssl` and `$HOME/.getssl/DOMAIN.com` folders
    and creates a file named `getssl.cfg` in both of these. Each of these files must
    be edited.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步会创建 `$HOME/.getssl` 和 `$HOME/.getssl/DOMAIN.com` 文件夹，并在这两个文件夹中创建名为 `getssl.cfg`
    的文件。每个文件都必须进行编辑。
- en: 'Edit `~/.getssl/getssl.cfg` and add your email address:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `~/.getssl/getssl.cfg` 文件，并添加你的电子邮件地址：
- en: '[PRE57]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The default values in the rest of the fields are suitable for most sites.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 其余字段中的默认值适用于大多数站点。
- en: Next, edit `~/.getssl/DOMAIN.com/getssl.cfg`. There are several fields to modify
    in this file.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编辑 `~/.getssl/DOMAIN.com/getssl.cfg` 文件。此文件中有多个字段需要修改。
- en: The main change is to set the Acme Challenge Location (ACL) field. The ACME
    protocol will try to find a file in [http://www.DOMAIN.com/.well-known/acme-challenge](http://www.DOMAIN.com/.well-known/acme-challenge).
    The ACL value is the physical location of that folder on your system. You must
    create the `.well-known` and .`well-known/acme-challenge` folders and set ownership
    if they don't exist.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的变化是设置 Acme Challenge Location (ACL) 字段。ACME 协议将尝试在 [http://www.DOMAIN.com/.well-known/acme-challenge](http://www.DOMAIN.com/.well-known/acme-challenge)
    中查找一个文件。ACL 值是该文件夹在系统中的物理位置。如果这些文件夹不存在，你必须创建 `.well-known` 和 `.well-known/acme-challenge`
    文件夹并设置其所有权。
- en: 'If your web pages are kept in `/var/web/DOMAIN`, you could create new folders
    as follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的网页保存在 `/var/web/DOMAIN` 中，你可以按以下方式创建新的文件夹：
- en: '[PRE58]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The ACL lines would resemble the following:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: ACL 行应类似如下：
- en: '[PRE59]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'You must also define where the certificates are to be placed. This location
    must match the configuration option in your web server. For instance, if certificates
    are kept in `/var/web/certs`, the definitions will resemble this:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须定义证书将被放置的位置。这个位置必须与 web 服务器中的配置选项匹配。例如，如果证书保存在 `/var/web/certs` 中，定义应类似如下：
- en: '[PRE60]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'You must set the type of test that the ACME protocol will use. These are commented
    out at the bottom of the configuration file. Using the default values are usually
    best:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须设置 ACME 协议将使用的测试类型。这些设置已在配置文件的底部注释掉。通常使用默认值是最好的：
- en: '[PRE61]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'After these edits are complete, test them by running this:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些编辑后，运行以下命令进行测试：
- en: '[PRE62]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This command resembles the first one, but it does not include the `-c` (create)
    option. You can repeat this command until you've corrected any errors and are
    happy with the results.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令类似于第一个，但不包括 `-c`（创建）选项。你可以重复运行这个命令，直到修正错误并对结果满意为止。
- en: The default behavior of the `getssl` script is to generate a test certificate
    that's not really valid. This is done because Let's Encrypt limits the number
    of actual certificates it will generate for a site to avoid abuse.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`getssl` 脚本的默认行为是生成一个无效的测试证书。这是因为 Let''s Encrypt 限制了每个站点实际证书的生成数量，以防止滥用。'
- en: 'Once the configuration files are correct, edit them again and change the server–from
    the Staging server to the actual Let''s Encrypt server:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置文件正确，再次编辑它们并将服务器从 Staging 服务器更改为实际的 Let's Encrypt 服务器：
- en: '[PRE63]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Then, rerun the `getssl` script one last time with the `-f` option to force
    it to rebuild and replace the previous files:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，再次运行 `getssl` 脚本，并使用 `-f` 选项强制它重新构建并替换之前的文件：
- en: '[PRE64]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: You may need to restart your web server or reboot your system before the new
    files are recognized.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的文件被识别之前，你可能需要重启 web 服务器或重启系统。

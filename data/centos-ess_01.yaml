- en: Chapter 1. CoreOS – Overview and Installation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：CoreOS – 概述与安装
- en: CoreOS is often described as Linux for massive server deployments, but it can
    also run easily as a single host on bare-metal, cloud servers, and as a virtual
    machine on your computer as well. It is designed to run application containers
    as `docker` and `rkt`, and you will learn about its main features later in this
    book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 通常被描述为大规模服务器部署的 Linux，但它也可以轻松地作为单一主机运行在裸金属、云服务器上，甚至可以作为虚拟机在你的计算机上运行。它旨在运行
    `docker` 和 `rkt` 应用容器，稍后你将在本书中了解它的主要功能。
- en: This book is a practical, example-driven guide to help you learn about the essentials
    of the CoreOS Linux operating system. We assume that you have experience with
    VirtualBox, Vagrant, Git, Bash shell scripting and the command line (terminal
    on UNIX-like computers), and you have already installed VirtualBox, Vagrant, and
    git on your Mac OS X or Linux computer, which will be needed for the first chapters.
    As for a cloud installation, we will use Google Cloud's Compute Engine instances.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是一本实用的、以示例为驱动的指南，帮助你学习 CoreOS Linux 操作系统的基础知识。我们假设你有 VirtualBox、Vagrant、Git、Bash
    脚本和命令行（UNIX 类计算机的终端）的经验，并且已经在 Mac OS X 或 Linux 计算机上安装了 VirtualBox、Vagrant 和 git，这些将是前几章所需的工具。至于云安装，我们将使用
    Google Cloud 的 Compute Engine 实例。
- en: By the end of this book, you will hopefully be familiar with setting up CoreOS
    on your laptop or desktop, and on the cloud. You will learn how to set up a local
    computer development machine and a cluster on a local computer and in the cloud.
    Also, we will cover `etcd`, `systemd`, `fleet`, cluster management, deployment
    setup, and production clusters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本书结束时，你应该已经熟悉如何在你的笔记本或台式机以及云端上设置 CoreOS。你将学习如何设置本地计算机开发机器以及本地和云中的集群。此外，我们还将涵盖
    `etcd`、`systemd`、`fleet`、集群管理、部署设置和生产集群等内容。
- en: Also, the last chapter will introduce Google Kubernetes. This is an open source
    orchestration system for `docker` and `rkt` containers and allows to manage them
    as a single system on on compute clusters.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，最后一章将介绍 Google Kubernetes。这是一个开源的容器编排系统，用于管理 `docker` 和 `rkt` 容器，并允许在计算集群中将它们作为一个整体进行管理。
- en: In this chapter, you will learn how CoreOS works and how to carry out a basic
    CoreOS installation on your laptop or desktop with the help of VirtualBox and
    Vagrant.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你将学习 CoreOS 的工作原理，并通过 VirtualBox 和 Vagrant 的帮助，在你的笔记本或台式机上进行基本的 CoreOS 安装。
- en: 'We will basically cover two topics in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将基本讨论两个主题：
- en: An overview of CoreOS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoreOS 概述
- en: Installing the CoreOS virtual machine
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 CoreOS 虚拟机
- en: An overview of CoreOS
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CoreOS 概述
- en: CoreOS is a minimal Linux operation system built to run `docker` and `rkt` containers
    (application containers). By default, it is designed to build powerful and easily
    manageable server clusters. It provides automatic, very reliable, and stable updates
    to all machines, which takes away a big maintenance headache from `sysadmins`.
    And, by running everything in application containers, such setup allows you to
    very easily scale servers and applications, replace faulty servers in a fraction
    of a second, and so on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 是一个最小化的 Linux 操作系统，旨在运行 `docker` 和 `rkt` 容器（应用容器）。默认情况下，它被设计用于构建强大且易于管理的服务器集群。它为所有机器提供自动、非常可靠且稳定的更新，从而减轻了
    `sysadmins` 的维护负担。而且，通过将一切都运行在应用容器中，这种设置使得你可以非常轻松地扩展服务器和应用，替换故障的服务器仅需几分之一秒，等等。
- en: How CoreOS works
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CoreOS 如何工作
- en: 'CoreOS has no package manager, so everything needs to be installed and used
    via `docker` containers. Moreover, it is 40 percent more efficient in RAM usage
    than an average Linux installation, as shown in this diagram:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 没有包管理器，因此一切都需要通过 `docker` 容器进行安装和使用。此外，CoreOS 在 RAM 使用效率上比普通 Linux 安装高出
    40%，如下图所示：
- en: '![How CoreOS works](img/image00104.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![CoreOS 如何工作](img/image00104.jpeg)'
- en: CoreOS utilizes an active/passive dual-partition scheme to update itself as
    a single unit, instead of using a package-by-package method. Its root partition
    is read-only and changes only when an update is applied. If the update is unsuccessful
    during reboot time, then it rolls back to the previous boot partition. The following
    image shows OS updated gets applied to partition B (passive) and after reboot
    it becomes the active to boot from.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 使用主动/被动双分区方案进行更新，将其作为一个整体进行更新，而不是采用逐个包的方法。其根分区是只读的，只有在应用更新时才会发生更改。如果更新在重启时失败，它将回滚到之前的启动分区。下图展示了操作系统更新被应用到
    B 分区（被动）并在重启后变为启动用的活动分区。
- en: '![How CoreOS works](img/image00105.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![CoreOS 如何工作](img/image00105.jpeg)'
- en: The `docker` and `rkt` containers run as applications on CoreOS. Containers
    can provide very good flexibility for application packaging and can start very
    quickly—in a matter of milliseconds. The following image shows the simplicity
    of CoreOS. Bottom part is Linux OS, the second level is `etcd/fleet` with docker
    daemon and the top level are running containers on the server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker` 和 `rkt` 容器作为应用程序在 CoreOS 上运行。容器为应用程序打包提供了非常好的灵活性，且能够非常快速地启动——仅需几毫秒。下图展示了
    CoreOS 的简洁性。底层是 Linux 操作系统，第二层是带有 docker 守护进程的 `etcd/fleet`，顶层是服务器上运行的容器。'
- en: '![How CoreOS works](img/image00106.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![CoreOS 如何工作](img/image00106.jpeg)'
- en: By default, CoreOS is designed to work in a clustered form, but it also works
    very well as a single host. It is very easy to control and run application containers
    across cluster machines with `fleet` and use the `etcd` service discovery to connect
    them as it shown in the following image.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，CoreOS 被设计为以集群形式工作，但它也能很好地作为单个主机工作。通过 `fleet` 可以非常容易地跨集群机器控制和运行应用容器，并使用
    `etcd` 服务发现将它们连接在一起，正如下图所示。
- en: '![How CoreOS works](img/image00107.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![CoreOS 如何工作](img/image00107.jpeg)'
- en: CoreOS can be deployed easily on all major cloud providers, for example, Google
    Cloud, Amazon Web Services, Digital Ocean, and so on. It runs very well on bare-metal
    servers as well. Moreover, it can be easily installed on a laptop or desktop with
    Linux, Mac OS X, or Windows via Vagrant, with VirtualBox or VMware virtual machine
    support.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 可以轻松部署在所有主要的云服务提供商上，例如 Google Cloud、Amazon Web Services、Digital Ocean
    等等。它在裸金属服务器上也运行得非常好。此外，它还可以通过 Vagrant，使用 VirtualBox 或 VMware 虚拟机支持，轻松安装在运行 Linux、Mac
    OS X 或 Windows 的笔记本或台式机上。
- en: This short overview should throw some light on what CoreOS is about and what
    it can do. Let's now move on to the real stuff and install CoreOS on to our laptop
    or desktop machine.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这段简短的概述应该能帮助你理解 CoreOS 的基本概念及其功能。接下来，让我们进入实际操作，安装 CoreOS 到我们的笔记本或台式机上。
- en: Installing the CoreOS virtual machine
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 CoreOS 虚拟机
- en: To use the CoreOS virtual machine, you need to have VirtualBox, Vagrant, and
    git installed on your computer.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 CoreOS 虚拟机，你需要在计算机上安装 VirtualBox、Vagrant 和 git。
- en: In the following examples, we will install CoreOS on our local computer, which
    will serve as a virtual machine on VirtualBox.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们将在本地计算机上安装 CoreOS，这将作为 VirtualBox 上的虚拟机。
- en: Okay, let's get started!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始吧！
- en: Cloning the coreos-vagrant GitHub project
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆 coreos-vagrant GitHub 项目
- en: Let's clone this project and get it running.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们克隆这个项目并启动它。
- en: 'In your terminal (from now on, we will use just the terminal phrase and use
    `$` to label the terminal prompt), type the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中（从现在开始，我们将只使用终端短语，并用 `$` 来标记终端提示符），输入以下命令：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will clone from the GitHub repository to the `coreos-vagrant` folder on
    your computer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从 GitHub 仓库克隆到你计算机上的 `coreos-vagrant` 文件夹。
- en: Working with cloud-config
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 cloud-config
- en: To start even a single host, we need to provide some `config` parameters in
    the `cloud-config` format via the user data file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动单个主机，我们需要通过用户数据文件以 `cloud-config` 格式提供一些 `config` 参数。
- en: 'In your terminal, type this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的终端中，输入以下命令：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The user data should have content like this (the `coreos-vagrant` Github repository
    is constantly changing, so you might see a bit of different content when you clone
    the repository):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 用户数据应该包含类似这样的内容（`coreos-vagrant` GitHub 仓库不断更新，所以当你克隆仓库时，可能会看到稍有不同的内容）：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Replace the text between the `etcd2:` and `fleet:` lines to look this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `etcd2:` 和 `fleet:` 行之间的文本替换成如下内容：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also download the latest `user-data` file from [https://github.com/rimusz/coreos-essentials-book/blob/master/Chapter1/user-data](https://github.com/rimusz/coreos-essentials-book/blob/master/Chapter1/user-data).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以从 [https://github.com/rimusz/coreos-essentials-book/blob/master/Chapter1/user-data](https://github.com/rimusz/coreos-essentials-book/blob/master/Chapter1/user-data)
    下载最新的 `user-data` 文件。
- en: This should be enough to bootstrap a single-host CoreOS VM with `etcd`, `fleet`,
    and `docker` running there.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该足以启动一个带有 `etcd`、`fleet` 和 `docker` 运行的单主机 CoreOS 虚拟机。
- en: We will cover `cloud-config`, `etcd` and `fleet` in more detail in later chapters.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续章节中更详细地讨论 `cloud-config`、`etcd` 和 `fleet`。
- en: Startup and SSH
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动和 SSH
- en: It's now time to boot our CoreOS VM and log in to its console using `ssh`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是启动我们的 CoreOS 虚拟机并使用 `ssh` 登录其控制台的时候了。
- en: 'Let''s boot our first CoreOS VM host. To do so, using the terminal, type the
    following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动我们的第一个 CoreOS 虚拟机主机。为此，使用终端输入以下命令：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will trigger vagrant to download the latest CoreOS alpha (this is the default
    channel set in the `config.rb` file, and it can easily be changed to beta, or
    stable) channel image and the `lunch` VM instance.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将触发vagrant下载最新的CoreOS alpha版本（这是`config.rb`文件中设置的默认频道，可以很容易地更改为beta或稳定版本）镜像和`lunch`虚拟机实例。
- en: 'You should see something like this as the output in your terminal:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在终端中看到类似以下的输出：
- en: '![Startup and SSH](img/image00108.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![启动和SSH](img/image00108.jpeg)'
- en: 'CoreOS VM has booted up, so let''s open the `ssh` connection to our new VM
    using the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS虚拟机已启动，现在让我们使用以下命令打开与新虚拟机的`ssh`连接：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It should show something like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该显示类似以下内容：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你在[http://www.packtpub.com](http://www.packtpub.com)上的账户下载所有购买的Packt Publishing书籍的示例代码文件。如果你在其他地方购买了本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，文件将直接通过电子邮件发送给你。
- en: 'Perfect! Let''s verify that `etcd`, `fleet`, and `docker` are running there.
    Here are the commands required and the corresponding screenshots of the output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！让我们验证一下`etcd`、`fleet`和`docker`是否正常运行。以下是所需命令及相应的输出截图：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Startup and SSH](img/image00109.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![启动和SSH](img/image00109.jpeg)'
- en: 'To check the status of `fleet`, type this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查`fleet`的状态，请键入以下命令：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Startup and SSH](img/image00110.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![启动和SSH](img/image00110.jpeg)'
- en: 'To check the status of `docker`, type the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查`docker`的状态，请键入以下命令：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Startup and SSH](img/image00111.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![启动和SSH](img/image00111.jpeg)'
- en: Lovely! Everything looks fine. Thus, we've got our first CoreOS VM up and running
    in VirtualBox.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！一切看起来都正常。因此，我们成功地在VirtualBox中启动了第一个CoreOS虚拟机。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw what CoreOS is and how it is installed. We covered a
    simple CoreOS installation on a local computer with the help of Vagrant and VirtualBox,
    and checked whether `etcd`, `fleet`, and `docker` are running there.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了CoreOS是什么以及如何安装。我们使用Vagrant和VirtualBox帮助完成了在本地计算机上的CoreOS安装，并检查了`etcd`、`fleet`和`docker`是否正常运行。
- en: You will continue to explore and learn about all CoreOS services in more detail
    in the upcoming chapters.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将继续更详细地探索和学习所有CoreOS服务。

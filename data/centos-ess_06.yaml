- en: Chapter 6. Building a Deployment Setup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 构建部署设置
- en: In the previous chapter, you learned how to set up a local CoreOS environment
    for development on a personal computer and a Test and Staging environment cluster
    on Google Cloud's Compute Engine VM instances.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何在个人计算机上为开发设置本地CoreOS环境，并在Google Cloud的Compute Engine虚拟机实例上设置测试和预发布环境集群。
- en: In this chapter, we will cover how to deploy code from the GitHub repository
    to our Test and Staging servers, and how to set up the Docker builder and Docker
    private registry worker for Docker image building and distribution.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何将代码从GitHub仓库部署到我们的测试和预发布服务器，以及如何设置Docker构建器和Docker私有注册表工作节点以进行Docker镜像构建和分发。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Code deployment on Test and Staging servers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试和预发布服务器上部署代码
- en: Setting up the Docker builder and private Docker registry machine
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Docker构建器和私有Docker注册表机器
- en: Code deployment on Test and Staging servers
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在测试和预发布服务器上部署代码
- en: In the previous chapter, you learned how to set up your Test and Staging environment
    on Google Cloud and deploy your web servers there. In this section, we will see
    how to deploy code to our web servers on Test and Staging environments.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何在Google Cloud上设置你的测试和预发布环境并在其中部署Web服务器。在这一节中，我们将展示如何将代码部署到测试和预发布环境中的Web服务器。
- en: Deploying code on servers
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在服务器上部署代码
- en: 'To deploy code on our `Test1` and `Staging1` servers, we run the following
    commands:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要将代码部署到我们的`Test1`和`Staging1`服务器上，我们运行以下命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will get this output:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '![Deploying code on servers](img/image00146.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![在服务器上部署代码](img/image00146.jpeg)'
- en: 'Then, run this command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行以下命令：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see the following result:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下结果：
- en: '![Deploying code on servers](img/image00147.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![在服务器上部署代码](img/image00147.jpeg)'
- en: Now open the `tsc-test1` and `tsc-staging1` VM instance external IPs, copying
    them to your browser (you can check out the IPs at GC Console, Compute Engine,
    VM Instance).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`tsc-test1`和`tsc-staging1`虚拟机实例的外部IP地址，将它们复制到浏览器中（你可以在GC控制台、Compute Engine、虚拟机实例中查看IP）。
- en: The output you see depends on the server.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到的输出取决于服务器。
- en: 'For the Test server, you should see something like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试服务器，你应该看到类似这样的内容：
- en: '![Deploying code on servers](img/image00148.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![在服务器上部署代码](img/image00148.jpeg)'
- en: 'This is what you will see for the Staging server:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你在预发布服务器上看到的内容：
- en: '![Deploying code on servers](img/image00149.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![在服务器上部署代码](img/image00149.jpeg)'
- en: 'Let''s see what has happened here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看发生了什么：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, we used `gcloud compute` to change the permissions for our `home/core/share/nginx/html`
    folder, as we need to be able to copy files there. We copied a single `index.html`
    file there.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们使用了`gcloud compute`来更改`home/core/share/nginx/html`文件夹的权限，因为我们需要能够在那里复制文件。我们将一个`index.html`文件复制到了那里。
- en: In real-life scenarios, `git pull` should be used there to pull from the Test
    and Staging branches.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际场景中，应该在这里使用`git pull`从测试和预发布分支拉取代码。
- en: To automate releases to the `Test1/Staging1` servers, for example, Strider-CD
    can be used, but this is beyond the scope of this book. You can read about Strider-CD
    at [https://github.com/Strider-CD/strider](https://github.com/Strider-CD/strider)
    and practice implementing it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化发布到`Test1/Staging1`服务器上，例如，可以使用Strider-CD，但这超出了本书的范围。你可以在[https://github.com/Strider-CD/strider](https://github.com/Strider-CD/strider)上阅读关于Strider-CD的内容，并实践如何实现它。
- en: Setting up the Docker builder and private Docker registry worker
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Docker构建器和私有Docker注册表工作节点
- en: We have successfully deployed code (`index.html` in our case) in our Test/Staging
    environment on the cloud with the help of `gcloud compute`, by running it in a
    simple shell script.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地通过`gcloud compute`在云上的测试/预发布环境中部署了代码（在我们的例子中是`index.html`），通过在一个简单的Shell脚本中运行它。
- en: Let's set up a new server in our Test/Staging environment on the cloud. It will
    build Docker images for us and store them in our private Docker Registry so that
    they can be used on our production cluster (you will learn how to set this up
    in the next chapter).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在云上的测试/预发布环境中设置一台新服务器。它将为我们构建Docker镜像，并将它们存储在我们的私有Docker注册表中，以便它们可以在我们的生产集群中使用（你将在下一章学习如何设置）。
- en: Server setup
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器设置
- en: As both Docker builder and Private Docker Registry fleet units will run on the
    same server, we are going to deploy one more server on the Test/Staging environment.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Docker构建器和私有Docker注册表单元将运行在同一台服务器上，我们将在测试/预发布环境中再部署一台服务器。
- en: 'To install a new server, run the following commands:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装新服务器，运行以下命令：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, let''s install our new server:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们安装我们的新服务器：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see output similar to this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下的输出：
- en: '![Server setup](img/image00150.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![服务器设置](img/image00150.jpeg)'
- en: 'Let''s see what happened during the process of script installation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看脚本安装过程中发生了什么：
- en: A new `server tsc-registry-cbuilder1` was created
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个新的 `server tsc-registry-cbuilder1`。
- en: The static IP's `10.200.4.1` forward route for the `tsc-registry-cbuilder1`
    instance was created
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态 IP 的 `10.200.4.1` 路由已经为 `tsc-registry-cbuilder1` 实例创建。
- en: The external port `5000` was opened for the new server
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新服务器的外部端口 `5000` 已被打开。
- en: File `reg-dbuilder1.sh` from the `files` folder got copied to `~/coreos-tsc-gce/bin`
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`files` 文件夹中的文件 `reg-dbuilder1.sh` 被复制到了 `~/coreos-tsc-gce/bin`。'
- en: The `dbuilder.service` and `registry.service` fleet units from the `fleet` folder
    got copied to `~/coreos-tsc-gce/fleet`
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fleet` 文件夹中的 `dbuilder.service` 和 `registry.service` fleet 单元被复制到了 `~/coreos-tsc-gce/fleet`。'
- en: 'If we check out the GCE VM Instances at the GC console, we should see our new
    instance there:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看 GCE 控制台中的虚拟机实例，我们应该能看到我们的新实例：
- en: '![Server setup](img/image00151.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![服务器设置](img/image00151.jpeg)'
- en: 'We now need to verify that our new server is working fine, so we perform `ssh`
    on it:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要验证我们的新服务器是否正常工作，所以我们执行 `ssh` 连接到它：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Server setup](img/image00152.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![服务器设置](img/image00152.jpeg)'
- en: Very good! Our new server is up-and-running. Press *Ctrl* + *D* to exit.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 非常好！我们的新服务器已经启动并运行。按 *Ctrl* + *D* 退出。
- en: 'Now we need to verify that our server is connected to our cluster. So, run
    the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要验证我们的服务器是否连接到集群。所以，运行以下命令：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The script''s output should look like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的输出应该像这样：
- en: '![Server setup](img/image00153.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![服务器设置](img/image00153.jpeg)'
- en: 'Perfect! We can see that our new server has successfully connected to our cluster:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！我们可以看到我们的新服务器已成功连接到集群：
- en: '![Server setup](img/image00154.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![服务器设置](img/image00154.jpeg)'
- en: 'Okay, now let''s install those two new fleet units:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们安装这两个新的 fleet 单元：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Server setup](img/image00155.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![服务器设置](img/image00155.jpeg)'
- en: 'Next, let''s list the fleet units:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们列出 fleet 单元：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Server setup](img/image00156.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![服务器设置](img/image00156.jpeg)'
- en: If you see `activating start-pre`, give the `fleet` units a few minutes to pull
    the remote Docker images.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 `activating start-pre`，请给 `fleet` 单元几分钟时间来拉取远程 Docker 镜像。
- en: 'You can check the status of the `fleet` units using the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令检查 `fleet` 单元的状态：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Server setup](img/image00157.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![服务器设置](img/image00157.jpeg)'
- en: 'Suppose we try again in a couple of minutes:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们等几分钟再试一次：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Server setup](img/image00158.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![服务器设置](img/image00158.jpeg)'
- en: Then we can see that we've successfully got two new `fleet` units on our new
    `tsc-registry-cbuilder1` server.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以看到我们成功地在新的 `tsc-registry-cbuilder1` 服务器上创建了两个新的 `fleet` 单元。
- en: 'You might remember from the previous chapter that the `set_cluster_access.sh`
    script does the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得在上一章中，`set_cluster_access.sh` 脚本做了以下操作：
- en: It sets `PATH` to the `~/coreos-tsc-gce/bin` folder so that we can access executable
    files and scripts stored there from any folder
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将 `PATH` 设置为 `~/coreos-tsc-gce/bin` 文件夹，以便我们可以从任何文件夹访问存储在其中的可执行文件和脚本。
- en: It sets `FLEETCTL_TUNNEL` to our `control/etcd` machine's external IP
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将 `FLEETCTL_TUNNEL` 设置为我们 `control/etcd` 机器的外部 IP。
- en: It prints machines at the cluster with `fleetctl list-machines`
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过 `fleetctl list-machines` 打印集群中的机器。
- en: It prints units at the cluster with `fleetctl list-units`
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过 `fleetctl list-units` 打印集群中的单元。
- en: It allows us to work with a remote `etcd` cluster via a local `fleetctl` client
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许我们通过本地的 `fleetctl` 客户端与远程的 `etcd` 集群进行交互。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to deploy code on a remote Test/Staging cluster
    on GCE, and set up the Docker builder and private Docker registry machine.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何在 GCE 上部署代码到远程的测试/预发布集群，并设置 Docker 构建器和私有 Docker 注册机。
- en: 'In the following chapter, we will cover these topics: using our Staging and
    Docker builder and private registry servers to deploy code from Staging to production,
    building Docker images, and deploying them on production servers.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将讨论以下内容：使用我们的预发布和 Docker 构建器及私有注册机服务器将代码从预发布部署到生产环境，构建 Docker 镜像，并在生产服务器上部署它们。

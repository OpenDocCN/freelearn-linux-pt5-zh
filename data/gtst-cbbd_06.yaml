- en: Chapter 6. Updating the Bootloader and Kernel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章 更新引导加载程序和内核
- en: The previous chapters taught you how to get started and put the hardware and
    software to good use. As described in the previous chapters, software packages
    are updated automatically via the new packages; the bootloader and kernel, however,
    are not. This chapter will describe the various bootloaders available as well
    as the various kernels and which one to choose.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前几章教你如何入门并充分利用硬件和软件。如前所述，软件包通过新版本自动更新；但是引导加载程序和内核不会自动更新。本章将介绍各种可用的引导加载程序以及不同的内核，并帮助你选择最合适的版本。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The difference between the various bootloaders and kernels
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种引导加载程序和内核之间的区别
- en: Obtaining a new bootloader or kernel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取新的引导加载程序或内核
- en: Installing a new bootloader or kernel
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装新的引导加载程序或内核
- en: Prerequisites for this chapter
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章的先决条件
- en: In this chapter, you will need the destination medium used in the previous chapters,
    such as an SSD or a hard disk, a USB drive, and a microSD card, to boot from.
    Optionally, a low-capacity microSD card can also be used for this purpose instead.
    I have used a small 128 MB microSD card for this book, but even something on the
    lower side would work. All that needs to fit in the microSD card is the bootloader,
    some configuration files, and a kernel. About 4 MB of space would be required
    for that, though it will be really hard to find a microSD card with that capacity.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将需要前几章中使用的目标存储介质，如 SSD 或硬盘、USB 驱动器和 microSD 卡，用于引导。你还可以选择使用低容量的 microSD
    卡代替。我在本书中使用的是一张 128 MB 的 microSD 卡，但即使是容量较小的卡也可以使用。只需要在 microSD 卡中放置引导加载程序、一些配置文件和一个内核，大约需要
    4 MB 的空间，但实际上很难找到这样容量的 microSD 卡。
- en: The bootloader overview
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导加载程序概述
- en: The bootloader is the first thing that gets loaded that is actually user modifiable.
    The name of the bootloader that is used by the community and throughout this book
    is **u-boot**. It comes in two separate flavors. First, there is the *lichee*
    variant but it is not actively being developed. The reason why it is still around
    is that it is the only bootloader that currently supports booting of the onboard
    NAND flash. This bootloader is nearly always preinstalled and generally there
    isn't any reason for it to be replaced. More interesting is the *sunxi* variant
    of u-boot, which is being actively developed by the community and which we will
    check out in the following section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 引导加载程序是第一个加载的、实际上可以由用户修改的程序。社区和本书中使用的引导加载程序的名称是**u-boot**。它有两种不同的版本。首先是*lichee*变种，但它不再积极开发。之所以仍然存在，是因为它是目前唯一支持启动板载
    NAND 闪存的引导加载程序。这个引导加载程序几乎总是预安装的，通常没有理由更换它。更有趣的是*sunxi*变种的 u-boot，它由社区积极开发，我们将在接下来的部分中详细介绍。
- en: U-boot-sunxi
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: U-boot-sunxi
- en: 'As precompiled versions of a bootloader are already available, this chapter
    is not about compiling a bootloader. They are compiled every time a new addition
    is done to the codebase. Each u-boot binary is unique for each board, and an entire
    list of bootloaders can be found at [http://dl.linux-sunxi.org/nightly/u-boot-sunxi/u-boot-sunxi/u-boot-sunxi-latest/](http://dl.linux-sunxi.org/nightly/u-boot-sunxi/u-boot-sunxi/u-boot-sunxi-latest/).
    There are several files, however, for each board, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于已经有预编译版本的引导加载程序可用，本章内容并不涉及编译引导加载程序。每当对代码库进行新增时，都会编译一个新的引导加载程序。每个 u-boot 二进制文件都是为每块板子独特定制的，所有引导加载程序的完整列表可以在[http://dl.linux-sunxi.org/nightly/u-boot-sunxi/u-boot-sunxi/u-boot-sunxi-latest/](http://dl.linux-sunxi.org/nightly/u-boot-sunxi/u-boot-sunxi/u-boot-sunxi-latest/)找到。每块板子都有多个文件，具体如下：
- en: A build logfile ending with `.build.txt`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个以 `.build.txt` 结尾的构建日志文件
- en: A `sha1` hash file for the generated file ending with `.sha1`
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个以 `.sha1` 结尾的生成文件的 `sha1` 哈希文件
- en: A file list of generated files ending within the archive ending with `.txt`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 归档文件中的生成文件清单，以 `.txt` 结尾
- en: An archive with the compiled binary files ending with `.tar.xz`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 `.tar.xz` 结尾的编译二进制文件的存档
- en: 'Once the correct binary file for the development board at hand is in the downloading
    stage, it becomes easy with the Linux utility **wget**. To use this file for Cubieboard,
    the following command can be used:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦手头的开发板正确的二进制文件进入下载阶段，使用 Linux 工具**wget**就变得非常简单。为了在 Cubieboard 上使用这个文件，可以使用以下命令：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This file will then need to be extracted; tar is a common tool to do this, where
    the `x` parameter stands for extract, capital `J` stands for filter through `xz`,
    `v` asks tar to be verbose, and `f` tells tar that the next argument is a filename.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件需要被解压；`tar` 是一个常用的工具，`x` 参数表示提取，`J` 大写参数表示通过 `xz` 过滤，`v` 表示让 `tar` 显示详细信息，`f`
    告诉 `tar` 下一个参数是文件名。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The directory name inside the archive has a complex structure appended at the
    end, and most likely will not be identical to the one in this example.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩包中的目录名有一个复杂的结构附加在最后，很可能与本示例中的目录名不完全相同。
- en: 'Let us look at the archive in more detail. In the beginning, after the u-boot
    identifier, there is the architecture, sunxi. Following this is the name of the
    board, in this case, Cubieboard. The following command line is a timestamp of
    when the binary was compiled. Finally, in the end, there is a hash for the specific
    Git commit:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下压缩包。首先，在 u-boot 标识符之后是架构名称，sunxi。接着是开发板的名称，在本例中是 Cubieboard。接下来的命令行是二进制文件编译时的时间戳。最后，末尾是特定
    Git 提交的哈希值：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Some explanation is required about these three files. When the Allwinner SoC
    chip boots for the first time, it cannot access the main system memory, which
    is also known as RAM. There is a little bit of memory, the SRAM, available inside
    the SoC chip. The SRAM, however, is too small to hold the entire u-boot, so u-boot
    is split into two: the **Secondary Program Loader** (**SPL**) and the actual u-boot.
    The SPL is just enough to initialize the memory and load the new, bigger u-boot
    into the memory. These files both need to be written to very specific regions
    so that the SoC understands where to boot from. To make it a little bit easier,
    there is a third file, called `u-boot-sunxi-with-spl.bin`. This file consists
    of both components combined with the appropriate spacing and is the only thing
    required at this moment.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 需要对这三个文件进行一些解释。当 Allwinner SoC 芯片第一次启动时，它无法访问主系统内存，也就是我们所说的 RAM。SoC 芯片内有一小部分内存，叫做
    SRAM。然而，SRAM 太小，无法容纳整个 u-boot，所以 u-boot 被分成了两个部分：**次级程序加载器**（**SPL**）和实际的 u-boot。SPL
    足以初始化内存并将较大的 u-boot 加载到内存中。这些文件都需要写入非常特定的区域，以便 SoC 理解从哪里启动。为了简化一点，提供了一个第三个文件，叫做
    `u-boot-sunxi-with-spl.bin`。这个文件将两个部分结合并具有适当的间距，是目前唯一需要的文件。
- en: Installing the bootloader
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装引导加载程序
- en: The bootloader can only be installed at one location even though the SoC can
    boot from three different locations. SPI-flash, at the time of writing this book,
    is unsupported. However, some early experiments suggest that it should be relatively
    easy. While u-boot could be written onto the NAND flash ROM, the community-developed
    version of u-boot is currently unable to read or write from the NAND flash. The
    only option that remains is the microSD card, which as been used until now and
    will be used again.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 引导加载程序只能安装在一个位置，即使 SoC 可以从三个不同的位置启动。SPI-flash 在本书编写时尚不受支持。然而，一些早期实验表明这应该相对容易。虽然
    u-boot 可以写入 NAND flash ROM，但社区开发的 u-boot 版本目前无法从 NAND flash 读取或写入。剩下的唯一选项是 microSD
    卡，它一直被使用，且将继续被使用。
- en: 'The bootloader can be installed in the following ways:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 引导加载程序可以通过以下方式安装：
- en: Using a USB to microSD adapter on either a PC or on the Cubieboard
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PC 或 Cubieboard 上使用 USB 转 microSD 适配器
- en: Using an SD card reader in a PC or on the board
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SD 卡读卡器在 PC 或开发板上
- en: Note
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Be very careful when writing the bootloader. A single mistake can ruin the data
    on the SD card. For example, writing the bootloader at the beginning of the SD
    card destroys the partition table. Writing the bootloader a little too far can
    destroy the filesystem on the SD card. In both cases, there will be data loss
    because the bootloader is not in the right position, and thus the SD card is unbootable.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 写引导加载程序时要非常小心。一个小小的错误就可能毁掉 SD 卡上的数据。例如，将引导加载程序写入 SD 卡的开始位置会破坏分区表。将引导加载程序写得稍微偏远一些可能会破坏
    SD 卡上的文件系统。在这两种情况下，数据都会丢失，因为引导加载程序没有放在正确的位置，因此 SD 卡无法启动。
- en: One requirement is that the microSD card has a partition table. It is quite
    common for microSD cards to have no partition table. Using the knowledge acquired
    in [Chapter 3](ch03.html "Chapter 3. Installing an Operating System"), *Installing
    an Operating System*, at least one partition should be created on the microSD
    card with at least 4 MB of free space. The partition has to be formatted either
    in `fat`, `ext2`, `ext3`, or `ext4`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个要求是 microSD 卡必须有一个分区表。microSD 卡没有分区表的情况是相当常见的。使用在[第 3 章](ch03.html "第 3 章.
    安装操作系统")《安装操作系统》中获得的知识，应该在 microSD 卡上创建至少一个分区，且该分区至少有 4 MB 的空闲空间。该分区必须被格式化为 `fat`、`ext2`、`ext3`
    或 `ext4`。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If no partitions from the microSD card are mounted, such as the boot partition,
    it is safe to remove the used microSD card and insert a different one. Depending
    on which device is being used, make sure you replace `sdb` with `mmcblk0` or whichever
    device node the SD card is assigned to. Nothing to do with bits. Copying certain
    files, however, might be trickier, and might have to be stored elsewhere meanwhile.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有从 microSD 卡挂载分区，例如启动分区，那么可以安全地移除当前使用的 microSD 卡并插入另一张卡。根据所使用的设备，确保将 `sdb`
    替换为 `mmcblk0` 或分配给 SD 卡的任何设备节点。与比特无关。然而，复制某些文件可能会更棘手，并且在此期间可能需要将其存储在其他地方。
- en: 'Using the `dd` tool, a new bootloader is written to `/dev/sdb`. Please make
    sure that this really is the device node that holds the destination SD card. Using
    the wrong device node can destroy important data, even rendering the system unbootable.
    The important parameters are `blocksize` (`bs`) and `seek`, where `blocksize`,
    when multiplied with `seek`, indicates the exact location on the microSD card—in
    this case, at exactly 8 KB. The reason is simple; this is the exact location at
    which the SoC chip will search the SD card for the bootloader, as illustrated
    by the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `dd` 工具，将新的引导加载程序写入 `/dev/sdb`。请确保这真的是包含目标 SD 卡的设备节点。使用错误的设备节点可能会破坏重要数据，甚至导致系统无法启动。重要的参数是
    `blocksize`（`bs`）和 `seek`，其中 `blocksize` 乘以 `seek` 表示 microSD 卡上的确切位置——在此情况下，正好是
    8 KB。原因很简单；这是 SoC 芯片在 SD 卡上搜索引导加载程序的确切位置，以下命令对此进行了说明：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Completing the bootloader
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成引导加载程序
- en: 'The bootloader does need some standard configuration files, such as the kernel
    that needs to be booted. A few things that cross one''s thoughts are the arguments
    that need to be passed to the kernel and the address of the kernel to be loaded
    into the memory. There are three helper files that can be safely copied from the
    previous boot medium. They are as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 引导加载程序确实需要一些标准的配置文件，例如需要启动的内核。需要考虑的一些问题是传递给内核的参数和要加载到内存中的内核地址。有三个辅助文件可以安全地从以前的启动介质中复制。它们如下：
- en: '`boot.scr`: This consists of a compiled list of commands that u-boot is expected
    to execute'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boot.scr`：这是一个编译后的命令列表，u-boot 将执行这些命令'
- en: '`uEnv.txt`: This consists of a list of variables that will be passed onto the
    kernel'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uEnv.txt`：这是一个将传递给内核的变量列表'
- en: '`boot.cmd`: This consists of the source file used to generate `boot.scr`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boot.cmd`：这是用于生成 `boot.scr` 的源文件'
- en: Tip
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `boot.cmd` command is not used or needed; it is just very helpful to have
    around. To create `boot.scr` from `boot.cmd`, the following command can be used:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`boot.cmd` 命令不是必须使用的，它只是一个非常有用的文件。要从 `boot.cmd` 创建 `boot.scr`，可以使用以下命令：'
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Having copied these three files, the Cubieboard is almost bootable, and only
    the kernel remains.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 复制了这三个文件后，Cubieboard 几乎可以启动，只剩下内核部分。
- en: Exploring the kernel
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索内核
- en: For x86-based systems, there is usually only one kernel; the one supplied by
    the distribution in most cases. This kernel is always based on the kernel from
    [http://www.kernel.org](http://www.kernel.org). This kernel is often called the
    mainline kernel, vanilla kernel or upstream kernel. For Allwinner-based SoC chips,
    there is very limited support in the kernel developed by the community since 2012
    with Version 3.8\. There are older versions of the kernel where all the features
    have been added by Allwinner itself. While these changes are not of the quality
    that the mainline kernel accepts, it is all that there is for now. It, however,
    is near feature-complete and thus often the only option available to date. All
    these various kernels are available in various branches on a Git repository. There
    are nightly precompiled images available just as there were for u-boot, and they
    can be used in this book. Before continuing to download one of these precompiled
    archives, a little needs to be explained about the various versions available.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 x86 的系统，通常只有一个内核；大多数情况下，这是由发行版提供的内核。这个内核通常是基于 [http://www.kernel.org](http://www.kernel.org)
    的内核。这个内核通常被称为主线内核、原生内核或上游内核。对于基于 Allwinner 的 SoC 芯片，自 2012 年的 3.8 版本以来，社区开发的内核对其支持非常有限。也有一些较旧版本的内核，所有特性都是由
    Allwinner 自己添加的。虽然这些更改的质量没有达到主线内核的标准，但目前来说，它是唯一的选择。尽管如此，它已接近功能完备，因此通常是迄今为止唯一可用的选择。所有这些不同的内核版本都可以在
    Git 仓库中的各个分支上找到。就像 u-boot 一样，也有夜间预编译的镜像，可以在本书中使用。在继续下载这些预编译的归档文件之前，需要先解释一下不同版本的内容。
- en: Variants of the SoC
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SoC 的变种
- en: There are various generations of Allwinner SoC chips. There is the A10, for
    example. The A10 series is internally known as the **sun4i**—the fourth generation
    of the sun series. Similarly, the **sun5i** is the internal name for the A10S,
    and A13\. A31 and A31S are called **sun6i**. The A20 is called **sun7i,** and
    **sun8i** is the name for the new A23\. The combined name for all these is called
    **sunxi**. For almost all the kernel versions and each of these machine types,
    there is either a Git branch or a nightly pre-compiled binary version.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Allwinner SoC 芯片有多个版本，例如 A10 系列。A10 系列在内部被称为 **sun4i**——sun 系列的第四代。同样，**sun5i**
    是 A10S 和 A13 的内部名称。A31 和 A31S 被称为 **sun6i**，A20 被称为 **sun7i**，而新款 A23 被称为 **sun8i**。这些芯片的综合名称叫做
    **sunxi**。对于几乎所有的内核版本和每种机器类型，都有一个 Git 分支或者一个夜间预编译的二进制版本。
- en: Overview of the various kernels
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 各种内核的概述
- en: Newcomers to the sunxi community are often confused by the various kernel versions
    and are not sure what kernel to use. The next few subsections explain a little
    about the various available versions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初学者来说，加入 sunxi 社区后，他们常常对各种内核版本感到困惑，不确定该使用哪个内核。接下来的几个小节将简要介绍可用的不同版本。
- en: Kernel Version 2.6.36
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内核版本 2.6.36
- en: Kernel Version 2.6.36 was originally held hostage by Allwinner, which refused
    to release the GPL licensed code. Once it was liberated by a device maker of Allwinner-based
    tablets, Allwinner officially released the sources for the kernel. A community
    then started to form around this source release. It has been obsolete for a long
    time.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 内核版本 2.6.36 最初被 Allwinner 扣押，因为 Allwinner 拒绝发布 GPL 许可的代码。后来，Allwinner 基于的平板设备制造商解救了这个版本，Allwinner
    官方发布了内核的源代码。随后，一个社区开始围绕这个源代码发布形成。这个版本已经过时很久了。
- en: Kernel Versions 3.0 and stage 3.0
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内核版本 3.0 和 3.0 阶段
- en: The Version 3.0 was the first actively developed version of the sunxi kernels.
    The basis for the 3.0 kernel was also initially liberated by a third-party tablet
    manufacturer. The community did start from scratch again and put in some heavy
    work into this kernel's release. Later, Allwinner also released their kernel Version
    3.0, but it had already diverged compared to the community-built kernel. One major
    thing that was done by the community, for example, is the unification of the various
    machine types. Allwinner intended to release the sun4i and sun5i kernels completely
    separated, where the community brought it under a generic sunxi kernel and drivers.
    It has seen many other improvements from what was supplied by Allwinner, but not
    all patches and fixes were immediately put into the 3.0 series. Patches were always
    first put into a so-called stage tree of 3.0, and after a few weeks of testing,
    those patches were merged back into the 3.0 tree. The 3.0 tree is technically
    obsolete as well but does see some active use, as it is still in use by many tablets.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 3.0 是 sunxi 内核的第一个积极开发版本。3.0 内核的基础最初也是由第三方平板制造商释放的。社区从头开始重新启动，并投入了大量工作来释放这个内核。后来，全志（Allwinner）也发布了他们的
    3.0 内核，但与社区构建的内核相比已经分化。例如，社区做的一件重要事情是统一各种机器类型。全志打算完全分开发布 sun4i 和 sun5i 内核，而社区将其合并为通用的
    sunxi 内核和驱动程序。它从全志提供的内容中看到了许多其他改进，但并非所有补丁和修复都立即放入 3.0 系列中。补丁总是首先放入所谓的 3.0 阶段树中，在几周的测试后，这些补丁被合并回
    3.0 树中。3.0 树在技术上也已经过时，但由于仍然被许多平板电脑使用，因此仍然活跃使用。
- en: Kernel Version 3.3
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内核版本 3.3
- en: Allwinner has released a new version of their kernel, but this was after the
    community had already started and ported everything to the mainline 3.4 kernel.
    The 3.3 kernel is never used by the community, as none of the bug fixes and improvements
    were picked up by Allwinner. It is sometimes also known as the lichee kernel.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 全志在社区已经开始并将所有内容移植到主流 3.4 内核之后发布了他们内核的新版本。社区从不使用 3.3 内核，因为全志未采用其中的任何错误修复和改进。有时它也被称为荔枝内核。
- en: Kernel Versions 3.4 and stage 3.4
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内核版本 3.4 和 3.4 阶段
- en: When the 3.4 kernel was released, it was marked as the **Long Term Support**
    (**LTS**) release, meaning it would receive support and security patches backported
    to it for an extended period. The drivers for sunxi hardware were forwardported
    from 3.0 to 3.4 to have the Allwinner hardware support, on a well-supported kernel
    release. Just as with 3.0, the stage variant of 3.4 holds all the new patches
    and is merged to 3.4, as it is considered stable. The 3.4 series is currently
    being actively developed and recommended for day-to-day use.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当 3.4 内核发布时，它被标记为**长期支持**（**LTS**）发布，意味着它将在延长的时间内接收支持和安全补丁。sunxi 硬件的驱动程序从 3.0
    转移到 3.4，以在一个得到良好支持的内核版本上支持全志硬件。与 3.0 一样，3.4 的阶段变体持有所有新的补丁，并合并到 3.4 中，因为它被认为是稳定的。3.4
    系列目前正在积极开发，并推荐日常使用。
- en: Kernel version experimental-3.14
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内核版本 experimental-3.14
- en: The highly experimental branch for Version 3.14 is not usable as of now. The
    idea is to take the 3.14 kernel, which is an LTS release, and apply the 3.4 sunxi
    drivers to it. The big difference with 3.4 is that 3.14 was a release of the kernel,
    and there was some actual support for sunxi SoCs. As long as these kernels are
    marked experimental, they should not be used except to experiment with.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 3.14 的高度实验性分支目前不可用。该想法是取 3.14 内核，这是一个 LTS 发布，然后将 3.4 sunxi 驱动程序应用到其中。与 3.4
    的主要区别在于，3.14 是内核的一个发布版本，并且对 sunxi SoCs 有一些实际支持。只要这些内核被标记为实验性，除了用于实验外，不应该使用它们。
- en: The devel branch of the kernel
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内核的开发分支
- en: Patches that are written against the mainline kernel end up on various mailing
    lists while they are being reviewed. The devel branch, which stands for development,
    tries to capture all these under-review patches and merges them into the mainline
    following tree. In other words, this tree holds support for most of the hardware
    to this date, but it may very well change as the review process continues. This
    kernel should only be used when working on drivers, doing reviews, or wanting
    to help testing new things. This branch, however, may be removed in future as
    things start to settle.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 针对主线内核编写的补丁会被发送到各种邮件列表进行审查。devel 分支（代表开发）尝试捕获所有这些正在审查的补丁，并将它们合并到主线跟随树中。换句话说，这个树目前支持大多数硬件，但随着审查过程的进行，它很可能会发生变化。这个内核应该仅在进行驱动开发、审查或想要帮助测试新事物时使用。然而，随着情况逐渐稳定，这个分支将来可能会被移除。
- en: Next branch of the kernel
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 下一分支的内核
- en: Very similar to the devel branch, it tracks the mainline kernel and holds accepted
    patches. It could be considered as the stable variant of the devel kernel. This
    kernel should only be used when there is a need for the next and upcoming kernel
    release.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与 devel 分支非常相似，它跟踪主线内核并保存已接受的补丁。它可以被视为 devel 内核的稳定变种。这个内核应该仅在需要下一个即将发布的内核版本时使用。
- en: Choosing a kernel
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择内核
- en: With so many kernels available, there really is only one kernel of interest
    at this moment—the 3.4 kernel. While this may change when 3.14 leave the experimental
    state and start to replace 3.4—for now, they are not an option. With that choice
    set, there's the machine type to pick from, depending on the type of Cubieboard
    being used. The variants section discussed earlier will explain which machine
    type to go for.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有这么多可用的内核，目前唯一值得关注的内核是 3.4 内核。虽然当 3.14 内核脱离实验状态并开始替代 3.4 时，这种情况可能会发生变化，但目前它们并不是一个选择。确定了这个选择后，需要根据所使用的
    Cubieboard 类型来选择机器类型。前面讨论过的变种部分将解释选择哪个机器类型。
- en: Installing the kernel
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装内核
- en: 'Using `wget`, an A20-based kernel will be downloaded and extracted in the following
    example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `wget`，一个基于 A20 的内核将被下载并在以下示例中解压：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Also here, a new directory containing a `datestamped` and `githash` named directory
    will be created. Within this directory, there will be two subdirectories. The
    boot directory holds the actual kernel, a file called **uImage**. It is to be
    placed on the first partition of the microSD card.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，还将创建一个新的目录，该目录包含一个以 `datestamped` 和 `githash` 命名的目录。在这个目录下，将有两个子目录。boot
    目录包含实际的内核文件，一个名为 **uImage** 的文件。该文件将被放置在 microSD 卡的第一个分区上。
- en: Installing the kernel modules
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装内核模块
- en: In a kernel, drivers can be compiled into the kernel and are always loaded,
    or they are separated from the kernel and can be loaded as required. These separated
    drivers are called modules and on most distributions live at `/lib/modules/`.
    Copying over this directory copies all the files needed for this new kernel.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在内核中，驱动程序可以被编译到内核中并始终加载，或者它们可以从内核中分离出来，根据需要加载。这些分离的驱动程序称为模块，在大多数发行版中位于 `/lib/modules/`。复制这个目录即复制了新内核所需的所有文件。
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The following command assumes that this is done natively on the Cubieboard.
    When using a different system to perform the copy, the destination path will be
    different:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令假设在 Cubieboard 上本地执行此操作。如果使用其他系统来执行复制，目标路径会有所不同：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With both the kernel and modules in place, the system can be rebooted safely
    using the new kernel and its modules.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 内核和模块就位后，系统可以安全地重启，使用新内核及其模块。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered the various bootloaders and kernels and briefly explained
    the differences between them. It then showed you how to install a precompiled
    kernel onto a microSD card to be used as a boot device.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了各种引导加载程序和内核，并简要解释了它们之间的区别。然后展示了如何将预编译的内核安装到 microSD 卡上，并将其用作引导设备。
- en: The next chapter will go over the steps of actually compiling a bootloader or
    kernel from scratch using sunxi-bsp or the sunxi board.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将讲解如何使用 sunxi-bsp 或 sunxi 板从头开始编译引导加载程序或内核的步骤。

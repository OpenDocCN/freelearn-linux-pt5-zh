- en: Chapter 10. Introduction to Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章 Kubernetes介绍
- en: 'In this chapter, we will cover a short overview of Google Kubernetes, which
    manages containerized applications across multiple hosts in a cluster. As Kubernetes
    is a very large project, in this chapter, we will only overview its main concepts
    and some use cases, including these:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍Google Kubernetes，它在多个主机上管理容器化应用程序。由于Kubernetes是一个非常庞大的项目，本章将仅概述其主要概念和一些用例，包括以下内容：
- en: What is Kubernetes?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Kubernetes？
- en: Primary components of Kubernetes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes的主要组件
- en: Kubernetes cluster setup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes集群设置
- en: Tectonic—CoreOS and Kubernetes combined for a commercial implementation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tectonic——CoreOS和Kubernetes结合的商业实现
- en: What is Kubernetes?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Kubernetes？
- en: Google has been running everything in containers for more than decade. Internally,
    they use a system called Borg ([http://research.google.com/pubs/pub43438.html](http://research.google.com/pubs/pub43438.html)),
    the predecessor of Kubernetes, to scale and orchestrate containers across servers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Google已经在容器中运行一切超过十年了。在内部，他们使用一个名为Borg的系统（[http://research.google.com/pubs/pub43438.html](http://research.google.com/pubs/pub43438.html)），这是Kubernetes的前身，用于在服务器之间扩展和编排容器。
- en: Lessons learned from Borg were used to build Kubernetes, an open source container
    orchestration system. It became popular very quickly when it was released in June
    2014.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从Borg中汲取的经验教训被用来构建Kubernetes，一个开源容器编排系统。它在2014年6月发布后迅速流行。
- en: All of the best ideas from Borg were incorporated into Kubernetes. Many of Borg's
    developers now work on Kubernetes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Borg的所有最佳思想都融入到了Kubernetes中。许多Borg的开发者现在在Kubernetes项目中工作。
- en: Kubernetes received thousands of stars at it's GitHub project ([https://github.com/GoogleCloudPlatform/kubernetes](https://github.com/GoogleCloudPlatform/kubernetes)),
    and hundreds of supporters from the open source community and companies such as
    CoreOS, Red Hat, Microsoft, VMware, and so on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes在其GitHub项目上获得了成千上万的星标（[https://github.com/GoogleCloudPlatform/kubernetes](https://github.com/GoogleCloudPlatform/kubernetes)），并得到了开源社区以及CoreOS、Red
    Hat、Microsoft、VMware等公司的大力支持。
- en: Primary components of Kubernetes
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes的主要组件
- en: Kubernetes can be run on any modern Linux operating system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes可以在任何现代的Linux操作系统上运行。
- en: 'Here are the main components of Kubernetes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Kubernetes的主要组件：
- en: '**Master**: This is the set of main Kubernetes control services, usually running
    on one server except the `etcd` cluster. However it can be spread around a few
    servers. The services of Kubernetes are as follows:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Master（主节点）**：这是Kubernetes的主要控制服务集，通常运行在一台服务器上，`etcd`集群除外。但它也可以分布在几台服务器上。Kubernetes的服务如下：'
- en: '`etcd` cluster'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcd`集群'
- en: API server
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: API服务器
- en: Controller manager
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器管理器
- en: Scheduler
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度器
- en: '**Node**: This is a cluster worker. It can be a VM and/or bare-metal server.
    Nodes are managed from the master services and are dedicated to run pods. These
    two Kubernetes services must run on each node:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节点**：这是集群中的工作节点。它可以是虚拟机（VM）或裸机服务器。节点由主节点服务管理，并专门用于运行Pod。每个节点必须运行以下两个Kubernetes服务：'
- en: Kubelet
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubelet
- en: Network proxy
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络代理
- en: Docker and rkt are used to run application containers. In future, we will see
    more support for application container systems there.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Docker和rkt用于运行应用容器。未来我们将看到更多支持的应用容器系统。
- en: '**Pod**: This is a group of application containers running with the shared
    context. Even a single application container must run in a Pod.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pod**：这是一个共享上下文运行的应用容器组。即使是单个应用容器，也必须在Pod中运行。'
- en: '**Replication controllers**: These ensure that the specified numbers of pods
    are running. If there are too many pods, will be killed. If they are too less,
    then the required number of pods will be started. It is not recommended to run
    pods without replication controllers even if there is a single Pod.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制控制器**：这些确保指定数量的Pod在运行。如果Pod太多，它们会被杀死。如果太少，所需的Pod数量将被启动。即使只有一个Pod，也不建议在没有复制控制器的情况下运行Pod。'
- en: '**Services**: The same pod can be run only once. If it dies, the replication
    controller replaces it with a new pod. Every pod gets its own dedicated IP, which
    allows on the same node to run many containers on the port. But every time a pod
    is started from the template by replication controller gets a different IP, and
    this is where services come to help. Each service gets assigned a virtual IP,
    which stays with it until it dies.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：同一个Pod只能运行一次。如果它崩溃，复制控制器会用一个新的Pod替代它。每个Pod都有自己的专用IP，这样就可以在同一个节点上运行多个容器在不同端口上。但每次从模板启动Pod时，复制控制器都会分配不同的IP，这时服务就发挥了作用。每个服务会分配一个虚拟IP，并且该IP会一直与服务绑定，直到服务结束。'
- en: '**Labels**: These are the arbitrary key-value pairs that are used by every
    Kubernetes component; for example, the replication controller uses them for service
    discovery.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：这些是每个Kubernetes组件使用的任意键值对；例如，复制控制器使用它们进行服务发现。'
- en: '**Volumes**: A volume is a directory that is accessible from a container, and
    is used to store the container''s stateful data.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卷**：卷是一个可以从容器访问的目录，用于存储容器的有状态数据。'
- en: '**Kubectl**: This controls the Kubernetes cluster manager. For example, you
    can add/delete nodes, pods, or replication controllers; check their status; and
    so on. Kubernetes uses `manifest` files to set up pods, replication controllers,
    services, labels, and so on.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubectl**：这个工具用于控制Kubernetes集群管理器。例如，你可以添加/删除节点、Pod或复制控制器；查看它们的状态；等等。Kubernetes使用`manifest`文件来设置Pods、复制控制器、服务、标签等。'
- en: 'Kubernetes has a nice UI, which was built and contributed to by [http://kismatic.io/](http://kismatic.io/).
    It runs on an API server:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes有一个不错的用户界面，它是由[http://kismatic.io/](http://kismatic.io/)开发并贡献的。它运行在一个API服务器上：
- en: '![Primary components of Kubernetes](img/image00180.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes的主要组件](img/image00180.jpeg)'
- en: This allows us to check the Kubernetes cluster's status and add/delete pods,
    replication controllers, and so on. It also allows us to manage a Kubernetes cluster
    from the UI in the same way as from `kubectl`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够检查Kubernetes集群的状态，并添加/删除Pods、复制控制器等。它还允许我们通过用户界面以与`kubectl`相同的方式管理Kubernetes集群。
- en: '[http://kismatic.io/](http://kismatic.io/) is also going to offer an enterprise/commercial
    version of Kubernetes in the near future.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://kismatic.io/](http://kismatic.io/)也将在不久的将来提供Kubernetes的企业/商业版本。'
- en: Kubernetes cluster setup
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes集群设置
- en: In the previous topic, we overviewed the main features of Kubernetes, so let's
    do some interesting stuff—installing small Kubernetes on Google Cloud.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一部分中，我们概述了Kubernetes的主要功能，现在让我们做一些有趣的事情——在Google Cloud上安装一个小型Kubernetes集群。
- en: Note, that if you are using a free/trial Google Cloud account, which has a limit
    of eight CPUs (eight VMs are allowed), you need to delete some of them. Let's
    replace our production cluster with a Kubernetes cluster. Select the VMs as per
    what is shown in the following screenshot. Then click on the **Delete** button
    in the top-right corner.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你使用的是免费的/试用的Google Cloud账户，该账户有8个CPU的限制（允许8个虚拟机），你需要删除其中的一些。让我们用Kubernetes集群替换我们的生产集群。根据以下屏幕截图选择虚拟机。然后点击右上角的**删除**按钮。
- en: '![Kubernetes cluster setup](img/image00181.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes集群设置](img/image00181.jpeg)'
- en: 'Now we are ready to install a Kubernetes cluster:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备安装Kubernetes集群：
- en: 'Type this in your terminal:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端中输入以下命令：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that as we have folders/files that are very similar to what we used to
    set up the Test/Staging/Production clusters, we are not going to review the scripts
    this time. You can always check out the setup files yourself and learn the differences
    there:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，由于我们有一些文件夹/文件与我们用于设置测试/暂存/生产集群时非常相似，因此这次我们不再复习这些脚本。你可以随时查看这些设置文件，了解其中的差异：
- en: Update the `settings` file there with your GC project ID and zone.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新那里`settings`文件中的Google Cloud项目ID和区域。
- en: 'Let''s now run the first script, named `1-bootstrap_cluster.sh`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们来运行第一个脚本，名为`1-bootstrap_cluster.sh`：
- en: '[PRE1]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see an output similar to this:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似这样的输出：
- en: '![Kubernetes cluster setup](img/image00182.jpeg)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Kubernetes集群设置](img/image00182.jpeg)'
- en: 'If you check out the Google Cloud console, you should see three new VMs there,
    namely **k8s-master**, **k8s-node1**, and **k8s-node2**:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看Google Cloud控制台，你应该会看到三个新的虚拟机，分别是**k8s-master**、**k8s-node1**和**k8s-node2**：
- en: '![Kubernetes cluster setup](img/image00183.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes集群设置](img/image00183.jpeg)'
- en: The `1-bootstrap_cluster.sh` script has installed a small CoreOS cluster, which
    is set up in the same way as our previous Test/Staging/Production cluster—one
    `etcd` server and two workers connected to it. And also create a new folder, `k8s-cluster`,
    in the user home folder where the `settings` file got copied and other binary
    files will be copied later on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`1-bootstrap_cluster.sh`脚本已经安装了一个小型的CoreOS集群，它的设置方式与我们之前的测试/暂存/生产集群相同——一个`etcd`服务器和两个连接到它的工作节点。还会在用户的主文件夹中创建一个新的文件夹`k8s-cluster`，该文件夹将复制`settings`文件，并且后续的其他二进制文件也会复制到该文件夹。'
- en: Next, we need to install the `fleetctl`, `etcdctl`, and `kubectl` local clients
    on our computer to be able to communicate with the CoreOS cluster `etcd` and `fleet`
    services, and with the Kubernetes master service.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在计算机上安装`fleetctl`、`etcdctl`和`kubectl`本地客户端，以便能够与CoreOS集群的`etcd`和`fleet`服务，以及Kubernetes主服务进行通信。
- en: 'Type the following line in your terminal:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令：
- en: '[PRE2]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see an output similar to this:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似于此的输出：
- en: '![Kubernetes cluster setup](img/image00184.jpeg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Kubernetes 集群设置](img/image00184.jpeg)'
- en: Now let's install the Kubernetes cluster on top our new CoreOS cluster.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在我们的新 CoreOS 集群上安装 Kubernetes 集群。
- en: 'Type this command in your terminal:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令：
- en: '[PRE3]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should see an output similar to what is shown here:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似于这里展示的输出：
- en: '![Kubernetes cluster setup](img/image00185.jpeg)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Kubernetes 集群设置](img/image00185.jpeg)'
- en: Let's try access our Kubernetes cluster via `""`, which was copied to `~/k8s-cluster/bin`
    by the `1-bootstrap_cluster.sh` script.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试通过 `""` 访问我们的 Kubernetes 集群，该文件已通过 `1-bootstrap_cluster.sh` 脚本复制到 `~/k8s-cluster/bin`。
- en: 'Type this in your terminal:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令：
- en: '[PRE4]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should get an output similar to the following:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似于以下的输出：
- en: '![Kubernetes cluster setup](img/image00186.jpeg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Kubernetes 集群设置](img/image00186.jpeg)'
- en: As you can see, our Kubernetes cluster is up and running.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们的 Kubernetes 集群已启动并正在运行。
- en: What `set_k8s_access.sh` does is that it provides `fleetctl` and `kubectl` with
    access to the remote `k8s-master` server by forwarding the `localhost` ports 2379
    (`fleet`) and 8080 (Kubernetes master) to it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_k8s_access.sh` 的作用是通过将 `localhost` 端口 2379（`fleet`）和 8080（Kubernetes 主节点）转发到远程
    `k8s-master` 服务器，为 `fleetctl` 和 `kubectl` 提供访问权限。'
- en: 'Let''s check out the Kubernetes cluster by typing this into the terminal:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过在终端中输入以下命令来检查 Kubernetes 集群：
- en: '[PRE5]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should see an output similar to this:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似于此的输出：
- en: '![Kubernetes cluster setup](img/image00187.jpeg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Kubernetes 集群设置](img/image00187.jpeg)'
- en: Perfect! Now we can access the remote Kubernetes cluster from our local computer.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完美！现在我们可以从本地计算机访问远程 Kubernetes 集群了。
- en: As we've got our Kubernetes cluster up and running, let's deploy the same `website1`
    Docker image that we used for our production cluster deployment.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们的 Kubernetes 集群已经启动并运行，让我们部署与生产集群部署中使用的相同的 `website1` Docker 镜像。
- en: 'Type this into your terminal:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令：
- en: '[PRE6]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see the following output:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Kubernetes cluster setup](img/image00188.jpeg)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Kubernetes 集群设置](img/image00188.jpeg)'
- en: The previous command has created two `website1` pods listening on `port 80`.
    It has also created a replication controller named `website1`, and this replication
    controller ensures that there are always two pods running.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上一个命令创建了两个监听 `port 80` 的 `website1` pods。它还创建了一个名为 `website1` 的复制控制器，该控制器确保始终有两个
    pods 在运行。
- en: 'We can list created `pods` by typing the following into your terminal:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过在终端中输入以下命令列出已创建的 `pods`：
- en: '[PRE7]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should see an output like this:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似于以下的输出：
- en: '![Kubernetes cluster setup](img/image00189.jpeg)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Kubernetes 集群设置](img/image00189.jpeg)'
- en: 'To list the created replication controller, type this into your terminal:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要列出已创建的复制控制器，请在终端中输入以下命令：
- en: '[PRE8]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should see the following output:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Kubernetes cluster setup](img/image00190.jpeg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Kubernetes 集群设置](img/image00190.jpeg)'
- en: 'Now, let''s expose our pods to the Internet. The `Kubectl` command can integrate
    with the Google Compute Engine to add a public IP address for the `pods`. To do
    this, type the following line into your terminal:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将我们的 Pods 暴露到互联网。`Kubectl` 命令可以与 Google Compute Engine 集成，为 `pods` 添加一个公共
    IP 地址。要做到这一点，在终端中输入以下命令：
- en: '[PRE9]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see an output like this:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似于此的输出：
- en: '![Kubernetes cluster setup](img/image00191.jpeg)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Kubernetes 集群设置](img/image00191.jpeg)'
- en: 'The previous command created a service named `website1` and mapped an external
    IP address to the service. To find that IP address, type this into your terminal:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上一个命令创建了一个名为 `website1` 的服务，并为该服务映射了一个外部 IP 地址。要找到该 IP 地址，请在终端中输入以下命令：
- en: '[PRE10]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see an output similar to the following:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似于以下的输出：
- en: '![Kubernetes cluster setup](img/image00192.jpeg)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Kubernetes 集群设置](img/image00192.jpeg)'
- en: The IP in the bottom line is our IP, and it is of the load balancer. It is assigned
    to the `k8s-node-1` and `k8snode-2` servers and used by `website1` service.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行的 IP 地址是我们的 IP，它是负载均衡器的地址。它被分配给 `k8s-node-1` 和 `k8snode-2` 服务器，并由 `website1`
    服务使用。
- en: 'Let''s type this IP into our web browser. We should get an output similar to
    this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中输入这个 IP 地址。我们应该看到类似于此的输出：
- en: '![Kubernetes cluster setup](img/image00193.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes 集群设置](img/image00193.jpeg)'
- en: As you have seen previously, it shows exactly the same web page as we got on
    our production web servers. Also, it is exactly the same code as we had in the
    staging environment. We built the Docker image from it and used that Docker image
    for deployment on our production cluster and the Kubernetes cluster.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如你之前所见，它展示的网页与我们生产环境中的网页完全相同。同时，它的代码也和我们在预发布环境中的代码一模一样。我们从中构建了 Docker 镜像，并将该镜像用于生产集群和
    Kubernetes 集群的部署。
- en: 'If you want, you can easily run more replicas of pods by using this simple
    command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以通过以下简单命令轻松地运行更多副本的 Pods：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s check our replication controller by typing the following into our terminal:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在终端中输入以下命令来检查我们的复制控制器：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should see an output similar to this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似以下的输出：
- en: '![Kubernetes cluster setup](img/image00194.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes 集群设置](img/image00194.jpeg)'
- en: The previous command scales the pods, and replication controller ensures that
    we always have four of them running.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令用于扩展 Pods，复制控制器确保我们始终运行四个副本。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find plenty of usage examples to play with at [https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples](https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples](https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples)找到大量的使用示例来进行实验。
- en: This book is too short to cover all the good things you can do with Kubernetes,
    but we should be seeing more Kubernetes books pop up soon.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本书篇幅太短，无法涵盖使用 Kubernetes 的所有好处，但我们很快应该会看到更多关于 Kubernetes 的书籍出版。
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Some other URLs to look at are given here:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提供了一些其他的 URL 供参考：
- en: 'If you are a Mac user, you can install one of the apps that will set your Kubernetes
    cluster on your Mac: 1 master x 2 nodes on [https://github.com/rimusz/coreos-osx-gui-kubernetes-cluster](https://github.com/rimusz/coreos-osx-gui-kubernetes-cluster),
    and standalone master/node on [https://github.com/rimusz/coreos-osx-gui-kubernetes-solo](https://github.com/rimusz/coreos-osx-gui-kubernetes-solo).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 Mac 用户，可以安装一个应用程序来在 Mac 上设置 Kubernetes 集群：1 个主节点 x 2 个节点，网址是 [https://github.com/rimusz/coreos-osx-gui-kubernetes-cluster](https://github.com/rimusz/coreos-osx-gui-kubernetes-cluster)，以及独立的主节点/节点设置，网址是
    [https://github.com/rimusz/coreos-osx-gui-kubernetes-solo](https://github.com/rimusz/coreos-osx-gui-kubernetes-solo)。
- en: Other guides to Kubernetes on CoreOS are available at [https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/coreos.md](https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/coreos.md).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 其他关于 CoreOS 上 Kubernetes 的指南可以在 [https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/coreos.md](https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/coreos.md)
    查看。
- en: Tectonic – CoreOS and Kubernetes combined for a commercial implementation
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tectonic – CoreOS 和 Kubernetes 结合实现商业化
- en: Tectonic ([http://tectonic.com](http://tectonic.com)) is a commercial CoreOS
    distribution with a combined CoreOS and Kubernetes stack. It can be used by businesses
    of any size.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Tectonic ([http://tectonic.com](http://tectonic.com))是一个商业化的 CoreOS 发行版，结合了
    CoreOS 和 Kubernetes 堆栈。任何规模的企业都可以使用它。
- en: 'Tectonic is prepackaged with all the open source components of CoreOS and Kubernetes,
    and adds some more commercial features:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Tectonic 已预装了所有 CoreOS 和 Kubernetes 的开源组件，并添加了一些商业功能：
- en: Management console/UI for workflows and dashboards
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流和仪表盘的管理控制台/UI
- en: Corporate SSO integration
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业级单点登录（SSO）集成
- en: Quay-integrated container registry for building and sharing Linux containers
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quay 集成的容器注册表用于构建和共享 Linux 容器
- en: Tools for automation of container deployments
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于容器部署自动化的工具
- en: Customized rolling updates
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制化的滚动更新
- en: It can run in public clouds or on-premise.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以在公有云或本地环境中运行。
- en: 'Its management console is simple and easy to use:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 它的管理控制台简单易用：
- en: '![Tectonic – CoreOS and Kubernetes combined for a commercial implementation](img/image00195.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![Tectonic – CoreOS 和 Kubernetes 结合实现商业化](img/image00195.jpeg)'
- en: In the preceding screenshot, we have a visualization of our **Replication controllers**
    (**RC**). On the left-hand side, you can' see each RC with the labels will assign
    to pods as they're instantiated. Below the name of the RC, you'll see a list of
    all running pods that match the same label queries.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我们可以看到**复制控制器**（**RC**）的可视化。在左侧，你可以看到每个 RC 以及它为 Pods 分配的标签。在 RC 名称下方，你会看到所有运行中的
    Pods 列表，这些 Pods 匹配相同的标签查询。
- en: '![Tectonic – CoreOS and Kubernetes combined for a commercial implementation](img/image00196.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![Tectonic – CoreOS 和 Kubernetes 结合实现商业化](img/image00196.jpeg)'
- en: The preceding screenshot shows us the **elasticsearch** replication controller
    state, which labels are used there, and pod volumes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图展示了**elasticsearch**复制控制器的状态、使用的标签以及 Pod 卷。
- en: Tectonic aims to provide an easily container deployment solution, and companies
    can begin seeing its benefits very quickly of using containers in enterprise.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Tectonic 旨在提供一种简便的容器部署解决方案，公司可以快速看到在企业中使用容器的好处。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we overviewed Google Kubernetes and covered what is about,
    its main components, and its CoreOS commercial implementation.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们概述了 Google Kubernetes，介绍了它的基本概念、主要组件以及其 CoreOS 商业实现。
- en: We hope that this book will equip you with all the information you need to leverage
    the power of CoreOS and the related containers, and help you develop effective
    computing networks. Thank you for reading it!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这本书能够为您提供所需的所有信息，帮助您充分利用 CoreOS 及相关容器的强大功能，并助力您开发高效的计算网络。感谢您的阅读！

- en: Appendix C. The FEX Configuration File
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录C. FEX配置文件
- en: Many systems have a way of configuring themselves, be it software or, in this
    case, hardware. Allwinner-based hardware is no different; there are some bits
    and pieces that do require configuring, such as GPIO pins. A chip cannot configure
    itself; that is, it cannot parse a configuration file and configure itself. The
    actual configuration of the chip is done by the various drivers. The procedure
    is illustrated in the following sections.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 许多系统都有自我配置的方法，无论是软件还是硬件。在这一点上，以Allwinner为基础的硬件也不例外；一些组件确实需要配置，例如GPIO引脚。芯片无法自我配置；也就是说，它不能解析配置文件并进行自我配置。芯片的实际配置是由各种驱动程序完成的。此过程在接下来的章节中进行说明。
- en: Initial boot up
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始启动
- en: The chip starts in a hardwired way, where certain components are preprogrammed
    to be active on specific pins. Because of this, the chip can boot from various
    boot media, as mentioned in [Chapter 3](ch03.html "Chapter 3. Installing an Operating
    System"), *Installing an Operating System*, and load the bootloader. The bootloader
    is also preconfigured to a certain hardware setup. Hence, as mentioned earlier,
    each board has its own bootloader.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 芯片以硬件方式启动，某些组件预先编程以在特定引脚上激活。由于这一点，芯片可以从各种启动介质启动，如[第3章](ch03.html "第3章 安装操作系统")中所述，*安装操作系统*，并加载引导加载程序。引导加载程序也预配置为特定的硬件设置。因此，如前所述，每个板子都有自己的引导加载程序。
- en: 'Besides bringing up certain components, the bootloader has the following two
    important tasks:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 除了启动某些组件外，引导加载程序还有以下两个重要任务：
- en: Loading the kernel into memory and later executing it
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将内核加载到内存并随后执行
- en: Loading a configuration file into the memory for the kernel to use
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将配置文件加载到内存中，以供内核使用
- en: However, the bootloader itself does not parse the configuration file.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，引导加载程序本身并不解析配置文件。
- en: Tip
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'It has to be mentioned that when using a mainline kernel, the principle is
    the same: the bootloader still loads a configuration file named device tree binary,
    which the kernel uses for configuration.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提到的是，当使用主线内核时，原理是相同的：引导加载程序仍然加载一个名为设备树二进制的配置文件，内核使用该文件进行配置。
- en: The FEX configuration concept is interesting in itself, where one file is changed
    to configure an entire device. As mentioned earlier, the FEX file is loaded into
    the memory by the bootloader, and the bootloader only checks one specific location.
    While u-boot is more flexible and could be configured to allow reading the configuration
    file from any location or any filename, the bootloader that is preprogrammed into
    the onboard NAND flash storage will only check the first partition on the device,
    and that has to be FAT formatted. As such, this is a common convention that we
    will follow for the remainder of this chapter. Additionally, this file has to
    be called by a specific name, `script.bin`, and the duplicate backup by the name
    `script0.bin` file. When booting a kernel that supports the onboard `nand` flash,
    the device node where this file will be stored is `/dev/nanda`. Otherwise, normal
    device nodes will be used, most commonly the SD card at `/dev/mmcblk0p1`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: FEX配置概念本身很有趣，其中一个文件的更改配置了整个设备。如前所述，FEX文件由引导加载程序加载到内存中，并且引导加载程序仅检查一个特定位置。虽然u-boot更灵活，可以配置为允许从任何位置或任何文件名读取配置文件，但预编程在板载NAND闪存中的引导加载程序只会检查设备上的第一个分区，而且该分区必须是FAT格式。因此，这是一种常见约定，我们将在本章剩余部分遵循此约定。此外，该文件必须使用特定名称`script.bin`，并且其备份文件为`script0.bin`。当启动支持板载`nand`闪存的内核时，该文件将存储在设备节点`/dev/nanda`中。否则，将使用常规设备节点，最常见的是SD卡，存储在`/dev/mmcblk0p1`。
- en: Compiling and decompiling the FEX file
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和反编译FEX文件
- en: The `script.bin` file is, as its file extension suggests, a binary file. However,
    it is not possible to directly modify this file. The linux-sunxi community has
    created a set of tools to convert this binary file into a text file and vice versa.
    They can be found in their GitHub repository at [https://github.com/linux-sunxi/sunxi-tools](https://github.com/linux-sunxi/sunxi-tools).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`script.bin`文件顾名思义是一个二进制文件。然而，不能直接修改该文件。linux-sunxi社区创建了一组工具，可以将该二进制文件转换为文本文件，反之亦然。它们可以在其GitHub仓库中找到：[https://github.com/linux-sunxi/sunxi-tools](https://github.com/linux-sunxi/sunxi-tools)。'
- en: After cloning this repository, the `make fex2bin` command is run to build the
    **fexc**, the fex decompiler. Compiling and running this tool is probably best
    on a system that has a comfortable text editor available.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆此仓库后，运行 `make fex2bin` 命令来构建 **fexc**，即 fex 反编译工具。最好在具有舒适文本编辑器的系统上编译并运行此工具。
- en: 'Running fexc to decompile the binary file will look like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 fexc 来反编译二进制文件，命令如下：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are two shorthands in the form of symlinks to fexc, namely `fex2bin` and
    `bin2fex`. Using these makes the `-I` and `-O` parameters unnecessary.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个符号链接作为 fexc 的简写，即 `fex2bin` 和 `bin2fex`。使用这些链接可以省去 `-I` 和 `-O` 参数。
- en: Understanding the FEX file format
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 FEX 文件格式
- en: 'Using any text editor, a FEX file will show that it is divided in various sections,
    prepended by a header within brackets, `[]`. In the following example, the UART
    `0` component is explained:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何文本编辑器打开，FEX 文件会显示为分为多个部分，每个部分前面都有一个用方括号 `[]` 括起来的头部。在以下示例中，UART `0` 组件的解释如下：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the component called `uart_para0`, the first serial port or UART, has
    four fields that a serial driver would read. Each field is set up as a key-value
    pair, where the key is on the left-hand side and the value is on the right-hand
    side of the equal sign. In this case, the key `uart_used` is set to the number
    `1` indicating that this definition should be parsed and activated.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，名为 `uart_para0` 的组件是第一个串口或 UART，包含四个字段，串口驱动程序将读取这些字段。每个字段以键值对的形式设置，键在等号左侧，值在等号右侧。在此例中，`uart_used`
    键的值设置为数字 `1`，表示该定义应被解析并激活。
- en: Following that is the `uart_port` key, which is set to the number `0`, indicating
    that this configuration is about UART 0—the first UART port. Some of the settings
    are very straightforward key-value pairs, that is, a key on the left and a string
    or a number on the right. There is, however, a key-value pair that needs some
    special attention, and that is the pin configuration, where the value is a port
    definition. Every component might require certain pins to function.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 `uart_port` 键，其值设为数字 `0`，表示该配置与 UART 0（第一个 UART 端口）相关。某些设置非常简单，采用键值对的形式，即左侧为键，右侧为字符串或数字。然而，有一对键值需要特别注意，那就是引脚配置，其中值为端口定义。每个组件可能需要特定的引脚才能正常工作。
- en: 'A basic UART requires two pins: a transmit pin and a receive pin. The SoC can
    provide several UARTs on several pins. In the preceding example, two pins are
    defined, the transmit pin, `uart_tx`, and the receive pin, `uart_rx`. The pins
    on a SoC are very often grouped, usually by a related function.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的 UART 需要两个引脚：一个发送引脚和一个接收引脚。SoC（系统级芯片）可以提供多个 UART 和多个引脚。在上述示例中，定义了两个引脚，发送引脚
    `uart_tx` 和接收引脚 `uart_rx`。SoC 上的引脚通常是分组的，通常是按相关功能来分组的。
- en: 'In the case of the A10, it has nine groups called ports. Each port can consist
    of a varying amount of pins. Port B, for example, has 24 pins. The last two pins
    of the set are the UART transmit and UART receive pins. The numbering starts at
    0, following from which, it should be no surprise that `PB22` and `PB23` in the
    preceding example are Port B: pin 22 and pin 23.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 A10 来说，它有九个组，称为端口。每个端口可以包含不同数量的引脚。例如，B 端口有 24 个引脚。该组的最后两个引脚分别是 UART 发送引脚和
    UART 接收引脚。引脚的编号从 0 开始，因此不难理解，在之前的示例中，`PB22` 和 `PB23` 分别是 B 端口的第 22 引脚和第 23 引脚。
- en: As mentioned before, each pin has multiple features, or as they say, many functions
    are multiplexed onto a pin. These multiplexes, or muxes, are enumerated, where
    MUX 0 always configures a pin as GPIO input, and MUX 1 always configures a pin
    as GPIO output. Depending on the port and pin, MUX 2 and beyond can have various
    meanings—in the case of `PB22` and `PB23` MUX 2 are the UART pins. The first parameter
    surrounded by angle brackets, `<>`, is thus defined as MUX 2.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，每个引脚有多个功能，或者可以说，许多功能被复用到一个引脚上。这些复用（mux）被枚举，其中 MUX 0 总是将引脚配置为 GPIO 输入，MUX
    1 总是将引脚配置为 GPIO 输出。根据端口和引脚的不同，MUX 2 及以上可能有不同的含义——在 `PB22` 和 `PB23` 的例子中，MUX 2
    是 UART 引脚。因此，第一个被尖括号 `<>` 括起来的参数被定义为 MUX 2。
- en: Pin configurations
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引脚配置
- en: '[Chapter 8](ch08.html "Chapter 8. Blinking Lights and Sensing the World"),
    *Blinking Lights and Sensing the World*, talks about the purpose of a pull-up
    resistor and a pull-down resistor. Allwinner-based SoCs actually have pull-up
    or pull-down resistors attached internally to the pins. The second angle-bracket
    surrounded parameter, `<1>`, in this case, enables the internal pull-up, a `<0>`
    here disables the pull-up/pull-down feature, and a `<2>` enables the pull-down
    feature. The pull-down feature is, however, only valid when the port is configured
    as an input; the SoC does not support pull-down on outputs. One more valid option
    is to use the keyword `<default>`, which tells the driver to use a safe default
    value.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html "第8章. 闪烁的灯光与感知世界")，*闪烁的灯光与感知世界*，讨论了上拉电阻和下拉电阻的作用。基于Allwinner的SoC实际上在引脚上内部附加了上拉或下拉电阻。在这种情况下，第二个角括号包围的参数`<1>`启用内部上拉，`<0>`禁用上拉/下拉功能，`<2>`启用下拉功能。然而，下拉功能仅在端口配置为输入时有效；SoC不支持输出端口的下拉功能。另一个有效选项是使用`<default>`关键字，告诉驱动程序使用安全的默认值。'
- en: 'The third angle-bracket surrounded parameter defines the current strength that
    the pin should output. There are four valid values: `0`, `1`, `2`, and `3`, where
    `0` corresponds to 10 mA, `1` to 20 mA, `2` to 30 mA, and `3` to 40 mA. The default
    value can be used to let the driver choose a safe default.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个角括号包围的参数定义了引脚应该输出的电流强度。有效值有四个：`0`、`1`、`2`和`3`，其中`0`对应10毫安，`1`对应20毫安，`2`对应30毫安，`3`对应40毫安。可以使用默认值让驱动程序选择一个安全的默认值。
- en: The fourth position defines the initial output level of the pin, which can be
    either low, `<0>`, or high, `<1>`. Naturally, this is only valid when configuring
    the pin as output. Also here, default means that the driver uses a safe default
    value.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个位置定义了引脚的初始输出电平，可以是低电平`<0>`或高电平`<1>`。自然，这仅在将引脚配置为输出时有效。此处的默认值意味着驱动程序使用一个安全的默认值。
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'While Port B: pins 22 and 23 were discussed and explained here, the rest of
    the pins and their muxes can be found on the linux-sunxi community wiki at [http://linux-sunxi.org/PIO](http://linux-sunxi.org/PIO).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在这里讨论和解释了端口B：引脚22和23，但其余的引脚及其多路复用设置可以在linux-sunxi社区的wiki上找到，[http://linux-sunxi.org/PIO](http://linux-sunxi.org/PIO)。
- en: Further reading
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: The FEX file contains many other such components that can be set up, varying
    from configuring which pins are used for the SD card reader to what color format
    is used for the LCD. All options that have been discovered are also documented
    at the linux-sunxi wiki page, [http://linux-sunxi.org/Fex_Guide](http://linux-sunxi.org/Fex_Guide).
    However, since each driver is written to read a key-value pair, things easily
    and often do change depending on the progression of the driver and kernel as a
    whole. When in doubt, the kernel source code can always be checked.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: FEX文件包含许多其他可以设置的组件，从配置使用哪些引脚来连接SD卡读卡器，到为LCD使用哪种颜色格式。所有已发现的选项也已在linux-sunxi wiki页面上进行了文档化，[http://linux-sunxi.org/Fex_Guide](http://linux-sunxi.org/Fex_Guide)。然而，由于每个驱动程序都是为读取键值对而编写的，因此根据驱动程序和内核整体的进展，事情很容易并且经常发生变化。如有疑问，始终可以检查内核源代码。
- en: Installing the configured FEX file
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装配置好的FEX文件
- en: Compiling the FEX file back into a bin file is nearly identical.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将FEX文件重新编译成bin文件几乎是一样的。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Depending what boot medium is being used, `script.bin` has to be copied back
    so that the device can use these new, changed values. This can be the `/dev/nanda`
    partition on the onboard NAND flash or the first partition that is FAT formatted
    on a microSD card.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 根据所使用的启动介质，`script.bin`必须被复制回去，以便设备能够使用这些新更改的值。这可以是板载NAND闪存上的`/dev/nanda`分区，或者是microSD卡上第一个FAT格式化的分区。
- en: After having put the `script.bin` into place, a reboot is required for the system
    to read these changes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在将`script.bin`放置到正确位置后，需要重启系统以使其读取这些更改。
- en: Summary
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This appendix gave a small introduction to the FEX file and showed how to modify
    it. The next appendix will try to cover the most basic troubleshooting for the
    most common pitfalls.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录简要介绍了FEX文件并展示了如何修改它。下一个附录将尝试覆盖最基本的故障排除内容，解决最常见的陷阱。

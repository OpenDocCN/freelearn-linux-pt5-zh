- en: Appendix A. Building OpenLDAP from Source
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A：从源代码构建OpenLDAP
- en: In this appendix, we will walk through the process of building OpenLDAP from
    source code. We will begin by configuring our Linux platform to compile OpenLDAP.
    Then we will configure, compile, and install OpenLDAP. Compiling OpenLDAP might
    sound daunting, but it is not, and I have attempted to provide instructions straightforward
    enough that even those without experience of C will be able to quickly compile
    from source.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将逐步介绍从源代码构建OpenLDAP的过程。我们将从配置Linux平台以编译OpenLDAP开始。接着，我们将配置、编译并安装OpenLDAP。编译OpenLDAP可能听起来很复杂，但其实并不复杂，我已尽力提供足够简明的说明，即使是没有C语言经验的人，也能快速从源代码编译。
- en: Why Build from Source?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要从源代码构建？
- en: Many Linux and UNIX distributions are slow to migrate from one version of OpenLDAP
    to another. The reasons for this are open to speculation, but one reason may be
    that distribution maintainers are reluctant to quickly adopt new versions of software
    when it already performs well, is integrated with other services, and performs
    a task that is security-sensitive and functionally central to many organizations.
    OpenLDAP, providing authentication services, is just such a service.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Linux和UNIX发行版迁移到OpenLDAP的新版本的速度较慢。具体原因可以推测，但其中一个可能的原因是，发行版维护者对于已经表现良好、已与其他服务集成并且在安全性和功能性上对许多组织至关重要的任务进行快速采纳新版本的软件持保留态度。提供认证服务的OpenLDAP正是这样的服务。
- en: Because of this reluctance, you may not find the latest and greatest version
    of OpenLDAP included in your Linux or UNIX distribution of choice. If you need
    (or want) the newest features that OpenLDAP has to offer, you may want to fetch
    a clean copy of the source code and build from scratch.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种不愿意更新的态度，你可能在选择的Linux或UNIX发行版中找不到最新的OpenLDAP版本。如果你需要（或者想要）OpenLDAP提供的最新功能，可能需要获取一个全新的源代码副本并从头开始构建。
- en: Getting the Code
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取代码
- en: To get the latest version of the code visit the official OpenLDAP website at
    [http://openldap.org](http://openldap.org). This site is hosted by the **OpenLDAP
    Foundation**, a non-profit group that governs and oversees the OpenLDAP project.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取最新版本的代码，请访问官方的OpenLDAP网站：[http://openldap.org](http://openldap.org)。该网站由**OpenLDAP基金会**托管，这是一个非盈利组织，负责管理和监督OpenLDAP项目。
- en: On the home page you will find a link to the current release in a highlighted
    box in the lower right-hand corner,as shown in the screenshot:.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页上，你会在右下角的突出框中找到当前版本的链接，如屏幕截图所示：
- en: '![Getting the Code](img/1021_AppA_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![获取代码](img/1021_AppA_01.jpg)'
- en: You can download the most recent stable version directly from there, or you
    can visit the download page (listed as **Download!**) in the center column of
    the table of links to find other versions (past versions, current experimental
    and beta versions, and so on).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接从那里下载最新的稳定版本，或者可以访问下载页面（在链接表格的中间列标记为**Download!**）来查找其他版本（过去的版本、当前的实验版和测试版等）。
- en: The Tools for Compiling
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译工具
- en: Whenever you build an application from source code, you need the right set of
    tools and libraries. OpenLDAP is no exception. Thankfully, OpenLDAP is a little
    lighter on requirements than some server applications out there.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你从源代码构建一个应用程序时，都会需要正确的工具和库。OpenLDAP也不例外。幸运的是，OpenLDAP对需求的要求比某些服务器应用程序要轻一些。
- en: Compiling is done on the command line, so you will need to open a terminal or
    otherwise gain access to the shell.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 编译是在命令行中进行的，因此你需要打开终端或以其他方式访问shell。
- en: Build Tools
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建工具
- en: You will need the standard tool chain for working with C and C++ applications;
    a C compiler, a linker, and a make program. Fortunately, all of these come as
    standard with almost every Linux distribution available. You can test your system
    for the appropriate tools using the `which` command, which will tell you where
    the tools are located on your filesystem (assuming they are in one of the directories
    listed in your `$PATH` environment variable).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要标准的工具链来处理C和C++应用程序；C编译器、连接器和make程序。幸运的是，几乎所有Linux发行版都会默认包含这些工具。你可以使用`which`命令测试系统中是否有适当的工具，这个命令会告诉你工具在文件系统中的位置（前提是它们位于`$PATH`环境变量中列出的某个目录下）。
- en: Here's a quick example of how you can check to see where the tools are and what
    the current version of each tool is. My system is Ubuntu Linux 6.06\. Version
    numbers on your own system may vary. That's okay. OpenLDAP should compile on all
    modern Linux distributions, and probably on all modern UNIX distributions as well.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个快速示例，展示如何检查工具的位置以及每个工具的当前版本。我使用的是Ubuntu Linux 6.06，您自己系统上的版本号可能会有所不同，没关系。OpenLDAP应该能够在所有现代Linux发行版上编译，可能也可以在所有现代UNIX发行版上编译。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In each case I used the `which` tool to know where the tool was located. The
    programs I checked were `gcc`, `ld`, and `make`—the compiler, linker, and make
    program (respectively). As long as some path is returned, this indicates that
    the tool is installed. If no command is found, `which` returns without any output.
    Thus, if I searched for a fake command, `blah`, the output would look like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，我使用`which`工具来查看工具的位置。我检查的程序有`gcc`、`ld`和`make`——分别是编译器、链接器和构建程序。只要返回了某个路径，就表示该工具已经安装。如果没有找到命令，`which`会没有任何输出。因此，如果我搜索一个不存在的命令，比如`blah`，输出会像这样：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Thus, if you run `which` for any of the programs (`gcc`, `ld`, or `make`), and
    get no output, it indicates that you do not have the required tool.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你运行`which`命令检查任何程序（如`gcc`、`ld`或`make`），如果没有输出，就表示你没有安装所需的工具。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On some UNIX systems, the GCC compiler (`gcc`) may not be present, but another
    C compiler may exist. The *de* *facto* name for C compilers is `cc`, and if `which`
    `gcc` yields no result, you may want to try `which` `cc`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些UNIX系统上，GCC编译器（`gcc`）可能不存在，但可能存在其他C编译器。C编译器的*事实*名称是`cc`，如果`which` `gcc`没有返回结果，你可以尝试`which`
    `cc`。
- en: After the `which` command in the given example, I ran each command with the
    `--version` flag (with *two* dashes before `version`) to tell me which version
    was installed. The `--version` flag is a GNU standard, but non-GNU programs (such
    as other versions of `make` or `cc`) may not support it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定示例中的`which`命令之后，我使用`--version`标志运行每个命令（在`version`前有*两个*破折号），以查看已安装的版本。`--version`标志是GNU标准，但非GNU程序（如其他版本的`make`或`cc`）可能不支持该标志。
- en: The next thing to do is set a couple of environment variables that will provide
    some basic settings for the given tools. While there are many options that you
    can provide to your tools through environment variables, here we will just provide
    the basics for building OpenLDAP.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的是设置几个环境变量，为给定工具提供一些基本的设置。虽然你可以通过环境变量为工具提供很多选项，但在这里我们只为构建OpenLDAP提供基本设置。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some Linux and UNIX distributions set the necessary environment variables for
    you. In such cases, it is almost always better to use the already-defined environment
    variables, which are often optimized specifically for your system, rather than
    the generic ones we will be setting now.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Linux和UNIX发行版会为你设置必要的环境变量。在这种情况下，通常最好使用已经定义好的环境变量，这些变量通常是专门为你的系统优化过的，而不是我们现在要设置的通用变量。
- en: To find out if you have the necessary environment variables, run the `env` command
    (with no arguments) and check the output to see if `CC`, `CFLAGS`, and `PATH`
    are defined.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查是否有必要的环境变量，可以运行`env`命令（不带任何参数），然后查看输出，确认`CC`、`CFLAGS`和`PATH`是否已经定义。
- en: 'One way to set environment variables is with the `export` command. When you
    use the `export` command, the environment variables will be stored for the duration
    of your shell session (in other words, until you exit from the shell or close
    the terminal window). Here we will set the necessary environment variables using
    `export`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 设置环境变量的一种方法是使用`export`命令。当你使用`export`命令时，环境变量会在当前Shell会话期间存储（换句话说，直到退出Shell或关闭终端窗口）。在这里，我们将使用`export`设置必要的环境变量：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first export sets the `$CC` environment variable to `gcc`. The make program
    will use this to determine which compiler to use. (If you are using the `cc` compiler
    instead, then adjust the example to point to `cc` instead of `gcc`). Note that
    when you *set* an environment variable, you do not use the dollar sign (`$`) before
    the variable name. When you *reference* the variable however, you will need to
    include the dollar sign.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`export`命令将`$CC`环境变量设置为`gcc`。`make`程序将使用这个来确定使用哪个编译器。（如果你使用的是`cc`编译器，而不是`gcc`，那么请调整示例，指向`cc`而不是`gcc`）。注意，当你*设置*环境变量时，变量名之前不需要加美元符号（`$`）。但是，当你*引用*变量时，必须包含美元符号。
- en: The second line sets the `$CFLAGS` variable. The `$CFLAGS` variables are the
    options that get passed to the compiler during compilation. In this case, we are
    passing it the option -`O2` (that's a captial letter O, not a zero). This tells
    the compiler to use level 2 optimization when compiling the code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行设置了`$CFLAGS`变量。`$CFLAGS`变量是在编译期间传递给编译器的选项。在这个例子中，我们传递了`-O2`选项（这是大写字母O，不是零）。这告诉编译器在编译代码时使用级别2的优化。
- en: The `$PATH` environment variable should also be set. However, by using the `which`
    command to see where our tools were, we have already verified that the necessary
    directories (that is, the directories that contain our tools) are specified in
    the `$PATH` variable.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`$PATH`环境变量也应设置好。然而，通过使用`which`命令查看我们的工具所在位置，我们已经验证了必要的目录（即包含我们工具的目录）已在`$PATH`变量中指定。'
- en: If you are dealing with a non-standard system or non-standard builds of any
    of the libraries, or if you are interested in passing some other options to the
    build tools, you may also have to use some additional environment variables. You
    can use `$CPPFLAGS` to pass options to the C preprocessor (`cpp`, part of GCC).
    Likewise, you can pass the linker (`ld`) options with the `$LDFLAGS` variable.
    Finally, if you have libraries (compiled modules of code used by other applications)
    that are stored in non-standard places, you can use the `$LIBS` variable to specify
    the location of these libraries. If you need to use the variables you should consult
    the documentation for the tools and libraries.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是非标准系统或某些库的非标准版本，或者你希望向构建工具传递其他选项，可能还需要使用一些额外的环境变量。你可以使用`$CPPFLAGS`来传递选项给C预处理器（`cpp`，是GCC的一部分）。同样，你可以使用`$LDFLAGS`变量传递链接器（`ld`）的选项。最后，如果你有存储在非标准位置的库（由其他应用程序使用的已编译代码模块），可以使用`$LIBS`变量来指定这些库的位置。如果需要使用这些变量，应该参考工具和库的文档。
- en: 'At any point you can check your environment variables with some simple commands.
    The `env` command (executed with no arguments) will list all of the environment
    variables currently defined, as well as their values. You can also check an individual
    environment variable with the `echo` command. Simply type `echo`, followed by
    the name of the environment variable to display the value of that environment
    variable:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，你都可以通过一些简单的命令检查你的环境变量。`env`命令（无参数执行）将列出当前定义的所有环境变量及其值。你也可以使用`echo`命令检查单个环境变量。只需输入`echo`，然后跟上环境变量的名称，即可显示该环境变量的值：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example `echo` `$PATH` shows the list of directories the shell searches
    to find programs. As you may recall the `which` command, when run, printed out
    the location of the specified tool. To find tools it searched each of the directories
    specified in the `$PATH` variable.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`echo` `$PATH`显示的是Shell搜索程序的目录列表。正如你可能还记得的，`which`命令执行时，会输出指定工具的位置。为了找到工具，它会搜索`$PATH`变量中指定的每个目录。
- en: 'At this point we are ready to move on to the next step: installing the necessary
    dependencies.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到此，我们可以继续下一步：安装必要的依赖项。
- en: Installing Dependencies
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: Dependencies are packages that OpenLDAP will require to compile and to run.
    Installing these dependencies will vary from platform to platform (and from Linux
    distro to Linux distro). Here, I will use the Debian tools (included in Ubuntu
    Linux) to install packages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项是OpenLDAP编译和运行时所需的包。安装这些依赖项因平台而异（并且因Linux发行版而异）。在这里，我将使用Debian工具（包含在Ubuntu
    Linux中）来安装这些包。
- en: 'OpenLDAP requires standard C libraries, regular expression libraries, and the
    Berkeley DB 4.2 (or later) libraries. These are almost always included in modern
    Linux distributions. In addition to the libraries, the header files are also required.
    Often these are stored in separate packages (usually called DEV packages). To
    install, for example, the Berkeley DB 4.2 development package in Ubuntu, you can
    execute the following command from the command line:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: OpenLDAP需要标准的C库、正则表达式库和Berkeley DB 4.2（或更高版本）库。这些库几乎总是包含在现代Linux发行版中。除了这些库，还需要头文件。这些头文件通常存储在单独的包中（通常称为DEV包）。例如，要在Ubuntu中安装Berkeley
    DB 4.2开发包，可以从命令行执行以下命令：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will fetch and install the required package.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这将获取并安装所需的包。
- en: 'There are various other packages that are useful to install, and we will need
    them in order to build all of the features that we use in this book. You will
    need to install:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他有用的软件包需要安装，我们需要它们来构建本书中使用的所有功能。你需要安装：
- en: OpenSSL (for SSL and TLS support)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSSL（用于 SSL 和 TLS 支持）
- en: SASL 2 (for SASL authentication support)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SASL 2（用于 SASL 认证支持）
- en: If you are interested in storing your directory in a relational database engine,
    such as MySQL or Oracle, you might also want to install iODBC2 (for database backend
    support).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣将目录存储在关系型数据库引擎中，例如 MySQL 或 Oracle，你还可能需要安装 iODBC2（用于数据库后台支持）。
- en: 'All of these packages are common on modern Linux system. Make sure that the
    packages are installed, and that the DEV (or `-dev`) add-ons for each of these
    is installed as well. In Ubuntu 6.06 these can be installed with one (rather long)
    command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些软件包在现代 Linux 系统中非常常见。确保已经安装这些软件包，并且每个软件包的 DEV（或 `-dev`）附加组件也已安装。在 Ubuntu 6.06
    中，可以通过一条（相当长的）命令安装：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Other distributions may use different installers, and even different package
    names, but you should have no problem finding them based on the bullet list of
    names that have been provided.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 其他发行版可能使用不同的安装程序，甚至使用不同的软件包名称，但根据提供的名称列表，你应该能够轻松找到它们。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: OpenLDAP includes many optional modules that provide additional functionality
    (such as debugging or integration with other services). These modules are not
    covered in this book, though you may choose to explore them on your own. Some
    of these modules require additional libraries. Consult the OpenLDAP documentation
    included in the source code for more specific information.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: OpenLDAP 包含许多可选模块，提供额外的功能（例如调试或与其他服务的集成）。这些模块在本书中没有涉及，但你可以选择自行探索。一些模块需要额外的库。有关更详细的信息，请查阅源代码中包含的
    OpenLDAP 文档。
- en: At this point you have all the tools and requirements necessary for building
    OpenLDAP. Now we move onward to the actual compiling process.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经具备了构建 OpenLDAP 所需的所有工具和要求。接下来我们将进入实际的编译过程。
- en: Compiling OpenLDAP
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译 OpenLDAP
- en: In the last section we prepared all of the tools and libraries for building
    OpenLDAP. In this section we will configure, compile, and test OpenLDAP.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们为构建 OpenLDAP 准备了所有工具和库。在本节中，我们将配置、编译并测试 OpenLDAP。
- en: 'First, we need to get our OpenLDAP server source code moved into a temporary
    directory for building. Copy the `openldap-2.3.x.tgz` file into the appropriate
    directory and then unpack the file:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将 OpenLDAP 服务器的源代码移动到一个临时目录中进行构建。将 `openldap-2.3.x.tgz` 文件复制到适当的目录，然后解压该文件：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, I created a new directory (called `build/`), copied the OpenLDAP source
    code archive into the new directory, changed the working directory to `build/`,
    and then unpacked the file with the `tar` utility (the flags `-zxf` instruct tar
    to uncompress (`z`) and extract the contents (`x`) of the file (`f`) `openldap-2.3.37.tgz`).
    Once this is done, the `build/` directory should contain a directory called `openldap-2.3.37`.
    Use `cd` to change to that directory: `cd` `openldap-2.3.37`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我创建了一个新的目录（名为 `build/`），将 OpenLDAP 源代码压缩包复制到新目录中，将工作目录切换到 `build/`，然后使用
    `tar` 工具解压该文件（`-zxf` 标志指示 tar 解压缩（`z`）并提取文件内容（`x`），文件（`f`）为 `openldap-2.3.37.tgz`）。完成后，`build/`
    目录应包含一个名为 `openldap-2.3.37` 的目录。使用 `cd` 切换到该目录：`cd` `openldap-2.3.37`。
- en: Configuring
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: 'Now we need to run the configuration script to prepare the source code for
    compiling. This script determines how OpenLDAP will be built, and what options
    will be enabled or disabled by default. OpenLDAP is very configurable, and there
    are many different options from which to choose. To see the complete list of options,
    you can run the configuration script with the `--help` flag:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要运行配置脚本，以准备源代码进行编译。这个脚本决定了 OpenLDAP 的构建方式，并确定哪些选项会默认启用或禁用。OpenLDAP 非常可配置，提供了许多不同的选项可以选择。要查看完整的选项列表，可以使用
    `--help` 标志运行配置脚本：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This command will print out a list of every option available for configuring
    OpenLDAP. It will also indicate whether or not the option is on by default. For
    example, the first few lines of the SLAPD database backend section looks like
    this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令会打印出所有可用于配置 OpenLDAP 的选项列表。它还会指示每个选项是否默认启用。例如，SLAPD 数据库后台部分的前几行如下所示：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can see that each option has three possible states: yes, no, and mod (which
    builds the component as a pluggable module instead of building it into slapd).
    Of those listed, only the flag `--enable-bdb`, which enables the Berkeley DB backend,
    is on by default.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，每个选项有三种可能的状态：yes、no和mod（mod表示将该组件构建为可插拔模块，而不是将其构建到slapd中）。在列出的选项中，只有`--enable-bdb`（启用Berkeley
    DB后端）默认是开启的。
- en: 'For the most part, the defaults are good. All of the crucial options are turned
    on by default. However, there are a few additional modules discussed in this book
    that are not on by default, and we will want to turn them on manually. They are:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，默认设置是合适的。所有关键选项默认都是开启的。然而，这本书中讨论的一些附加模块默认并未启用，我们需要手动启用它们。它们是：
- en: '`--enable-ldap`: Enables the LDAP backend storage mechanism (see Chapter 7)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--enable-ldap`：启用LDAP后端存储机制（参见第7章）'
- en: '`--enable-ppolicy`: Enables the password policy overlay (see Chapter 6)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--enable-ppolicy`：启用密码策略覆盖（参见第6章）'
- en: If you do not plan to use the ODBC database backend, you can add `--enable-sql`,
    but you will need to make sure that you install the iODBC2 packages discussed
    in the previous section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不打算使用ODBC数据库后端，可以添加`--enable-sql`，但你需要确保安装前面章节中提到的iODBC2包。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By default, OpenLDAP will be installed (with the final make install step) into
    subdirectories at `/usr/local`. This is the recommended place to put applications
    and libraries that are "local" applications. Packages that are not distributed
    as standard pre-configured applications (like deb or RPM packages) are considered
    local packages. If you want to put the package somewhere else, use the `--prefix`
    and `--exec-prefix` flags.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，OpenLDAP将在`/usr/local`的子目录中安装（通过最终的make install步骤）。这是推荐放置“本地”应用程序和库的地方。那些没有作为标准预配置应用程序（如deb或RPM包）发布的包被视为本地包。如果你希望将包放置在其他位置，可以使用`--prefix`和`--exec-prefix`标志。
- en: 'Now we are ready to run the configuration command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好运行配置命令了：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will kick off an evaluation process that may take several minutes. The
    configuration script will systematically evaluate your system settings, determining
    what tools you are using, how it should build, and whether or not the system has
    all of the necessary libraries.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个评估过程，可能需要几分钟时间。配置脚本将系统地评估你的系统设置，确定你正在使用的工具、如何构建以及系统是否具备所有必要的库文件。
- en: If the configure process terminates with an error, it will indicate why it failed.
    Usually, this failure will indicate that one of the required libraries or tools
    is not present. For example, if it dies with an error stating that `sql.h` is
    missing, this indicates that the iODBC2 header files (from `libiodbc2-dev` in
    Ubuntu) were not found. This usually indicates that they are not installed at
    all, though it may also indicate that they were installed in a non-standard location.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果配置过程终止并显示错误，它会说明失败的原因。通常，这种失败表明缺少某个必需的库或工具。例如，如果错误信息显示`sql.h`缺失，这表明没有找到iODBC2的头文件（在Ubuntu中是`libiodbc2-dev`）。这通常意味着它们根本没有安装，尽管也可能是它们安装在了非标准位置。
- en: 'Some missing libraries will not stop configure from running. Such packages
    will generate errors instead of warnings. Two examples of this are the OpenSSL
    libraries and the SASL libraries. Once the configuration script has completed,
    scroll back through the results and make sure there are no lines that look like
    this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一些缺失的库不会阻止配置过程运行。这些包会生成错误而不是警告。比如OpenSSL库和SASL库就是这种情况。一旦配置脚本完成运行，回滚查看结果，确保没有类似以下的行：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: or
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you see these you will probably want to make sure the appropriate packages
    (remember the DEV packages) are installed, and then re-run the `./configure` script.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到这些，你可能需要确保已安装适当的包（记得是DEV包），然后重新运行`./configure`脚本。
- en: Once the configuration script has run through, and there are no warnings or
    errors, you are ready to build OpenLDAP's source code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置脚本完成运行，并且没有警告或错误，你就可以开始构建OpenLDAP的源代码了。
- en: Building with make
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用make进行构建
- en: 'Building with make is a two-step process. First, the auxiliary libraries must
    be built, then the main tools and servers must be built. Fortunately, all this
    hard work can be done in one short command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用make构建是一个两步过程。首先，需要构建辅助库，然后构建主工具和服务器。幸运的是，所有这些繁重的工作都可以通过一个简短的命令完成：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will compile all of the libraries (`make` `depend`) and then, if the first
    part was successful, it will run the main build (`make`). Compiling may take a
    long time.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译所有的库（`make` `depend`），然后，如果第一部分成功，它将运行主构建（`make`）。编译可能需要很长时间。
- en: Usually, the configuration script makes sure everything is in order before the
    main compilation begins. On rare occasions though, one of the two make commands
    may fail. If this happens you will have to evaluate the error message and determine
    what steps to take to fix the problem. In most cases the problem has to do with
    an unsatisfied dependency—some package or tool that OpenLDAP requires is not installed,
    and (for one reason or another), this gap was not noticed by the configuration
    script.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，配置脚本会在主编译开始前确保一切正常。然而，极少数情况下，其中一个 `make` 命令可能会失败。如果发生这种情况，您需要评估错误信息并确定采取哪些步骤来修复问题。在大多数情况下，问题与未满足的依赖关系有关——OpenLDAP
    所需的某些软件包或工具未安装，且（由于某种原因）配置脚本未注意到这个问题。
- en: Sometimes the documentation included with OpenLDAP (`README`, `make`, and the
    documentation in the `docs/`, `libraries/`, and `servers/` directories) will point
    out possible problems.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，OpenLDAP 附带的文档（`README`、`make` 和 `docs/`、`libraries/`、`servers/` 目录中的文档）会指出可能的问题。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the make fails and you cannot find the problem, your best bet may be to search
    the OpenLDAP mailing list archives (visit [http://openldap.org](http://openldap.org))
    or, if all else fails, subscribe to the mailing list and ask about the problem
    there.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `make` 失败且您找不到问题所在，最佳的做法是搜索 OpenLDAP 邮件列表存档（访问 [http://openldap.org](http://openldap.org)），或者，如果一切都失败了，订阅邮件列表并在那里询问该问题。
- en: 'Once the compiling process ends, it is a good idea to run the automated testing
    procedure to make sure that the code was built correctly. This is also done with
    `make`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编译过程结束，建议运行自动化测试程序以确保代码构建正确。这也是通过 `make` 来完成的：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Because the test includes frequent programmatic delays and performs dozens of
    tests, this process may take several minutes to complete. When it is done, review
    the output and make sure there are no errors. Note that some of the test will
    be skipped because we did not compile OpenLDAP with all of the possible options
    turned on. Skipped tests are normal and are nothing to worry about.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于测试包括频繁的程序延迟并执行数十个测试，因此这个过程可能需要几分钟才能完成。完成后，请查看输出并确保没有错误。请注意，由于我们没有使用所有可能的选项编译
    OpenLDAP，部分测试将被跳过。跳过的测试是正常现象，无需担心。
- en: Now we are ready to install our fresh new OpenLDAP server.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好安装全新的 OpenLDAP 服务器。
- en: Installation
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'Installing is done with one additional command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 安装只需执行一个额外的命令：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'On some versions of Linux or UNIX, instead of using `sudo`, you will need to
    switch users (`su`) to root and run the make install command as root: `su` `-c`
    `‘make` `install''`. You will be prompted to enter the password for your account
    (or, if you use `su` instead of `sudo`, the root password). Once you have correctly
    entered the password, the necessary OpenLDAP files will be copied to subdirectories
    of `/usr/local`.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些版本的 Linux 或 UNIX 中，您需要切换用户（`su`）为 root，并以 root 用户身份运行安装命令：`su` `-c` `'make`
    `install'`。系统会提示您输入帐户密码（或者，如果使用 `su` 而非 `sudo`，则需要输入 root 密码）。输入正确密码后，必要的 OpenLDAP
    文件将被复制到 `/usr/local` 的子目录中。
- en: 'On some systems, the directories that contain local executable files (`/usr/local/bin`
    and `/usr/local/sbin`) are not included in the `$PATH` environment variable. As
    a result, simply typing an OpenLDAP command at a command line may return an error.
    One way to get around this problem is to type in the entire path to the command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些系统中，包含本地可执行文件的目录（`/usr/local/bin` 和 `/usr/local/sbin`）没有包含在 `$PATH` 环境变量中。因此，仅在命令行输入
    OpenLDAP 命令可能会返回错误。解决此问题的一种方法是输入命令的完整路径：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'But this can be tedious. You can also append the appropriate paths to your
    `$PATH` environment variable. Then you will be able to simply issue the command
    without specifying the absolute path to the command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但这可能很繁琐。您还可以将适当的路径附加到您的 `$PATH` 环境变量中。然后，您将能够直接执行命令，而无需指定命令的绝对路径：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this example the export command re-sets `$PATH` for the current session.
    So the variable `$PATH` is assigned the values `/usr/local/bin`, `/usr/local/sbin`,
    and the contents of the current `$PATH` variable (which likely contains `/bin`,
    `/sbin`, `/usr/bin`, and other directories). Order is important. When the shell
    is searching for a command (`slapcat`, in the given example), it will search from
    the first directory in `$PATH` on to the last directory. As soon as it finds a
    match, it will stop searching. So, for example, if there were two `slapcat` commands,
    the shell would use the first one it found. In our case, it is best to put the
    two `/usr/local` directories early in the path just in case an older version of
    LDAP is installed elsewhere on the file system.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，export 命令会重新设置当前会话的 `$PATH`。因此，变量 `$PATH` 会被赋予 `/usr/local/bin`、`/usr/local/sbin`
    和当前 `$PATH` 变量的内容（其中可能包含 `/bin`、`/sbin`、`/usr/bin` 和其他目录）。顺序很重要。当 shell 搜索一个命令（在这个例子中是
    `slapcat`）时，它会从 `$PATH` 中的第一个目录开始，一直到最后一个目录。只要找到匹配项，它就会停止搜索。因此，例如，如果存在两个 `slapcat`
    命令，shell 会使用它找到的第一个命令。在我们的案例中，最好将两个 `/usr/local` 目录放在路径的前面，以防文件系统的其他地方安装了旧版本的
    LDAP。
- en: Usually, the `export` command should be added to the shell configuration file
    (for example `~/.bash_profile`) so that the additional path information is automatically
    added every time you start a shell session.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`export` 命令应该添加到 shell 配置文件中（例如 `~/.bash_profile`），以便每次启动 shell 会话时自动添加额外的路径信息。
- en: You are now ready to configure the new version of OpenLDAP.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以开始配置新版本的 OpenLDAP。
- en: Building Everything
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建所有内容
- en: In the build mentioned in the previous section we compiled only the basics.
    This gets us what we need to run just the basics. But there are lots of OpenLDAP
    backends and overlays that can be useful (many of which are covered in this book).
    In cases where we want to build everything, typically it is best to compile OpenLDAP
    with module support, and compile all of the overlays and backends as modules.
    That way we can have all of the extras available, but only the ones needed (and
    configured in `slapd.conf`) get loaded at runtime.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节提到的构建中，我们只编译了基础内容。这能让我们运行最基本的功能。但 OpenLDAP 有许多可能有用的后端和覆盖层（书中会介绍许多）。在我们想要构建所有内容时，通常最好编译带模块支持的
    OpenLDAP，并将所有覆盖层和后端编译为模块。这样，我们可以获得所有附加功能，但只有在运行时需要（并在`slapd.conf`中配置）的模块才会被加载。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Many of the additional backends and overlays have their own dependencies. For
    example, the Perl backend requires that the Perl libraries be installed. Most
    of the necessary dependencies are installed by default in Ubuntu. If you don't
    have the requisite libraries for a module, the `configure` or `make` programs
    will let you know what library is missing, and you will have to track down which
    package contains that library. For this process, you may find the package search
    on Debian's website useful ([http://www.us.debian.org/distrib/packages#search_contents](http://www.us.debian.org/distrib/packages#search_contents)).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 许多附加的后端和覆盖层有自己的依赖项。例如，Perl 后端要求安装 Perl 库。Ubuntu 默认安装了大多数必需的依赖项。如果你没有某个模块所需的库，`configure`
    或 `make` 程序会告诉你缺少哪个库，你需要追踪包含该库的包。对于这个过程，你可以参考 Debian 网站上的包搜索功能（[http://www.us.debian.org/distrib/packages#search_contents](http://www.us.debian.org/distrib/packages#search_contents)）。
- en: 'Since we are building OpenLDAP with modules, we will need to make sure that
    `libtool` and the libtool header files are installed. In Ubuntu, it is not installed
    by default. Also, since the Perl backend (`back_perl`) will be installed, we will
    need to install the Perl development package. You can install all of these with
    one command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在构建带有模块的 OpenLDAP，所以我们需要确保安装了`libtool`和 libtool 头文件。在 Ubuntu 中，它默认没有安装。此外，由于
    Perl 后端（`back_perl`）将被安装，我们还需要安装 Perl 开发包。你可以通过一个命令安装所有这些：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `libltdl3` library is usually installed by default, but the others are also
    needed to compile OpenLDAP with module support. Now we are ready to build OpenLDAP
    with modules.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`libltdl3` 库通常会默认安装，但其他库也需要用来编译带模块支持的 OpenLDAP。现在，我们已经准备好构建带模块的 OpenLDAP。'
- en: 'To build OpenLDAP with all of the extra modules, we just need to use the correct
    flags with `configure`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建带有所有额外模块的 OpenLDAP，我们只需在`configure`时使用正确的标志：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To build everything we need only four flags. The first, `--enable-dynamic`
    enables shared libraries. Second, `--enable-modules` simply tells `configure`
    that we want to use modules. The next two indicate what backends and overlays
    we want built: `--enable-overlays`, which is set to `mod` in order to build modules,
    and `–enable-backends` (also set to `mod`) to build all of the available backends.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 构建所有内容只需要四个标志。第一个，`--enable-dynamic` 启用共享库。第二个，`--enable-modules` 简单地告诉 `configure`
    我们希望使用模块。接下来的两个标志指示我们希望构建的后端和覆盖层：`--enable-overlays`，设置为 `mod` 以构建模块，以及 `–enable-backends`（同样设置为
    `mod`）以构建所有可用的后端。
- en: 'Once `configure` completes, you can run `make`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `configure` 完成，你可以运行 `make`：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will build all the dependencies, then build OpenLDAP (and all of the modules),
    and then test everything. When you are ready to install, you can follow the instructions
    in the previous section.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建所有依赖项，然后构建 OpenLDAP（以及所有模块），最后测试所有内容。当你准备好安装时，可以按照上一节中的说明进行操作。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this appendix we have briefly examined the process of building OpenLDAP from
    source. At this point you should have the information necessary for building OpenLDAP
    from source.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们简要介绍了从源代码构建 OpenLDAP 的过程。此时，你应该已经具备了从源代码构建 OpenLDAP 所需的信息。
- en: We have looked at a very basic build and also a complete build using modules.
    But there are many other available options. You can learn more about building
    OpenLDAP from the documentation included with OpenLDAP.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一个非常基础的构建过程，以及一个使用模块的完整构建过程。但还有许多其他可用的选项。你可以通过 OpenLDAP 附带的文档了解更多关于构建
    OpenLDAP 的信息。
